
gh60_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  0000541a  000054ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000541a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ae  00800138  00800138  000054e6  2**0
                  ALLOC
  3 .noinit       00000004  008001e6  008001e6  000054e6  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  000054e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000000a0  00000000  00000000  00005da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005e40  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a98  00000000  00000000  00005e58  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000107ad  00000000  00000000  000068f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003ebb  00000000  00000000  0001709d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000584c  00000000  00000000  0001af58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001b30  00000000  00000000  000207a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000045fd  00000000  00000000  000222d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008d13  00000000  00000000  000268d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bf0  00000000  00000000  0002f5e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
       0:	0c 94 dd 05 	jmp	0xbba	; 0xbba <__ctors_end>
       4:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
       8:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
       c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      10:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      14:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      18:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
	uint8_t ErrorCode;

	while (*BytesRem)
      1c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      20:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      24:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
      28:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <__vector_10>
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
      2c:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__vector_11>
      30:	0c 94 55 1e 	jmp	0x3caa	; 0x3caa <__vector_12>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
      34:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      38:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      3c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
      40:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
			{
				*CurrConfigLoc = PrevDescLoc;
      44:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
				*BytesRem      = PrevBytesRem;
      48:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      4c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
      50:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      54:	0c 94 bc 1e 	jmp	0x3d78	; 0x3d78 <__vector_21>
      58:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      5c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      60:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      64:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      68:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      70:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      74:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      78:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      7c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
      80:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      84:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      88:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
      8c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      90:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      94:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
      98:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      a0:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      a4:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a8:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__bad_interrupt>
      ac:	03 0f       	add	r16, r19
      ae:	25 0f       	add	r18, r21
      b0:	11 10       	cpse	r1, r1
      b2:	25 0f       	add	r18, r21
      b4:	11 10       	cpse	r1, r1
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	67 0f       	add	r22, r23
      b8:	8b 0f       	add	r24, r27
      ba:	11 10       	cpse	r1, r1
      bc:	e0 0f       	add	r30, r16
      be:	f3 0f       	add	r31, r19
      c0:	3b 13       	cpse	r19, r27
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	3b 13       	cpse	r19, r27
      c4:	69 13       	cpse	r22, r25
      c6:	69 13       	cpse	r22, r25
      c8:	be 13       	cpse	r27, r30
      ca:	fa 13       	cpse	r31, r26
      cc:	eb 15       	cp	r30, r11
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	eb 15       	cp	r30, r11
      d0:	12 14       	cp	r1, r2
      d2:	eb 15       	cp	r30, r11
      d4:	09 15       	cp	r16, r9
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	09 15       	cp	r16, r9
      d8:	c5 15       	cp	r28, r5
      da:	eb 15       	cp	r30, r11
      dc:	eb 15       	cp	r30, r11
      de:	d9 15       	cp	r29, r9

000000e0 <__trampolines_end>:
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	f1 a1       	ldd	r31, Z+33	; 0x21

000000e2 <keymaps>:
      e2:	29 1e 1f 20 21 22 23 24 25 26 27 2d 2e 31 2b 14     ).. !"#$%&'-.1+.
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
      f2:	1a 08 15 17 1c 18 0c 12 13 2f 30 2a c1 04 16 07     ........./0*....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     102:	09 0a 0b 0d 0e 0f 33 34 28 4b e1 1d 1b 06 19 05     ......34(K......
     112:	11 10 36 37 38 e5 52 4e e0 e2 e3 2c e7 e6 00 00     ..678.RN...,....
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     122:	e4 00 00 00 50 51 35 3a 3b 3c 3d 3e 3f 40 41 42     ....PQ5:;<=>?@AB
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     132:	43 44 45 01 01 01 01 01 01 01 01 01 01 01 01 01     CDE.............
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
				ReportData     += 4;
     142:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 a8     ................
				break;
			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     152:	01 01 01 01 01 01 01 01 01 01 01 01 4b 01 01 01     ............K...
				ReportSize     -= 2;
				ReportData     += 2;
     162:	01 2c 01 01 00 00 01 00 00 00 01 4e                 .,.........N

0000016e <__c.2365>:
				break;
			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     16e:	0a 00                                               ..

00000170 <__c.2363>:
     170:	25 30 31 36 62 00                                   %016b.

00000176 <__c.2361>:
				ReportSize     -= 1;
				ReportData     += 1;
     176:	3a 20 00                                            : .

00000179 <__c.2359>:
     179:	25 30 32 58 00                                      %02X.

0000017e <__c.2356>:
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     17e:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     18e:	42 43 44 45 46 0a 00                                BCDEF..

00000195 <__c.2329>:
     195:	0a 00                                               ..

00000197 <__c.2327>:
     197:	25 30 32 58 00                                      %02X.

0000019c <__c.2325>:
     19c:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

000001a6 <__c.4744>:
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1a6:	5b 73 5d 00                                         [s].

000001aa <__c.4742>:
     1aa:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ba:	00                                                  .

000001bb <__c.4740>:
     1bb:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     1cb:	00                                                  .

000001cc <__c.4638>:
     1cc:	5b 57 5d 00                                         [W].

000001d0 <__c.4634>:
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d0:	5b 53 5d 00                                         [S].

000001d4 <__c.4630>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1d4:	5b 52 5d 00                                         [R].

000001d8 <__c.4625>:
     1d8:	5b 44 5d 00                                         [D].

000001dc <__c.4620>:
     1dc:	5b 43 5d 00                                         [C].

000001e0 <ProductString>:
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e0:	0e 03 6a 00 75 00 6c 00 69 00 61 00 6e 00 00 00     ..j.u.l.i.a.n...

000001f0 <ManufacturerString>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f0:	0e 03 6a 00 75 00 6c 00 69 00 61 00 6e 00 00 00     ..j.u.l.i.a.n...

00000200 <LanguageString>:
     200:	04 03 09 04                                         ....

00000204 <ConfigurationDescriptor>:
     204:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     214:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     224:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     234:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     244:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     254:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     264:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     284:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

00000291 <DeviceDescriptor>:
				break;
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     291:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
				break;
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2a1:	00 01                                               ..

000002a3 <NKROReport>:
     2a3:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2b3:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2c3:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d3:	25 01 95 78 75 01 81 02 c0                          %..xu....

000002dc <ConsoleReport>:

				if (ParserData->UsingReportIDs)
     2dc:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2ec:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

000002fc <ExtrakeyReport>:
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2fc:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     30c:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     31c:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     32c:	10 95 01 81 00 c0                                   ......

00000332 <MouseReport>:
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     332:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     342:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     352:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     362:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
					}
				}

				ParserData->UsingReportIDs = true;

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     372:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

0000037f <KeyboardReport>:
     37f:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     38f:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     39f:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3af:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

000003be <__c.4395>:
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3be:	0a 00                                               ..

000003c0 <__c.4390>:
     3c0:	25 30 32 58 20 00                                   %02X .

000003c6 <__c.4387>:
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3c6:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3d6:	20 00                                                .

000003d8 <__c.4732>:
     3d8:	0a 00                                               ..

000003da <__c.4730>:
     3da:	25 30 32 58 00                                      %02X.

000003df <__c.4728>:
     3df:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3ef:	3a 20 00                                            : .

000003f2 <__c.4535>:
     3f2:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
				}

				CurrCollectionPath->Type       = ReportItemData;
     402:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000410 <__c.4530>:
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     410:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can

				if (UsageListSize)
     420:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

0000042e <__c.4672>:
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42e:	64 6f 6e 65 2e 0a 00                                done...

00000435 <__c.4666>:
     435:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 

					for (uint8_t i = 0; i < UsageListSize; i++)
     445:	2e 2e 2e 20 00                                      ... .

0000044a <__c.4467>:
     44a:	29 0a 00                                            )..

0000044d <__c.4465>:
     44d:	25 75 00                                            %u.

00000450 <__c.4463>:
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     450:	2f 00                                               /.

00000452 <__c.4461>:
     452:	25 75 00                                            %u.

00000455 <__c.4459>:
     455:	5d 28 00                                            ](.

00000458 <__c.4457>:
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     458:	25 64 00                                            %d.

0000045b <__c.4455>:
     45b:	20 00                                                .

0000045d <__c.4453>:
     45d:	25 64 00                                            %d.

00000460 <__c.4451>:
     460:	20 00                                                .

00000462 <__c.4449>:
     462:	25 64 00                                            %d.

00000465 <__c.4447>:
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     465:	20 00                                                .

00000467 <__c.4445>:
     467:	25 64 00                                            %d.

0000046a <__c.4443>:
     46a:	7c 00                                               |.

0000046c <__c.4441>:
     46c:	25 30 32 58 00                                      %02X.

00000471 <__c.4439>:
     471:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     481:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     491:	20 5b 00                                             [.

00000494 <__c.5061>:
     494:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4a4:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000004af <__c.5058>:
     4af:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     4bf:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000004c8 <__c.5055>:
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4c8:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     4d8:	20 25 64 0a 00                                       %d..

000004dd <__c.5052>:
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4dd:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4ed:	64 0a 00                                            d..

000004f0 <__c.5049>:
     4f0:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
     500:	0a 00                                               ..

00000502 <__c.5045>:
     502:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000511 <__c.5038>:
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     511:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     521:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

0000052c <__c.5035>:
     52c:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe

						for (uint8_t i = 0; i < UsageListSize; i++)
						  UsageList[i] = UsageList[i + 1];
     53c:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

00000545 <__c.5032>:

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     545:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     555:	20 25 64 0a 00                                       %d..

0000055a <__c.5029>:
     55a:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     56a:	64 0a 00                                            d..

0000056d <__c.5026>:
     56d:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57d:	0a 00                                               ..

0000057f <__c.5022>:
     57f:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

0000058e <__c.5015>:
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     58e:	0a 00                                               ..

00000590 <__c.5013>:
     590:	25 75 00                                            %u.

00000593 <__c.5011>:
     593:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5a3:	5f 6d 61 78 3a 20 00                                _max: .

000005aa <__c.5009>:
     5aa:	0a 00                                               ..

000005ac <__c.5007>:
     5ac:	25 75 00                                            %u.

000005af <__c.5005>:
     5af:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5bf:	65 64 3a 20 00                                      ed: .

000005c4 <__c.5003>:
     5c4:	0a 00                                               ..

000005c6 <__c.5001>:
     5c6:	25 75 00                                            %u.

000005c9 <__c.4999>:
     5c9:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     5d9:	00                                                  .

000005da <__c.4997>:
     5da:	0a 00                                               ..

000005dc <__c.4995>:
     5dc:	25 75 00                                            %u.

000005df <__c.4993>:
     5df:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

000005ee <__c.4991>:

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5ee:	0a 00                                               ..

000005f0 <__c.4989>:
     5f0:	25 75 00                                            %u.

000005f3 <__c.4987>:
					  return HID_PARSE_InsufficientReportItems;
     5f3:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     603:	20 00                                                .

00000605 <__c.4985>:
     605:	0a 00                                               ..

00000607 <__c.4983>:
     607:	25 75 00                                            %u.

0000060a <__c.4981>:
     60a:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     61a:	20 00                                                .

0000061c <__c.4979>:
     61c:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

0000062a <__c.5099>:
     62a:	4d 3e 00                                            M>.

0000062d <__c.5097>:
     62d:	4d 25 64 3e 20 00                                   M%d> .

00000633 <__c.5095>:
     633:	3f 00                                               ?.

00000635 <__c.5092>:
     635:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

00000642 <__c.5078>:
     642:	43 3e 20 00                                         C> .

00000646 <__c.5068>:
     646:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     656:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     666:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     676:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     686:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000694 <__c.5066>:
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     694:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
			UsageListSize       = 0;
     6a4:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6b4:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6c4:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d4:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     6e4:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     6f4:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     704:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     714:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     724:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     734:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     744:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     754:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     764:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     774:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     784:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

0000078f <__c.4971>:
     78f:	3f 00                                               ?.

00000791 <__c.4968>:
     791:	4d 3e 20 00                                         M> .

00000795 <__c.4973>:
     795:	43 3e 20 00                                         C> .

00000799 <__c.5117>:
     799:	4c 25 64 0a 00                                      L%d..

0000079e <__c.4957>:
     79e:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     7ae:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     7be:	73 65 6b 65 79 0a 00                                sekey..

000007c5 <__c.4783>:
     7c5:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     7d5:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     7e5:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     7f5:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     805:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     815:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     825:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     835:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     845:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     855:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 6e 3a 09 4e     r.e:.eeprom.n:.N
     865:	4b 52 4f 0a 00                                      KRO..

0000086a <__c.4878>:
     86a:	0a 00                                               ..

0000086c <__c.4876>:
     86c:	25 75 00                                            %u.

0000086f <__c.4874>:
     86f:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000877 <__c.4872>:
     877:	0a 00                                               ..

00000879 <__c.4870>:
     879:	25 75 00                                            %u.

0000087c <__c.4868>:
     87c:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     88c:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000898 <__c.4866>:
     898:	0a 00                                               ..

0000089a <__c.4864>:
     89a:	25 75 00                                            %u.

0000089d <__c.4862>:
     89d:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     8ad:	20 00                                                .

000008af <__c.4860>:
     8af:	0a 00                                               ..

000008b1 <__c.4858>:
     8b1:	25 75 00                                            %u.

000008b4 <__c.4856>:
     8b4:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

000008be <__c.4854>:
     8be:	0a 00                                               ..

000008c0 <__c.4852>:
     8c0:	25 75 00                                            %u.

000008c3 <__c.4850>:
     8c3:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     8d3:	20 00                                                .

000008d5 <__c.4848>:
     8d5:	0a 00                                               ..

000008d7 <__c.4846>:
     8d7:	25 75 00                                            %u.

000008da <__c.4844>:
     8da:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     8ea:	20 00                                                .

000008ec <__c.4842>:
     8ec:	0a 00                                               ..

000008ee <__c.4840>:
     8ee:	25 75 00                                            %u.

000008f1 <__c.4838>:
     8f1:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     901:	74 72 6f 6c 3a 20 00                                trol: .

00000908 <__c.4836>:
     908:	0a 00                                               ..

0000090a <__c.4834>:
     90a:	25 75 00                                            %u.

0000090d <__c.4832>:
     90d:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     91d:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000926 <__c.4830>:
     926:	0a 00                                               ..

00000928 <__c.4828>:
     928:	25 30 32 58 00                                      %02X.

0000092d <__c.4826>:
     92d:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     93d:	77 3a 20 00                                         w: .

00000941 <__c.4823>:
     941:	0a 00                                               ..

00000943 <__c.4821>:
     943:	25 75 00                                            %u.

00000946 <__c.4819>:
     946:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

0000094f <__c.4817>:
     94f:	0a 00                                               ..

00000951 <__c.4815>:
     951:	25 75 00                                            %u.

00000954 <__c.4813>:
     954:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000960 <__c.4811>:
     960:	0a 00                                               ..

00000962 <__c.4809>:
     962:	25 75 00                                            %u.

00000965 <__c.4807>:
     965:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

0000096f <__c.4805>:
     96f:	0a 00                                               ..

00000971 <__c.4803>:
     971:	25 75 00                                            %u.

00000974 <__c.4801>:
     974:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

0000097e <__c.4799>:
     97e:	0a 00                                               ..

00000980 <__c.4797>:
     980:	25 30 32 58 00                                      %02X.

00000985 <__c.4795>:
     985:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     995:	3a 20 00                                            : .

00000998 <__c.4792>:
     998:	0a 00                                               ..

0000099a <__c.4790>:
     99a:	25 75 00                                            %u.

0000099d <__c.4788>:
     99d:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

000009ad <__c.4952>:
     9ad:	3f 00                                               ?.

000009af <__c.4943>:
     9af:	4e 4b 52 4f 3a 20 6f 66 66 0a 00                    NKRO: off..

000009ba <__c.4941>:
     9ba:	4e 4b 52 4f 3a 20 6f 6e 0a 00                       NKRO: on..

000009c4 <__c.4938>:
     9c4:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     9d4:	6c 58 0a 00                                         lX..

000009d8 <__c.4936>:
     9d8:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     9e8:	58 0a 00                                            X..

000009eb <__c.4934>:
     9eb:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     9fb:	6c 3a 20 25 58 0a 00                                l: %X..

00000a02 <__c.4932>:
     a02:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     a12:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000a1c <__c.4930>:
     a1c:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

00000a2a <__c.4927>:
     a2a:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     a3a:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     a4a:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000a58 <__c.4925>:
     a58:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     a68:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     a78:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     a88:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     a98:	30 39 36 0a 00                                      096..

00000a9d <__c.4923>:
     a9d:	42 55 49 4c 44 3a 20 38 31 64 33 34 32 63 2d 64     BUILD: 81d342c-d
     aad:	69 72 74 79 20 28 32 31 3a 33 30 3a 31 32 20 4a     irty (21:30:12 J
     abd:	75 6c 20 32 36 20 32 30 31 35 29 0a 00              ul 26 2015)..

00000aca <__c.4921>:
     aca:	56 49 44 3a 20 30 78 46 45 45 44 28 6a 75 6c 69     VID: 0xFEED(juli
     ada:	61 6e 29 20 50 49 44 3a 20 30 78 36 30 36 30 28     an) PID: 0x6060(
     aea:	6a 75 6c 69 61 6e 29 20 56 45 52 3a 20 30 78 30     julian) VER: 0x0
     afa:	30 30 31 0a 00                                      001..

00000aff <__c.4919>:
     aff:	44 45 53 43 3a 20 66 69 72 6d 77 61 72 65 20 66     DESC: firmware f
     b0f:	6f 72 20 74 68 65 20 74 65 65 6e 73 79 0a 00        or the teensy..

00000b1e <__c.4917>:
     b1e:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000b2d <__c.4914>:
     b2d:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000b3a <__c.4912>:
     b3a:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000b46 <__c.4909>:
     b46:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000b56 <__c.4907>:
     b56:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000b65 <__c.4904>:
     b65:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000b73 <__c.4902>:
     b73:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000b80 <__c.4899>:
     b80:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000b8d <__c.4897>:
     b8d:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000b99 <__c.4894>:
     b99:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     ba9:	00                                                  .

00000baa <__c.4891>:
     baa:	43 3e 20 00                                         C> .

00000bae <__c.4885>:
     bae:	65 65 63 6f 6e 66 69 67 3a 0a 00 00                 eeconfig:...

00000bba <__ctors_end>:
     bba:	11 24       	eor	r1, r1
     bbc:	1f be       	out	0x3f, r1	; 63
     bbe:	cf ef       	ldi	r28, 0xFF	; 255
     bc0:	da e0       	ldi	r29, 0x0A	; 10
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	cd bf       	out	0x3d, r28	; 61

00000bc6 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     bc6:	04 b6       	in	r0, 0x34	; 52
     bc8:	03 fe       	sbrs	r0, 3
     bca:	24 c0       	rjmp	.+72     	; 0xc14 <__do_copy_data>
     bcc:	80 91 e6 01 	lds	r24, 0x01E6
     bd0:	90 91 e7 01 	lds	r25, 0x01E7
     bd4:	a0 91 e8 01 	lds	r26, 0x01E8
     bd8:	b0 91 e9 01 	lds	r27, 0x01E9
     bdc:	87 30       	cpi	r24, 0x07	; 7
     bde:	90 4b       	sbci	r25, 0xB0	; 176
     be0:	a7 40       	sbci	r26, 0x07	; 7
     be2:	b0 4b       	sbci	r27, 0xB0	; 176
     be4:	b9 f4       	brne	.+46     	; 0xc14 <__do_copy_data>
        reset_key = 0;
     be6:	10 92 e6 01 	sts	0x01E6, r1
     bea:	10 92 e7 01 	sts	0x01E7, r1
     bee:	10 92 e8 01 	sts	0x01E8, r1
     bf2:	10 92 e9 01 	sts	0x01E9, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     bf6:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     bf8:	84 b7       	in	r24, 0x34	; 52
     bfa:	87 7f       	andi	r24, 0xF7	; 247
     bfc:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     bfe:	88 e1       	ldi	r24, 0x18	; 24
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	80 93 60 00 	sts	0x0060, r24
     c08:	10 92 60 00 	sts	0x0060, r1
     c0c:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     c0e:	e0 e0       	ldi	r30, 0x00	; 0
     c10:	f8 e3       	ldi	r31, 0x38	; 56
     c12:	09 95       	icall

00000c14 <__do_copy_data>:
     c14:	11 e0       	ldi	r17, 0x01	; 1
     c16:	a0 e0       	ldi	r26, 0x00	; 0
     c18:	b1 e0       	ldi	r27, 0x01	; 1
     c1a:	ea e1       	ldi	r30, 0x1A	; 26
     c1c:	f4 e5       	ldi	r31, 0x54	; 84
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <__do_copy_data+0x10>
     c20:	05 90       	lpm	r0, Z+
     c22:	0d 92       	st	X+, r0
     c24:	a8 33       	cpi	r26, 0x38	; 56
     c26:	b1 07       	cpc	r27, r17
     c28:	d9 f7       	brne	.-10     	; 0xc20 <__do_copy_data+0xc>

00000c2a <__do_clear_bss>:
     c2a:	21 e0       	ldi	r18, 0x01	; 1
     c2c:	a8 e3       	ldi	r26, 0x38	; 56
     c2e:	b1 e0       	ldi	r27, 0x01	; 1
     c30:	01 c0       	rjmp	.+2      	; 0xc34 <.do_clear_bss_start>

00000c32 <.do_clear_bss_loop>:
     c32:	1d 92       	st	X+, r1

00000c34 <.do_clear_bss_start>:
     c34:	a6 3e       	cpi	r26, 0xE6	; 230
     c36:	b2 07       	cpc	r27, r18
     c38:	e1 f7       	brne	.-8      	; 0xc32 <.do_clear_bss_loop>
     c3a:	0e 94 12 0b 	call	0x1624	; 0x1624 <main>
     c3e:	0c 94 0b 2a 	jmp	0x5416	; 0x5416 <_exit>

00000c42 <__bad_interrupt>:
     c42:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000c46 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     c46:	ff 93       	push	r31
	push	ZL
     c48:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     c4a:	e0 91 38 01 	lds	r30, 0x0138
	lds	ZH, xfunc_out+1	;/
     c4e:	f0 91 39 01 	lds	r31, 0x0139
	sbiw	ZL, 0		;Skip if null
     c52:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     c54:	09 f0       	breq	.+2      	; 0xc58 <xputc+0x12>
	icall
     c56:	09 95       	icall
2:	pop	ZL
     c58:	ef 91       	pop	r30
	pop	ZH
     c5a:	ff 91       	pop	r31
	ret
     c5c:	08 95       	ret

00000c5e <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     c5e:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     c60:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     c62:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     c64:	11 f0       	breq	.+4      	; 0xc6a <xputs+0xc>
	rcall	xputc
     c66:	ef df       	rcall	.-34     	; 0xc46 <xputc>
	rjmp	1b
     c68:	fb cf       	rjmp	.-10     	; 0xc60 <xputs+0x2>
2:	ret
     c6a:	08 95       	ret

00000c6c <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     c6c:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     c6e:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     c70:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     c72:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     c74:	0c c0       	rjmp	.+24     	; 0xc8e <xitoa+0x22>
	neg	r20		;
     c76:	41 95       	neg	r20
	sbrs	r25, 7		;
     c78:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     c7a:	09 c0       	rjmp	.+18     	; 0xc8e <xitoa+0x22>
	ldi	r30, '-'	;
     c7c:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     c7e:	60 95       	com	r22
	com	r23		;
     c80:	70 95       	com	r23
	com	r24		;
     c82:	80 95       	com	r24
	com	r25		;
     c84:	90 95       	com	r25
	adc	r22, r1		;
     c86:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     c88:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     c8a:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     c8c:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     c8e:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <xitoa+0x2a>
	neg	r18		;
     c92:	21 95       	neg	r18
	ldi	r19, '0'	;/
     c94:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     c96:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     c98:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     c9a:	66 0f       	add	r22, r22
	rol	r23		;
     c9c:	77 1f       	adc	r23, r23
	rol	r24		;
     c9e:	88 1f       	adc	r24, r24
	rol	r25		;
     ca0:	99 1f       	adc	r25, r25
	rol	r26		;
     ca2:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     ca4:	a4 17       	cp	r26, r20
	brcs	3f		;
     ca6:	10 f0       	brcs	.+4      	; 0xcac <xitoa+0x40>
	sub	r26, r20	;
     ca8:	a4 1b       	sub	r26, r20
	inc	r22		;
     caa:	63 95       	inc	r22
3:	dec	r21		;
     cac:	5a 95       	dec	r21
	brne	2b		;/
     cae:	a9 f7       	brne	.-22     	; 0xc9a <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     cb0:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     cb2:	08 f0       	brcs	.+2      	; 0xcb6 <xitoa+0x4a>
	subi	r26, -7		;
     cb4:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     cb6:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     cb8:	af 93       	push	r26
	inc	r31		;/
     cba:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     cbc:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     cbe:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     cc0:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     cc2:	91 05       	cpc	r25, r1
	brne	1b		;/
     cc4:	41 f7       	brne	.-48     	; 0xc96 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     cc6:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     cc8:	11 f4       	brne	.+4      	; 0xcce <xitoa+0x62>
	push	r30		;
     cca:	ef 93       	push	r30
	inc	r31		;/
     ccc:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     cce:	f2 17       	cp	r31, r18
	brcc	6f		;
     cd0:	18 f4       	brcc	.+6      	; 0xcd8 <xitoa+0x6c>
	push	r19		;
     cd2:	3f 93       	push	r19
	inc	r31		;
     cd4:	f3 95       	inc	r31
	rjmp	5b		;/
     cd6:	fb cf       	rjmp	.-10     	; 0xcce <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     cd8:	8f 91       	pop	r24
	rcall	xputc		;
     cda:	b5 df       	rcall	.-150    	; 0xc46 <xputc>
	dec	r31		;
     cdc:	fa 95       	dec	r31
	brne	6b		;/
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <xitoa+0x6c>

	ret
     ce0:	08 95       	ret

00000ce2 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     ce2:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     ce4:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     ce6:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     ce8:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     cea:	21 f0       	breq	.+8      	; 0xcf4 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     cec:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     cee:	19 f0       	breq	.+6      	; 0xcf6 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     cf0:	aa df       	rcall	.-172    	; 0xc46 <xputc>
	rjmp	0b		;/
     cf2:	f9 cf       	rjmp	.-14     	; 0xce6 <xvprintf+0x4>
90:	ret
     cf4:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     cf6:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     cf8:	e8 94       	clt
	_LPMI	r21		;Get flags
     cfa:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     cfc:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     cfe:	c1 f3       	breq	.-16     	; 0xcf0 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     d00:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     d02:	11 f4       	brne	.+4      	; 0xd08 <xvprintf+0x26>
	set			;/
     d04:	68 94       	set
22:	_LPMI	r21		;Get width
     d06:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     d08:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     d0a:	48 f4       	brcc	.+18     	; 0xd1e <xvprintf+0x3c>
	subi	r21, '0'	;
     d0c:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     d0e:	90 f3       	brcs	.-28     	; 0xcf4 <xvprintf+0x12>
	lsl	r18		;
     d10:	22 0f       	add	r18, r18
	mov	r0, r18		;
     d12:	02 2e       	mov	r0, r18
	lsl	r18		;
     d14:	22 0f       	add	r18, r18
	lsl	r18		;
     d16:	22 0f       	add	r18, r18
	add	r18, r0		;
     d18:	20 0d       	add	r18, r0
	add	r18, r21	;
     d1a:	25 0f       	add	r18, r21
	rjmp	22b		;/
     d1c:	f4 cf       	rjmp	.-24     	; 0xd06 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     d1e:	0e f4       	brtc	.+2      	; 0xd22 <xvprintf+0x40>
	neg	r18		;
     d20:	21 95       	neg	r18
25:	ld	r24, Y+		;
     d22:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     d24:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     d26:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     d28:	19 f3       	breq	.-58     	; 0xcf0 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     d2a:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     d2c:	29 f1       	breq	.+74     	; 0xd78 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     d2e:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     d30:	59 f1       	breq	.+86     	; 0xd88 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     d32:	bc 01       	movw	r22, r24
	clr	r24		;
     d34:	88 27       	eor	r24, r24
	clr	r25		;
     d36:	99 27       	eor	r25, r25
	clt			;/
     d38:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     d3a:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     d3c:	21 f4       	brne	.+8      	; 0xd46 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     d3e:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     d40:	99 91       	ld	r25, Y+
	set			;
     d42:	68 94       	set
	_LPMI	r21		;/
     d44:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     d46:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     d48:	39 f4       	brne	.+14     	; 0xd58 <xvprintf+0x76>
	ldi	r20, -10	;
     d4a:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     d4c:	7e f0       	brts	.+30     	; 0xd6c <xvprintf+0x8a>
	sbrs	r23, 7		;
     d4e:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <xvprintf+0x8a>
	ldi	r24, -1		;
     d52:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     d54:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     d56:	0a c0       	rjmp	.+20     	; 0xd6c <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     d58:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     d5a:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     d5c:	39 f0       	breq	.+14     	; 0xd6c <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     d5e:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     d60:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     d62:	21 f0       	breq	.+8      	; 0xd6c <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     d64:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     d66:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     d68:	09 f0       	breq	.+2      	; 0xd6c <xvprintf+0x8a>
	ret			;abort
     d6a:	08 95       	ret
40:	push	ZH		;Output the value
     d6c:	ff 93       	push	r31
	push	ZL		;
     d6e:	ef 93       	push	r30
	rcall	xitoa		;
     d70:	7d df       	rcall	.-262    	; 0xc6c <xitoa>
42:	pop	ZL		;
     d72:	ef 91       	pop	r30
	pop	ZH		;
     d74:	ff 91       	pop	r31
	rjmp	0b		;/
     d76:	b7 cf       	rjmp	.-146    	; 0xce6 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     d78:	ff 93       	push	r31
	push	ZL
     d7a:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     d7c:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     d7e:	81 91       	ld	r24, Z+
	cpi	r24, 0
     d80:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     d82:	b9 f3       	breq	.-18     	; 0xd72 <xvprintf+0x90>
	rcall	xputc
     d84:	60 df       	rcall	.-320    	; 0xc46 <xputc>
	rjmp	51b
     d86:	fb cf       	rjmp	.-10     	; 0xd7e <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     d88:	ff 93       	push	r31
	push	ZL
     d8a:	ef 93       	push	r30
	rcall	xputs
     d8c:	68 df       	rcall	.-304    	; 0xc5e <xputs>
	rjmp	42b
     d8e:	f1 cf       	rjmp	.-30     	; 0xd72 <xvprintf+0x90>

00000d90 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     d90:	df 93       	push	r29
	push	YL
     d92:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     d94:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     d96:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     d98:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     d9a:	a3 df       	rcall	.-186    	; 0xce2 <xvprintf>
	pop	YL
     d9c:	cf 91       	pop	r28
	pop	YH
     d9e:	df 91       	pop	r29
	ret
     da0:	08 95       	ret

00000da2 <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     da2:	9e e0       	ldi	r25, 0x0E	; 14
     da4:	79 9f       	mul	r23, r25
     da6:	f0 01       	movw	r30, r0
     da8:	11 24       	eor	r1, r1
     daa:	96 e4       	ldi	r25, 0x46	; 70
     dac:	89 9f       	mul	r24, r25
     dae:	e0 0d       	add	r30, r0
     db0:	f1 1d       	adc	r31, r1
     db2:	11 24       	eor	r1, r1
     db4:	e6 0f       	add	r30, r22
     db6:	f1 1d       	adc	r31, r1
     db8:	ee 51       	subi	r30, 0x1E	; 30
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	84 91       	lpm	r24, Z
}
     dbe:	08 95       	ret

00000dc0 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     dc0:	e8 2f       	mov	r30, r24
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	ee 0f       	add	r30, r30
     dc6:	ff 1f       	adc	r31, r31
     dc8:	e0 5a       	subi	r30, 0xA0	; 160
     dca:	f0 40       	sbci	r31, 0x00	; 0
}
     dcc:	85 91       	lpm	r24, Z+
     dce:	94 91       	lpm	r25, Z
     dd0:	08 95       	ret

00000dd2 <unselect_rows>:
 * pin: B0 B1 B2 B3
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRB  &= ~0b01110000;
     dd2:	84 b1       	in	r24, 0x04	; 4
     dd4:	8f 78       	andi	r24, 0x8F	; 143
     dd6:	84 b9       	out	0x04, r24	; 4
    PORTB &= ~0b01110000;
     dd8:	85 b1       	in	r24, 0x05	; 5
     dda:	8f 78       	andi	r24, 0x8F	; 143
     ddc:	85 b9       	out	0x05, r24	; 5
    DDRD  &= ~0b10000000;
     dde:	57 98       	cbi	0x0a, 7	; 10
    PORTD &= ~0b10000000;
     de0:	5f 98       	cbi	0x0b, 7	; 11
     de2:	08 95       	ret

00000de4 <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
     de4:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <unselect_rows>
 */

static void init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<7);
     de8:	87 98       	cbi	0x10, 7	; 16
    PORTF |=  (1<<7);
     dea:	8f 9a       	sbi	0x11, 7	; 17
    DDRB  &= ~(1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1);
     dec:	84 b1       	in	r24, 0x04	; 4
     dee:	81 70       	andi	r24, 0x01	; 1
     df0:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1);
     df2:	85 b1       	in	r24, 0x05	; 5
     df4:	8e 6f       	ori	r24, 0xFE	; 254
     df6:	85 b9       	out	0x05, r24	; 5
    DDRD  &= ~(1<<7 | 1<<3 | 1<<2 | 1<<1 | 1<<0 );
     df8:	8a b1       	in	r24, 0x0a	; 10
     dfa:	80 77       	andi	r24, 0x70	; 112
     dfc:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<7 | 1<<3 | 1<<2 | 1<<1 | 1<<0 );
     dfe:	8b b1       	in	r24, 0x0b	; 11
     e00:	8f 68       	ori	r24, 0x8F	; 143
     e02:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<7 | 1<<6);
     e04:	87 b1       	in	r24, 0x07	; 7
     e06:	8f 73       	andi	r24, 0x3F	; 63
     e08:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<7 | 1<<6);
     e0a:	88 b1       	in	r24, 0x08	; 8
     e0c:	80 6c       	ori	r24, 0xC0	; 192
     e0e:	88 b9       	out	0x08, r24	; 8
     e10:	e4 e4       	ldi	r30, 0x44	; 68
     e12:	f1 e0       	ldi	r31, 0x01	; 1
     e14:	aa e3       	ldi	r26, 0x3A	; 58
     e16:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     e18:	11 92       	st	Z+, r1
     e1a:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
     e1c:	1d 92       	st	X+, r1
     e1e:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	ee 34       	cpi	r30, 0x4E	; 78
     e24:	f8 07       	cpc	r31, r24
     e26:	c1 f7       	brne	.-16     	; 0xe18 <matrix_init+0x34>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
     e28:	08 95       	ret

00000e2a <matrix_scan>:

uint8_t matrix_scan(void)
{
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	ca e3       	ldi	r28, 0x3A	; 58
     e38:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     e3a:	10 e0       	ldi	r17, 0x00	; 0
     e3c:	01 e0       	ldi	r16, 0x01	; 1
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     e3e:	a7 e9       	ldi	r26, 0x97	; 151
     e40:	ea 2e       	mov	r14, r26
     e42:	a1 e0       	ldi	r26, 0x01	; 1
     e44:	fa 2e       	mov	r15, r26
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
       switch (row) {
     e46:	12 30       	cpi	r17, 0x02	; 2
     e48:	71 f0       	breq	.+28     	; 0xe66 <matrix_scan+0x3c>
     e4a:	18 f4       	brcc	.+6      	; 0xe52 <matrix_scan+0x28>
     e4c:	11 30       	cpi	r17, 0x01	; 1
     e4e:	41 f0       	breq	.+16     	; 0xe60 <matrix_scan+0x36>
     e50:	04 c0       	rjmp	.+8      	; 0xe5a <matrix_scan+0x30>
     e52:	13 30       	cpi	r17, 0x03	; 3
     e54:	59 f0       	breq	.+22     	; 0xe6c <matrix_scan+0x42>
     e56:	14 30       	cpi	r17, 0x04	; 4
     e58:	61 f0       	breq	.+24     	; 0xe72 <matrix_scan+0x48>
           case 0:
               DDRD  |= (1<<0);
     e5a:	50 9a       	sbi	0x0a, 0	; 10
               PORTD &= ~(1<<0);
     e5c:	58 98       	cbi	0x0b, 0	; 11
     e5e:	0b c0       	rjmp	.+22     	; 0xe76 <matrix_scan+0x4c>
               break;
           case 1:
               DDRD  |= (1<<1);
     e60:	51 9a       	sbi	0x0a, 1	; 10
               PORTD &= ~(1<<1);
     e62:	59 98       	cbi	0x0b, 1	; 11
     e64:	08 c0       	rjmp	.+16     	; 0xe76 <matrix_scan+0x4c>
               break;
           case 2:
               DDRD  |= (1<<2);
     e66:	52 9a       	sbi	0x0a, 2	; 10
               PORTD &= ~(1<<2);
     e68:	5a 98       	cbi	0x0b, 2	; 11
     e6a:	05 c0       	rjmp	.+10     	; 0xe76 <matrix_scan+0x4c>
               break;
           case 3:
               DDRD  |= (1<<3);
     e6c:	53 9a       	sbi	0x0a, 3	; 10
               PORTD &= ~(1<<3);
     e6e:	5b 98       	cbi	0x0b, 3	; 11
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <matrix_scan+0x4c>
               break;
           case 4:
               DDRC  |= (1<<6);
     e72:	3e 9a       	sbi	0x07, 6	; 7
               PORTC &= ~(1<<6);
     e74:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e76:	80 ea       	ldi	r24, 0xA0	; 160
     e78:	8a 95       	dec	r24
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <matrix_scan+0x4e>
}

static matrix_row_t read_cols(void)
{
    return 
           (PINF&(1<<0) ? 0 : (1<< 0)) |
     e7c:	2f b1       	in	r18, 0x0f	; 15
     e7e:	21 70       	andi	r18, 0x01	; 1
     e80:	20 27       	eor	r18, r16
     e82:	30 e0       	ldi	r19, 0x00	; 0
           (PINF&(1<<1) ? 0 : (1<< 1)) |
     e84:	79 9b       	sbis	0x0f, 1	; 15
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <matrix_scan+0x64>
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <matrix_scan+0x68>
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	90 e0       	ldi	r25, 0x00	; 0
}

static matrix_row_t read_cols(void)
{
    return 
           (PINF&(1<<0) ? 0 : (1<< 0)) |
     e92:	28 2b       	or	r18, r24
     e94:	39 2b       	or	r19, r25
           (PINF&(1<<1) ? 0 : (1<< 1)) |
           (PINF&(1<<4) ? 0 : (1<< 2)) |
     e96:	7c 9b       	sbis	0x0f, 4	; 15
     e98:	03 c0       	rjmp	.+6      	; 0xea0 <matrix_scan+0x76>
     e9a:	40 e0       	ldi	r20, 0x00	; 0
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <matrix_scan+0x7a>
     ea0:	44 e0       	ldi	r20, 0x04	; 4
     ea2:	50 e0       	ldi	r21, 0x00	; 0

static matrix_row_t read_cols(void)
{
    return 
           (PINF&(1<<0) ? 0 : (1<< 0)) |
           (PINF&(1<<1) ? 0 : (1<< 1)) |
     ea4:	24 2b       	or	r18, r20
     ea6:	35 2b       	or	r19, r21
           (PINF&(1<<4) ? 0 : (1<< 2)) |
           (PINF&(1<<5) ? 0 : (1<< 3)) |
     ea8:	7d 9b       	sbis	0x0f, 5	; 15
     eaa:	03 c0       	rjmp	.+6      	; 0xeb2 <matrix_scan+0x88>
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <matrix_scan+0x8c>
     eb2:	88 e0       	ldi	r24, 0x08	; 8
     eb4:	90 e0       	ldi	r25, 0x00	; 0
static matrix_row_t read_cols(void)
{
    return 
           (PINF&(1<<0) ? 0 : (1<< 0)) |
           (PINF&(1<<1) ? 0 : (1<< 1)) |
           (PINF&(1<<4) ? 0 : (1<< 2)) |
     eb6:	28 2b       	or	r18, r24
     eb8:	39 2b       	or	r19, r25
           (PINF&(1<<5) ? 0 : (1<< 3)) |
           (PINF&(1<<6) ? 0 : (1<< 4)) |
     eba:	7e 9b       	sbis	0x0f, 6	; 15
     ebc:	03 c0       	rjmp	.+6      	; 0xec4 <matrix_scan+0x9a>
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <matrix_scan+0x9e>
     ec4:	80 e1       	ldi	r24, 0x10	; 16
     ec6:	90 e0       	ldi	r25, 0x00	; 0
{
    return 
           (PINF&(1<<0) ? 0 : (1<< 0)) |
           (PINF&(1<<1) ? 0 : (1<< 1)) |
           (PINF&(1<<4) ? 0 : (1<< 2)) |
           (PINF&(1<<5) ? 0 : (1<< 3)) |
     ec8:	28 2b       	or	r18, r24
     eca:	39 2b       	or	r19, r25
           (PINF&(1<<6) ? 0 : (1<< 4)) |
           (PINF&(1<<7) ? 0 : (1<< 5)) |
     ecc:	8f b1       	in	r24, 0x0f	; 15
     ece:	99 27       	eor	r25, r25
     ed0:	87 fd       	sbrc	r24, 7
     ed2:	90 95       	com	r25
     ed4:	80 95       	com	r24
     ed6:	90 95       	com	r25
     ed8:	88 27       	eor	r24, r24
     eda:	99 0f       	add	r25, r25
     edc:	88 1f       	adc	r24, r24
     ede:	99 27       	eor	r25, r25
     ee0:	f5 e0       	ldi	r31, 0x05	; 5
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	fa 95       	dec	r31
     ee8:	e1 f7       	brne	.-8      	; 0xee2 <matrix_scan+0xb8>
    return 
           (PINF&(1<<0) ? 0 : (1<< 0)) |
           (PINF&(1<<1) ? 0 : (1<< 1)) |
           (PINF&(1<<4) ? 0 : (1<< 2)) |
           (PINF&(1<<5) ? 0 : (1<< 3)) |
           (PINF&(1<<6) ? 0 : (1<< 4)) |
     eea:	28 2b       	or	r18, r24
     eec:	39 2b       	or	r19, r25
           (PINF&(1<<7) ? 0 : (1<< 5)) |
           (PINB&(1<<6) ? 0 : (1<< 6)) |
     eee:	1e 9b       	sbis	0x03, 6	; 3
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <matrix_scan+0xce>
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <matrix_scan+0xd2>
     ef8:	80 e4       	ldi	r24, 0x40	; 64
     efa:	90 e0       	ldi	r25, 0x00	; 0
           (PINF&(1<<0) ? 0 : (1<< 0)) |
           (PINF&(1<<1) ? 0 : (1<< 1)) |
           (PINF&(1<<4) ? 0 : (1<< 2)) |
           (PINF&(1<<5) ? 0 : (1<< 3)) |
           (PINF&(1<<6) ? 0 : (1<< 4)) |
           (PINF&(1<<7) ? 0 : (1<< 5)) |
     efc:	28 2b       	or	r18, r24
     efe:	39 2b       	or	r19, r25
           (PINB&(1<<6) ? 0 : (1<< 6)) |
           (PINB&(1<<5) ? 0 : (1<< 7)) |
     f00:	1d 9b       	sbis	0x03, 5	; 3
     f02:	03 c0       	rjmp	.+6      	; 0xf0a <matrix_scan+0xe0>
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <matrix_scan+0xe4>
     f0a:	80 e8       	ldi	r24, 0x80	; 128
     f0c:	90 e0       	ldi	r25, 0x00	; 0
           (PINF&(1<<1) ? 0 : (1<< 1)) |
           (PINF&(1<<4) ? 0 : (1<< 2)) |
           (PINF&(1<<5) ? 0 : (1<< 3)) |
           (PINF&(1<<6) ? 0 : (1<< 4)) |
           (PINF&(1<<7) ? 0 : (1<< 5)) |
           (PINB&(1<<6) ? 0 : (1<< 6)) |
     f0e:	28 2b       	or	r18, r24
     f10:	39 2b       	or	r19, r25
           (PINB&(1<<5) ? 0 : (1<< 7)) |
           (PINB&(1<<4) ? 0 : (1<< 8)) |
     f12:	1c 9b       	sbis	0x03, 4	; 3
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <matrix_scan+0xf2>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <matrix_scan+0xf6>
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	91 e0       	ldi	r25, 0x01	; 1
           (PINF&(1<<4) ? 0 : (1<< 2)) |
           (PINF&(1<<5) ? 0 : (1<< 3)) |
           (PINF&(1<<6) ? 0 : (1<< 4)) |
           (PINF&(1<<7) ? 0 : (1<< 5)) |
           (PINB&(1<<6) ? 0 : (1<< 6)) |
           (PINB&(1<<5) ? 0 : (1<< 7)) |
     f20:	28 2b       	or	r18, r24
     f22:	39 2b       	or	r19, r25
           (PINB&(1<<4) ? 0 : (1<< 8)) |
           (PIND&(1<<7) ? 0 : (1<< 9)) |
     f24:	89 b1       	in	r24, 0x09	; 9
     f26:	99 27       	eor	r25, r25
     f28:	87 fd       	sbrc	r24, 7
     f2a:	90 95       	com	r25
     f2c:	80 95       	com	r24
     f2e:	90 95       	com	r25
     f30:	88 27       	eor	r24, r24
     f32:	99 0f       	add	r25, r25
     f34:	88 1f       	adc	r24, r24
     f36:	99 27       	eor	r25, r25
     f38:	98 2f       	mov	r25, r24
     f3a:	88 27       	eor	r24, r24
     f3c:	99 0f       	add	r25, r25
           (PINF&(1<<5) ? 0 : (1<< 3)) |
           (PINF&(1<<6) ? 0 : (1<< 4)) |
           (PINF&(1<<7) ? 0 : (1<< 5)) |
           (PINB&(1<<6) ? 0 : (1<< 6)) |
           (PINB&(1<<5) ? 0 : (1<< 7)) |
           (PINB&(1<<4) ? 0 : (1<< 8)) |
     f3e:	28 2b       	or	r18, r24
     f40:	39 2b       	or	r19, r25
           (PIND&(1<<7) ? 0 : (1<< 9)) |
           (PINB&(1<<0) ? 0 : (1<<10)) |
     f42:	18 9b       	sbis	0x03, 0	; 3
     f44:	03 c0       	rjmp	.+6      	; 0xf4c <matrix_scan+0x122>
     f46:	40 e0       	ldi	r20, 0x00	; 0
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <matrix_scan+0x126>
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	54 e0       	ldi	r21, 0x04	; 4
           (PINF&(1<<6) ? 0 : (1<< 4)) |
           (PINF&(1<<7) ? 0 : (1<< 5)) |
           (PINB&(1<<6) ? 0 : (1<< 6)) |
           (PINB&(1<<5) ? 0 : (1<< 7)) |
           (PINB&(1<<4) ? 0 : (1<< 8)) |
           (PIND&(1<<7) ? 0 : (1<< 9)) |
     f50:	24 2b       	or	r18, r20
     f52:	35 2b       	or	r19, r21
           (PINB&(1<<0) ? 0 : (1<<10)) |
           (PINB&(1<<1) ? 0 : (1<<11)) |
     f54:	19 9b       	sbis	0x03, 1	; 3
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <matrix_scan+0x134>
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <matrix_scan+0x138>
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	58 e0       	ldi	r21, 0x08	; 8
           (PINF&(1<<7) ? 0 : (1<< 5)) |
           (PINB&(1<<6) ? 0 : (1<< 6)) |
           (PINB&(1<<5) ? 0 : (1<< 7)) |
           (PINB&(1<<4) ? 0 : (1<< 8)) |
           (PIND&(1<<7) ? 0 : (1<< 9)) |
           (PINB&(1<<0) ? 0 : (1<<10)) |
     f62:	24 2b       	or	r18, r20
     f64:	35 2b       	or	r19, r21
           (PINB&(1<<1) ? 0 : (1<<11)) |
           (PINB&(1<<2) ? 0 : (1<<12)) |
     f66:	1a 9b       	sbis	0x03, 2	; 3
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <matrix_scan+0x146>
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <matrix_scan+0x14a>
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e1       	ldi	r25, 0x10	; 16
           (PINB&(1<<6) ? 0 : (1<< 6)) |
           (PINB&(1<<5) ? 0 : (1<< 7)) |
           (PINB&(1<<4) ? 0 : (1<< 8)) |
           (PIND&(1<<7) ? 0 : (1<< 9)) |
           (PINB&(1<<0) ? 0 : (1<<10)) |
           (PINB&(1<<1) ? 0 : (1<<11)) |
     f74:	28 2b       	or	r18, r24
     f76:	39 2b       	or	r19, r25
           (PINB&(1<<2) ? 0 : (1<<12)) |
           (PINB&(1<<3) ? 0 : (1<<13)) |
     f78:	1b 9b       	sbis	0x03, 3	; 3
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <matrix_scan+0x158>
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <matrix_scan+0x15c>
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e2       	ldi	r25, 0x20	; 32
           (PINB&(1<<5) ? 0 : (1<< 7)) |
           (PINB&(1<<4) ? 0 : (1<< 8)) |
           (PIND&(1<<7) ? 0 : (1<< 9)) |
           (PINB&(1<<0) ? 0 : (1<<10)) |
           (PINB&(1<<1) ? 0 : (1<<11)) |
           (PINB&(1<<2) ? 0 : (1<<12)) |
     f86:	28 2b       	or	r18, r24
     f88:	39 2b       	or	r19, r25
           (PINB&(1<<3) ? 0 : (1<<13)) |
           (PINB&(1<<7) ? 0 : (1<<14));
     f8a:	83 b1       	in	r24, 0x03	; 3
     f8c:	99 27       	eor	r25, r25
     f8e:	87 fd       	sbrc	r24, 7
     f90:	90 95       	com	r25
     f92:	80 95       	com	r24
     f94:	90 95       	com	r25
     f96:	88 27       	eor	r24, r24
     f98:	99 0f       	add	r25, r25
     f9a:	88 1f       	adc	r24, r24
     f9c:	99 27       	eor	r25, r25
     f9e:	90 e4       	ldi	r25, 0x40	; 64
     fa0:	89 9f       	mul	r24, r25
     fa2:	90 2d       	mov	r25, r0
     fa4:	88 27       	eor	r24, r24
     fa6:	11 24       	eor	r1, r1
           (PINB&(1<<4) ? 0 : (1<< 8)) |
           (PIND&(1<<7) ? 0 : (1<< 9)) |
           (PINB&(1<<0) ? 0 : (1<<10)) |
           (PINB&(1<<1) ? 0 : (1<<11)) |
           (PINB&(1<<2) ? 0 : (1<<12)) |
           (PINB&(1<<3) ? 0 : (1<<13)) |
     fa8:	28 2b       	or	r18, r24
     faa:	39 2b       	or	r19, r25
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
     fac:	88 81       	ld	r24, Y
     fae:	99 81       	ldd	r25, Y+1	; 0x01
     fb0:	82 17       	cp	r24, r18
     fb2:	93 07       	cpc	r25, r19
     fb4:	49 f1       	breq	.+82     	; 0x1008 <matrix_scan+0x1de>
            matrix_debouncing[i] = cols;
     fb6:	39 83       	std	Y+1, r19	; 0x01
     fb8:	28 83       	st	Y, r18
            if (debouncing) {
     fba:	80 91 00 01 	lds	r24, 0x0100
     fbe:	88 23       	and	r24, r24
     fc0:	01 f1       	breq	.+64     	; 0x1002 <matrix_scan+0x1d8>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
     fc2:	80 91 c7 01 	lds	r24, 0x01C7
     fc6:	80 ff       	sbrs	r24, 0
     fc8:	04 c0       	rjmp	.+8      	; 0xfd2 <matrix_scan+0x1a8>
     fca:	8c e9       	ldi	r24, 0x9C	; 156
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
     fd2:	80 91 c7 01 	lds	r24, 0x01C7
     fd6:	80 ff       	sbrs	r24, 0
     fd8:	0c c0       	rjmp	.+24     	; 0xff2 <matrix_scan+0x1c8>
     fda:	80 91 00 01 	lds	r24, 0x0100
     fde:	1f 92       	push	r1
     fe0:	8f 93       	push	r24
     fe2:	ff 92       	push	r15
     fe4:	ef 92       	push	r14
     fe6:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	80 91 c7 01 	lds	r24, 0x01C7
     ff6:	80 ff       	sbrs	r24, 0
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <matrix_scan+0x1d8>
     ffa:	85 e9       	ldi	r24, 0x95	; 149
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
            }
            debouncing = DEBOUNCE;
    1002:	85 e0       	ldi	r24, 0x05	; 5
    1004:	80 93 00 01 	sts	0x0100, r24
        }
        unselect_rows();
    1008:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    100c:	1f 5f       	subi	r17, 0xFF	; 255
    100e:	22 96       	adiw	r28, 0x02	; 2
    1010:	15 30       	cpi	r17, 0x05	; 5
    1012:	09 f0       	breq	.+2      	; 0x1016 <matrix_scan+0x1ec>
    1014:	18 cf       	rjmp	.-464    	; 0xe46 <matrix_scan+0x1c>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    1016:	80 91 00 01 	lds	r24, 0x0100
    101a:	88 23       	and	r24, r24
    101c:	c1 f0       	breq	.+48     	; 0x104e <matrix_scan+0x224>
        if (--debouncing) {
    101e:	81 50       	subi	r24, 0x01	; 1
    1020:	80 93 00 01 	sts	0x0100, r24
    1024:	88 23       	and	r24, r24
    1026:	39 f0       	breq	.+14     	; 0x1036 <matrix_scan+0x20c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1028:	8f e9       	ldi	r24, 0x9F	; 159
    102a:	9f e0       	ldi	r25, 0x0F	; 15
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <matrix_scan+0x202>
    1030:	00 c0       	rjmp	.+0      	; 0x1032 <matrix_scan+0x208>
    1032:	00 00       	nop
    1034:	0c c0       	rjmp	.+24     	; 0x104e <matrix_scan+0x224>
    1036:	a4 e4       	ldi	r26, 0x44	; 68
    1038:	b1 e0       	ldi	r27, 0x01	; 1
    103a:	ea e3       	ldi	r30, 0x3A	; 58
    103c:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    103e:	81 91       	ld	r24, Z+
    1040:	91 91       	ld	r25, Z+
    1042:	8d 93       	st	X+, r24
    1044:	9d 93       	st	X+, r25

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1046:	91 e0       	ldi	r25, 0x01	; 1
    1048:	e4 34       	cpi	r30, 0x44	; 68
    104a:	f9 07       	cpc	r31, r25
    104c:	c1 f7       	brne	.-16     	; 0x103e <matrix_scan+0x214>
                matrix[i] = matrix_debouncing[i];
            }
        }
    }

    uint8_t layer = biton32(layer_state);
    104e:	60 91 ac 01 	lds	r22, 0x01AC
    1052:	70 91 ad 01 	lds	r23, 0x01AD
    1056:	80 91 ae 01 	lds	r24, 0x01AE
    105a:	90 91 af 01 	lds	r25, 0x01AF
    105e:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <biton32>
    switch (layer) {
    1062:	88 23       	and	r24, r24
    1064:	29 f0       	breq	.+10     	; 0x1070 <matrix_scan+0x246>
    1066:	83 30       	cpi	r24, 0x03	; 3
    1068:	28 f4       	brcc	.+10     	; 0x1074 <matrix_scan+0x24a>
        case 1:
        case 2:
            DDRC |= (1<<7);
    106a:	3f 9a       	sbi	0x07, 7	; 7
            PORTC |= (1<<7);
    106c:	47 9a       	sbi	0x08, 7	; 8
            break;
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <matrix_scan+0x24a>
        case 0:
            DDRC &= ~(1<<7);
    1070:	3f 98       	cbi	0x07, 7	; 7
            PORTC &= ~(1<<7);
    1072:	47 98       	cbi	0x08, 7	; 8
            break;
    }

    return 1;
}
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	08 95       	ret

00001084 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    1084:	e8 2f       	mov	r30, r24
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	ee 0f       	add	r30, r30
    108a:	ff 1f       	adc	r31, r31
    108c:	ec 5b       	subi	r30, 0xBC	; 188
    108e:	fe 4f       	sbci	r31, 0xFE	; 254
}
    1090:	80 81       	ld	r24, Z
    1092:	91 81       	ldd	r25, Z+1	; 0x01
    1094:	08 95       	ret

00001096 <matrix_print>:

void matrix_print(void)
{
    1096:	cf 92       	push	r12
    1098:	df 92       	push	r13
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    10a6:	8e e7       	ldi	r24, 0x7E	; 126
    10a8:	91 e0       	ldi	r25, 0x01	; 1
    10aa:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    10ae:	94 e4       	ldi	r25, 0x44	; 68
    10b0:	e9 2e       	mov	r14, r25
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	f9 2e       	mov	r15, r25
    10b6:	c0 e0       	ldi	r28, 0x00	; 0
    10b8:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    10ba:	29 e7       	ldi	r18, 0x79	; 121
    10bc:	c2 2e       	mov	r12, r18
    10be:	21 e0       	ldi	r18, 0x01	; 1
    10c0:	d2 2e       	mov	r13, r18
        pbin_reverse16(matrix_get_row(row));
    10c2:	00 e7       	ldi	r16, 0x70	; 112
    10c4:	11 e0       	ldi	r17, 0x01	; 1

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	df 92       	push	r13
    10cc:	cf 92       	push	r12
    10ce:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    10d2:	86 e7       	ldi	r24, 0x76	; 118
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
        pbin_reverse16(matrix_get_row(row));
    10da:	f7 01       	movw	r30, r14
    10dc:	81 91       	ld	r24, Z+
    10de:	91 91       	ld	r25, Z+
    10e0:	7f 01       	movw	r14, r30
    10e2:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <bitrev16>
    10e6:	9f 93       	push	r25
    10e8:	8f 93       	push	r24
    10ea:	1f 93       	push	r17
    10ec:	0f 93       	push	r16
    10ee:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
        print("\n");
    10f2:	8e e6       	ldi	r24, 0x6E	; 110
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    10fa:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    10fc:	8d b7       	in	r24, 0x3d	; 61
    10fe:	9e b7       	in	r25, 0x3e	; 62
    1100:	08 96       	adiw	r24, 0x08	; 8
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	9e bf       	out	0x3e, r25	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	8d bf       	out	0x3d, r24	; 61
    110c:	c5 30       	cpi	r28, 0x05	; 5
    110e:	d1 05       	cpc	r29, r1
    1110:	d1 f6       	brne	.-76     	; 0x10c6 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	ff 90       	pop	r15
    111c:	ef 90       	pop	r14
    111e:	df 90       	pop	r13
    1120:	cf 90       	pop	r12
    1122:	08 95       	ret

00001124 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_FUNCTION)) {
    1124:	85 ff       	sbrs	r24, 5
    1126:	03 c0       	rjmp	.+6      	; 0x112e <led_set+0xa>
        // Output high.
        DDRF |= (1<<0);
    1128:	80 9a       	sbi	0x10, 0	; 16
        PORTF |= (1<<0);
    112a:	88 9a       	sbi	0x11, 0	; 17
    112c:	08 95       	ret
    } else {
        // Output low.
        DDRF &= ~(1<<0);
    112e:	80 98       	cbi	0x10, 0	; 16
        PORTF &= ~(1<<0);
    1130:	88 98       	cbi	0x11, 0	; 17
    1132:	08 95       	ret

00001134 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1134:	80 91 61 01 	lds	r24, 0x0161
    1138:	08 95       	ret

0000113a <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    113a:	9f b7       	in	r25, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	10 92 50 01 	sts	0x0150, r1
    1142:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1144:	90 91 dd 01 	lds	r25, 0x01DD
    1148:	94 30       	cpi	r25, 0x04	; 4
    114a:	09 f0       	breq	.+2      	; 0x114e <sendchar+0x14>
    114c:	58 c0       	rjmp	.+176    	; 0x11fe <sendchar+0xc4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    114e:	90 91 e9 00 	lds	r25, 0x00E9
    1152:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1154:	20 91 ec 00 	lds	r18, 0x00EC
    1158:	20 ff       	sbrs	r18, 0
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <sendchar+0x26>
    115c:	20 e8       	ldi	r18, 0x80	; 128
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <sendchar+0x28>
    1160:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1162:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1164:	94 e0       	ldi	r25, 0x04	; 4
    1166:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    116a:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    116e:	90 ff       	sbrs	r25, 0
    1170:	43 c0       	rjmp	.+134    	; 0x11f8 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1172:	90 91 ee 00 	lds	r25, 0x00EE
    1176:	97 ff       	sbrs	r25, 7
    1178:	3f c0       	rjmp	.+126    	; 0x11f8 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    117a:	90 91 4e 01 	lds	r25, 0x014E
    117e:	99 23       	and	r25, r25
    1180:	21 f0       	breq	.+8      	; 0x118a <sendchar+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1182:	90 91 e8 00 	lds	r25, 0x00E8
    1186:	95 ff       	sbrs	r25, 5
    1188:	37 c0       	rjmp	.+110    	; 0x11f8 <sendchar+0xbe>
        goto ERROR_EXIT;
    }

    timeouted = false;
    118a:	10 92 4e 01 	sts	0x014E, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    118e:	96 e0       	ldi	r25, 0x06	; 6
    1190:	30 91 e8 00 	lds	r19, 0x00E8
    1194:	35 fd       	sbrc	r19, 5
    1196:	15 c0       	rjmp	.+42     	; 0x11c2 <sendchar+0x88>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    1198:	30 91 dd 01 	lds	r19, 0x01DD
    119c:	34 30       	cpi	r19, 0x04	; 4
    119e:	61 f5       	brne	.+88     	; 0x11f8 <sendchar+0xbe>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    11a0:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    11a4:	35 fd       	sbrc	r19, 5
    11a6:	28 c0       	rjmp	.+80     	; 0x11f8 <sendchar+0xbe>
    11a8:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    11aa:	21 f4       	brne	.+8      	; 0x11b4 <sendchar+0x7a>
            timeouted = true;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	80 93 4e 01 	sts	0x014E, r24
            goto ERROR_EXIT;
    11b2:	22 c0       	rjmp	.+68     	; 0x11f8 <sendchar+0xbe>
    11b4:	ef e9       	ldi	r30, 0x9F	; 159
    11b6:	ff e0       	ldi	r31, 0x0F	; 15
    11b8:	31 97       	sbiw	r30, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <sendchar+0x7e>
    11bc:	00 c0       	rjmp	.+0      	; 0x11be <sendchar+0x84>
    11be:	00 00       	nop
    11c0:	e7 cf       	rjmp	.-50     	; 0x1190 <sendchar+0x56>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11c2:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11c6:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    11ca:	85 fd       	sbrc	r24, 5
    11cc:	0a c0       	rjmp	.+20     	; 0x11e2 <sendchar+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11ce:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    11d2:	80 ff       	sbrs	r24, 0
    11d4:	fc cf       	rjmp	.-8      	; 0x11ce <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11d6:	80 91 e8 00 	lds	r24, 0x00E8
    11da:	8e 77       	andi	r24, 0x7E	; 126
    11dc:	80 93 e8 00 	sts	0x00E8, r24
    11e0:	06 c0       	rjmp	.+12     	; 0x11ee <sendchar+0xb4>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    11e2:	8f b7       	in	r24, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	91 e0       	ldi	r25, 0x01	; 1
    11e8:	90 93 50 01 	sts	0x0150, r25
    11ec:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11ee:	2f 70       	andi	r18, 0x0F	; 15
    11f0:	20 93 e9 00 	sts	0x00E9, r18
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	08 95       	ret
    11f8:	2f 70       	andi	r18, 0x0F	; 15
    11fa:	20 93 e9 00 	sts	0x00E9, r18
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1200:	08 95       	ret

00001202 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	00 d0       	rcall	.+0      	; 0x1208 <send_consumer+0x6>
    1208:	1f 92       	push	r1
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    120e:	20 91 dd 01 	lds	r18, 0x01DD
    1212:	24 30       	cpi	r18, 0x04	; 4
    1214:	19 f5       	brne	.+70     	; 0x125c <send_consumer+0x5a>
        return;

    report_extra_t r = {
    1216:	23 e0       	ldi	r18, 0x03	; 3
    1218:	29 83       	std	Y+1, r18	; 0x01
    121a:	9b 83       	std	Y+3, r25	; 0x03
    121c:	8a 83       	std	Y+2, r24	; 0x02
    121e:	20 93 e9 00 	sts	0x00E9, r18
    1222:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1224:	90 91 e8 00 	lds	r25, 0x00E8
    1228:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    122a:	95 fd       	sbrc	r25, 5
    122c:	06 c0       	rjmp	.+12     	; 0x123a <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    122e:	95 ed       	ldi	r25, 0xD5	; 213
    1230:	9a 95       	dec	r25
    1232:	f1 f7       	brne	.-4      	; 0x1230 <send_consumer+0x2e>
    1234:	00 00       	nop
    1236:	81 11       	cpse	r24, r1
    1238:	f5 cf       	rjmp	.-22     	; 0x1224 <send_consumer+0x22>
    123a:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    123e:	85 ff       	sbrs	r24, 5
    1240:	0d c0       	rjmp	.+26     	; 0x125c <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	63 e0       	ldi	r22, 0x03	; 3
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	ce 01       	movw	r24, r28
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1252:	80 91 e8 00 	lds	r24, 0x00E8
    1256:	8e 77       	andi	r24, 0x7E	; 126
    1258:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	08 95       	ret

00001268 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	00 d0       	rcall	.+0      	; 0x126e <send_system+0x6>
    126e:	1f 92       	push	r1
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1274:	20 91 dd 01 	lds	r18, 0x01DD
    1278:	24 30       	cpi	r18, 0x04	; 4
    127a:	21 f5       	brne	.+72     	; 0x12c4 <send_system+0x5c>
        return;

    report_extra_t r = {
    127c:	22 e0       	ldi	r18, 0x02	; 2
    127e:	29 83       	std	Y+1, r18	; 0x01
    1280:	9b 83       	std	Y+3, r25	; 0x03
    1282:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1284:	83 e0       	ldi	r24, 0x03	; 3
    1286:	80 93 e9 00 	sts	0x00E9, r24
    128a:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    128c:	90 91 e8 00 	lds	r25, 0x00E8
    1290:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1292:	95 fd       	sbrc	r25, 5
    1294:	06 c0       	rjmp	.+12     	; 0x12a2 <send_system+0x3a>
    1296:	95 ed       	ldi	r25, 0xD5	; 213
    1298:	9a 95       	dec	r25
    129a:	f1 f7       	brne	.-4      	; 0x1298 <send_system+0x30>
    129c:	00 00       	nop
    129e:	81 11       	cpse	r24, r1
    12a0:	f5 cf       	rjmp	.-22     	; 0x128c <send_system+0x24>
    12a2:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    12a6:	85 ff       	sbrs	r24, 5
    12a8:	0d c0       	rjmp	.+26     	; 0x12c4 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    12aa:	40 e0       	ldi	r20, 0x00	; 0
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	63 e0       	ldi	r22, 0x03	; 3
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	ce 01       	movw	r24, r28
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12ba:	80 91 e8 00 	lds	r24, 0x00E8
    12be:	8e 77       	andi	r24, 0x7E	; 126
    12c0:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	08 95       	ret

000012d0 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    12d0:	20 91 dd 01 	lds	r18, 0x01DD
    12d4:	24 30       	cpi	r18, 0x04	; 4
    12d6:	f1 f4       	brne	.+60     	; 0x1314 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12d8:	22 e0       	ldi	r18, 0x02	; 2
    12da:	20 93 e9 00 	sts	0x00E9, r18
    12de:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12e0:	30 91 e8 00 	lds	r19, 0x00E8
    12e4:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    12e6:	35 fd       	sbrc	r19, 5
    12e8:	06 c0       	rjmp	.+12     	; 0x12f6 <send_mouse+0x26>
    12ea:	35 ed       	ldi	r19, 0xD5	; 213
    12ec:	3a 95       	dec	r19
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <send_mouse+0x1c>
    12f0:	00 00       	nop
    12f2:	21 11       	cpse	r18, r1
    12f4:	f5 cf       	rjmp	.-22     	; 0x12e0 <send_mouse+0x10>
    12f6:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    12fa:	25 ff       	sbrs	r18, 5
    12fc:	0b c0       	rjmp	.+22     	; 0x1314 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    12fe:	40 e0       	ldi	r20, 0x00	; 0
    1300:	50 e0       	ldi	r21, 0x00	; 0
    1302:	65 e0       	ldi	r22, 0x05	; 5
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    130a:	80 91 e8 00 	lds	r24, 0x00E8
    130e:	8e 77       	andi	r24, 0x7E	; 126
    1310:	80 93 e8 00 	sts	0x00E8, r24
    1314:	08 95       	ret

00001316 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    131c:	80 91 dd 01 	lds	r24, 0x01DD
    1320:	84 30       	cpi	r24, 0x04	; 4
    1322:	09 f0       	breq	.+2      	; 0x1326 <send_keyboard+0x10>
    1324:	43 c0       	rjmp	.+134    	; 0x13ac <send_keyboard+0x96>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    1326:	80 91 0c 01 	lds	r24, 0x010C
    132a:	88 23       	and	r24, r24
    132c:	c1 f0       	breq	.+48     	; 0x135e <send_keyboard+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    132e:	85 e0       	ldi	r24, 0x05	; 5
    1330:	80 93 e9 00 	sts	0x00E9, r24
    1334:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1336:	90 91 e8 00 	lds	r25, 0x00E8
    133a:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    133c:	95 fd       	sbrc	r25, 5
    133e:	06 c0       	rjmp	.+12     	; 0x134c <send_keyboard+0x36>
    1340:	95 e1       	ldi	r25, 0x15	; 21
    1342:	9a 95       	dec	r25
    1344:	f1 f7       	brne	.-4      	; 0x1342 <send_keyboard+0x2c>
    1346:	00 00       	nop
    1348:	81 11       	cpse	r24, r1
    134a:	f5 cf       	rjmp	.-22     	; 0x1336 <send_keyboard+0x20>
    134c:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1350:	85 ff       	sbrs	r24, 5
    1352:	2c c0       	rjmp	.+88     	; 0x13ac <send_keyboard+0x96>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	60 e1       	ldi	r22, 0x10	; 16
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	17 c0       	rjmp	.+46     	; 0x138c <send_keyboard+0x76>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	80 93 e9 00 	sts	0x00E9, r24
    1364:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1366:	90 91 e8 00 	lds	r25, 0x00E8
    136a:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    136c:	95 fd       	sbrc	r25, 5
    136e:	06 c0       	rjmp	.+12     	; 0x137c <send_keyboard+0x66>
    1370:	95 ed       	ldi	r25, 0xD5	; 213
    1372:	9a 95       	dec	r25
    1374:	f1 f7       	brne	.-4      	; 0x1372 <send_keyboard+0x5c>
    1376:	00 00       	nop
    1378:	81 11       	cpse	r24, r1
    137a:	f5 cf       	rjmp	.-22     	; 0x1366 <send_keyboard+0x50>
    137c:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1380:	85 ff       	sbrs	r24, 5
    1382:	14 c0       	rjmp	.+40     	; 0x13ac <send_keyboard+0x96>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	68 e0       	ldi	r22, 0x08	; 8
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	ce 01       	movw	r24, r28
    138e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1392:	80 91 e8 00 	lds	r24, 0x00E8
    1396:	8e 77       	andi	r24, 0x7E	; 126
    1398:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    139c:	80 e1       	ldi	r24, 0x10	; 16
    139e:	fe 01       	movw	r30, r28
    13a0:	a1 e5       	ldi	r26, 0x51	; 81
    13a2:	b1 e0       	ldi	r27, 0x01	; 1
    13a4:	01 90       	ld	r0, Z+
    13a6:	0d 92       	st	X+, r0
    13a8:	8a 95       	dec	r24
    13aa:	e1 f7       	brne	.-8      	; 0x13a4 <send_keyboard+0x8e>
}
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    13b2:	8c ed       	ldi	r24, 0xDC	; 220
    13b4:	91 e0       	ldi	r25, 0x01	; 1
    13b6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    13ba:	80 91 dc 01 	lds	r24, 0x01DC
    13be:	81 11       	cpse	r24, r1
    13c0:	09 c0       	rjmp	.+18     	; 0x13d4 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    13c2:	0e 94 55 0c 	call	0x18aa	; 0x18aa <USB_Disable>
        USB_Init();
    13c6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    13ca:	80 91 e2 00 	lds	r24, 0x00E2
    13ce:	84 60       	ori	r24, 0x04	; 4
    13d0:	80 93 e2 00 	sts	0x00E2, r24
    13d4:	08 95       	ret

000013d6 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    13d6:	88 ed       	ldi	r24, 0xD8	; 216
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    13de:	10 92 dc 01 	sts	0x01DC, r1
    13e2:	08 95       	ret

000013e4 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    13e4:	84 ed       	ldi	r24, 0xD4	; 212
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <xputs>

000013ec <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    13ec:	80 ed       	ldi	r24, 0xD0	; 208
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <xputs>

000013f4 <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    13f4:	8c ec       	ldi	r24, 0xCC	; 204
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    suspend_wakeup_init();
    13fc:	0c 94 53 1e 	jmp	0x3ca6	; 0x3ca6 <suspend_wakeup_init>

00001400 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    1400:	80 91 4f 01 	lds	r24, 0x014F
    1404:	8f 5f       	subi	r24, 0xFF	; 255
    1406:	80 93 4f 01 	sts	0x014F, r24
    140a:	62 e3       	ldi	r22, 0x32	; 50
    140c:	0e 94 a0 29 	call	0x5340	; 0x5340 <__udivmodqi4>
    1410:	91 11       	cpse	r25, r1
    1412:	35 c0       	rjmp	.+106    	; 0x147e <EVENT_USB_Device_StartOfFrame+0x7e>
    count = 0;
    1414:	10 92 4f 01 	sts	0x014F, r1

    if (!console_flush) return;
    1418:	80 91 50 01 	lds	r24, 0x0150
    141c:	88 23       	and	r24, r24
    141e:	79 f1       	breq	.+94     	; 0x147e <EVENT_USB_Device_StartOfFrame+0x7e>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1420:	80 91 dd 01 	lds	r24, 0x01DD
    1424:	84 30       	cpi	r24, 0x04	; 4
    1426:	49 f5       	brne	.+82     	; 0x147a <EVENT_USB_Device_StartOfFrame+0x7a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1428:	80 91 e9 00 	lds	r24, 0x00E9
    142c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    142e:	90 91 ec 00 	lds	r25, 0x00EC
    1432:	90 ff       	sbrs	r25, 0
    1434:	02 c0       	rjmp	.+4      	; 0x143a <EVENT_USB_Device_StartOfFrame+0x3a>
    1436:	90 e8       	ldi	r25, 0x80	; 128
    1438:	01 c0       	rjmp	.+2      	; 0x143c <EVENT_USB_Device_StartOfFrame+0x3c>
    143a:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    143c:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    143e:	84 e0       	ldi	r24, 0x04	; 4
    1440:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1444:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1448:	80 ff       	sbrs	r24, 0
    144a:	14 c0       	rjmp	.+40     	; 0x1474 <EVENT_USB_Device_StartOfFrame+0x74>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    144c:	80 91 ee 00 	lds	r24, 0x00EE
    1450:	87 ff       	sbrs	r24, 7
    1452:	10 c0       	rjmp	.+32     	; 0x1474 <EVENT_USB_Device_StartOfFrame+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1454:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    1458:	85 ff       	sbrs	r24, 5
    145a:	03 c0       	rjmp	.+6      	; 0x1462 <EVENT_USB_Device_StartOfFrame+0x62>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    145c:	10 92 f1 00 	sts	0x00F1, r1
    1460:	f9 cf       	rjmp	.-14     	; 0x1454 <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1462:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1466:	80 ff       	sbrs	r24, 0
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <EVENT_USB_Device_StartOfFrame+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    146a:	80 91 e8 00 	lds	r24, 0x00E8
    146e:	8e 77       	andi	r24, 0x7E	; 126
    1470:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1474:	9f 70       	andi	r25, 0x0F	; 15
    1476:	90 93 e9 00 	sts	0x00E9, r25
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    147a:	10 92 50 01 	sts	0x0150, r1
    147e:	08 95       	ret

00001480 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1480:	42 e0       	ldi	r20, 0x02	; 2
    1482:	61 ec       	ldi	r22, 0xC1	; 193
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	0e 94 cf 0b 	call	0x179e	; 0x179e <Endpoint_ConfigureEndpoint_Prv>
    148a:	42 e0       	ldi	r20, 0x02	; 2
    148c:	61 ec       	ldi	r22, 0xC1	; 193
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	0e 94 cf 0b 	call	0x179e	; 0x179e <Endpoint_ConfigureEndpoint_Prv>
    1494:	42 e0       	ldi	r20, 0x02	; 2
    1496:	61 ec       	ldi	r22, 0xC1	; 193
    1498:	83 e0       	ldi	r24, 0x03	; 3
    149a:	0e 94 cf 0b 	call	0x179e	; 0x179e <Endpoint_ConfigureEndpoint_Prv>
    149e:	46 e2       	ldi	r20, 0x26	; 38
    14a0:	61 ec       	ldi	r22, 0xC1	; 193
    14a2:	84 e0       	ldi	r24, 0x04	; 4
    14a4:	0e 94 cf 0b 	call	0x179e	; 0x179e <Endpoint_ConfigureEndpoint_Prv>
    14a8:	42 e1       	ldi	r20, 0x12	; 18
    14aa:	61 ec       	ldi	r22, 0xC1	; 193
    14ac:	85 e0       	ldi	r24, 0x05	; 5
    14ae:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <Endpoint_ConfigureEndpoint_Prv>

000014b2 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    14b2:	80 91 df 01 	lds	r24, 0x01DF
    14b6:	83 30       	cpi	r24, 0x03	; 3
    14b8:	09 f4       	brne	.+2      	; 0x14bc <EVENT_USB_Device_ControlRequest+0xa>
    14ba:	55 c0       	rjmp	.+170    	; 0x1566 <EVENT_USB_Device_ControlRequest+0xb4>
    14bc:	30 f4       	brcc	.+12     	; 0x14ca <EVENT_USB_Device_ControlRequest+0x18>
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	71 f0       	breq	.+28     	; 0x14de <EVENT_USB_Device_ControlRequest+0x2c>
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <EVENT_USB_Device_ControlRequest+0x16>
    14c6:	95 c0       	rjmp	.+298    	; 0x15f2 <EVENT_USB_Device_ControlRequest+0x140>
    14c8:	08 95       	ret
    14ca:	8a 30       	cpi	r24, 0x0A	; 10
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <EVENT_USB_Device_ControlRequest+0x1e>
    14ce:	81 c0       	rjmp	.+258    	; 0x15d2 <EVENT_USB_Device_ControlRequest+0x120>
    14d0:	8b 30       	cpi	r24, 0x0B	; 11
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <EVENT_USB_Device_ControlRequest+0x24>
    14d4:	60 c0       	rjmp	.+192    	; 0x1596 <EVENT_USB_Device_ControlRequest+0xe4>
    14d6:	89 30       	cpi	r24, 0x09	; 9
    14d8:	09 f0       	breq	.+2      	; 0x14dc <EVENT_USB_Device_ControlRequest+0x2a>
    14da:	a3 c0       	rjmp	.+326    	; 0x1622 <EVENT_USB_Device_ControlRequest+0x170>
    14dc:	20 c0       	rjmp	.+64     	; 0x151e <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    14de:	80 91 de 01 	lds	r24, 0x01DE
    14e2:	81 3a       	cpi	r24, 0xA1	; 161
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <EVENT_USB_Device_ControlRequest+0x36>
    14e6:	9d c0       	rjmp	.+314    	; 0x1622 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14e8:	80 91 e8 00 	lds	r24, 0x00E8
    14ec:	87 7f       	andi	r24, 0xF7	; 247
    14ee:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    14f2:	80 91 e2 01 	lds	r24, 0x01E2
    14f6:	90 91 e3 01 	lds	r25, 0x01E3
    14fa:	89 2b       	or	r24, r25
    14fc:	21 f0       	breq	.+8      	; 0x1506 <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    14fe:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	03 c0       	rjmp	.+6      	; 0x150c <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    1506:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1508:	81 e5       	ldi	r24, 0x51	; 81
    150a:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1512:	80 91 e8 00 	lds	r24, 0x00E8
    1516:	8b 77       	andi	r24, 0x7B	; 123
    1518:	80 93 e8 00 	sts	0x00E8, r24
    151c:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    151e:	80 91 de 01 	lds	r24, 0x01DE
    1522:	81 32       	cpi	r24, 0x21	; 33
    1524:	09 f0       	breq	.+2      	; 0x1528 <EVENT_USB_Device_ControlRequest+0x76>
    1526:	7d c0       	rjmp	.+250    	; 0x1622 <EVENT_USB_Device_ControlRequest+0x170>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1528:	80 91 e2 01 	lds	r24, 0x01E2
    152c:	90 91 e3 01 	lds	r25, 0x01E3
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	19 f0       	breq	.+6      	; 0x153a <EVENT_USB_Device_ControlRequest+0x88>
    1534:	04 97       	sbiw	r24, 0x04	; 4
    1536:	09 f0       	breq	.+2      	; 0x153a <EVENT_USB_Device_ControlRequest+0x88>
    1538:	74 c0       	rjmp	.+232    	; 0x1622 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    153a:	80 91 e8 00 	lds	r24, 0x00E8
    153e:	87 7f       	andi	r24, 0xF7	; 247
    1540:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1544:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    1548:	82 fd       	sbrc	r24, 2
    154a:	05 c0       	rjmp	.+10     	; 0x1556 <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    154c:	80 91 dd 01 	lds	r24, 0x01DD
    1550:	81 11       	cpse	r24, r1
    1552:	f8 cf       	rjmp	.-16     	; 0x1544 <EVENT_USB_Device_ControlRequest+0x92>
    1554:	66 c0       	rjmp	.+204    	; 0x1622 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1556:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    155a:	80 93 61 01 	sts	0x0161, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    155e:	80 91 e8 00 	lds	r24, 0x00E8
    1562:	8b 77       	andi	r24, 0x7B	; 123
    1564:	5a c0       	rjmp	.+180    	; 0x161a <EVENT_USB_Device_ControlRequest+0x168>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1566:	80 91 de 01 	lds	r24, 0x01DE
    156a:	81 3a       	cpi	r24, 0xA1	; 161
    156c:	09 f0       	breq	.+2      	; 0x1570 <EVENT_USB_Device_ControlRequest+0xbe>
    156e:	59 c0       	rjmp	.+178    	; 0x1622 <EVENT_USB_Device_ControlRequest+0x170>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1570:	80 91 e2 01 	lds	r24, 0x01E2
    1574:	90 91 e3 01 	lds	r25, 0x01E3
    1578:	89 2b       	or	r24, r25
    157a:	09 f0       	breq	.+2      	; 0x157e <EVENT_USB_Device_ControlRequest+0xcc>
    157c:	52 c0       	rjmp	.+164    	; 0x1622 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    157e:	80 91 e8 00 	lds	r24, 0x00E8
    1582:	87 7f       	andi	r24, 0xF7	; 247
    1584:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1588:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    158c:	80 ff       	sbrs	r24, 0
    158e:	fc cf       	rjmp	.-8      	; 0x1588 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    1590:	80 91 0b 01 	lds	r24, 0x010B
    1594:	3d c0       	rjmp	.+122    	; 0x1610 <EVENT_USB_Device_ControlRequest+0x15e>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1596:	80 91 de 01 	lds	r24, 0x01DE
    159a:	81 32       	cpi	r24, 0x21	; 33
    159c:	09 f0       	breq	.+2      	; 0x15a0 <EVENT_USB_Device_ControlRequest+0xee>
    159e:	41 c0       	rjmp	.+130    	; 0x1622 <EVENT_USB_Device_ControlRequest+0x170>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    15a0:	80 91 e2 01 	lds	r24, 0x01E2
    15a4:	90 91 e3 01 	lds	r25, 0x01E3
    15a8:	89 2b       	or	r24, r25
    15aa:	d9 f5       	brne	.+118    	; 0x1622 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15ac:	80 91 e8 00 	lds	r24, 0x00E8
    15b0:	87 7f       	andi	r24, 0xF7	; 247
    15b2:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    15b6:	0e 94 04 0c 	call	0x1808	; 0x1808 <Endpoint_ClearStatusStage>

                    keyboard_protocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    15ba:	90 91 e0 01 	lds	r25, 0x01E0
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	91 11       	cpse	r25, r1
    15c2:	01 c0       	rjmp	.+2      	; 0x15c6 <EVENT_USB_Device_ControlRequest+0x114>
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	80 93 0b 01 	sts	0x010B, r24
#ifdef NKRO_ENABLE
                    keyboard_nkro = !!keyboard_protocol;
    15ca:	80 93 0c 01 	sts	0x010C, r24
#endif
                    clear_keyboard();
    15ce:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    15d2:	80 91 de 01 	lds	r24, 0x01DE
    15d6:	81 32       	cpi	r24, 0x21	; 33
    15d8:	21 f5       	brne	.+72     	; 0x1622 <EVENT_USB_Device_ControlRequest+0x170>
    15da:	80 91 e8 00 	lds	r24, 0x00E8
    15de:	87 7f       	andi	r24, 0xF7	; 247
    15e0:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    15e4:	0e 94 04 0c 	call	0x1808	; 0x1808 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    15e8:	80 91 e1 01 	lds	r24, 0x01E1
    15ec:	80 93 62 01 	sts	0x0162, r24
    15f0:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    15f2:	80 91 de 01 	lds	r24, 0x01DE
    15f6:	81 3a       	cpi	r24, 0xA1	; 161
    15f8:	a1 f4       	brne	.+40     	; 0x1622 <EVENT_USB_Device_ControlRequest+0x170>
    15fa:	80 91 e8 00 	lds	r24, 0x00E8
    15fe:	87 7f       	andi	r24, 0xF7	; 247
    1600:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1604:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    1608:	80 ff       	sbrs	r24, 0
    160a:	fc cf       	rjmp	.-8      	; 0x1604 <EVENT_USB_Device_ControlRequest+0x152>
                Endpoint_Write_8(keyboard_idle);
    160c:	80 91 62 01 	lds	r24, 0x0162
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1610:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1614:	80 91 e8 00 	lds	r24, 0x00E8
    1618:	8e 77       	andi	r24, 0x7E	; 126
    161a:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    161e:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <Endpoint_ClearStatusStage>
    1622:	08 95       	ret

00001624 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1624:	84 b7       	in	r24, 0x34	; 52
    1626:	87 7f       	andi	r24, 0xF7	; 247
    1628:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    162a:	88 e1       	ldi	r24, 0x18	; 24
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	80 93 60 00 	sts	0x0060, r24
    1634:	10 92 60 00 	sts	0x0060, r1
    1638:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	80 e8       	ldi	r24, 0x80	; 128
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	80 93 61 00 	sts	0x0061, r24
    1646:	90 93 61 00 	sts	0x0061, r25
    164a:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    keyboard_setup();
    164c:	0e 94 b8 10 	call	0x2170	; 0x2170 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    1650:	0e 94 55 0c 	call	0x18aa	; 0x18aa <USB_Disable>

    USB_Init();
    1654:	0e 94 b2 0c 	call	0x1964	; 0x1964 <USB_Init>
    1658:	80 91 e2 00 	lds	r24, 0x00E2
    165c:	84 60       	ori	r24, 0x04	; 4
    165e:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1662:	8d e9       	ldi	r24, 0x9D	; 157
    1664:	98 e0       	ldi	r25, 0x08	; 8
    1666:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <print_set_sendchar>
int main(void)
{
    setup_mcu();
    keyboard_setup();
    setup_usb();
    sei();
    166a:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    166c:	80 91 dd 01 	lds	r24, 0x01DD
    1670:	84 30       	cpi	r24, 0x04	; 4
    1672:	e1 f7       	brne	.-8      	; 0x166c <main+0x48>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1674:	8b eb       	ldi	r24, 0xBB	; 187
    1676:	91 e0       	ldi	r25, 0x01	; 1
    1678:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>

    /* init modules */
    keyboard_init();
    167c:	0e 94 ba 10 	call	0x2174	; 0x2174 <keyboard_init>
    host_set_driver(&lufa_driver);
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	0e 94 2a 10 	call	0x2054	; 0x2054 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    1688:	8a ea       	ldi	r24, 0xAA	; 170
    168a:	91 e0       	ldi	r25, 0x01	; 1
    168c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    1690:	80 91 dd 01 	lds	r24, 0x01DD
    1694:	85 30       	cpi	r24, 0x05	; 5
    1696:	89 f4       	brne	.+34     	; 0x16ba <main+0x96>
            print("[s]");
    1698:	86 ea       	ldi	r24, 0xA6	; 166
    169a:	91 e0       	ldi	r25, 0x01	; 1
    169c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
            suspend_power_down();
    16a0:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    16a4:	80 91 db 01 	lds	r24, 0x01DB
    16a8:	88 23       	and	r24, r24
    16aa:	91 f3       	breq	.-28     	; 0x1690 <main+0x6c>
    16ac:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <suspend_wakeup_condition>
    16b0:	88 23       	and	r24, r24
    16b2:	71 f3       	breq	.-36     	; 0x1690 <main+0x6c>
                    USB_Device_SendRemoteWakeup();
    16b4:	0e 94 b9 0b 	call	0x1772	; 0x1772 <USB_Device_SendRemoteWakeup>
    16b8:	eb cf       	rjmp	.-42     	; 0x1690 <main+0x6c>
            }
        }

        keyboard_task();
    16ba:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    16be:	e8 cf       	rjmp	.-48     	; 0x1690 <main+0x6c>

000016c0 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    16c0:	29 2f       	mov	r18, r25
    16c2:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    16c4:	23 30       	cpi	r18, 0x03	; 3
    16c6:	31 05       	cpc	r19, r1
    16c8:	a9 f0       	breq	.+42     	; 0x16f4 <CALLBACK_USB_GetDescriptor+0x34>
    16ca:	6c f4       	brge	.+26     	; 0x16e6 <CALLBACK_USB_GetDescriptor+0x26>
    16cc:	21 30       	cpi	r18, 0x01	; 1
    16ce:	31 05       	cpc	r19, r1
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <CALLBACK_USB_GetDescriptor+0x14>
    16d2:	42 c0       	rjmp	.+132    	; 0x1758 <CALLBACK_USB_GetDescriptor+0x98>
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	09 f0       	breq	.+2      	; 0x16dc <CALLBACK_USB_GetDescriptor+0x1c>
    16da:	43 c0       	rjmp	.+134    	; 0x1762 <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    16dc:	8d e8       	ldi	r24, 0x8D	; 141
    16de:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    16e0:	24 e0       	ldi	r18, 0x04	; 4
    16e2:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    16e4:	42 c0       	rjmp	.+132    	; 0x176a <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    16e6:	21 32       	cpi	r18, 0x21	; 33
    16e8:	31 05       	cpc	r19, r1
    16ea:	c9 f0       	breq	.+50     	; 0x171e <CALLBACK_USB_GetDescriptor+0x5e>
    16ec:	22 32       	cpi	r18, 0x22	; 34
    16ee:	31 05       	cpc	r19, r1
    16f0:	19 f1       	breq	.+70     	; 0x1738 <CALLBACK_USB_GetDescriptor+0x78>
    16f2:	37 c0       	rjmp	.+110    	; 0x1762 <CALLBACK_USB_GetDescriptor+0xa2>
    16f4:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	91 05       	cpc	r25, r1
    16fa:	41 f0       	breq	.+16     	; 0x170c <CALLBACK_USB_GetDescriptor+0x4c>
    16fc:	82 30       	cpi	r24, 0x02	; 2
    16fe:	91 05       	cpc	r25, r1
    1700:	41 f0       	breq	.+16     	; 0x1712 <CALLBACK_USB_GetDescriptor+0x52>
    1702:	89 2b       	or	r24, r25
    1704:	71 f5       	brne	.+92     	; 0x1762 <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1706:	e0 e0       	ldi	r30, 0x00	; 0
    1708:	f2 e0       	ldi	r31, 0x02	; 2
    170a:	05 c0       	rjmp	.+10     	; 0x1716 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    170c:	e0 ef       	ldi	r30, 0xF0	; 240
    170e:	f1 e0       	ldi	r31, 0x01	; 1
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1712:	e0 ee       	ldi	r30, 0xE0	; 224
    1714:	f1 e0       	ldi	r31, 0x01	; 1
    1716:	84 91       	lpm	r24, Z
    1718:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    171a:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    171c:	26 c0       	rjmp	.+76     	; 0x176a <CALLBACK_USB_GetDescriptor+0xaa>
    171e:	65 30       	cpi	r22, 0x05	; 5
    1720:	00 f5       	brcc	.+64     	; 0x1762 <CALLBACK_USB_GetDescriptor+0xa2>
    1722:	e6 2f       	mov	r30, r22
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	ec 5d       	subi	r30, 0xDC	; 220
    172c:	fe 4f       	sbci	r31, 0xFE	; 254
    172e:	20 81       	ld	r18, Z
    1730:	31 81       	ldd	r19, Z+1	; 0x01
    1732:	89 e0       	ldi	r24, 0x09	; 9
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	19 c0       	rjmp	.+50     	; 0x176a <CALLBACK_USB_GetDescriptor+0xaa>
    1738:	65 30       	cpi	r22, 0x05	; 5
    173a:	98 f4       	brcc	.+38     	; 0x1762 <CALLBACK_USB_GetDescriptor+0xa2>
    173c:	e6 2f       	mov	r30, r22
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	df 01       	movw	r26, r30
    1742:	aa 0f       	add	r26, r26
    1744:	bb 1f       	adc	r27, r27
    1746:	a6 5e       	subi	r26, 0xE6	; 230
    1748:	be 4f       	sbci	r27, 0xFE	; 254
    174a:	2d 91       	ld	r18, X+
    174c:	3c 91       	ld	r19, X
    174e:	eb 5e       	subi	r30, 0xEB	; 235
    1750:	fe 4f       	sbci	r31, 0xFE	; 254
    1752:	80 81       	ld	r24, Z
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	09 c0       	rjmp	.+18     	; 0x176a <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1758:	82 e1       	ldi	r24, 0x12	; 18
    175a:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    175c:	21 e9       	ldi	r18, 0x91	; 145
    175e:	32 e0       	ldi	r19, 0x02	; 2
    1760:	04 c0       	rjmp	.+8      	; 0x176a <CALLBACK_USB_GetDescriptor+0xaa>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    176a:	fa 01       	movw	r30, r20
    176c:	31 83       	std	Z+1, r19	; 0x01
    176e:	20 83       	st	Z, r18
    return Size;
}
    1770:	08 95       	ret

00001772 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1772:	80 e1       	ldi	r24, 0x10	; 16
    1774:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1776:	82 e1       	ldi	r24, 0x12	; 18
    1778:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    177a:	09 b4       	in	r0, 0x29	; 41
    177c:	00 fe       	sbrs	r0, 0
    177e:	fd cf       	rjmp	.-6      	; 0x177a <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1780:	80 91 d8 00 	lds	r24, 0x00D8
    1784:	8f 7d       	andi	r24, 0xDF	; 223
    1786:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    178a:	80 91 e0 00 	lds	r24, 0x00E0
    178e:	82 60       	ori	r24, 0x02	; 2
    1790:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1794:	80 91 e0 00 	lds	r24, 0x00E0
    1798:	81 fd       	sbrc	r24, 1
    179a:	fc cf       	rjmp	.-8      	; 0x1794 <USB_Device_SendRemoteWakeup+0x22>
}
    179c:	08 95       	ret

0000179e <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    179e:	98 2f       	mov	r25, r24
    17a0:	97 30       	cpi	r25, 0x07	; 7
    17a2:	58 f5       	brcc	.+86     	; 0x17fa <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17a4:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    17a8:	98 17       	cp	r25, r24
    17aa:	39 f0       	breq	.+14     	; 0x17ba <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    17ac:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    17b0:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    17b4:	50 91 f0 00 	lds	r21, 0x00F0
    17b8:	03 c0       	rjmp	.+6      	; 0x17c0 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    17ba:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    17bc:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    17be:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    17c0:	21 ff       	sbrs	r18, 1
    17c2:	19 c0       	rjmp	.+50     	; 0x17f6 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    17c4:	30 91 eb 00 	lds	r19, 0x00EB
    17c8:	3e 7f       	andi	r19, 0xFE	; 254
    17ca:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    17ce:	30 91 ed 00 	lds	r19, 0x00ED
    17d2:	3d 7f       	andi	r19, 0xFD	; 253
    17d4:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    17d8:	30 91 eb 00 	lds	r19, 0x00EB
    17dc:	31 60       	ori	r19, 0x01	; 1
    17de:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    17e2:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    17e6:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    17ea:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    17ee:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    17f2:	27 ff       	sbrs	r18, 7
    17f4:	07 c0       	rjmp	.+14     	; 0x1804 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    17f6:	9f 5f       	subi	r25, 0xFF	; 255
    17f8:	d3 cf       	rjmp	.-90     	; 0x17a0 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17fa:	8f 70       	andi	r24, 0x0F	; 15
    17fc:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1804:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1806:	08 95       	ret

00001808 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1808:	80 91 de 01 	lds	r24, 0x01DE
    180c:	87 fd       	sbrc	r24, 7
    180e:	05 c0       	rjmp	.+10     	; 0x181a <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1810:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1814:	80 ff       	sbrs	r24, 0
    1816:	0e c0       	rjmp	.+28     	; 0x1834 <Endpoint_ClearStatusStage+0x2c>
    1818:	12 c0       	rjmp	.+36     	; 0x183e <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    181a:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    181e:	82 fd       	sbrc	r24, 2
    1820:	05 c0       	rjmp	.+10     	; 0x182c <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1822:	80 91 dd 01 	lds	r24, 0x01DD
    1826:	81 11       	cpse	r24, r1
    1828:	f8 cf       	rjmp	.-16     	; 0x181a <Endpoint_ClearStatusStage+0x12>
    182a:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    182c:	80 91 e8 00 	lds	r24, 0x00E8
    1830:	8b 77       	andi	r24, 0x7B	; 123
    1832:	08 c0       	rjmp	.+16     	; 0x1844 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1834:	80 91 dd 01 	lds	r24, 0x01DD
    1838:	81 11       	cpse	r24, r1
    183a:	ea cf       	rjmp	.-44     	; 0x1810 <Endpoint_ClearStatusStage+0x8>
    183c:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    183e:	80 91 e8 00 	lds	r24, 0x00E8
    1842:	8e 77       	andi	r24, 0x7E	; 126
    1844:	80 93 e8 00 	sts	0x00E8, r24
    1848:	08 95       	ret

0000184a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    184a:	80 91 e4 00 	lds	r24, 0x00E4
    184e:	90 91 e5 00 	lds	r25, 0x00E5
    1852:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1854:	20 91 ec 00 	lds	r18, 0x00EC
    1858:	20 ff       	sbrs	r18, 0
    185a:	21 c0       	rjmp	.+66     	; 0x189e <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    185c:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1860:	20 fd       	sbrc	r18, 0
    1862:	21 c0       	rjmp	.+66     	; 0x18a6 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1864:	20 91 dd 01 	lds	r18, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1868:	22 23       	and	r18, r18
    186a:	89 f0       	breq	.+34     	; 0x188e <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    186c:	25 30       	cpi	r18, 0x05	; 5
    186e:	89 f0       	breq	.+34     	; 0x1892 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1870:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1874:	25 fd       	sbrc	r18, 5
    1876:	0f c0       	rjmp	.+30     	; 0x1896 <Endpoint_WaitUntilReady+0x4c>
    1878:	20 91 e4 00 	lds	r18, 0x00E4
    187c:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1880:	28 17       	cp	r18, r24
    1882:	39 07       	cpc	r19, r25
    1884:	39 f3       	breq	.-50     	; 0x1854 <Endpoint_WaitUntilReady+0xa>
    1886:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1888:	41 f0       	breq	.+16     	; 0x189a <Endpoint_WaitUntilReady+0x50>
    188a:	c9 01       	movw	r24, r18
    188c:	e3 cf       	rjmp	.-58     	; 0x1854 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1892:	83 e0       	ldi	r24, 0x03	; 3
    1894:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    189a:	84 e0       	ldi	r24, 0x04	; 4
    189c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    189e:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    18a2:	22 ff       	sbrs	r18, 2
    18a4:	df cf       	rjmp	.-66     	; 0x1864 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	08 95       	ret

000018aa <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    18aa:	0e 94 be 0c 	call	0x197c	; 0x197c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    18ae:	0e 94 c6 0c 	call	0x198c	; 0x198c <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    18b2:	e0 ee       	ldi	r30, 0xE0	; 224
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	81 60       	ori	r24, 0x01	; 1
    18ba:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    18bc:	e8 ed       	ldi	r30, 0xD8	; 216
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	8f 77       	andi	r24, 0x7F	; 127
    18c4:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    18c6:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    18c8:	a7 ed       	ldi	r26, 0xD7	; 215
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	8c 91       	ld	r24, X
    18ce:	8e 7f       	andi	r24, 0xFE	; 254
    18d0:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    18d2:	80 81       	ld	r24, Z
    18d4:	8f 7e       	andi	r24, 0xEF	; 239
    18d6:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    18d8:	10 92 dc 01 	sts	0x01DC, r1
    18dc:	08 95       	ret

000018de <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    18e6:	0e 94 be 0c 	call	0x197c	; 0x197c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    18ea:	0e 94 c6 0c 	call	0x198c	; 0x198c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    18ee:	c8 ed       	ldi	r28, 0xD8	; 216
    18f0:	d0 e0       	ldi	r29, 0x00	; 0
    18f2:	88 81       	ld	r24, Y
    18f4:	8f 77       	andi	r24, 0x7F	; 127
    18f6:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    18f8:	88 81       	ld	r24, Y
    18fa:	80 68       	ori	r24, 0x80	; 128
    18fc:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    18fe:	88 81       	ld	r24, Y
    1900:	8f 7d       	andi	r24, 0xDF	; 223
    1902:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1904:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1906:	10 92 dd 01 	sts	0x01DD, r1
	USB_Device_ConfigurationNumber  = 0;
    190a:	10 92 d9 01 	sts	0x01D9, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    190e:	10 92 db 01 	sts	0x01DB, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1912:	10 92 da 01 	sts	0x01DA, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1916:	00 ee       	ldi	r16, 0xE0	; 224
    1918:	10 e0       	ldi	r17, 0x00	; 0
    191a:	f8 01       	movw	r30, r16
    191c:	80 81       	ld	r24, Z
    191e:	8b 7f       	andi	r24, 0xFB	; 251
    1920:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1922:	88 81       	ld	r24, Y
    1924:	81 60       	ori	r24, 0x01	; 1
    1926:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1928:	42 e0       	ldi	r20, 0x02	; 2
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	0e 94 cf 0b 	call	0x179e	; 0x179e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1932:	e1 ee       	ldi	r30, 0xE1	; 225
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	8e 7f       	andi	r24, 0xFE	; 254
    193a:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    193c:	e2 ee       	ldi	r30, 0xE2	; 226
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	81 60       	ori	r24, 0x01	; 1
    1944:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1946:	80 81       	ld	r24, Z
    1948:	88 60       	ori	r24, 0x08	; 8
    194a:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    194c:	f8 01       	movw	r30, r16
    194e:	80 81       	ld	r24, Z
    1950:	8e 7f       	andi	r24, 0xFE	; 254
    1952:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1954:	88 81       	ld	r24, Y
    1956:	80 61       	ori	r24, 0x10	; 16
    1958:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	08 95       	ret

00001964 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1964:	e7 ed       	ldi	r30, 0xD7	; 215
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	81 60       	ori	r24, 0x01	; 1
    196c:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    196e:	84 e0       	ldi	r24, 0x04	; 4
    1970:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	80 93 dc 01 	sts	0x01DC, r24

	USB_ResetInterface();
    1978:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <USB_ResetInterface>

0000197c <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    197c:	e8 ed       	ldi	r30, 0xD8	; 216
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	8e 7f       	andi	r24, 0xFE	; 254
    1984:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1986:	10 92 e2 00 	sts	0x00E2, r1
    198a:	08 95       	ret

0000198c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    198c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1990:	10 92 e1 00 	sts	0x00E1, r1
    1994:	08 95       	ret

00001996 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1996:	1f 92       	push	r1
    1998:	0f 92       	push	r0
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	0f 92       	push	r0
    199e:	11 24       	eor	r1, r1
    19a0:	2f 93       	push	r18
    19a2:	3f 93       	push	r19
    19a4:	4f 93       	push	r20
    19a6:	5f 93       	push	r21
    19a8:	6f 93       	push	r22
    19aa:	7f 93       	push	r23
    19ac:	8f 93       	push	r24
    19ae:	9f 93       	push	r25
    19b0:	af 93       	push	r26
    19b2:	bf 93       	push	r27
    19b4:	ef 93       	push	r30
    19b6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    19b8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    19bc:	82 ff       	sbrs	r24, 2
    19be:	0b c0       	rjmp	.+22     	; 0x19d6 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    19c0:	80 91 e2 00 	lds	r24, 0x00E2
    19c4:	82 ff       	sbrs	r24, 2
    19c6:	07 c0       	rjmp	.+14     	; 0x19d6 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    19c8:	80 91 e1 00 	lds	r24, 0x00E1
    19cc:	8b 7f       	andi	r24, 0xFB	; 251
    19ce:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    19d2:	0e 94 00 0a 	call	0x1400	; 0x1400 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    19d6:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    19da:	80 ff       	sbrs	r24, 0
    19dc:	1f c0       	rjmp	.+62     	; 0x1a1c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    19de:	80 91 d8 00 	lds	r24, 0x00D8
    19e2:	80 ff       	sbrs	r24, 0
    19e4:	1b c0       	rjmp	.+54     	; 0x1a1c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    19e6:	80 91 da 00 	lds	r24, 0x00DA
    19ea:	8e 7f       	andi	r24, 0xFE	; 254
    19ec:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    19f0:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    19f4:	80 ff       	sbrs	r24, 0
    19f6:	0d c0       	rjmp	.+26     	; 0x1a12 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    19f8:	80 e1       	ldi	r24, 0x10	; 16
    19fa:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    19fc:	82 e1       	ldi	r24, 0x12	; 18
    19fe:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1a00:	09 b4       	in	r0, 0x29	; 41
    1a02:	00 fe       	sbrs	r0, 0
    1a04:	fd cf       	rjmp	.-6      	; 0x1a00 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	80 93 dd 01 	sts	0x01DD, r24
			EVENT_USB_Device_Connect();
    1a0c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <EVENT_USB_Device_Connect>
    1a10:	05 c0       	rjmp	.+10     	; 0x1a1c <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1a12:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1a14:	10 92 dd 01 	sts	0x01DD, r1
			EVENT_USB_Device_Disconnect();
    1a18:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1a1c:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1a20:	80 ff       	sbrs	r24, 0
    1a22:	19 c0       	rjmp	.+50     	; 0x1a56 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1a24:	80 91 e2 00 	lds	r24, 0x00E2
    1a28:	80 ff       	sbrs	r24, 0
    1a2a:	15 c0       	rjmp	.+42     	; 0x1a56 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1a2c:	80 91 e2 00 	lds	r24, 0x00E2
    1a30:	8e 7f       	andi	r24, 0xFE	; 254
    1a32:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1a36:	80 91 e2 00 	lds	r24, 0x00E2
    1a3a:	80 61       	ori	r24, 0x10	; 16
    1a3c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1a40:	80 91 d8 00 	lds	r24, 0x00D8
    1a44:	80 62       	ori	r24, 0x20	; 32
    1a46:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1a4a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1a4c:	85 e0       	ldi	r24, 0x05	; 5
    1a4e:	80 93 dd 01 	sts	0x01DD, r24
		EVENT_USB_Device_Suspend();
    1a52:	0e 94 f6 09 	call	0x13ec	; 0x13ec <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1a56:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1a5a:	84 ff       	sbrs	r24, 4
    1a5c:	2e c0       	rjmp	.+92     	; 0x1aba <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1a5e:	80 91 e2 00 	lds	r24, 0x00E2
    1a62:	84 ff       	sbrs	r24, 4
    1a64:	2a c0       	rjmp	.+84     	; 0x1aba <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1a66:	80 e1       	ldi	r24, 0x10	; 16
    1a68:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1a6a:	82 e1       	ldi	r24, 0x12	; 18
    1a6c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1a6e:	09 b4       	in	r0, 0x29	; 41
    1a70:	00 fe       	sbrs	r0, 0
    1a72:	fd cf       	rjmp	.-6      	; 0x1a6e <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1a74:	80 91 d8 00 	lds	r24, 0x00D8
    1a78:	8f 7d       	andi	r24, 0xDF	; 223
    1a7a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1a7e:	80 91 e1 00 	lds	r24, 0x00E1
    1a82:	8f 7e       	andi	r24, 0xEF	; 239
    1a84:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1a88:	80 91 e2 00 	lds	r24, 0x00E2
    1a8c:	8f 7e       	andi	r24, 0xEF	; 239
    1a8e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1a92:	80 91 e2 00 	lds	r24, 0x00E2
    1a96:	81 60       	ori	r24, 0x01	; 1
    1a98:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1a9c:	80 91 d9 01 	lds	r24, 0x01D9
    1aa0:	81 11       	cpse	r24, r1
    1aa2:	04 c0       	rjmp	.+8      	; 0x1aac <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1aa4:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1aa8:	87 ff       	sbrs	r24, 7
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <__vector_10+0x11a>
    1aac:	84 e0       	ldi	r24, 0x04	; 4
    1aae:	01 c0       	rjmp	.+2      	; 0x1ab2 <__vector_10+0x11c>
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	80 93 dd 01 	sts	0x01DD, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1ab6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1aba:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1abe:	83 ff       	sbrs	r24, 3
    1ac0:	29 c0       	rjmp	.+82     	; 0x1b14 <__vector_10+0x17e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1ac2:	80 91 e2 00 	lds	r24, 0x00E2
    1ac6:	83 ff       	sbrs	r24, 3
    1ac8:	25 c0       	rjmp	.+74     	; 0x1b14 <__vector_10+0x17e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1aca:	80 91 e1 00 	lds	r24, 0x00E1
    1ace:	87 7f       	andi	r24, 0xF7	; 247
    1ad0:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1ad4:	82 e0       	ldi	r24, 0x02	; 2
    1ad6:	80 93 dd 01 	sts	0x01DD, r24
		USB_Device_ConfigurationNumber = 0;
    1ada:	10 92 d9 01 	sts	0x01D9, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1ade:	80 91 e1 00 	lds	r24, 0x00E1
    1ae2:	8e 7f       	andi	r24, 0xFE	; 254
    1ae4:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1ae8:	80 91 e2 00 	lds	r24, 0x00E2
    1aec:	8e 7f       	andi	r24, 0xFE	; 254
    1aee:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1af2:	80 91 e2 00 	lds	r24, 0x00E2
    1af6:	80 61       	ori	r24, 0x10	; 16
    1af8:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1afc:	42 e0       	ldi	r20, 0x02	; 2
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	0e 94 cf 0b 	call	0x179e	; 0x179e <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1b06:	80 91 f0 00 	lds	r24, 0x00F0
    1b0a:	88 60       	ori	r24, 0x08	; 8
    1b0c:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1b10:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1b14:	ff 91       	pop	r31
    1b16:	ef 91       	pop	r30
    1b18:	bf 91       	pop	r27
    1b1a:	af 91       	pop	r26
    1b1c:	9f 91       	pop	r25
    1b1e:	8f 91       	pop	r24
    1b20:	7f 91       	pop	r23
    1b22:	6f 91       	pop	r22
    1b24:	5f 91       	pop	r21
    1b26:	4f 91       	pop	r20
    1b28:	3f 91       	pop	r19
    1b2a:	2f 91       	pop	r18
    1b2c:	0f 90       	pop	r0
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	0f 90       	pop	r0
    1b32:	1f 90       	pop	r1
    1b34:	18 95       	reti

00001b36 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1b36:	1f 92       	push	r1
    1b38:	0f 92       	push	r0
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	0f 92       	push	r0
    1b3e:	11 24       	eor	r1, r1
    1b40:	2f 93       	push	r18
    1b42:	3f 93       	push	r19
    1b44:	4f 93       	push	r20
    1b46:	5f 93       	push	r21
    1b48:	6f 93       	push	r22
    1b4a:	7f 93       	push	r23
    1b4c:	8f 93       	push	r24
    1b4e:	9f 93       	push	r25
    1b50:	af 93       	push	r26
    1b52:	bf 93       	push	r27
    1b54:	cf 93       	push	r28
    1b56:	ef 93       	push	r30
    1b58:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1b5a:	c0 91 e9 00 	lds	r28, 0x00E9
    1b5e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1b60:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b64:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1b68:	80 91 f0 00 	lds	r24, 0x00F0
    1b6c:	87 7f       	andi	r24, 0xF7	; 247
    1b6e:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1b72:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1b74:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <USB_Device_ProcessControlRequest>
    1b78:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1b7c:	80 91 f0 00 	lds	r24, 0x00F0
    1b80:	88 60       	ori	r24, 0x08	; 8
    1b82:	80 93 f0 00 	sts	0x00F0, r24
    1b86:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1b8a:	ff 91       	pop	r31
    1b8c:	ef 91       	pop	r30
    1b8e:	cf 91       	pop	r28
    1b90:	bf 91       	pop	r27
    1b92:	af 91       	pop	r26
    1b94:	9f 91       	pop	r25
    1b96:	8f 91       	pop	r24
    1b98:	7f 91       	pop	r23
    1b9a:	6f 91       	pop	r22
    1b9c:	5f 91       	pop	r21
    1b9e:	4f 91       	pop	r20
    1ba0:	3f 91       	pop	r19
    1ba2:	2f 91       	pop	r18
    1ba4:	0f 90       	pop	r0
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	0f 90       	pop	r0
    1baa:	1f 90       	pop	r1
    1bac:	18 95       	reti

00001bae <Endpoint_Write_Stream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1bae:	cf 92       	push	r12
    1bb0:	df 92       	push	r13
    1bb2:	ef 92       	push	r14
    1bb4:	ff 92       	push	r15
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	7c 01       	movw	r14, r24
    1bc0:	8b 01       	movw	r16, r22
    1bc2:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1bc4:	0e 94 25 0c 	call	0x184a	; 0x184a <Endpoint_WaitUntilReady>
    1bc8:	81 11       	cpse	r24, r1
    1bca:	31 c0       	rjmp	.+98     	; 0x1c2e <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1bcc:	20 97       	sbiw	r28, 0x00	; 0
    1bce:	31 f0       	breq	.+12     	; 0x1bdc <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    1bd0:	88 81       	ld	r24, Y
    1bd2:	99 81       	ldd	r25, Y+1	; 0x01
    1bd4:	08 1b       	sub	r16, r24
    1bd6:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1bd8:	e8 0e       	add	r14, r24
    1bda:	f9 1e       	adc	r15, r25
// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1bdc:	c1 2c       	mov	r12, r1
    1bde:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1be0:	01 15       	cp	r16, r1
    1be2:	11 05       	cpc	r17, r1
    1be4:	19 f1       	breq	.+70     	; 0x1c2c <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1be6:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1bea:	85 fd       	sbrc	r24, 5
    1bec:	14 c0       	rjmp	.+40     	; 0x1c16 <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bee:	80 91 e8 00 	lds	r24, 0x00E8
    1bf2:	8e 77       	andi	r24, 0x7E	; 126
    1bf4:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1bf8:	20 97       	sbiw	r28, 0x00	; 0
    1bfa:	41 f0       	breq	.+16     	; 0x1c0c <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    1bfc:	88 81       	ld	r24, Y
    1bfe:	99 81       	ldd	r25, Y+1	; 0x01
    1c00:	8c 0d       	add	r24, r12
    1c02:	9d 1d       	adc	r25, r13
    1c04:	99 83       	std	Y+1, r25	; 0x01
    1c06:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1c08:	85 e0       	ldi	r24, 0x05	; 5
    1c0a:	11 c0       	rjmp	.+34     	; 0x1c2e <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1c0c:	0e 94 25 0c 	call	0x184a	; 0x184a <Endpoint_WaitUntilReady>
    1c10:	88 23       	and	r24, r24
    1c12:	31 f3       	breq	.-52     	; 0x1be0 <Endpoint_Write_Stream_LE+0x32>
    1c14:	0c c0       	rjmp	.+24     	; 0x1c2e <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1c16:	f7 01       	movw	r30, r14
    1c18:	81 91       	ld	r24, Z+
    1c1a:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c1c:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1c20:	01 50       	subi	r16, 0x01	; 1
    1c22:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1c24:	ff ef       	ldi	r31, 0xFF	; 255
    1c26:	cf 1a       	sub	r12, r31
    1c28:	df 0a       	sbc	r13, r31
    1c2a:	da cf       	rjmp	.-76     	; 0x1be0 <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
}
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	1f 91       	pop	r17
    1c34:	0f 91       	pop	r16
    1c36:	ff 90       	pop	r15
    1c38:	ef 90       	pop	r14
    1c3a:	df 90       	pop	r13
    1c3c:	cf 90       	pop	r12
    1c3e:	08 95       	ret

00001c40 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1c40:	20 91 e4 01 	lds	r18, 0x01E4
    1c44:	30 91 e5 01 	lds	r19, 0x01E5
    1c48:	26 17       	cp	r18, r22
    1c4a:	37 07       	cpc	r19, r23
    1c4c:	48 f0       	brcs	.+18     	; 0x1c60 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1c4e:	61 15       	cp	r22, r1
    1c50:	71 05       	cpc	r23, r1
    1c52:	39 f4       	brne	.+14     	; 0x1c62 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c54:	20 91 e8 00 	lds	r18, 0x00E8
    1c58:	2e 77       	andi	r18, 0x7E	; 126
    1c5a:	20 93 e8 00 	sts	0x00E8, r18
    1c5e:	01 c0       	rjmp	.+2      	; 0x1c62 <Endpoint_Write_Control_Stream_LE+0x22>
    1c60:	b9 01       	movw	r22, r18
    1c62:	fc 01       	movw	r30, r24
    1c64:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1c66:	61 15       	cp	r22, r1
    1c68:	71 05       	cpc	r23, r1
    1c6a:	a9 f1       	breq	.+106    	; 0x1cd6 <Endpoint_Write_Control_Stream_LE+0x96>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c6c:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c70:	88 23       	and	r24, r24
    1c72:	e9 f1       	breq	.+122    	; 0x1cee <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c74:	85 30       	cpi	r24, 0x05	; 5
    1c76:	e9 f1       	breq	.+122    	; 0x1cf2 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1c78:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1c7c:	83 fd       	sbrc	r24, 3
    1c7e:	35 c0       	rjmp	.+106    	; 0x1cea <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c80:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1c84:	82 ff       	sbrs	r24, 2
    1c86:	06 c0       	rjmp	.+12     	; 0x1c94 <Endpoint_Write_Control_Stream_LE+0x54>
    1c88:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1c8c:	82 ff       	sbrs	r24, 2
    1c8e:	26 c0       	rjmp	.+76     	; 0x1cdc <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c94:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1c98:	80 ff       	sbrs	r24, 0
    1c9a:	e5 cf       	rjmp	.-54     	; 0x1c66 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1c9c:	20 91 f3 00 	lds	r18, 0x00F3
    1ca0:	80 91 f2 00 	lds	r24, 0x00F2
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1ca8:	61 15       	cp	r22, r1
    1caa:	71 05       	cpc	r23, r1
    1cac:	51 f0       	breq	.+20     	; 0x1cc2 <Endpoint_Write_Control_Stream_LE+0x82>
    1cae:	88 30       	cpi	r24, 0x08	; 8
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	38 f4       	brcc	.+14     	; 0x1cc2 <Endpoint_Write_Control_Stream_LE+0x82>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1cb4:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1cb6:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1cba:	61 50       	subi	r22, 0x01	; 1
    1cbc:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1cbe:	01 96       	adiw	r24, 0x01	; 1
    1cc0:	f3 cf       	rjmp	.-26     	; 0x1ca8 <Endpoint_Write_Control_Stream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1cc2:	21 e0       	ldi	r18, 0x01	; 1
    1cc4:	08 97       	sbiw	r24, 0x08	; 8
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <Endpoint_Write_Control_Stream_LE+0x8a>
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1cca:	80 91 e8 00 	lds	r24, 0x00E8
    1cce:	8e 77       	andi	r24, 0x7E	; 126
    1cd0:	80 93 e8 00 	sts	0x00E8, r24
    1cd4:	c8 cf       	rjmp	.-112    	; 0x1c66 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1cd6:	21 11       	cpse	r18, r1
    1cd8:	c9 cf       	rjmp	.-110    	; 0x1c6c <Endpoint_Write_Control_Stream_LE+0x2c>
    1cda:	d6 cf       	rjmp	.-84     	; 0x1c88 <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1cdc:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ce0:	88 23       	and	r24, r24
    1ce2:	29 f0       	breq	.+10     	; 0x1cee <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ce4:	85 30       	cpi	r24, 0x05	; 5
    1ce6:	81 f6       	brne	.-96     	; 0x1c88 <Endpoint_Write_Control_Stream_LE+0x48>
    1ce8:	04 c0       	rjmp	.+8      	; 0x1cf2 <Endpoint_Write_Control_Stream_LE+0xb2>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1cf2:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1cf4:	08 95       	ret

00001cf6 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1cf6:	20 91 e4 01 	lds	r18, 0x01E4
    1cfa:	30 91 e5 01 	lds	r19, 0x01E5
    1cfe:	26 17       	cp	r18, r22
    1d00:	37 07       	cpc	r19, r23
    1d02:	48 f0       	brcs	.+18     	; 0x1d16 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1d04:	61 15       	cp	r22, r1
    1d06:	71 05       	cpc	r23, r1
    1d08:	39 f4       	brne	.+14     	; 0x1d18 <Endpoint_Write_Control_PStream_LE+0x22>
    1d0a:	20 91 e8 00 	lds	r18, 0x00E8
    1d0e:	2e 77       	andi	r18, 0x7E	; 126
    1d10:	20 93 e8 00 	sts	0x00E8, r18
    1d14:	01 c0       	rjmp	.+2      	; 0x1d18 <Endpoint_Write_Control_PStream_LE+0x22>
    1d16:	b9 01       	movw	r22, r18
    1d18:	fc 01       	movw	r30, r24
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1d1c:	61 15       	cp	r22, r1
    1d1e:	71 05       	cpc	r23, r1
    1d20:	c1 f1       	breq	.+112    	; 0x1d92 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1d22:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1d26:	88 23       	and	r24, r24
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <Endpoint_Write_Control_PStream_LE+0x36>
    1d2a:	3f c0       	rjmp	.+126    	; 0x1daa <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1d2c:	85 30       	cpi	r24, 0x05	; 5
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <Endpoint_Write_Control_PStream_LE+0x3c>
    1d30:	3e c0       	rjmp	.+124    	; 0x1dae <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d32:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1d36:	83 fd       	sbrc	r24, 3
    1d38:	36 c0       	rjmp	.+108    	; 0x1da6 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1d3a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1d3e:	82 ff       	sbrs	r24, 2
    1d40:	06 c0       	rjmp	.+12     	; 0x1d4e <Endpoint_Write_Control_PStream_LE+0x58>
    1d42:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1d46:	82 ff       	sbrs	r24, 2
    1d48:	27 c0       	rjmp	.+78     	; 0x1d98 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1d4e:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1d52:	80 ff       	sbrs	r24, 0
    1d54:	e3 cf       	rjmp	.-58     	; 0x1d1c <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1d56:	20 91 f3 00 	lds	r18, 0x00F3
    1d5a:	80 91 f2 00 	lds	r24, 0x00F2
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1d62:	61 15       	cp	r22, r1
    1d64:	71 05       	cpc	r23, r1
    1d66:	59 f0       	breq	.+22     	; 0x1d7e <Endpoint_Write_Control_PStream_LE+0x88>
    1d68:	88 30       	cpi	r24, 0x08	; 8
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	40 f4       	brcc	.+16     	; 0x1d7e <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1d6e:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d70:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1d74:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1d76:	61 50       	subi	r22, 0x01	; 1
    1d78:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1d7a:	01 96       	adiw	r24, 0x01	; 1
    1d7c:	f2 cf       	rjmp	.-28     	; 0x1d62 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1d7e:	21 e0       	ldi	r18, 0x01	; 1
    1d80:	08 97       	sbiw	r24, 0x08	; 8
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <Endpoint_Write_Control_PStream_LE+0x90>
    1d84:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d86:	80 91 e8 00 	lds	r24, 0x00E8
    1d8a:	8e 77       	andi	r24, 0x7E	; 126
    1d8c:	80 93 e8 00 	sts	0x00E8, r24
    1d90:	c5 cf       	rjmp	.-118    	; 0x1d1c <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1d92:	21 11       	cpse	r18, r1
    1d94:	c6 cf       	rjmp	.-116    	; 0x1d22 <Endpoint_Write_Control_PStream_LE+0x2c>
    1d96:	d5 cf       	rjmp	.-86     	; 0x1d42 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1d98:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1d9c:	88 23       	and	r24, r24
    1d9e:	29 f0       	breq	.+10     	; 0x1daa <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1da0:	85 30       	cpi	r24, 0x05	; 5
    1da2:	79 f6       	brne	.-98     	; 0x1d42 <Endpoint_Write_Control_PStream_LE+0x4c>
    1da4:	04 c0       	rjmp	.+8      	; 0x1dae <Endpoint_Write_Control_PStream_LE+0xb8>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1daa:	82 e0       	ldi	r24, 0x02	; 2
    1dac:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1dae:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1db0:	08 95       	ret

00001db2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1db2:	0f 93       	push	r16
    1db4:	1f 93       	push	r17
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	aa 97       	sbiw	r28, 0x2a	; 42
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cd bf       	out	0x3d, r28	; 61
    1dca:	ee ed       	ldi	r30, 0xDE	; 222
    1dcc:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1dce:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1dd2:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1dd4:	21 e0       	ldi	r18, 0x01	; 1
    1dd6:	e6 3e       	cpi	r30, 0xE6	; 230
    1dd8:	f2 07       	cpc	r31, r18
    1dda:	c9 f7       	brne	.-14     	; 0x1dce <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1ddc:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1de0:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1de4:	83 ff       	sbrs	r24, 3
    1de6:	1d c1       	rjmp	.+570    	; 0x2022 <USB_Device_ProcessControlRequest+0x270>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1de8:	20 91 de 01 	lds	r18, 0x01DE

		switch (USB_ControlRequest.bRequest)
    1dec:	30 91 df 01 	lds	r19, 0x01DF
    1df0:	83 2f       	mov	r24, r19
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	8a 30       	cpi	r24, 0x0A	; 10
    1df6:	91 05       	cpc	r25, r1
    1df8:	08 f0       	brcs	.+2      	; 0x1dfc <USB_Device_ProcessControlRequest+0x4a>
    1dfa:	13 c1       	rjmp	.+550    	; 0x2022 <USB_Device_ProcessControlRequest+0x270>
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	ea 5a       	subi	r30, 0xAA	; 170
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	0c 94 c0 29 	jmp	0x5380	; 0x5380 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e06:	20 38       	cpi	r18, 0x80	; 128
    1e08:	81 f0       	breq	.+32     	; 0x1e2a <USB_Device_ProcessControlRequest+0x78>
    1e0a:	22 38       	cpi	r18, 0x82	; 130
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <USB_Device_ProcessControlRequest+0x5e>
    1e0e:	09 c1       	rjmp	.+530    	; 0x2022 <USB_Device_ProcessControlRequest+0x270>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e10:	80 91 e2 01 	lds	r24, 0x01E2
    1e14:	8f 70       	andi	r24, 0x0F	; 15
    1e16:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e1a:	80 91 eb 00 	lds	r24, 0x00EB
    1e1e:	85 fb       	bst	r24, 5
    1e20:	88 27       	eor	r24, r24
    1e22:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e24:	10 92 e9 00 	sts	0x00E9, r1
    1e28:	06 c0       	rjmp	.+12     	; 0x1e36 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1e2a:	80 91 da 01 	lds	r24, 0x01DA
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1e2e:	90 91 db 01 	lds	r25, 0x01DB
    1e32:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1e34:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e36:	90 91 e8 00 	lds	r25, 0x00E8
    1e3a:	97 7f       	andi	r25, 0xF7	; 247
    1e3c:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1e40:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1e44:	10 92 f1 00 	sts	0x00F1, r1
    1e48:	c6 c0       	rjmp	.+396    	; 0x1fd6 <USB_Device_ProcessControlRequest+0x224>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e4a:	82 2f       	mov	r24, r18
    1e4c:	8d 7f       	andi	r24, 0xFD	; 253
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <USB_Device_ProcessControlRequest+0xa0>
    1e50:	e8 c0       	rjmp	.+464    	; 0x2022 <USB_Device_ProcessControlRequest+0x270>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1e52:	22 23       	and	r18, r18
    1e54:	19 f0       	breq	.+6      	; 0x1e5c <USB_Device_ProcessControlRequest+0xaa>
    1e56:	22 30       	cpi	r18, 0x02	; 2
    1e58:	61 f0       	breq	.+24     	; 0x1e72 <USB_Device_ProcessControlRequest+0xc0>
    1e5a:	e3 c0       	rjmp	.+454    	; 0x2022 <USB_Device_ProcessControlRequest+0x270>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1e5c:	80 91 e0 01 	lds	r24, 0x01E0
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	09 f0       	breq	.+2      	; 0x1e66 <USB_Device_ProcessControlRequest+0xb4>
    1e64:	de c0       	rjmp	.+444    	; 0x2022 <USB_Device_ProcessControlRequest+0x270>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1e66:	33 30       	cpi	r19, 0x03	; 3
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <USB_Device_ProcessControlRequest+0xba>
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	80 93 db 01 	sts	0x01DB, r24
    1e70:	28 c0       	rjmp	.+80     	; 0x1ec2 <USB_Device_ProcessControlRequest+0x110>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1e72:	80 91 e0 01 	lds	r24, 0x01E0
    1e76:	81 11       	cpse	r24, r1
    1e78:	24 c0       	rjmp	.+72     	; 0x1ec2 <USB_Device_ProcessControlRequest+0x110>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1e7a:	20 91 e2 01 	lds	r18, 0x01E2
    1e7e:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <USB_Device_ProcessControlRequest+0xd2>
    1e82:	cf c0       	rjmp	.+414    	; 0x2022 <USB_Device_ProcessControlRequest+0x270>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e84:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1e88:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1e8c:	80 ff       	sbrs	r24, 0
    1e8e:	19 c0       	rjmp	.+50     	; 0x1ec2 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1e90:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1e94:	33 30       	cpi	r19, 0x03	; 3
    1e96:	11 f4       	brne	.+4      	; 0x1e9c <USB_Device_ProcessControlRequest+0xea>
    1e98:	80 62       	ori	r24, 0x20	; 32
    1e9a:	11 c0       	rjmp	.+34     	; 0x1ebe <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1e9c:	80 61       	ori	r24, 0x10	; 16
    1e9e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	02 2e       	mov	r0, r18
    1ea8:	01 c0       	rjmp	.+2      	; 0x1eac <USB_Device_ProcessControlRequest+0xfa>
    1eaa:	88 0f       	add	r24, r24
    1eac:	0a 94       	dec	r0
    1eae:	ea f7       	brpl	.-6      	; 0x1eaa <USB_Device_ProcessControlRequest+0xf8>
    1eb0:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1eb4:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1eb8:	80 91 eb 00 	lds	r24, 0x00EB
    1ebc:	88 60       	ori	r24, 0x08	; 8
    1ebe:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ec2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ec6:	80 91 e8 00 	lds	r24, 0x00E8
    1eca:	87 7f       	andi	r24, 0xF7	; 247
    1ecc:	87 c0       	rjmp	.+270    	; 0x1fdc <USB_Device_ProcessControlRequest+0x22a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1ece:	21 11       	cpse	r18, r1
    1ed0:	a8 c0       	rjmp	.+336    	; 0x2022 <USB_Device_ProcessControlRequest+0x270>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    1ed2:	10 91 e0 01 	lds	r17, 0x01E0
    1ed6:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1ed8:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1eda:	f8 94       	cli
    1edc:	80 91 e8 00 	lds	r24, 0x00E8
    1ee0:	87 7f       	andi	r24, 0xF7	; 247
    1ee2:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1ee6:	0e 94 04 0c 	call	0x1808	; 0x1808 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1eea:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1eee:	80 ff       	sbrs	r24, 0
    1ef0:	fc cf       	rjmp	.-8      	; 0x1eea <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1ef2:	80 91 e3 00 	lds	r24, 0x00E3
    1ef6:	80 78       	andi	r24, 0x80	; 128
    1ef8:	81 2b       	or	r24, r17

				UDADDR = Temp;
    1efa:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    1efe:	80 68       	ori	r24, 0x80	; 128
    1f00:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1f04:	11 23       	and	r17, r17
    1f06:	11 f0       	breq	.+4      	; 0x1f0c <USB_Device_ProcessControlRequest+0x15a>
    1f08:	83 e0       	ldi	r24, 0x03	; 3
    1f0a:	01 c0       	rjmp	.+2      	; 0x1f0e <USB_Device_ProcessControlRequest+0x15c>
    1f0c:	82 e0       	ldi	r24, 0x02	; 2
    1f0e:	80 93 dd 01 	sts	0x01DD, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1f12:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    1f14:	86 c0       	rjmp	.+268    	; 0x2022 <USB_Device_ProcessControlRequest+0x270>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f16:	20 58       	subi	r18, 0x80	; 128
    1f18:	22 30       	cpi	r18, 0x02	; 2
    1f1a:	08 f0       	brcs	.+2      	; 0x1f1e <USB_Device_ProcessControlRequest+0x16c>
    1f1c:	82 c0       	rjmp	.+260    	; 0x2022 <USB_Device_ProcessControlRequest+0x270>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1f1e:	80 91 e0 01 	lds	r24, 0x01E0
    1f22:	90 91 e1 01 	lds	r25, 0x01E1
    1f26:	8c 3d       	cpi	r24, 0xDC	; 220
    1f28:	23 e0       	ldi	r18, 0x03	; 3
    1f2a:	92 07       	cpc	r25, r18
    1f2c:	79 f5       	brne	.+94     	; 0x1f8c <USB_Device_ProcessControlRequest+0x1da>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1f2e:	83 e0       	ldi	r24, 0x03	; 3
    1f30:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1f32:	8a e2       	ldi	r24, 0x2A	; 42
    1f34:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1f36:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1f38:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1f3a:	de 01       	movw	r26, r28
    1f3c:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1f40:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1f42:	51 e2       	ldi	r21, 0x21	; 33
    1f44:	e3 2f       	mov	r30, r19
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	50 93 57 00 	sts	0x0057, r21
    1f4c:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1f4e:	20 ff       	sbrs	r18, 0
    1f50:	03 c0       	rjmp	.+6      	; 0x1f58 <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
    1f52:	e2 95       	swap	r30
    1f54:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1f56:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1f58:	ef 70       	andi	r30, 0x0F	; 15
    1f5a:	8e 2f       	mov	r24, r30
    1f5c:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1f5e:	ea 30       	cpi	r30, 0x0A	; 10
    1f60:	10 f0       	brcs	.+4      	; 0x1f66 <USB_Device_ProcessControlRequest+0x1b4>
    1f62:	c7 96       	adiw	r24, 0x37	; 55
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <USB_Device_ProcessControlRequest+0x1b6>
    1f66:	c0 96       	adiw	r24, 0x30	; 48
    1f68:	8d 93       	st	X+, r24
    1f6a:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f6c:	2f 5f       	subi	r18, 0xFF	; 255
    1f6e:	24 31       	cpi	r18, 0x14	; 20
    1f70:	49 f7       	brne	.-46     	; 0x1f44 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1f72:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f74:	80 91 e8 00 	lds	r24, 0x00E8
    1f78:	87 7f       	andi	r24, 0xF7	; 247
    1f7a:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1f7e:	6a e2       	ldi	r22, 0x2A	; 42
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	ce 01       	movw	r24, r28
    1f84:	01 96       	adiw	r24, 0x01	; 1
    1f86:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <Endpoint_Write_Control_Stream_LE>
    1f8a:	14 c0       	rjmp	.+40     	; 0x1fb4 <USB_Device_ProcessControlRequest+0x202>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1f8c:	ae 01       	movw	r20, r28
    1f8e:	4f 5f       	subi	r20, 0xFF	; 255
    1f90:	5f 4f       	sbci	r21, 0xFF	; 255
    1f92:	60 91 e2 01 	lds	r22, 0x01E2
    1f96:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <CALLBACK_USB_GetDescriptor>
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <USB_Device_ProcessControlRequest+0x1ee>
    1f9e:	41 c0       	rjmp	.+130    	; 0x2022 <USB_Device_ProcessControlRequest+0x270>
    1fa0:	20 91 e8 00 	lds	r18, 0x00E8
    1fa4:	27 7f       	andi	r18, 0xF7	; 247
    1fa6:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1faa:	bc 01       	movw	r22, r24
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb0:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1fb4:	80 91 e8 00 	lds	r24, 0x00E8
    1fb8:	8b 77       	andi	r24, 0x7B	; 123
    1fba:	80 93 e8 00 	sts	0x00E8, r24
    1fbe:	31 c0       	rjmp	.+98     	; 0x2022 <USB_Device_ProcessControlRequest+0x270>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1fc0:	20 38       	cpi	r18, 0x80	; 128
    1fc2:	79 f5       	brne	.+94     	; 0x2022 <USB_Device_ProcessControlRequest+0x270>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fc4:	80 91 e8 00 	lds	r24, 0x00E8
    1fc8:	87 7f       	andi	r24, 0xF7	; 247
    1fca:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1fce:	80 91 d9 01 	lds	r24, 0x01D9
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1fd2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fd6:	80 91 e8 00 	lds	r24, 0x00E8
    1fda:	8e 77       	andi	r24, 0x7E	; 126
    1fdc:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1fe0:	0e 94 04 0c 	call	0x1808	; 0x1808 <Endpoint_ClearStatusStage>
    1fe4:	1e c0       	rjmp	.+60     	; 0x2022 <USB_Device_ProcessControlRequest+0x270>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1fe6:	21 11       	cpse	r18, r1
    1fe8:	1c c0       	rjmp	.+56     	; 0x2022 <USB_Device_ProcessControlRequest+0x270>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1fea:	90 91 e0 01 	lds	r25, 0x01E0
    1fee:	92 30       	cpi	r25, 0x02	; 2
    1ff0:	c0 f4       	brcc	.+48     	; 0x2022 <USB_Device_ProcessControlRequest+0x270>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ff2:	80 91 e8 00 	lds	r24, 0x00E8
    1ff6:	87 7f       	andi	r24, 0xF7	; 247
    1ff8:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1ffc:	90 93 d9 01 	sts	0x01D9, r25

	Endpoint_ClearStatusStage();
    2000:	0e 94 04 0c 	call	0x1808	; 0x1808 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2004:	80 91 d9 01 	lds	r24, 0x01D9
    2008:	81 11       	cpse	r24, r1
    200a:	04 c0       	rjmp	.+8      	; 0x2014 <USB_Device_ProcessControlRequest+0x262>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    200c:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2010:	87 ff       	sbrs	r24, 7
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <USB_Device_ProcessControlRequest+0x266>
    2014:	84 e0       	ldi	r24, 0x04	; 4
    2016:	01 c0       	rjmp	.+2      	; 0x201a <USB_Device_ProcessControlRequest+0x268>
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	80 93 dd 01 	sts	0x01DD, r24

	EVENT_USB_Device_ConfigurationChanged();
    201e:	0e 94 40 0a 	call	0x1480	; 0x1480 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2022:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2026:	83 ff       	sbrs	r24, 3
    2028:	0a c0       	rjmp	.+20     	; 0x203e <USB_Device_ProcessControlRequest+0x28c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    202a:	80 91 eb 00 	lds	r24, 0x00EB
    202e:	80 62       	ori	r24, 0x20	; 32
    2030:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2034:	80 91 e8 00 	lds	r24, 0x00E8
    2038:	87 7f       	andi	r24, 0xF7	; 247
    203a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    203e:	aa 96       	adiw	r28, 0x2a	; 42
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	1f 91       	pop	r17
    2050:	0f 91       	pop	r16
    2052:	08 95       	ret

00002054 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    2054:	90 93 68 01 	sts	0x0168, r25
    2058:	80 93 67 01 	sts	0x0167, r24
    205c:	08 95       	ret

0000205e <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    205e:	e0 91 67 01 	lds	r30, 0x0167
    2062:	f0 91 68 01 	lds	r31, 0x0168
    2066:	30 97       	sbiw	r30, 0x00	; 0
    2068:	21 f0       	breq	.+8      	; 0x2072 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    206a:	01 90       	ld	r0, Z+
    206c:	f0 81       	ld	r31, Z
    206e:	e0 2d       	mov	r30, r0
    2070:	09 94       	ijmp
}
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	08 95       	ret

00002076 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2076:	ff 92       	push	r15
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	8c 01       	movw	r16, r24
    if (!driver) return;
    2082:	e0 91 67 01 	lds	r30, 0x0167
    2086:	f0 91 68 01 	lds	r31, 0x0168
    208a:	30 97       	sbiw	r30, 0x00	; 0
    208c:	99 f1       	breq	.+102    	; 0x20f4 <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    208e:	02 80       	ldd	r0, Z+2	; 0x02
    2090:	f3 81       	ldd	r31, Z+3	; 0x03
    2092:	e0 2d       	mov	r30, r0
    2094:	09 95       	icall

    if (debug_keyboard) {
    2096:	80 91 c7 01 	lds	r24, 0x01C7
    209a:	82 ff       	sbrs	r24, 2
    209c:	2b c0       	rjmp	.+86     	; 0x20f4 <host_keyboard_send+0x7e>
        dprint("keyboard_report: ");
    209e:	80 ff       	sbrs	r24, 0
    20a0:	04 c0       	rjmp	.+8      	; 0x20aa <host_keyboard_send+0x34>
    20a2:	86 ec       	ldi	r24, 0xC6	; 198
    20a4:	93 e0       	ldi	r25, 0x03	; 3
    20a6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    20aa:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    20ac:	80 e1       	ldi	r24, 0x10	; 16
    20ae:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    20b0:	00 ec       	ldi	r16, 0xC0	; 192
    20b2:	13 e0       	ldi	r17, 0x03	; 3
    20b4:	80 91 c7 01 	lds	r24, 0x01C7
    20b8:	80 ff       	sbrs	r24, 0
    20ba:	0b c0       	rjmp	.+22     	; 0x20d2 <host_keyboard_send+0x5c>
    20bc:	88 81       	ld	r24, Y
    20be:	1f 92       	push	r1
    20c0:	8f 93       	push	r24
    20c2:	1f 93       	push	r17
    20c4:	0f 93       	push	r16
    20c6:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	fa 94       	dec	r15
    20d4:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    20d6:	f1 10       	cpse	r15, r1
    20d8:	ed cf       	rjmp	.-38     	; 0x20b4 <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    20da:	80 91 c7 01 	lds	r24, 0x01C7
    20de:	80 ff       	sbrs	r24, 0
    20e0:	09 c0       	rjmp	.+18     	; 0x20f4 <host_keyboard_send+0x7e>
    20e2:	8e eb       	ldi	r24, 0xBE	; 190
    20e4:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    20e6:	df 91       	pop	r29
    20e8:	cf 91       	pop	r28
    20ea:	1f 91       	pop	r17
    20ec:	0f 91       	pop	r16
    20ee:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    20f0:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <xputs>
    }
}
    20f4:	df 91       	pop	r29
    20f6:	cf 91       	pop	r28
    20f8:	1f 91       	pop	r17
    20fa:	0f 91       	pop	r16
    20fc:	ff 90       	pop	r15
    20fe:	08 95       	ret

00002100 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2100:	e0 91 67 01 	lds	r30, 0x0167
    2104:	f0 91 68 01 	lds	r31, 0x0168
    2108:	30 97       	sbiw	r30, 0x00	; 0
    210a:	21 f0       	breq	.+8      	; 0x2114 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    210c:	04 80       	ldd	r0, Z+4	; 0x04
    210e:	f5 81       	ldd	r31, Z+5	; 0x05
    2110:	e0 2d       	mov	r30, r0
    2112:	09 94       	ijmp
    2114:	08 95       	ret

00002116 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    2116:	20 91 65 01 	lds	r18, 0x0165
    211a:	30 91 66 01 	lds	r19, 0x0166
    211e:	82 17       	cp	r24, r18
    2120:	93 07       	cpc	r25, r19
    2122:	71 f0       	breq	.+28     	; 0x2140 <host_system_send+0x2a>
    last_system_report = report;
    2124:	90 93 66 01 	sts	0x0166, r25
    2128:	80 93 65 01 	sts	0x0165, r24

    if (!driver) return;
    212c:	e0 91 67 01 	lds	r30, 0x0167
    2130:	f0 91 68 01 	lds	r31, 0x0168
    2134:	30 97       	sbiw	r30, 0x00	; 0
    2136:	21 f0       	breq	.+8      	; 0x2140 <host_system_send+0x2a>
    (*driver->send_system)(report);
    2138:	06 80       	ldd	r0, Z+6	; 0x06
    213a:	f7 81       	ldd	r31, Z+7	; 0x07
    213c:	e0 2d       	mov	r30, r0
    213e:	09 94       	ijmp
    2140:	08 95       	ret

00002142 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    2142:	20 91 63 01 	lds	r18, 0x0163
    2146:	30 91 64 01 	lds	r19, 0x0164
    214a:	82 17       	cp	r24, r18
    214c:	93 07       	cpc	r25, r19
    214e:	71 f0       	breq	.+28     	; 0x216c <host_consumer_send+0x2a>
    last_consumer_report = report;
    2150:	90 93 64 01 	sts	0x0164, r25
    2154:	80 93 63 01 	sts	0x0163, r24

    if (!driver) return;
    2158:	e0 91 67 01 	lds	r30, 0x0167
    215c:	f0 91 68 01 	lds	r31, 0x0168
    2160:	30 97       	sbiw	r30, 0x00	; 0
    2162:	21 f0       	breq	.+8      	; 0x216c <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    2164:	00 84       	ldd	r0, Z+8	; 0x08
    2166:	f1 85       	ldd	r31, Z+9	; 0x09
    2168:	e0 2d       	mov	r30, r0
    216a:	09 94       	ijmp
    216c:	08 95       	ret

0000216e <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    216e:	08 95       	ret

00002170 <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    2170:	0c 94 b7 10 	jmp	0x216e	; 0x216e <matrix_setup>

00002174 <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    2174:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <timer_init>
    matrix_init();
    2178:	0e 94 f2 06 	call	0xde4	; 0xde4 <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    217c:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <bootmagic>

00002180 <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    2180:	cf 93       	push	r28
    2182:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    2184:	80 91 c7 01 	lds	r24, 0x01C7
    2188:	82 ff       	sbrs	r24, 2
    218a:	1e c0       	rjmp	.+60     	; 0x21c8 <keyboard_set_leds+0x48>
    218c:	80 ff       	sbrs	r24, 0
    218e:	04 c0       	rjmp	.+8      	; 0x2198 <keyboard_set_leds+0x18>
    2190:	8f ed       	ldi	r24, 0xDF	; 223
    2192:	93 e0       	ldi	r25, 0x03	; 3
    2194:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    2198:	80 91 c7 01 	lds	r24, 0x01C7
    219c:	80 ff       	sbrs	r24, 0
    219e:	0c c0       	rjmp	.+24     	; 0x21b8 <keyboard_set_leds+0x38>
    21a0:	1f 92       	push	r1
    21a2:	cf 93       	push	r28
    21a4:	2a ed       	ldi	r18, 0xDA	; 218
    21a6:	33 e0       	ldi	r19, 0x03	; 3
    21a8:	3f 93       	push	r19
    21aa:	2f 93       	push	r18
    21ac:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	80 91 c7 01 	lds	r24, 0x01C7
    21bc:	80 ff       	sbrs	r24, 0
    21be:	04 c0       	rjmp	.+8      	; 0x21c8 <keyboard_set_leds+0x48>
    21c0:	88 ed       	ldi	r24, 0xD8	; 216
    21c2:	93 e0       	ldi	r25, 0x03	; 3
    21c4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    led_set(leds);
    21c8:	8c 2f       	mov	r24, r28
}
    21ca:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    21cc:	0c 94 92 08 	jmp	0x1124	; 0x1124 <led_set>

000021d0 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    21d0:	5f 92       	push	r5
    21d2:	6f 92       	push	r6
    21d4:	7f 92       	push	r7
    21d6:	8f 92       	push	r8
    21d8:	9f 92       	push	r9
    21da:	af 92       	push	r10
    21dc:	bf 92       	push	r11
    21de:	cf 92       	push	r12
    21e0:	df 92       	push	r13
    21e2:	ef 92       	push	r14
    21e4:	ff 92       	push	r15
    21e6:	0f 93       	push	r16
    21e8:	1f 93       	push	r17
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	2a 97       	sbiw	r28, 0x0a	; 10
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	f8 94       	cli
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	cd bf       	out	0x3d, r28	; 61
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    21fe:	0e 94 15 07 	call	0xe2a	; 0xe2a <matrix_scan>
    2202:	9a e6       	ldi	r25, 0x6A	; 106
    2204:	c9 2e       	mov	r12, r25
    2206:	91 e0       	ldi	r25, 0x01	; 1
    2208:	d9 2e       	mov	r13, r25
    220a:	00 e0       	ldi	r16, 0x00	; 0
    220c:	10 e0       	ldi	r17, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    220e:	aa 24       	eor	r10, r10
    2210:	a3 94       	inc	r10
    2212:	b1 2c       	mov	r11, r1
    2214:	50 2e       	mov	r5, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2216:	80 2f       	mov	r24, r16
    2218:	0e 94 42 08 	call	0x1084	; 0x1084 <matrix_get_row>
    221c:	3c 01       	movw	r6, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    221e:	f6 01       	movw	r30, r12
    2220:	e1 90       	ld	r14, Z+
    2222:	f1 90       	ld	r15, Z+
    2224:	6f 01       	movw	r12, r30
    2226:	e8 26       	eor	r14, r24
    2228:	f9 26       	eor	r15, r25
        if (matrix_change) {
    222a:	e1 14       	cp	r14, r1
    222c:	f1 04       	cpc	r15, r1
    222e:	b1 f4       	brne	.+44     	; 0x225c <keyboard_task+0x8c>
    2230:	0f 5f       	subi	r16, 0xFF	; 255
    2232:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2234:	05 30       	cpi	r16, 0x05	; 5
    2236:	11 05       	cpc	r17, r1
    2238:	69 f7       	brne	.-38     	; 0x2214 <keyboard_task+0x44>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    223a:	8f ef       	ldi	r24, 0xFF	; 255
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	8a 83       	std	Y+2, r24	; 0x02
    2240:	1b 82       	std	Y+3, r1	; 0x03
    2242:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <timer_read>
    2246:	81 60       	ori	r24, 0x01	; 1
    2248:	78 2f       	mov	r23, r24
    224a:	9d 83       	std	Y+5, r25	; 0x05
    224c:	8c 83       	std	Y+4, r24	; 0x04
    224e:	49 81       	ldd	r20, Y+1	; 0x01
    2250:	5a 81       	ldd	r21, Y+2	; 0x02
    2252:	6b 81       	ldd	r22, Y+3	; 0x03
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	0e 94 a1 11 	call	0x2342	; 0x2342 <action_exec>
    225a:	3a c0       	rjmp	.+116    	; 0x22d0 <keyboard_task+0x100>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    225c:	80 91 c7 01 	lds	r24, 0x01C7
    2260:	81 fd       	sbrc	r24, 1
    2262:	0e 94 4b 08 	call	0x1096	; 0x1096 <matrix_print>
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    226a:	45 01       	movw	r8, r10
    226c:	02 2e       	mov	r0, r18
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <keyboard_task+0xa4>
    2270:	88 0c       	add	r8, r8
    2272:	99 1c       	adc	r9, r9
    2274:	0a 94       	dec	r0
    2276:	e2 f7       	brpl	.-8      	; 0x2270 <keyboard_task+0xa0>
    2278:	c4 01       	movw	r24, r8
    227a:	8e 21       	and	r24, r14
    227c:	9f 21       	and	r25, r15
    227e:	89 2b       	or	r24, r25
    2280:	09 f1       	breq	.+66     	; 0x22c4 <keyboard_task+0xf4>
                    action_exec((keyevent_t){
    2282:	2e 83       	std	Y+6, r18	; 0x06
    2284:	5f 82       	std	Y+7, r5	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    2286:	68 20       	and	r6, r8
    2288:	79 20       	and	r7, r9
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	67 28       	or	r6, r7
    228e:	09 f4       	brne	.+2      	; 0x2292 <keyboard_task+0xc2>
    2290:	80 e0       	ldi	r24, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    2292:	88 87       	std	Y+8, r24	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    2294:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <timer_read>
    2298:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    229a:	78 2f       	mov	r23, r24
    229c:	9a 87       	std	Y+10, r25	; 0x0a
    229e:	89 87       	std	Y+9, r24	; 0x09
    22a0:	4e 81       	ldd	r20, Y+6	; 0x06
    22a2:	5f 81       	ldd	r21, Y+7	; 0x07
    22a4:	68 85       	ldd	r22, Y+8	; 0x08
    22a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22a8:	0e 94 a1 11 	call	0x2342	; 0x2342 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    22ac:	f8 01       	movw	r30, r16
    22ae:	ee 0f       	add	r30, r30
    22b0:	ff 1f       	adc	r31, r31
    22b2:	e6 59       	subi	r30, 0x96	; 150
    22b4:	fe 4f       	sbci	r31, 0xFE	; 254
    22b6:	80 81       	ld	r24, Z
    22b8:	91 81       	ldd	r25, Z+1	; 0x01
    22ba:	88 25       	eor	r24, r8
    22bc:	99 25       	eor	r25, r9
    22be:	91 83       	std	Z+1, r25	; 0x01
    22c0:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    22c2:	06 c0       	rjmp	.+12     	; 0x22d0 <keyboard_task+0x100>
    22c4:	2f 5f       	subi	r18, 0xFF	; 255
    22c6:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    22c8:	2e 30       	cpi	r18, 0x0E	; 14
    22ca:	31 05       	cpc	r19, r1
    22cc:	71 f6       	brne	.-100    	; 0x226a <keyboard_task+0x9a>
    22ce:	b0 cf       	rjmp	.-160    	; 0x2230 <keyboard_task+0x60>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    22d0:	0e 94 b9 22 	call	0x4572	; 0x4572 <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    22d4:	10 91 69 01 	lds	r17, 0x0169
    22d8:	0e 94 2f 10 	call	0x205e	; 0x205e <host_keyboard_leds>
    22dc:	18 17       	cp	r17, r24
    22de:	d9 f0       	breq	.+54     	; 0x2316 <keyboard_task+0x146>
        led_status = host_keyboard_leds();
    22e0:	0e 94 2f 10 	call	0x205e	; 0x205e <host_keyboard_leds>
    22e4:	80 93 69 01 	sts	0x0169, r24
        keyboard_set_leds(led_status);
    }
}
    22e8:	2a 96       	adiw	r28, 0x0a	; 10
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
    22f4:	df 91       	pop	r29
    22f6:	cf 91       	pop	r28
    22f8:	1f 91       	pop	r17
    22fa:	0f 91       	pop	r16
    22fc:	ff 90       	pop	r15
    22fe:	ef 90       	pop	r14
    2300:	df 90       	pop	r13
    2302:	cf 90       	pop	r12
    2304:	bf 90       	pop	r11
    2306:	af 90       	pop	r10
    2308:	9f 90       	pop	r9
    230a:	8f 90       	pop	r8
    230c:	7f 90       	pop	r7
    230e:	6f 90       	pop	r6
    2310:	5f 90       	pop	r5
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    2312:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <keyboard_set_leds>
    }
}
    2316:	2a 96       	adiw	r28, 0x0a	; 10
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	df 91       	pop	r29
    2324:	cf 91       	pop	r28
    2326:	1f 91       	pop	r17
    2328:	0f 91       	pop	r16
    232a:	ff 90       	pop	r15
    232c:	ef 90       	pop	r14
    232e:	df 90       	pop	r13
    2330:	cf 90       	pop	r12
    2332:	bf 90       	pop	r11
    2334:	af 90       	pop	r10
    2336:	9f 90       	pop	r9
    2338:	8f 90       	pop	r8
    233a:	7f 90       	pop	r7
    233c:	6f 90       	pop	r6
    233e:	5f 90       	pop	r5
    2340:	08 95       	ret

00002342 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2342:	cf 93       	push	r28
    2344:	df 93       	push	r29
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	2b 97       	sbiw	r28, 0x0b	; 11
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	4f 83       	std	Y+7, r20	; 0x07
    2358:	58 87       	std	Y+8, r21	; 0x08
    235a:	69 87       	std	Y+9, r22	; 0x09
    235c:	7a 87       	std	Y+10, r23	; 0x0a
    235e:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    2360:	de 01       	movw	r26, r28
    2362:	11 96       	adiw	r26, 0x01	; 1
    2364:	86 e0       	ldi	r24, 0x06	; 6
    2366:	fd 01       	movw	r30, r26
    2368:	11 92       	st	Z+, r1
    236a:	8a 95       	dec	r24
    236c:	e9 f7       	brne	.-6      	; 0x2368 <action_exec+0x26>
    236e:	85 e0       	ldi	r24, 0x05	; 5
    2370:	fe 01       	movw	r30, r28
    2372:	37 96       	adiw	r30, 0x07	; 7
    2374:	01 90       	ld	r0, Z+
    2376:	0d 92       	st	X+, r0
    2378:	8a 95       	dec	r24
    237a:	e1 f7       	brne	.-8      	; 0x2374 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    237c:	49 81       	ldd	r20, Y+1	; 0x01
    237e:	5a 81       	ldd	r21, Y+2	; 0x02
    2380:	6b 81       	ldd	r22, Y+3	; 0x03
    2382:	7c 81       	ldd	r23, Y+4	; 0x04
    2384:	8d 81       	ldd	r24, Y+5	; 0x05
    2386:	9e 81       	ldd	r25, Y+6	; 0x06
    2388:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    238c:	2b 96       	adiw	r28, 0x0b	; 11
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	08 95       	ret

0000239e <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    239e:	cf 93       	push	r28
    23a0:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    23a2:	88 23       	and	r24, r24
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <register_code+0xa>
    23a6:	c1 c0       	rjmp	.+386    	; 0x252a <register_code+0x18c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    23a8:	82 38       	cpi	r24, 0x82	; 130
    23aa:	59 f4       	brne	.+22     	; 0x23c2 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    23ac:	0e 94 2f 10 	call	0x205e	; 0x205e <host_keyboard_leds>
    23b0:	81 fd       	sbrc	r24, 1
    23b2:	bb c0       	rjmp	.+374    	; 0x252a <register_code+0x18c>
#endif
        add_key(KC_CAPSLOCK);
    23b4:	89 e3       	ldi	r24, 0x39	; 57
    23b6:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <add_key>
        send_keyboard_report();
    23ba:	0e 94 47 1c 	call	0x388e	; 0x388e <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    23be:	89 e3       	ldi	r24, 0x39	; 57
    23c0:	0c c0       	rjmp	.+24     	; 0x23da <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    23c2:	83 38       	cpi	r24, 0x83	; 131
    23c4:	79 f4       	brne	.+30     	; 0x23e4 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    23c6:	0e 94 2f 10 	call	0x205e	; 0x205e <host_keyboard_leds>
    23ca:	80 fd       	sbrc	r24, 0
    23cc:	ae c0       	rjmp	.+348    	; 0x252a <register_code+0x18c>
#endif
        add_key(KC_NUMLOCK);
    23ce:	83 e5       	ldi	r24, 0x53	; 83
    23d0:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <add_key>
        send_keyboard_report();
    23d4:	0e 94 47 1c 	call	0x388e	; 0x388e <send_keyboard_report>
        del_key(KC_NUMLOCK);
    23d8:	83 e5       	ldi	r24, 0x53	; 83
    23da:	0e 94 c0 1b 	call	0x3780	; 0x3780 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    23de:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    23e0:	0c 94 47 1c 	jmp	0x388e	; 0x388e <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    23e4:	84 38       	cpi	r24, 0x84	; 132
    23e6:	59 f4       	brne	.+22     	; 0x23fe <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    23e8:	0e 94 2f 10 	call	0x205e	; 0x205e <host_keyboard_leds>
    23ec:	82 fd       	sbrc	r24, 2
    23ee:	9d c0       	rjmp	.+314    	; 0x252a <register_code+0x18c>
#endif
        add_key(KC_SCROLLLOCK);
    23f0:	87 e4       	ldi	r24, 0x47	; 71
    23f2:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <add_key>
        send_keyboard_report();
    23f6:	0e 94 47 1c 	call	0x388e	; 0x388e <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    23fa:	87 e4       	ldi	r24, 0x47	; 71
    23fc:	ee cf       	rjmp	.-36     	; 0x23da <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    23fe:	8c ef       	ldi	r24, 0xFC	; 252
    2400:	8c 0f       	add	r24, r28
    2402:	81 3a       	cpi	r24, 0xA1	; 161
    2404:	48 f4       	brcc	.+18     	; 0x2418 <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2406:	8c 2f       	mov	r24, r28
    2408:	0e 94 2c 27 	call	0x4e58	; 0x4e58 <command_proc>
    240c:	81 11       	cpse	r24, r1
    240e:	8d c0       	rjmp	.+282    	; 0x252a <register_code+0x18c>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2410:	8c 2f       	mov	r24, r28
    2412:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <add_key>
    2416:	e3 cf       	rjmp	.-58     	; 0x23de <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2418:	80 e2       	ldi	r24, 0x20	; 32
    241a:	8c 0f       	add	r24, r28
    241c:	88 30       	cpi	r24, 0x08	; 8
    241e:	48 f4       	brcc	.+18     	; 0x2432 <register_code+0x94>
        add_mods(MOD_BIT(code));
    2420:	c7 70       	andi	r28, 0x07	; 7
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	01 c0       	rjmp	.+2      	; 0x2428 <register_code+0x8a>
    2426:	88 0f       	add	r24, r24
    2428:	ca 95       	dec	r28
    242a:	ea f7       	brpl	.-6      	; 0x2426 <register_code+0x88>
    242c:	0e 94 0e 1c 	call	0x381c	; 0x381c <add_mods>
    2430:	d6 cf       	rjmp	.-84     	; 0x23de <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2432:	8b e5       	ldi	r24, 0x5B	; 91
    2434:	8c 0f       	add	r24, r28
    2436:	83 30       	cpi	r24, 0x03	; 3
    2438:	78 f4       	brcc	.+30     	; 0x2458 <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    243a:	c5 3a       	cpi	r28, 0xA5	; 165
    243c:	29 f0       	breq	.+10     	; 0x2448 <register_code+0xaa>
    243e:	c6 3a       	cpi	r28, 0xA6	; 166
    2440:	31 f4       	brne	.+12     	; 0x244e <register_code+0xb0>
    2442:	82 e8       	ldi	r24, 0x82	; 130
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	05 c0       	rjmp	.+10     	; 0x2452 <register_code+0xb4>
    2448:	81 e8       	ldi	r24, 0x81	; 129
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <register_code+0xb4>
    244e:	83 e8       	ldi	r24, 0x83	; 131
    2450:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2452:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2454:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2458:	88 e5       	ldi	r24, 0x58	; 88
    245a:	8c 0f       	add	r24, r28
    245c:	83 31       	cpi	r24, 0x13	; 19
    245e:	08 f0       	brcs	.+2      	; 0x2462 <register_code+0xc4>
    2460:	64 c0       	rjmp	.+200    	; 0x252a <register_code+0x18c>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2462:	c8 3a       	cpi	r28, 0xA8	; 168
    2464:	39 f1       	breq	.+78     	; 0x24b4 <register_code+0x116>
    2466:	c9 3a       	cpi	r28, 0xA9	; 169
    2468:	41 f1       	breq	.+80     	; 0x24ba <register_code+0x11c>
    246a:	ca 3a       	cpi	r28, 0xAA	; 170
    246c:	49 f1       	breq	.+82     	; 0x24c0 <register_code+0x122>
    246e:	cb 3a       	cpi	r28, 0xAB	; 171
    2470:	51 f1       	breq	.+84     	; 0x24c6 <register_code+0x128>
    2472:	cc 3a       	cpi	r28, 0xAC	; 172
    2474:	59 f1       	breq	.+86     	; 0x24cc <register_code+0x12e>
    2476:	cd 3a       	cpi	r28, 0xAD	; 173
    2478:	61 f1       	breq	.+88     	; 0x24d2 <register_code+0x134>
    247a:	c0 3b       	cpi	r28, 0xB0	; 176
    247c:	69 f1       	breq	.+90     	; 0x24d8 <register_code+0x13a>
    247e:	ce 3a       	cpi	r28, 0xAE	; 174
    2480:	71 f1       	breq	.+92     	; 0x24de <register_code+0x140>
    2482:	cf 3a       	cpi	r28, 0xAF	; 175
    2484:	79 f1       	breq	.+94     	; 0x24e4 <register_code+0x146>
    2486:	c1 3b       	cpi	r28, 0xB1	; 177
    2488:	81 f1       	breq	.+96     	; 0x24ea <register_code+0x14c>
    248a:	c2 3b       	cpi	r28, 0xB2	; 178
    248c:	89 f1       	breq	.+98     	; 0x24f0 <register_code+0x152>
    248e:	c3 3b       	cpi	r28, 0xB3	; 179
    2490:	91 f1       	breq	.+100    	; 0x24f6 <register_code+0x158>
    2492:	c4 3b       	cpi	r28, 0xB4	; 180
    2494:	99 f1       	breq	.+102    	; 0x24fc <register_code+0x15e>
    2496:	c5 3b       	cpi	r28, 0xB5	; 181
    2498:	a1 f1       	breq	.+104    	; 0x2502 <register_code+0x164>
    249a:	c6 3b       	cpi	r28, 0xB6	; 182
    249c:	a9 f1       	breq	.+106    	; 0x2508 <register_code+0x16a>
    249e:	c7 3b       	cpi	r28, 0xB7	; 183
    24a0:	b1 f1       	breq	.+108    	; 0x250e <register_code+0x170>
    24a2:	c8 3b       	cpi	r28, 0xB8	; 184
    24a4:	b9 f1       	breq	.+110    	; 0x2514 <register_code+0x176>
    24a6:	c9 3b       	cpi	r28, 0xB9	; 185
    24a8:	c1 f1       	breq	.+112    	; 0x251a <register_code+0x17c>
    24aa:	ca 3b       	cpi	r28, 0xBA	; 186
    24ac:	c9 f5       	brne	.+114    	; 0x2520 <register_code+0x182>
    24ae:	8a e2       	ldi	r24, 0x2A	; 42
    24b0:	92 e0       	ldi	r25, 0x02	; 2
    24b2:	38 c0       	rjmp	.+112    	; 0x2524 <register_code+0x186>
    24b4:	82 ee       	ldi	r24, 0xE2	; 226
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	35 c0       	rjmp	.+106    	; 0x2524 <register_code+0x186>
    24ba:	89 ee       	ldi	r24, 0xE9	; 233
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	32 c0       	rjmp	.+100    	; 0x2524 <register_code+0x186>
    24c0:	8a ee       	ldi	r24, 0xEA	; 234
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	2f c0       	rjmp	.+94     	; 0x2524 <register_code+0x186>
    24c6:	85 eb       	ldi	r24, 0xB5	; 181
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	2c c0       	rjmp	.+88     	; 0x2524 <register_code+0x186>
    24cc:	86 eb       	ldi	r24, 0xB6	; 182
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	29 c0       	rjmp	.+82     	; 0x2524 <register_code+0x186>
    24d2:	87 eb       	ldi	r24, 0xB7	; 183
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	26 c0       	rjmp	.+76     	; 0x2524 <register_code+0x186>
    24d8:	8c ec       	ldi	r24, 0xCC	; 204
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	23 c0       	rjmp	.+70     	; 0x2524 <register_code+0x186>
    24de:	8d ec       	ldi	r24, 0xCD	; 205
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	20 c0       	rjmp	.+64     	; 0x2524 <register_code+0x186>
    24e4:	83 e8       	ldi	r24, 0x83	; 131
    24e6:	91 e0       	ldi	r25, 0x01	; 1
    24e8:	1d c0       	rjmp	.+58     	; 0x2524 <register_code+0x186>
    24ea:	8a e8       	ldi	r24, 0x8A	; 138
    24ec:	91 e0       	ldi	r25, 0x01	; 1
    24ee:	1a c0       	rjmp	.+52     	; 0x2524 <register_code+0x186>
    24f0:	82 e9       	ldi	r24, 0x92	; 146
    24f2:	91 e0       	ldi	r25, 0x01	; 1
    24f4:	17 c0       	rjmp	.+46     	; 0x2524 <register_code+0x186>
    24f6:	84 e9       	ldi	r24, 0x94	; 148
    24f8:	91 e0       	ldi	r25, 0x01	; 1
    24fa:	14 c0       	rjmp	.+40     	; 0x2524 <register_code+0x186>
    24fc:	81 e2       	ldi	r24, 0x21	; 33
    24fe:	92 e0       	ldi	r25, 0x02	; 2
    2500:	11 c0       	rjmp	.+34     	; 0x2524 <register_code+0x186>
    2502:	83 e2       	ldi	r24, 0x23	; 35
    2504:	92 e0       	ldi	r25, 0x02	; 2
    2506:	0e c0       	rjmp	.+28     	; 0x2524 <register_code+0x186>
    2508:	84 e2       	ldi	r24, 0x24	; 36
    250a:	92 e0       	ldi	r25, 0x02	; 2
    250c:	0b c0       	rjmp	.+22     	; 0x2524 <register_code+0x186>
    250e:	85 e2       	ldi	r24, 0x25	; 37
    2510:	92 e0       	ldi	r25, 0x02	; 2
    2512:	08 c0       	rjmp	.+16     	; 0x2524 <register_code+0x186>
    2514:	86 e2       	ldi	r24, 0x26	; 38
    2516:	92 e0       	ldi	r25, 0x02	; 2
    2518:	05 c0       	rjmp	.+10     	; 0x2524 <register_code+0x186>
    251a:	87 e2       	ldi	r24, 0x27	; 39
    251c:	92 e0       	ldi	r25, 0x02	; 2
    251e:	02 c0       	rjmp	.+4      	; 0x2524 <register_code+0x186>
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    2524:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2526:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <host_consumer_send>
    }
}
    252a:	cf 91       	pop	r28
    252c:	08 95       	ret

0000252e <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    252e:	88 23       	and	r24, r24
    2530:	09 f4       	brne	.+2      	; 0x2534 <unregister_code+0x6>
    2532:	4b c0       	rjmp	.+150    	; 0x25ca <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2534:	82 38       	cpi	r24, 0x82	; 130
    2536:	59 f4       	brne	.+22     	; 0x254e <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    2538:	0e 94 2f 10 	call	0x205e	; 0x205e <host_keyboard_leds>
    253c:	81 ff       	sbrs	r24, 1
    253e:	45 c0       	rjmp	.+138    	; 0x25ca <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    2540:	89 e3       	ldi	r24, 0x39	; 57
    2542:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <add_key>
        send_keyboard_report();
    2546:	0e 94 47 1c 	call	0x388e	; 0x388e <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    254a:	89 e3       	ldi	r24, 0x39	; 57
    254c:	0c c0       	rjmp	.+24     	; 0x2566 <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    254e:	83 38       	cpi	r24, 0x83	; 131
    2550:	71 f4       	brne	.+28     	; 0x256e <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2552:	0e 94 2f 10 	call	0x205e	; 0x205e <host_keyboard_leds>
    2556:	80 ff       	sbrs	r24, 0
    2558:	38 c0       	rjmp	.+112    	; 0x25ca <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    255a:	83 e5       	ldi	r24, 0x53	; 83
    255c:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <add_key>
        send_keyboard_report();
    2560:	0e 94 47 1c 	call	0x388e	; 0x388e <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2564:	83 e5       	ldi	r24, 0x53	; 83
    2566:	0e 94 c0 1b 	call	0x3780	; 0x3780 <del_key>
        send_keyboard_report();
    256a:	0c 94 47 1c 	jmp	0x388e	; 0x388e <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    256e:	84 38       	cpi	r24, 0x84	; 132
    2570:	59 f4       	brne	.+22     	; 0x2588 <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2572:	0e 94 2f 10 	call	0x205e	; 0x205e <host_keyboard_leds>
    2576:	82 ff       	sbrs	r24, 2
    2578:	28 c0       	rjmp	.+80     	; 0x25ca <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    257a:	87 e4       	ldi	r24, 0x47	; 71
    257c:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <add_key>
        send_keyboard_report();
    2580:	0e 94 47 1c 	call	0x388e	; 0x388e <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2584:	87 e4       	ldi	r24, 0x47	; 71
    2586:	ef cf       	rjmp	.-34     	; 0x2566 <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2588:	9c ef       	ldi	r25, 0xFC	; 252
    258a:	98 0f       	add	r25, r24
    258c:	91 3a       	cpi	r25, 0xA1	; 161
    258e:	58 f3       	brcs	.-42     	; 0x2566 <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2590:	90 e2       	ldi	r25, 0x20	; 32
    2592:	98 0f       	add	r25, r24
    2594:	98 30       	cpi	r25, 0x08	; 8
    2596:	50 f4       	brcc	.+20     	; 0x25ac <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    2598:	87 70       	andi	r24, 0x07	; 7
    259a:	91 e0       	ldi	r25, 0x01	; 1
    259c:	01 c0       	rjmp	.+2      	; 0x25a0 <unregister_code+0x72>
    259e:	99 0f       	add	r25, r25
    25a0:	8a 95       	dec	r24
    25a2:	ea f7       	brpl	.-6      	; 0x259e <unregister_code+0x70>
    25a4:	89 2f       	mov	r24, r25
    25a6:	0e 94 14 1c 	call	0x3828	; 0x3828 <del_mods>
    25aa:	df cf       	rjmp	.-66     	; 0x256a <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    25ac:	9b e5       	ldi	r25, 0x5B	; 91
    25ae:	98 0f       	add	r25, r24
    25b0:	93 30       	cpi	r25, 0x03	; 3
    25b2:	20 f4       	brcc	.+8      	; 0x25bc <unregister_code+0x8e>
        host_system_send(0);
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    25bc:	88 5a       	subi	r24, 0xA8	; 168
    25be:	83 31       	cpi	r24, 0x13	; 19
    25c0:	20 f4       	brcc	.+8      	; 0x25ca <unregister_code+0x9c>
        host_consumer_send(0);
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <host_consumer_send>
    25ca:	08 95       	ret

000025cc <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    25cc:	88 23       	and	r24, r24
    25ce:	21 f0       	breq	.+8      	; 0x25d8 <register_mods+0xc>
        add_mods(mods);
    25d0:	0e 94 0e 1c 	call	0x381c	; 0x381c <add_mods>
        send_keyboard_report();
    25d4:	0c 94 47 1c 	jmp	0x388e	; 0x388e <send_keyboard_report>
    25d8:	08 95       	ret

000025da <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    25da:	88 23       	and	r24, r24
    25dc:	21 f0       	breq	.+8      	; 0x25e6 <unregister_mods+0xc>
        del_mods(mods);
    25de:	0e 94 14 1c 	call	0x3828	; 0x3828 <del_mods>
        send_keyboard_report();
    25e2:	0c 94 47 1c 	jmp	0x388e	; 0x388e <send_keyboard_report>
    25e6:	08 95       	ret

000025e8 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    25e8:	cf 92       	push	r12
    25ea:	df 92       	push	r13
    25ec:	ef 92       	push	r14
    25ee:	ff 92       	push	r15
    25f0:	0f 93       	push	r16
    25f2:	1f 93       	push	r17
    25f4:	cf 93       	push	r28
    25f6:	df 93       	push	r29
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	28 97       	sbiw	r28, 0x08	; 8
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    260a:	85 e0       	ldi	r24, 0x05	; 5
    260c:	f8 01       	movw	r30, r16
    260e:	de 01       	movw	r26, r28
    2610:	11 96       	adiw	r26, 0x01	; 1
    2612:	01 90       	ld	r0, Z+
    2614:	0d 92       	st	X+, r0
    2616:	8a 95       	dec	r24
    2618:	e1 f7       	brne	.-8      	; 0x2612 <process_action+0x2a>
    261a:	f8 01       	movw	r30, r16
    261c:	40 81       	ld	r20, Z
    261e:	31 81       	ldd	r19, Z+1	; 0x01
    2620:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2622:	25 81       	ldd	r18, Z+5	; 0x05
    2624:	22 95       	swap	r18
    2626:	2f 70       	andi	r18, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2628:	83 81       	ldd	r24, Z+3	; 0x03
    262a:	94 81       	ldd	r25, Z+4	; 0x04
    262c:	89 2b       	or	r24, r25
    262e:	31 f0       	breq	.+12     	; 0x263c <process_action+0x54>
    2630:	3f 3f       	cpi	r19, 0xFF	; 255
    2632:	31 f4       	brne	.+12     	; 0x2640 <process_action+0x58>
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	4f 3f       	cpi	r20, 0xFF	; 255
    2638:	19 f4       	brne	.+6      	; 0x2640 <process_action+0x58>
    263a:	03 c0       	rjmp	.+6      	; 0x2642 <process_action+0x5a>
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <process_action+0x5a>
    2640:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    2642:	80 fd       	sbrc	r24, 0
    2644:	c8 c2       	rjmp	.+1424   	; 0x2bd6 <process_action+0x5ee>

    action_t action = layer_switch_get_action(event.key);
    2646:	49 83       	std	Y+1, r20	; 0x01
    2648:	3a 83       	std	Y+2, r19	; 0x02
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	9a 81       	ldd	r25, Y+2	; 0x02
    264e:	2f 83       	std	Y+7, r18	; 0x07
    2650:	0e 94 31 1b 	call	0x3662	; 0x3662 <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2654:	9e 83       	std	Y+6, r25	; 0x06
    2656:	88 87       	std	Y+8, r24	; 0x08
    2658:	0e 94 30 1b 	call	0x3660	; 0x3660 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    265c:	0e 94 03 1a 	call	0x3406	; 0x3406 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2660:	4e 81       	ldd	r20, Y+6	; 0x06
    2662:	e4 2f       	mov	r30, r20
    2664:	e2 95       	swap	r30
    2666:	ef 70       	andi	r30, 0x0F	; 15
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	e0 5a       	subi	r30, 0xA0	; 160
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	2f 81       	ldd	r18, Y+7	; 0x07
    2670:	68 85       	ldd	r22, Y+8	; 0x08
    2672:	0c 94 c0 29 	jmp	0x5380	; 0x5380 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2676:	84 2f       	mov	r24, r20
    2678:	80 7f       	andi	r24, 0xF0	; 240
    267a:	14 2f       	mov	r17, r20
    267c:	1f 70       	andi	r17, 0x0F	; 15
    267e:	88 23       	and	r24, r24
    2680:	11 f0       	breq	.+4      	; 0x2686 <process_action+0x9e>
    2682:	12 95       	swap	r17
    2684:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    2686:	ff 20       	and	r15, r15
    2688:	59 f0       	breq	.+22     	; 0x26a0 <process_action+0xb8>
                    if (mods) {
    268a:	11 23       	and	r17, r17
    268c:	09 f4       	brne	.+2      	; 0x2690 <process_action+0xa8>
    268e:	58 c2       	rjmp	.+1200   	; 0x2b40 <process_action+0x558>
                        add_weak_mods(mods);
    2690:	81 2f       	mov	r24, r17
    2692:	68 87       	std	Y+8, r22	; 0x08
    2694:	0e 94 1e 1c 	call	0x383c	; 0x383c <add_weak_mods>
                        send_keyboard_report();
    2698:	0e 94 47 1c 	call	0x388e	; 0x388e <send_keyboard_report>
    269c:	68 85       	ldd	r22, Y+8	; 0x08
    269e:	50 c2       	rjmp	.+1184   	; 0x2b40 <process_action+0x558>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    26a0:	86 2f       	mov	r24, r22
    26a2:	0e 94 97 12 	call	0x252e	; 0x252e <unregister_code>
                    if (mods) {
    26a6:	11 23       	and	r17, r17
    26a8:	09 f4       	brne	.+2      	; 0x26ac <process_action+0xc4>
    26aa:	95 c2       	rjmp	.+1322   	; 0x2bd6 <process_action+0x5ee>
                        del_weak_mods(mods);
    26ac:	81 2f       	mov	r24, r17
    26ae:	0e 94 24 1c 	call	0x3848	; 0x3848 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    26b2:	28 96       	adiw	r28, 0x08	; 8
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	de bf       	out	0x3e, r29	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	1f 91       	pop	r17
    26c4:	0f 91       	pop	r16
    26c6:	ff 90       	pop	r15
    26c8:	ef 90       	pop	r14
    26ca:	df 90       	pop	r13
    26cc:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    26ce:	0c 94 47 1c 	jmp	0x388e	; 0x388e <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    26d2:	34 2f       	mov	r19, r20
    26d4:	30 7f       	andi	r19, 0xF0	; 240
    26d6:	84 2f       	mov	r24, r20
    26d8:	8f 70       	andi	r24, 0x0F	; 15
    26da:	30 32       	cpi	r19, 0x20	; 32
    26dc:	11 f0       	breq	.+4      	; 0x26e2 <process_action+0xfa>
    26de:	82 95       	swap	r24
    26e0:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    26e2:	66 23       	and	r22, r22
    26e4:	19 f0       	breq	.+6      	; 0x26ec <process_action+0x104>
    26e6:	61 30       	cpi	r22, 0x01	; 1
    26e8:	09 f1       	breq	.+66     	; 0x272c <process_action+0x144>
    26ea:	2a c0       	rjmp	.+84     	; 0x2740 <process_action+0x158>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    26ec:	ff 20       	and	r15, r15
    26ee:	a1 f0       	breq	.+40     	; 0x2718 <process_action+0x130>
                            if (tap_count == 0) {
    26f0:	22 23       	and	r18, r18
    26f2:	81 f1       	breq	.+96     	; 0x2754 <process_action+0x16c>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    26f4:	21 30       	cpi	r18, 0x01	; 1
    26f6:	71 f5       	brne	.+92     	; 0x2754 <process_action+0x16c>
            break;
#endif
        default:
            break;
    }
}
    26f8:	28 96       	adiw	r28, 0x08	; 8
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	f8 94       	cli
    26fe:	de bf       	out	0x3e, r29	; 62
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	cd bf       	out	0x3d, r28	; 61
    2704:	df 91       	pop	r29
    2706:	cf 91       	pop	r28
    2708:	1f 91       	pop	r17
    270a:	0f 91       	pop	r16
    270c:	ff 90       	pop	r15
    270e:	ef 90       	pop	r14
    2710:	df 90       	pop	r13
    2712:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2714:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2718:	22 23       	and	r18, r18
    271a:	19 f0       	breq	.+6      	; 0x2722 <process_action+0x13a>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    271c:	21 30       	cpi	r18, 0x01	; 1
    271e:	09 f4       	brne	.+2      	; 0x2722 <process_action+0x13a>
    2720:	5a c2       	rjmp	.+1204   	; 0x2bd6 <process_action+0x5ee>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2722:	8e 83       	std	Y+6, r24	; 0x06
    2724:	0e 94 31 1c 	call	0x3862	; 0x3862 <clear_oneshot_mods>
                                unregister_mods(mods);
    2728:	8e 81       	ldd	r24, Y+6	; 0x06
    272a:	8e c1       	rjmp	.+796    	; 0x2a48 <process_action+0x460>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    272c:	ff 20       	and	r15, r15
    272e:	21 f0       	breq	.+8      	; 0x2738 <process_action+0x150>
                            if (tap_count <= TAPPING_TOGGLE) {
    2730:	26 30       	cpi	r18, 0x06	; 6
    2732:	08 f0       	brcs	.+2      	; 0x2736 <process_action+0x14e>
    2734:	50 c2       	rjmp	.+1184   	; 0x2bd6 <process_action+0x5ee>
    2736:	0e c0       	rjmp	.+28     	; 0x2754 <process_action+0x16c>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2738:	25 30       	cpi	r18, 0x05	; 5
    273a:	08 f0       	brcs	.+2      	; 0x273e <process_action+0x156>
    273c:	4c c2       	rjmp	.+1176   	; 0x2bd6 <process_action+0x5ee>
    273e:	84 c1       	rjmp	.+776    	; 0x2a48 <process_action+0x460>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2740:	ff 20       	and	r15, r15
    2742:	c1 f0       	breq	.+48     	; 0x2774 <process_action+0x18c>
                            if (tap_count > 0) {
    2744:	22 23       	and	r18, r18
    2746:	31 f0       	breq	.+12     	; 0x2754 <process_action+0x16c>
                                if (record->tap.interrupted) {
    2748:	f8 01       	movw	r30, r16
    274a:	95 81       	ldd	r25, Z+5	; 0x05
    274c:	90 ff       	sbrs	r25, 0
    274e:	f8 c1       	rjmp	.+1008   	; 0x2b40 <process_action+0x558>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2750:	9f 70       	andi	r25, 0x0F	; 15
    2752:	95 83       	std	Z+5, r25	; 0x05
            break;
#endif
        default:
            break;
    }
}
    2754:	28 96       	adiw	r28, 0x08	; 8
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	1f 91       	pop	r17
    2766:	0f 91       	pop	r16
    2768:	ff 90       	pop	r15
    276a:	ef 90       	pop	r14
    276c:	df 90       	pop	r13
    276e:	cf 90       	pop	r12
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
                                    register_mods(mods);
    2770:	0c 94 e6 12 	jmp	0x25cc	; 0x25cc <register_mods>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2774:	22 23       	and	r18, r18
    2776:	09 f4       	brne	.+2      	; 0x277a <process_action+0x192>
    2778:	67 c1       	rjmp	.+718    	; 0x2a48 <process_action+0x460>
    277a:	f6 c1       	rjmp	.+1004   	; 0x2b68 <process_action+0x580>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    277c:	24 2f       	mov	r18, r20
    277e:	26 95       	lsr	r18
    2780:	26 95       	lsr	r18
    2782:	23 70       	andi	r18, 0x03	; 3
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	21 15       	cp	r18, r1
    2788:	31 05       	cpc	r19, r1
    278a:	21 f0       	breq	.+8      	; 0x2794 <process_action+0x1ac>
    278c:	21 30       	cpi	r18, 0x01	; 1
    278e:	31 05       	cpc	r19, r1
    2790:	c9 f0       	breq	.+50     	; 0x27c4 <process_action+0x1dc>
    2792:	21 c2       	rjmp	.+1090   	; 0x2bd6 <process_action+0x5ee>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2794:	ff 20       	and	r15, r15
    2796:	21 f0       	breq	.+8      	; 0x27a0 <process_action+0x1b8>
                        host_system_send(action.usage.code);
    2798:	86 2f       	mov	r24, r22
    279a:	94 2f       	mov	r25, r20
    279c:	93 70       	andi	r25, 0x03	; 3
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <process_action+0x1bc>
                    } else {
                        host_system_send(0);
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    27a4:	28 96       	adiw	r28, 0x08	; 8
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	df 91       	pop	r29
    27b2:	cf 91       	pop	r28
    27b4:	1f 91       	pop	r17
    27b6:	0f 91       	pop	r16
    27b8:	ff 90       	pop	r15
    27ba:	ef 90       	pop	r14
    27bc:	df 90       	pop	r13
    27be:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    27c0:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    27c4:	ff 20       	and	r15, r15
    27c6:	21 f0       	breq	.+8      	; 0x27d0 <process_action+0x1e8>
                        host_consumer_send(action.usage.code);
    27c8:	86 2f       	mov	r24, r22
    27ca:	94 2f       	mov	r25, r20
    27cc:	93 70       	andi	r25, 0x03	; 3
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <process_action+0x1ec>
                    } else {
                        host_consumer_send(0);
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    27d4:	28 96       	adiw	r28, 0x08	; 8
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	df 91       	pop	r29
    27e2:	cf 91       	pop	r28
    27e4:	1f 91       	pop	r17
    27e6:	0f 91       	pop	r16
    27e8:	ff 90       	pop	r15
    27ea:	ef 90       	pop	r14
    27ec:	df 90       	pop	r13
    27ee:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    27f0:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    27f4:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    27f6:	ff 20       	and	r15, r15
    27f8:	19 f0       	breq	.+6      	; 0x2800 <process_action+0x218>
                mousekey_on(action.key.code);
    27fa:	0e 94 3f 21 	call	0x427e	; 0x427e <mousekey_on>
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <process_action+0x21c>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2800:	0e 94 a7 21 	call	0x434e	; 0x434e <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    2804:	28 96       	adiw	r28, 0x08	; 8
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	cd bf       	out	0x3d, r28	; 61
    2810:	df 91       	pop	r29
    2812:	cf 91       	pop	r28
    2814:	1f 91       	pop	r17
    2816:	0f 91       	pop	r16
    2818:	ff 90       	pop	r15
    281a:	ef 90       	pop	r14
    281c:	df 90       	pop	r13
    281e:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    2820:	0c 94 2c 22 	jmp	0x4458	; 0x4458 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2824:	84 2f       	mov	r24, r20
    2826:	83 70       	andi	r24, 0x03	; 3
    2828:	09 f0       	breq	.+2      	; 0x282c <process_action+0x244>
    282a:	76 c0       	rjmp	.+236    	; 0x2918 <process_action+0x330>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    282c:	f1 10       	cpse	r15, r1
    282e:	d3 c1       	rjmp	.+934    	; 0x2bd6 <process_action+0x5ee>
                    uint8_t shift = action.layer_bitop.part*4;
    2830:	26 2f       	mov	r18, r22
    2832:	22 95       	swap	r18
    2834:	26 95       	lsr	r18
    2836:	27 70       	andi	r18, 0x07	; 7
    2838:	22 0f       	add	r18, r18
    283a:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    283c:	86 2f       	mov	r24, r22
    283e:	8f 70       	andi	r24, 0x0F	; 15
    2840:	c8 2e       	mov	r12, r24
    2842:	d1 2c       	mov	r13, r1
    2844:	e1 2c       	mov	r14, r1
    2846:	f1 2c       	mov	r15, r1
    2848:	02 2e       	mov	r0, r18
    284a:	04 c0       	rjmp	.+8      	; 0x2854 <process_action+0x26c>
    284c:	cc 0c       	add	r12, r12
    284e:	dd 1c       	adc	r13, r13
    2850:	ee 1c       	adc	r14, r14
    2852:	ff 1c       	adc	r15, r15
    2854:	0a 94       	dec	r0
    2856:	d2 f7       	brpl	.-12     	; 0x284c <process_action+0x264>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2858:	64 ff       	sbrs	r22, 4
    285a:	10 c0       	rjmp	.+32     	; 0x287c <process_action+0x294>
    285c:	6f e0       	ldi	r22, 0x0F	; 15
    285e:	70 e0       	ldi	r23, 0x00	; 0
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	04 c0       	rjmp	.+8      	; 0x286e <process_action+0x286>
    2866:	66 0f       	add	r22, r22
    2868:	77 1f       	adc	r23, r23
    286a:	88 1f       	adc	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	2a 95       	dec	r18
    2870:	d2 f7       	brpl	.-12     	; 0x2866 <process_action+0x27e>
    2872:	60 95       	com	r22
    2874:	70 95       	com	r23
    2876:	80 95       	com	r24
    2878:	90 95       	com	r25
    287a:	03 c0       	rjmp	.+6      	; 0x2882 <process_action+0x29a>
    287c:	60 e0       	ldi	r22, 0x00	; 0
    287e:	70 e0       	ldi	r23, 0x00	; 0
    2880:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2882:	24 2f       	mov	r18, r20
    2884:	26 95       	lsr	r18
    2886:	26 95       	lsr	r18
    2888:	23 70       	andi	r18, 0x03	; 3
    288a:	42 2f       	mov	r20, r18
    288c:	50 e0       	ldi	r21, 0x00	; 0
    288e:	42 30       	cpi	r20, 0x02	; 2
    2890:	51 05       	cpc	r21, r1
    2892:	d1 f0       	breq	.+52     	; 0x28c8 <process_action+0x2e0>
    2894:	43 30       	cpi	r20, 0x03	; 3
    2896:	51 05       	cpc	r21, r1
    2898:	59 f1       	breq	.+86     	; 0x28f0 <process_action+0x308>
    289a:	6c 29       	or	r22, r12
    289c:	7d 29       	or	r23, r13
    289e:	8e 29       	or	r24, r14
    28a0:	9f 29       	or	r25, r15
    28a2:	41 30       	cpi	r20, 0x01	; 1
    28a4:	51 05       	cpc	r21, r1
    28a6:	41 f1       	breq	.+80     	; 0x28f8 <process_action+0x310>
            break;
#endif
        default:
            break;
    }
}
    28a8:	28 96       	adiw	r28, 0x08	; 8
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	df 91       	pop	r29
    28b6:	cf 91       	pop	r28
    28b8:	1f 91       	pop	r17
    28ba:	0f 91       	pop	r16
    28bc:	ff 90       	pop	r15
    28be:	ef 90       	pop	r14
    28c0:	df 90       	pop	r13
    28c2:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    28c4:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    28c8:	6c 29       	or	r22, r12
    28ca:	7d 29       	or	r23, r13
    28cc:	8e 29       	or	r24, r14
    28ce:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    28d0:	28 96       	adiw	r28, 0x08	; 8
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	1f 91       	pop	r17
    28e2:	0f 91       	pop	r16
    28e4:	ff 90       	pop	r15
    28e6:	ef 90       	pop	r14
    28e8:	df 90       	pop	r13
    28ea:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    28ec:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    28f0:	0e 94 28 1a 	call	0x3450	; 0x3450 <default_layer_and>
    28f4:	c7 01       	movw	r24, r14
    28f6:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    28f8:	28 96       	adiw	r28, 0x08	; 8
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	df 91       	pop	r29
    2906:	cf 91       	pop	r28
    2908:	1f 91       	pop	r17
    290a:	0f 91       	pop	r16
    290c:	ff 90       	pop	r15
    290e:	ef 90       	pop	r14
    2910:	df 90       	pop	r13
    2912:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2914:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2918:	ff 20       	and	r15, r15
    291a:	19 f0       	breq	.+6      	; 0x2922 <process_action+0x33a>
    291c:	84 2f       	mov	r24, r20
    291e:	81 70       	andi	r24, 0x01	; 1
    2920:	01 c0       	rjmp	.+2      	; 0x2924 <process_action+0x33c>
    2922:	86 95       	lsr	r24
    2924:	88 23       	and	r24, r24
    2926:	09 f4       	brne	.+2      	; 0x292a <process_action+0x342>
    2928:	56 c1       	rjmp	.+684    	; 0x2bd6 <process_action+0x5ee>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    292a:	26 2f       	mov	r18, r22
    292c:	22 95       	swap	r18
    292e:	26 95       	lsr	r18
    2930:	27 70       	andi	r18, 0x07	; 7
    2932:	22 0f       	add	r18, r18
    2934:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2936:	86 2f       	mov	r24, r22
    2938:	8f 70       	andi	r24, 0x0F	; 15
    293a:	c8 2e       	mov	r12, r24
    293c:	d1 2c       	mov	r13, r1
    293e:	e1 2c       	mov	r14, r1
    2940:	f1 2c       	mov	r15, r1
    2942:	02 2e       	mov	r0, r18
    2944:	04 c0       	rjmp	.+8      	; 0x294e <process_action+0x366>
    2946:	cc 0c       	add	r12, r12
    2948:	dd 1c       	adc	r13, r13
    294a:	ee 1c       	adc	r14, r14
    294c:	ff 1c       	adc	r15, r15
    294e:	0a 94       	dec	r0
    2950:	d2 f7       	brpl	.-12     	; 0x2946 <process_action+0x35e>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2952:	64 ff       	sbrs	r22, 4
    2954:	10 c0       	rjmp	.+32     	; 0x2976 <process_action+0x38e>
    2956:	6f e0       	ldi	r22, 0x0F	; 15
    2958:	70 e0       	ldi	r23, 0x00	; 0
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	04 c0       	rjmp	.+8      	; 0x2968 <process_action+0x380>
    2960:	66 0f       	add	r22, r22
    2962:	77 1f       	adc	r23, r23
    2964:	88 1f       	adc	r24, r24
    2966:	99 1f       	adc	r25, r25
    2968:	2a 95       	dec	r18
    296a:	d2 f7       	brpl	.-12     	; 0x2960 <process_action+0x378>
    296c:	60 95       	com	r22
    296e:	70 95       	com	r23
    2970:	80 95       	com	r24
    2972:	90 95       	com	r25
    2974:	03 c0       	rjmp	.+6      	; 0x297c <process_action+0x394>
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	70 e0       	ldi	r23, 0x00	; 0
    297a:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    297c:	24 2f       	mov	r18, r20
    297e:	26 95       	lsr	r18
    2980:	26 95       	lsr	r18
    2982:	23 70       	andi	r18, 0x03	; 3
    2984:	42 2f       	mov	r20, r18
    2986:	50 e0       	ldi	r21, 0x00	; 0
    2988:	42 30       	cpi	r20, 0x02	; 2
    298a:	51 05       	cpc	r21, r1
    298c:	d1 f0       	breq	.+52     	; 0x29c2 <process_action+0x3da>
    298e:	43 30       	cpi	r20, 0x03	; 3
    2990:	51 05       	cpc	r21, r1
    2992:	59 f1       	breq	.+86     	; 0x29ea <process_action+0x402>
    2994:	6c 29       	or	r22, r12
    2996:	7d 29       	or	r23, r13
    2998:	8e 29       	or	r24, r14
    299a:	9f 29       	or	r25, r15
    299c:	41 30       	cpi	r20, 0x01	; 1
    299e:	51 05       	cpc	r21, r1
    29a0:	41 f1       	breq	.+80     	; 0x29f2 <process_action+0x40a>
            break;
#endif
        default:
            break;
    }
}
    29a2:	28 96       	adiw	r28, 0x08	; 8
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	df 91       	pop	r29
    29b0:	cf 91       	pop	r28
    29b2:	1f 91       	pop	r17
    29b4:	0f 91       	pop	r16
    29b6:	ff 90       	pop	r15
    29b8:	ef 90       	pop	r14
    29ba:	df 90       	pop	r13
    29bc:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    29be:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    29c2:	6c 29       	or	r22, r12
    29c4:	7d 29       	or	r23, r13
    29c6:	8e 29       	or	r24, r14
    29c8:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    29ca:	28 96       	adiw	r28, 0x08	; 8
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	f8 94       	cli
    29d0:	de bf       	out	0x3e, r29	; 62
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	cd bf       	out	0x3d, r28	; 61
    29d6:	df 91       	pop	r29
    29d8:	cf 91       	pop	r28
    29da:	1f 91       	pop	r17
    29dc:	0f 91       	pop	r16
    29de:	ff 90       	pop	r15
    29e0:	ef 90       	pop	r14
    29e2:	df 90       	pop	r13
    29e4:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    29e6:	0c 94 16 1b 	jmp	0x362c	; 0x362c <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    29ea:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <layer_and>
    29ee:	c7 01       	movw	r24, r14
    29f0:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    29f2:	28 96       	adiw	r28, 0x08	; 8
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	1f 91       	pop	r17
    2a04:	0f 91       	pop	r16
    2a06:	ff 90       	pop	r15
    2a08:	ef 90       	pop	r14
    2a0a:	df 90       	pop	r13
    2a0c:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2a0e:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2a12:	60 3f       	cpi	r22, 0xF0	; 240
    2a14:	49 f1       	breq	.+82     	; 0x2a68 <process_action+0x480>
    2a16:	18 f4       	brcc	.+6      	; 0x2a1e <process_action+0x436>
    2a18:	60 3e       	cpi	r22, 0xE0	; 224
    2a1a:	48 f4       	brcc	.+18     	; 0x2a2e <process_action+0x446>
    2a1c:	8c c0       	rjmp	.+280    	; 0x2b36 <process_action+0x54e>
    2a1e:	62 3f       	cpi	r22, 0xF2	; 242
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <process_action+0x43c>
    2a22:	51 c0       	rjmp	.+162    	; 0x2ac6 <process_action+0x4de>
    2a24:	e0 f1       	brcs	.+120    	; 0x2a9e <process_action+0x4b6>
    2a26:	63 3f       	cpi	r22, 0xF3	; 243
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <process_action+0x444>
    2a2a:	61 c0       	rjmp	.+194    	; 0x2aee <process_action+0x506>
    2a2c:	84 c0       	rjmp	.+264    	; 0x2b36 <process_action+0x54e>
    2a2e:	16 2f       	mov	r17, r22
    2a30:	1f 70       	andi	r17, 0x0F	; 15
    2a32:	84 2f       	mov	r24, r20
    2a34:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2a36:	ff 20       	and	r15, r15
    2a38:	21 f0       	breq	.+8      	; 0x2a42 <process_action+0x45a>
                        layer_on(action.layer_tap.val);
    2a3a:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2a3e:	81 2f       	mov	r24, r17
    2a40:	89 ce       	rjmp	.-750    	; 0x2754 <process_action+0x16c>
                    } else {
                        layer_off(action.layer_tap.val);
    2a42:	0e 94 9c 1a 	call	0x3538	; 0x3538 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2a46:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2a48:	28 96       	adiw	r28, 0x08	; 8
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	f8 94       	cli
    2a4e:	de bf       	out	0x3e, r29	; 62
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	cd bf       	out	0x3d, r28	; 61
    2a54:	df 91       	pop	r29
    2a56:	cf 91       	pop	r28
    2a58:	1f 91       	pop	r17
    2a5a:	0f 91       	pop	r16
    2a5c:	ff 90       	pop	r15
    2a5e:	ef 90       	pop	r14
    2a60:	df 90       	pop	r13
    2a62:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2a64:	0c 94 ed 12 	jmp	0x25da	; 0x25da <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2a68:	ff 20       	and	r15, r15
    2a6a:	a9 f0       	breq	.+42     	; 0x2a96 <process_action+0x4ae>
                        if (tap_count < TAPPING_TOGGLE) {
    2a6c:	25 30       	cpi	r18, 0x05	; 5
    2a6e:	08 f0       	brcs	.+2      	; 0x2a72 <process_action+0x48a>
    2a70:	b2 c0       	rjmp	.+356    	; 0x2bd6 <process_action+0x5ee>
                            layer_invert(action.layer_tap.val);
    2a72:	84 2f       	mov	r24, r20
    2a74:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2a76:	28 96       	adiw	r28, 0x08	; 8
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	df 91       	pop	r29
    2a84:	cf 91       	pop	r28
    2a86:	1f 91       	pop	r17
    2a88:	0f 91       	pop	r16
    2a8a:	ff 90       	pop	r15
    2a8c:	ef 90       	pop	r14
    2a8e:	df 90       	pop	r13
    2a90:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2a92:	0c 94 c1 1a 	jmp	0x3582	; 0x3582 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2a96:	26 30       	cpi	r18, 0x06	; 6
    2a98:	08 f0       	brcs	.+2      	; 0x2a9c <process_action+0x4b4>
    2a9a:	9d c0       	rjmp	.+314    	; 0x2bd6 <process_action+0x5ee>
    2a9c:	ea cf       	rjmp	.-44     	; 0x2a72 <process_action+0x48a>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2a9e:	ff 20       	and	r15, r15
    2aa0:	a1 f0       	breq	.+40     	; 0x2aca <process_action+0x4e2>
    2aa2:	84 2f       	mov	r24, r20
    2aa4:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2aa6:	28 96       	adiw	r28, 0x08	; 8
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	df 91       	pop	r29
    2ab4:	cf 91       	pop	r28
    2ab6:	1f 91       	pop	r17
    2ab8:	0f 91       	pop	r16
    2aba:	ff 90       	pop	r15
    2abc:	ef 90       	pop	r14
    2abe:	df 90       	pop	r13
    2ac0:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2ac2:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2ac6:	ff 20       	and	r15, r15
    2ac8:	61 f3       	breq	.-40     	; 0x2aa2 <process_action+0x4ba>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2aca:	84 2f       	mov	r24, r20
    2acc:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2ace:	28 96       	adiw	r28, 0x08	; 8
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
    2ada:	df 91       	pop	r29
    2adc:	cf 91       	pop	r28
    2ade:	1f 91       	pop	r17
    2ae0:	0f 91       	pop	r16
    2ae2:	ff 90       	pop	r15
    2ae4:	ef 90       	pop	r14
    2ae6:	df 90       	pop	r13
    2ae8:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2aea:	0c 94 9c 1a 	jmp	0x3538	; 0x3538 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2aee:	ff 20       	and	r15, r15
    2af0:	91 f0       	breq	.+36     	; 0x2b16 <process_action+0x52e>
    2af2:	84 2f       	mov	r24, r20
    2af4:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2af6:	28 96       	adiw	r28, 0x08	; 8
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	f8 94       	cli
    2afc:	de bf       	out	0x3e, r29	; 62
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	cd bf       	out	0x3d, r28	; 61
    2b02:	df 91       	pop	r29
    2b04:	cf 91       	pop	r28
    2b06:	1f 91       	pop	r17
    2b08:	0f 91       	pop	r16
    2b0a:	ff 90       	pop	r15
    2b0c:	ef 90       	pop	r14
    2b0e:	df 90       	pop	r13
    2b10:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2b12:	0c 94 66 1a 	jmp	0x34cc	; 0x34cc <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2b16:	28 96       	adiw	r28, 0x08	; 8
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	1f 91       	pop	r17
    2b28:	0f 91       	pop	r16
    2b2a:	ff 90       	pop	r15
    2b2c:	ef 90       	pop	r14
    2b2e:	df 90       	pop	r13
    2b30:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2b32:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2b36:	ff 20       	and	r15, r15
    2b38:	a1 f0       	breq	.+40     	; 0x2b62 <process_action+0x57a>
                        if (tap_count > 0) {
    2b3a:	22 23       	and	r18, r18
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <process_action+0x558>
    2b3e:	b1 cf       	rjmp	.-158    	; 0x2aa2 <process_action+0x4ba>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2b40:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2b42:	28 96       	adiw	r28, 0x08	; 8
    2b44:	0f b6       	in	r0, 0x3f	; 63
    2b46:	f8 94       	cli
    2b48:	de bf       	out	0x3e, r29	; 62
    2b4a:	0f be       	out	0x3f, r0	; 63
    2b4c:	cd bf       	out	0x3d, r28	; 61
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	1f 91       	pop	r17
    2b54:	0f 91       	pop	r16
    2b56:	ff 90       	pop	r15
    2b58:	ef 90       	pop	r14
    2b5a:	df 90       	pop	r13
    2b5c:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2b5e:	0c 94 cf 11 	jmp	0x239e	; 0x239e <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2b62:	22 23       	and	r18, r18
    2b64:	09 f4       	brne	.+2      	; 0x2b68 <process_action+0x580>
    2b66:	b1 cf       	rjmp	.-158    	; 0x2aca <process_action+0x4e2>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2b68:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2b6a:	28 96       	adiw	r28, 0x08	; 8
    2b6c:	0f b6       	in	r0, 0x3f	; 63
    2b6e:	f8 94       	cli
    2b70:	de bf       	out	0x3e, r29	; 62
    2b72:	0f be       	out	0x3f, r0	; 63
    2b74:	cd bf       	out	0x3d, r28	; 61
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	1f 91       	pop	r17
    2b7c:	0f 91       	pop	r16
    2b7e:	ff 90       	pop	r15
    2b80:	ef 90       	pop	r14
    2b82:	df 90       	pop	r13
    2b84:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2b86:	0c 94 97 12 	jmp	0x252e	; 0x252e <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2b8a:	4f 70       	andi	r20, 0x0F	; 15
    2b8c:	c8 01       	movw	r24, r16
    2b8e:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2b92:	28 96       	adiw	r28, 0x08	; 8
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	f8 94       	cli
    2b98:	de bf       	out	0x3e, r29	; 62
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	cd bf       	out	0x3d, r28	; 61
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	1f 91       	pop	r17
    2ba4:	0f 91       	pop	r16
    2ba6:	ff 90       	pop	r15
    2ba8:	ef 90       	pop	r14
    2baa:	df 90       	pop	r13
    2bac:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2bae:	0c 94 85 19 	jmp	0x330a	; 0x330a <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2bb2:	4f 70       	andi	r20, 0x0F	; 15
    2bb4:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2bb6:	28 96       	adiw	r28, 0x08	; 8
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	cd bf       	out	0x3d, r28	; 61
    2bc2:	df 91       	pop	r29
    2bc4:	cf 91       	pop	r28
    2bc6:	1f 91       	pop	r17
    2bc8:	0f 91       	pop	r16
    2bca:	ff 90       	pop	r15
    2bcc:	ef 90       	pop	r14
    2bce:	df 90       	pop	r13
    2bd0:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2bd2:	0c 94 91 1d 	jmp	0x3b22	; 0x3b22 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2bd6:	28 96       	adiw	r28, 0x08	; 8
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
    2be2:	df 91       	pop	r29
    2be4:	cf 91       	pop	r28
    2be6:	1f 91       	pop	r17
    2be8:	0f 91       	pop	r16
    2bea:	ff 90       	pop	r15
    2bec:	ef 90       	pop	r14
    2bee:	df 90       	pop	r13
    2bf0:	cf 90       	pop	r12
    2bf2:	08 95       	ret

00002bf4 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2bf4:	0e 94 2b 1c 	call	0x3856	; 0x3856 <clear_weak_mods>
    clear_keys();
    2bf8:	0e 94 00 1c 	call	0x3800	; 0x3800 <clear_keys>
    send_keyboard_report();
    2bfc:	0e 94 47 1c 	call	0x388e	; 0x388e <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2c00:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <mousekey_clear>
    mousekey_send();
    2c04:	0e 94 2c 22 	call	0x4458	; 0x4458 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	0e 94 8b 10 	call	0x2116	; 0x2116 <host_system_send>
    host_consumer_send(0);
    2c10:	80 e0       	ldi	r24, 0x00	; 0
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <host_consumer_send>

00002c18 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2c18:	0e 94 1b 1c 	call	0x3836	; 0x3836 <clear_mods>
    clear_keyboard_but_mods();
    2c1c:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <clear_keyboard_but_mods>

00002c20 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2c20:	0e 94 31 1b 	call	0x3662	; 0x3662 <layer_switch_get_action>

    switch (action.kind.id) {
    2c24:	29 2f       	mov	r18, r25
    2c26:	22 95       	swap	r18
    2c28:	2f 70       	andi	r18, 0x0F	; 15
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	2c 30       	cpi	r18, 0x0C	; 12
    2c2e:	31 05       	cpc	r19, r1
    2c30:	4c f4       	brge	.+18     	; 0x2c44 <is_tap_key+0x24>
    2c32:	2a 30       	cpi	r18, 0x0A	; 10
    2c34:	31 05       	cpc	r19, r1
    2c36:	6c f4       	brge	.+26     	; 0x2c52 <is_tap_key+0x32>
    2c38:	22 50       	subi	r18, 0x02	; 2
    2c3a:	31 09       	sbc	r19, r1
    2c3c:	22 30       	cpi	r18, 0x02	; 2
    2c3e:	31 05       	cpc	r19, r1
    2c40:	90 f4       	brcc	.+36     	; 0x2c66 <is_tap_key+0x46>
    2c42:	07 c0       	rjmp	.+14     	; 0x2c52 <is_tap_key+0x32>
    2c44:	2c 30       	cpi	r18, 0x0C	; 12
    2c46:	31 05       	cpc	r19, r1
    2c48:	51 f0       	breq	.+20     	; 0x2c5e <is_tap_key+0x3e>
    2c4a:	2f 30       	cpi	r18, 0x0F	; 15
    2c4c:	31 05       	cpc	r19, r1
    2c4e:	39 f0       	breq	.+14     	; 0x2c5e <is_tap_key+0x3e>
    2c50:	0a c0       	rjmp	.+20     	; 0x2c66 <is_tap_key+0x46>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2c52:	80 3e       	cpi	r24, 0xE0	; 224
    2c54:	10 f0       	brcs	.+4      	; 0x2c5a <is_tap_key+0x3a>
    2c56:	80 3f       	cpi	r24, 0xF0	; 240
    2c58:	31 f4       	brne	.+12     	; 0x2c66 <is_tap_key+0x46>
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	08 95       	ret
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2c5e:	93 fb       	bst	r25, 3
    2c60:	88 27       	eor	r24, r24
    2c62:	80 f9       	bld	r24, 0
    2c64:	08 95       	ret
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
            }
            return false;
    2c66:	80 e0       	ldi	r24, 0x00	; 0
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2c68:	08 95       	ret

00002c6a <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2c6a:	cf 93       	push	r28
    2c6c:	df 93       	push	r29
    2c6e:	00 d0       	rcall	.+0      	; 0x2c70 <debug_event+0x6>
    2c70:	00 d0       	rcall	.+0      	; 0x2c72 <debug_event+0x8>
    2c72:	1f 92       	push	r1
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	df 91       	pop	r29
    2c84:	cf 91       	pop	r28
    2c86:	08 95       	ret

00002c88 <debug_record>:

void debug_record(keyrecord_t record)
{
    2c88:	cf 93       	push	r28
    2c8a:	df 93       	push	r29
    2c8c:	00 d0       	rcall	.+0      	; 0x2c8e <debug_record+0x6>
    2c8e:	00 d0       	rcall	.+0      	; 0x2c90 <debug_record+0x8>
    2c90:	00 d0       	rcall	.+0      	; 0x2c92 <debug_record+0xa>
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2c96:	26 96       	adiw	r28, 0x06	; 6
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	f8 94       	cli
    2c9c:	de bf       	out	0x3e, r29	; 62
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	cd bf       	out	0x3d, r28	; 61
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	08 95       	ret

00002ca8 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2cae:	c0 91 74 01 	lds	r28, 0x0174
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2cb2:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2cb4:	80 91 75 01 	lds	r24, 0x0175
    2cb8:	c8 17       	cp	r28, r24
    2cba:	99 f0       	breq	.+38     	; 0x2ce2 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2cbc:	d0 e0       	ldi	r29, 0x00	; 0
    2cbe:	1c 9f       	mul	r17, r28
    2cc0:	f0 01       	movw	r30, r0
    2cc2:	1d 9f       	mul	r17, r29
    2cc4:	f0 0d       	add	r31, r0
    2cc6:	11 24       	eor	r1, r1
    2cc8:	ea 58       	subi	r30, 0x8A	; 138
    2cca:	fe 4f       	sbci	r31, 0xFE	; 254
    2ccc:	40 81       	ld	r20, Z
    2cce:	51 81       	ldd	r21, Z+1	; 0x01
    2cd0:	62 81       	ldd	r22, Z+2	; 0x02
    2cd2:	73 81       	ldd	r23, Z+3	; 0x03
    2cd4:	84 81       	ldd	r24, Z+4	; 0x04
    2cd6:	95 81       	ldd	r25, Z+5	; 0x05
    2cd8:	0e 94 44 16 	call	0x2c88	; 0x2c88 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2cdc:	21 96       	adiw	r28, 0x01	; 1
    2cde:	c7 70       	andi	r28, 0x07	; 7
    2ce0:	e9 cf       	rjmp	.-46     	; 0x2cb4 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2ce2:	df 91       	pop	r29
    2ce4:	cf 91       	pop	r28
    2ce6:	1f 91       	pop	r17
    2ce8:	08 95       	ret

00002cea <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2cea:	40 91 a6 01 	lds	r20, 0x01A6
    2cee:	50 91 a7 01 	lds	r21, 0x01A7
    2cf2:	60 91 a8 01 	lds	r22, 0x01A8
    2cf6:	70 91 a9 01 	lds	r23, 0x01A9
    2cfa:	80 91 aa 01 	lds	r24, 0x01AA
    2cfe:	90 91 ab 01 	lds	r25, 0x01AB
    2d02:	0c 94 44 16 	jmp	0x2c88	; 0x2c88 <debug_record>

00002d06 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2d06:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2d08:	80 91 ab 01 	lds	r24, 0x01AB
    2d0c:	82 95       	swap	r24
    2d0e:	8f 70       	andi	r24, 0x0F	; 15
    2d10:	09 f0       	breq	.+2      	; 0x2d14 <waiting_buffer_scan_tap+0xe>
    2d12:	5f c0       	rjmp	.+190    	; 0x2dd2 <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2d14:	80 91 a8 01 	lds	r24, 0x01A8
    2d18:	88 23       	and	r24, r24
    2d1a:	09 f4       	brne	.+2      	; 0x2d1e <waiting_buffer_scan_tap+0x18>
    2d1c:	5a c0       	rjmp	.+180    	; 0x2dd2 <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d1e:	20 91 74 01 	lds	r18, 0x0174
    2d22:	a0 91 75 01 	lds	r26, 0x0175
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2d26:	60 91 a6 01 	lds	r22, 0x01A6
    2d2a:	70 91 a7 01 	lds	r23, 0x01A7
    2d2e:	80 91 a9 01 	lds	r24, 0x01A9
    2d32:	90 91 aa 01 	lds	r25, 0x01AA
    2d36:	31 e0       	ldi	r19, 0x01	; 1
    2d38:	6f 3f       	cpi	r22, 0xFF	; 255
    2d3a:	09 f0       	breq	.+2      	; 0x2d3e <waiting_buffer_scan_tap+0x38>
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	b3 2f       	mov	r27, r19
    2d40:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d42:	2a 17       	cp	r18, r26
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <waiting_buffer_scan_tap+0x42>
    2d46:	45 c0       	rjmp	.+138    	; 0x2dd2 <waiting_buffer_scan_tap+0xcc>
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	21 f0       	breq	.+8      	; 0x2d54 <waiting_buffer_scan_tap+0x4e>
    2d4c:	7f 3f       	cpi	r23, 0xFF	; 255
    2d4e:	21 f4       	brne	.+8      	; 0x2d58 <waiting_buffer_scan_tap+0x52>
    2d50:	4b 2f       	mov	r20, r27
    2d52:	03 c0       	rjmp	.+6      	; 0x2d5a <waiting_buffer_scan_tap+0x54>
    2d54:	41 e0       	ldi	r20, 0x01	; 1
    2d56:	01 c0       	rjmp	.+2      	; 0x2d5a <waiting_buffer_scan_tap+0x54>
    2d58:	40 e0       	ldi	r20, 0x00	; 0
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2d5c:	40 fd       	sbrc	r20, 0
    2d5e:	35 c0       	rjmp	.+106    	; 0x2dca <waiting_buffer_scan_tap+0xc4>
    2d60:	c2 9f       	mul	r28, r18
    2d62:	f0 01       	movw	r30, r0
    2d64:	c3 9f       	mul	r28, r19
    2d66:	f0 0d       	add	r31, r0
    2d68:	11 24       	eor	r1, r1
    2d6a:	ea 58       	subi	r30, 0x8A	; 138
    2d6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d6e:	41 81       	ldd	r20, Z+1	; 0x01
    2d70:	74 13       	cpse	r23, r20
    2d72:	2b c0       	rjmp	.+86     	; 0x2dca <waiting_buffer_scan_tap+0xc4>
    2d74:	40 81       	ld	r20, Z
    2d76:	64 13       	cpse	r22, r20
    2d78:	28 c0       	rjmp	.+80     	; 0x2dca <waiting_buffer_scan_tap+0xc4>
    2d7a:	42 81       	ldd	r20, Z+2	; 0x02
    2d7c:	41 11       	cpse	r20, r1
    2d7e:	25 c0       	rjmp	.+74     	; 0x2dca <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2d80:	43 81       	ldd	r20, Z+3	; 0x03
    2d82:	54 81       	ldd	r21, Z+4	; 0x04
    2d84:	48 17       	cp	r20, r24
    2d86:	59 07       	cpc	r21, r25
    2d88:	10 f4       	brcc	.+4      	; 0x2d8e <waiting_buffer_scan_tap+0x88>
    2d8a:	41 50       	subi	r20, 0x01	; 1
    2d8c:	51 09       	sbc	r21, r1
    2d8e:	48 1b       	sub	r20, r24
    2d90:	59 0b       	sbc	r21, r25
    2d92:	48 3c       	cpi	r20, 0xC8	; 200
    2d94:	51 05       	cpc	r21, r1
    2d96:	c8 f4       	brcc	.+50     	; 0x2dca <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    2d98:	80 91 ab 01 	lds	r24, 0x01AB
    2d9c:	8f 70       	andi	r24, 0x0F	; 15
    2d9e:	80 61       	ori	r24, 0x10	; 16
    2da0:	80 93 ab 01 	sts	0x01AB, r24
            waiting_buffer[i].tap.count = 1;
    2da4:	86 e0       	ldi	r24, 0x06	; 6
    2da6:	82 9f       	mul	r24, r18
    2da8:	f0 01       	movw	r30, r0
    2daa:	83 9f       	mul	r24, r19
    2dac:	f0 0d       	add	r31, r0
    2dae:	11 24       	eor	r1, r1
    2db0:	e5 58       	subi	r30, 0x85	; 133
    2db2:	fe 4f       	sbci	r31, 0xFE	; 254
    2db4:	80 81       	ld	r24, Z
    2db6:	8f 70       	andi	r24, 0x0F	; 15
    2db8:	80 61       	ori	r24, 0x10	; 16
    2dba:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2dbc:	86 ea       	ldi	r24, 0xA6	; 166
    2dbe:	91 e0       	ldi	r25, 0x01	; 1
    2dc0:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2dc4:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2dc6:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2dca:	2f 5f       	subi	r18, 0xFF	; 255
    2dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dce:	27 70       	andi	r18, 0x07	; 7
    2dd0:	b8 cf       	rjmp	.-144    	; 0x2d42 <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    2dd2:	cf 91       	pop	r28
    2dd4:	08 95       	ret

00002dd6 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2dd6:	cf 92       	push	r12
    2dd8:	df 92       	push	r13
    2dda:	ef 92       	push	r14
    2ddc:	ff 92       	push	r15
    2dde:	0f 93       	push	r16
    2de0:	1f 93       	push	r17
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    2dea:	62 97       	sbiw	r28, 0x12	; 18
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	f8 94       	cli
    2df0:	de bf       	out	0x3e, r29	; 62
    2df2:	0f be       	out	0x3f, r0	; 63
    2df4:	cd bf       	out	0x3d, r28	; 61
    2df6:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2df8:	85 e0       	ldi	r24, 0x05	; 5
    2dfa:	f8 01       	movw	r30, r16
    2dfc:	de 01       	movw	r26, r28
    2dfe:	1d 96       	adiw	r26, 0x0d	; 13
    2e00:	01 90       	ld	r0, Z+
    2e02:	0d 92       	st	X+, r0
    2e04:	8a 95       	dec	r24
    2e06:	e1 f7       	brne	.-8      	; 0x2e00 <process_tapping+0x2a>
    2e08:	d8 01       	movw	r26, r16
    2e0a:	4c 91       	ld	r20, X
    2e0c:	11 96       	adiw	r26, 0x01	; 1
    2e0e:	5c 91       	ld	r21, X
    2e10:	11 97       	sbiw	r26, 0x01	; 1
    2e12:	12 96       	adiw	r26, 0x02	; 2
    2e14:	6c 91       	ld	r22, X
    2e16:	12 97       	sbiw	r26, 0x02	; 2
    2e18:	13 96       	adiw	r26, 0x03	; 3
    2e1a:	ed 90       	ld	r14, X+
    2e1c:	fc 90       	ld	r15, X
    2e1e:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2e20:	70 91 a6 01 	lds	r23, 0x01A6
    2e24:	e0 91 a7 01 	lds	r30, 0x01A7
    2e28:	20 91 a9 01 	lds	r18, 0x01A9
    2e2c:	30 91 aa 01 	lds	r19, 0x01AA
    2e30:	21 15       	cp	r18, r1
    2e32:	31 05       	cpc	r19, r1
    2e34:	31 f0       	breq	.+12     	; 0x2e42 <process_tapping+0x6c>
    2e36:	ef 3f       	cpi	r30, 0xFF	; 255
    2e38:	31 f4       	brne	.+12     	; 0x2e46 <process_tapping+0x70>
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	7f 3f       	cpi	r23, 0xFF	; 255
    2e3e:	19 f4       	brne	.+6      	; 0x2e46 <process_tapping+0x70>
    2e40:	03 c0       	rjmp	.+6      	; 0x2e48 <process_tapping+0x72>
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	01 c0       	rjmp	.+2      	; 0x2e48 <process_tapping+0x72>
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	b8 2f       	mov	r27, r24
    2e4a:	b1 70       	andi	r27, 0x01	; 1
    2e4c:	cb 2e       	mov	r12, r27
    2e4e:	80 fd       	sbrc	r24, 0
    2e50:	6c c1       	rjmp	.+728    	; 0x312a <process_tapping+0x354>
    2e52:	d0 90 a8 01 	lds	r13, 0x01A8
    2e56:	dd 20       	and	r13, r13
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <process_tapping+0x86>
    2e5a:	f5 c0       	rjmp	.+490    	; 0x3046 <process_tapping+0x270>
    2e5c:	f0 91 ab 01 	lds	r31, 0x01AB
        if (WITHIN_TAPPING_TERM(event)) {
    2e60:	e2 16       	cp	r14, r18
    2e62:	f3 06       	cpc	r15, r19
    2e64:	38 f0       	brcs	.+14     	; 0x2e74 <process_tapping+0x9e>
    2e66:	c7 01       	movw	r24, r14
    2e68:	82 1b       	sub	r24, r18
    2e6a:	93 0b       	sbc	r25, r19
    2e6c:	88 3c       	cpi	r24, 0xC8	; 200
    2e6e:	91 05       	cpc	r25, r1
    2e70:	48 f0       	brcs	.+18     	; 0x2e84 <process_tapping+0xae>
    2e72:	9b c0       	rjmp	.+310    	; 0x2faa <process_tapping+0x1d4>
    2e74:	20 95       	com	r18
    2e76:	30 95       	com	r19
    2e78:	2e 0d       	add	r18, r14
    2e7a:	3f 1d       	adc	r19, r15
    2e7c:	28 3c       	cpi	r18, 0xC8	; 200
    2e7e:	31 05       	cpc	r19, r1
    2e80:	08 f0       	brcs	.+2      	; 0x2e84 <process_tapping+0xae>
    2e82:	93 c0       	rjmp	.+294    	; 0x2faa <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    2e84:	8f 2f       	mov	r24, r31
    2e86:	80 7f       	andi	r24, 0xF0	; 240
    2e88:	09 f0       	breq	.+2      	; 0x2e8c <process_tapping+0xb6>
    2e8a:	52 c0       	rjmp	.+164    	; 0x2f30 <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2e8c:	e5 13       	cpse	r30, r21
    2e8e:	14 c0       	rjmp	.+40     	; 0x2eb8 <process_tapping+0xe2>
    2e90:	74 13       	cpse	r23, r20
    2e92:	12 c0       	rjmp	.+36     	; 0x2eb8 <process_tapping+0xe2>
    2e94:	d6 2e       	mov	r13, r22
    2e96:	61 11       	cpse	r22, r1
    2e98:	0f c0       	rjmp	.+30     	; 0x2eb8 <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2e9a:	ff 70       	andi	r31, 0x0F	; 15
    2e9c:	f0 61       	ori	r31, 0x10	; 16
    2e9e:	f0 93 ab 01 	sts	0x01AB, r31
                    debug_tapping_key();
    2ea2:	0e 94 75 16 	call	0x2cea	; 0x2cea <debug_tapping_key>
                    process_action(&tapping_key);
    2ea6:	86 ea       	ldi	r24, 0xA6	; 166
    2ea8:	91 e0       	ldi	r25, 0x01	; 1
    2eaa:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2eae:	80 91 ab 01 	lds	r24, 0x01AB
    2eb2:	f8 01       	movw	r30, r16
    2eb4:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    2eb6:	6c c1       	rjmp	.+728    	; 0x3190 <process_tapping+0x3ba>
    2eb8:	ef 28       	or	r14, r15
    2eba:	31 f0       	breq	.+12     	; 0x2ec8 <process_tapping+0xf2>
    2ebc:	5f 3f       	cpi	r21, 0xFF	; 255
    2ebe:	31 f4       	brne	.+12     	; 0x2ecc <process_tapping+0xf6>
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	4f 3f       	cpi	r20, 0xFF	; 255
    2ec4:	19 f4       	brne	.+6      	; 0x2ecc <process_tapping+0xf6>
    2ec6:	03 c0       	rjmp	.+6      	; 0x2ece <process_tapping+0xf8>
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	01 c0       	rjmp	.+2      	; 0x2ece <process_tapping+0xf8>
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2ece:	80 fd       	sbrc	r24, 0
    2ed0:	03 c0       	rjmp	.+6      	; 0x2ed8 <process_tapping+0x102>
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	86 27       	eor	r24, r22
    2ed6:	01 c0       	rjmp	.+2      	; 0x2eda <process_tapping+0x104>
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    2eda:	f8 2f       	mov	r31, r24
    2edc:	f1 70       	andi	r31, 0x01	; 1
    2ede:	ff 2e       	mov	r15, r31
    2ee0:	80 ff       	sbrs	r24, 0
    2ee2:	1c c0       	rjmp	.+56     	; 0x2f1c <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ee4:	80 91 74 01 	lds	r24, 0x0174
    2ee8:	20 91 75 01 	lds	r18, 0x0175
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2eec:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2eee:	82 17       	cp	r24, r18
    2ef0:	09 f4       	brne	.+2      	; 0x2ef4 <process_tapping+0x11e>
    2ef2:	28 c1       	rjmp	.+592    	; 0x3144 <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	38 9f       	mul	r19, r24
    2ef8:	f0 01       	movw	r30, r0
    2efa:	39 9f       	mul	r19, r25
    2efc:	f0 0d       	add	r31, r0
    2efe:	11 24       	eor	r1, r1
    2f00:	ea 58       	subi	r30, 0x8A	; 138
    2f02:	fe 4f       	sbci	r31, 0xFE	; 254
    2f04:	71 81       	ldd	r23, Z+1	; 0x01
    2f06:	57 13       	cpse	r21, r23
    2f08:	06 c0       	rjmp	.+12     	; 0x2f16 <process_tapping+0x140>
    2f0a:	70 81       	ld	r23, Z
    2f0c:	47 13       	cpse	r20, r23
    2f0e:	03 c0       	rjmp	.+6      	; 0x2f16 <process_tapping+0x140>
    2f10:	72 81       	ldd	r23, Z+2	; 0x02
    2f12:	67 13       	cpse	r22, r23
    2f14:	03 c0       	rjmp	.+6      	; 0x2f1c <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f16:	01 96       	adiw	r24, 0x01	; 1
    2f18:	87 70       	andi	r24, 0x07	; 7
    2f1a:	e9 cf       	rjmp	.-46     	; 0x2eee <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2f1c:	d6 2e       	mov	r13, r22
    2f1e:	66 23       	and	r22, r22
    2f20:	09 f4       	brne	.+2      	; 0x2f24 <process_tapping+0x14e>
    2f22:	36 c1       	rjmp	.+620    	; 0x3190 <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    2f24:	80 91 ab 01 	lds	r24, 0x01AB
    2f28:	81 60       	ori	r24, 0x01	; 1
    2f2a:	80 93 ab 01 	sts	0x01AB, r24
    2f2e:	53 c0       	rjmp	.+166    	; 0x2fd6 <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2f30:	e5 13       	cpse	r30, r21
    2f32:	08 c0       	rjmp	.+16     	; 0x2f44 <process_tapping+0x16e>
    2f34:	74 13       	cpse	r23, r20
    2f36:	06 c0       	rjmp	.+12     	; 0x2f44 <process_tapping+0x16e>
    2f38:	61 11       	cpse	r22, r1
    2f3a:	04 c0       	rjmp	.+8      	; 0x2f44 <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    2f3c:	d8 01       	movw	r26, r16
    2f3e:	15 96       	adiw	r26, 0x05	; 5
    2f40:	fc 93       	st	X, r31
    2f42:	ae c0       	rjmp	.+348    	; 0x30a0 <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2f44:	4d 87       	std	Y+13, r20	; 0x0d
    2f46:	5e 87       	std	Y+14, r21	; 0x0e
    2f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f4c:	6a 8b       	std	Y+18, r22	; 0x12
    2f4e:	0e 94 10 16 	call	0x2c20	; 0x2c20 <is_tap_key>
    2f52:	6a 89       	ldd	r22, Y+18	; 0x12
    2f54:	88 23       	and	r24, r24
    2f56:	29 f1       	breq	.+74     	; 0x2fa2 <process_tapping+0x1cc>
    2f58:	d6 2e       	mov	r13, r22
    2f5a:	66 23       	and	r22, r22
    2f5c:	11 f1       	breq	.+68     	; 0x2fa2 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    2f5e:	20 91 ab 01 	lds	r18, 0x01AB
    2f62:	82 2f       	mov	r24, r18
    2f64:	82 95       	swap	r24
    2f66:	8f 70       	andi	r24, 0x0F	; 15
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	02 97       	sbiw	r24, 0x02	; 2
    2f6c:	0c f4       	brge	.+2      	; 0x2f70 <process_tapping+0x19a>
    2f6e:	60 c0       	rjmp	.+192    	; 0x3030 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2f70:	80 91 a6 01 	lds	r24, 0x01A6
    2f74:	90 91 a7 01 	lds	r25, 0x01A7
    2f78:	98 87       	std	Y+8, r25	; 0x08
    2f7a:	8f 83       	std	Y+7, r24	; 0x07
    2f7c:	19 86       	std	Y+9, r1	; 0x09
    2f7e:	fb 86       	std	Y+11, r15	; 0x0b
    2f80:	ea 86       	std	Y+10, r14	; 0x0a
    2f82:	2c 87       	std	Y+12, r18	; 0x0c
    2f84:	ce 01       	movw	r24, r28
    2f86:	07 96       	adiw	r24, 0x07	; 7
    2f88:	51 c0       	rjmp	.+162    	; 0x302c <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2f8a:	e5 17       	cp	r30, r21
    2f8c:	31 f1       	breq	.+76     	; 0x2fda <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2f8e:	4d 87       	std	Y+13, r20	; 0x0d
    2f90:	5e 87       	std	Y+14, r21	; 0x0e
    2f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f96:	6a 8b       	std	Y+18, r22	; 0x12
    2f98:	0e 94 10 16 	call	0x2c20	; 0x2c20 <is_tap_key>
    2f9c:	6a 89       	ldd	r22, Y+18	; 0x12
    2f9e:	81 11       	cpse	r24, r1
    2fa0:	2e c0       	rjmp	.+92     	; 0x2ffe <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    2fa2:	c8 01       	movw	r24, r16
    2fa4:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <process_action>
    2fa8:	a4 c0       	rjmp	.+328    	; 0x30f2 <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2faa:	8f 2f       	mov	r24, r31
    2fac:	80 7f       	andi	r24, 0xF0	; 240
    2fae:	69 f7       	brne	.-38     	; 0x2f8a <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2fb0:	7e 2d       	mov	r23, r14
    2fb2:	f9 8a       	std	Y+17, r15	; 0x11
    2fb4:	e8 8a       	std	Y+16, r14	; 0x10
    2fb6:	89 89       	ldd	r24, Y+17	; 0x11
    2fb8:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <debug_event>
                process_action(&tapping_key);
    2fbc:	86 ea       	ldi	r24, 0xA6	; 166
    2fbe:	91 e0       	ldi	r25, 0x01	; 1
    2fc0:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <process_action>
                tapping_key = (keyrecord_t){};
    2fc4:	e6 ea       	ldi	r30, 0xA6	; 166
    2fc6:	f1 e0       	ldi	r31, 0x01	; 1
    2fc8:	86 e0       	ldi	r24, 0x06	; 6
    2fca:	df 01       	movw	r26, r30
    2fcc:	1d 92       	st	X+, r1
    2fce:	8a 95       	dec	r24
    2fd0:	e9 f7       	brne	.-6      	; 0x2fcc <process_tapping+0x1f6>
                debug_tapping_key();
    2fd2:	0e 94 75 16 	call	0x2cea	; 0x2cea <debug_tapping_key>
                return false;
    2fd6:	d1 2c       	mov	r13, r1
    2fd8:	db c0       	rjmp	.+438    	; 0x3190 <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2fda:	74 13       	cpse	r23, r20
    2fdc:	d8 cf       	rjmp	.-80     	; 0x2f8e <process_tapping+0x1b8>
    2fde:	61 11       	cpse	r22, r1
    2fe0:	d6 cf       	rjmp	.-84     	; 0x2f8e <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    2fe2:	d8 01       	movw	r26, r16
    2fe4:	15 96       	adiw	r26, 0x05	; 5
    2fe6:	fc 93       	st	X, r31
                    process_action(keyp);
    2fe8:	c8 01       	movw	r24, r16
    2fea:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <process_action>
                    tapping_key = (keyrecord_t){};
    2fee:	e6 ea       	ldi	r30, 0xA6	; 166
    2ff0:	f1 e0       	ldi	r31, 0x01	; 1
    2ff2:	86 e0       	ldi	r24, 0x06	; 6
    2ff4:	df 01       	movw	r26, r30
    2ff6:	1d 92       	st	X+, r1
    2ff8:	8a 95       	dec	r24
    2ffa:	e9 f7       	brne	.-6      	; 0x2ff6 <process_tapping+0x220>
                    return true;
    2ffc:	c9 c0       	rjmp	.+402    	; 0x3190 <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2ffe:	d6 2e       	mov	r13, r22
    3000:	66 23       	and	r22, r22
    3002:	79 f2       	breq	.-98     	; 0x2fa2 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    3004:	20 91 ab 01 	lds	r18, 0x01AB
    3008:	82 2f       	mov	r24, r18
    300a:	82 95       	swap	r24
    300c:	8f 70       	andi	r24, 0x0F	; 15
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	02 97       	sbiw	r24, 0x02	; 2
    3012:	74 f0       	brlt	.+28     	; 0x3030 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3014:	80 91 a6 01 	lds	r24, 0x01A6
    3018:	90 91 a7 01 	lds	r25, 0x01A7
    301c:	9a 83       	std	Y+2, r25	; 0x02
    301e:	89 83       	std	Y+1, r24	; 0x01
    3020:	1b 82       	std	Y+3, r1	; 0x03
    3022:	fd 82       	std	Y+5, r15	; 0x05
    3024:	ec 82       	std	Y+4, r14	; 0x04
    3026:	2e 83       	std	Y+6, r18	; 0x06
    3028:	ce 01       	movw	r24, r28
    302a:	01 96       	adiw	r24, 0x01	; 1
    302c:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    3030:	86 e0       	ldi	r24, 0x06	; 6
    3032:	f8 01       	movw	r30, r16
    3034:	a6 ea       	ldi	r26, 0xA6	; 166
    3036:	b1 e0       	ldi	r27, 0x01	; 1
    3038:	01 90       	ld	r0, Z+
    303a:	0d 92       	st	X+, r0
    303c:	8a 95       	dec	r24
    303e:	e1 f7       	brne	.-8      	; 0x3038 <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    3040:	0e 94 83 16 	call	0x2d06	; 0x2d06 <waiting_buffer_scan_tap>
    3044:	6f c0       	rjmp	.+222    	; 0x3124 <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3046:	e2 16       	cp	r14, r18
    3048:	f3 06       	cpc	r15, r19
    304a:	28 f0       	brcs	.+10     	; 0x3056 <process_tapping+0x280>
    304c:	c7 01       	movw	r24, r14
    304e:	82 1b       	sub	r24, r18
    3050:	93 0b       	sbc	r25, r19
    3052:	9c 01       	movw	r18, r24
    3054:	04 c0       	rjmp	.+8      	; 0x305e <process_tapping+0x288>
    3056:	20 95       	com	r18
    3058:	30 95       	com	r19
    305a:	2e 0d       	add	r18, r14
    305c:	3f 1d       	adc	r19, r15
    305e:	28 3c       	cpi	r18, 0xC8	; 200
    3060:	31 05       	cpc	r19, r1
    3062:	08 f0       	brcs	.+2      	; 0x3066 <process_tapping+0x290>
    3064:	52 c0       	rjmp	.+164    	; 0x310a <process_tapping+0x334>
            if (event.pressed) {
    3066:	d6 2e       	mov	r13, r22
    3068:	66 23       	and	r22, r22
    306a:	09 f4       	brne	.+2      	; 0x306e <process_tapping+0x298>
    306c:	9a cf       	rjmp	.-204    	; 0x2fa2 <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    306e:	e5 13       	cpse	r30, r21
    3070:	2c c0       	rjmp	.+88     	; 0x30ca <process_tapping+0x2f4>
    3072:	74 13       	cpse	r23, r20
    3074:	2a c0       	rjmp	.+84     	; 0x30ca <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    3076:	80 91 ab 01 	lds	r24, 0x01AB
    307a:	80 fd       	sbrc	r24, 0
    307c:	1d c0       	rjmp	.+58     	; 0x30b8 <process_tapping+0x2e2>
    307e:	98 2f       	mov	r25, r24
    3080:	92 95       	swap	r25
    3082:	9f 70       	andi	r25, 0x0F	; 15
    3084:	c9 f0       	breq	.+50     	; 0x30b8 <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    3086:	d8 01       	movw	r26, r16
    3088:	15 96       	adiw	r26, 0x05	; 5
    308a:	8c 93       	st	X, r24
    308c:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    308e:	9f 30       	cpi	r25, 0x0F	; 15
    3090:	39 f0       	breq	.+14     	; 0x30a0 <process_tapping+0x2ca>
    3092:	9f 5f       	subi	r25, 0xFF	; 255
    3094:	92 95       	swap	r25
    3096:	90 7f       	andi	r25, 0xF0	; 240
    3098:	8f 70       	andi	r24, 0x0F	; 15
    309a:	89 2b       	or	r24, r25
    309c:	15 96       	adiw	r26, 0x05	; 5
    309e:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    30a0:	c8 01       	movw	r24, r16
    30a2:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <process_action>
                        tapping_key = *keyp;
    30a6:	86 e0       	ldi	r24, 0x06	; 6
    30a8:	f8 01       	movw	r30, r16
    30aa:	a6 ea       	ldi	r26, 0xA6	; 166
    30ac:	b1 e0       	ldi	r27, 0x01	; 1
    30ae:	01 90       	ld	r0, Z+
    30b0:	0d 92       	st	X+, r0
    30b2:	8a 95       	dec	r24
    30b4:	e1 f7       	brne	.-8      	; 0x30ae <process_tapping+0x2d8>
    30b6:	36 c0       	rjmp	.+108    	; 0x3124 <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    30b8:	86 e0       	ldi	r24, 0x06	; 6
    30ba:	f8 01       	movw	r30, r16
    30bc:	a6 ea       	ldi	r26, 0xA6	; 166
    30be:	b1 e0       	ldi	r27, 0x01	; 1
    30c0:	01 90       	ld	r0, Z+
    30c2:	0d 92       	st	X+, r0
    30c4:	8a 95       	dec	r24
    30c6:	e1 f7       	brne	.-8      	; 0x30c0 <process_tapping+0x2ea>
                        return true;
    30c8:	63 c0       	rjmp	.+198    	; 0x3190 <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    30ca:	4d 87       	std	Y+13, r20	; 0x0d
    30cc:	5e 87       	std	Y+14, r21	; 0x0e
    30ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d2:	0e 94 10 16 	call	0x2c20	; 0x2c20 <is_tap_key>
    30d6:	88 23       	and	r24, r24
    30d8:	79 f0       	breq	.+30     	; 0x30f8 <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    30da:	86 e0       	ldi	r24, 0x06	; 6
    30dc:	f8 01       	movw	r30, r16
    30de:	a6 ea       	ldi	r26, 0xA6	; 166
    30e0:	b1 e0       	ldi	r27, 0x01	; 1
    30e2:	01 90       	ld	r0, Z+
    30e4:	0d 92       	st	X+, r0
    30e6:	8a 95       	dec	r24
    30e8:	e1 f7       	brne	.-8      	; 0x30e2 <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    30ea:	0e 94 83 16 	call	0x2d06	; 0x2d06 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    30ee:	0e 94 75 16 	call	0x2cea	; 0x2cea <debug_tapping_key>
                    return true;
    30f2:	dd 24       	eor	r13, r13
    30f4:	d3 94       	inc	r13
    30f6:	4c c0       	rjmp	.+152    	; 0x3190 <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    30f8:	80 91 ab 01 	lds	r24, 0x01AB
    30fc:	81 60       	ori	r24, 0x01	; 1
    30fe:	80 93 ab 01 	sts	0x01AB, r24
                    process_action(keyp);
    3102:	c8 01       	movw	r24, r16
    3104:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <process_action>
                    return true;
    3108:	43 c0       	rjmp	.+134    	; 0x3190 <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    310a:	7e 2d       	mov	r23, r14
    310c:	f9 8a       	std	Y+17, r15	; 0x11
    310e:	e8 8a       	std	Y+16, r14	; 0x10
    3110:	89 89       	ldd	r24, Y+17	; 0x11
    3112:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <debug_event>
            tapping_key = (keyrecord_t){};
    3116:	e6 ea       	ldi	r30, 0xA6	; 166
    3118:	f1 e0       	ldi	r31, 0x01	; 1
    311a:	86 e0       	ldi	r24, 0x06	; 6
    311c:	df 01       	movw	r26, r30
    311e:	1d 92       	st	X+, r1
    3120:	8a 95       	dec	r24
    3122:	e9 f7       	brne	.-6      	; 0x311e <process_tapping+0x348>
            debug_tapping_key();
    3124:	0e 94 75 16 	call	0x2cea	; 0x2cea <debug_tapping_key>
            return false;
    3128:	33 c0       	rjmp	.+102    	; 0x3190 <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    312a:	66 23       	and	r22, r22
    312c:	09 f4       	brne	.+2      	; 0x3130 <process_tapping+0x35a>
    312e:	39 cf       	rjmp	.-398    	; 0x2fa2 <process_tapping+0x1cc>
    3130:	4d 87       	std	Y+13, r20	; 0x0d
    3132:	5e 87       	std	Y+14, r21	; 0x0e
    3134:	8d 85       	ldd	r24, Y+13	; 0x0d
    3136:	9e 85       	ldd	r25, Y+14	; 0x0e
    3138:	0e 94 10 16 	call	0x2c20	; 0x2c20 <is_tap_key>
    313c:	88 23       	and	r24, r24
    313e:	09 f4       	brne	.+2      	; 0x3142 <process_tapping+0x36c>
    3140:	30 cf       	rjmp	.-416    	; 0x2fa2 <process_tapping+0x1cc>
    3142:	cb cf       	rjmp	.-106    	; 0x30da <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    3144:	4d 87       	std	Y+13, r20	; 0x0d
    3146:	5e 87       	std	Y+14, r21	; 0x0e
    3148:	8d 85       	ldd	r24, Y+13	; 0x0d
    314a:	9e 85       	ldd	r25, Y+14	; 0x0e
    314c:	0e 94 31 1b 	call	0x3662	; 0x3662 <layer_switch_get_action>
                    switch (action.kind.id) {
    3150:	29 2f       	mov	r18, r25
    3152:	22 95       	swap	r18
    3154:	2f 70       	andi	r18, 0x0F	; 15
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	22 30       	cpi	r18, 0x02	; 2
    315a:	31 05       	cpc	r19, r1
    315c:	2c f4       	brge	.+10     	; 0x3168 <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    315e:	9f 70       	andi	r25, 0x0F	; 15
    3160:	41 f0       	breq	.+16     	; 0x3172 <process_tapping+0x39c>
    3162:	81 11       	cpse	r24, r1
    3164:	06 c0       	rjmp	.+12     	; 0x3172 <process_tapping+0x39c>
    3166:	0c c0       	rjmp	.+24     	; 0x3180 <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    3168:	24 30       	cpi	r18, 0x04	; 4
    316a:	31 05       	cpc	r19, r1
    316c:	2c f4       	brge	.+10     	; 0x3178 <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    316e:	9f 70       	andi	r25, 0x0F	; 15
    3170:	49 f4       	brne	.+18     	; 0x3184 <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    3172:	80 5e       	subi	r24, 0xE0	; 224
    3174:	88 30       	cpi	r24, 0x08	; 8
    3176:	20 f0       	brcs	.+8      	; 0x3180 <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    3178:	c8 01       	movw	r24, r16
    317a:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <process_action>
                    return true;
    317e:	cf 2c       	mov	r12, r15
    3180:	dc 2c       	mov	r13, r12
    3182:	06 c0       	rjmp	.+12     	; 0x3190 <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3184:	d8 01       	movw	r26, r16
    3186:	15 96       	adiw	r26, 0x05	; 5
    3188:	9c 91       	ld	r25, X
    318a:	90 7f       	andi	r25, 0xF0	; 240
    318c:	91 f7       	brne	.-28     	; 0x3172 <process_tapping+0x39c>
    318e:	f8 cf       	rjmp	.-16     	; 0x3180 <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    3190:	8d 2d       	mov	r24, r13
    3192:	62 96       	adiw	r28, 0x12	; 18
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	de bf       	out	0x3e, r29	; 62
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	cd bf       	out	0x3d, r28	; 61
    319e:	df 91       	pop	r29
    31a0:	cf 91       	pop	r28
    31a2:	1f 91       	pop	r17
    31a4:	0f 91       	pop	r16
    31a6:	ff 90       	pop	r15
    31a8:	ef 90       	pop	r14
    31aa:	df 90       	pop	r13
    31ac:	cf 90       	pop	r12
    31ae:	08 95       	ret

000031b0 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    31b0:	1f 93       	push	r17
    31b2:	cf 93       	push	r28
    31b4:	df 93       	push	r29
    31b6:	cd b7       	in	r28, 0x3d	; 61
    31b8:	de b7       	in	r29, 0x3e	; 62
    31ba:	2c 97       	sbiw	r28, 0x0c	; 12
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	f8 94       	cli
    31c0:	de bf       	out	0x3e, r29	; 62
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	cd bf       	out	0x3d, r28	; 61
    31c6:	4f 83       	std	Y+7, r20	; 0x07
    31c8:	58 87       	std	Y+8, r21	; 0x08
    31ca:	69 87       	std	Y+9, r22	; 0x09
    31cc:	7a 87       	std	Y+10, r23	; 0x0a
    31ce:	8b 87       	std	Y+11, r24	; 0x0b
    31d0:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    31d2:	ce 01       	movw	r24, r28
    31d4:	07 96       	adiw	r24, 0x07	; 7
    31d6:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <process_tapping>
    31da:	88 23       	and	r24, r24
    31dc:	c1 f0       	breq	.+48     	; 0x320e <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    31de:	2f 81       	ldd	r18, Y+7	; 0x07
    31e0:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    31e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    31e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    31e6:	89 2b       	or	r24, r25
    31e8:	31 f0       	breq	.+12     	; 0x31f6 <action_tapping_process+0x46>
    31ea:	3f 3f       	cpi	r19, 0xFF	; 255
    31ec:	11 f0       	breq	.+4      	; 0x31f2 <action_tapping_process+0x42>
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	03 c0       	rjmp	.+6      	; 0x31f8 <action_tapping_process+0x48>
    31f2:	2f 3f       	cpi	r18, 0xFF	; 255
    31f4:	e1 f7       	brne	.-8      	; 0x31ee <action_tapping_process+0x3e>
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	81 11       	cpse	r24, r1
    31fa:	47 c0       	rjmp	.+142    	; 0x328a <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    31fc:	4f 81       	ldd	r20, Y+7	; 0x07
    31fe:	58 85       	ldd	r21, Y+8	; 0x08
    3200:	69 85       	ldd	r22, Y+9	; 0x09
    3202:	7a 85       	ldd	r23, Y+10	; 0x0a
    3204:	8b 85       	ldd	r24, Y+11	; 0x0b
    3206:	9c 85       	ldd	r25, Y+12	; 0x0c
    3208:	0e 94 44 16 	call	0x2c88	; 0x2c88 <debug_record>
    320c:	3e c0       	rjmp	.+124    	; 0x328a <action_tapping_process+0xda>
    320e:	86 e0       	ldi	r24, 0x06	; 6
    3210:	fe 01       	movw	r30, r28
    3212:	37 96       	adiw	r30, 0x07	; 7
    3214:	de 01       	movw	r26, r28
    3216:	11 96       	adiw	r26, 0x01	; 1
    3218:	01 90       	ld	r0, Z+
    321a:	0d 92       	st	X+, r0
    321c:	8a 95       	dec	r24
    321e:	e1 f7       	brne	.-8      	; 0x3218 <action_tapping_process+0x68>
    3220:	ff 81       	ldd	r31, Y+7	; 0x07
    3222:	e8 85       	ldd	r30, Y+8	; 0x08
    3224:	4a 85       	ldd	r20, Y+10	; 0x0a
    3226:	5b 85       	ldd	r21, Y+11	; 0x0b
    3228:	41 15       	cp	r20, r1
    322a:	51 05       	cpc	r21, r1
    322c:	31 f0       	breq	.+12     	; 0x323a <action_tapping_process+0x8a>
    322e:	ef 3f       	cpi	r30, 0xFF	; 255
    3230:	31 f4       	brne	.+12     	; 0x323e <action_tapping_process+0x8e>
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	ff 3f       	cpi	r31, 0xFF	; 255
    3236:	19 f4       	brne	.+6      	; 0x323e <action_tapping_process+0x8e>
    3238:	03 c0       	rjmp	.+6      	; 0x3240 <action_tapping_process+0x90>
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	01 c0       	rjmp	.+2      	; 0x3240 <action_tapping_process+0x90>
    323e:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    3240:	80 fd       	sbrc	r24, 0
    3242:	23 c0       	rjmp	.+70     	; 0x328a <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3244:	20 91 75 01 	lds	r18, 0x0175
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	c9 01       	movw	r24, r18
    324c:	01 96       	adiw	r24, 0x01	; 1
    324e:	87 70       	andi	r24, 0x07	; 7
    3250:	99 27       	eor	r25, r25
    3252:	60 91 74 01 	lds	r22, 0x0174
    3256:	70 e0       	ldi	r23, 0x00	; 0
    3258:	86 17       	cp	r24, r22
    325a:	97 07       	cpc	r25, r23
    325c:	f1 f1       	breq	.+124    	; 0x32da <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    325e:	f9 83       	std	Y+1, r31	; 0x01
    3260:	ea 83       	std	Y+2, r30	; 0x02
    3262:	5d 83       	std	Y+5, r21	; 0x05
    3264:	4c 83       	std	Y+4, r20	; 0x04
    3266:	96 e0       	ldi	r25, 0x06	; 6
    3268:	92 9f       	mul	r25, r18
    326a:	d0 01       	movw	r26, r0
    326c:	93 9f       	mul	r25, r19
    326e:	b0 0d       	add	r27, r0
    3270:	11 24       	eor	r1, r1
    3272:	aa 58       	subi	r26, 0x8A	; 138
    3274:	be 4f       	sbci	r27, 0xFE	; 254
    3276:	fe 01       	movw	r30, r28
    3278:	31 96       	adiw	r30, 0x01	; 1
    327a:	01 90       	ld	r0, Z+
    327c:	0d 92       	st	X+, r0
    327e:	9a 95       	dec	r25
    3280:	e1 f7       	brne	.-8      	; 0x327a <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3282:	80 93 75 01 	sts	0x0175, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3286:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    328a:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    328c:	80 91 74 01 	lds	r24, 0x0174
    3290:	90 91 75 01 	lds	r25, 0x0175
    3294:	89 17       	cp	r24, r25
    3296:	79 f1       	breq	.+94     	; 0x32f6 <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3298:	18 9f       	mul	r17, r24
    329a:	c0 01       	movw	r24, r0
    329c:	11 24       	eor	r1, r1
    329e:	8a 58       	subi	r24, 0x8A	; 138
    32a0:	9e 4f       	sbci	r25, 0xFE	; 254
    32a2:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <process_tapping>
    32a6:	88 23       	and	r24, r24
    32a8:	31 f1       	breq	.+76     	; 0x32f6 <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    32aa:	e0 91 74 01 	lds	r30, 0x0174
    32ae:	1e 9f       	mul	r17, r30
    32b0:	f0 01       	movw	r30, r0
    32b2:	11 24       	eor	r1, r1
    32b4:	ea 58       	subi	r30, 0x8A	; 138
    32b6:	fe 4f       	sbci	r31, 0xFE	; 254
    32b8:	40 81       	ld	r20, Z
    32ba:	51 81       	ldd	r21, Z+1	; 0x01
    32bc:	62 81       	ldd	r22, Z+2	; 0x02
    32be:	73 81       	ldd	r23, Z+3	; 0x03
    32c0:	84 81       	ldd	r24, Z+4	; 0x04
    32c2:	95 81       	ldd	r25, Z+5	; 0x05
    32c4:	0e 94 44 16 	call	0x2c88	; 0x2c88 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    32c8:	80 91 74 01 	lds	r24, 0x0174
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	01 96       	adiw	r24, 0x01	; 1
    32d0:	87 70       	andi	r24, 0x07	; 7
    32d2:	99 27       	eor	r25, r25
    32d4:	80 93 74 01 	sts	0x0174, r24
    32d8:	d9 cf       	rjmp	.-78     	; 0x328c <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    32da:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    32de:	10 92 75 01 	sts	0x0175, r1
    waiting_buffer_tail = 0;
    32e2:	10 92 74 01 	sts	0x0174, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    32e6:	e6 ea       	ldi	r30, 0xA6	; 166
    32e8:	f1 e0       	ldi	r31, 0x01	; 1
    32ea:	86 e0       	ldi	r24, 0x06	; 6
    32ec:	df 01       	movw	r26, r30
    32ee:	1d 92       	st	X+, r1
    32f0:	8a 95       	dec	r24
    32f2:	e9 f7       	brne	.-6      	; 0x32ee <action_tapping_process+0x13e>
    32f4:	ca cf       	rjmp	.-108    	; 0x328a <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    32f6:	2c 96       	adiw	r28, 0x0c	; 12
    32f8:	0f b6       	in	r0, 0x3f	; 63
    32fa:	f8 94       	cli
    32fc:	de bf       	out	0x3e, r29	; 62
    32fe:	0f be       	out	0x3f, r0	; 63
    3300:	cd bf       	out	0x3d, r28	; 61
    3302:	df 91       	pop	r29
    3304:	cf 91       	pop	r28
    3306:	1f 91       	pop	r17
    3308:	08 95       	ret

0000330a <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    330a:	ef 92       	push	r14
    330c:	ff 92       	push	r15
    330e:	0f 93       	push	r16
    3310:	1f 93       	push	r17
    3312:	cf 93       	push	r28
    3314:	df 93       	push	r29
    3316:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    3318:	00 97       	sbiw	r24, 0x00	; 0
    331a:	09 f4       	brne	.+2      	; 0x331e <action_macro_play+0x14>
    331c:	6d c0       	rjmp	.+218    	; 0x33f8 <action_macro_play+0xee>
    331e:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3320:	ee 24       	eor	r14, r14
    3322:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3324:	ef 01       	movw	r28, r30
    3326:	21 96       	adiw	r28, 0x01	; 1
    3328:	84 91       	lpm	r24, Z
    332a:	84 37       	cpi	r24, 0x74	; 116
    332c:	40 f4       	brcc	.+16     	; 0x333e <action_macro_play+0x34>
    332e:	84 30       	cpi	r24, 0x04	; 4
    3330:	08 f0       	brcs	.+2      	; 0x3334 <action_macro_play+0x2a>
    3332:	53 c0       	rjmp	.+166    	; 0x33da <action_macro_play+0xd0>
    3334:	81 30       	cpi	r24, 0x01	; 1
    3336:	81 f0       	breq	.+32     	; 0x3358 <action_macro_play+0x4e>
    3338:	82 30       	cpi	r24, 0x02	; 2
    333a:	21 f1       	breq	.+72     	; 0x3384 <action_macro_play+0x7a>
    333c:	5d c0       	rjmp	.+186    	; 0x33f8 <action_macro_play+0xee>
    333e:	85 37       	cpi	r24, 0x75	; 117
    3340:	09 f4       	brne	.+2      	; 0x3344 <action_macro_play+0x3a>
    3342:	45 c0       	rjmp	.+138    	; 0x33ce <action_macro_play+0xc4>
    3344:	b0 f1       	brcs	.+108    	; 0x33b2 <action_macro_play+0xa8>
    3346:	9c e7       	ldi	r25, 0x7C	; 124
    3348:	98 0f       	add	r25, r24
    334a:	90 37       	cpi	r25, 0x70	; 112
    334c:	08 f0       	brcs	.+2      	; 0x3350 <action_macro_play+0x46>
    334e:	54 c0       	rjmp	.+168    	; 0x33f8 <action_macro_play+0xee>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3350:	8f 77       	andi	r24, 0x7F	; 127
    3352:	0e 94 97 12 	call	0x252e	; 0x252e <unregister_code>
                break;
    3356:	43 c0       	rjmp	.+134    	; 0x33de <action_macro_play+0xd4>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    3358:	8f 01       	movw	r16, r30
    335a:	0e 5f       	subi	r16, 0xFE	; 254
    335c:	1f 4f       	sbci	r17, 0xFF	; 255
    335e:	fe 01       	movw	r30, r28
    3360:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3362:	90 e2       	ldi	r25, 0x20	; 32
    3364:	98 0f       	add	r25, r24
    3366:	98 30       	cpi	r25, 0x08	; 8
    3368:	50 f4       	brcc	.+20     	; 0x337e <action_macro_play+0x74>
                    add_weak_mods(MOD_BIT(macro));
    336a:	87 70       	andi	r24, 0x07	; 7
    336c:	fe 2d       	mov	r31, r14
    336e:	01 c0       	rjmp	.+2      	; 0x3372 <action_macro_play+0x68>
    3370:	ff 0f       	add	r31, r31
    3372:	8a 95       	dec	r24
    3374:	ea f7       	brpl	.-6      	; 0x3370 <action_macro_play+0x66>
    3376:	8f 2f       	mov	r24, r31
    3378:	0e 94 1e 1c 	call	0x383c	; 0x383c <add_weak_mods>
    337c:	15 c0       	rjmp	.+42     	; 0x33a8 <action_macro_play+0x9e>
                } else {
                    register_code(macro);
    337e:	0e 94 cf 11 	call	0x239e	; 0x239e <register_code>
    3382:	12 c0       	rjmp	.+36     	; 0x33a8 <action_macro_play+0x9e>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    3384:	8f 01       	movw	r16, r30
    3386:	0e 5f       	subi	r16, 0xFE	; 254
    3388:	1f 4f       	sbci	r17, 0xFF	; 255
    338a:	fe 01       	movw	r30, r28
    338c:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    338e:	90 e2       	ldi	r25, 0x20	; 32
    3390:	98 0f       	add	r25, r24
    3392:	98 30       	cpi	r25, 0x08	; 8
    3394:	58 f4       	brcc	.+22     	; 0x33ac <action_macro_play+0xa2>
                    del_weak_mods(MOD_BIT(macro));
    3396:	87 70       	andi	r24, 0x07	; 7
    3398:	fe 2d       	mov	r31, r14
    339a:	01 c0       	rjmp	.+2      	; 0x339e <action_macro_play+0x94>
    339c:	ff 0f       	add	r31, r31
    339e:	8a 95       	dec	r24
    33a0:	ea f7       	brpl	.-6      	; 0x339c <action_macro_play+0x92>
    33a2:	8f 2f       	mov	r24, r31
    33a4:	0e 94 24 1c 	call	0x3848	; 0x3848 <del_weak_mods>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    33a8:	e8 01       	movw	r28, r16
    33aa:	19 c0       	rjmp	.+50     	; 0x33de <action_macro_play+0xd4>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                } else {
                    unregister_code(macro);
    33ac:	0e 94 97 12 	call	0x252e	; 0x252e <unregister_code>
    33b0:	fb cf       	rjmp	.-10     	; 0x33a8 <action_macro_play+0x9e>
                }
                break;
            case WAIT:
                MACRO_READ();
    33b2:	cf 01       	movw	r24, r30
    33b4:	02 96       	adiw	r24, 0x02	; 2
    33b6:	fe 01       	movw	r30, r28
    33b8:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    33ba:	cc 23       	and	r28, r28
    33bc:	61 f0       	breq	.+24     	; 0x33d6 <action_macro_play+0xcc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    33be:	ef e9       	ldi	r30, 0x9F	; 159
    33c0:	ff e0       	ldi	r31, 0x0F	; 15
    33c2:	31 97       	sbiw	r30, 0x01	; 1
    33c4:	f1 f7       	brne	.-4      	; 0x33c2 <action_macro_play+0xb8>
    33c6:	00 c0       	rjmp	.+0      	; 0x33c8 <action_macro_play+0xbe>
    33c8:	00 00       	nop
    33ca:	c1 50       	subi	r28, 0x01	; 1
    33cc:	f6 cf       	rjmp	.-20     	; 0x33ba <action_macro_play+0xb0>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    33ce:	cf 01       	movw	r24, r30
    33d0:	02 96       	adiw	r24, 0x02	; 2
    33d2:	fe 01       	movw	r30, r28
    33d4:	f4 90       	lpm	r15, Z
    33d6:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    33d8:	02 c0       	rjmp	.+4      	; 0x33de <action_macro_play+0xd4>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    33da:	0e 94 cf 11 	call	0x239e	; 0x239e <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    33de:	8f 2d       	mov	r24, r15
    33e0:	88 23       	and	r24, r24
    33e2:	41 f0       	breq	.+16     	; 0x33f4 <action_macro_play+0xea>
    33e4:	ef e9       	ldi	r30, 0x9F	; 159
    33e6:	ff e0       	ldi	r31, 0x0F	; 15
    33e8:	31 97       	sbiw	r30, 0x01	; 1
    33ea:	f1 f7       	brne	.-4      	; 0x33e8 <action_macro_play+0xde>
    33ec:	00 c0       	rjmp	.+0      	; 0x33ee <action_macro_play+0xe4>
    33ee:	00 00       	nop
    33f0:	81 50       	subi	r24, 0x01	; 1
    33f2:	f6 cf       	rjmp	.-20     	; 0x33e0 <action_macro_play+0xd6>
    33f4:	fe 01       	movw	r30, r28
    33f6:	96 cf       	rjmp	.-212    	; 0x3324 <action_macro_play+0x1a>
    }
}
    33f8:	df 91       	pop	r29
    33fa:	cf 91       	pop	r28
    33fc:	1f 91       	pop	r17
    33fe:	0f 91       	pop	r16
    3400:	ff 90       	pop	r15
    3402:	ef 90       	pop	r14
    3404:	08 95       	ret

00003406 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    3406:	08 95       	ret

00003408 <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3408:	60 93 b0 01 	sts	0x01B0, r22
    340c:	70 93 b1 01 	sts	0x01B1, r23
    3410:	80 93 b2 01 	sts	0x01B2, r24
    3414:	90 93 b3 01 	sts	0x01B3, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3418:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <clear_keyboard_but_mods>

0000341c <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    341c:	0f 93       	push	r16
    341e:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    3420:	00 91 b0 01 	lds	r16, 0x01B0
    3424:	10 91 b1 01 	lds	r17, 0x01B1
    3428:	20 91 b2 01 	lds	r18, 0x01B2
    342c:	30 91 b3 01 	lds	r19, 0x01B3
    3430:	06 2b       	or	r16, r22
    3432:	17 2b       	or	r17, r23
    3434:	28 2b       	or	r18, r24
    3436:	39 2b       	or	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3438:	00 93 b0 01 	sts	0x01B0, r16
    343c:	10 93 b1 01 	sts	0x01B1, r17
    3440:	20 93 b2 01 	sts	0x01B2, r18
    3444:	30 93 b3 01 	sts	0x01B3, r19

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    3448:	1f 91       	pop	r17
    344a:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    344c:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <clear_keyboard_but_mods>

00003450 <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    3450:	0f 93       	push	r16
    3452:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    3454:	00 91 b0 01 	lds	r16, 0x01B0
    3458:	10 91 b1 01 	lds	r17, 0x01B1
    345c:	20 91 b2 01 	lds	r18, 0x01B2
    3460:	30 91 b3 01 	lds	r19, 0x01B3
    3464:	06 23       	and	r16, r22
    3466:	17 23       	and	r17, r23
    3468:	28 23       	and	r18, r24
    346a:	39 23       	and	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    346c:	00 93 b0 01 	sts	0x01B0, r16
    3470:	10 93 b1 01 	sts	0x01B1, r17
    3474:	20 93 b2 01 	sts	0x01B2, r18
    3478:	30 93 b3 01 	sts	0x01B3, r19
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    347c:	1f 91       	pop	r17
    347e:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3480:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <clear_keyboard_but_mods>

00003484 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    3484:	0f 93       	push	r16
    3486:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3488:	00 91 b0 01 	lds	r16, 0x01B0
    348c:	10 91 b1 01 	lds	r17, 0x01B1
    3490:	20 91 b2 01 	lds	r18, 0x01B2
    3494:	30 91 b3 01 	lds	r19, 0x01B3
    3498:	06 27       	eor	r16, r22
    349a:	17 27       	eor	r17, r23
    349c:	28 27       	eor	r18, r24
    349e:	39 27       	eor	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    34a0:	00 93 b0 01 	sts	0x01B0, r16
    34a4:	10 93 b1 01 	sts	0x01B1, r17
    34a8:	20 93 b2 01 	sts	0x01B2, r18
    34ac:	30 93 b3 01 	sts	0x01B3, r19
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    34b0:	1f 91       	pop	r17
    34b2:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    34b4:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <clear_keyboard_but_mods>

000034b8 <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    34b8:	10 92 ac 01 	sts	0x01AC, r1
    34bc:	10 92 ad 01 	sts	0x01AD, r1
    34c0:	10 92 ae 01 	sts	0x01AE, r1
    34c4:	10 92 af 01 	sts	0x01AF, r1
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    34c8:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <clear_keyboard_but_mods>

000034cc <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    34cc:	41 e0       	ldi	r20, 0x01	; 1
    34ce:	50 e0       	ldi	r21, 0x00	; 0
    34d0:	60 e0       	ldi	r22, 0x00	; 0
    34d2:	70 e0       	ldi	r23, 0x00	; 0
    34d4:	04 c0       	rjmp	.+8      	; 0x34de <layer_move+0x12>
    34d6:	44 0f       	add	r20, r20
    34d8:	55 1f       	adc	r21, r21
    34da:	66 1f       	adc	r22, r22
    34dc:	77 1f       	adc	r23, r23
    34de:	8a 95       	dec	r24
    34e0:	d2 f7       	brpl	.-12     	; 0x34d6 <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    34e2:	40 93 ac 01 	sts	0x01AC, r20
    34e6:	50 93 ad 01 	sts	0x01AD, r21
    34ea:	60 93 ae 01 	sts	0x01AE, r22
    34ee:	70 93 af 01 	sts	0x01AF, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    34f2:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <clear_keyboard_but_mods>

000034f6 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    34f6:	41 e0       	ldi	r20, 0x01	; 1
    34f8:	50 e0       	ldi	r21, 0x00	; 0
    34fa:	60 e0       	ldi	r22, 0x00	; 0
    34fc:	70 e0       	ldi	r23, 0x00	; 0
    34fe:	04 c0       	rjmp	.+8      	; 0x3508 <layer_on+0x12>
    3500:	44 0f       	add	r20, r20
    3502:	55 1f       	adc	r21, r21
    3504:	66 1f       	adc	r22, r22
    3506:	77 1f       	adc	r23, r23
    3508:	8a 95       	dec	r24
    350a:	d2 f7       	brpl	.-12     	; 0x3500 <layer_on+0xa>
    350c:	80 91 ac 01 	lds	r24, 0x01AC
    3510:	90 91 ad 01 	lds	r25, 0x01AD
    3514:	a0 91 ae 01 	lds	r26, 0x01AE
    3518:	b0 91 af 01 	lds	r27, 0x01AF
    351c:	84 2b       	or	r24, r20
    351e:	95 2b       	or	r25, r21
    3520:	a6 2b       	or	r26, r22
    3522:	b7 2b       	or	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3524:	80 93 ac 01 	sts	0x01AC, r24
    3528:	90 93 ad 01 	sts	0x01AD, r25
    352c:	a0 93 ae 01 	sts	0x01AE, r26
    3530:	b0 93 af 01 	sts	0x01AF, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3534:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <clear_keyboard_but_mods>

00003538 <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3538:	41 e0       	ldi	r20, 0x01	; 1
    353a:	50 e0       	ldi	r21, 0x00	; 0
    353c:	60 e0       	ldi	r22, 0x00	; 0
    353e:	70 e0       	ldi	r23, 0x00	; 0
    3540:	04 c0       	rjmp	.+8      	; 0x354a <layer_off+0x12>
    3542:	44 0f       	add	r20, r20
    3544:	55 1f       	adc	r21, r21
    3546:	66 1f       	adc	r22, r22
    3548:	77 1f       	adc	r23, r23
    354a:	8a 95       	dec	r24
    354c:	d2 f7       	brpl	.-12     	; 0x3542 <layer_off+0xa>
    354e:	40 95       	com	r20
    3550:	50 95       	com	r21
    3552:	60 95       	com	r22
    3554:	70 95       	com	r23
    3556:	80 91 ac 01 	lds	r24, 0x01AC
    355a:	90 91 ad 01 	lds	r25, 0x01AD
    355e:	a0 91 ae 01 	lds	r26, 0x01AE
    3562:	b0 91 af 01 	lds	r27, 0x01AF
    3566:	84 23       	and	r24, r20
    3568:	95 23       	and	r25, r21
    356a:	a6 23       	and	r26, r22
    356c:	b7 23       	and	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    356e:	80 93 ac 01 	sts	0x01AC, r24
    3572:	90 93 ad 01 	sts	0x01AD, r25
    3576:	a0 93 ae 01 	sts	0x01AE, r26
    357a:	b0 93 af 01 	sts	0x01AF, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    357e:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <clear_keyboard_but_mods>

00003582 <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    3582:	41 e0       	ldi	r20, 0x01	; 1
    3584:	50 e0       	ldi	r21, 0x00	; 0
    3586:	60 e0       	ldi	r22, 0x00	; 0
    3588:	70 e0       	ldi	r23, 0x00	; 0
    358a:	04 c0       	rjmp	.+8      	; 0x3594 <layer_invert+0x12>
    358c:	44 0f       	add	r20, r20
    358e:	55 1f       	adc	r21, r21
    3590:	66 1f       	adc	r22, r22
    3592:	77 1f       	adc	r23, r23
    3594:	8a 95       	dec	r24
    3596:	d2 f7       	brpl	.-12     	; 0x358c <layer_invert+0xa>
    3598:	80 91 ac 01 	lds	r24, 0x01AC
    359c:	90 91 ad 01 	lds	r25, 0x01AD
    35a0:	a0 91 ae 01 	lds	r26, 0x01AE
    35a4:	b0 91 af 01 	lds	r27, 0x01AF
    35a8:	84 27       	eor	r24, r20
    35aa:	95 27       	eor	r25, r21
    35ac:	a6 27       	eor	r26, r22
    35ae:	b7 27       	eor	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    35b0:	80 93 ac 01 	sts	0x01AC, r24
    35b4:	90 93 ad 01 	sts	0x01AD, r25
    35b8:	a0 93 ae 01 	sts	0x01AE, r26
    35bc:	b0 93 af 01 	sts	0x01AF, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    35c0:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <clear_keyboard_but_mods>

000035c4 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    35c4:	0f 93       	push	r16
    35c6:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    35c8:	00 91 ac 01 	lds	r16, 0x01AC
    35cc:	10 91 ad 01 	lds	r17, 0x01AD
    35d0:	20 91 ae 01 	lds	r18, 0x01AE
    35d4:	30 91 af 01 	lds	r19, 0x01AF
    35d8:	06 2b       	or	r16, r22
    35da:	17 2b       	or	r17, r23
    35dc:	28 2b       	or	r18, r24
    35de:	39 2b       	or	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    35e0:	00 93 ac 01 	sts	0x01AC, r16
    35e4:	10 93 ad 01 	sts	0x01AD, r17
    35e8:	20 93 ae 01 	sts	0x01AE, r18
    35ec:	30 93 af 01 	sts	0x01AF, r19
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    35f0:	1f 91       	pop	r17
    35f2:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    35f4:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <clear_keyboard_but_mods>

000035f8 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    35f8:	0f 93       	push	r16
    35fa:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    35fc:	00 91 ac 01 	lds	r16, 0x01AC
    3600:	10 91 ad 01 	lds	r17, 0x01AD
    3604:	20 91 ae 01 	lds	r18, 0x01AE
    3608:	30 91 af 01 	lds	r19, 0x01AF
    360c:	06 23       	and	r16, r22
    360e:	17 23       	and	r17, r23
    3610:	28 23       	and	r18, r24
    3612:	39 23       	and	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3614:	00 93 ac 01 	sts	0x01AC, r16
    3618:	10 93 ad 01 	sts	0x01AD, r17
    361c:	20 93 ae 01 	sts	0x01AE, r18
    3620:	30 93 af 01 	sts	0x01AF, r19
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    3624:	1f 91       	pop	r17
    3626:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3628:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <clear_keyboard_but_mods>

0000362c <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    362c:	0f 93       	push	r16
    362e:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3630:	00 91 ac 01 	lds	r16, 0x01AC
    3634:	10 91 ad 01 	lds	r17, 0x01AD
    3638:	20 91 ae 01 	lds	r18, 0x01AE
    363c:	30 91 af 01 	lds	r19, 0x01AF
    3640:	06 27       	eor	r16, r22
    3642:	17 27       	eor	r17, r23
    3644:	28 27       	eor	r18, r24
    3646:	39 27       	eor	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3648:	00 93 ac 01 	sts	0x01AC, r16
    364c:	10 93 ad 01 	sts	0x01AD, r17
    3650:	20 93 ae 01 	sts	0x01AE, r18
    3654:	30 93 af 01 	sts	0x01AF, r19
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    3658:	1f 91       	pop	r17
    365a:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    365c:	0c 94 fa 15 	jmp	0x2bf4	; 0x2bf4 <clear_keyboard_but_mods>

00003660 <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    3660:	08 95       	ret

00003662 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    3662:	cf 92       	push	r12
    3664:	df 92       	push	r13
    3666:	ef 92       	push	r14
    3668:	ff 92       	push	r15
    366a:	0f 93       	push	r16
    366c:	1f 93       	push	r17
    366e:	cf 93       	push	r28
    3670:	df 93       	push	r29
    3672:	ec 01       	movw	r28, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    3674:	c0 90 b0 01 	lds	r12, 0x01B0
    3678:	d0 90 b1 01 	lds	r13, 0x01B1
    367c:	e0 90 b2 01 	lds	r14, 0x01B2
    3680:	f0 90 b3 01 	lds	r15, 0x01B3
    3684:	80 91 ac 01 	lds	r24, 0x01AC
    3688:	90 91 ad 01 	lds	r25, 0x01AD
    368c:	a0 91 ae 01 	lds	r26, 0x01AE
    3690:	b0 91 af 01 	lds	r27, 0x01AF
    3694:	c8 2a       	or	r12, r24
    3696:	d9 2a       	or	r13, r25
    3698:	ea 2a       	or	r14, r26
    369a:	fb 2a       	or	r15, r27
    369c:	0f e1       	ldi	r16, 0x1F	; 31
    369e:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    36a0:	b7 01       	movw	r22, r14
    36a2:	a6 01       	movw	r20, r12
    36a4:	00 2e       	mov	r0, r16
    36a6:	04 c0       	rjmp	.+8      	; 0x36b0 <layer_switch_get_action+0x4e>
    36a8:	76 95       	lsr	r23
    36aa:	67 95       	ror	r22
    36ac:	57 95       	ror	r21
    36ae:	47 95       	ror	r20
    36b0:	0a 94       	dec	r0
    36b2:	d2 f7       	brpl	.-12     	; 0x36a8 <layer_switch_get_action+0x46>
    36b4:	40 ff       	sbrs	r20, 0
    36b6:	07 c0       	rjmp	.+14     	; 0x36c6 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    36b8:	be 01       	movw	r22, r28
    36ba:	80 2f       	mov	r24, r16
    36bc:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    36c0:	81 30       	cpi	r24, 0x01	; 1
    36c2:	91 05       	cpc	r25, r1
    36c4:	39 f4       	brne	.+14     	; 0x36d4 <layer_switch_get_action+0x72>
    36c6:	01 50       	subi	r16, 0x01	; 1
    36c8:	11 09       	sbc	r17, r1
    36ca:	50 f7       	brcc	.-44     	; 0x36a0 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    36cc:	be 01       	movw	r22, r28
    36ce:	80 e0       	ldi	r24, 0x00	; 0
    36d0:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    36d4:	df 91       	pop	r29
    36d6:	cf 91       	pop	r28
    36d8:	1f 91       	pop	r17
    36da:	0f 91       	pop	r16
    36dc:	ff 90       	pop	r15
    36de:	ef 90       	pop	r14
    36e0:	df 90       	pop	r13
    36e2:	cf 90       	pop	r12
    36e4:	08 95       	ret

000036e6 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    36e6:	90 91 0c 01 	lds	r25, 0x010C
    36ea:	99 23       	and	r25, r25
    36ec:	41 f1       	breq	.+80     	; 0x373e <add_key+0x58>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    36ee:	98 2f       	mov	r25, r24
    36f0:	96 95       	lsr	r25
    36f2:	96 95       	lsr	r25
    36f4:	96 95       	lsr	r25
    36f6:	9f 30       	cpi	r25, 0x0F	; 15
    36f8:	88 f4       	brcc	.+34     	; 0x371c <add_key+0x36>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    36fa:	e0 91 0d 01 	lds	r30, 0x010D
    36fe:	f0 91 0e 01 	lds	r31, 0x010E
    3702:	e9 0f       	add	r30, r25
    3704:	f1 1d       	adc	r31, r1
    3706:	87 70       	andi	r24, 0x07	; 7
    3708:	21 e0       	ldi	r18, 0x01	; 1
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	01 c0       	rjmp	.+2      	; 0x3710 <add_key+0x2a>
    370e:	22 0f       	add	r18, r18
    3710:	8a 95       	dec	r24
    3712:	ea f7       	brpl	.-6      	; 0x370e <add_key+0x28>
    3714:	81 81       	ldd	r24, Z+1	; 0x01
    3716:	82 2b       	or	r24, r18
    3718:	81 83       	std	Z+1, r24	; 0x01
    371a:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    371c:	90 91 c7 01 	lds	r25, 0x01C7
    3720:	90 ff       	sbrs	r25, 0
    3722:	2d c0       	rjmp	.+90     	; 0x377e <add_key+0x98>
    3724:	1f 92       	push	r1
    3726:	8f 93       	push	r24
    3728:	80 e1       	ldi	r24, 0x10	; 16
    372a:	94 e0       	ldi	r25, 0x04	; 4
    372c:	9f 93       	push	r25
    372e:	8f 93       	push	r24
    3730:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	0f 90       	pop	r0
    373c:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    373e:	40 91 0d 01 	lds	r20, 0x010D
    3742:	50 91 0e 01 	lds	r21, 0x010E
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	9f ef       	ldi	r25, 0xFF	; 255
    374c:	fa 01       	movw	r30, r20
    374e:	e2 0f       	add	r30, r18
    3750:	f3 1f       	adc	r31, r19
    3752:	62 81       	ldd	r22, Z+2	; 0x02
    3754:	68 17       	cp	r22, r24
    3756:	99 f0       	breq	.+38     	; 0x377e <add_key+0x98>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3758:	9f 3f       	cpi	r25, 0xFF	; 255
    375a:	19 f4       	brne	.+6      	; 0x3762 <add_key+0x7c>
    375c:	61 11       	cpse	r22, r1
    375e:	01 c0       	rjmp	.+2      	; 0x3762 <add_key+0x7c>
    3760:	92 2f       	mov	r25, r18
    3762:	2f 5f       	subi	r18, 0xFF	; 255
    3764:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3766:	2e 30       	cpi	r18, 0x0E	; 14
    3768:	31 05       	cpc	r19, r1
    376a:	81 f7       	brne	.-32     	; 0x374c <add_key+0x66>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    376c:	9f 3f       	cpi	r25, 0xFF	; 255
    376e:	39 f0       	breq	.+14     	; 0x377e <add_key+0x98>
            keyboard_report->keys[empty] = code;
    3770:	fa 01       	movw	r30, r20
    3772:	e9 0f       	add	r30, r25
    3774:	f1 1d       	adc	r31, r1
    3776:	97 fd       	sbrc	r25, 7
    3778:	fa 95       	dec	r31
    377a:	82 83       	std	Z+2, r24	; 0x02
    377c:	08 95       	ret
    377e:	08 95       	ret

00003780 <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    3780:	90 91 0c 01 	lds	r25, 0x010C
    3784:	99 23       	and	r25, r25
    3786:	49 f1       	breq	.+82     	; 0x37da <del_key+0x5a>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3788:	98 2f       	mov	r25, r24
    378a:	96 95       	lsr	r25
    378c:	96 95       	lsr	r25
    378e:	96 95       	lsr	r25
    3790:	9f 30       	cpi	r25, 0x0F	; 15
    3792:	90 f4       	brcc	.+36     	; 0x37b8 <del_key+0x38>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3794:	e0 91 0d 01 	lds	r30, 0x010D
    3798:	f0 91 0e 01 	lds	r31, 0x010E
    379c:	e9 0f       	add	r30, r25
    379e:	f1 1d       	adc	r31, r1
    37a0:	87 70       	andi	r24, 0x07	; 7
    37a2:	21 e0       	ldi	r18, 0x01	; 1
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	01 c0       	rjmp	.+2      	; 0x37aa <del_key+0x2a>
    37a8:	22 0f       	add	r18, r18
    37aa:	8a 95       	dec	r24
    37ac:	ea f7       	brpl	.-6      	; 0x37a8 <del_key+0x28>
    37ae:	20 95       	com	r18
    37b0:	81 81       	ldd	r24, Z+1	; 0x01
    37b2:	28 23       	and	r18, r24
    37b4:	21 83       	std	Z+1, r18	; 0x01
    37b6:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    37b8:	90 91 c7 01 	lds	r25, 0x01C7
    37bc:	90 ff       	sbrs	r25, 0
    37be:	1f c0       	rjmp	.+62     	; 0x37fe <del_key+0x7e>
    37c0:	1f 92       	push	r1
    37c2:	8f 93       	push	r24
    37c4:	82 ef       	ldi	r24, 0xF2	; 242
    37c6:	93 e0       	ldi	r25, 0x03	; 3
    37c8:	9f 93       	push	r25
    37ca:	8f 93       	push	r24
    37cc:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    37d0:	0f 90       	pop	r0
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    37da:	40 91 0d 01 	lds	r20, 0x010D
    37de:	50 91 0e 01 	lds	r21, 0x010E
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	fa 01       	movw	r30, r20
    37e8:	e2 0f       	add	r30, r18
    37ea:	f3 1f       	adc	r31, r19
    37ec:	92 81       	ldd	r25, Z+2	; 0x02
    37ee:	98 13       	cpse	r25, r24
    37f0:	01 c0       	rjmp	.+2      	; 0x37f4 <del_key+0x74>
            keyboard_report->keys[i] = 0;
    37f2:	12 82       	std	Z+2, r1	; 0x02
    37f4:	2f 5f       	subi	r18, 0xFF	; 255
    37f6:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    37f8:	2e 30       	cpi	r18, 0x0E	; 14
    37fa:	31 05       	cpc	r19, r1
    37fc:	a1 f7       	brne	.-24     	; 0x37e6 <del_key+0x66>
    37fe:	08 95       	ret

00003800 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3804:	e0 91 0d 01 	lds	r30, 0x010D
    3808:	f0 91 0e 01 	lds	r31, 0x010E
    380c:	e8 0f       	add	r30, r24
    380e:	f9 1f       	adc	r31, r25
    3810:	10 82       	st	Z, r1
    3812:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3814:	80 31       	cpi	r24, 0x10	; 16
    3816:	91 05       	cpc	r25, r1
    3818:	a9 f7       	brne	.-22     	; 0x3804 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    381a:	08 95       	ret

0000381c <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    381c:	90 91 c6 01 	lds	r25, 0x01C6
    3820:	98 2b       	or	r25, r24
    3822:	90 93 c6 01 	sts	0x01C6, r25
    3826:	08 95       	ret

00003828 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3828:	80 95       	com	r24
    382a:	90 91 c6 01 	lds	r25, 0x01C6
    382e:	98 23       	and	r25, r24
    3830:	90 93 c6 01 	sts	0x01C6, r25
    3834:	08 95       	ret

00003836 <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    3836:	10 92 c6 01 	sts	0x01C6, r1
    383a:	08 95       	ret

0000383c <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    383c:	90 91 c5 01 	lds	r25, 0x01C5
    3840:	98 2b       	or	r25, r24
    3842:	90 93 c5 01 	sts	0x01C5, r25
    3846:	08 95       	ret

00003848 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3848:	80 95       	com	r24
    384a:	90 91 c5 01 	lds	r25, 0x01C5
    384e:	98 23       	and	r25, r24
    3850:	90 93 c5 01 	sts	0x01C5, r25
    3854:	08 95       	ret

00003856 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3856:	10 92 c5 01 	sts	0x01C5, r1
    385a:	08 95       	ret

0000385c <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    385c:	80 93 b4 01 	sts	0x01B4, r24
    3860:	08 95       	ret

00003862 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3862:	10 92 b4 01 	sts	0x01B4, r1
    3866:	08 95       	ret

00003868 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3868:	40 91 0d 01 	lds	r20, 0x010D
    386c:	50 91 0e 01 	lds	r21, 0x010E
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3874:	80 e0       	ldi	r24, 0x00	; 0
    3876:	fa 01       	movw	r30, r20
    3878:	e2 0f       	add	r30, r18
    387a:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    387c:	91 81       	ldd	r25, Z+1	; 0x01
    387e:	91 11       	cpse	r25, r1
            cnt++;
    3880:	8f 5f       	subi	r24, 0xFF	; 255
    3882:	2f 5f       	subi	r18, 0xFF	; 255
    3884:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3886:	2f 30       	cpi	r18, 0x0F	; 15
    3888:	31 05       	cpc	r19, r1
    388a:	a9 f7       	brne	.-22     	; 0x3876 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    388c:	08 95       	ret

0000388e <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    388e:	e0 91 0d 01 	lds	r30, 0x010D
    3892:	f0 91 0e 01 	lds	r31, 0x010E
    3896:	80 91 c6 01 	lds	r24, 0x01C6
    389a:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    389c:	e0 91 0d 01 	lds	r30, 0x010D
    38a0:	f0 91 0e 01 	lds	r31, 0x010E
    38a4:	80 81       	ld	r24, Z
    38a6:	90 91 c5 01 	lds	r25, 0x01C5
    38aa:	89 2b       	or	r24, r25
    38ac:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    38ae:	90 91 b4 01 	lds	r25, 0x01B4
    38b2:	99 23       	and	r25, r25
    38b4:	61 f0       	breq	.+24     	; 0x38ce <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    38b6:	e0 91 0d 01 	lds	r30, 0x010D
    38ba:	f0 91 0e 01 	lds	r31, 0x010E
    38be:	80 81       	ld	r24, Z
    38c0:	89 2b       	or	r24, r25
    38c2:	80 83       	st	Z, r24
        if (has_anykey()) {
    38c4:	0e 94 34 1c 	call	0x3868	; 0x3868 <has_anykey>
    38c8:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    38ca:	10 92 b4 01 	sts	0x01B4, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    38ce:	80 91 0d 01 	lds	r24, 0x010D
    38d2:	90 91 0e 01 	lds	r25, 0x010E
    38d6:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <host_keyboard_send>

000038da <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    38da:	8d 3b       	cpi	r24, 0xBD	; 189
    38dc:	60 f4       	brcc	.+24     	; 0x38f6 <keycode_to_action+0x1c>
    38de:	88 3a       	cpi	r24, 0xA8	; 168
    38e0:	00 f5       	brcc	.+64     	; 0x3922 <keycode_to_action+0x48>
    38e2:	85 3a       	cpi	r24, 0xA5	; 165
    38e4:	a8 f4       	brcc	.+42     	; 0x3910 <keycode_to_action+0x36>
    38e6:	84 30       	cpi	r24, 0x04	; 4
    38e8:	88 f4       	brcc	.+34     	; 0x390c <keycode_to_action+0x32>
    38ea:	81 30       	cpi	r24, 0x01	; 1
    38ec:	09 f0       	breq	.+2      	; 0x38f0 <keycode_to_action+0x16>
    38ee:	5b c0       	rjmp	.+182    	; 0x39a6 <keycode_to_action+0xcc>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    38f0:	81 e0       	ldi	r24, 0x01	; 1
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    38f6:	80 3e       	cpi	r24, 0xE0	; 224
    38f8:	08 f4       	brcc	.+2      	; 0x38fc <keycode_to_action+0x22>
    38fa:	55 c0       	rjmp	.+170    	; 0x39a6 <keycode_to_action+0xcc>
    38fc:	88 3e       	cpi	r24, 0xE8	; 232
    38fe:	30 f0       	brcs	.+12     	; 0x390c <keycode_to_action+0x32>
    3900:	80 3f       	cpi	r24, 0xF0	; 240
    3902:	08 f4       	brcc	.+2      	; 0x3906 <keycode_to_action+0x2c>
    3904:	50 c0       	rjmp	.+160    	; 0x39a6 <keycode_to_action+0xcc>
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	90 65       	ori	r25, 0x50	; 80
            break;
    390a:	08 95       	ret
{
    action_t action;
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    390c:	90 e0       	ldi	r25, 0x00	; 0
            break;
    390e:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3910:	85 3a       	cpi	r24, 0xA5	; 165
    3912:	09 f4       	brne	.+2      	; 0x3916 <keycode_to_action+0x3c>
    3914:	4b c0       	rjmp	.+150    	; 0x39ac <keycode_to_action+0xd2>
    3916:	86 3a       	cpi	r24, 0xA6	; 166
    3918:	09 f0       	breq	.+2      	; 0x391c <keycode_to_action+0x42>
    391a:	4b c0       	rjmp	.+150    	; 0x39b2 <keycode_to_action+0xd8>
    391c:	82 e8       	ldi	r24, 0x82	; 130
    391e:	90 e4       	ldi	r25, 0x40	; 64
    3920:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3922:	88 3a       	cpi	r24, 0xA8	; 168
    3924:	09 f4       	brne	.+2      	; 0x3928 <keycode_to_action+0x4e>
    3926:	48 c0       	rjmp	.+144    	; 0x39b8 <keycode_to_action+0xde>
    3928:	89 3a       	cpi	r24, 0xA9	; 169
    392a:	09 f4       	brne	.+2      	; 0x392e <keycode_to_action+0x54>
    392c:	48 c0       	rjmp	.+144    	; 0x39be <keycode_to_action+0xe4>
    392e:	8a 3a       	cpi	r24, 0xAA	; 170
    3930:	09 f4       	brne	.+2      	; 0x3934 <keycode_to_action+0x5a>
    3932:	48 c0       	rjmp	.+144    	; 0x39c4 <keycode_to_action+0xea>
    3934:	8b 3a       	cpi	r24, 0xAB	; 171
    3936:	09 f4       	brne	.+2      	; 0x393a <keycode_to_action+0x60>
    3938:	48 c0       	rjmp	.+144    	; 0x39ca <keycode_to_action+0xf0>
    393a:	8c 3a       	cpi	r24, 0xAC	; 172
    393c:	09 f4       	brne	.+2      	; 0x3940 <keycode_to_action+0x66>
    393e:	48 c0       	rjmp	.+144    	; 0x39d0 <keycode_to_action+0xf6>
    3940:	8b 3b       	cpi	r24, 0xBB	; 187
    3942:	09 f4       	brne	.+2      	; 0x3946 <keycode_to_action+0x6c>
    3944:	48 c0       	rjmp	.+144    	; 0x39d6 <keycode_to_action+0xfc>
    3946:	8c 3b       	cpi	r24, 0xBC	; 188
    3948:	09 f4       	brne	.+2      	; 0x394c <keycode_to_action+0x72>
    394a:	48 c0       	rjmp	.+144    	; 0x39dc <keycode_to_action+0x102>
    394c:	8d 3a       	cpi	r24, 0xAD	; 173
    394e:	09 f4       	brne	.+2      	; 0x3952 <keycode_to_action+0x78>
    3950:	48 c0       	rjmp	.+144    	; 0x39e2 <keycode_to_action+0x108>
    3952:	80 3b       	cpi	r24, 0xB0	; 176
    3954:	09 f4       	brne	.+2      	; 0x3958 <keycode_to_action+0x7e>
    3956:	48 c0       	rjmp	.+144    	; 0x39e8 <keycode_to_action+0x10e>
    3958:	8e 3a       	cpi	r24, 0xAE	; 174
    395a:	09 f4       	brne	.+2      	; 0x395e <keycode_to_action+0x84>
    395c:	48 c0       	rjmp	.+144    	; 0x39ee <keycode_to_action+0x114>
    395e:	8f 3a       	cpi	r24, 0xAF	; 175
    3960:	09 f4       	brne	.+2      	; 0x3964 <keycode_to_action+0x8a>
    3962:	48 c0       	rjmp	.+144    	; 0x39f4 <keycode_to_action+0x11a>
    3964:	81 3b       	cpi	r24, 0xB1	; 177
    3966:	09 f4       	brne	.+2      	; 0x396a <keycode_to_action+0x90>
    3968:	48 c0       	rjmp	.+144    	; 0x39fa <keycode_to_action+0x120>
    396a:	82 3b       	cpi	r24, 0xB2	; 178
    396c:	09 f4       	brne	.+2      	; 0x3970 <keycode_to_action+0x96>
    396e:	48 c0       	rjmp	.+144    	; 0x3a00 <keycode_to_action+0x126>
    3970:	83 3b       	cpi	r24, 0xB3	; 179
    3972:	09 f4       	brne	.+2      	; 0x3976 <keycode_to_action+0x9c>
    3974:	48 c0       	rjmp	.+144    	; 0x3a06 <keycode_to_action+0x12c>
    3976:	84 3b       	cpi	r24, 0xB4	; 180
    3978:	09 f4       	brne	.+2      	; 0x397c <keycode_to_action+0xa2>
    397a:	48 c0       	rjmp	.+144    	; 0x3a0c <keycode_to_action+0x132>
    397c:	85 3b       	cpi	r24, 0xB5	; 181
    397e:	09 f4       	brne	.+2      	; 0x3982 <keycode_to_action+0xa8>
    3980:	48 c0       	rjmp	.+144    	; 0x3a12 <keycode_to_action+0x138>
    3982:	86 3b       	cpi	r24, 0xB6	; 182
    3984:	09 f4       	brne	.+2      	; 0x3988 <keycode_to_action+0xae>
    3986:	48 c0       	rjmp	.+144    	; 0x3a18 <keycode_to_action+0x13e>
    3988:	87 3b       	cpi	r24, 0xB7	; 183
    398a:	09 f4       	brne	.+2      	; 0x398e <keycode_to_action+0xb4>
    398c:	48 c0       	rjmp	.+144    	; 0x3a1e <keycode_to_action+0x144>
    398e:	88 3b       	cpi	r24, 0xB8	; 184
    3990:	09 f4       	brne	.+2      	; 0x3994 <keycode_to_action+0xba>
    3992:	48 c0       	rjmp	.+144    	; 0x3a24 <keycode_to_action+0x14a>
    3994:	89 3b       	cpi	r24, 0xB9	; 185
    3996:	09 f4       	brne	.+2      	; 0x399a <keycode_to_action+0xc0>
    3998:	48 c0       	rjmp	.+144    	; 0x3a2a <keycode_to_action+0x150>
    399a:	8a 3b       	cpi	r24, 0xBA	; 186
    399c:	09 f0       	breq	.+2      	; 0x39a0 <keycode_to_action+0xc6>
    399e:	48 c0       	rjmp	.+144    	; 0x3a30 <keycode_to_action+0x156>
    39a0:	8a e2       	ldi	r24, 0x2A	; 42
    39a2:	96 e4       	ldi	r25, 0x46	; 70
    39a4:	08 95       	ret
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        default:
            action.code = ACTION_NO;
    39a6:	80 e0       	ldi	r24, 0x00	; 0
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    39ac:	81 e8       	ldi	r24, 0x81	; 129
    39ae:	90 e4       	ldi	r25, 0x40	; 64
    39b0:	08 95       	ret
    39b2:	83 e8       	ldi	r24, 0x83	; 131
    39b4:	90 e4       	ldi	r25, 0x40	; 64
    39b6:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_MEDIA_REWIND:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    39b8:	82 ee       	ldi	r24, 0xE2	; 226
    39ba:	94 e4       	ldi	r25, 0x44	; 68
    39bc:	08 95       	ret
    39be:	89 ee       	ldi	r24, 0xE9	; 233
    39c0:	94 e4       	ldi	r25, 0x44	; 68
    39c2:	08 95       	ret
    39c4:	8a ee       	ldi	r24, 0xEA	; 234
    39c6:	94 e4       	ldi	r25, 0x44	; 68
    39c8:	08 95       	ret
    39ca:	85 eb       	ldi	r24, 0xB5	; 181
    39cc:	94 e4       	ldi	r25, 0x44	; 68
    39ce:	08 95       	ret
    39d0:	86 eb       	ldi	r24, 0xB6	; 182
    39d2:	94 e4       	ldi	r25, 0x44	; 68
    39d4:	08 95       	ret
    39d6:	83 eb       	ldi	r24, 0xB3	; 179
    39d8:	94 e4       	ldi	r25, 0x44	; 68
    39da:	08 95       	ret
    39dc:	84 eb       	ldi	r24, 0xB4	; 180
    39de:	94 e4       	ldi	r25, 0x44	; 68
    39e0:	08 95       	ret
    39e2:	87 eb       	ldi	r24, 0xB7	; 183
    39e4:	94 e4       	ldi	r25, 0x44	; 68
    39e6:	08 95       	ret
    39e8:	8c ec       	ldi	r24, 0xCC	; 204
    39ea:	94 e4       	ldi	r25, 0x44	; 68
    39ec:	08 95       	ret
    39ee:	8d ec       	ldi	r24, 0xCD	; 205
    39f0:	94 e4       	ldi	r25, 0x44	; 68
    39f2:	08 95       	ret
    39f4:	83 e8       	ldi	r24, 0x83	; 131
    39f6:	95 e4       	ldi	r25, 0x45	; 69
    39f8:	08 95       	ret
    39fa:	8a e8       	ldi	r24, 0x8A	; 138
    39fc:	95 e4       	ldi	r25, 0x45	; 69
    39fe:	08 95       	ret
    3a00:	82 e9       	ldi	r24, 0x92	; 146
    3a02:	95 e4       	ldi	r25, 0x45	; 69
    3a04:	08 95       	ret
    3a06:	84 e9       	ldi	r24, 0x94	; 148
    3a08:	95 e4       	ldi	r25, 0x45	; 69
    3a0a:	08 95       	ret
    3a0c:	81 e2       	ldi	r24, 0x21	; 33
    3a0e:	96 e4       	ldi	r25, 0x46	; 70
    3a10:	08 95       	ret
    3a12:	83 e2       	ldi	r24, 0x23	; 35
    3a14:	96 e4       	ldi	r25, 0x46	; 70
    3a16:	08 95       	ret
    3a18:	84 e2       	ldi	r24, 0x24	; 36
    3a1a:	96 e4       	ldi	r25, 0x46	; 70
    3a1c:	08 95       	ret
    3a1e:	85 e2       	ldi	r24, 0x25	; 37
    3a20:	96 e4       	ldi	r25, 0x46	; 70
    3a22:	08 95       	ret
    3a24:	86 e2       	ldi	r24, 0x26	; 38
    3a26:	96 e4       	ldi	r25, 0x46	; 70
    3a28:	08 95       	ret
    3a2a:	87 e2       	ldi	r24, 0x27	; 39
    3a2c:	96 e4       	ldi	r25, 0x46	; 70
    3a2e:	08 95       	ret
    3a30:	80 e0       	ldi	r24, 0x00	; 0
    3a32:	94 e4       	ldi	r25, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    3a34:	08 95       	ret

00003a36 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3a36:	0e 94 d1 06 	call	0xda2	; 0xda2 <keymap_key_to_keycode>
    switch (keycode) {
    3a3a:	80 3e       	cpi	r24, 0xE0	; 224
    3a3c:	a8 f4       	brcc	.+42     	; 0x3a68 <action_for_key+0x32>
    3a3e:	80 3c       	cpi	r24, 0xC0	; 192
    3a40:	00 f5       	brcc	.+64     	; 0x3a82 <action_for_key+0x4c>
    3a42:	81 33       	cpi	r24, 0x31	; 49
    3a44:	09 f4       	brne	.+2      	; 0x3a48 <action_for_key+0x12>
    3a46:	5c c0       	rjmp	.+184    	; 0x3b00 <action_for_key+0xca>
    3a48:	38 f4       	brcc	.+14     	; 0x3a58 <action_for_key+0x22>
    3a4a:	89 32       	cpi	r24, 0x29	; 41
    3a4c:	09 f4       	brne	.+2      	; 0x3a50 <action_for_key+0x1a>
    3a4e:	52 c0       	rjmp	.+164    	; 0x3af4 <action_for_key+0xbe>
    3a50:	8a 32       	cpi	r24, 0x2A	; 42
    3a52:	09 f4       	brne	.+2      	; 0x3a56 <action_for_key+0x20>
    3a54:	5b c0       	rjmp	.+182    	; 0x3b0c <action_for_key+0xd6>
    3a56:	5f c0       	rjmp	.+190    	; 0x3b16 <action_for_key+0xe0>
    3a58:	89 33       	cpi	r24, 0x39	; 57
    3a5a:	b1 f0       	breq	.+44     	; 0x3a88 <action_for_key+0x52>
    3a5c:	82 38       	cpi	r24, 0x82	; 130
    3a5e:	a1 f0       	breq	.+40     	; 0x3a88 <action_for_key+0x52>
    3a60:	85 33       	cpi	r24, 0x35	; 53
    3a62:	09 f4       	brne	.+2      	; 0x3a66 <action_for_key+0x30>
    3a64:	41 c0       	rjmp	.+130    	; 0x3ae8 <action_for_key+0xb2>
    3a66:	57 c0       	rjmp	.+174    	; 0x3b16 <action_for_key+0xe0>
    3a68:	83 3e       	cpi	r24, 0xE3	; 227
    3a6a:	41 f1       	breq	.+80     	; 0x3abc <action_for_key+0x86>
    3a6c:	28 f4       	brcc	.+10     	; 0x3a78 <action_for_key+0x42>
    3a6e:	80 3e       	cpi	r24, 0xE0	; 224
    3a70:	99 f0       	breq	.+38     	; 0x3a98 <action_for_key+0x62>
    3a72:	82 3e       	cpi	r24, 0xE2	; 226
    3a74:	b9 f0       	breq	.+46     	; 0x3aa4 <action_for_key+0x6e>
    3a76:	4f c0       	rjmp	.+158    	; 0x3b16 <action_for_key+0xe0>
    3a78:	86 3e       	cpi	r24, 0xE6	; 230
    3a7a:	31 f1       	breq	.+76     	; 0x3ac8 <action_for_key+0x92>
    3a7c:	87 3e       	cpi	r24, 0xE7	; 231
    3a7e:	71 f1       	breq	.+92     	; 0x3adc <action_for_key+0xa6>
    3a80:	4a c0       	rjmp	.+148    	; 0x3b16 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3a82:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <keymap_fn_to_action>
    3a86:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3a88:	90 91 d8 01 	lds	r25, 0x01D8
    3a8c:	90 fd       	sbrc	r25, 0
    3a8e:	02 c0       	rjmp	.+4      	; 0x3a94 <action_for_key+0x5e>
    3a90:	91 ff       	sbrs	r25, 1
    3a92:	41 c0       	rjmp	.+130    	; 0x3b16 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3a94:	80 ee       	ldi	r24, 0xE0	; 224
    3a96:	3f c0       	rjmp	.+126    	; 0x3b16 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3a98:	80 91 d8 01 	lds	r24, 0x01D8
    3a9c:	80 ff       	sbrs	r24, 0
    3a9e:	fa cf       	rjmp	.-12     	; 0x3a94 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3aa0:	89 e3       	ldi	r24, 0x39	; 57
    3aa2:	39 c0       	rjmp	.+114    	; 0x3b16 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3aa4:	80 91 d8 01 	lds	r24, 0x01D8
    3aa8:	82 ff       	sbrs	r24, 2
    3aaa:	0c c0       	rjmp	.+24     	; 0x3ac4 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3aac:	80 91 d8 01 	lds	r24, 0x01D8
    3ab0:	84 ff       	sbrs	r24, 4
    3ab2:	02 c0       	rjmp	.+4      	; 0x3ab8 <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	2f c0       	rjmp	.+94     	; 0x3b16 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3ab8:	83 ee       	ldi	r24, 0xE3	; 227
    3aba:	2d c0       	rjmp	.+90     	; 0x3b16 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3abc:	80 91 d8 01 	lds	r24, 0x01D8
    3ac0:	82 ff       	sbrs	r24, 2
    3ac2:	f4 cf       	rjmp	.-24     	; 0x3aac <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3ac4:	82 ee       	ldi	r24, 0xE2	; 226
    3ac6:	27 c0       	rjmp	.+78     	; 0x3b16 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3ac8:	80 91 d8 01 	lds	r24, 0x01D8
    3acc:	83 ff       	sbrs	r24, 3
    3ace:	0a c0       	rjmp	.+20     	; 0x3ae4 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3ad0:	80 91 d8 01 	lds	r24, 0x01D8
    3ad4:	84 fd       	sbrc	r24, 4
    3ad6:	ee cf       	rjmp	.-36     	; 0x3ab4 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3ad8:	87 ee       	ldi	r24, 0xE7	; 231
    3ada:	1d c0       	rjmp	.+58     	; 0x3b16 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3adc:	80 91 d8 01 	lds	r24, 0x01D8
    3ae0:	83 ff       	sbrs	r24, 3
    3ae2:	f6 cf       	rjmp	.-20     	; 0x3ad0 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3ae4:	86 ee       	ldi	r24, 0xE6	; 230
    3ae6:	17 c0       	rjmp	.+46     	; 0x3b16 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3ae8:	80 91 d8 01 	lds	r24, 0x01D8
    3aec:	85 ff       	sbrs	r24, 5
    3aee:	06 c0       	rjmp	.+12     	; 0x3afc <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3af0:	89 e2       	ldi	r24, 0x29	; 41
    3af2:	11 c0       	rjmp	.+34     	; 0x3b16 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3af4:	80 91 d8 01 	lds	r24, 0x01D8
    3af8:	85 ff       	sbrs	r24, 5
    3afa:	fa cf       	rjmp	.-12     	; 0x3af0 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3afc:	85 e3       	ldi	r24, 0x35	; 53
    3afe:	0b c0       	rjmp	.+22     	; 0x3b16 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3b00:	80 91 d8 01 	lds	r24, 0x01D8
    3b04:	86 ff       	sbrs	r24, 6
    3b06:	06 c0       	rjmp	.+12     	; 0x3b14 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3b08:	8a e2       	ldi	r24, 0x2A	; 42
    3b0a:	05 c0       	rjmp	.+10     	; 0x3b16 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3b0c:	80 91 d8 01 	lds	r24, 0x01D8
    3b10:	86 ff       	sbrs	r24, 6
    3b12:	fa cf       	rjmp	.-12     	; 0x3b08 <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3b14:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3b16:	0e 94 6d 1c 	call	0x38da	; 0x38da <keycode_to_action>
    }
}
    3b1a:	08 95       	ret

00003b1c <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	08 95       	ret

00003b22 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3b22:	08 95       	ret

00003b24 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3b24:	90 93 39 01 	sts	0x0139, r25
    3b28:	80 93 38 01 	sts	0x0138, r24
    3b2c:	08 95       	ret

00003b2e <biton32>:
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}

uint8_t biton32(uint32_t bits)
{
    3b2e:	cf 92       	push	r12
    3b30:	df 92       	push	r13
    3b32:	ef 92       	push	r14
    3b34:	ff 92       	push	r15
    3b36:	0f 93       	push	r16
    3b38:	1f 93       	push	r17
    uint8_t n = 0;
    if (bits >>16) { bits >>=16; n +=16;}
    3b3a:	6c 01       	movw	r12, r24
    3b3c:	ee 24       	eor	r14, r14
    3b3e:	ff 24       	eor	r15, r15
    3b40:	c1 14       	cp	r12, r1
    3b42:	d1 04       	cpc	r13, r1
    3b44:	e1 04       	cpc	r14, r1
    3b46:	f1 04       	cpc	r15, r1
    3b48:	21 f4       	brne	.+8      	; 0x3b52 <biton32+0x24>
    3b4a:	6b 01       	movw	r12, r22
    3b4c:	7c 01       	movw	r14, r24
    return n;
}

uint8_t biton32(uint32_t bits)
{
    uint8_t n = 0;
    3b4e:	80 e0       	ldi	r24, 0x00	; 0
    3b50:	01 c0       	rjmp	.+2      	; 0x3b54 <biton32+0x26>
    if (bits >>16) { bits >>=16; n +=16;}
    3b52:	80 e1       	ldi	r24, 0x10	; 16
    if (bits >> 8) { bits >>= 8; n += 8;}
    3b54:	33 27       	eor	r19, r19
    3b56:	2f 2d       	mov	r18, r15
    3b58:	1e 2d       	mov	r17, r14
    3b5a:	0d 2d       	mov	r16, r13
    3b5c:	01 15       	cp	r16, r1
    3b5e:	11 05       	cpc	r17, r1
    3b60:	21 05       	cpc	r18, r1
    3b62:	31 05       	cpc	r19, r1
    3b64:	19 f0       	breq	.+6      	; 0x3b6c <biton32+0x3e>
    3b66:	88 5f       	subi	r24, 0xF8	; 248
    3b68:	68 01       	movw	r12, r16
    3b6a:	79 01       	movw	r14, r18
    if (bits >> 4) { bits >>= 4; n += 4;}
    3b6c:	97 01       	movw	r18, r14
    3b6e:	86 01       	movw	r16, r12
    3b70:	a4 e0       	ldi	r26, 0x04	; 4
    3b72:	36 95       	lsr	r19
    3b74:	27 95       	ror	r18
    3b76:	17 95       	ror	r17
    3b78:	07 95       	ror	r16
    3b7a:	aa 95       	dec	r26
    3b7c:	d1 f7       	brne	.-12     	; 0x3b72 <biton32+0x44>
    3b7e:	01 15       	cp	r16, r1
    3b80:	11 05       	cpc	r17, r1
    3b82:	21 05       	cpc	r18, r1
    3b84:	31 05       	cpc	r19, r1
    3b86:	19 f0       	breq	.+6      	; 0x3b8e <biton32+0x60>
    3b88:	8c 5f       	subi	r24, 0xFC	; 252
    3b8a:	68 01       	movw	r12, r16
    3b8c:	79 01       	movw	r14, r18
    if (bits >> 2) { bits >>= 2; n += 2;}
    3b8e:	97 01       	movw	r18, r14
    3b90:	86 01       	movw	r16, r12
    3b92:	f2 e0       	ldi	r31, 0x02	; 2
    3b94:	36 95       	lsr	r19
    3b96:	27 95       	ror	r18
    3b98:	17 95       	ror	r17
    3b9a:	07 95       	ror	r16
    3b9c:	fa 95       	dec	r31
    3b9e:	d1 f7       	brne	.-12     	; 0x3b94 <biton32+0x66>
    3ba0:	01 15       	cp	r16, r1
    3ba2:	11 05       	cpc	r17, r1
    3ba4:	21 05       	cpc	r18, r1
    3ba6:	31 05       	cpc	r19, r1
    3ba8:	19 f0       	breq	.+6      	; 0x3bb0 <biton32+0x82>
    3baa:	8e 5f       	subi	r24, 0xFE	; 254
    3bac:	68 01       	movw	r12, r16
    3bae:	79 01       	movw	r14, r18
    if (bits >> 1) { bits >>= 1; n += 1;}
    3bb0:	b7 01       	movw	r22, r14
    3bb2:	a6 01       	movw	r20, r12
    3bb4:	76 95       	lsr	r23
    3bb6:	67 95       	ror	r22
    3bb8:	57 95       	ror	r21
    3bba:	47 95       	ror	r20
    3bbc:	45 2b       	or	r20, r21
    3bbe:	46 2b       	or	r20, r22
    3bc0:	47 2b       	or	r20, r23
    3bc2:	09 f0       	breq	.+2      	; 0x3bc6 <biton32+0x98>
    3bc4:	8f 5f       	subi	r24, 0xFF	; 255
    return n;
}
    3bc6:	1f 91       	pop	r17
    3bc8:	0f 91       	pop	r16
    3bca:	ff 90       	pop	r15
    3bcc:	ef 90       	pop	r14
    3bce:	df 90       	pop	r13
    3bd0:	cf 90       	pop	r12
    3bd2:	08 95       	ret

00003bd4 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3bd4:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3bd6:	98 2f       	mov	r25, r24
    3bd8:	9c 7c       	andi	r25, 0xCC	; 204
    3bda:	96 95       	lsr	r25
    3bdc:	96 95       	lsr	r25
    3bde:	83 73       	andi	r24, 0x33	; 51
    3be0:	44 e0       	ldi	r20, 0x04	; 4
    3be2:	84 9f       	mul	r24, r20
    3be4:	90 01       	movw	r18, r0
    3be6:	11 24       	eor	r1, r1
    3be8:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3bea:	89 2f       	mov	r24, r25
    3bec:	8a 7a       	andi	r24, 0xAA	; 170
    3bee:	86 95       	lsr	r24
    3bf0:	95 75       	andi	r25, 0x55	; 85
    3bf2:	99 0f       	add	r25, r25
    return bits;
}
    3bf4:	89 2b       	or	r24, r25
    3bf6:	08 95       	ret

00003bf8 <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3bf8:	1f 93       	push	r17
    3bfa:	cf 93       	push	r28
    3bfc:	df 93       	push	r29
    3bfe:	1f 92       	push	r1
    3c00:	cd b7       	in	r28, 0x3d	; 61
    3c02:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3c04:	99 83       	std	Y+1, r25	; 0x01
    3c06:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <bitrev>
    3c0a:	18 2f       	mov	r17, r24
    3c0c:	99 81       	ldd	r25, Y+1	; 0x01
    3c0e:	89 2f       	mov	r24, r25
    3c10:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <bitrev>
    3c14:	21 2f       	mov	r18, r17
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	32 2f       	mov	r19, r18
    3c1a:	22 27       	eor	r18, r18
    return bits;
}
    3c1c:	a9 01       	movw	r20, r18
    3c1e:	48 2b       	or	r20, r24
    3c20:	ca 01       	movw	r24, r20
    3c22:	0f 90       	pop	r0
    3c24:	df 91       	pop	r29
    3c26:	cf 91       	pop	r28
    3c28:	1f 91       	pop	r17
    3c2a:	08 95       	ret

00003c2c <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3c2c:	80 91 dd 01 	lds	r24, 0x01DD
    3c30:	84 30       	cpi	r24, 0x04	; 4
    3c32:	09 f1       	breq	.+66     	; 0x3c76 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3c34:	10 92 c8 01 	sts	0x01C8, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3c38:	20 e4       	ldi	r18, 0x40	; 64
    3c3a:	88 e1       	ldi	r24, 0x18	; 24
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	0f b6       	in	r0, 0x3f	; 63
    3c40:	f8 94       	cli
    3c42:	a8 95       	wdr
    3c44:	80 93 60 00 	sts	0x0060, r24
    3c48:	0f be       	out	0x3f, r0	; 63
    3c4a:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3c4e:	83 b7       	in	r24, 0x33	; 51
    3c50:	81 7f       	andi	r24, 0xF1	; 241
    3c52:	84 60       	ori	r24, 0x04	; 4
    3c54:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3c56:	83 b7       	in	r24, 0x33	; 51
    3c58:	81 60       	ori	r24, 0x01	; 1
    3c5a:	83 bf       	out	0x33, r24	; 51
    sei();
    3c5c:	78 94       	sei
    sleep_cpu();
    3c5e:	88 95       	sleep
    sleep_disable();
    3c60:	83 b7       	in	r24, 0x33	; 51
    3c62:	8e 7f       	andi	r24, 0xFE	; 254
    3c64:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3c66:	88 e1       	ldi	r24, 0x18	; 24
    3c68:	0f b6       	in	r0, 0x3f	; 63
    3c6a:	f8 94       	cli
    3c6c:	80 93 60 00 	sts	0x0060, r24
    3c70:	10 92 60 00 	sts	0x0060, r1
    3c74:	0f be       	out	0x3f, r0	; 63
    3c76:	08 95       	ret

00003c78 <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    3c78:	08 95       	ret

00003c7a <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    3c7a:	08 95       	ret

00003c7c <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    3c7c:	cf 93       	push	r28
    matrix_power_up();
    3c7e:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <matrix_power_up>
    matrix_scan();
    3c82:	0e 94 15 07 	call	0xe2a	; 0xe2a <matrix_scan>
    matrix_power_down();
    3c86:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3c8a:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3c8c:	8c 2f       	mov	r24, r28
    3c8e:	0e 94 42 08 	call	0x1084	; 0x1084 <matrix_get_row>
    3c92:	89 2b       	or	r24, r25
    3c94:	29 f4       	brne	.+10     	; 0x3ca0 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3c96:	cf 5f       	subi	r28, 0xFF	; 255
    3c98:	c5 30       	cpi	r28, 0x05	; 5
    3c9a:	c1 f7       	brne	.-16     	; 0x3c8c <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3c9c:	80 e0       	ldi	r24, 0x00	; 0
    3c9e:	01 c0       	rjmp	.+2      	; 0x3ca2 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3ca0:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3ca2:	cf 91       	pop	r28
    3ca4:	08 95       	ret

00003ca6 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3ca6:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <clear_keyboard>

00003caa <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3caa:	1f 92       	push	r1
    3cac:	0f 92       	push	r0
    3cae:	0f b6       	in	r0, 0x3f	; 63
    3cb0:	0f 92       	push	r0
    3cb2:	11 24       	eor	r1, r1
    3cb4:	8f 93       	push	r24
    3cb6:	9f 93       	push	r25
    3cb8:	af 93       	push	r26
    3cba:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3cbc:	80 91 c8 01 	lds	r24, 0x01C8
    3cc0:	81 11       	cpse	r24, r1
    3cc2:	13 c0       	rjmp	.+38     	; 0x3cea <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3cc4:	80 91 c9 01 	lds	r24, 0x01C9
    3cc8:	90 91 ca 01 	lds	r25, 0x01CA
    3ccc:	a0 91 cb 01 	lds	r26, 0x01CB
    3cd0:	b0 91 cc 01 	lds	r27, 0x01CC
    3cd4:	41 96       	adiw	r24, 0x11	; 17
    3cd6:	a1 1d       	adc	r26, r1
    3cd8:	b1 1d       	adc	r27, r1
    3cda:	80 93 c9 01 	sts	0x01C9, r24
    3cde:	90 93 ca 01 	sts	0x01CA, r25
    3ce2:	a0 93 cb 01 	sts	0x01CB, r26
    3ce6:	b0 93 cc 01 	sts	0x01CC, r27
            break;
        default:
            ;
    }
}
    3cea:	bf 91       	pop	r27
    3cec:	af 91       	pop	r26
    3cee:	9f 91       	pop	r25
    3cf0:	8f 91       	pop	r24
    3cf2:	0f 90       	pop	r0
    3cf4:	0f be       	out	0x3f, r0	; 63
    3cf6:	0f 90       	pop	r0
    3cf8:	1f 90       	pop	r1
    3cfa:	18 95       	reti

00003cfc <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3cfc:	82 e0       	ldi	r24, 0x02	; 2
    3cfe:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3d00:	93 e0       	ldi	r25, 0x03	; 3
    3d02:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3d04:	9a ef       	ldi	r25, 0xFA	; 250
    3d06:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3d08:	80 93 6e 00 	sts	0x006E, r24
    3d0c:	08 95       	ret

00003d0e <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3d0e:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3d10:	f8 94       	cli
    t = timer_count;
    3d12:	80 91 c9 01 	lds	r24, 0x01C9
    3d16:	90 91 ca 01 	lds	r25, 0x01CA
    3d1a:	a0 91 cb 01 	lds	r26, 0x01CB
    3d1e:	b0 91 cc 01 	lds	r27, 0x01CC
    SREG = sreg;
    3d22:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3d24:	08 95       	ret

00003d26 <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    3d26:	cf 92       	push	r12
    3d28:	df 92       	push	r13
    3d2a:	ef 92       	push	r14
    3d2c:	ff 92       	push	r15
    3d2e:	0f 93       	push	r16
    3d30:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3d32:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3d34:	f8 94       	cli
    t = timer_count;
    3d36:	40 91 c9 01 	lds	r20, 0x01C9
    3d3a:	50 91 ca 01 	lds	r21, 0x01CA
    3d3e:	60 91 cb 01 	lds	r22, 0x01CB
    3d42:	70 91 cc 01 	lds	r23, 0x01CC
    SREG = sreg;
    3d46:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3d48:	6a 01       	movw	r12, r20
    3d4a:	7b 01       	movw	r14, r22
    3d4c:	ee 24       	eor	r14, r14
    3d4e:	ff 24       	eor	r15, r15
    3d50:	8c 01       	movw	r16, r24
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	c0 16       	cp	r12, r16
    3d58:	d1 06       	cpc	r13, r17
    3d5a:	e2 06       	cpc	r14, r18
    3d5c:	f3 06       	cpc	r15, r19
    3d5e:	10 f4       	brcc	.+4      	; 0x3d64 <timer_elapsed+0x3e>
    3d60:	41 50       	subi	r20, 0x01	; 1
    3d62:	51 09       	sbc	r21, r1
    3d64:	48 1b       	sub	r20, r24
    3d66:	59 0b       	sbc	r21, r25
}
    3d68:	ca 01       	movw	r24, r20
    3d6a:	1f 91       	pop	r17
    3d6c:	0f 91       	pop	r16
    3d6e:	ff 90       	pop	r15
    3d70:	ef 90       	pop	r14
    3d72:	df 90       	pop	r13
    3d74:	cf 90       	pop	r12
    3d76:	08 95       	ret

00003d78 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3d78:	1f 92       	push	r1
    3d7a:	0f 92       	push	r0
    3d7c:	0f b6       	in	r0, 0x3f	; 63
    3d7e:	0f 92       	push	r0
    3d80:	11 24       	eor	r1, r1
    3d82:	8f 93       	push	r24
    3d84:	9f 93       	push	r25
    3d86:	af 93       	push	r26
    3d88:	bf 93       	push	r27
    timer_count++;
    3d8a:	80 91 c9 01 	lds	r24, 0x01C9
    3d8e:	90 91 ca 01 	lds	r25, 0x01CA
    3d92:	a0 91 cb 01 	lds	r26, 0x01CB
    3d96:	b0 91 cc 01 	lds	r27, 0x01CC
    3d9a:	01 96       	adiw	r24, 0x01	; 1
    3d9c:	a1 1d       	adc	r26, r1
    3d9e:	b1 1d       	adc	r27, r1
    3da0:	80 93 c9 01 	sts	0x01C9, r24
    3da4:	90 93 ca 01 	sts	0x01CA, r25
    3da8:	a0 93 cb 01 	sts	0x01CB, r26
    3dac:	b0 93 cc 01 	sts	0x01CC, r27
}
    3db0:	bf 91       	pop	r27
    3db2:	af 91       	pop	r26
    3db4:	9f 91       	pop	r25
    3db6:	8f 91       	pop	r24
    3db8:	0f 90       	pop	r0
    3dba:	0f be       	out	0x3f, r0	; 63
    3dbc:	0f 90       	pop	r0
    3dbe:	1f 90       	pop	r1
    3dc0:	18 95       	reti

00003dc2 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3dc2:	0e 94 55 0c 	call	0x18aa	; 0x18aa <USB_Disable>
    cli();
    3dc6:	f8 94       	cli
    3dc8:	2f ef       	ldi	r18, 0xFF	; 255
    3dca:	87 ea       	ldi	r24, 0xA7	; 167
    3dcc:	91 e6       	ldi	r25, 0x61	; 97
    3dce:	21 50       	subi	r18, 0x01	; 1
    3dd0:	80 40       	sbci	r24, 0x00	; 0
    3dd2:	90 40       	sbci	r25, 0x00	; 0
    3dd4:	e1 f7       	brne	.-8      	; 0x3dce <bootloader_jump+0xc>
    3dd6:	00 c0       	rjmp	.+0      	; 0x3dd8 <bootloader_jump+0x16>
    3dd8:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3dda:	87 e0       	ldi	r24, 0x07	; 7
    3ddc:	90 eb       	ldi	r25, 0xB0	; 176
    3dde:	dc 01       	movw	r26, r24
    3de0:	80 93 e6 01 	sts	0x01E6, r24
    3de4:	90 93 e7 01 	sts	0x01E7, r25
    3de8:	a0 93 e8 01 	sts	0x01E8, r26
    3dec:	b0 93 e9 01 	sts	0x01E9, r27
    wdt_enable(WDTO_250MS);
    3df0:	2c e0       	ldi	r18, 0x0C	; 12
    3df2:	88 e1       	ldi	r24, 0x18	; 24
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	0f b6       	in	r0, 0x3f	; 63
    3df8:	f8 94       	cli
    3dfa:	a8 95       	wdr
    3dfc:	80 93 60 00 	sts	0x0060, r24
    3e00:	0f be       	out	0x3f, r0	; 63
    3e02:	20 93 60 00 	sts	0x0060, r18
    3e06:	ff cf       	rjmp	.-2      	; 0x3e06 <bootloader_jump+0x44>

00003e08 <scan_keycode>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_keycode(uint8_t keycode)
{
    3e08:	cf 92       	push	r12
    3e0a:	df 92       	push	r13
    3e0c:	ef 92       	push	r14
    3e0e:	ff 92       	push	r15
    3e10:	0f 93       	push	r16
    3e12:	1f 93       	push	r17
    3e14:	cf 93       	push	r28
    3e16:	df 93       	push	r29
    3e18:	c8 2e       	mov	r12, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3e1a:	d1 2c       	mov	r13, r1
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3e1c:	01 e0       	ldi	r16, 0x01	; 1
    3e1e:	10 e0       	ldi	r17, 0x00	; 0
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    3e20:	8d 2d       	mov	r24, r13
    3e22:	0e 94 42 08 	call	0x1084	; 0x1084 <matrix_get_row>
    3e26:	7c 01       	movw	r14, r24
    3e28:	c0 e0       	ldi	r28, 0x00	; 0
    3e2a:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3e2c:	98 01       	movw	r18, r16
    3e2e:	0c 2e       	mov	r0, r28
    3e30:	02 c0       	rjmp	.+4      	; 0x3e36 <scan_keycode+0x2e>
    3e32:	22 0f       	add	r18, r18
    3e34:	33 1f       	adc	r19, r19
    3e36:	0a 94       	dec	r0
    3e38:	e2 f7       	brpl	.-8      	; 0x3e32 <scan_keycode+0x2a>
    3e3a:	2e 21       	and	r18, r14
    3e3c:	3f 21       	and	r19, r15
    3e3e:	23 2b       	or	r18, r19
    3e40:	29 f4       	brne	.+10     	; 0x3e4c <scan_keycode+0x44>
    3e42:	21 96       	adiw	r28, 0x01	; 1

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3e44:	ce 30       	cpi	r28, 0x0E	; 14
    3e46:	d1 05       	cpc	r29, r1
    3e48:	89 f7       	brne	.-30     	; 0x3e2c <scan_keycode+0x24>
    3e4a:	09 c0       	rjmp	.+18     	; 0x3e5e <scan_keycode+0x56>
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    3e4c:	6c 2f       	mov	r22, r28
    3e4e:	7d 2d       	mov	r23, r13
    3e50:	80 e0       	ldi	r24, 0x00	; 0
    3e52:	0e 94 d1 06 	call	0xda2	; 0xda2 <keymap_key_to_keycode>
    3e56:	c8 12       	cpse	r12, r24
    3e58:	f4 cf       	rjmp	.-24     	; 0x3e42 <scan_keycode+0x3a>
                    return true;
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	05 c0       	rjmp	.+10     	; 0x3e68 <scan_keycode+0x60>
    }
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3e5e:	d3 94       	inc	r13
    3e60:	85 e0       	ldi	r24, 0x05	; 5
    3e62:	d8 12       	cpse	r13, r24
    3e64:	dd cf       	rjmp	.-70     	; 0x3e20 <scan_keycode+0x18>
                    return true;
                }
            }
        }
    }
    return false;
    3e66:	80 e0       	ldi	r24, 0x00	; 0
}
    3e68:	df 91       	pop	r29
    3e6a:	cf 91       	pop	r28
    3e6c:	1f 91       	pop	r17
    3e6e:	0f 91       	pop	r16
    3e70:	ff 90       	pop	r15
    3e72:	ef 90       	pop	r14
    3e74:	df 90       	pop	r13
    3e76:	cf 90       	pop	r12
    3e78:	08 95       	ret

00003e7a <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    3e7a:	cf 93       	push	r28
    3e7c:	c8 2f       	mov	r28, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    3e7e:	8c e2       	ldi	r24, 0x2C	; 44
    3e80:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <scan_keycode>
    3e84:	88 23       	and	r24, r24
    3e86:	21 f0       	breq	.+8      	; 0x3e90 <bootmagic_scan_keycode+0x16>

    return scan_keycode(keycode);
    3e88:	8c 2f       	mov	r24, r28
}
    3e8a:	cf 91       	pop	r28

bool bootmagic_scan_keycode(uint8_t keycode)
{
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;

    return scan_keycode(keycode);
    3e8c:	0c 94 04 1f 	jmp	0x3e08	; 0x3e08 <scan_keycode>
}
    3e90:	80 e0       	ldi	r24, 0x00	; 0
    3e92:	cf 91       	pop	r28
    3e94:	08 95       	ret

00003e96 <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    3e96:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    3e98:	0e 94 98 20 	call	0x4130	; 0x4130 <eeconfig_is_enabled>
    3e9c:	81 11       	cpse	r24, r1
    3e9e:	02 c0       	rjmp	.+4      	; 0x3ea4 <bootmagic+0xe>
        eeconfig_init();
    3ea0:	0e 94 7e 20 	call	0x40fc	; 0x40fc <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    3ea4:	85 e3       	ldi	r24, 0x35	; 53
    3ea6:	94 e0       	ldi	r25, 0x04	; 4
    3ea8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    3eac:	c5 e6       	ldi	r28, 0x65	; 101
    3eae:	c1 50       	subi	r28, 0x01	; 1
    3eb0:	49 f0       	breq	.+18     	; 0x3ec4 <bootmagic+0x2e>
    3eb2:	0e 94 15 07 	call	0xe2a	; 0xe2a <matrix_scan>
    3eb6:	8f e3       	ldi	r24, 0x3F	; 63
    3eb8:	9c e9       	ldi	r25, 0x9C	; 156
    3eba:	01 97       	sbiw	r24, 0x01	; 1
    3ebc:	f1 f7       	brne	.-4      	; 0x3eba <bootmagic+0x24>
    3ebe:	00 c0       	rjmp	.+0      	; 0x3ec0 <bootmagic+0x2a>
    3ec0:	00 00       	nop
    3ec2:	f5 cf       	rjmp	.-22     	; 0x3eae <bootmagic+0x18>
    print("done.\n");
    3ec4:	8e e2       	ldi	r24, 0x2E	; 46
    3ec6:	94 e0       	ldi	r25, 0x04	; 4
    3ec8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    3ecc:	89 e2       	ldi	r24, 0x29	; 41
    3ece:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    3ed2:	81 11       	cpse	r24, r1
    3ed4:	11 c1       	rjmp	.+546    	; 0x40f8 <bootmagic+0x262>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3ed6:	8a e2       	ldi	r24, 0x2A	; 42
    3ed8:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    3edc:	81 11       	cpse	r24, r1
        eeconfig_init();
    3ede:	0e 94 7e 20 	call	0x40fc	; 0x40fc <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    3ee2:	85 e0       	ldi	r24, 0x05	; 5
    3ee4:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    3ee8:	81 11       	cpse	r24, r1
        bootloader_jump();
    3eea:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    3eee:	0e 94 a3 20 	call	0x4146	; 0x4146 <eeconfig_read_debug>
    3ef2:	80 93 c7 01 	sts	0x01C7, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3ef6:	87 e0       	ldi	r24, 0x07	; 7
    3ef8:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    3efc:	88 23       	and	r24, r24
    3efe:	99 f1       	breq	.+102    	; 0x3f66 <bootmagic+0xd0>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3f00:	8b e1       	ldi	r24, 0x1B	; 27
    3f02:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    3f06:	88 23       	and	r24, r24
    3f08:	51 f0       	breq	.+20     	; 0x3f1e <bootmagic+0x88>
            debug_config.matrix = !debug_config.matrix;
    3f0a:	90 91 c7 01 	lds	r25, 0x01C7
    3f0e:	91 fb       	bst	r25, 1
    3f10:	88 27       	eor	r24, r24
    3f12:	80 f9       	bld	r24, 0
    3f14:	21 e0       	ldi	r18, 0x01	; 1
    3f16:	82 27       	eor	r24, r18
    3f18:	80 fb       	bst	r24, 0
    3f1a:	91 f9       	bld	r25, 1
    3f1c:	22 c0       	rjmp	.+68     	; 0x3f62 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    3f1e:	8e e0       	ldi	r24, 0x0E	; 14
    3f20:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    3f24:	88 23       	and	r24, r24
    3f26:	51 f0       	breq	.+20     	; 0x3f3c <bootmagic+0xa6>
            debug_config.keyboard = !debug_config.keyboard;
    3f28:	90 91 c7 01 	lds	r25, 0x01C7
    3f2c:	92 fb       	bst	r25, 2
    3f2e:	88 27       	eor	r24, r24
    3f30:	80 f9       	bld	r24, 0
    3f32:	21 e0       	ldi	r18, 0x01	; 1
    3f34:	82 27       	eor	r24, r18
    3f36:	80 fb       	bst	r24, 0
    3f38:	92 f9       	bld	r25, 2
    3f3a:	13 c0       	rjmp	.+38     	; 0x3f62 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    3f3c:	80 e1       	ldi	r24, 0x10	; 16
    3f3e:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    3f42:	90 91 c7 01 	lds	r25, 0x01C7
    3f46:	88 23       	and	r24, r24
    3f48:	41 f0       	breq	.+16     	; 0x3f5a <bootmagic+0xc4>
            debug_config.mouse = !debug_config.mouse;
    3f4a:	93 fb       	bst	r25, 3
    3f4c:	88 27       	eor	r24, r24
    3f4e:	80 f9       	bld	r24, 0
    3f50:	21 e0       	ldi	r18, 0x01	; 1
    3f52:	82 27       	eor	r24, r18
    3f54:	80 fb       	bst	r24, 0
    3f56:	93 f9       	bld	r25, 3
    3f58:	04 c0       	rjmp	.+8      	; 0x3f62 <bootmagic+0xcc>
        } else {
            debug_config.enable = !debug_config.enable;
    3f5a:	89 2f       	mov	r24, r25
    3f5c:	80 95       	com	r24
    3f5e:	80 fb       	bst	r24, 0
    3f60:	90 f9       	bld	r25, 0
    3f62:	90 93 c7 01 	sts	0x01C7, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    3f66:	80 91 c7 01 	lds	r24, 0x01C7
    3f6a:	0e 94 a7 20 	call	0x414e	; 0x414e <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    3f6e:	0e 94 b5 20 	call	0x416a	; 0x416a <eeconfig_read_keymap>
    3f72:	80 93 d8 01 	sts	0x01D8, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    3f76:	80 ee       	ldi	r24, 0xE0	; 224
    3f78:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    3f7c:	88 23       	and	r24, r24
    3f7e:	41 f0       	breq	.+16     	; 0x3f90 <bootmagic+0xfa>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    3f80:	80 91 d8 01 	lds	r24, 0x01D8
    3f84:	98 2f       	mov	r25, r24
    3f86:	90 95       	com	r25
    3f88:	90 fb       	bst	r25, 0
    3f8a:	80 f9       	bld	r24, 0
    3f8c:	80 93 d8 01 	sts	0x01D8, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    3f90:	89 e3       	ldi	r24, 0x39	; 57
    3f92:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    3f96:	88 23       	and	r24, r24
    3f98:	59 f0       	breq	.+22     	; 0x3fb0 <bootmagic+0x11a>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    3f9a:	90 91 d8 01 	lds	r25, 0x01D8
    3f9e:	91 fb       	bst	r25, 1
    3fa0:	88 27       	eor	r24, r24
    3fa2:	80 f9       	bld	r24, 0
    3fa4:	21 e0       	ldi	r18, 0x01	; 1
    3fa6:	82 27       	eor	r24, r18
    3fa8:	80 fb       	bst	r24, 0
    3faa:	91 f9       	bld	r25, 1
    3fac:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    3fb0:	82 ee       	ldi	r24, 0xE2	; 226
    3fb2:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    3fb6:	88 23       	and	r24, r24
    3fb8:	59 f0       	breq	.+22     	; 0x3fd0 <bootmagic+0x13a>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    3fba:	90 91 d8 01 	lds	r25, 0x01D8
    3fbe:	92 fb       	bst	r25, 2
    3fc0:	88 27       	eor	r24, r24
    3fc2:	80 f9       	bld	r24, 0
    3fc4:	21 e0       	ldi	r18, 0x01	; 1
    3fc6:	82 27       	eor	r24, r18
    3fc8:	80 fb       	bst	r24, 0
    3fca:	92 f9       	bld	r25, 2
    3fcc:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    3fd0:	86 ee       	ldi	r24, 0xE6	; 230
    3fd2:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    3fd6:	88 23       	and	r24, r24
    3fd8:	59 f0       	breq	.+22     	; 0x3ff0 <bootmagic+0x15a>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    3fda:	90 91 d8 01 	lds	r25, 0x01D8
    3fde:	93 fb       	bst	r25, 3
    3fe0:	88 27       	eor	r24, r24
    3fe2:	80 f9       	bld	r24, 0
    3fe4:	21 e0       	ldi	r18, 0x01	; 1
    3fe6:	82 27       	eor	r24, r18
    3fe8:	80 fb       	bst	r24, 0
    3fea:	93 f9       	bld	r25, 3
    3fec:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    3ff0:	83 ee       	ldi	r24, 0xE3	; 227
    3ff2:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    3ff6:	88 23       	and	r24, r24
    3ff8:	59 f0       	breq	.+22     	; 0x4010 <bootmagic+0x17a>
        keymap_config.no_gui = !keymap_config.no_gui;
    3ffa:	90 91 d8 01 	lds	r25, 0x01D8
    3ffe:	94 fb       	bst	r25, 4
    4000:	88 27       	eor	r24, r24
    4002:	80 f9       	bld	r24, 0
    4004:	21 e0       	ldi	r18, 0x01	; 1
    4006:	82 27       	eor	r24, r18
    4008:	80 fb       	bst	r24, 0
    400a:	94 f9       	bld	r25, 4
    400c:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    4010:	85 e3       	ldi	r24, 0x35	; 53
    4012:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    4016:	88 23       	and	r24, r24
    4018:	59 f0       	breq	.+22     	; 0x4030 <bootmagic+0x19a>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    401a:	90 91 d8 01 	lds	r25, 0x01D8
    401e:	95 fb       	bst	r25, 5
    4020:	88 27       	eor	r24, r24
    4022:	80 f9       	bld	r24, 0
    4024:	21 e0       	ldi	r18, 0x01	; 1
    4026:	82 27       	eor	r24, r18
    4028:	80 fb       	bst	r24, 0
    402a:	95 f9       	bld	r25, 5
    402c:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    4030:	81 e3       	ldi	r24, 0x31	; 49
    4032:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    4036:	88 23       	and	r24, r24
    4038:	59 f0       	breq	.+22     	; 0x4050 <bootmagic+0x1ba>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    403a:	90 91 d8 01 	lds	r25, 0x01D8
    403e:	96 fb       	bst	r25, 6
    4040:	88 27       	eor	r24, r24
    4042:	80 f9       	bld	r24, 0
    4044:	21 e0       	ldi	r18, 0x01	; 1
    4046:	82 27       	eor	r24, r18
    4048:	80 fb       	bst	r24, 0
    404a:	96 f9       	bld	r25, 6
    404c:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    4050:	81 e1       	ldi	r24, 0x11	; 17
    4052:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    4056:	88 23       	and	r24, r24
    4058:	59 f0       	breq	.+22     	; 0x4070 <bootmagic+0x1da>
        keymap_config.nkro = !keymap_config.nkro;
    405a:	90 91 d8 01 	lds	r25, 0x01D8
    405e:	97 fb       	bst	r25, 7
    4060:	88 27       	eor	r24, r24
    4062:	80 f9       	bld	r24, 0
    4064:	21 e0       	ldi	r18, 0x01	; 1
    4066:	82 27       	eor	r24, r18
    4068:	80 fb       	bst	r24, 0
    406a:	97 f9       	bld	r25, 7
    406c:	90 93 d8 01 	sts	0x01D8, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    4070:	80 91 d8 01 	lds	r24, 0x01D8
    4074:	0e 94 b9 20 	call	0x4172	; 0x4172 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    4078:	80 91 d8 01 	lds	r24, 0x01D8
    407c:	87 fb       	bst	r24, 7
    407e:	88 27       	eor	r24, r24
    4080:	80 f9       	bld	r24, 0
    4082:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    4086:	87 e2       	ldi	r24, 0x27	; 39
    4088:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    408c:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    408e:	8e e1       	ldi	r24, 0x1E	; 30
    4090:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    4094:	81 11       	cpse	r24, r1
    4096:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    4098:	8f e1       	ldi	r24, 0x1F	; 31
    409a:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    409e:	81 11       	cpse	r24, r1
    40a0:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    40a2:	80 e2       	ldi	r24, 0x20	; 32
    40a4:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    40a8:	81 11       	cpse	r24, r1
    40aa:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    40ac:	81 e2       	ldi	r24, 0x21	; 33
    40ae:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    40b2:	81 11       	cpse	r24, r1
    40b4:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    40b6:	82 e2       	ldi	r24, 0x22	; 34
    40b8:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    40bc:	81 11       	cpse	r24, r1
    40be:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    40c0:	83 e2       	ldi	r24, 0x23	; 35
    40c2:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    40c6:	81 11       	cpse	r24, r1
    40c8:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    40ca:	84 e2       	ldi	r24, 0x24	; 36
    40cc:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <bootmagic_scan_keycode>
    40d0:	88 23       	and	r24, r24
    40d2:	11 f0       	breq	.+4      	; 0x40d8 <bootmagic+0x242>
    40d4:	c0 68       	ori	r28, 0x80	; 128
    40d6:	02 c0       	rjmp	.+4      	; 0x40dc <bootmagic+0x246>
    if (default_layer) {
    40d8:	cc 23       	and	r28, r28
    40da:	29 f0       	breq	.+10     	; 0x40e6 <bootmagic+0x250>
        eeconfig_write_default_layer(default_layer);
    40dc:	8c 2f       	mov	r24, r28
    40de:	0e 94 b0 20 	call	0x4160	; 0x4160 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    40e2:	6c 2f       	mov	r22, r28
    40e4:	03 c0       	rjmp	.+6      	; 0x40ec <bootmagic+0x256>
    } else {
        default_layer = eeconfig_read_default_layer();
    40e6:	0e 94 ac 20 	call	0x4158	; 0x4158 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    40ea:	68 2f       	mov	r22, r24
    40ec:	70 e0       	ldi	r23, 0x00	; 0
    40ee:	80 e0       	ldi	r24, 0x00	; 0
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    40f2:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    40f4:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <default_layer_set>
    }
}
    40f8:	cf 91       	pop	r28
    40fa:	08 95       	ret

000040fc <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    40fc:	6d ee       	ldi	r22, 0xED	; 237
    40fe:	7e ef       	ldi	r23, 0xFE	; 254
    4100:	80 e0       	ldi	r24, 0x00	; 0
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	0e 94 f6 29 	call	0x53ec	; 0x53ec <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4108:	60 e0       	ldi	r22, 0x00	; 0
    410a:	82 e0       	ldi	r24, 0x02	; 2
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	0e 94 e8 29 	call	0x53d0	; 0x53d0 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    4112:	60 e0       	ldi	r22, 0x00	; 0
    4114:	83 e0       	ldi	r24, 0x03	; 3
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	0e 94 e8 29 	call	0x53d0	; 0x53d0 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    411c:	60 e0       	ldi	r22, 0x00	; 0
    411e:	84 e0       	ldi	r24, 0x04	; 4
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	0e 94 e8 29 	call	0x53d0	; 0x53d0 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    4126:	60 e0       	ldi	r22, 0x00	; 0
    4128:	85 e0       	ldi	r24, 0x05	; 5
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	0c 94 e8 29 	jmp	0x53d0	; 0x53d0 <__eewr_byte_m32u4>

00004130 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	0e 94 e2 29 	call	0x53c4	; 0x53c4 <__eerd_word_m32u4>
    4138:	21 e0       	ldi	r18, 0x01	; 1
    413a:	8d 3e       	cpi	r24, 0xED	; 237
    413c:	9e 4f       	sbci	r25, 0xFE	; 254
    413e:	09 f0       	breq	.+2      	; 0x4142 <eeconfig_is_enabled+0x12>
    4140:	20 e0       	ldi	r18, 0x00	; 0
}
    4142:	82 2f       	mov	r24, r18
    4144:	08 95       	ret

00004146 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4146:	82 e0       	ldi	r24, 0x02	; 2
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	0c 94 da 29 	jmp	0x53b4	; 0x53b4 <__eerd_byte_m32u4>

0000414e <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    414e:	68 2f       	mov	r22, r24
    4150:	82 e0       	ldi	r24, 0x02	; 2
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	0c 94 e8 29 	jmp	0x53d0	; 0x53d0 <__eewr_byte_m32u4>

00004158 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    4158:	83 e0       	ldi	r24, 0x03	; 3
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	0c 94 da 29 	jmp	0x53b4	; 0x53b4 <__eerd_byte_m32u4>

00004160 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4160:	68 2f       	mov	r22, r24
    4162:	83 e0       	ldi	r24, 0x03	; 3
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	0c 94 e8 29 	jmp	0x53d0	; 0x53d0 <__eewr_byte_m32u4>

0000416a <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    416a:	84 e0       	ldi	r24, 0x04	; 4
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	0c 94 da 29 	jmp	0x53b4	; 0x53b4 <__eerd_byte_m32u4>

00004172 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4172:	68 2f       	mov	r22, r24
    4174:	84 e0       	ldi	r24, 0x04	; 4
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	0c 94 e8 29 	jmp	0x53d0	; 0x53d0 <__eewr_byte_m32u4>

0000417c <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    417c:	80 91 cf 01 	lds	r24, 0x01CF
    4180:	80 ff       	sbrs	r24, 0
    4182:	0b c0       	rjmp	.+22     	; 0x419a <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    4184:	60 91 12 01 	lds	r22, 0x0112
    4188:	85 e0       	ldi	r24, 0x05	; 5
    418a:	68 9f       	mul	r22, r24
    418c:	b0 01       	movw	r22, r0
    418e:	11 24       	eor	r1, r1
    4190:	75 95       	asr	r23
    4192:	67 95       	ror	r22
    4194:	75 95       	asr	r23
    4196:	67 95       	ror	r22
    4198:	2a c0       	rjmp	.+84     	; 0x41ee <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    419a:	81 ff       	sbrs	r24, 1
    419c:	09 c0       	rjmp	.+18     	; 0x41b0 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    419e:	60 91 12 01 	lds	r22, 0x0112
    41a2:	85 e0       	ldi	r24, 0x05	; 5
    41a4:	68 9f       	mul	r22, r24
    41a6:	b0 01       	movw	r22, r0
    41a8:	11 24       	eor	r1, r1
    41aa:	75 95       	asr	r23
    41ac:	67 95       	ror	r22
    41ae:	1f c0       	rjmp	.+62     	; 0x41ee <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    41b0:	82 ff       	sbrs	r24, 2
    41b2:	07 c0       	rjmp	.+14     	; 0x41c2 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    41b4:	60 91 12 01 	lds	r22, 0x0112
    41b8:	85 e0       	ldi	r24, 0x05	; 5
    41ba:	68 9f       	mul	r22, r24
    41bc:	b0 01       	movw	r22, r0
    41be:	11 24       	eor	r1, r1
    41c0:	16 c0       	rjmp	.+44     	; 0x41ee <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    41c2:	40 91 d0 01 	lds	r20, 0x01D0
    41c6:	44 23       	and	r20, r20
    41c8:	c9 f0       	breq	.+50     	; 0x41fc <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    41ca:	60 91 11 01 	lds	r22, 0x0111
    41ce:	46 17       	cp	r20, r22
    41d0:	88 f7       	brcc	.-30     	; 0x41b4 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    41d2:	20 91 12 01 	lds	r18, 0x0112
    41d6:	85 e0       	ldi	r24, 0x05	; 5
    41d8:	28 9f       	mul	r18, r24
    41da:	90 01       	movw	r18, r0
    41dc:	11 24       	eor	r1, r1
    41de:	42 9f       	mul	r20, r18
    41e0:	c0 01       	movw	r24, r0
    41e2:	43 9f       	mul	r20, r19
    41e4:	90 0d       	add	r25, r0
    41e6:	11 24       	eor	r1, r1
    41e8:	70 e0       	ldi	r23, 0x00	; 0
    41ea:	0e 94 ac 29 	call	0x5358	; 0x5358 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    41ee:	60 38       	cpi	r22, 0x80	; 128
    41f0:	71 05       	cpc	r23, r1
    41f2:	40 f4       	brcc	.+16     	; 0x4204 <move_unit+0x88>
    41f4:	61 15       	cp	r22, r1
    41f6:	71 05       	cpc	r23, r1
    41f8:	39 f0       	breq	.+14     	; 0x4208 <move_unit+0x8c>
    41fa:	02 c0       	rjmp	.+4      	; 0x4200 <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    41fc:	65 e0       	ldi	r22, 0x05	; 5
    41fe:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4200:	86 2f       	mov	r24, r22
    4202:	08 95       	ret
    4204:	8f e7       	ldi	r24, 0x7F	; 127
    4206:	08 95       	ret
    4208:	81 e0       	ldi	r24, 0x01	; 1
}
    420a:	08 95       	ret

0000420c <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    420c:	80 91 cf 01 	lds	r24, 0x01CF
    4210:	80 ff       	sbrs	r24, 0
    4212:	08 c0       	rjmp	.+16     	; 0x4224 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4214:	60 91 10 01 	lds	r22, 0x0110
    4218:	70 e0       	ldi	r23, 0x00	; 0
    421a:	75 95       	asr	r23
    421c:	67 95       	ror	r22
    421e:	75 95       	asr	r23
    4220:	67 95       	ror	r22
    4222:	21 c0       	rjmp	.+66     	; 0x4266 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    4224:	81 ff       	sbrs	r24, 1
    4226:	06 c0       	rjmp	.+12     	; 0x4234 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4228:	60 91 10 01 	lds	r22, 0x0110
    422c:	70 e0       	ldi	r23, 0x00	; 0
    422e:	75 95       	asr	r23
    4230:	67 95       	ror	r22
    4232:	19 c0       	rjmp	.+50     	; 0x4266 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    4234:	82 ff       	sbrs	r24, 2
    4236:	04 c0       	rjmp	.+8      	; 0x4240 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4238:	60 91 10 01 	lds	r22, 0x0110
    423c:	70 e0       	ldi	r23, 0x00	; 0
    423e:	10 c0       	rjmp	.+32     	; 0x4260 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    4240:	80 91 d0 01 	lds	r24, 0x01D0
    4244:	88 23       	and	r24, r24
    4246:	c1 f0       	breq	.+48     	; 0x4278 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4248:	60 91 0f 01 	lds	r22, 0x010F
    424c:	86 17       	cp	r24, r22
    424e:	a0 f7       	brcc	.-24     	; 0x4238 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4250:	90 91 10 01 	lds	r25, 0x0110
    4254:	98 9f       	mul	r25, r24
    4256:	c0 01       	movw	r24, r0
    4258:	11 24       	eor	r1, r1
    425a:	70 e0       	ldi	r23, 0x00	; 0
    425c:	0e 94 ac 29 	call	0x5358	; 0x5358 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4260:	60 38       	cpi	r22, 0x80	; 128
    4262:	71 05       	cpc	r23, r1
    4264:	28 f4       	brcc	.+10     	; 0x4270 <wheel_unit+0x64>
    4266:	61 15       	cp	r22, r1
    4268:	71 05       	cpc	r23, r1
    426a:	21 f0       	breq	.+8      	; 0x4274 <wheel_unit+0x68>
    426c:	86 2f       	mov	r24, r22
    426e:	08 95       	ret
    4270:	8f e7       	ldi	r24, 0x7F	; 127
    4272:	08 95       	ret
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    4278:	61 e0       	ldi	r22, 0x01	; 1
    427a:	70 e0       	ldi	r23, 0x00	; 0
    427c:	f4 cf       	rjmp	.-24     	; 0x4266 <wheel_unit+0x5a>

0000427e <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    427e:	80 3f       	cpi	r24, 0xF0	; 240
    4280:	21 f4       	brne	.+8      	; 0x428a <mousekey_on+0xc>
    4282:	0e 94 be 20 	call	0x417c	; 0x417c <move_unit>
    4286:	81 95       	neg	r24
    4288:	04 c0       	rjmp	.+8      	; 0x4292 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    428a:	81 3f       	cpi	r24, 0xF1	; 241
    428c:	29 f4       	brne	.+10     	; 0x4298 <mousekey_on+0x1a>
    428e:	0e 94 be 20 	call	0x417c	; 0x417c <move_unit>
    4292:	80 93 d3 01 	sts	0x01D3, r24
    4296:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4298:	82 3f       	cpi	r24, 0xF2	; 242
    429a:	21 f4       	brne	.+8      	; 0x42a4 <mousekey_on+0x26>
    429c:	0e 94 be 20 	call	0x417c	; 0x417c <move_unit>
    42a0:	81 95       	neg	r24
    42a2:	04 c0       	rjmp	.+8      	; 0x42ac <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    42a4:	83 3f       	cpi	r24, 0xF3	; 243
    42a6:	29 f4       	brne	.+10     	; 0x42b2 <mousekey_on+0x34>
    42a8:	0e 94 be 20 	call	0x417c	; 0x417c <move_unit>
    42ac:	80 93 d2 01 	sts	0x01D2, r24
    42b0:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    42b2:	89 3f       	cpi	r24, 0xF9	; 249
    42b4:	19 f4       	brne	.+6      	; 0x42bc <mousekey_on+0x3e>
    42b6:	0e 94 06 21 	call	0x420c	; 0x420c <wheel_unit>
    42ba:	05 c0       	rjmp	.+10     	; 0x42c6 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    42bc:	8a 3f       	cpi	r24, 0xFA	; 250
    42be:	31 f4       	brne	.+12     	; 0x42cc <mousekey_on+0x4e>
    42c0:	0e 94 06 21 	call	0x420c	; 0x420c <wheel_unit>
    42c4:	81 95       	neg	r24
    42c6:	80 93 d4 01 	sts	0x01D4, r24
    42ca:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    42cc:	8b 3f       	cpi	r24, 0xFB	; 251
    42ce:	21 f4       	brne	.+8      	; 0x42d8 <mousekey_on+0x5a>
    42d0:	0e 94 06 21 	call	0x420c	; 0x420c <wheel_unit>
    42d4:	81 95       	neg	r24
    42d6:	04 c0       	rjmp	.+8      	; 0x42e0 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    42d8:	8c 3f       	cpi	r24, 0xFC	; 252
    42da:	29 f4       	brne	.+10     	; 0x42e6 <mousekey_on+0x68>
    42dc:	0e 94 06 21 	call	0x420c	; 0x420c <wheel_unit>
    42e0:	80 93 d5 01 	sts	0x01D5, r24
    42e4:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    42e6:	84 3f       	cpi	r24, 0xF4	; 244
    42e8:	21 f4       	brne	.+8      	; 0x42f2 <mousekey_on+0x74>
    42ea:	80 91 d1 01 	lds	r24, 0x01D1
    42ee:	81 60       	ori	r24, 0x01	; 1
    42f0:	17 c0       	rjmp	.+46     	; 0x4320 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    42f2:	85 3f       	cpi	r24, 0xF5	; 245
    42f4:	21 f4       	brne	.+8      	; 0x42fe <mousekey_on+0x80>
    42f6:	80 91 d1 01 	lds	r24, 0x01D1
    42fa:	82 60       	ori	r24, 0x02	; 2
    42fc:	11 c0       	rjmp	.+34     	; 0x4320 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    42fe:	86 3f       	cpi	r24, 0xF6	; 246
    4300:	21 f4       	brne	.+8      	; 0x430a <mousekey_on+0x8c>
    4302:	80 91 d1 01 	lds	r24, 0x01D1
    4306:	84 60       	ori	r24, 0x04	; 4
    4308:	0b c0       	rjmp	.+22     	; 0x4320 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    430a:	87 3f       	cpi	r24, 0xF7	; 247
    430c:	21 f4       	brne	.+8      	; 0x4316 <mousekey_on+0x98>
    430e:	80 91 d1 01 	lds	r24, 0x01D1
    4312:	88 60       	ori	r24, 0x08	; 8
    4314:	05 c0       	rjmp	.+10     	; 0x4320 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4316:	88 3f       	cpi	r24, 0xF8	; 248
    4318:	31 f4       	brne	.+12     	; 0x4326 <mousekey_on+0xa8>
    431a:	80 91 d1 01 	lds	r24, 0x01D1
    431e:	80 61       	ori	r24, 0x10	; 16
    4320:	80 93 d1 01 	sts	0x01D1, r24
    4324:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4326:	8d 3f       	cpi	r24, 0xFD	; 253
    4328:	21 f4       	brne	.+8      	; 0x4332 <mousekey_on+0xb4>
    432a:	80 91 cf 01 	lds	r24, 0x01CF
    432e:	81 60       	ori	r24, 0x01	; 1
    4330:	0b c0       	rjmp	.+22     	; 0x4348 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4332:	8e 3f       	cpi	r24, 0xFE	; 254
    4334:	21 f4       	brne	.+8      	; 0x433e <mousekey_on+0xc0>
    4336:	80 91 cf 01 	lds	r24, 0x01CF
    433a:	82 60       	ori	r24, 0x02	; 2
    433c:	05 c0       	rjmp	.+10     	; 0x4348 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    433e:	8f 3f       	cpi	r24, 0xFF	; 255
    4340:	29 f4       	brne	.+10     	; 0x434c <mousekey_on+0xce>
    4342:	80 91 cf 01 	lds	r24, 0x01CF
    4346:	84 60       	ori	r24, 0x04	; 4
    4348:	80 93 cf 01 	sts	0x01CF, r24
    434c:	08 95       	ret

0000434e <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    434e:	80 3f       	cpi	r24, 0xF0	; 240
    4350:	39 f4       	brne	.+14     	; 0x4360 <mousekey_off+0x12>
    4352:	80 91 d3 01 	lds	r24, 0x01D3
    4356:	87 ff       	sbrs	r24, 7
    4358:	6c c0       	rjmp	.+216    	; 0x4432 <mousekey_off+0xe4>
    435a:	10 92 d3 01 	sts	0x01D3, r1
    435e:	69 c0       	rjmp	.+210    	; 0x4432 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4360:	81 3f       	cpi	r24, 0xF1	; 241
    4362:	29 f4       	brne	.+10     	; 0x436e <mousekey_off+0x20>
    4364:	80 91 d3 01 	lds	r24, 0x01D3
    4368:	18 16       	cp	r1, r24
    436a:	bc f3       	brlt	.-18     	; 0x435a <mousekey_off+0xc>
    436c:	62 c0       	rjmp	.+196    	; 0x4432 <mousekey_off+0xe4>
    436e:	90 91 d2 01 	lds	r25, 0x01D2
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4372:	82 3f       	cpi	r24, 0xF2	; 242
    4374:	29 f4       	brne	.+10     	; 0x4380 <mousekey_off+0x32>
    4376:	97 ff       	sbrs	r25, 7
    4378:	5c c0       	rjmp	.+184    	; 0x4432 <mousekey_off+0xe4>
    437a:	10 92 d2 01 	sts	0x01D2, r1
    437e:	59 c0       	rjmp	.+178    	; 0x4432 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    4380:	83 3f       	cpi	r24, 0xF3	; 243
    4382:	19 f4       	brne	.+6      	; 0x438a <mousekey_off+0x3c>
    4384:	19 16       	cp	r1, r25
    4386:	cc f3       	brlt	.-14     	; 0x437a <mousekey_off+0x2c>
    4388:	54 c0       	rjmp	.+168    	; 0x4432 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    438a:	89 3f       	cpi	r24, 0xF9	; 249
    438c:	41 f4       	brne	.+16     	; 0x439e <mousekey_off+0x50>
    438e:	80 91 d4 01 	lds	r24, 0x01D4
    4392:	18 16       	cp	r1, r24
    4394:	0c f0       	brlt	.+2      	; 0x4398 <mousekey_off+0x4a>
    4396:	4d c0       	rjmp	.+154    	; 0x4432 <mousekey_off+0xe4>
    4398:	10 92 d4 01 	sts	0x01D4, r1
    439c:	4a c0       	rjmp	.+148    	; 0x4432 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    439e:	8a 3f       	cpi	r24, 0xFA	; 250
    43a0:	29 f4       	brne	.+10     	; 0x43ac <mousekey_off+0x5e>
    43a2:	80 91 d4 01 	lds	r24, 0x01D4
    43a6:	87 ff       	sbrs	r24, 7
    43a8:	44 c0       	rjmp	.+136    	; 0x4432 <mousekey_off+0xe4>
    43aa:	f6 cf       	rjmp	.-20     	; 0x4398 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    43ac:	8b 3f       	cpi	r24, 0xFB	; 251
    43ae:	39 f4       	brne	.+14     	; 0x43be <mousekey_off+0x70>
    43b0:	80 91 d5 01 	lds	r24, 0x01D5
    43b4:	87 ff       	sbrs	r24, 7
    43b6:	3d c0       	rjmp	.+122    	; 0x4432 <mousekey_off+0xe4>
    43b8:	10 92 d5 01 	sts	0x01D5, r1
    43bc:	3a c0       	rjmp	.+116    	; 0x4432 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    43be:	8c 3f       	cpi	r24, 0xFC	; 252
    43c0:	29 f4       	brne	.+10     	; 0x43cc <mousekey_off+0x7e>
    43c2:	80 91 d5 01 	lds	r24, 0x01D5
    43c6:	18 16       	cp	r1, r24
    43c8:	bc f3       	brlt	.-18     	; 0x43b8 <mousekey_off+0x6a>
    43ca:	33 c0       	rjmp	.+102    	; 0x4432 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    43cc:	84 3f       	cpi	r24, 0xF4	; 244
    43ce:	21 f4       	brne	.+8      	; 0x43d8 <mousekey_off+0x8a>
    43d0:	80 91 d1 01 	lds	r24, 0x01D1
    43d4:	8e 7f       	andi	r24, 0xFE	; 254
    43d6:	17 c0       	rjmp	.+46     	; 0x4406 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    43d8:	85 3f       	cpi	r24, 0xF5	; 245
    43da:	21 f4       	brne	.+8      	; 0x43e4 <mousekey_off+0x96>
    43dc:	80 91 d1 01 	lds	r24, 0x01D1
    43e0:	8d 7f       	andi	r24, 0xFD	; 253
    43e2:	11 c0       	rjmp	.+34     	; 0x4406 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    43e4:	86 3f       	cpi	r24, 0xF6	; 246
    43e6:	21 f4       	brne	.+8      	; 0x43f0 <mousekey_off+0xa2>
    43e8:	80 91 d1 01 	lds	r24, 0x01D1
    43ec:	8b 7f       	andi	r24, 0xFB	; 251
    43ee:	0b c0       	rjmp	.+22     	; 0x4406 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    43f0:	87 3f       	cpi	r24, 0xF7	; 247
    43f2:	21 f4       	brne	.+8      	; 0x43fc <mousekey_off+0xae>
    43f4:	80 91 d1 01 	lds	r24, 0x01D1
    43f8:	87 7f       	andi	r24, 0xF7	; 247
    43fa:	05 c0       	rjmp	.+10     	; 0x4406 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    43fc:	88 3f       	cpi	r24, 0xF8	; 248
    43fe:	31 f4       	brne	.+12     	; 0x440c <mousekey_off+0xbe>
    4400:	80 91 d1 01 	lds	r24, 0x01D1
    4404:	8f 7e       	andi	r24, 0xEF	; 239
    4406:	80 93 d1 01 	sts	0x01D1, r24
    440a:	13 c0       	rjmp	.+38     	; 0x4432 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    440c:	8d 3f       	cpi	r24, 0xFD	; 253
    440e:	21 f4       	brne	.+8      	; 0x4418 <mousekey_off+0xca>
    4410:	80 91 cf 01 	lds	r24, 0x01CF
    4414:	8e 7f       	andi	r24, 0xFE	; 254
    4416:	0b c0       	rjmp	.+22     	; 0x442e <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4418:	8e 3f       	cpi	r24, 0xFE	; 254
    441a:	21 f4       	brne	.+8      	; 0x4424 <mousekey_off+0xd6>
    441c:	80 91 cf 01 	lds	r24, 0x01CF
    4420:	8d 7f       	andi	r24, 0xFD	; 253
    4422:	05 c0       	rjmp	.+10     	; 0x442e <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4424:	8f 3f       	cpi	r24, 0xFF	; 255
    4426:	29 f4       	brne	.+10     	; 0x4432 <mousekey_off+0xe4>
    4428:	80 91 cf 01 	lds	r24, 0x01CF
    442c:	8b 7f       	andi	r24, 0xFB	; 251
    442e:	80 93 cf 01 	sts	0x01CF, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4432:	80 91 d2 01 	lds	r24, 0x01D2
    4436:	81 11       	cpse	r24, r1
    4438:	0e c0       	rjmp	.+28     	; 0x4456 <mousekey_off+0x108>
    443a:	80 91 d3 01 	lds	r24, 0x01D3
    443e:	81 11       	cpse	r24, r1
    4440:	0a c0       	rjmp	.+20     	; 0x4456 <mousekey_off+0x108>
    4442:	80 91 d4 01 	lds	r24, 0x01D4
    4446:	81 11       	cpse	r24, r1
    4448:	06 c0       	rjmp	.+12     	; 0x4456 <mousekey_off+0x108>
    444a:	80 91 d5 01 	lds	r24, 0x01D5
    444e:	81 11       	cpse	r24, r1
    4450:	02 c0       	rjmp	.+4      	; 0x4456 <mousekey_off+0x108>
        mousekey_repeat = 0;
    4452:	10 92 d0 01 	sts	0x01D0, r1
    4456:	08 95       	ret

00004458 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4458:	80 91 c7 01 	lds	r24, 0x01C7
    445c:	83 ff       	sbrs	r24, 3
    445e:	7e c0       	rjmp	.+252    	; 0x455c <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4460:	81 e7       	ldi	r24, 0x71	; 113
    4462:	94 e0       	ldi	r25, 0x04	; 4
    4464:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    phex(mouse_report.buttons); print("|");
    4468:	80 91 d1 01 	lds	r24, 0x01D1
    446c:	1f 92       	push	r1
    446e:	8f 93       	push	r24
    4470:	8c e6       	ldi	r24, 0x6C	; 108
    4472:	94 e0       	ldi	r25, 0x04	; 4
    4474:	9f 93       	push	r25
    4476:	8f 93       	push	r24
    4478:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    447c:	8a e6       	ldi	r24, 0x6A	; 106
    447e:	94 e0       	ldi	r25, 0x04	; 4
    4480:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print_decs(mouse_report.x); print(" ");
    4484:	20 91 d2 01 	lds	r18, 0x01D2
    4488:	82 2f       	mov	r24, r18
    448a:	99 27       	eor	r25, r25
    448c:	87 fd       	sbrc	r24, 7
    448e:	90 95       	com	r25
    4490:	9f 93       	push	r25
    4492:	2f 93       	push	r18
    4494:	87 e6       	ldi	r24, 0x67	; 103
    4496:	94 e0       	ldi	r25, 0x04	; 4
    4498:	9f 93       	push	r25
    449a:	8f 93       	push	r24
    449c:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    44a0:	85 e6       	ldi	r24, 0x65	; 101
    44a2:	94 e0       	ldi	r25, 0x04	; 4
    44a4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print_decs(mouse_report.y); print(" ");
    44a8:	20 91 d3 01 	lds	r18, 0x01D3
    44ac:	82 2f       	mov	r24, r18
    44ae:	99 27       	eor	r25, r25
    44b0:	87 fd       	sbrc	r24, 7
    44b2:	90 95       	com	r25
    44b4:	9f 93       	push	r25
    44b6:	2f 93       	push	r18
    44b8:	82 e6       	ldi	r24, 0x62	; 98
    44ba:	94 e0       	ldi	r25, 0x04	; 4
    44bc:	9f 93       	push	r25
    44be:	8f 93       	push	r24
    44c0:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    44c4:	80 e6       	ldi	r24, 0x60	; 96
    44c6:	94 e0       	ldi	r25, 0x04	; 4
    44c8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print_decs(mouse_report.v); print(" ");
    44cc:	20 91 d4 01 	lds	r18, 0x01D4
    44d0:	82 2f       	mov	r24, r18
    44d2:	99 27       	eor	r25, r25
    44d4:	87 fd       	sbrc	r24, 7
    44d6:	90 95       	com	r25
    44d8:	9f 93       	push	r25
    44da:	2f 93       	push	r18
    44dc:	8d e5       	ldi	r24, 0x5D	; 93
    44de:	94 e0       	ldi	r25, 0x04	; 4
    44e0:	9f 93       	push	r25
    44e2:	8f 93       	push	r24
    44e4:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    44e8:	8b e5       	ldi	r24, 0x5B	; 91
    44ea:	94 e0       	ldi	r25, 0x04	; 4
    44ec:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print_decs(mouse_report.h); print("](");
    44f0:	20 91 d5 01 	lds	r18, 0x01D5
    44f4:	82 2f       	mov	r24, r18
    44f6:	99 27       	eor	r25, r25
    44f8:	87 fd       	sbrc	r24, 7
    44fa:	90 95       	com	r25
    44fc:	9f 93       	push	r25
    44fe:	2f 93       	push	r18
    4500:	88 e5       	ldi	r24, 0x58	; 88
    4502:	94 e0       	ldi	r25, 0x04	; 4
    4504:	9f 93       	push	r25
    4506:	8f 93       	push	r24
    4508:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    450c:	85 e5       	ldi	r24, 0x55	; 85
    450e:	94 e0       	ldi	r25, 0x04	; 4
    4510:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print_dec(mousekey_repeat); print("/");
    4514:	80 91 d0 01 	lds	r24, 0x01D0
    4518:	1f 92       	push	r1
    451a:	8f 93       	push	r24
    451c:	82 e5       	ldi	r24, 0x52	; 82
    451e:	94 e0       	ldi	r25, 0x04	; 4
    4520:	9f 93       	push	r25
    4522:	8f 93       	push	r24
    4524:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4528:	80 e5       	ldi	r24, 0x50	; 80
    452a:	94 e0       	ldi	r25, 0x04	; 4
    452c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print_dec(mousekey_accel); print(")\n");
    4530:	80 91 cf 01 	lds	r24, 0x01CF
    4534:	1f 92       	push	r1
    4536:	8f 93       	push	r24
    4538:	8d e4       	ldi	r24, 0x4D	; 77
    453a:	94 e0       	ldi	r25, 0x04	; 4
    453c:	9f 93       	push	r25
    453e:	8f 93       	push	r24
    4540:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4544:	8a e4       	ldi	r24, 0x4A	; 74
    4546:	94 e0       	ldi	r25, 0x04	; 4
    4548:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    454c:	8d b7       	in	r24, 0x3d	; 61
    454e:	9e b7       	in	r25, 0x3e	; 62
    4550:	4c 96       	adiw	r24, 0x1c	; 28
    4552:	0f b6       	in	r0, 0x3f	; 63
    4554:	f8 94       	cli
    4556:	9e bf       	out	0x3e, r25	; 62
    4558:	0f be       	out	0x3f, r0	; 63
    455a:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    455c:	81 ed       	ldi	r24, 0xD1	; 209
    455e:	91 e0       	ldi	r25, 0x01	; 1
    4560:	0e 94 80 10 	call	0x2100	; 0x2100 <host_mouse_send>
    last_timer = timer_read();
    4564:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <timer_read>
    4568:	90 93 ce 01 	sts	0x01CE, r25
    456c:	80 93 cd 01 	sts	0x01CD, r24
    4570:	08 95       	ret

00004572 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4572:	1f 93       	push	r17
    4574:	cf 93       	push	r28
    4576:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4578:	80 91 cd 01 	lds	r24, 0x01CD
    457c:	90 91 ce 01 	lds	r25, 0x01CE
    4580:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <timer_elapsed>
    4584:	40 91 d0 01 	lds	r20, 0x01D0
    4588:	44 23       	and	r20, r20
    458a:	21 f0       	breq	.+8      	; 0x4594 <mousekey_task+0x22>
    458c:	20 91 13 01 	lds	r18, 0x0113
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	06 c0       	rjmp	.+12     	; 0x45a0 <mousekey_task+0x2e>
    4594:	20 91 14 01 	lds	r18, 0x0114
    4598:	5a e0       	ldi	r21, 0x0A	; 10
    459a:	25 9f       	mul	r18, r21
    459c:	90 01       	movw	r18, r0
    459e:	11 24       	eor	r1, r1
    45a0:	82 17       	cp	r24, r18
    45a2:	93 07       	cpc	r25, r19
    45a4:	08 f4       	brcc	.+2      	; 0x45a8 <mousekey_task+0x36>
    45a6:	82 c0       	rjmp	.+260    	; 0x46ac <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    45a8:	80 91 d2 01 	lds	r24, 0x01D2
    45ac:	10 91 d3 01 	lds	r17, 0x01D3
    45b0:	d0 91 d4 01 	lds	r29, 0x01D4
    45b4:	c0 91 d5 01 	lds	r28, 0x01D5
    45b8:	81 11       	cpse	r24, r1
    45ba:	07 c0       	rjmp	.+14     	; 0x45ca <mousekey_task+0x58>
    45bc:	11 11       	cpse	r17, r1
    45be:	05 c0       	rjmp	.+10     	; 0x45ca <mousekey_task+0x58>
    45c0:	d1 11       	cpse	r29, r1
    45c2:	03 c0       	rjmp	.+6      	; 0x45ca <mousekey_task+0x58>
    45c4:	cc 23       	and	r28, r28
    45c6:	09 f4       	brne	.+2      	; 0x45ca <mousekey_task+0x58>
    45c8:	71 c0       	rjmp	.+226    	; 0x46ac <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    45ca:	4f 3f       	cpi	r20, 0xFF	; 255
    45cc:	19 f0       	breq	.+6      	; 0x45d4 <mousekey_task+0x62>
        mousekey_repeat++;
    45ce:	4f 5f       	subi	r20, 0xFF	; 255
    45d0:	40 93 d0 01 	sts	0x01D0, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    45d4:	18 16       	cp	r1, r24
    45d6:	24 f4       	brge	.+8      	; 0x45e0 <mousekey_task+0x6e>
    45d8:	0e 94 be 20 	call	0x417c	; 0x417c <move_unit>
    45dc:	80 93 d2 01 	sts	0x01D2, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    45e0:	80 91 d2 01 	lds	r24, 0x01D2
    45e4:	87 ff       	sbrs	r24, 7
    45e6:	05 c0       	rjmp	.+10     	; 0x45f2 <mousekey_task+0x80>
    45e8:	0e 94 be 20 	call	0x417c	; 0x417c <move_unit>
    45ec:	81 95       	neg	r24
    45ee:	80 93 d2 01 	sts	0x01D2, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    45f2:	11 16       	cp	r1, r17
    45f4:	24 f4       	brge	.+8      	; 0x45fe <mousekey_task+0x8c>
    45f6:	0e 94 be 20 	call	0x417c	; 0x417c <move_unit>
    45fa:	80 93 d3 01 	sts	0x01D3, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    45fe:	80 91 d3 01 	lds	r24, 0x01D3
    4602:	87 ff       	sbrs	r24, 7
    4604:	05 c0       	rjmp	.+10     	; 0x4610 <mousekey_task+0x9e>
    4606:	0e 94 be 20 	call	0x417c	; 0x417c <move_unit>
    460a:	81 95       	neg	r24
    460c:	80 93 d3 01 	sts	0x01D3, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    4610:	60 91 d2 01 	lds	r22, 0x01D2
    4614:	66 23       	and	r22, r22
    4616:	39 f1       	breq	.+78     	; 0x4666 <mousekey_task+0xf4>
    4618:	10 91 d3 01 	lds	r17, 0x01D3
    461c:	11 23       	and	r17, r17
    461e:	19 f1       	breq	.+70     	; 0x4666 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    4620:	77 27       	eor	r23, r23
    4622:	67 fd       	sbrc	r22, 7
    4624:	70 95       	com	r23
    4626:	87 2f       	mov	r24, r23
    4628:	97 2f       	mov	r25, r23
    462a:	0e 94 b1 28 	call	0x5162	; 0x5162 <__floatsisf>
    462e:	23 e3       	ldi	r18, 0x33	; 51
    4630:	33 e3       	ldi	r19, 0x33	; 51
    4632:	43 e3       	ldi	r20, 0x33	; 51
    4634:	5f e3       	ldi	r21, 0x3F	; 63
    4636:	0e 94 15 29 	call	0x522a	; 0x522a <__mulsf3>
    463a:	0e 94 7e 28 	call	0x50fc	; 0x50fc <__fixsfsi>
    463e:	60 93 d2 01 	sts	0x01D2, r22
        mouse_report.y *= 0.7;
    4642:	61 2f       	mov	r22, r17
    4644:	77 27       	eor	r23, r23
    4646:	67 fd       	sbrc	r22, 7
    4648:	70 95       	com	r23
    464a:	87 2f       	mov	r24, r23
    464c:	97 2f       	mov	r25, r23
    464e:	0e 94 b1 28 	call	0x5162	; 0x5162 <__floatsisf>
    4652:	23 e3       	ldi	r18, 0x33	; 51
    4654:	33 e3       	ldi	r19, 0x33	; 51
    4656:	43 e3       	ldi	r20, 0x33	; 51
    4658:	5f e3       	ldi	r21, 0x3F	; 63
    465a:	0e 94 15 29 	call	0x522a	; 0x522a <__mulsf3>
    465e:	0e 94 7e 28 	call	0x50fc	; 0x50fc <__fixsfsi>
    4662:	60 93 d3 01 	sts	0x01D3, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4666:	1d 16       	cp	r1, r29
    4668:	24 f4       	brge	.+8      	; 0x4672 <mousekey_task+0x100>
    466a:	0e 94 06 21 	call	0x420c	; 0x420c <wheel_unit>
    466e:	80 93 d4 01 	sts	0x01D4, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4672:	80 91 d4 01 	lds	r24, 0x01D4
    4676:	87 ff       	sbrs	r24, 7
    4678:	05 c0       	rjmp	.+10     	; 0x4684 <mousekey_task+0x112>
    467a:	0e 94 06 21 	call	0x420c	; 0x420c <wheel_unit>
    467e:	81 95       	neg	r24
    4680:	80 93 d4 01 	sts	0x01D4, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4684:	1c 16       	cp	r1, r28
    4686:	24 f4       	brge	.+8      	; 0x4690 <mousekey_task+0x11e>
    4688:	0e 94 06 21 	call	0x420c	; 0x420c <wheel_unit>
    468c:	80 93 d5 01 	sts	0x01D5, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    4690:	80 91 d5 01 	lds	r24, 0x01D5
    4694:	87 ff       	sbrs	r24, 7
    4696:	05 c0       	rjmp	.+10     	; 0x46a2 <mousekey_task+0x130>
    4698:	0e 94 06 21 	call	0x420c	; 0x420c <wheel_unit>
    469c:	81 95       	neg	r24
    469e:	80 93 d5 01 	sts	0x01D5, r24

    mousekey_send();
}
    46a2:	df 91       	pop	r29
    46a4:	cf 91       	pop	r28
    46a6:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    46a8:	0c 94 2c 22 	jmp	0x4458	; 0x4458 <mousekey_send>
}
    46ac:	df 91       	pop	r29
    46ae:	cf 91       	pop	r28
    46b0:	1f 91       	pop	r17
    46b2:	08 95       	ret

000046b4 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    46b4:	e1 ed       	ldi	r30, 0xD1	; 209
    46b6:	f1 e0       	ldi	r31, 0x01	; 1
    46b8:	85 e0       	ldi	r24, 0x05	; 5
    46ba:	df 01       	movw	r26, r30
    46bc:	1d 92       	st	X+, r1
    46be:	8a 95       	dec	r24
    46c0:	e9 f7       	brne	.-6      	; 0x46bc <mousekey_clear+0x8>
    mousekey_repeat = 0;
    46c2:	10 92 d0 01 	sts	0x01D0, r1
    mousekey_accel = 0;
    46c6:	10 92 cf 01 	sts	0x01CF, r1
    46ca:	08 95       	ret

000046cc <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    46cc:	84 e9       	ldi	r24, 0x94	; 148
    46ce:	96 e0       	ldi	r25, 0x06	; 6
    46d0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    46d4:	1f 92       	push	r1
    46d6:	81 e0       	ldi	r24, 0x01	; 1
    46d8:	8f 93       	push	r24
    46da:	1f 92       	push	r1
    46dc:	85 e0       	ldi	r24, 0x05	; 5
    46de:	8f 93       	push	r24
    46e0:	86 e4       	ldi	r24, 0x46	; 70
    46e2:	96 e0       	ldi	r25, 0x06	; 6
    46e4:	9f 93       	push	r25
    46e6:	8f 93       	push	r24
    46e8:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    46ec:	0f 90       	pop	r0
    46ee:	0f 90       	pop	r0
    46f0:	0f 90       	pop	r0
    46f2:	0f 90       	pop	r0
    46f4:	0f 90       	pop	r0
    46f6:	0f 90       	pop	r0
    46f8:	08 95       	ret

000046fa <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    46fa:	83 30       	cpi	r24, 0x03	; 3
    46fc:	e9 f1       	breq	.+122    	; 0x4778 <mousekey_param_inc+0x7e>
    46fe:	28 f4       	brcc	.+10     	; 0x470a <mousekey_param_inc+0x10>
    4700:	81 30       	cpi	r24, 0x01	; 1
    4702:	61 f0       	breq	.+24     	; 0x471c <mousekey_param_inc+0x22>
    4704:	82 30       	cpi	r24, 0x02	; 2
    4706:	09 f1       	breq	.+66     	; 0x474a <mousekey_param_inc+0x50>
    4708:	08 95       	ret
    470a:	85 30       	cpi	r24, 0x05	; 5
    470c:	09 f4       	brne	.+2      	; 0x4710 <mousekey_param_inc+0x16>
    470e:	62 c0       	rjmp	.+196    	; 0x47d4 <mousekey_param_inc+0xda>
    4710:	08 f4       	brcc	.+2      	; 0x4714 <mousekey_param_inc+0x1a>
    4712:	49 c0       	rjmp	.+146    	; 0x47a6 <mousekey_param_inc+0xac>
    4714:	86 30       	cpi	r24, 0x06	; 6
    4716:	09 f4       	brne	.+2      	; 0x471a <mousekey_param_inc+0x20>
    4718:	74 c0       	rjmp	.+232    	; 0x4802 <mousekey_param_inc+0x108>
    471a:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    471c:	20 91 14 01 	lds	r18, 0x0114
    4720:	86 2f       	mov	r24, r22
    4722:	90 e0       	ldi	r25, 0x00	; 0
    4724:	82 0f       	add	r24, r18
    4726:	91 1d       	adc	r25, r1
    4728:	8f 3f       	cpi	r24, 0xFF	; 255
    472a:	91 05       	cpc	r25, r1
    472c:	20 f4       	brcc	.+8      	; 0x4736 <mousekey_param_inc+0x3c>
                mk_delay += inc;
    472e:	62 0f       	add	r22, r18
    4730:	60 93 14 01 	sts	0x0114, r22
    4734:	03 c0       	rjmp	.+6      	; 0x473c <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    4736:	8f ef       	ldi	r24, 0xFF	; 255
    4738:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_delay);
    473c:	80 91 14 01 	lds	r24, 0x0114
    4740:	1f 92       	push	r1
    4742:	8f 93       	push	r24
    4744:	8f e7       	ldi	r24, 0x7F	; 127
    4746:	95 e0       	ldi	r25, 0x05	; 5
    4748:	72 c0       	rjmp	.+228    	; 0x482e <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    474a:	20 91 13 01 	lds	r18, 0x0113
    474e:	86 2f       	mov	r24, r22
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	82 0f       	add	r24, r18
    4754:	91 1d       	adc	r25, r1
    4756:	8f 3f       	cpi	r24, 0xFF	; 255
    4758:	91 05       	cpc	r25, r1
    475a:	20 f4       	brcc	.+8      	; 0x4764 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    475c:	62 0f       	add	r22, r18
    475e:	60 93 13 01 	sts	0x0113, r22
    4762:	03 c0       	rjmp	.+6      	; 0x476a <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    4764:	8f ef       	ldi	r24, 0xFF	; 255
    4766:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_interval);
    476a:	80 91 13 01 	lds	r24, 0x0113
    476e:	1f 92       	push	r1
    4770:	8f 93       	push	r24
    4772:	8d e6       	ldi	r24, 0x6D	; 109
    4774:	95 e0       	ldi	r25, 0x05	; 5
    4776:	5b c0       	rjmp	.+182    	; 0x482e <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4778:	20 91 12 01 	lds	r18, 0x0112
    477c:	86 2f       	mov	r24, r22
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	82 0f       	add	r24, r18
    4782:	91 1d       	adc	r25, r1
    4784:	8f 3f       	cpi	r24, 0xFF	; 255
    4786:	91 05       	cpc	r25, r1
    4788:	20 f4       	brcc	.+8      	; 0x4792 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    478a:	62 0f       	add	r22, r18
    478c:	60 93 12 01 	sts	0x0112, r22
    4790:	03 c0       	rjmp	.+6      	; 0x4798 <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    4792:	8f ef       	ldi	r24, 0xFF	; 255
    4794:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_max_speed);
    4798:	80 91 12 01 	lds	r24, 0x0112
    479c:	1f 92       	push	r1
    479e:	8f 93       	push	r24
    47a0:	8a e5       	ldi	r24, 0x5A	; 90
    47a2:	95 e0       	ldi	r25, 0x05	; 5
    47a4:	44 c0       	rjmp	.+136    	; 0x482e <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    47a6:	20 91 11 01 	lds	r18, 0x0111
    47aa:	86 2f       	mov	r24, r22
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	82 0f       	add	r24, r18
    47b0:	91 1d       	adc	r25, r1
    47b2:	8f 3f       	cpi	r24, 0xFF	; 255
    47b4:	91 05       	cpc	r25, r1
    47b6:	20 f4       	brcc	.+8      	; 0x47c0 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    47b8:	62 0f       	add	r22, r18
    47ba:	60 93 11 01 	sts	0x0111, r22
    47be:	03 c0       	rjmp	.+6      	; 0x47c6 <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    47c0:	8f ef       	ldi	r24, 0xFF	; 255
    47c2:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_time_to_max);
    47c6:	80 91 11 01 	lds	r24, 0x0111
    47ca:	1f 92       	push	r1
    47cc:	8f 93       	push	r24
    47ce:	85 e4       	ldi	r24, 0x45	; 69
    47d0:	95 e0       	ldi	r25, 0x05	; 5
    47d2:	2d c0       	rjmp	.+90     	; 0x482e <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    47d4:	20 91 10 01 	lds	r18, 0x0110
    47d8:	86 2f       	mov	r24, r22
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	82 0f       	add	r24, r18
    47de:	91 1d       	adc	r25, r1
    47e0:	8f 3f       	cpi	r24, 0xFF	; 255
    47e2:	91 05       	cpc	r25, r1
    47e4:	20 f4       	brcc	.+8      	; 0x47ee <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    47e6:	62 0f       	add	r22, r18
    47e8:	60 93 10 01 	sts	0x0110, r22
    47ec:	03 c0       	rjmp	.+6      	; 0x47f4 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    47ee:	8f ef       	ldi	r24, 0xFF	; 255
    47f0:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    47f4:	80 91 10 01 	lds	r24, 0x0110
    47f8:	1f 92       	push	r1
    47fa:	8f 93       	push	r24
    47fc:	8c e2       	ldi	r24, 0x2C	; 44
    47fe:	95 e0       	ldi	r25, 0x05	; 5
    4800:	16 c0       	rjmp	.+44     	; 0x482e <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4802:	20 91 0f 01 	lds	r18, 0x010F
    4806:	86 2f       	mov	r24, r22
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	82 0f       	add	r24, r18
    480c:	91 1d       	adc	r25, r1
    480e:	8f 3f       	cpi	r24, 0xFF	; 255
    4810:	91 05       	cpc	r25, r1
    4812:	20 f4       	brcc	.+8      	; 0x481c <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4814:	62 0f       	add	r22, r18
    4816:	60 93 0f 01 	sts	0x010F, r22
    481a:	03 c0       	rjmp	.+6      	; 0x4822 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    481c:	8f ef       	ldi	r24, 0xFF	; 255
    481e:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4822:	80 91 0f 01 	lds	r24, 0x010F
    4826:	1f 92       	push	r1
    4828:	8f 93       	push	r24
    482a:	81 e1       	ldi	r24, 0x11	; 17
    482c:	95 e0       	ldi	r25, 0x05	; 5
    482e:	9f 93       	push	r25
    4830:	8f 93       	push	r24
    4832:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
            break;
    4836:	0f 90       	pop	r0
    4838:	0f 90       	pop	r0
    483a:	0f 90       	pop	r0
    483c:	0f 90       	pop	r0
    483e:	08 95       	ret

00004840 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4840:	83 30       	cpi	r24, 0x03	; 3
    4842:	81 f1       	breq	.+96     	; 0x48a4 <mousekey_param_dec+0x64>
    4844:	28 f4       	brcc	.+10     	; 0x4850 <mousekey_param_dec+0x10>
    4846:	81 30       	cpi	r24, 0x01	; 1
    4848:	59 f0       	breq	.+22     	; 0x4860 <mousekey_param_dec+0x20>
    484a:	82 30       	cpi	r24, 0x02	; 2
    484c:	d1 f0       	breq	.+52     	; 0x4882 <mousekey_param_dec+0x42>
    484e:	08 95       	ret
    4850:	85 30       	cpi	r24, 0x05	; 5
    4852:	09 f4       	brne	.+2      	; 0x4856 <mousekey_param_dec+0x16>
    4854:	49 c0       	rjmp	.+146    	; 0x48e8 <mousekey_param_dec+0xa8>
    4856:	b8 f1       	brcs	.+110    	; 0x48c6 <mousekey_param_dec+0x86>
    4858:	86 30       	cpi	r24, 0x06	; 6
    485a:	09 f4       	brne	.+2      	; 0x485e <mousekey_param_dec+0x1e>
    485c:	56 c0       	rjmp	.+172    	; 0x490a <mousekey_param_dec+0xca>
    485e:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4860:	80 91 14 01 	lds	r24, 0x0114
    4864:	68 17       	cp	r22, r24
    4866:	20 f4       	brcc	.+8      	; 0x4870 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    4868:	86 1b       	sub	r24, r22
    486a:	80 93 14 01 	sts	0x0114, r24
    486e:	02 c0       	rjmp	.+4      	; 0x4874 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    4870:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_delay);
    4874:	80 91 14 01 	lds	r24, 0x0114
    4878:	1f 92       	push	r1
    487a:	8f 93       	push	r24
    487c:	82 e0       	ldi	r24, 0x02	; 2
    487e:	95 e0       	ldi	r25, 0x05	; 5
    4880:	54 c0       	rjmp	.+168    	; 0x492a <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    4882:	80 91 13 01 	lds	r24, 0x0113
    4886:	68 17       	cp	r22, r24
    4888:	20 f4       	brcc	.+8      	; 0x4892 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    488a:	86 1b       	sub	r24, r22
    488c:	80 93 13 01 	sts	0x0113, r24
    4890:	02 c0       	rjmp	.+4      	; 0x4896 <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    4892:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_interval);
    4896:	80 91 13 01 	lds	r24, 0x0113
    489a:	1f 92       	push	r1
    489c:	8f 93       	push	r24
    489e:	80 ef       	ldi	r24, 0xF0	; 240
    48a0:	94 e0       	ldi	r25, 0x04	; 4
    48a2:	43 c0       	rjmp	.+134    	; 0x492a <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    48a4:	80 91 12 01 	lds	r24, 0x0112
    48a8:	68 17       	cp	r22, r24
    48aa:	20 f4       	brcc	.+8      	; 0x48b4 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    48ac:	86 1b       	sub	r24, r22
    48ae:	80 93 12 01 	sts	0x0112, r24
    48b2:	02 c0       	rjmp	.+4      	; 0x48b8 <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    48b4:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_max_speed);
    48b8:	80 91 12 01 	lds	r24, 0x0112
    48bc:	1f 92       	push	r1
    48be:	8f 93       	push	r24
    48c0:	8d ed       	ldi	r24, 0xDD	; 221
    48c2:	94 e0       	ldi	r25, 0x04	; 4
    48c4:	32 c0       	rjmp	.+100    	; 0x492a <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    48c6:	80 91 11 01 	lds	r24, 0x0111
    48ca:	68 17       	cp	r22, r24
    48cc:	20 f4       	brcc	.+8      	; 0x48d6 <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    48ce:	86 1b       	sub	r24, r22
    48d0:	80 93 11 01 	sts	0x0111, r24
    48d4:	02 c0       	rjmp	.+4      	; 0x48da <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    48d6:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_time_to_max);
    48da:	80 91 11 01 	lds	r24, 0x0111
    48de:	1f 92       	push	r1
    48e0:	8f 93       	push	r24
    48e2:	88 ec       	ldi	r24, 0xC8	; 200
    48e4:	94 e0       	ldi	r25, 0x04	; 4
    48e6:	21 c0       	rjmp	.+66     	; 0x492a <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    48e8:	80 91 10 01 	lds	r24, 0x0110
    48ec:	68 17       	cp	r22, r24
    48ee:	20 f4       	brcc	.+8      	; 0x48f8 <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    48f0:	86 1b       	sub	r24, r22
    48f2:	80 93 10 01 	sts	0x0110, r24
    48f6:	02 c0       	rjmp	.+4      	; 0x48fc <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    48f8:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    48fc:	80 91 10 01 	lds	r24, 0x0110
    4900:	1f 92       	push	r1
    4902:	8f 93       	push	r24
    4904:	8f ea       	ldi	r24, 0xAF	; 175
    4906:	94 e0       	ldi	r25, 0x04	; 4
    4908:	10 c0       	rjmp	.+32     	; 0x492a <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    490a:	80 91 0f 01 	lds	r24, 0x010F
    490e:	68 17       	cp	r22, r24
    4910:	20 f4       	brcc	.+8      	; 0x491a <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4912:	86 1b       	sub	r24, r22
    4914:	80 93 0f 01 	sts	0x010F, r24
    4918:	02 c0       	rjmp	.+4      	; 0x491e <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    491a:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    491e:	80 91 0f 01 	lds	r24, 0x010F
    4922:	1f 92       	push	r1
    4924:	8f 93       	push	r24
    4926:	84 e9       	ldi	r24, 0x94	; 148
    4928:	94 e0       	ldi	r25, 0x04	; 4
    492a:	9f 93       	push	r25
    492c:	8f 93       	push	r24
    492e:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
            break;
    4932:	0f 90       	pop	r0
    4934:	0f 90       	pop	r0
    4936:	0f 90       	pop	r0
    4938:	0f 90       	pop	r0
    493a:	08 95       	ret

0000493c <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    493c:	cf 93       	push	r28
    493e:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    4940:	1f 92       	push	r1
    4942:	8f 93       	push	r24
    4944:	29 e9       	ldi	r18, 0x99	; 153
    4946:	37 e0       	ldi	r19, 0x07	; 7
    4948:	3f 93       	push	r19
    494a:	2f 93       	push	r18
    494c:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    default_layer_set(1UL<<layer);
    4950:	61 e0       	ldi	r22, 0x01	; 1
    4952:	70 e0       	ldi	r23, 0x00	; 0
    4954:	80 e0       	ldi	r24, 0x00	; 0
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	04 c0       	rjmp	.+8      	; 0x4962 <switch_default_layer+0x26>
    495a:	66 0f       	add	r22, r22
    495c:	77 1f       	adc	r23, r23
    495e:	88 1f       	adc	r24, r24
    4960:	99 1f       	adc	r25, r25
    4962:	ca 95       	dec	r28
    4964:	d2 f7       	brpl	.-12     	; 0x495a <switch_default_layer+0x1e>
    4966:	0e 94 04 1a 	call	0x3408	; 0x3408 <default_layer_set>
    clear_keyboard();
    496a:	0f 90       	pop	r0
    496c:	0f 90       	pop	r0
    496e:	0f 90       	pop	r0
    4970:	0f 90       	pop	r0
}
    4972:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4974:	0c 94 0c 16 	jmp	0x2c18	; 0x2c18 <clear_keyboard>

00004978 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4978:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    497a:	8b 31       	cpi	r24, 0x1B	; 27
    497c:	09 f4       	brne	.+2      	; 0x4980 <command_common+0x8>
    497e:	cb c1       	rjmp	.+918    	; 0x4d16 <command_common+0x39e>
    4980:	08 f0       	brcs	.+2      	; 0x4984 <command_common+0xc>
    4982:	49 c0       	rjmp	.+146    	; 0x4a16 <command_common+0x9e>
    4984:	8e 30       	cpi	r24, 0x0E	; 14
    4986:	09 f4       	brne	.+2      	; 0x498a <command_common+0x12>
    4988:	d9 c1       	rjmp	.+946    	; 0x4d3c <command_common+0x3c4>
    498a:	00 f5       	brcc	.+64     	; 0x49cc <command_common+0x54>
    498c:	87 30       	cpi	r24, 0x07	; 7
    498e:	09 f4       	brne	.+2      	; 0x4992 <command_common+0x1a>
    4990:	a9 c1       	rjmp	.+850    	; 0x4ce4 <command_common+0x36c>
    4992:	a8 f4       	brcc	.+42     	; 0x49be <command_common+0x46>
    4994:	86 30       	cpi	r24, 0x06	; 6
    4996:	09 f0       	breq	.+2      	; 0x499a <command_common+0x22>
    4998:	53 c2       	rjmp	.+1190   	; 0x4e40 <command_common+0x4c8>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    499a:	80 91 c7 01 	lds	r24, 0x01C7
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    499e:	81 7f       	andi	r24, 0xF1	; 241
    49a0:	8e 7f       	andi	r24, 0xFE	; 254
    49a2:	80 93 c7 01 	sts	0x01C7, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    49a6:	8e e9       	ldi	r24, 0x9E	; 158
    49a8:	97 e0       	ldi	r25, 0x07	; 7
    49aa:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    49ae:	8a ea       	ldi	r24, 0xAA	; 170
    49b0:	9b e0       	ldi	r25, 0x0B	; 11
    49b2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
            command_state = CONSOLE;
    49b6:	81 e0       	ldi	r24, 0x01	; 1
    49b8:	80 93 d7 01 	sts	0x01D7, r24
    49bc:	91 c1       	rjmp	.+802    	; 0x4ce0 <command_common+0x368>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    49be:	88 30       	cpi	r24, 0x08	; 8
    49c0:	09 f4       	brne	.+2      	; 0x49c4 <command_common+0x4c>
    49c2:	5b c0       	rjmp	.+182    	; 0x4a7a <command_common+0x102>
    49c4:	8b 30       	cpi	r24, 0x0B	; 11
    49c6:	09 f4       	brne	.+2      	; 0x49ca <command_common+0x52>
    49c8:	87 c1       	rjmp	.+782    	; 0x4cd8 <command_common+0x360>
    49ca:	3a c2       	rjmp	.+1140   	; 0x4e40 <command_common+0x4c8>
    49cc:	81 31       	cpi	r24, 0x11	; 17
    49ce:	09 f4       	brne	.+2      	; 0x49d2 <command_common+0x5a>
    49d0:	1f c2       	rjmp	.+1086   	; 0x4e10 <command_common+0x498>
    49d2:	20 f4       	brcc	.+8      	; 0x49dc <command_common+0x64>
    49d4:	80 31       	cpi	r24, 0x10	; 16
    49d6:	09 f4       	brne	.+2      	; 0x49da <command_common+0x62>
    49d8:	c4 c1       	rjmp	.+904    	; 0x4d62 <command_common+0x3ea>
    49da:	32 c2       	rjmp	.+1124   	; 0x4e40 <command_common+0x4c8>
    49dc:	86 31       	cpi	r24, 0x16	; 22
    49de:	09 f4       	brne	.+2      	; 0x49e2 <command_common+0x6a>
    49e0:	da c1       	rjmp	.+948    	; 0x4d96 <command_common+0x41e>
    49e2:	89 31       	cpi	r24, 0x19	; 25
    49e4:	09 f0       	breq	.+2      	; 0x49e8 <command_common+0x70>
    49e6:	2c c2       	rjmp	.+1112   	; 0x4e40 <command_common+0x4c8>
            } else {
                print("\nmouse: off\n");
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    49e8:	8e e1       	ldi	r24, 0x1E	; 30
    49ea:	9b e0       	ldi	r25, 0x0B	; 11
    49ec:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    49f0:	8f ef       	ldi	r24, 0xFF	; 255
    49f2:	9a e0       	ldi	r25, 0x0A	; 10
    49f4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    49f8:	8a ec       	ldi	r24, 0xCA	; 202
    49fa:	9a e0       	ldi	r25, 0x0A	; 10
    49fc:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4a00:	8d e9       	ldi	r24, 0x9D	; 157
    4a02:	9a e0       	ldi	r25, 0x0A	; 10
    4a04:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
            /* build options */
            print("OPTIONS:"
    4a08:	88 e5       	ldi	r24, 0x58	; 88
    4a0a:	9a e0       	ldi	r25, 0x0A	; 10
    4a0c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4a10:	8a e2       	ldi	r24, 0x2A	; 42
    4a12:	9a e0       	ldi	r25, 0x0A	; 10
    4a14:	63 c1       	rjmp	.+710    	; 0x4cdc <command_common+0x364>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    4a16:	85 33       	cpi	r24, 0x35	; 53
    4a18:	09 f4       	brne	.+2      	; 0x4a1c <command_common+0xa4>
    4a1a:	0c c2       	rjmp	.+1048   	; 0x4e34 <command_common+0x4bc>
    4a1c:	68 f4       	brcc	.+26     	; 0x4a38 <command_common+0xc0>
    4a1e:	87 32       	cpi	r24, 0x27	; 39
    4a20:	09 f4       	brne	.+2      	; 0x4a24 <command_common+0xac>
    4a22:	08 c2       	rjmp	.+1040   	; 0x4e34 <command_common+0x4bc>
    4a24:	28 f4       	brcc	.+10     	; 0x4a30 <command_common+0xb8>
    4a26:	8e 31       	cpi	r24, 0x1E	; 30
    4a28:	08 f4       	brcc	.+2      	; 0x4a2c <command_common+0xb4>
    4a2a:	0a c2       	rjmp	.+1044   	; 0x4e40 <command_common+0x4c8>
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4a2c:	8d 51       	subi	r24, 0x1D	; 29
    4a2e:	05 c2       	rjmp	.+1034   	; 0x4e3a <command_common+0x4c2>
#endif

static bool command_common(uint8_t code)
{
    static host_driver_t *host_driver = 0;
    switch (code) {
    4a30:	89 32       	cpi	r24, 0x29	; 41
    4a32:	09 f4       	brne	.+2      	; 0x4a36 <command_common+0xbe>
    4a34:	ff c1       	rjmp	.+1022   	; 0x4e34 <command_common+0x4bc>
    4a36:	04 c2       	rjmp	.+1032   	; 0x4e40 <command_common+0x4c8>
    4a38:	83 34       	cpi	r24, 0x43	; 67
    4a3a:	38 f4       	brcc	.+14     	; 0x4a4a <command_common+0xd2>
    4a3c:	8a 33       	cpi	r24, 0x3A	; 58
    4a3e:	08 f0       	brcs	.+2      	; 0x4a42 <command_common+0xca>
    4a40:	fb c1       	rjmp	.+1014   	; 0x4e38 <command_common+0x4c0>
    4a42:	88 33       	cpi	r24, 0x38	; 56
    4a44:	09 f4       	brne	.+2      	; 0x4a48 <command_common+0xd0>
    4a46:	48 c1       	rjmp	.+656    	; 0x4cd8 <command_common+0x360>
    4a48:	fb c1       	rjmp	.+1014   	; 0x4e40 <command_common+0x4c8>
    4a4a:	83 34       	cpi	r24, 0x43	; 67
    4a4c:	09 f4       	brne	.+2      	; 0x4a50 <command_common+0xd8>
    4a4e:	f2 c1       	rjmp	.+996    	; 0x4e34 <command_common+0x4bc>
    4a50:	88 34       	cpi	r24, 0x48	; 72
    4a52:	09 f0       	breq	.+2      	; 0x4a56 <command_common+0xde>
    4a54:	f5 c1       	rjmp	.+1002   	; 0x4e40 <command_common+0x4c8>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4a56:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <clear_keyboard>
            print("\n\nbootloader... ");
    4a5a:	89 e9       	ldi	r24, 0x99	; 153
    4a5c:	9b e0       	ldi	r25, 0x0B	; 11
    4a5e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4a62:	9f ef       	ldi	r25, 0xFF	; 255
    4a64:	23 ed       	ldi	r18, 0xD3	; 211
    4a66:	80 e3       	ldi	r24, 0x30	; 48
    4a68:	91 50       	subi	r25, 0x01	; 1
    4a6a:	20 40       	sbci	r18, 0x00	; 0
    4a6c:	80 40       	sbci	r24, 0x00	; 0
    4a6e:	e1 f7       	brne	.-8      	; 0x4a68 <command_common+0xf0>
    4a70:	00 c0       	rjmp	.+0      	; 0x4a72 <command_common+0xfa>
    4a72:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    4a74:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <bootloader_jump>
    4a78:	33 c1       	rjmp	.+614    	; 0x4ce0 <command_common+0x368>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4a7a:	8e ea       	ldi	r24, 0xAE	; 174
    4a7c:	9b e0       	ldi	r25, 0x0B	; 11
    4a7e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4a82:	8d e9       	ldi	r24, 0x9D	; 157
    4a84:	99 e0       	ldi	r25, 0x09	; 9
    4a86:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4a8a:	0e 94 ac 20 	call	0x4158	; 0x4158 <eeconfig_read_default_layer>
    4a8e:	1f 92       	push	r1
    4a90:	8f 93       	push	r24
    4a92:	8a e9       	ldi	r24, 0x9A	; 154
    4a94:	99 e0       	ldi	r25, 0x09	; 9
    4a96:	9f 93       	push	r25
    4a98:	8f 93       	push	r24
    4a9a:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4a9e:	88 e9       	ldi	r24, 0x98	; 152
    4aa0:	99 e0       	ldi	r25, 0x09	; 9
    4aa2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4aa6:	0e 94 a3 20 	call	0x4146	; 0x4146 <eeconfig_read_debug>
    4aaa:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4aac:	85 e8       	ldi	r24, 0x85	; 133
    4aae:	99 e0       	ldi	r25, 0x09	; 9
    4ab0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4ab4:	1f 92       	push	r1
    4ab6:	cf 93       	push	r28
    4ab8:	20 e8       	ldi	r18, 0x80	; 128
    4aba:	39 e0       	ldi	r19, 0x09	; 9
    4abc:	3f 93       	push	r19
    4abe:	2f 93       	push	r18
    4ac0:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4ac4:	8e e7       	ldi	r24, 0x7E	; 126
    4ac6:	99 e0       	ldi	r25, 0x09	; 9
    4ac8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4acc:	84 e7       	ldi	r24, 0x74	; 116
    4ace:	99 e0       	ldi	r25, 0x09	; 9
    4ad0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4ad4:	8c 2f       	mov	r24, r28
    4ad6:	81 70       	andi	r24, 0x01	; 1
    4ad8:	1f 92       	push	r1
    4ada:	8f 93       	push	r24
    4adc:	21 e7       	ldi	r18, 0x71	; 113
    4ade:	39 e0       	ldi	r19, 0x09	; 9
    4ae0:	3f 93       	push	r19
    4ae2:	2f 93       	push	r18
    4ae4:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4ae8:	8f e6       	ldi	r24, 0x6F	; 111
    4aea:	99 e0       	ldi	r25, 0x09	; 9
    4aec:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4af0:	85 e6       	ldi	r24, 0x65	; 101
    4af2:	99 e0       	ldi	r25, 0x09	; 9
    4af4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4af8:	c1 fb       	bst	r28, 1
    4afa:	88 27       	eor	r24, r24
    4afc:	80 f9       	bld	r24, 0
    4afe:	1f 92       	push	r1
    4b00:	8f 93       	push	r24
    4b02:	22 e6       	ldi	r18, 0x62	; 98
    4b04:	39 e0       	ldi	r19, 0x09	; 9
    4b06:	3f 93       	push	r19
    4b08:	2f 93       	push	r18
    4b0a:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4b0e:	80 e6       	ldi	r24, 0x60	; 96
    4b10:	99 e0       	ldi	r25, 0x09	; 9
    4b12:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4b16:	84 e5       	ldi	r24, 0x54	; 84
    4b18:	99 e0       	ldi	r25, 0x09	; 9
    4b1a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4b1e:	c2 fb       	bst	r28, 2
    4b20:	88 27       	eor	r24, r24
    4b22:	80 f9       	bld	r24, 0
    4b24:	1f 92       	push	r1
    4b26:	8f 93       	push	r24
    4b28:	21 e5       	ldi	r18, 0x51	; 81
    4b2a:	39 e0       	ldi	r19, 0x09	; 9
    4b2c:	3f 93       	push	r19
    4b2e:	2f 93       	push	r18
    4b30:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4b34:	8f e4       	ldi	r24, 0x4F	; 79
    4b36:	99 e0       	ldi	r25, 0x09	; 9
    4b38:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4b3c:	86 e4       	ldi	r24, 0x46	; 70
    4b3e:	99 e0       	ldi	r25, 0x09	; 9
    4b40:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4b44:	c3 fb       	bst	r28, 3
    4b46:	cc 27       	eor	r28, r28
    4b48:	c0 f9       	bld	r28, 0
    4b4a:	1f 92       	push	r1
    4b4c:	cf 93       	push	r28
    4b4e:	83 e4       	ldi	r24, 0x43	; 67
    4b50:	99 e0       	ldi	r25, 0x09	; 9
    4b52:	9f 93       	push	r25
    4b54:	8f 93       	push	r24
    4b56:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4b5a:	81 e4       	ldi	r24, 0x41	; 65
    4b5c:	99 e0       	ldi	r25, 0x09	; 9
    4b5e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4b62:	0e 94 b5 20 	call	0x416a	; 0x416a <eeconfig_read_keymap>
    4b66:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4b68:	8d e2       	ldi	r24, 0x2D	; 45
    4b6a:	99 e0       	ldi	r25, 0x09	; 9
    4b6c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4b70:	1f 92       	push	r1
    4b72:	cf 93       	push	r28
    4b74:	28 e2       	ldi	r18, 0x28	; 40
    4b76:	39 e0       	ldi	r19, 0x09	; 9
    4b78:	3f 93       	push	r19
    4b7a:	2f 93       	push	r18
    4b7c:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4b80:	86 e2       	ldi	r24, 0x26	; 38
    4b82:	99 e0       	ldi	r25, 0x09	; 9
    4b84:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4b88:	8d e0       	ldi	r24, 0x0D	; 13
    4b8a:	99 e0       	ldi	r25, 0x09	; 9
    4b8c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4b90:	8c 2f       	mov	r24, r28
    4b92:	81 70       	andi	r24, 0x01	; 1
    4b94:	1f 92       	push	r1
    4b96:	8f 93       	push	r24
    4b98:	2a e0       	ldi	r18, 0x0A	; 10
    4b9a:	39 e0       	ldi	r19, 0x09	; 9
    4b9c:	3f 93       	push	r19
    4b9e:	2f 93       	push	r18
    4ba0:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4ba4:	8d b7       	in	r24, 0x3d	; 61
    4ba6:	9e b7       	in	r25, 0x3e	; 62
    4ba8:	80 96       	adiw	r24, 0x20	; 32
    4baa:	0f b6       	in	r0, 0x3f	; 63
    4bac:	f8 94       	cli
    4bae:	9e bf       	out	0x3e, r25	; 62
    4bb0:	0f be       	out	0x3f, r0	; 63
    4bb2:	8d bf       	out	0x3d, r24	; 61
    4bb4:	88 e0       	ldi	r24, 0x08	; 8
    4bb6:	99 e0       	ldi	r25, 0x09	; 9
    4bb8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4bbc:	81 ef       	ldi	r24, 0xF1	; 241
    4bbe:	98 e0       	ldi	r25, 0x08	; 8
    4bc0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4bc4:	c1 fb       	bst	r28, 1
    4bc6:	88 27       	eor	r24, r24
    4bc8:	80 f9       	bld	r24, 0
    4bca:	1f 92       	push	r1
    4bcc:	8f 93       	push	r24
    4bce:	2e ee       	ldi	r18, 0xEE	; 238
    4bd0:	38 e0       	ldi	r19, 0x08	; 8
    4bd2:	3f 93       	push	r19
    4bd4:	2f 93       	push	r18
    4bd6:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4bda:	8c ee       	ldi	r24, 0xEC	; 236
    4bdc:	98 e0       	ldi	r25, 0x08	; 8
    4bde:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4be2:	8a ed       	ldi	r24, 0xDA	; 218
    4be4:	98 e0       	ldi	r25, 0x08	; 8
    4be6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4bea:	c2 fb       	bst	r28, 2
    4bec:	88 27       	eor	r24, r24
    4bee:	80 f9       	bld	r24, 0
    4bf0:	1f 92       	push	r1
    4bf2:	8f 93       	push	r24
    4bf4:	27 ed       	ldi	r18, 0xD7	; 215
    4bf6:	38 e0       	ldi	r19, 0x08	; 8
    4bf8:	3f 93       	push	r19
    4bfa:	2f 93       	push	r18
    4bfc:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4c00:	85 ed       	ldi	r24, 0xD5	; 213
    4c02:	98 e0       	ldi	r25, 0x08	; 8
    4c04:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4c08:	83 ec       	ldi	r24, 0xC3	; 195
    4c0a:	98 e0       	ldi	r25, 0x08	; 8
    4c0c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4c10:	c3 fb       	bst	r28, 3
    4c12:	88 27       	eor	r24, r24
    4c14:	80 f9       	bld	r24, 0
    4c16:	1f 92       	push	r1
    4c18:	8f 93       	push	r24
    4c1a:	20 ec       	ldi	r18, 0xC0	; 192
    4c1c:	38 e0       	ldi	r19, 0x08	; 8
    4c1e:	3f 93       	push	r19
    4c20:	2f 93       	push	r18
    4c22:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4c26:	8e eb       	ldi	r24, 0xBE	; 190
    4c28:	98 e0       	ldi	r25, 0x08	; 8
    4c2a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4c2e:	84 eb       	ldi	r24, 0xB4	; 180
    4c30:	98 e0       	ldi	r25, 0x08	; 8
    4c32:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4c36:	c4 fb       	bst	r28, 4
    4c38:	88 27       	eor	r24, r24
    4c3a:	80 f9       	bld	r24, 0
    4c3c:	1f 92       	push	r1
    4c3e:	8f 93       	push	r24
    4c40:	21 eb       	ldi	r18, 0xB1	; 177
    4c42:	38 e0       	ldi	r19, 0x08	; 8
    4c44:	3f 93       	push	r19
    4c46:	2f 93       	push	r18
    4c48:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4c4c:	8f ea       	ldi	r24, 0xAF	; 175
    4c4e:	98 e0       	ldi	r25, 0x08	; 8
    4c50:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4c54:	8d e9       	ldi	r24, 0x9D	; 157
    4c56:	98 e0       	ldi	r25, 0x08	; 8
    4c58:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4c5c:	c5 fb       	bst	r28, 5
    4c5e:	88 27       	eor	r24, r24
    4c60:	80 f9       	bld	r24, 0
    4c62:	1f 92       	push	r1
    4c64:	8f 93       	push	r24
    4c66:	2a e9       	ldi	r18, 0x9A	; 154
    4c68:	38 e0       	ldi	r19, 0x08	; 8
    4c6a:	3f 93       	push	r19
    4c6c:	2f 93       	push	r18
    4c6e:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4c72:	88 e9       	ldi	r24, 0x98	; 152
    4c74:	98 e0       	ldi	r25, 0x08	; 8
    4c76:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4c7a:	8c e7       	ldi	r24, 0x7C	; 124
    4c7c:	98 e0       	ldi	r25, 0x08	; 8
    4c7e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4c82:	c6 fb       	bst	r28, 6
    4c84:	88 27       	eor	r24, r24
    4c86:	80 f9       	bld	r24, 0
    4c88:	1f 92       	push	r1
    4c8a:	8f 93       	push	r24
    4c8c:	29 e7       	ldi	r18, 0x79	; 121
    4c8e:	38 e0       	ldi	r19, 0x08	; 8
    4c90:	3f 93       	push	r19
    4c92:	2f 93       	push	r18
    4c94:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4c98:	87 e7       	ldi	r24, 0x77	; 119
    4c9a:	98 e0       	ldi	r25, 0x08	; 8
    4c9c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4ca0:	8f e6       	ldi	r24, 0x6F	; 111
    4ca2:	98 e0       	ldi	r25, 0x08	; 8
    4ca4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4ca8:	c7 fb       	bst	r28, 7
    4caa:	cc 27       	eor	r28, r28
    4cac:	c0 f9       	bld	r28, 0
    4cae:	1f 92       	push	r1
    4cb0:	cf 93       	push	r28
    4cb2:	8c e6       	ldi	r24, 0x6C	; 108
    4cb4:	98 e0       	ldi	r25, 0x08	; 8
    4cb6:	9f 93       	push	r25
    4cb8:	8f 93       	push	r24
    4cba:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4cbe:	8a e6       	ldi	r24, 0x6A	; 106
    4cc0:	98 e0       	ldi	r25, 0x08	; 8
    4cc2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4cc6:	8d b7       	in	r24, 0x3d	; 61
    4cc8:	9e b7       	in	r25, 0x3e	; 62
    4cca:	4c 96       	adiw	r24, 0x1c	; 28
    4ccc:	0f b6       	in	r0, 0x3f	; 63
    4cce:	f8 94       	cli
    4cd0:	9e bf       	out	0x3e, r25	; 62
    4cd2:	0f be       	out	0x3f, r0	; 63
    4cd4:	8d bf       	out	0x3d, r24	; 61
    4cd6:	04 c0       	rjmp	.+8      	; 0x4ce0 <command_common+0x368>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4cd8:	85 ec       	ldi	r24, 0xC5	; 197
    4cda:	97 e0       	ldi	r25, 0x07	; 7
    4cdc:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4ce0:	c1 e0       	ldi	r28, 0x01	; 1
    4ce2:	b3 c0       	rjmp	.+358    	; 0x4e4a <command_common+0x4d2>
            print("\n\nbootloader... ");
            _delay_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4ce4:	80 91 c7 01 	lds	r24, 0x01C7
    4ce8:	c8 2f       	mov	r28, r24
    4cea:	c1 70       	andi	r28, 0x01	; 1
    4cec:	80 ff       	sbrs	r24, 0
    4cee:	09 c0       	rjmp	.+18     	; 0x4d02 <command_common+0x38a>
                print("\ndebug: on\n");
    4cf0:	8d e8       	ldi	r24, 0x8D	; 141
    4cf2:	9b e0       	ldi	r25, 0x0B	; 11
    4cf4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
                debug_matrix   = false;
    4cf8:	80 91 c7 01 	lds	r24, 0x01C7
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4cfc:	81 7f       	andi	r24, 0xF1	; 241
    4cfe:	8e 7f       	andi	r24, 0xFE	; 254
    4d00:	44 c0       	rjmp	.+136    	; 0x4d8a <command_common+0x412>
            } else {
                print("\ndebug: off\n");
    4d02:	80 e8       	ldi	r24, 0x80	; 128
    4d04:	9b e0       	ldi	r25, 0x0B	; 11
    4d06:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
                debug_enable   = true;
    4d0a:	80 91 c7 01 	lds	r24, 0x01C7
    4d0e:	81 60       	ori	r24, 0x01	; 1
    4d10:	80 93 c7 01 	sts	0x01C7, r24
    4d14:	e5 cf       	rjmp	.-54     	; 0x4ce0 <command_common+0x368>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4d16:	80 91 c7 01 	lds	r24, 0x01C7
    4d1a:	81 fb       	bst	r24, 1
    4d1c:	cc 27       	eor	r28, r28
    4d1e:	c0 f9       	bld	r28, 0
    4d20:	91 e0       	ldi	r25, 0x01	; 1
    4d22:	c9 27       	eor	r28, r25
    4d24:	c0 fb       	bst	r28, 0
    4d26:	81 f9       	bld	r24, 1
    4d28:	80 93 c7 01 	sts	0x01C7, r24
            if (debug_matrix) {
    4d2c:	cc 23       	and	r28, r28
    4d2e:	19 f0       	breq	.+6      	; 0x4d36 <command_common+0x3be>
                print("\nmatrix: on\n");
    4d30:	83 e7       	ldi	r24, 0x73	; 115
    4d32:	9b e0       	ldi	r25, 0x0B	; 11
    4d34:	25 c0       	rjmp	.+74     	; 0x4d80 <command_common+0x408>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4d36:	85 e6       	ldi	r24, 0x65	; 101
    4d38:	9b e0       	ldi	r25, 0x0B	; 11
    4d3a:	d0 cf       	rjmp	.-96     	; 0x4cdc <command_common+0x364>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4d3c:	80 91 c7 01 	lds	r24, 0x01C7
    4d40:	82 fb       	bst	r24, 2
    4d42:	cc 27       	eor	r28, r28
    4d44:	c0 f9       	bld	r28, 0
    4d46:	91 e0       	ldi	r25, 0x01	; 1
    4d48:	c9 27       	eor	r28, r25
    4d4a:	c0 fb       	bst	r28, 0
    4d4c:	82 f9       	bld	r24, 2
    4d4e:	80 93 c7 01 	sts	0x01C7, r24
            if (debug_keyboard) {
    4d52:	cc 23       	and	r28, r28
    4d54:	19 f0       	breq	.+6      	; 0x4d5c <command_common+0x3e4>
                print("\nkeyboard: on\n");
    4d56:	86 e5       	ldi	r24, 0x56	; 86
    4d58:	9b e0       	ldi	r25, 0x0B	; 11
    4d5a:	12 c0       	rjmp	.+36     	; 0x4d80 <command_common+0x408>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4d5c:	86 e4       	ldi	r24, 0x46	; 70
    4d5e:	9b e0       	ldi	r25, 0x0B	; 11
    4d60:	bd cf       	rjmp	.-134    	; 0x4cdc <command_common+0x364>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4d62:	80 91 c7 01 	lds	r24, 0x01C7
    4d66:	83 fb       	bst	r24, 3
    4d68:	cc 27       	eor	r28, r28
    4d6a:	c0 f9       	bld	r28, 0
    4d6c:	91 e0       	ldi	r25, 0x01	; 1
    4d6e:	c9 27       	eor	r28, r25
    4d70:	c0 fb       	bst	r28, 0
    4d72:	83 f9       	bld	r24, 3
    4d74:	80 93 c7 01 	sts	0x01C7, r24
            if (debug_mouse) {
    4d78:	cc 23       	and	r28, r28
    4d7a:	51 f0       	breq	.+20     	; 0x4d90 <command_common+0x418>
                print("\nmouse: on\n");
    4d7c:	8a e3       	ldi	r24, 0x3A	; 58
    4d7e:	9b e0       	ldi	r25, 0x0B	; 11
    4d80:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
                debug_enable = true;
    4d84:	80 91 c7 01 	lds	r24, 0x01C7
    4d88:	81 60       	ori	r24, 0x01	; 1
    4d8a:	80 93 c7 01 	sts	0x01C7, r24
    4d8e:	5d c0       	rjmp	.+186    	; 0x4e4a <command_common+0x4d2>
            } else {
                print("\nmouse: off\n");
    4d90:	8d e2       	ldi	r24, 0x2D	; 45
    4d92:	9b e0       	ldi	r25, 0x0B	; 11
    4d94:	a3 cf       	rjmp	.-186    	; 0x4cdc <command_common+0x364>
            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4d96:	8c e1       	ldi	r24, 0x1C	; 28
    4d98:	9a e0       	ldi	r25, 0x0A	; 10
    4d9a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
            print_val_hex8(host_keyboard_leds());
    4d9e:	0e 94 2f 10 	call	0x205e	; 0x205e <host_keyboard_leds>
    4da2:	1f 92       	push	r1
    4da4:	8f 93       	push	r24
    4da6:	82 e0       	ldi	r24, 0x02	; 2
    4da8:	9a e0       	ldi	r25, 0x0A	; 10
    4daa:	9f 93       	push	r25
    4dac:	8f 93       	push	r24
    4dae:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4db2:	80 91 0b 01 	lds	r24, 0x010B
    4db6:	1f 92       	push	r1
    4db8:	8f 93       	push	r24
    4dba:	8b ee       	ldi	r24, 0xEB	; 235
    4dbc:	99 e0       	ldi	r25, 0x09	; 9
    4dbe:	9f 93       	push	r25
    4dc0:	8f 93       	push	r24
    4dc2:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
            print_val_hex8(keyboard_idle);
    4dc6:	80 91 62 01 	lds	r24, 0x0162
    4dca:	1f 92       	push	r1
    4dcc:	8f 93       	push	r24
    4dce:	88 ed       	ldi	r24, 0xD8	; 216
    4dd0:	99 e0       	ldi	r25, 0x09	; 9
    4dd2:	9f 93       	push	r25
    4dd4:	8f 93       	push	r24
    4dd6:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
            print_val_hex32(timer_count);
    4dda:	80 91 c9 01 	lds	r24, 0x01C9
    4dde:	90 91 ca 01 	lds	r25, 0x01CA
    4de2:	a0 91 cb 01 	lds	r26, 0x01CB
    4de6:	b0 91 cc 01 	lds	r27, 0x01CC
    4dea:	bf 93       	push	r27
    4dec:	af 93       	push	r26
    4dee:	9f 93       	push	r25
    4df0:	8f 93       	push	r24
    4df2:	84 ec       	ldi	r24, 0xC4	; 196
    4df4:	99 e0       	ldi	r25, 0x09	; 9
    4df6:	9f 93       	push	r25
    4df8:	8f 93       	push	r24
    4dfa:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    4dfe:	8d b7       	in	r24, 0x3d	; 61
    4e00:	9e b7       	in	r25, 0x3e	; 62
    4e02:	42 96       	adiw	r24, 0x12	; 18
    4e04:	0f b6       	in	r0, 0x3f	; 63
    4e06:	f8 94       	cli
    4e08:	9e bf       	out	0x3e, r25	; 62
    4e0a:	0f be       	out	0x3f, r0	; 63
    4e0c:	8d bf       	out	0x3d, r24	; 61
    4e0e:	68 cf       	rjmp	.-304    	; 0x4ce0 <command_common+0x368>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    4e10:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    4e14:	c0 91 0c 01 	lds	r28, 0x010C
    4e18:	81 e0       	ldi	r24, 0x01	; 1
    4e1a:	c8 27       	eor	r28, r24
    4e1c:	c0 93 0c 01 	sts	0x010C, r28
            if (keyboard_nkro)
    4e20:	cc 23       	and	r28, r28
    4e22:	29 f0       	breq	.+10     	; 0x4e2e <command_common+0x4b6>
                print("NKRO: on\n");
    4e24:	8a eb       	ldi	r24, 0xBA	; 186
    4e26:	99 e0       	ldi	r25, 0x09	; 9
    4e28:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4e2c:	0e c0       	rjmp	.+28     	; 0x4e4a <command_common+0x4d2>
            else
                print("NKRO: off\n");
    4e2e:	8f ea       	ldi	r24, 0xAF	; 175
    4e30:	99 e0       	ldi	r25, 0x09	; 9
    4e32:	54 cf       	rjmp	.-344    	; 0x4cdc <command_common+0x364>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4e34:	80 e0       	ldi	r24, 0x00	; 0
    4e36:	01 c0       	rjmp	.+2      	; 0x4e3a <command_common+0x4c2>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4e38:	89 53       	subi	r24, 0x39	; 57
    4e3a:	0e 94 9e 24 	call	0x493c	; 0x493c <switch_default_layer>
    4e3e:	50 cf       	rjmp	.-352    	; 0x4ce0 <command_common+0x368>
            break;
        default:
            print("?");
    4e40:	8d ea       	ldi	r24, 0xAD	; 173
    4e42:	99 e0       	ldi	r25, 0x09	; 9
    4e44:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
            return false;
    4e48:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4e4a:	8c 2f       	mov	r24, r28
    4e4c:	cf 91       	pop	r28
    4e4e:	08 95       	ret

00004e50 <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    4e50:	80 e0       	ldi	r24, 0x00	; 0
    4e52:	08 95       	ret

00004e54 <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    4e54:	80 e0       	ldi	r24, 0x00	; 0
    4e56:	08 95       	ret

00004e58 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4e58:	cf 93       	push	r28
    4e5a:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4e5c:	80 91 d7 01 	lds	r24, 0x01D7
    4e60:	81 30       	cpi	r24, 0x01	; 1
    4e62:	71 f0       	breq	.+28     	; 0x4e80 <command_proc+0x28>
    4e64:	20 f0       	brcs	.+8      	; 0x4e6e <command_proc+0x16>
    4e66:	82 30       	cpi	r24, 0x02	; 2
    4e68:	09 f4       	brne	.+2      	; 0x4e6c <command_proc+0x14>
    4e6a:	48 c0       	rjmp	.+144    	; 0x4efc <command_proc+0xa4>
    4e6c:	3f c1       	rjmp	.+638    	; 0x50ec <command_proc+0x294>
        case ONESHOT:
            if (!IS_COMMAND())
    4e6e:	a0 91 0d 01 	lds	r26, 0x010D
    4e72:	b0 91 0e 01 	lds	r27, 0x010E
    4e76:	8c 91       	ld	r24, X
    4e78:	82 32       	cpi	r24, 0x22	; 34
    4e7a:	09 f0       	breq	.+2      	; 0x4e7e <command_proc+0x26>
    4e7c:	39 c1       	rjmp	.+626    	; 0x50f0 <command_proc+0x298>
    4e7e:	07 c0       	rjmp	.+14     	; 0x4e8e <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    4e80:	a0 91 0d 01 	lds	r26, 0x010D
    4e84:	b0 91 0e 01 	lds	r27, 0x010E
    4e88:	8c 91       	ld	r24, X
    4e8a:	82 32       	cpi	r24, 0x22	; 34
    4e8c:	49 f4       	brne	.+18     	; 0x4ea0 <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    4e8e:	8c 2f       	mov	r24, r28
    4e90:	0e 94 28 27 	call	0x4e50	; 0x4e50 <command_extra>
    4e94:	81 11       	cpse	r24, r1
    4e96:	2f c0       	rjmp	.+94     	; 0x4ef6 <command_proc+0x9e>
    4e98:	8c 2f       	mov	r24, r28
    4e9a:	0e 94 bc 24 	call	0x4978	; 0x4978 <command_common>
    4e9e:	2c c0       	rjmp	.+88     	; 0x4ef8 <command_proc+0xa0>
            else
                return (command_console_extra(code) || command_console(code));
    4ea0:	8c 2f       	mov	r24, r28
    4ea2:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <command_console_extra>
    4ea6:	81 11       	cpse	r24, r1
    4ea8:	26 c0       	rjmp	.+76     	; 0x4ef6 <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4eaa:	c4 31       	cpi	r28, 0x14	; 20
    4eac:	e1 f0       	breq	.+56     	; 0x4ee6 <command_proc+0x8e>
    4eae:	70 f4       	brcc	.+28     	; 0x4ecc <command_proc+0x74>
    4eb0:	cb 30       	cpi	r28, 0x0B	; 11
    4eb2:	81 f0       	breq	.+32     	; 0x4ed4 <command_proc+0x7c>
    4eb4:	c0 31       	cpi	r28, 0x10	; 16
    4eb6:	d1 f4       	brne	.+52     	; 0x4eec <command_proc+0x94>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    4eb8:	0e 94 66 23 	call	0x46cc	; 0x46cc <mousekey_console_help>
            print("M> ");
    4ebc:	81 e9       	ldi	r24, 0x91	; 145
    4ebe:	97 e0       	ldi	r25, 0x07	; 7
    4ec0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
            command_state = MOUSEKEY;
    4ec4:	82 e0       	ldi	r24, 0x02	; 2
    4ec6:	80 93 d7 01 	sts	0x01D7, r24
    4eca:	15 c0       	rjmp	.+42     	; 0x4ef6 <command_proc+0x9e>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4ecc:	c9 32       	cpi	r28, 0x29	; 41
    4ece:	59 f0       	breq	.+22     	; 0x4ee6 <command_proc+0x8e>
    4ed0:	c8 33       	cpi	r28, 0x38	; 56
    4ed2:	61 f4       	brne	.+24     	; 0x4eec <command_proc+0x94>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4ed4:	8e e9       	ldi	r24, 0x9E	; 158
    4ed6:	97 e0       	ldi	r25, 0x07	; 7
    4ed8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    4edc:	85 e9       	ldi	r24, 0x95	; 149
    4ede:	97 e0       	ldi	r25, 0x07	; 7
    4ee0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4ee4:	08 c0       	rjmp	.+16     	; 0x4ef6 <command_proc+0x9e>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    4ee6:	10 92 d7 01 	sts	0x01D7, r1
    4eea:	04 c1       	rjmp	.+520    	; 0x50f4 <command_proc+0x29c>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    4eec:	8f e8       	ldi	r24, 0x8F	; 143
    4eee:	97 e0       	ldi	r25, 0x07	; 7
    4ef0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4ef4:	ff c0       	rjmp	.+510    	; 0x50f4 <command_proc+0x29c>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4ef6:	81 e0       	ldi	r24, 0x01	; 1
    4ef8:	81 70       	andi	r24, 0x01	; 1
    4efa:	fe c0       	rjmp	.+508    	; 0x50f8 <command_proc+0x2a0>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4efc:	c4 32       	cpi	r28, 0x24	; 36
    4efe:	28 f5       	brcc	.+74     	; 0x4f4a <command_proc+0xf2>
    4f00:	ce 31       	cpi	r28, 0x1E	; 30
    4f02:	08 f0       	brcs	.+2      	; 0x4f06 <command_proc+0xae>
    4f04:	c1 c0       	rjmp	.+386    	; 0x5088 <command_proc+0x230>
    4f06:	cb 30       	cpi	r28, 0x0B	; 11
    4f08:	a1 f1       	breq	.+104    	; 0x4f72 <command_proc+0x11a>
    4f0a:	d0 f4       	brcc	.+52     	; 0x4f40 <command_proc+0xe8>
    4f0c:	c7 30       	cpi	r28, 0x07	; 7
    4f0e:	09 f0       	breq	.+2      	; 0x4f12 <command_proc+0xba>
    4f10:	d3 c0       	rjmp	.+422    	; 0x50b8 <command_proc+0x260>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    4f12:	8e e1       	ldi	r24, 0x1E	; 30
    4f14:	80 93 14 01 	sts	0x0114, r24
            mk_interval = MOUSEKEY_INTERVAL;
    4f18:	82 e3       	ldi	r24, 0x32	; 50
    4f1a:	80 93 13 01 	sts	0x0113, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    4f1e:	8a e0       	ldi	r24, 0x0A	; 10
    4f20:	80 93 12 01 	sts	0x0112, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    4f24:	84 e1       	ldi	r24, 0x14	; 20
    4f26:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    4f2a:	88 e0       	ldi	r24, 0x08	; 8
    4f2c:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    4f30:	88 e2       	ldi	r24, 0x28	; 40
    4f32:	80 93 0f 01 	sts	0x010F, r24
            print("set default\n");
    4f36:	85 e3       	ldi	r24, 0x35	; 53
    4f38:	96 e0       	ldi	r25, 0x06	; 6
    4f3a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4f3e:	bf c0       	rjmp	.+382    	; 0x50be <command_proc+0x266>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4f40:	c3 31       	cpi	r28, 0x13	; 19
    4f42:	49 f1       	breq	.+82     	; 0x4f96 <command_proc+0x13e>
    4f44:	c4 31       	cpi	r28, 0x14	; 20
    4f46:	c1 f0       	breq	.+48     	; 0x4f78 <command_proc+0x120>
    4f48:	b7 c0       	rjmp	.+366    	; 0x50b8 <command_proc+0x260>
    4f4a:	cb 34       	cpi	r28, 0x4B	; 75
    4f4c:	09 f4       	brne	.+2      	; 0x4f50 <command_proc+0xf8>
    4f4e:	a9 c0       	rjmp	.+338    	; 0x50a2 <command_proc+0x24a>
    4f50:	28 f4       	brcc	.+10     	; 0x4f5c <command_proc+0x104>
    4f52:	c9 32       	cpi	r28, 0x29	; 41
    4f54:	89 f0       	breq	.+34     	; 0x4f78 <command_proc+0x120>
    4f56:	c8 33       	cpi	r28, 0x38	; 56
    4f58:	61 f0       	breq	.+24     	; 0x4f72 <command_proc+0x11a>
    4f5a:	ae c0       	rjmp	.+348    	; 0x50b8 <command_proc+0x260>
    4f5c:	c1 35       	cpi	r28, 0x51	; 81
    4f5e:	09 f4       	brne	.+2      	; 0x4f62 <command_proc+0x10a>
    4f60:	9e c0       	rjmp	.+316    	; 0x509e <command_proc+0x246>
    4f62:	c2 35       	cpi	r28, 0x52	; 82
    4f64:	09 f4       	brne	.+2      	; 0x4f68 <command_proc+0x110>
    4f66:	99 c0       	rjmp	.+306    	; 0x509a <command_proc+0x242>
    4f68:	ce 34       	cpi	r28, 0x4E	; 78
    4f6a:	09 f0       	breq	.+2      	; 0x4f6e <command_proc+0x116>
    4f6c:	a5 c0       	rjmp	.+330    	; 0x50b8 <command_proc+0x260>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4f6e:	6a e0       	ldi	r22, 0x0A	; 10
    4f70:	9e c0       	rjmp	.+316    	; 0x50ae <command_proc+0x256>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    4f72:	0e 94 66 23 	call	0x46cc	; 0x46cc <mousekey_console_help>
    4f76:	a3 c0       	rjmp	.+326    	; 0x50be <command_proc+0x266>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    4f78:	80 91 d6 01 	lds	r24, 0x01D6
    4f7c:	88 23       	and	r24, r24
    4f7e:	19 f0       	breq	.+6      	; 0x4f86 <command_proc+0x12e>
                mousekey_param = 0;
    4f80:	10 92 d6 01 	sts	0x01D6, r1
    4f84:	9c c0       	rjmp	.+312    	; 0x50be <command_proc+0x266>
            } else {
                print("C> ");
    4f86:	82 e4       	ldi	r24, 0x42	; 66
    4f88:	96 e0       	ldi	r25, 0x06	; 6
    4f8a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
                command_state = CONSOLE;
    4f8e:	81 e0       	ldi	r24, 0x01	; 1
    4f90:	80 93 d7 01 	sts	0x01D7, r24
    4f94:	b1 c0       	rjmp	.+354    	; 0x50f8 <command_proc+0x2a0>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    4f96:	8c e1       	ldi	r24, 0x1C	; 28
    4f98:	96 e0       	ldi	r25, 0x06	; 6
    4f9a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    4f9e:	8a e0       	ldi	r24, 0x0A	; 10
    4fa0:	96 e0       	ldi	r25, 0x06	; 6
    4fa2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4fa6:	80 91 14 01 	lds	r24, 0x0114
    4faa:	1f 92       	push	r1
    4fac:	8f 93       	push	r24
    4fae:	87 e0       	ldi	r24, 0x07	; 7
    4fb0:	96 e0       	ldi	r25, 0x06	; 6
    4fb2:	9f 93       	push	r25
    4fb4:	8f 93       	push	r24
    4fb6:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4fba:	85 e0       	ldi	r24, 0x05	; 5
    4fbc:	96 e0       	ldi	r25, 0x06	; 6
    4fbe:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    4fc2:	83 ef       	ldi	r24, 0xF3	; 243
    4fc4:	95 e0       	ldi	r25, 0x05	; 5
    4fc6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4fca:	80 91 13 01 	lds	r24, 0x0113
    4fce:	1f 92       	push	r1
    4fd0:	8f 93       	push	r24
    4fd2:	80 ef       	ldi	r24, 0xF0	; 240
    4fd4:	95 e0       	ldi	r25, 0x05	; 5
    4fd6:	9f 93       	push	r25
    4fd8:	8f 93       	push	r24
    4fda:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    4fde:	8e ee       	ldi	r24, 0xEE	; 238
    4fe0:	95 e0       	ldi	r25, 0x05	; 5
    4fe2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    4fe6:	8f ed       	ldi	r24, 0xDF	; 223
    4fe8:	95 e0       	ldi	r25, 0x05	; 5
    4fea:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    4fee:	80 91 12 01 	lds	r24, 0x0112
    4ff2:	1f 92       	push	r1
    4ff4:	8f 93       	push	r24
    4ff6:	8c ed       	ldi	r24, 0xDC	; 220
    4ff8:	95 e0       	ldi	r25, 0x05	; 5
    4ffa:	9f 93       	push	r25
    4ffc:	8f 93       	push	r24
    4ffe:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    5002:	8a ed       	ldi	r24, 0xDA	; 218
    5004:	95 e0       	ldi	r25, 0x05	; 5
    5006:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    500a:	89 ec       	ldi	r24, 0xC9	; 201
    500c:	95 e0       	ldi	r25, 0x05	; 5
    500e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    5012:	80 91 11 01 	lds	r24, 0x0111
    5016:	1f 92       	push	r1
    5018:	8f 93       	push	r24
    501a:	86 ec       	ldi	r24, 0xC6	; 198
    501c:	95 e0       	ldi	r25, 0x05	; 5
    501e:	9f 93       	push	r25
    5020:	8f 93       	push	r24
    5022:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    5026:	84 ec       	ldi	r24, 0xC4	; 196
    5028:	95 e0       	ldi	r25, 0x05	; 5
    502a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    502e:	8f ea       	ldi	r24, 0xAF	; 175
    5030:	95 e0       	ldi	r25, 0x05	; 5
    5032:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    5036:	80 91 10 01 	lds	r24, 0x0110
    503a:	1f 92       	push	r1
    503c:	8f 93       	push	r24
    503e:	8c ea       	ldi	r24, 0xAC	; 172
    5040:	95 e0       	ldi	r25, 0x05	; 5
    5042:	9f 93       	push	r25
    5044:	8f 93       	push	r24
    5046:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    504a:	8a ea       	ldi	r24, 0xAA	; 170
    504c:	95 e0       	ldi	r25, 0x05	; 5
    504e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5052:	83 e9       	ldi	r24, 0x93	; 147
    5054:	95 e0       	ldi	r25, 0x05	; 5
    5056:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    505a:	80 91 0f 01 	lds	r24, 0x010F
    505e:	1f 92       	push	r1
    5060:	8f 93       	push	r24
    5062:	80 e9       	ldi	r24, 0x90	; 144
    5064:	95 e0       	ldi	r25, 0x05	; 5
    5066:	9f 93       	push	r25
    5068:	8f 93       	push	r24
    506a:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    506e:	8e e8       	ldi	r24, 0x8E	; 142
    5070:	95 e0       	ldi	r25, 0x05	; 5
    5072:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
    5076:	8d b7       	in	r24, 0x3d	; 61
    5078:	9e b7       	in	r25, 0x3e	; 62
    507a:	48 96       	adiw	r24, 0x18	; 24
    507c:	0f b6       	in	r0, 0x3f	; 63
    507e:	f8 94       	cli
    5080:	9e bf       	out	0x3e, r25	; 62
    5082:	0f be       	out	0x3f, r0	; 63
    5084:	8d bf       	out	0x3d, r24	; 61
    5086:	1b c0       	rjmp	.+54     	; 0x50be <command_proc+0x266>
    5088:	ce 51       	subi	r28, 0x1E	; 30
    508a:	ec 2f       	mov	r30, r28
    508c:	f0 e0       	ldi	r31, 0x00	; 0
    508e:	e2 5d       	subi	r30, 0xD2	; 210
    5090:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    5092:	80 81       	ld	r24, Z
    5094:	80 93 d6 01 	sts	0x01D6, r24
    5098:	12 c0       	rjmp	.+36     	; 0x50be <command_proc+0x266>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    509a:	61 e0       	ldi	r22, 0x01	; 1
    509c:	03 c0       	rjmp	.+6      	; 0x50a4 <command_proc+0x24c>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    509e:	61 e0       	ldi	r22, 0x01	; 1
    50a0:	06 c0       	rjmp	.+12     	; 0x50ae <command_proc+0x256>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    50a2:	6a e0       	ldi	r22, 0x0A	; 10
    50a4:	80 91 d6 01 	lds	r24, 0x01D6
    50a8:	0e 94 7d 23 	call	0x46fa	; 0x46fa <mousekey_param_inc>
    50ac:	08 c0       	rjmp	.+16     	; 0x50be <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    50ae:	80 91 d6 01 	lds	r24, 0x01D6
    50b2:	0e 94 20 24 	call	0x4840	; 0x4840 <mousekey_param_dec>
    50b6:	03 c0       	rjmp	.+6      	; 0x50be <command_proc+0x266>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    50b8:	83 e3       	ldi	r24, 0x33	; 51
    50ba:	96 e0       	ldi	r25, 0x06	; 6
    50bc:	13 c0       	rjmp	.+38     	; 0x50e4 <command_proc+0x28c>
            return false;
    }
    if (mousekey_param)
    50be:	80 91 d6 01 	lds	r24, 0x01D6
    50c2:	88 23       	and	r24, r24
    50c4:	69 f0       	breq	.+26     	; 0x50e0 <command_proc+0x288>
        xprintf("M%d> ", mousekey_param);
    50c6:	1f 92       	push	r1
    50c8:	8f 93       	push	r24
    50ca:	8d e2       	ldi	r24, 0x2D	; 45
    50cc:	96 e0       	ldi	r25, 0x06	; 6
    50ce:	9f 93       	push	r25
    50d0:	8f 93       	push	r24
    50d2:	0e 94 c8 06 	call	0xd90	; 0xd90 <__xprintf>
    50d6:	0f 90       	pop	r0
    50d8:	0f 90       	pop	r0
    50da:	0f 90       	pop	r0
    50dc:	0f 90       	pop	r0
    50de:	04 c0       	rjmp	.+8      	; 0x50e8 <command_proc+0x290>
    else
        print("M>" );
    50e0:	8a e2       	ldi	r24, 0x2A	; 42
    50e2:	96 e0       	ldi	r25, 0x06	; 6
    50e4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    50e8:	81 e0       	ldi	r24, 0x01	; 1
    50ea:	06 c0       	rjmp	.+12     	; 0x50f8 <command_proc+0x2a0>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    50ec:	10 92 d7 01 	sts	0x01D7, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    50f0:	80 e0       	ldi	r24, 0x00	; 0
    50f2:	02 c0       	rjmp	.+4      	; 0x50f8 <command_proc+0x2a0>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    50f4:	80 e0       	ldi	r24, 0x00	; 0
    50f6:	00 cf       	rjmp	.-512    	; 0x4ef8 <command_proc+0xa0>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    50f8:	cf 91       	pop	r28
    50fa:	08 95       	ret

000050fc <__fixsfsi>:
    50fc:	04 d0       	rcall	.+8      	; 0x5106 <__fixunssfsi>
    50fe:	68 94       	set
    5100:	b1 11       	cpse	r27, r1
    5102:	8d c0       	rjmp	.+282    	; 0x521e <__fp_szero>
    5104:	08 95       	ret

00005106 <__fixunssfsi>:
    5106:	70 d0       	rcall	.+224    	; 0x51e8 <__fp_splitA>
    5108:	88 f0       	brcs	.+34     	; 0x512c <__fixunssfsi+0x26>
    510a:	9f 57       	subi	r25, 0x7F	; 127
    510c:	90 f0       	brcs	.+36     	; 0x5132 <__fixunssfsi+0x2c>
    510e:	b9 2f       	mov	r27, r25
    5110:	99 27       	eor	r25, r25
    5112:	b7 51       	subi	r27, 0x17	; 23
    5114:	a0 f0       	brcs	.+40     	; 0x513e <__fixunssfsi+0x38>
    5116:	d1 f0       	breq	.+52     	; 0x514c <__fixunssfsi+0x46>
    5118:	66 0f       	add	r22, r22
    511a:	77 1f       	adc	r23, r23
    511c:	88 1f       	adc	r24, r24
    511e:	99 1f       	adc	r25, r25
    5120:	1a f0       	brmi	.+6      	; 0x5128 <__fixunssfsi+0x22>
    5122:	ba 95       	dec	r27
    5124:	c9 f7       	brne	.-14     	; 0x5118 <__fixunssfsi+0x12>
    5126:	12 c0       	rjmp	.+36     	; 0x514c <__fixunssfsi+0x46>
    5128:	b1 30       	cpi	r27, 0x01	; 1
    512a:	81 f0       	breq	.+32     	; 0x514c <__fixunssfsi+0x46>
    512c:	77 d0       	rcall	.+238    	; 0x521c <__fp_zero>
    512e:	b1 e0       	ldi	r27, 0x01	; 1
    5130:	08 95       	ret
    5132:	74 c0       	rjmp	.+232    	; 0x521c <__fp_zero>
    5134:	67 2f       	mov	r22, r23
    5136:	78 2f       	mov	r23, r24
    5138:	88 27       	eor	r24, r24
    513a:	b8 5f       	subi	r27, 0xF8	; 248
    513c:	39 f0       	breq	.+14     	; 0x514c <__fixunssfsi+0x46>
    513e:	b9 3f       	cpi	r27, 0xF9	; 249
    5140:	cc f3       	brlt	.-14     	; 0x5134 <__fixunssfsi+0x2e>
    5142:	86 95       	lsr	r24
    5144:	77 95       	ror	r23
    5146:	67 95       	ror	r22
    5148:	b3 95       	inc	r27
    514a:	d9 f7       	brne	.-10     	; 0x5142 <__fixunssfsi+0x3c>
    514c:	3e f4       	brtc	.+14     	; 0x515c <__fixunssfsi+0x56>
    514e:	90 95       	com	r25
    5150:	80 95       	com	r24
    5152:	70 95       	com	r23
    5154:	61 95       	neg	r22
    5156:	7f 4f       	sbci	r23, 0xFF	; 255
    5158:	8f 4f       	sbci	r24, 0xFF	; 255
    515a:	9f 4f       	sbci	r25, 0xFF	; 255
    515c:	08 95       	ret

0000515e <__floatunsisf>:
    515e:	e8 94       	clt
    5160:	09 c0       	rjmp	.+18     	; 0x5174 <__floatsisf+0x12>

00005162 <__floatsisf>:
    5162:	97 fb       	bst	r25, 7
    5164:	3e f4       	brtc	.+14     	; 0x5174 <__floatsisf+0x12>
    5166:	90 95       	com	r25
    5168:	80 95       	com	r24
    516a:	70 95       	com	r23
    516c:	61 95       	neg	r22
    516e:	7f 4f       	sbci	r23, 0xFF	; 255
    5170:	8f 4f       	sbci	r24, 0xFF	; 255
    5172:	9f 4f       	sbci	r25, 0xFF	; 255
    5174:	99 23       	and	r25, r25
    5176:	a9 f0       	breq	.+42     	; 0x51a2 <__floatsisf+0x40>
    5178:	f9 2f       	mov	r31, r25
    517a:	96 e9       	ldi	r25, 0x96	; 150
    517c:	bb 27       	eor	r27, r27
    517e:	93 95       	inc	r25
    5180:	f6 95       	lsr	r31
    5182:	87 95       	ror	r24
    5184:	77 95       	ror	r23
    5186:	67 95       	ror	r22
    5188:	b7 95       	ror	r27
    518a:	f1 11       	cpse	r31, r1
    518c:	f8 cf       	rjmp	.-16     	; 0x517e <__floatsisf+0x1c>
    518e:	fa f4       	brpl	.+62     	; 0x51ce <__floatsisf+0x6c>
    5190:	bb 0f       	add	r27, r27
    5192:	11 f4       	brne	.+4      	; 0x5198 <__floatsisf+0x36>
    5194:	60 ff       	sbrs	r22, 0
    5196:	1b c0       	rjmp	.+54     	; 0x51ce <__floatsisf+0x6c>
    5198:	6f 5f       	subi	r22, 0xFF	; 255
    519a:	7f 4f       	sbci	r23, 0xFF	; 255
    519c:	8f 4f       	sbci	r24, 0xFF	; 255
    519e:	9f 4f       	sbci	r25, 0xFF	; 255
    51a0:	16 c0       	rjmp	.+44     	; 0x51ce <__floatsisf+0x6c>
    51a2:	88 23       	and	r24, r24
    51a4:	11 f0       	breq	.+4      	; 0x51aa <__floatsisf+0x48>
    51a6:	96 e9       	ldi	r25, 0x96	; 150
    51a8:	11 c0       	rjmp	.+34     	; 0x51cc <__floatsisf+0x6a>
    51aa:	77 23       	and	r23, r23
    51ac:	21 f0       	breq	.+8      	; 0x51b6 <__floatsisf+0x54>
    51ae:	9e e8       	ldi	r25, 0x8E	; 142
    51b0:	87 2f       	mov	r24, r23
    51b2:	76 2f       	mov	r23, r22
    51b4:	05 c0       	rjmp	.+10     	; 0x51c0 <__floatsisf+0x5e>
    51b6:	66 23       	and	r22, r22
    51b8:	71 f0       	breq	.+28     	; 0x51d6 <__floatsisf+0x74>
    51ba:	96 e8       	ldi	r25, 0x86	; 134
    51bc:	86 2f       	mov	r24, r22
    51be:	70 e0       	ldi	r23, 0x00	; 0
    51c0:	60 e0       	ldi	r22, 0x00	; 0
    51c2:	2a f0       	brmi	.+10     	; 0x51ce <__floatsisf+0x6c>
    51c4:	9a 95       	dec	r25
    51c6:	66 0f       	add	r22, r22
    51c8:	77 1f       	adc	r23, r23
    51ca:	88 1f       	adc	r24, r24
    51cc:	da f7       	brpl	.-10     	; 0x51c4 <__floatsisf+0x62>
    51ce:	88 0f       	add	r24, r24
    51d0:	96 95       	lsr	r25
    51d2:	87 95       	ror	r24
    51d4:	97 f9       	bld	r25, 7
    51d6:	08 95       	ret

000051d8 <__fp_split3>:
    51d8:	57 fd       	sbrc	r21, 7
    51da:	90 58       	subi	r25, 0x80	; 128
    51dc:	44 0f       	add	r20, r20
    51de:	55 1f       	adc	r21, r21
    51e0:	59 f0       	breq	.+22     	; 0x51f8 <__fp_splitA+0x10>
    51e2:	5f 3f       	cpi	r21, 0xFF	; 255
    51e4:	71 f0       	breq	.+28     	; 0x5202 <__fp_splitA+0x1a>
    51e6:	47 95       	ror	r20

000051e8 <__fp_splitA>:
    51e8:	88 0f       	add	r24, r24
    51ea:	97 fb       	bst	r25, 7
    51ec:	99 1f       	adc	r25, r25
    51ee:	61 f0       	breq	.+24     	; 0x5208 <__fp_splitA+0x20>
    51f0:	9f 3f       	cpi	r25, 0xFF	; 255
    51f2:	79 f0       	breq	.+30     	; 0x5212 <__fp_splitA+0x2a>
    51f4:	87 95       	ror	r24
    51f6:	08 95       	ret
    51f8:	12 16       	cp	r1, r18
    51fa:	13 06       	cpc	r1, r19
    51fc:	14 06       	cpc	r1, r20
    51fe:	55 1f       	adc	r21, r21
    5200:	f2 cf       	rjmp	.-28     	; 0x51e6 <__fp_split3+0xe>
    5202:	46 95       	lsr	r20
    5204:	f1 df       	rcall	.-30     	; 0x51e8 <__fp_splitA>
    5206:	08 c0       	rjmp	.+16     	; 0x5218 <__fp_splitA+0x30>
    5208:	16 16       	cp	r1, r22
    520a:	17 06       	cpc	r1, r23
    520c:	18 06       	cpc	r1, r24
    520e:	99 1f       	adc	r25, r25
    5210:	f1 cf       	rjmp	.-30     	; 0x51f4 <__fp_splitA+0xc>
    5212:	86 95       	lsr	r24
    5214:	71 05       	cpc	r23, r1
    5216:	61 05       	cpc	r22, r1
    5218:	08 94       	sec
    521a:	08 95       	ret

0000521c <__fp_zero>:
    521c:	e8 94       	clt

0000521e <__fp_szero>:
    521e:	bb 27       	eor	r27, r27
    5220:	66 27       	eor	r22, r22
    5222:	77 27       	eor	r23, r23
    5224:	cb 01       	movw	r24, r22
    5226:	97 f9       	bld	r25, 7
    5228:	08 95       	ret

0000522a <__mulsf3>:
    522a:	0b d0       	rcall	.+22     	; 0x5242 <__mulsf3x>
    522c:	78 c0       	rjmp	.+240    	; 0x531e <__fp_round>
    522e:	69 d0       	rcall	.+210    	; 0x5302 <__fp_pscA>
    5230:	28 f0       	brcs	.+10     	; 0x523c <__mulsf3+0x12>
    5232:	6e d0       	rcall	.+220    	; 0x5310 <__fp_pscB>
    5234:	18 f0       	brcs	.+6      	; 0x523c <__mulsf3+0x12>
    5236:	95 23       	and	r25, r21
    5238:	09 f0       	breq	.+2      	; 0x523c <__mulsf3+0x12>
    523a:	5a c0       	rjmp	.+180    	; 0x52f0 <__fp_inf>
    523c:	5f c0       	rjmp	.+190    	; 0x52fc <__fp_nan>
    523e:	11 24       	eor	r1, r1
    5240:	ee cf       	rjmp	.-36     	; 0x521e <__fp_szero>

00005242 <__mulsf3x>:
    5242:	ca df       	rcall	.-108    	; 0x51d8 <__fp_split3>
    5244:	a0 f3       	brcs	.-24     	; 0x522e <__mulsf3+0x4>

00005246 <__mulsf3_pse>:
    5246:	95 9f       	mul	r25, r21
    5248:	d1 f3       	breq	.-12     	; 0x523e <__mulsf3+0x14>
    524a:	95 0f       	add	r25, r21
    524c:	50 e0       	ldi	r21, 0x00	; 0
    524e:	55 1f       	adc	r21, r21
    5250:	62 9f       	mul	r22, r18
    5252:	f0 01       	movw	r30, r0
    5254:	72 9f       	mul	r23, r18
    5256:	bb 27       	eor	r27, r27
    5258:	f0 0d       	add	r31, r0
    525a:	b1 1d       	adc	r27, r1
    525c:	63 9f       	mul	r22, r19
    525e:	aa 27       	eor	r26, r26
    5260:	f0 0d       	add	r31, r0
    5262:	b1 1d       	adc	r27, r1
    5264:	aa 1f       	adc	r26, r26
    5266:	64 9f       	mul	r22, r20
    5268:	66 27       	eor	r22, r22
    526a:	b0 0d       	add	r27, r0
    526c:	a1 1d       	adc	r26, r1
    526e:	66 1f       	adc	r22, r22
    5270:	82 9f       	mul	r24, r18
    5272:	22 27       	eor	r18, r18
    5274:	b0 0d       	add	r27, r0
    5276:	a1 1d       	adc	r26, r1
    5278:	62 1f       	adc	r22, r18
    527a:	73 9f       	mul	r23, r19
    527c:	b0 0d       	add	r27, r0
    527e:	a1 1d       	adc	r26, r1
    5280:	62 1f       	adc	r22, r18
    5282:	83 9f       	mul	r24, r19
    5284:	a0 0d       	add	r26, r0
    5286:	61 1d       	adc	r22, r1
    5288:	22 1f       	adc	r18, r18
    528a:	74 9f       	mul	r23, r20
    528c:	33 27       	eor	r19, r19
    528e:	a0 0d       	add	r26, r0
    5290:	61 1d       	adc	r22, r1
    5292:	23 1f       	adc	r18, r19
    5294:	84 9f       	mul	r24, r20
    5296:	60 0d       	add	r22, r0
    5298:	21 1d       	adc	r18, r1
    529a:	82 2f       	mov	r24, r18
    529c:	76 2f       	mov	r23, r22
    529e:	6a 2f       	mov	r22, r26
    52a0:	11 24       	eor	r1, r1
    52a2:	9f 57       	subi	r25, 0x7F	; 127
    52a4:	50 40       	sbci	r21, 0x00	; 0
    52a6:	8a f0       	brmi	.+34     	; 0x52ca <__mulsf3_pse+0x84>
    52a8:	e1 f0       	breq	.+56     	; 0x52e2 <__mulsf3_pse+0x9c>
    52aa:	88 23       	and	r24, r24
    52ac:	4a f0       	brmi	.+18     	; 0x52c0 <__mulsf3_pse+0x7a>
    52ae:	ee 0f       	add	r30, r30
    52b0:	ff 1f       	adc	r31, r31
    52b2:	bb 1f       	adc	r27, r27
    52b4:	66 1f       	adc	r22, r22
    52b6:	77 1f       	adc	r23, r23
    52b8:	88 1f       	adc	r24, r24
    52ba:	91 50       	subi	r25, 0x01	; 1
    52bc:	50 40       	sbci	r21, 0x00	; 0
    52be:	a9 f7       	brne	.-22     	; 0x52aa <__mulsf3_pse+0x64>
    52c0:	9e 3f       	cpi	r25, 0xFE	; 254
    52c2:	51 05       	cpc	r21, r1
    52c4:	70 f0       	brcs	.+28     	; 0x52e2 <__mulsf3_pse+0x9c>
    52c6:	14 c0       	rjmp	.+40     	; 0x52f0 <__fp_inf>
    52c8:	aa cf       	rjmp	.-172    	; 0x521e <__fp_szero>
    52ca:	5f 3f       	cpi	r21, 0xFF	; 255
    52cc:	ec f3       	brlt	.-6      	; 0x52c8 <__mulsf3_pse+0x82>
    52ce:	98 3e       	cpi	r25, 0xE8	; 232
    52d0:	dc f3       	brlt	.-10     	; 0x52c8 <__mulsf3_pse+0x82>
    52d2:	86 95       	lsr	r24
    52d4:	77 95       	ror	r23
    52d6:	67 95       	ror	r22
    52d8:	b7 95       	ror	r27
    52da:	f7 95       	ror	r31
    52dc:	e7 95       	ror	r30
    52de:	9f 5f       	subi	r25, 0xFF	; 255
    52e0:	c1 f7       	brne	.-16     	; 0x52d2 <__mulsf3_pse+0x8c>
    52e2:	fe 2b       	or	r31, r30
    52e4:	88 0f       	add	r24, r24
    52e6:	91 1d       	adc	r25, r1
    52e8:	96 95       	lsr	r25
    52ea:	87 95       	ror	r24
    52ec:	97 f9       	bld	r25, 7
    52ee:	08 95       	ret

000052f0 <__fp_inf>:
    52f0:	97 f9       	bld	r25, 7
    52f2:	9f 67       	ori	r25, 0x7F	; 127
    52f4:	80 e8       	ldi	r24, 0x80	; 128
    52f6:	70 e0       	ldi	r23, 0x00	; 0
    52f8:	60 e0       	ldi	r22, 0x00	; 0
    52fa:	08 95       	ret

000052fc <__fp_nan>:
    52fc:	9f ef       	ldi	r25, 0xFF	; 255
    52fe:	80 ec       	ldi	r24, 0xC0	; 192
    5300:	08 95       	ret

00005302 <__fp_pscA>:
    5302:	00 24       	eor	r0, r0
    5304:	0a 94       	dec	r0
    5306:	16 16       	cp	r1, r22
    5308:	17 06       	cpc	r1, r23
    530a:	18 06       	cpc	r1, r24
    530c:	09 06       	cpc	r0, r25
    530e:	08 95       	ret

00005310 <__fp_pscB>:
    5310:	00 24       	eor	r0, r0
    5312:	0a 94       	dec	r0
    5314:	12 16       	cp	r1, r18
    5316:	13 06       	cpc	r1, r19
    5318:	14 06       	cpc	r1, r20
    531a:	05 06       	cpc	r0, r21
    531c:	08 95       	ret

0000531e <__fp_round>:
    531e:	09 2e       	mov	r0, r25
    5320:	03 94       	inc	r0
    5322:	00 0c       	add	r0, r0
    5324:	11 f4       	brne	.+4      	; 0x532a <__fp_round+0xc>
    5326:	88 23       	and	r24, r24
    5328:	52 f0       	brmi	.+20     	; 0x533e <__fp_round+0x20>
    532a:	bb 0f       	add	r27, r27
    532c:	40 f4       	brcc	.+16     	; 0x533e <__fp_round+0x20>
    532e:	bf 2b       	or	r27, r31
    5330:	11 f4       	brne	.+4      	; 0x5336 <__fp_round+0x18>
    5332:	60 ff       	sbrs	r22, 0
    5334:	04 c0       	rjmp	.+8      	; 0x533e <__fp_round+0x20>
    5336:	6f 5f       	subi	r22, 0xFF	; 255
    5338:	7f 4f       	sbci	r23, 0xFF	; 255
    533a:	8f 4f       	sbci	r24, 0xFF	; 255
    533c:	9f 4f       	sbci	r25, 0xFF	; 255
    533e:	08 95       	ret

00005340 <__udivmodqi4>:
    5340:	99 1b       	sub	r25, r25
    5342:	79 e0       	ldi	r23, 0x09	; 9
    5344:	04 c0       	rjmp	.+8      	; 0x534e <__udivmodqi4_ep>

00005346 <__udivmodqi4_loop>:
    5346:	99 1f       	adc	r25, r25
    5348:	96 17       	cp	r25, r22
    534a:	08 f0       	brcs	.+2      	; 0x534e <__udivmodqi4_ep>
    534c:	96 1b       	sub	r25, r22

0000534e <__udivmodqi4_ep>:
    534e:	88 1f       	adc	r24, r24
    5350:	7a 95       	dec	r23
    5352:	c9 f7       	brne	.-14     	; 0x5346 <__udivmodqi4_loop>
    5354:	80 95       	com	r24
    5356:	08 95       	ret

00005358 <__divmodhi4>:
    5358:	97 fb       	bst	r25, 7
    535a:	07 2e       	mov	r0, r23
    535c:	16 f4       	brtc	.+4      	; 0x5362 <__divmodhi4+0xa>
    535e:	00 94       	com	r0
    5360:	07 d0       	rcall	.+14     	; 0x5370 <__divmodhi4_neg1>
    5362:	77 fd       	sbrc	r23, 7
    5364:	09 d0       	rcall	.+18     	; 0x5378 <__divmodhi4_neg2>
    5366:	0e 94 c6 29 	call	0x538c	; 0x538c <__udivmodhi4>
    536a:	07 fc       	sbrc	r0, 7
    536c:	05 d0       	rcall	.+10     	; 0x5378 <__divmodhi4_neg2>
    536e:	3e f4       	brtc	.+14     	; 0x537e <__divmodhi4_exit>

00005370 <__divmodhi4_neg1>:
    5370:	90 95       	com	r25
    5372:	81 95       	neg	r24
    5374:	9f 4f       	sbci	r25, 0xFF	; 255
    5376:	08 95       	ret

00005378 <__divmodhi4_neg2>:
    5378:	70 95       	com	r23
    537a:	61 95       	neg	r22
    537c:	7f 4f       	sbci	r23, 0xFF	; 255

0000537e <__divmodhi4_exit>:
    537e:	08 95       	ret

00005380 <__tablejump2__>:
    5380:	ee 0f       	add	r30, r30
    5382:	ff 1f       	adc	r31, r31

00005384 <__tablejump__>:
    5384:	05 90       	lpm	r0, Z+
    5386:	f4 91       	lpm	r31, Z
    5388:	e0 2d       	mov	r30, r0
    538a:	09 94       	ijmp

0000538c <__udivmodhi4>:
    538c:	aa 1b       	sub	r26, r26
    538e:	bb 1b       	sub	r27, r27
    5390:	51 e1       	ldi	r21, 0x11	; 17
    5392:	07 c0       	rjmp	.+14     	; 0x53a2 <__udivmodhi4_ep>

00005394 <__udivmodhi4_loop>:
    5394:	aa 1f       	adc	r26, r26
    5396:	bb 1f       	adc	r27, r27
    5398:	a6 17       	cp	r26, r22
    539a:	b7 07       	cpc	r27, r23
    539c:	10 f0       	brcs	.+4      	; 0x53a2 <__udivmodhi4_ep>
    539e:	a6 1b       	sub	r26, r22
    53a0:	b7 0b       	sbc	r27, r23

000053a2 <__udivmodhi4_ep>:
    53a2:	88 1f       	adc	r24, r24
    53a4:	99 1f       	adc	r25, r25
    53a6:	5a 95       	dec	r21
    53a8:	a9 f7       	brne	.-22     	; 0x5394 <__udivmodhi4_loop>
    53aa:	80 95       	com	r24
    53ac:	90 95       	com	r25
    53ae:	bc 01       	movw	r22, r24
    53b0:	cd 01       	movw	r24, r26
    53b2:	08 95       	ret

000053b4 <__eerd_byte_m32u4>:
    53b4:	f9 99       	sbic	0x1f, 1	; 31
    53b6:	fe cf       	rjmp	.-4      	; 0x53b4 <__eerd_byte_m32u4>
    53b8:	92 bd       	out	0x22, r25	; 34
    53ba:	81 bd       	out	0x21, r24	; 33
    53bc:	f8 9a       	sbi	0x1f, 0	; 31
    53be:	99 27       	eor	r25, r25
    53c0:	80 b5       	in	r24, 0x20	; 32
    53c2:	08 95       	ret

000053c4 <__eerd_word_m32u4>:
    53c4:	a8 e1       	ldi	r26, 0x18	; 24
    53c6:	b0 e0       	ldi	r27, 0x00	; 0
    53c8:	42 e0       	ldi	r20, 0x02	; 2
    53ca:	50 e0       	ldi	r21, 0x00	; 0
    53cc:	0c 94 fd 29 	jmp	0x53fa	; 0x53fa <__eerd_blraw_m32u4>

000053d0 <__eewr_byte_m32u4>:
    53d0:	26 2f       	mov	r18, r22

000053d2 <__eewr_r18_m32u4>:
    53d2:	f9 99       	sbic	0x1f, 1	; 31
    53d4:	fe cf       	rjmp	.-4      	; 0x53d2 <__eewr_r18_m32u4>
    53d6:	1f ba       	out	0x1f, r1	; 31
    53d8:	92 bd       	out	0x22, r25	; 34
    53da:	81 bd       	out	0x21, r24	; 33
    53dc:	20 bd       	out	0x20, r18	; 32
    53de:	0f b6       	in	r0, 0x3f	; 63
    53e0:	f8 94       	cli
    53e2:	fa 9a       	sbi	0x1f, 2	; 31
    53e4:	f9 9a       	sbi	0x1f, 1	; 31
    53e6:	0f be       	out	0x3f, r0	; 63
    53e8:	01 96       	adiw	r24, 0x01	; 1
    53ea:	08 95       	ret

000053ec <__eewr_word_m32u4>:
    53ec:	0e 94 e8 29 	call	0x53d0	; 0x53d0 <__eewr_byte_m32u4>
    53f0:	27 2f       	mov	r18, r23
    53f2:	0c 94 e9 29 	jmp	0x53d2	; 0x53d2 <__eewr_r18_m32u4>

000053f6 <__eerd_block_m32u4>:
    53f6:	dc 01       	movw	r26, r24
    53f8:	cb 01       	movw	r24, r22

000053fa <__eerd_blraw_m32u4>:
    53fa:	fc 01       	movw	r30, r24
    53fc:	f9 99       	sbic	0x1f, 1	; 31
    53fe:	fe cf       	rjmp	.-4      	; 0x53fc <__eerd_blraw_m32u4+0x2>
    5400:	06 c0       	rjmp	.+12     	; 0x540e <__eerd_blraw_m32u4+0x14>
    5402:	f2 bd       	out	0x22, r31	; 34
    5404:	e1 bd       	out	0x21, r30	; 33
    5406:	f8 9a       	sbi	0x1f, 0	; 31
    5408:	31 96       	adiw	r30, 0x01	; 1
    540a:	00 b4       	in	r0, 0x20	; 32
    540c:	0d 92       	st	X+, r0
    540e:	41 50       	subi	r20, 0x01	; 1
    5410:	50 40       	sbci	r21, 0x00	; 0
    5412:	b8 f7       	brcc	.-18     	; 0x5402 <__eerd_blraw_m32u4+0x8>
    5414:	08 95       	ret

00005416 <_exit>:
    5416:	f8 94       	cli

00005418 <__stop_program>:
    5418:	ff cf       	rjmp	.-2      	; 0x5418 <__stop_program>

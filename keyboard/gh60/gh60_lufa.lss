
gh60_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00005946  000059da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005946  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ae  00800138  00800138  00005a12  2**0
                  ALLOC
  3 .noinit       00000004  008001e6  008001e6  00005a12  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000097  00000000  00000000  000062cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00006363  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000b30  00000000  00000000  00006378  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00010d99  00000000  00000000  00006ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003fdc  00000000  00000000  00017c41  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000583e  00000000  00000000  0001bc1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001d0c  00000000  00000000  0002145c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000045e2  00000000  00000000  00023168  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008e7d  00000000  00000000  0002774a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000cb0  00000000  00000000  000305c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
       0:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__ctors_end>
       4:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
       8:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
       c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      10:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      14:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      18:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
	uint8_t ErrorCode;

	while (*BytesRem)
      1c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      20:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      24:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
      28:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__vector_10>
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
      2c:	0c 94 c2 0e 	jmp	0x1d84	; 0x1d84 <__vector_11>
      30:	0c 94 6c 1f 	jmp	0x3ed8	; 0x3ed8 <__vector_12>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
      34:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      38:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      3c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
      40:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
			{
				*CurrConfigLoc = PrevDescLoc;
      44:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
				*BytesRem      = PrevBytesRem;
      48:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      4c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
      50:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      54:	0c 94 d3 1f 	jmp	0x3fa6	; 0x3fa6 <__vector_21>
      58:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      5c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      60:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      64:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      68:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      70:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      74:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      78:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      7c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
      80:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      84:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      88:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
      8c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      90:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      94:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
      98:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      a0:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      a4:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a8:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      ac:	2a 10       	cpse	r2, r10
      ae:	4c 10       	cpse	r4, r12
      b0:	38 11       	cpse	r19, r8
      b2:	4c 10       	cpse	r4, r12
      b4:	38 11       	cpse	r19, r8
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	8e 10       	cpse	r8, r14
      b8:	b2 10       	cpse	r11, r2
      ba:	38 11       	cpse	r19, r8
      bc:	07 11       	cpse	r16, r7
      be:	1a 11       	cpse	r17, r10
      c0:	64 14       	cp	r6, r4
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	64 14       	cp	r6, r4
      c4:	92 14       	cp	r9, r2
      c6:	92 14       	cp	r9, r2
      c8:	e7 14       	cp	r14, r7
      ca:	23 15       	cp	r18, r3
      cc:	14 17       	cp	r17, r20
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	14 17       	cp	r17, r20
      d0:	3b 15       	cp	r19, r11
      d2:	14 17       	cp	r17, r20
      d4:	32 16       	cp	r3, r18
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	32 16       	cp	r3, r18
      d8:	ee 16       	cp	r14, r30
      da:	14 17       	cp	r17, r20
      dc:	14 17       	cp	r17, r20
      de:	02 17       	cp	r16, r18
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	93 28       	or	r9, r3
      e2:	bb 28       	or	r11, r11
      e4:	fa 26       	eor	r15, r26
      e6:	a4 29       	or	r26, r4
      e8:	a4 29       	or	r26, r4
      ea:	48 28       	or	r4, r8
      ec:	a4 29       	or	r26, r4
      ee:	a4 29       	or	r26, r4
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
      f0:	e7 28       	or	r14, r7
      f2:	a4 29       	or	r26, r4
      f4:	fa 28       	or	r15, r10
		ReportSize--;
      f6:	6f 29       	or	r22, r15
      f8:	a4 29       	or	r26, r4
	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;
      fa:	a4 29       	or	r26, r4
      fc:	a4 29       	or	r26, r4
      fe:	a4 29       	or	r26, r4
     100:	44 29       	or	r20, r4
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     102:	2b 29       	or	r18, r11
     104:	a4 29       	or	r26, r4
     106:	14 29       	or	r17, r4
     108:	a4 29       	or	r26, r4
     10a:	d4 28       	or	r13, r4
     10c:	a4 29       	or	r26, r4
     10e:	a4 29       	or	r26, r4
     110:	9e 29       	or	r25, r14
     112:	9e 29       	or	r25, r14
     114:	9e 29       	or	r25, r14
     116:	9e 29       	or	r25, r14
     118:	9e 29       	or	r25, r14
     11a:	9e 29       	or	r25, r14
     11c:	9e 29       	or	r25, r14
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     11e:	9e 29       	or	r25, r14
     120:	9e 29       	or	r25, r14
     122:	9c 29       	or	r25, r12
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     124:	a4 29       	or	r26, r4
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	9c 29       	or	r25, r12
     128:	a4 29       	or	r26, r4
     12a:	a4 29       	or	r26, r4
     12c:	a4 29       	or	r26, r4
     12e:	a4 29       	or	r26, r4
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     130:	a4 29       	or	r26, r4
     132:	a4 29       	or	r26, r4
     134:	a4 29       	or	r26, r4
     136:	a4 29       	or	r26, r4
     138:	a4 29       	or	r26, r4
     13a:	a4 29       	or	r26, r4
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     13c:	a4 29       	or	r26, r4
     13e:	9c 29       	or	r25, r12
				ReportData     += 4;
     140:	a4 29       	or	r26, r4
     142:	a4 29       	or	r26, r4
     144:	48 28       	or	r4, r8
				break;
     146:	29 28       	or	r2, r9
			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     148:	a0 29       	or	r26, r0
     14a:	a0 29       	or	r26, r0
     14c:	a0 29       	or	r26, r0
     14e:	a0 29       	or	r26, r0
     150:	a0 29       	or	r26, r0
     152:	a0 29       	or	r26, r0
     154:	a0 29       	or	r26, r0
     156:	a0 29       	or	r26, r0
     158:	a0 29       	or	r26, r0
				ReportSize     -= 2;
     15a:	a0 29       	or	r26, r0
     15c:	a0 29       	or	r26, r0
				ReportData     += 2;
     15e:	a0 29       	or	r26, r0
     160:	81 29       	or	r24, r1
     162:	a4 29       	or	r26, r4
				break;
     164:	a7 28       	or	r10, r7

00000166 <__trampolines_end>:
			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     166:	f1 a1       	ldd	r31, Z+33	; 0x21

00000168 <keymaps>:
     168:	27 1e 1f 20 21 22 23 24 25 26 27 1e 1f 20 27 1e     '.. !"#$%&'.. '.
				ReportSize     -= 1;
				ReportData     += 1;
     178:	1f 20 21 22 23 24 25 26 27 1e 1f 20 27 1e 1f 20     . !"#$%&'.. '.. 
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     188:	21 22 23 24 25 26 27 1e 00 20 27 00 1f 20 21 22     !"#$%&'.. '.. !"
     198:	23 24 25 26 27 1e 1f 20 27 1e 1f 00 00 00 23 00     #$%&'.. '.....#.
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1a8:	00 26 27 1e 1f 20                                   .&'.. 

000001ae <__c.2367>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ae:	0a 00                                               ..

000001b0 <__c.2365>:
     1b0:	25 30 31 36 62 00                                   %016b.

000001b6 <__c.2363>:
     1b6:	3a 20 00                                            : .

000001b9 <__c.2361>:
     1b9:	25 30 32 58 00                                      %02X.

000001be <__c.2358>:
     1be:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1ce:	42 43 44 45 46 0a 00                                BCDEF..

000001d5 <__c.2331>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1d5:	0a 00                                               ..

000001d7 <__c.2329>:
     1d7:	25 30 32 58 00                                      %02X.

000001dc <__c.2327>:
     1dc:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

000001e6 <__c.4678>:
     1e6:	5b 73 5d 00                                         [s].

000001ea <__c.4676>:
     1ea:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     1fa:	00                                                  .

000001fb <__c.4674>:
     1fb:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     20b:	00                                                  .

0000020c <__c.4582>:
     20c:	5b 57 5d 00                                         [W].

00000210 <__c.4578>:
     210:	5b 53 5d 00                                         [S].

00000214 <__c.4574>:
     214:	5b 52 5d 00                                         [R].

00000218 <__c.4569>:
     218:	5b 44 5d 00                                         [D].

0000021c <__c.4564>:
     21c:	5b 43 5d 00                                         [C].

00000220 <ProductString>:
     220:	0e 03 6a 00 75 00 6c 00 69 00 61 00 6e 00 00 00     ..j.u.l.i.a.n...

00000230 <ManufacturerString>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     230:	0e 03 6a 00 75 00 6c 00 69 00 61 00 6e 00 00 00     ..j.u.l.i.a.n...

00000240 <LanguageString>:
     240:	04 03 09 04                                         ....

00000244 <ConfigurationDescriptor>:
     244:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     254:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     264:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     284:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
				break;
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     294:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
				break;
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
				break;
     2a4:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;
     2b4:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;
     2c4:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

000002d1 <DeviceDescriptor>:
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d1:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....

				if (ParserData->UsingReportIDs)
     2e1:	00 01                                               ..

000002e3 <NKROReport>:
     2e3:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f3:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     303:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     313:	25 01 95 78 75 01 81 02 c0                          %..xu....

0000031c <ConsoleReport>:
     31c:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     32c:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

0000033c <ExtrakeyReport>:
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33c:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     34c:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     35c:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	10 95 01 81 00 c0                                   ......

00000372 <MouseReport>:

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     372:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     382:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     392:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     3a2:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000003bf <KeyboardReport>:
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3bf:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3cf:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3df:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3ef:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

000003fe <__c.4335>:
     3fe:	0a 00                                               ..

00000400 <__c.4330>:
				}

				CurrCollectionPath->Type       = ReportItemData;
     400:	25 30 32 58 20 00                                   %02X .

00000406 <__c.4327>:
     406:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     416:	20 00                                                .

00000418 <__c.4668>:

				if (UsageListSize)
     418:	0a 00                                               ..

0000041a <__c.4666>:
     41a:	25 30 32 58 00                                      %02X.

0000041f <__c.4664>:
     41f:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42f:	3a 20 00                                            : .

00000432 <__c.4475>:
     432:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can

					for (uint8_t i = 0; i < UsageListSize; i++)
     442:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000450 <__c.4470>:
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     450:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     460:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

0000046e <__c.4614>:
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	64 6f 6e 65 2e 0a 00                                done...

00000475 <__c.4608>:
     475:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     485:	2e 2e 2e 20 00                                      ... .

0000048a <__c.4407>:
     48a:	29 0a 00                                            )..

0000048d <__c.4405>:
     48d:	25 75 00                                            %u.

00000490 <__c.4403>:
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     490:	2f 00                                               /.

00000492 <__c.4401>:
     492:	25 75 00                                            %u.

00000495 <__c.4399>:
     495:	5d 28 00                                            ](.

00000498 <__c.4397>:
     498:	25 64 00                                            %d.

0000049b <__c.4395>:
     49b:	20 00                                                .

0000049d <__c.4393>:
     49d:	25 64 00                                            %d.

000004a0 <__c.4391>:
     4a0:	20 00                                                .

000004a2 <__c.4389>:
				break;
     4a2:	25 64 00                                            %d.

000004a5 <__c.4387>:
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4a5:	20 00                                                .

000004a7 <__c.4385>:
     4a7:	25 64 00                                            %d.

000004aa <__c.4383>:
     4aa:	7c 00                                               |.

000004ac <__c.4381>:
     4ac:	25 30 32 58 00                                      %02X.

000004b1 <__c.4379>:
     4b1:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4c1:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     4d1:	20 5b 00                                             [.

000004d4 <__c.5107>:
     4d4:	0a 00                                               ..

000004d6 <__c.5105>:
     4d6:	25 75 00                                            %u.

000004d9 <__c.5103>:
     4d9:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e9:	5f 6d 61 78 20 3d 20 00                             _max = .

000004f1 <__c.5100>:
     4f1:	0a 00                                               ..

000004f3 <__c.5098>:
     4f3:	25 75 00                                            %u.

000004f6 <__c.5096>:
     4f6:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	65 64 20 3d 20 00                                   ed = .

0000050c <__c.5093>:
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     50c:	0a 00                                               ..

0000050e <__c.5091>:
     50e:	25 75 00                                            %u.

00000511 <__c.5089>:
     511:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     521:	20 00                                                .

00000523 <__c.5086>:
     523:	0a 00                                               ..

00000525 <__c.5084>:
     525:	25 75 00                                            %u.

00000528 <__c.5082>:
     528:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 00     mk_max_speed = .

00000538 <__c.5079>:

						for (uint8_t i = 0; i < UsageListSize; i++)
						  UsageList[i] = UsageList[i + 1];
     538:	0a 00                                               ..

0000053a <__c.5077>:
     53a:	25 75 00                                            %u.

0000053d <__c.5075>:
     53d:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 00        mk_interval = .

0000054c <__c.5071>:

						UsageListSize--;
     54c:	0a 00                                               ..

0000054e <__c.5069>:
     54e:	25 75 00                                            %u.

00000551 <__c.5067>:
     551:	6d 6b 5f 64 65 6c 61 79 20 3d 20 00                 mk_delay = .

0000055d <__c.5060>:
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     55d:	0a 00                                               ..

0000055f <__c.5058>:
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55f:	25 75 00                                            %u.

00000562 <__c.5056>:
     562:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     572:	5f 6d 61 78 20 3d 20 00                             _max = .

0000057a <__c.5053>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     57a:	0a 00                                               ..

0000057c <__c.5051>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	25 75 00                                            %u.

0000057f <__c.5049>:
     57f:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     58f:	65 64 20 3d 20 00                                   ed = .

00000595 <__c.5046>:
     595:	0a 00                                               ..

00000597 <__c.5044>:
     597:	25 75 00                                            %u.

0000059a <__c.5042>:
     59a:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5aa:	20 00                                                .

000005ac <__c.5039>:
     5ac:	0a 00                                               ..

000005ae <__c.5037>:
     5ae:	25 75 00                                            %u.

000005b1 <__c.5035>:

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b1:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 00     mk_max_speed = .

000005c1 <__c.5032>:
     5c1:	0a 00                                               ..

000005c3 <__c.5030>:
     5c3:	25 75 00                                            %u.

000005c6 <__c.5028>:
     5c6:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 00        mk_interval = .

000005d5 <__c.5024>:
     5d5:	0a 00                                               ..

000005d7 <__c.5022>:
     5d7:	25 75 00                                            %u.

000005da <__c.5020>:
     5da:	6d 6b 5f 64 65 6c 61 79 20 3d 20 00                 mk_delay = .

000005e6 <__c.5013>:
     5e6:	0a 00                                               ..

000005e8 <__c.5011>:

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5e8:	25 75 00                                            %u.

000005eb <__c.5009>:
     5eb:	36 3a 20 6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65     6: mk_wheel_time
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     5fb:	5f 74 6f 5f 6d 61 78 3a 20 00                       _to_max: .

00000605 <__c.5007>:
     605:	0a 00                                               ..

00000607 <__c.5005>:
     607:	25 75 00                                            %u.

0000060a <__c.5003>:
     60a:	35 3a 20 6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f     5: mk_wheel_max_
     61a:	73 70 65 65 64 3a 20 00                             speed: .

00000622 <__c.5001>:
     622:	0a 00                                               ..

00000624 <__c.4999>:
     624:	25 75 00                                            %u.

00000627 <__c.4997>:
     627:	34 3a 20 6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61     4: mk_time_to_ma
     637:	78 3a 20 00                                         x: .

0000063b <__c.4995>:
     63b:	0a 00                                               ..

0000063d <__c.4993>:
     63d:	25 75 00                                            %u.

00000640 <__c.4991>:
     640:	33 3a 20 6d 6b 5f 6d 61 78 5f 73 70 65 65 64 3a     3: mk_max_speed:
     650:	20 00                                                .

00000652 <__c.4989>:
     652:	0a 00                                               ..

00000654 <__c.4987>:
     654:	25 75 00                                            %u.

00000657 <__c.4985>:
     657:	32 3a 20 6d 6b 5f 69 6e 74 65 72 76 61 6c 28 6d     2: mk_interval(m
     667:	73 29 3a 20 00                                      s): .

0000066c <__c.4983>:
     66c:	0a 00                                               ..

0000066e <__c.4981>:
     66e:	25 75 00                                            %u.

00000671 <__c.4979>:
     671:	31 3a 20 6d 6b 5f 64 65 6c 61 79 28 2a 31 30 6d     1: mk_delay(*10m
					  ParserData->TotalReportItems++;
     681:	73 29 3a 20 00                                      s): .

00000686 <__c.4977>:
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     686:	0a 0a 2d 2d 2d 2d 2d 20 4d 6f 75 73 65 6b 65 79     ..----- Mousekey
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     696:	20 50 61 72 61 6d 65 74 65 72 73 20 2d 2d 2d 2d      Parameters ----
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6a6:	2d 0a 00                                            -..

000006a9 <__c.5197>:
     6a9:	3e 20 00                                            > .

000006ac <__c.5195>:
     6ac:	25 75 00                                            %u.

000006af <__c.5193>:
	  return HID_PARSE_NoUnfilteredReportItems;
     6af:	4d 00                                               M.

000006b1 <__c.5191>:
     6b1:	3f 00                                               ?.

000006b3 <__c.5188>:

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6b3:	73 65 74 20 64 65 66 61 75 6c 74 20 76 61 6c 75     set default valu
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6c3:	65 73 2e 0a 00                                      es...

000006c8 <__c.5181>:
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6c8:	0a 00                                               ..

000006ca <__c.5179>:
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6ca:	25 75 00                                            %u.

000006cd <__c.5177>:

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6cd:	73 65 6c 65 63 74 65 64 20 70 61 72 61 6d 65 74     selected paramet
     6dd:	65 72 3a 20 00                                      er: .

000006e2 <__c.5164>:
     6e2:	43 3e 20 00                                         C> .

000006e6 <__c.5162>:
     6e6:	0a 51 75 69 74 20 4d 6f 75 73 65 6b 65 79 20 43     .Quit Mousekey C
     6f6:	6f 6e 73 6f 6c 65 0a 00                             onsole..

000006fe <__c.5152>:
     6fe:	53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77 69     See http://en.wi
     70e:	6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b 69     kipedia.org/wiki
     71e:	2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00              /Mouse_keys..

0000072b <__c.5150>:
     72b:	0a 00                                               ..

0000072d <__c.5148>:
     72d:	25 75 00                                            %u.

00000730 <__c.5146>:
     730:	2c 20 77 68 65 65 6c 3d 00                          , wheel=.

00000739 <__c.5144>:
     739:	25 75 00                                            %u.

0000073c <__c.5142>:
     73c:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     74c:	73 6f 72 3d 00                                      sor=.

00000751 <__c.5140>:
     751:	0a 73 70 65 65 64 20 3d 20 64 65 6c 74 61 20 2a     .speed = delta *
     761:	20 6d 61 78 5f 73 70 65 65 64 20 2a 20 28 72 65      max_speed * (re
     771:	70 65 61 74 20 2f 20 74 69 6d 65 5f 74 6f 5f 6d     peat / time_to_m
     781:	61 78 29 0a 00                                      ax)..

00000786 <__c.5138>:
     786:	70 67 64 6f 77 6e 3a 09 64 65 63 72 65 61 73 65     pgdown:.decrease
     796:	20 70 61 72 61 6d 65 74 65 72 73 28 2d 31 30 29      parameters(-10)
     7a6:	0a 00                                               ..

000007a8 <__c.5136>:
     7a8:	70 67 75 70 3a 09 69 6e 63 72 65 61 73 65 20 70     pgup:.increase p
     7b8:	61 72 61 6d 65 74 65 72 73 28 2b 31 30 29 0a 00     arameters(+10)..

000007c8 <__c.5134>:
     7c8:	64 6f 77 6e 3a 09 64 65 63 72 65 61 73 65 20 70     down:.decrease p
     7d8:	61 72 61 6d 65 74 65 72 73 28 2d 31 29 0a 00        arameters(-1)..

000007e7 <__c.5132>:
     7e7:	75 70 3a 09 69 6e 63 72 65 61 73 65 20 70 61 72     up:.increase par
     7f7:	61 6d 65 74 65 72 73 28 2b 31 29 0a 00              ameters(+1)..

00000804 <__c.5130>:
     804:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 20 76     d:.set default v
     814:	61 6c 75 65 73 0a 00                                alues..

0000081b <__c.5128>:
     81b:	70 3a 09 70 72 69 6e 74 20 70 61 72 61 6d 65 74     p:.print paramet
     82b:	65 72 73 0a 00                                      ers..

00000830 <__c.5126>:
     830:	36 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 77 68 65     6:.select mk_whe
     840:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 00     el_time_to_max..

00000850 <__c.5124>:
     850:	35 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 77 68 65     5:.select mk_whe
     860:	65 6c 5f 6d 61 78 5f 73 70 65 65 64 0a 00           el_max_speed..

0000086e <__c.5122>:
     86e:	34 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 74 69 6d     4:.select mk_tim
     87e:	65 5f 74 6f 5f 6d 61 78 0a 00                       e_to_max..

00000888 <__c.5120>:
     888:	33 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 6d 61 78     3:.select mk_max
     898:	5f 73 70 65 65 64 0a 00                             _speed..

000008a0 <__c.5118>:
     8a0:	32 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 69 6e 74     2:.select mk_int
     8b0:	65 72 76 61 6c 28 6d 73 29 0a 00                    erval(ms)..

000008bb <__c.5116>:
     8bb:	31 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 64 65 6c     1:.select mk_del
     8cb:	61 79 28 2a 31 30 6d 73 29 0a 00                    ay(*10ms)..

000008d6 <__c.5114>:
     8d6:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

000008e3 <__c.5112>:
     8e3:	0a 0a 2d 2d 2d 2d 2d 20 4d 6f 75 73 65 6b 65 79     ..----- Mousekey
     8f3:	20 50 61 72 61 6d 65 74 65 72 73 20 48 65 6c 70      Parameters Help
     903:	20 2d 2d 2d 2d 2d 0a 00                              -----..

0000090b <__c.4969>:
     90b:	3f 00                                               ?.

0000090d <__c.4966>:
     90d:	4d 30 3e 00                                         M0>.

00000911 <__c.4964>:
     911:	0a 45 6e 74 65 72 20 4d 6f 75 73 65 6b 65 79 20     .Enter Mousekey 
     921:	43 6f 6e 73 6f 6c 65 0a 00                          Console..

0000092a <__c.4961>:
     92a:	0a 51 75 69 74 20 43 6f 6e 73 6f 6c 65 20 4d 6f     .Quit Console Mo
     93a:	64 65 0a 00                                         de..

0000093e <__c.4971>:
     93e:	43 3e 20 00                                         C> .

00000942 <__c.5223>:
     942:	0a 00                                               ..

00000944 <__c.5221>:
     944:	25 75 00                                            %u.

00000947 <__c.5219>:
     947:	20 74 6f 20 00                                       to .

0000094c <__c.5217>:
     94c:	25 75 00                                            %u.

0000094f <__c.5215>:
     94f:	73 77 69 74 63 68 5f 64 65 66 61 75 6c 74 5f 6c     switch_default_l
     95f:	61 79 65 72 3a 20 00                                ayer: .

00000966 <__c.4951>:
     966:	6d 3a 09 6d 6f 75 73 65 6b 65 79 0a 00              m:.mousekey..

00000973 <__c.4949>:
     973:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

00000980 <__c.4947>:
     980:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6e 73 6f 6c 65 20     ..----- Console 
     990:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

0000099c <__c.4763>:
     99c:	50 61 75 73 3a 09 6a 75 6d 70 20 74 6f 20 62 6f     Paus:.jump to bo
     9ac:	6f 74 6c 6f 61 64 65 72 0a 00                       otloader..

000009b6 <__c.4761>:
     9b6:	43 61 70 73 3a 09 4c 6f 63 6b 20 4b 65 79 62 6f     Caps:.Lock Keybo
     9c6:	61 72 64 28 43 68 69 6c 64 20 50 72 6f 6f 66 29     ard(Child Proof)
     9d6:	0a 00                                               ..

000009d8 <__c.4759>:
     9d8:	50 53 63 72 3a 09 70 6f 77 65 72 20 64 6f 77 6e     PScr:.power down
     9e8:	2f 72 65 6d 6f 74 65 20 77 61 6b 65 2d 75 70 0a     /remote wake-up.
     9f8:	00                                                  .

000009f9 <__c.4757>:
     9f9:	34 2f 46 34 3a 09 73 77 69 74 63 68 20 74 6f 20     4/F4:.switch to 
     a09:	4c 61 79 65 72 34 20 0a 00                          Layer4 ..

00000a12 <__c.4755>:
     a12:	33 2f 46 33 3a 09 73 77 69 74 63 68 20 74 6f 20     3/F3:.switch to 
     a22:	4c 61 79 65 72 33 20 0a 00                          Layer3 ..

00000a2b <__c.4753>:
     a2b:	32 2f 46 32 3a 09 73 77 69 74 63 68 20 74 6f 20     2/F2:.switch to 
     a3b:	4c 61 79 65 72 32 20 0a 00                          Layer2 ..

00000a44 <__c.4751>:
     a44:	31 2f 46 31 3a 09 73 77 69 74 63 68 20 74 6f 20     1/F1:.switch to 
     a54:	4c 61 79 65 72 31 20 0a 00                          Layer1 ..

00000a5d <__c.4749>:
     a5d:	30 2f 46 31 30 3a 09 73 77 69 74 63 68 20 74 6f     0/F10:.switch to
     a6d:	20 4c 61 79 65 72 30 20 0a 00                        Layer0 ..

00000a77 <__c.4747>:
     a77:	6e 3a 09 74 6f 67 67 6c 65 20 4e 4b 52 4f 0a 00     n:.toggle NKRO..

00000a87 <__c.4745>:
     a87:	65 3a 09 70 72 69 6e 74 20 65 65 70 72 6f 6d 20     e:.print eeprom 
     a97:	63 6f 6e 66 69 67 0a 00                             config..

00000a9f <__c.4743>:
     a9f:	73 3a 09 70 72 69 6e 74 20 73 74 61 74 75 73 0a     s:.print status.
     aaf:	00                                                  .

00000ab0 <__c.4741>:
     ab0:	74 3a 09 70 72 69 6e 74 20 74 69 6d 65 72 20 63     t:.print timer c
     ac0:	6f 75 6e 74 0a 00                                   ount..

00000ac6 <__c.4739>:
     ac6:	76 3a 09 70 72 69 6e 74 20 64 65 76 69 63 65 20     v:.print device 
     ad6:	76 65 72 73 69 6f 6e 20 26 20 69 6e 66 6f 0a 00     version & info..

00000ae6 <__c.4737>:
     ae6:	6d 3a 09 74 6f 67 67 6c 65 20 6d 6f 75 73 65 20     m:.toggle mouse 
     af6:	64 65 62 75 67 0a 00                                debug..

00000afd <__c.4735>:
     afd:	6b 3a 09 74 6f 67 67 6c 65 20 6b 65 79 62 6f 61     k:.toggle keyboa
     b0d:	72 64 20 64 65 62 75 67 0a 00                       rd debug..

00000b17 <__c.4733>:
     b17:	78 3a 09 74 6f 67 67 6c 65 20 6d 61 74 72 69 78     x:.toggle matrix
     b27:	20 64 65 62 75 67 0a 00                              debug..

00000b2f <__c.4731>:
     b2f:	64 3a 09 74 6f 67 67 6c 65 20 64 65 62 75 67 20     d:.toggle debug 
     b3f:	65 6e 61 62 6c 65 0a 00                             enable..

00000b47 <__c.4729>:
     b47:	63 3a 09 65 6e 74 65 72 20 63 6f 6e 73 6f 6c 65     c:.enter console
     b57:	20 6d 6f 64 65 0a 00                                 mode..

00000b5e <__c.4727>:
     b5e:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6d 6d 61 6e 64 20     ..----- Command 
     b6e:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

00000b7a <__c.4858>:
     b7a:	0a 00                                               ..

00000b7c <__c.4856>:
     b7c:	25 75 00                                            %u.

00000b7f <__c.4854>:
     b7f:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000b87 <__c.4852>:
     b87:	0a 00                                               ..

00000b89 <__c.4850>:
     b89:	25 75 00                                            %u.

00000b8c <__c.4848>:
     b8c:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     b9c:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000ba8 <__c.4846>:
     ba8:	0a 00                                               ..

00000baa <__c.4844>:
     baa:	25 75 00                                            %u.

00000bad <__c.4842>:
     bad:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     bbd:	20 00                                                .

00000bbf <__c.4840>:
     bbf:	0a 00                                               ..

00000bc1 <__c.4838>:
     bc1:	25 75 00                                            %u.

00000bc4 <__c.4836>:
     bc4:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000bce <__c.4834>:
     bce:	0a 00                                               ..

00000bd0 <__c.4832>:
     bd0:	25 75 00                                            %u.

00000bd3 <__c.4830>:
     bd3:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     be3:	20 00                                                .

00000be5 <__c.4828>:
     be5:	0a 00                                               ..

00000be7 <__c.4826>:
     be7:	25 75 00                                            %u.

00000bea <__c.4824>:
     bea:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     bfa:	20 00                                                .

00000bfc <__c.4822>:
     bfc:	0a 00                                               ..

00000bfe <__c.4820>:
     bfe:	25 75 00                                            %u.

00000c01 <__c.4818>:
     c01:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     c11:	74 72 6f 6c 3a 20 00                                trol: .

00000c18 <__c.4816>:
     c18:	0a 00                                               ..

00000c1a <__c.4814>:
     c1a:	25 75 00                                            %u.

00000c1d <__c.4812>:
     c1d:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     c2d:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000c36 <__c.4810>:
     c36:	0a 00                                               ..

00000c38 <__c.4808>:
     c38:	25 30 32 58 00                                      %02X.

00000c3d <__c.4806>:
     c3d:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     c4d:	77 3a 20 00                                         w: .

00000c51 <__c.4803>:
     c51:	0a 00                                               ..

00000c53 <__c.4801>:
     c53:	25 75 00                                            %u.

00000c56 <__c.4799>:
     c56:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000c5f <__c.4797>:
     c5f:	0a 00                                               ..

00000c61 <__c.4795>:
     c61:	25 75 00                                            %u.

00000c64 <__c.4793>:
     c64:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000c70 <__c.4791>:
     c70:	0a 00                                               ..

00000c72 <__c.4789>:
     c72:	25 75 00                                            %u.

00000c75 <__c.4787>:
     c75:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000c7f <__c.4785>:
     c7f:	0a 00                                               ..

00000c81 <__c.4783>:
     c81:	25 75 00                                            %u.

00000c84 <__c.4781>:
     c84:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000c8e <__c.4779>:
     c8e:	0a 00                                               ..

00000c90 <__c.4777>:
     c90:	25 30 32 58 00                                      %02X.

00000c95 <__c.4775>:
     c95:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     ca5:	3a 20 00                                            : .

00000ca8 <__c.4772>:
     ca8:	0a 00                                               ..

00000caa <__c.4770>:
     caa:	25 75 00                                            %u.

00000cad <__c.4768>:
     cad:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000cbd <__c.4942>:
     cbd:	3f 00                                               ?.

00000cbf <__c.4933>:
     cbf:	4e 4b 52 4f 3a 20 64 69 73 61 62 6c 65 64 0a 00     NKRO: disabled..

00000ccf <__c.4931>:
     ccf:	4e 4b 52 4f 3a 20 65 6e 61 62 6c 65 64 0a 00        NKRO: enabled..

00000cde <__c.4928>:
     cde:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     cee:	58 0a 00                                            X..

00000cf1 <__c.4926>:
     cf1:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     d01:	6c 3a 20 25 58 0a 00                                l: %X..

00000d08 <__c.4924>:
     d08:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     d18:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000d22 <__c.4922>:
     d22:	0a 0a 2d 2d 2d 2d 2d 20 53 74 61 74 75 73 20 2d     ..----- Status -
     d32:	2d 2d 2d 2d 0a 00                                   ----..

00000d38 <__c.4919>:
     d38:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     d48:	6c 58 0a 00                                         lX..

00000d4c <__c.4916>:
     d4c:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     d5c:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     d6c:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000d7a <__c.4914>:
     d7a:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     d8a:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     d9a:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     daa:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     dba:	30 39 36 0a 00                                      096..

00000dbf <__c.4912>:
     dbf:	42 55 49 4c 44 3a 20 31 35 64 33 66 65 34 2d 64     BUILD: 15d3fe4-d
     dcf:	69 72 74 79 20 28 32 32 3a 33 32 3a 32 36 20 4a     irty (22:32:26 J
     ddf:	75 6c 20 32 39 20 32 30 31 35 29 0a 00              ul 29 2015)..

00000dec <__c.4910>:
     dec:	56 49 44 3a 20 30 78 46 45 45 44 28 6a 75 6c 69     VID: 0xFEED(juli
     dfc:	61 6e 29 20 50 49 44 3a 20 30 78 36 30 36 30 28     an) PID: 0x6060(
     e0c:	6a 75 6c 69 61 6e 29 20 56 45 52 3a 20 30 78 30     julian) VER: 0x0
     e1c:	30 30 31 0a 00                                      001..

00000e21 <__c.4908>:
     e21:	44 45 53 43 3a 20 66 69 72 6d 77 61 72 65 20 66     DESC: firmware f
     e31:	6f 72 20 74 68 65 20 74 65 65 6e 73 79 0a 00        or the teensy..

00000e40 <__c.4906>:
     e40:	0a 0a 2d 2d 2d 2d 2d 20 56 65 72 73 69 6f 6e 20     ..----- Version 
     e50:	2d 2d 2d 2d 2d 0a 00                                -----..

00000e57 <__c.4903>:
     e57:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 64 69     .DEBUG: mouse di
     e67:	73 61 62 6c 65 64 2e 0a 00                          sabled...

00000e70 <__c.4901>:
     e70:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 65 6e     .DEBUG: mouse en
     e80:	61 62 6c 65 64 2e 0a 00                             abled...

00000e88 <__c.4898>:
     e88:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     e98:	20 64 69 73 61 62 6c 65 64 2e 0a 00                  disabled...

00000ea4 <__c.4896>:
     ea4:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     eb4:	20 65 6e 61 62 6c 65 64 2e 0a 00                     enabled...

00000ebf <__c.4893>:
     ebf:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 64     .DEBUG: matrix d
     ecf:	69 73 61 62 6c 65 64 2e 0a 00                       isabled...

00000ed9 <__c.4891>:
     ed9:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 65     .DEBUG: matrix e
     ee9:	6e 61 62 6c 65 64 2e 0a 00                          nabled...

00000ef2 <__c.4888>:
     ef2:	0a 44 45 42 55 47 3a 20 65 6e 61 62 6c 65 64 2e     .DEBUG: enabled.
     f02:	0a 00                                               ..

00000f04 <__c.4886>:
     f04:	0a 44 45 42 55 47 3a 20 64 69 73 61 62 6c 65 64     .DEBUG: disabled
     f14:	2e 0a 00                                            ...

00000f17 <__c.4883>:
     f17:	6e 6f 74 20 73 75 70 70 6f 72 74 65 64 2e 0a 00     not supported...

00000f27 <__c.4881>:
     f27:	0a 0a 4a 75 6d 70 20 74 6f 20 62 6f 6f 74 6c 6f     ..Jump to bootlo
     f37:	61 64 65 72 2e 2e 2e 20 00                          ader... .

00000f40 <__c.4878>:
     f40:	43 3e 20 00                                         C> .

00000f44 <__c.4876>:
     f44:	0a 45 6e 74 65 72 20 43 6f 6e 73 6f 6c 65 20 4d     .Enter Console M
     f54:	6f 64 65 0a 00                                      ode..

00000f59 <__c.4871>:
     f59:	55 6e 6c 6f 63 6b 65 64 2e 0a 00                    Unlocked...

00000f64 <__c.4869>:
     f64:	4c 6f 63 6b 65 64 2e 0a 00                          Locked...

00000f6d <__c.4865>:
     f6d:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000f78 <__ctors_end>:
     f78:	11 24       	eor	r1, r1
     f7a:	1f be       	out	0x3f, r1	; 63
     f7c:	cf ef       	ldi	r28, 0xFF	; 255
     f7e:	da e0       	ldi	r29, 0x0A	; 10
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	cd bf       	out	0x3d, r28	; 61

00000f84 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     f84:	04 b6       	in	r0, 0x34	; 52
     f86:	03 fe       	sbrs	r0, 3
     f88:	24 c0       	rjmp	.+72     	; 0xfd2 <__do_copy_data>
     f8a:	80 91 e6 01 	lds	r24, 0x01E6
     f8e:	90 91 e7 01 	lds	r25, 0x01E7
     f92:	a0 91 e8 01 	lds	r26, 0x01E8
     f96:	b0 91 e9 01 	lds	r27, 0x01E9
     f9a:	87 30       	cpi	r24, 0x07	; 7
     f9c:	90 4b       	sbci	r25, 0xB0	; 176
     f9e:	a7 40       	sbci	r26, 0x07	; 7
     fa0:	b0 4b       	sbci	r27, 0xB0	; 176
     fa2:	b9 f4       	brne	.+46     	; 0xfd2 <__do_copy_data>
        reset_key = 0;
     fa4:	10 92 e6 01 	sts	0x01E6, r1
     fa8:	10 92 e7 01 	sts	0x01E7, r1
     fac:	10 92 e8 01 	sts	0x01E8, r1
     fb0:	10 92 e9 01 	sts	0x01E9, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     fb4:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     fb6:	84 b7       	in	r24, 0x34	; 52
     fb8:	87 7f       	andi	r24, 0xF7	; 247
     fba:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     fbc:	88 e1       	ldi	r24, 0x18	; 24
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	80 93 60 00 	sts	0x0060, r24
     fc6:	10 92 60 00 	sts	0x0060, r1
     fca:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     fcc:	e0 e0       	ldi	r30, 0x00	; 0
     fce:	f8 e3       	ldi	r31, 0x38	; 56
     fd0:	09 95       	icall

00000fd2 <__do_copy_data>:
     fd2:	11 e0       	ldi	r17, 0x01	; 1
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	b1 e0       	ldi	r27, 0x01	; 1
     fd8:	e6 e4       	ldi	r30, 0x46	; 70
     fda:	f9 e5       	ldi	r31, 0x59	; 89
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <__do_copy_data+0x10>
     fde:	05 90       	lpm	r0, Z+
     fe0:	0d 92       	st	X+, r0
     fe2:	a8 33       	cpi	r26, 0x38	; 56
     fe4:	b1 07       	cpc	r27, r17
     fe6:	d9 f7       	brne	.-10     	; 0xfde <__do_copy_data+0xc>

00000fe8 <__do_clear_bss>:
     fe8:	21 e0       	ldi	r18, 0x01	; 1
     fea:	a8 e3       	ldi	r26, 0x38	; 56
     fec:	b1 e0       	ldi	r27, 0x01	; 1
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <.do_clear_bss_start>

00000ff0 <.do_clear_bss_loop>:
     ff0:	1d 92       	st	X+, r1

00000ff2 <.do_clear_bss_start>:
     ff2:	a6 3e       	cpi	r26, 0xE6	; 230
     ff4:	b2 07       	cpc	r27, r18
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <.do_clear_bss_loop>
     ff8:	0e 94 3b 0c 	call	0x1876	; 0x1876 <main>
     ffc:	0c 94 a1 2c 	jmp	0x5942	; 0x5942 <_exit>

00001000 <__bad_interrupt>:
    1000:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001004 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
    1004:	ff 93       	push	r31
	push	ZL
    1006:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    1008:	e0 91 c5 01 	lds	r30, 0x01C5
	lds	ZH, xfunc_out+1	;/
    100c:	f0 91 c6 01 	lds	r31, 0x01C6
	sbiw	ZL, 0		;Skip if null
    1010:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
    1012:	09 f0       	breq	.+2      	; 0x1016 <xputc+0x12>
	icall
    1014:	09 95       	icall
2:	pop	ZL
    1016:	ef 91       	pop	r30
	pop	ZH
    1018:	ff 91       	pop	r31
	ret
    101a:	08 95       	ret

0000101c <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    101c:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    101e:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    1020:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    1022:	11 f0       	breq	.+4      	; 0x1028 <xputs+0xc>
	rcall	xputc
    1024:	ef df       	rcall	.-34     	; 0x1004 <xputc>
	rjmp	1b
    1026:	fb cf       	rjmp	.-10     	; 0x101e <xputs+0x2>
2:	ret
    1028:	08 95       	ret

0000102a <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    102a:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    102c:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    102e:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    1030:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    1032:	0c c0       	rjmp	.+24     	; 0x104c <xitoa+0x22>
	neg	r20		;
    1034:	41 95       	neg	r20
	sbrs	r25, 7		;
    1036:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    1038:	09 c0       	rjmp	.+18     	; 0x104c <xitoa+0x22>
	ldi	r30, '-'	;
    103a:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    103c:	60 95       	com	r22
	com	r23		;
    103e:	70 95       	com	r23
	com	r24		;
    1040:	80 95       	com	r24
	com	r25		;
    1042:	90 95       	com	r25
	adc	r22, r1		;
    1044:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    1046:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    1048:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    104a:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    104c:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <xitoa+0x2a>
	neg	r18		;
    1050:	21 95       	neg	r18
	ldi	r19, '0'	;/
    1052:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    1054:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    1056:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    1058:	66 0f       	add	r22, r22
	rol	r23		;
    105a:	77 1f       	adc	r23, r23
	rol	r24		;
    105c:	88 1f       	adc	r24, r24
	rol	r25		;
    105e:	99 1f       	adc	r25, r25
	rol	r26		;
    1060:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    1062:	a4 17       	cp	r26, r20
	brcs	3f		;
    1064:	10 f0       	brcs	.+4      	; 0x106a <xitoa+0x40>
	sub	r26, r20	;
    1066:	a4 1b       	sub	r26, r20
	inc	r22		;
    1068:	63 95       	inc	r22
3:	dec	r21		;
    106a:	5a 95       	dec	r21
	brne	2b		;/
    106c:	a9 f7       	brne	.-22     	; 0x1058 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    106e:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    1070:	08 f0       	brcs	.+2      	; 0x1074 <xitoa+0x4a>
	subi	r26, -7		;
    1072:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    1074:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    1076:	af 93       	push	r26
	inc	r31		;/
    1078:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    107a:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    107c:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    107e:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    1080:	91 05       	cpc	r25, r1
	brne	1b		;/
    1082:	41 f7       	brne	.-48     	; 0x1054 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    1084:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    1086:	11 f4       	brne	.+4      	; 0x108c <xitoa+0x62>
	push	r30		;
    1088:	ef 93       	push	r30
	inc	r31		;/
    108a:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    108c:	f2 17       	cp	r31, r18
	brcc	6f		;
    108e:	18 f4       	brcc	.+6      	; 0x1096 <xitoa+0x6c>
	push	r19		;
    1090:	3f 93       	push	r19
	inc	r31		;
    1092:	f3 95       	inc	r31
	rjmp	5b		;/
    1094:	fb cf       	rjmp	.-10     	; 0x108c <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    1096:	8f 91       	pop	r24
	rcall	xputc		;
    1098:	b5 df       	rcall	.-150    	; 0x1004 <xputc>
	dec	r31		;
    109a:	fa 95       	dec	r31
	brne	6b		;/
    109c:	e1 f7       	brne	.-8      	; 0x1096 <xitoa+0x6c>

	ret
    109e:	08 95       	ret

000010a0 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
    10a0:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    10a2:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    10a4:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    10a6:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    10a8:	21 f0       	breq	.+8      	; 0x10b2 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
    10aa:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    10ac:	19 f0       	breq	.+6      	; 0x10b4 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
    10ae:	aa df       	rcall	.-172    	; 0x1004 <xputc>
	rjmp	0b		;/
    10b0:	f9 cf       	rjmp	.-14     	; 0x10a4 <xvprintf+0x4>
90:	ret
    10b2:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    10b4:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    10b6:	e8 94       	clt
	_LPMI	r21		;Get flags
    10b8:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    10ba:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    10bc:	c1 f3       	breq	.-16     	; 0x10ae <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
    10be:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    10c0:	11 f4       	brne	.+4      	; 0x10c6 <xvprintf+0x26>
	set			;/
    10c2:	68 94       	set
22:	_LPMI	r21		;Get width
    10c4:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    10c6:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    10c8:	48 f4       	brcc	.+18     	; 0x10dc <xvprintf+0x3c>
	subi	r21, '0'	;
    10ca:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    10cc:	90 f3       	brcs	.-28     	; 0x10b2 <xvprintf+0x12>
	lsl	r18		;
    10ce:	22 0f       	add	r18, r18
	mov	r0, r18		;
    10d0:	02 2e       	mov	r0, r18
	lsl	r18		;
    10d2:	22 0f       	add	r18, r18
	lsl	r18		;
    10d4:	22 0f       	add	r18, r18
	add	r18, r0		;
    10d6:	20 0d       	add	r18, r0
	add	r18, r21	;
    10d8:	25 0f       	add	r18, r21
	rjmp	22b		;/
    10da:	f4 cf       	rjmp	.-24     	; 0x10c4 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
    10dc:	0e f4       	brtc	.+2      	; 0x10e0 <xvprintf+0x40>
	neg	r18		;
    10de:	21 95       	neg	r18
25:	ld	r24, Y+		;
    10e0:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    10e2:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    10e4:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    10e6:	19 f3       	breq	.-58     	; 0x10ae <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
    10e8:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    10ea:	29 f1       	breq	.+74     	; 0x1136 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
    10ec:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    10ee:	59 f1       	breq	.+86     	; 0x1146 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    10f0:	bc 01       	movw	r22, r24
	clr	r24		;
    10f2:	88 27       	eor	r24, r24
	clr	r25		;
    10f4:	99 27       	eor	r25, r25
	clt			;/
    10f6:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    10f8:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    10fa:	21 f4       	brne	.+8      	; 0x1104 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
    10fc:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    10fe:	99 91       	ld	r25, Y+
	set			;
    1100:	68 94       	set
	_LPMI	r21		;/
    1102:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    1104:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    1106:	39 f4       	brne	.+14     	; 0x1116 <xvprintf+0x76>
	ldi	r20, -10	;
    1108:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    110a:	7e f0       	brts	.+30     	; 0x112a <xvprintf+0x8a>
	sbrs	r23, 7		;
    110c:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    110e:	0d c0       	rjmp	.+26     	; 0x112a <xvprintf+0x8a>
	ldi	r24, -1		;
    1110:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    1112:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    1114:	0a c0       	rjmp	.+20     	; 0x112a <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    1116:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    1118:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    111a:	39 f0       	breq	.+14     	; 0x112a <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
    111c:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    111e:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    1120:	21 f0       	breq	.+8      	; 0x112a <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
    1122:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    1124:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    1126:	09 f0       	breq	.+2      	; 0x112a <xvprintf+0x8a>
	ret			;abort
    1128:	08 95       	ret
40:	push	ZH		;Output the value
    112a:	ff 93       	push	r31
	push	ZL		;
    112c:	ef 93       	push	r30
	rcall	xitoa		;
    112e:	7d df       	rcall	.-262    	; 0x102a <xitoa>
42:	pop	ZL		;
    1130:	ef 91       	pop	r30
	pop	ZH		;
    1132:	ff 91       	pop	r31
	rjmp	0b		;/
    1134:	b7 cf       	rjmp	.-146    	; 0x10a4 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
    1136:	ff 93       	push	r31
	push	ZL
    1138:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    113a:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    113c:	81 91       	ld	r24, Z+
	cpi	r24, 0
    113e:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    1140:	b9 f3       	breq	.-18     	; 0x1130 <xvprintf+0x90>
	rcall	xputc
    1142:	60 df       	rcall	.-320    	; 0x1004 <xputc>
	rjmp	51b
    1144:	fb cf       	rjmp	.-10     	; 0x113c <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
    1146:	ff 93       	push	r31
	push	ZL
    1148:	ef 93       	push	r30
	rcall	xputs
    114a:	68 df       	rcall	.-304    	; 0x101c <xputs>
	rjmp	42b
    114c:	f1 cf       	rjmp	.-30     	; 0x1130 <xvprintf+0x90>

0000114e <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
    114e:	df 93       	push	r29
	push	YL
    1150:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    1152:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    1154:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
    1156:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
    1158:	a3 df       	rcall	.-186    	; 0x10a0 <xvprintf>
	pop	YL
    115a:	cf 91       	pop	r28
	pop	YH
    115c:	df 91       	pop	r29
	ret
    115e:	08 95       	ret

00001160 <matrix_power_up>:

void keyboard_init(void);
void keyboard_task(void);
void keyboard_set_leds(uint8_t leds);

__attribute__ ((weak)) void matrix_power_up(void) {}
    1160:	08 95       	ret

00001162 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    1162:	08 95       	ret

00001164 <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    1164:	9e e0       	ldi	r25, 0x0E	; 14
    1166:	79 9f       	mul	r23, r25
    1168:	f0 01       	movw	r30, r0
    116a:	11 24       	eor	r1, r1
    116c:	96 e4       	ldi	r25, 0x46	; 70
    116e:	89 9f       	mul	r24, r25
    1170:	e0 0d       	add	r30, r0
    1172:	f1 1d       	adc	r31, r1
    1174:	11 24       	eor	r1, r1
    1176:	e6 0f       	add	r30, r22
    1178:	f1 1d       	adc	r31, r1
    117a:	e8 59       	subi	r30, 0x98	; 152
    117c:	fe 4f       	sbci	r31, 0xFE	; 254
    117e:	84 91       	lpm	r24, Z
}
    1180:	08 95       	ret

00001182 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
    1182:	e8 2f       	mov	r30, r24
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	ee 0f       	add	r30, r30
    1188:	ff 1f       	adc	r31, r31
    118a:	ea 51       	subi	r30, 0x1A	; 26
    118c:	f0 40       	sbci	r31, 0x00	; 0
}
    118e:	85 91       	lpm	r24, Z+
    1190:	94 91       	lpm	r25, Z
    1192:	08 95       	ret

00001194 <unselect_rows>:
 * pin: B0 B1 B2 B3
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRC  &= ~0b01000000;
    1194:	3e 98       	cbi	0x07, 6	; 7
    PORTC &= ~0b01000000;
    1196:	46 98       	cbi	0x08, 6	; 8
    DDRD  &= ~0b00001111;
    1198:	8a b1       	in	r24, 0x0a	; 10
    119a:	80 7f       	andi	r24, 0xF0	; 240
    119c:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b00001111;
    119e:	8b b1       	in	r24, 0x0b	; 11
    11a0:	80 7f       	andi	r24, 0xF0	; 240
    11a2:	8b b9       	out	0x0b, r24	; 11
    11a4:	08 95       	ret

000011a6 <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
    11a6:	0e 94 ca 08 	call	0x1194	; 0x1194 <unselect_rows>

static void init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    // 'F' port columns enabled
    DDRF  &= ~(1<<0 | 1<<1 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
    11aa:	80 b3       	in	r24, 0x10	; 16
    11ac:	8c 70       	andi	r24, 0x0C	; 12
    11ae:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<0 | 1<<1 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
    11b0:	81 b3       	in	r24, 0x11	; 17
    11b2:	83 6f       	ori	r24, 0xF3	; 243
    11b4:	81 bb       	out	0x11, r24	; 17
    // 'B' port columns enabled
    DDRB  &= ~(1<<0 | 1<<1 | 1<<2 | 1<<3 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
    11b6:	84 b1       	in	r24, 0x04	; 4
    11b8:	14 b8       	out	0x04, r1	; 4
    PORTB |=  (1<<0 | 1<<1 | 1<<2 | 1<<3 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
    11ba:	85 b1       	in	r24, 0x05	; 5
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	85 b9       	out	0x05, r24	; 5
    // 'D' ports columns enabled
    DDRD  &= ~(1<<7);
    11c0:	57 98       	cbi	0x0a, 7	; 10
    PORTD |=  (1<<7);
    11c2:	5f 9a       	sbi	0x0b, 7	; 11
    11c4:	e2 e4       	ldi	r30, 0x42	; 66
    11c6:	f1 e0       	ldi	r31, 0x01	; 1
    11c8:	a8 e3       	ldi	r26, 0x38	; 56
    11ca:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    11cc:	11 92       	st	Z+, r1
    11ce:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
    11d0:	1d 92       	st	X+, r1
    11d2:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	ec 34       	cpi	r30, 0x4C	; 76
    11d8:	f8 07       	cpc	r31, r24
    11da:	c1 f7       	brne	.-16     	; 0x11cc <matrix_init+0x26>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
    11dc:	08 95       	ret

000011de <matrix_scan>:

uint8_t matrix_scan(void)
{
    11de:	df 92       	push	r13
    11e0:	ef 92       	push	r14
    11e2:	ff 92       	push	r15
    11e4:	0f 93       	push	r16
    11e6:	1f 93       	push	r17
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	c8 e3       	ldi	r28, 0x38	; 56
    11ee:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    11f0:	10 e0       	ldi	r17, 0x00	; 0
    11f2:	01 e0       	ldi	r16, 0x01	; 1
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
            }
            debouncing = DEBOUNCE;
    11f4:	85 e0       	ldi	r24, 0x05	; 5
    11f6:	d8 2e       	mov	r13, r24
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    11f8:	97 ed       	ldi	r25, 0xD7	; 215
    11fa:	e9 2e       	mov	r14, r25
    11fc:	91 e0       	ldi	r25, 0x01	; 1
    11fe:	f9 2e       	mov	r15, r25
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
       switch (row) {
    1200:	12 30       	cpi	r17, 0x02	; 2
    1202:	71 f0       	breq	.+28     	; 0x1220 <matrix_scan+0x42>
    1204:	18 f4       	brcc	.+6      	; 0x120c <matrix_scan+0x2e>
    1206:	11 30       	cpi	r17, 0x01	; 1
    1208:	41 f0       	breq	.+16     	; 0x121a <matrix_scan+0x3c>
    120a:	04 c0       	rjmp	.+8      	; 0x1214 <matrix_scan+0x36>
    120c:	13 30       	cpi	r17, 0x03	; 3
    120e:	59 f0       	breq	.+22     	; 0x1226 <matrix_scan+0x48>
    1210:	14 30       	cpi	r17, 0x04	; 4
    1212:	61 f0       	breq	.+24     	; 0x122c <matrix_scan+0x4e>
           case 0:
               DDRD  |= (1<<0);
    1214:	50 9a       	sbi	0x0a, 0	; 10
               PORTD &= ~(1<<0);
    1216:	58 98       	cbi	0x0b, 0	; 11
    1218:	0b c0       	rjmp	.+22     	; 0x1230 <matrix_scan+0x52>
               break;
           case 1:
               DDRD  |= (1<<1);
    121a:	51 9a       	sbi	0x0a, 1	; 10
               PORTD &= ~(1<<1);
    121c:	59 98       	cbi	0x0b, 1	; 11
    121e:	08 c0       	rjmp	.+16     	; 0x1230 <matrix_scan+0x52>
               break;
           case 2:
               DDRD  |= (1<<2);
    1220:	52 9a       	sbi	0x0a, 2	; 10
               PORTD &= ~(1<<2);
    1222:	5a 98       	cbi	0x0b, 2	; 11
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <matrix_scan+0x52>
               break;
           case 3:
               DDRD  |= (1<<3);
    1226:	53 9a       	sbi	0x0a, 3	; 10
               PORTD &= ~(1<<3);
    1228:	5b 98       	cbi	0x0b, 3	; 11
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <matrix_scan+0x52>
               break;
           case 4:
               DDRC  |= (1<<6);
    122c:	3e 9a       	sbi	0x07, 6	; 7
               PORTC &= ~(1<<6);
    122e:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1230:	80 ea       	ldi	r24, 0xA0	; 160
    1232:	8a 95       	dec	r24
    1234:	f1 f7       	brne	.-4      	; 0x1232 <matrix_scan+0x54>
           // (PINF&(1<<7) ? 0 : (1<<9))  |
           // (PINF&(1<<6) ? 0 : (1<<10)) |
           // (PINF&(1<<5) ? 0 : (1<<11)) |
           // (PINF&(1<<4) ? 0 : (1<<12)) |
           // (PINF&(1<<1) ? 0 : (1<<13)) |
           (PINF&(1<<0) ? 0 : (1<<0)) ;
    1236:	8f b1       	in	r24, 0x0f	; 15
    1238:	81 70       	andi	r24, 0x01	; 1
    123a:	80 27       	eor	r24, r16
    PORTD |=  (1<<7);
}

static matrix_row_t read_cols(void)
{
    return 
    123c:	90 e0       	ldi	r25, 0x00	; 0
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    123e:	28 81       	ld	r18, Y
    1240:	39 81       	ldd	r19, Y+1	; 0x01
    1242:	28 17       	cp	r18, r24
    1244:	39 07       	cpc	r19, r25
    1246:	41 f1       	breq	.+80     	; 0x1298 <matrix_scan+0xba>
            matrix_debouncing[i] = cols;
    1248:	99 83       	std	Y+1, r25	; 0x01
    124a:	88 83       	st	Y, r24
            if (debouncing) {
    124c:	80 91 00 01 	lds	r24, 0x0100
    1250:	88 23       	and	r24, r24
    1252:	01 f1       	breq	.+64     	; 0x1294 <matrix_scan+0xb6>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1254:	80 91 c3 01 	lds	r24, 0x01C3
    1258:	80 ff       	sbrs	r24, 0
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <matrix_scan+0x86>
    125c:	8c ed       	ldi	r24, 0xDC	; 220
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    1264:	80 91 c3 01 	lds	r24, 0x01C3
    1268:	80 ff       	sbrs	r24, 0
    126a:	0c c0       	rjmp	.+24     	; 0x1284 <matrix_scan+0xa6>
    126c:	80 91 00 01 	lds	r24, 0x0100
    1270:	1f 92       	push	r1
    1272:	8f 93       	push	r24
    1274:	ff 92       	push	r15
    1276:	ef 92       	push	r14
    1278:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	80 91 c3 01 	lds	r24, 0x01C3
    1288:	80 ff       	sbrs	r24, 0
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <matrix_scan+0xb6>
    128c:	85 ed       	ldi	r24, 0xD5	; 213
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            }
            debouncing = DEBOUNCE;
    1294:	d0 92 00 01 	sts	0x0100, r13
        }
        unselect_rows();
    1298:	0e 94 ca 08 	call	0x1194	; 0x1194 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    129c:	1f 5f       	subi	r17, 0xFF	; 255
    129e:	22 96       	adiw	r28, 0x02	; 2
    12a0:	15 30       	cpi	r17, 0x05	; 5
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <matrix_scan+0xc8>
    12a4:	ad cf       	rjmp	.-166    	; 0x1200 <matrix_scan+0x22>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    12a6:	80 91 00 01 	lds	r24, 0x0100
    12aa:	88 23       	and	r24, r24
    12ac:	c1 f0       	breq	.+48     	; 0x12de <matrix_scan+0x100>
        if (--debouncing) {
    12ae:	81 50       	subi	r24, 0x01	; 1
    12b0:	80 93 00 01 	sts	0x0100, r24
    12b4:	88 23       	and	r24, r24
    12b6:	39 f0       	breq	.+14     	; 0x12c6 <matrix_scan+0xe8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12b8:	8f e9       	ldi	r24, 0x9F	; 159
    12ba:	9f e0       	ldi	r25, 0x0F	; 15
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <matrix_scan+0xde>
    12c0:	00 c0       	rjmp	.+0      	; 0x12c2 <matrix_scan+0xe4>
    12c2:	00 00       	nop
    12c4:	0c c0       	rjmp	.+24     	; 0x12de <matrix_scan+0x100>
    12c6:	a2 e4       	ldi	r26, 0x42	; 66
    12c8:	b1 e0       	ldi	r27, 0x01	; 1
    12ca:	e8 e3       	ldi	r30, 0x38	; 56
    12cc:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    12ce:	81 91       	ld	r24, Z+
    12d0:	91 91       	ld	r25, Z+
    12d2:	8d 93       	st	X+, r24
    12d4:	9d 93       	st	X+, r25

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	e2 34       	cpi	r30, 0x42	; 66
    12da:	f9 07       	cpc	r31, r25
    12dc:	c1 f7       	brne	.-16     	; 0x12ce <matrix_scan+0xf0>
                matrix[i] = matrix_debouncing[i];
            }
        }
    }

    uint8_t layer = biton32(layer_state);
    12de:	60 91 a8 01 	lds	r22, 0x01A8
    12e2:	70 91 a9 01 	lds	r23, 0x01A9
    12e6:	80 91 aa 01 	lds	r24, 0x01AA
    12ea:	90 91 ab 01 	lds	r25, 0x01AB
    12ee:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <biton32>
    switch (layer) {
    12f2:	88 23       	and	r24, r24
    12f4:	29 f0       	breq	.+10     	; 0x1300 <matrix_scan+0x122>
    12f6:	83 30       	cpi	r24, 0x03	; 3
    12f8:	28 f4       	brcc	.+10     	; 0x1304 <matrix_scan+0x126>
        case 1:
        case 2:
            DDRC |= (1<<7);
    12fa:	3f 9a       	sbi	0x07, 7	; 7
            PORTC |= (1<<7);
    12fc:	47 9a       	sbi	0x08, 7	; 8
            break;
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <matrix_scan+0x126>
        case 0:
            DDRC &= ~(1<<7);
    1300:	3f 98       	cbi	0x07, 7	; 7
            PORTC &= ~(1<<7);
    1302:	47 98       	cbi	0x08, 7	; 8
            break;
    }

    return 1;
}
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	ff 90       	pop	r15
    1310:	ef 90       	pop	r14
    1312:	df 90       	pop	r13
    1314:	08 95       	ret

00001316 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    1316:	e8 2f       	mov	r30, r24
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	ee 5b       	subi	r30, 0xBE	; 190
    1320:	fe 4f       	sbci	r31, 0xFE	; 254
}
    1322:	80 81       	ld	r24, Z
    1324:	91 81       	ldd	r25, Z+1	; 0x01
    1326:	08 95       	ret

00001328 <matrix_print>:

void matrix_print(void)
{
    1328:	cf 92       	push	r12
    132a:	df 92       	push	r13
    132c:	ef 92       	push	r14
    132e:	ff 92       	push	r15
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    1338:	8e eb       	ldi	r24, 0xBE	; 190
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    1340:	42 e4       	ldi	r20, 0x42	; 66
    1342:	e4 2e       	mov	r14, r20
    1344:	41 e0       	ldi	r20, 0x01	; 1
    1346:	f4 2e       	mov	r15, r20
    1348:	c0 e0       	ldi	r28, 0x00	; 0
    134a:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    134c:	59 eb       	ldi	r21, 0xB9	; 185
    134e:	c5 2e       	mov	r12, r21
    1350:	51 e0       	ldi	r21, 0x01	; 1
    1352:	d5 2e       	mov	r13, r21
        pbin_reverse16(matrix_get_row(row));
    1354:	00 eb       	ldi	r16, 0xB0	; 176
    1356:	11 e0       	ldi	r17, 0x01	; 1

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	df 92       	push	r13
    135e:	cf 92       	push	r12
    1360:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    1364:	86 eb       	ldi	r24, 0xB6	; 182
    1366:	91 e0       	ldi	r25, 0x01	; 1
    1368:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
        pbin_reverse16(matrix_get_row(row));
    136c:	f7 01       	movw	r30, r14
    136e:	81 91       	ld	r24, Z+
    1370:	91 91       	ld	r25, Z+
    1372:	7f 01       	movw	r14, r30
    1374:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <bitrev16>
    1378:	9f 93       	push	r25
    137a:	8f 93       	push	r24
    137c:	1f 93       	push	r17
    137e:	0f 93       	push	r16
    1380:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
        print("\n");
    1384:	8e ea       	ldi	r24, 0xAE	; 174
    1386:	91 e0       	ldi	r25, 0x01	; 1
    1388:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    138c:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    138e:	8d b7       	in	r24, 0x3d	; 61
    1390:	9e b7       	in	r25, 0x3e	; 62
    1392:	08 96       	adiw	r24, 0x08	; 8
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	9e bf       	out	0x3e, r25	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	8d bf       	out	0x3d, r24	; 61
    139e:	c5 30       	cpi	r28, 0x05	; 5
    13a0:	d1 05       	cpc	r29, r1
    13a2:	d1 f6       	brne	.-76     	; 0x1358 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	ff 90       	pop	r15
    13ae:	ef 90       	pop	r14
    13b0:	df 90       	pop	r13
    13b2:	cf 90       	pop	r12
    13b4:	08 95       	ret

000013b6 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_FUNCTION)) {
    13b6:	85 ff       	sbrs	r24, 5
    13b8:	03 c0       	rjmp	.+6      	; 0x13c0 <led_set+0xa>
        // Output high.
        DDRF |= (1<<0);
    13ba:	80 9a       	sbi	0x10, 0	; 16
        PORTF |= (1<<0);
    13bc:	88 9a       	sbi	0x11, 0	; 17
    13be:	08 95       	ret
    } else {
        // Output low.
        DDRF &= ~(1<<0);
    13c0:	80 98       	cbi	0x10, 0	; 16
        PORTF &= ~(1<<0);
    13c2:	88 98       	cbi	0x11, 0	; 17
    13c4:	08 95       	ret

000013c6 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    13c6:	80 91 5e 01 	lds	r24, 0x015E
    13ca:	08 95       	ret

000013cc <sendchar>:
{
    // Not wait once timeouted.
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    13cc:	90 91 dd 01 	lds	r25, 0x01DD
    13d0:	94 30       	cpi	r25, 0x04	; 4
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <sendchar+0xa>
    13d4:	4d c0       	rjmp	.+154    	; 0x1470 <sendchar+0xa4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13d6:	90 91 e9 00 	lds	r25, 0x00E9
    13da:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    13dc:	20 91 ec 00 	lds	r18, 0x00EC
    13e0:	20 ff       	sbrs	r18, 0
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <sendchar+0x1c>
    13e4:	20 e8       	ldi	r18, 0x80	; 128
    13e6:	01 c0       	rjmp	.+2      	; 0x13ea <sendchar+0x1e>
    13e8:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    13ea:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13ec:	94 e0       	ldi	r25, 0x04	; 4
    13ee:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    13f2:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    13f6:	90 ff       	sbrs	r25, 0
    13f8:	38 c0       	rjmp	.+112    	; 0x146a <sendchar+0x9e>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    13fa:	90 91 ee 00 	lds	r25, 0x00EE
    13fe:	97 ff       	sbrs	r25, 7
    1400:	34 c0       	rjmp	.+104    	; 0x146a <sendchar+0x9e>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1402:	90 91 4d 01 	lds	r25, 0x014D
    1406:	99 23       	and	r25, r25
    1408:	21 f0       	breq	.+8      	; 0x1412 <sendchar+0x46>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    140a:	90 91 e8 00 	lds	r25, 0x00E8
    140e:	95 ff       	sbrs	r25, 5
    1410:	2c c0       	rjmp	.+88     	; 0x146a <sendchar+0x9e>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1412:	10 92 4d 01 	sts	0x014D, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1416:	96 e0       	ldi	r25, 0x06	; 6
    1418:	30 91 e8 00 	lds	r19, 0x00E8
    141c:	35 fd       	sbrc	r19, 5
    141e:	15 c0       	rjmp	.+42     	; 0x144a <sendchar+0x7e>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    1420:	30 91 dd 01 	lds	r19, 0x01DD
    1424:	34 30       	cpi	r19, 0x04	; 4
    1426:	09 f5       	brne	.+66     	; 0x146a <sendchar+0x9e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1428:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    142c:	35 fd       	sbrc	r19, 5
    142e:	1d c0       	rjmp	.+58     	; 0x146a <sendchar+0x9e>
    1430:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    1432:	21 f4       	brne	.+8      	; 0x143c <sendchar+0x70>
            timeouted = true;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	80 93 4d 01 	sts	0x014D, r24
            goto ERROR_EXIT;
    143a:	17 c0       	rjmp	.+46     	; 0x146a <sendchar+0x9e>
    143c:	ef e9       	ldi	r30, 0x9F	; 159
    143e:	ff e0       	ldi	r31, 0x0F	; 15
    1440:	31 97       	sbiw	r30, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <sendchar+0x74>
    1444:	00 c0       	rjmp	.+0      	; 0x1446 <sendchar+0x7a>
    1446:	00 00       	nop
    1448:	e7 cf       	rjmp	.-50     	; 0x1418 <sendchar+0x4c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    144a:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    144e:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed())
    1452:	85 fd       	sbrc	r24, 5
    1454:	05 c0       	rjmp	.+10     	; 0x1460 <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1456:	80 91 e8 00 	lds	r24, 0x00E8
    145a:	8e 77       	andi	r24, 0x7E	; 126
    145c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1460:	2f 70       	andi	r18, 0x0F	; 15
    1462:	20 93 e9 00 	sts	0x00E9, r18
        Endpoint_ClearIN();

    Endpoint_SelectEndpoint(ep);
    return 0;
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	08 95       	ret
    146a:	2f 70       	andi	r18, 0x0F	; 15
    146c:	20 93 e9 00 	sts	0x00E9, r18
    // Not wait once timeouted.
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1472:	08 95       	ret

00001474 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	00 d0       	rcall	.+0      	; 0x147a <send_consumer+0x6>
    147a:	1f 92       	push	r1
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1480:	20 91 dd 01 	lds	r18, 0x01DD
    1484:	24 30       	cpi	r18, 0x04	; 4
    1486:	19 f5       	brne	.+70     	; 0x14ce <send_consumer+0x5a>
        return;

    report_extra_t r = {
    1488:	23 e0       	ldi	r18, 0x03	; 3
    148a:	29 83       	std	Y+1, r18	; 0x01
    148c:	9b 83       	std	Y+3, r25	; 0x03
    148e:	8a 83       	std	Y+2, r24	; 0x02
    1490:	20 93 e9 00 	sts	0x00E9, r18
    1494:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1496:	90 91 e8 00 	lds	r25, 0x00E8
    149a:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    149c:	95 fd       	sbrc	r25, 5
    149e:	06 c0       	rjmp	.+12     	; 0x14ac <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14a0:	95 ed       	ldi	r25, 0xD5	; 213
    14a2:	9a 95       	dec	r25
    14a4:	f1 f7       	brne	.-4      	; 0x14a2 <send_consumer+0x2e>
    14a6:	00 00       	nop
    14a8:	81 11       	cpse	r24, r1
    14aa:	f5 cf       	rjmp	.-22     	; 0x1496 <send_consumer+0x22>
    14ac:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    14b0:	85 ff       	sbrs	r24, 5
    14b2:	0d c0       	rjmp	.+26     	; 0x14ce <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	63 e0       	ldi	r22, 0x03	; 3
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	ce 01       	movw	r24, r28
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14c4:	80 91 e8 00 	lds	r24, 0x00E8
    14c8:	8e 77       	andi	r24, 0x7E	; 126
    14ca:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	08 95       	ret

000014da <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <send_system+0x6>
    14e0:	1f 92       	push	r1
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    14e6:	20 91 dd 01 	lds	r18, 0x01DD
    14ea:	24 30       	cpi	r18, 0x04	; 4
    14ec:	21 f5       	brne	.+72     	; 0x1536 <send_system+0x5c>
        return;

    report_extra_t r = {
    14ee:	22 e0       	ldi	r18, 0x02	; 2
    14f0:	29 83       	std	Y+1, r18	; 0x01
    14f2:	9b 83       	std	Y+3, r25	; 0x03
    14f4:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14f6:	83 e0       	ldi	r24, 0x03	; 3
    14f8:	80 93 e9 00 	sts	0x00E9, r24
    14fc:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14fe:	90 91 e8 00 	lds	r25, 0x00E8
    1502:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1504:	95 fd       	sbrc	r25, 5
    1506:	06 c0       	rjmp	.+12     	; 0x1514 <send_system+0x3a>
    1508:	95 ed       	ldi	r25, 0xD5	; 213
    150a:	9a 95       	dec	r25
    150c:	f1 f7       	brne	.-4      	; 0x150a <send_system+0x30>
    150e:	00 00       	nop
    1510:	81 11       	cpse	r24, r1
    1512:	f5 cf       	rjmp	.-22     	; 0x14fe <send_system+0x24>
    1514:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1518:	85 ff       	sbrs	r24, 5
    151a:	0d c0       	rjmp	.+26     	; 0x1536 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	63 e0       	ldi	r22, 0x03	; 3
    1522:	70 e0       	ldi	r23, 0x00	; 0
    1524:	ce 01       	movw	r24, r28
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    152c:	80 91 e8 00 	lds	r24, 0x00E8
    1530:	8e 77       	andi	r24, 0x7E	; 126
    1532:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	08 95       	ret

00001542 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1542:	20 91 dd 01 	lds	r18, 0x01DD
    1546:	24 30       	cpi	r18, 0x04	; 4
    1548:	f1 f4       	brne	.+60     	; 0x1586 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    154a:	22 e0       	ldi	r18, 0x02	; 2
    154c:	20 93 e9 00 	sts	0x00E9, r18
    1550:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1552:	30 91 e8 00 	lds	r19, 0x00E8
    1556:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1558:	35 fd       	sbrc	r19, 5
    155a:	06 c0       	rjmp	.+12     	; 0x1568 <send_mouse+0x26>
    155c:	35 ed       	ldi	r19, 0xD5	; 213
    155e:	3a 95       	dec	r19
    1560:	f1 f7       	brne	.-4      	; 0x155e <send_mouse+0x1c>
    1562:	00 00       	nop
    1564:	21 11       	cpse	r18, r1
    1566:	f5 cf       	rjmp	.-22     	; 0x1552 <send_mouse+0x10>
    1568:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    156c:	25 ff       	sbrs	r18, 5
    156e:	0b c0       	rjmp	.+22     	; 0x1586 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	65 e0       	ldi	r22, 0x05	; 5
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    157c:	80 91 e8 00 	lds	r24, 0x00E8
    1580:	8e 77       	andi	r24, 0x7E	; 126
    1582:	80 93 e8 00 	sts	0x00E8, r24
    1586:	08 95       	ret

00001588 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    158e:	80 91 dd 01 	lds	r24, 0x01DD
    1592:	84 30       	cpi	r24, 0x04	; 4
    1594:	09 f0       	breq	.+2      	; 0x1598 <send_keyboard+0x10>
    1596:	43 c0       	rjmp	.+134    	; 0x161e <send_keyboard+0x96>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    1598:	80 91 0c 01 	lds	r24, 0x010C
    159c:	88 23       	and	r24, r24
    159e:	c1 f0       	breq	.+48     	; 0x15d0 <send_keyboard+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15a0:	85 e0       	ldi	r24, 0x05	; 5
    15a2:	80 93 e9 00 	sts	0x00E9, r24
    15a6:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15a8:	90 91 e8 00 	lds	r25, 0x00E8
    15ac:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    15ae:	95 fd       	sbrc	r25, 5
    15b0:	06 c0       	rjmp	.+12     	; 0x15be <send_keyboard+0x36>
    15b2:	95 e1       	ldi	r25, 0x15	; 21
    15b4:	9a 95       	dec	r25
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <send_keyboard+0x2c>
    15b8:	00 00       	nop
    15ba:	81 11       	cpse	r24, r1
    15bc:	f5 cf       	rjmp	.-22     	; 0x15a8 <send_keyboard+0x20>
    15be:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    15c2:	85 ff       	sbrs	r24, 5
    15c4:	2c c0       	rjmp	.+88     	; 0x161e <send_keyboard+0x96>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    15c6:	40 e0       	ldi	r20, 0x00	; 0
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	60 e1       	ldi	r22, 0x10	; 16
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	17 c0       	rjmp	.+46     	; 0x15fe <send_keyboard+0x76>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	80 93 e9 00 	sts	0x00E9, r24
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15d8:	90 91 e8 00 	lds	r25, 0x00E8
    15dc:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    15de:	95 fd       	sbrc	r25, 5
    15e0:	06 c0       	rjmp	.+12     	; 0x15ee <send_keyboard+0x66>
    15e2:	95 ed       	ldi	r25, 0xD5	; 213
    15e4:	9a 95       	dec	r25
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <send_keyboard+0x5c>
    15e8:	00 00       	nop
    15ea:	81 11       	cpse	r24, r1
    15ec:	f5 cf       	rjmp	.-22     	; 0x15d8 <send_keyboard+0x50>
    15ee:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    15f2:	85 ff       	sbrs	r24, 5
    15f4:	14 c0       	rjmp	.+40     	; 0x161e <send_keyboard+0x96>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	68 e0       	ldi	r22, 0x08	; 8
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	ce 01       	movw	r24, r28
    1600:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1604:	80 91 e8 00 	lds	r24, 0x00E8
    1608:	8e 77       	andi	r24, 0x7E	; 126
    160a:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    160e:	80 e1       	ldi	r24, 0x10	; 16
    1610:	fe 01       	movw	r30, r28
    1612:	ae e4       	ldi	r26, 0x4E	; 78
    1614:	b1 e0       	ldi	r27, 0x01	; 1
    1616:	01 90       	ld	r0, Z+
    1618:	0d 92       	st	X+, r0
    161a:	8a 95       	dec	r24
    161c:	e1 f7       	brne	.-8      	; 0x1616 <send_keyboard+0x8e>
}
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	08 95       	ret

00001624 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    1624:	8c e1       	ldi	r24, 0x1C	; 28
    1626:	92 e0       	ldi	r25, 0x02	; 2
    1628:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    162c:	80 91 dc 01 	lds	r24, 0x01DC
    1630:	81 11       	cpse	r24, r1
    1632:	09 c0       	rjmp	.+18     	; 0x1646 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    1634:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <USB_Disable>
        USB_Init();
    1638:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    163c:	80 91 e2 00 	lds	r24, 0x00E2
    1640:	84 60       	ori	r24, 0x04	; 4
    1642:	80 93 e2 00 	sts	0x00E2, r24
    1646:	08 95       	ret

00001648 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    1648:	88 e1       	ldi	r24, 0x18	; 24
    164a:	92 e0       	ldi	r25, 0x02	; 2
    164c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    1650:	10 92 dc 01 	sts	0x01DC, r1
    1654:	08 95       	ret

00001656 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    1656:	84 e1       	ldi	r24, 0x14	; 20
    1658:	92 e0       	ldi	r25, 0x02	; 2
    165a:	0c 94 0e 08 	jmp	0x101c	; 0x101c <xputs>

0000165e <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    165e:	80 e1       	ldi	r24, 0x10	; 16
    1660:	92 e0       	ldi	r25, 0x02	; 2
    1662:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    matrix_power_down();
    1666:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <matrix_power_down>

0000166a <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    166a:	8c e0       	ldi	r24, 0x0C	; 12
    166c:	92 e0       	ldi	r25, 0x02	; 2
    166e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    suspend_wakeup_init();
    1672:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <suspend_wakeup_init>

00001676 <EVENT_USB_Device_StartOfFrame>:
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1676:	80 91 dd 01 	lds	r24, 0x01DD
    167a:	84 30       	cpi	r24, 0x04	; 4
    167c:	49 f5       	brne	.+82     	; 0x16d0 <EVENT_USB_Device_StartOfFrame+0x5a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    167e:	80 91 e9 00 	lds	r24, 0x00E9
    1682:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1684:	90 91 ec 00 	lds	r25, 0x00EC
    1688:	90 ff       	sbrs	r25, 0
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <EVENT_USB_Device_StartOfFrame+0x1a>
    168c:	90 e8       	ldi	r25, 0x80	; 128
    168e:	01 c0       	rjmp	.+2      	; 0x1692 <EVENT_USB_Device_StartOfFrame+0x1c>
    1690:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1692:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1694:	84 e0       	ldi	r24, 0x04	; 4
    1696:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    169a:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    169e:	80 ff       	sbrs	r24, 0
    16a0:	14 c0       	rjmp	.+40     	; 0x16ca <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    16a2:	80 91 ee 00 	lds	r24, 0x00EE
    16a6:	87 ff       	sbrs	r24, 7
    16a8:	10 c0       	rjmp	.+32     	; 0x16ca <EVENT_USB_Device_StartOfFrame+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16aa:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    16ae:	85 ff       	sbrs	r24, 5
    16b0:	03 c0       	rjmp	.+6      	; 0x16b8 <EVENT_USB_Device_StartOfFrame+0x42>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16b2:	10 92 f1 00 	sts	0x00F1, r1
    16b6:	f9 cf       	rjmp	.-14     	; 0x16aa <EVENT_USB_Device_StartOfFrame+0x34>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16b8:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    16bc:	80 ff       	sbrs	r24, 0
    16be:	05 c0       	rjmp	.+10     	; 0x16ca <EVENT_USB_Device_StartOfFrame+0x54>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16c0:	80 91 e8 00 	lds	r24, 0x00E8
    16c4:	8e 77       	andi	r24, 0x7E	; 126
    16c6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16ca:	9f 70       	andi	r25, 0x0F	; 15
    16cc:	90 93 e9 00 	sts	0x00E9, r25
    16d0:	08 95       	ret

000016d2 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    16d2:	42 e0       	ldi	r20, 0x02	; 2
    16d4:	61 ec       	ldi	r22, 0xC1	; 193
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <Endpoint_ConfigureEndpoint_Prv>
    16dc:	42 e0       	ldi	r20, 0x02	; 2
    16de:	61 ec       	ldi	r22, 0xC1	; 193
    16e0:	82 e0       	ldi	r24, 0x02	; 2
    16e2:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <Endpoint_ConfigureEndpoint_Prv>
    16e6:	42 e0       	ldi	r20, 0x02	; 2
    16e8:	61 ec       	ldi	r22, 0xC1	; 193
    16ea:	83 e0       	ldi	r24, 0x03	; 3
    16ec:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <Endpoint_ConfigureEndpoint_Prv>
    16f0:	46 e2       	ldi	r20, 0x26	; 38
    16f2:	61 ec       	ldi	r22, 0xC1	; 193
    16f4:	84 e0       	ldi	r24, 0x04	; 4
    16f6:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <Endpoint_ConfigureEndpoint_Prv>
    16fa:	42 e1       	ldi	r20, 0x12	; 18
    16fc:	61 ec       	ldi	r22, 0xC1	; 193
    16fe:	85 e0       	ldi	r24, 0x05	; 5
    1700:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <Endpoint_ConfigureEndpoint_Prv>

00001704 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    1704:	80 91 df 01 	lds	r24, 0x01DF
    1708:	83 30       	cpi	r24, 0x03	; 3
    170a:	09 f4       	brne	.+2      	; 0x170e <EVENT_USB_Device_ControlRequest+0xa>
    170c:	55 c0       	rjmp	.+170    	; 0x17b8 <EVENT_USB_Device_ControlRequest+0xb4>
    170e:	30 f4       	brcc	.+12     	; 0x171c <EVENT_USB_Device_ControlRequest+0x18>
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	71 f0       	breq	.+28     	; 0x1730 <EVENT_USB_Device_ControlRequest+0x2c>
    1714:	82 30       	cpi	r24, 0x02	; 2
    1716:	09 f4       	brne	.+2      	; 0x171a <EVENT_USB_Device_ControlRequest+0x16>
    1718:	95 c0       	rjmp	.+298    	; 0x1844 <EVENT_USB_Device_ControlRequest+0x140>
    171a:	08 95       	ret
    171c:	8a 30       	cpi	r24, 0x0A	; 10
    171e:	09 f4       	brne	.+2      	; 0x1722 <EVENT_USB_Device_ControlRequest+0x1e>
    1720:	81 c0       	rjmp	.+258    	; 0x1824 <EVENT_USB_Device_ControlRequest+0x120>
    1722:	8b 30       	cpi	r24, 0x0B	; 11
    1724:	09 f4       	brne	.+2      	; 0x1728 <EVENT_USB_Device_ControlRequest+0x24>
    1726:	60 c0       	rjmp	.+192    	; 0x17e8 <EVENT_USB_Device_ControlRequest+0xe4>
    1728:	89 30       	cpi	r24, 0x09	; 9
    172a:	09 f0       	breq	.+2      	; 0x172e <EVENT_USB_Device_ControlRequest+0x2a>
    172c:	a3 c0       	rjmp	.+326    	; 0x1874 <EVENT_USB_Device_ControlRequest+0x170>
    172e:	20 c0       	rjmp	.+64     	; 0x1770 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1730:	80 91 de 01 	lds	r24, 0x01DE
    1734:	81 3a       	cpi	r24, 0xA1	; 161
    1736:	09 f0       	breq	.+2      	; 0x173a <EVENT_USB_Device_ControlRequest+0x36>
    1738:	9d c0       	rjmp	.+314    	; 0x1874 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    173a:	80 91 e8 00 	lds	r24, 0x00E8
    173e:	87 7f       	andi	r24, 0xF7	; 247
    1740:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1744:	80 91 e2 01 	lds	r24, 0x01E2
    1748:	90 91 e3 01 	lds	r25, 0x01E3
    174c:	89 2b       	or	r24, r25
    174e:	21 f0       	breq	.+8      	; 0x1758 <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    1750:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	03 c0       	rjmp	.+6      	; 0x175e <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    1758:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    175a:	8e e4       	ldi	r24, 0x4E	; 78
    175c:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1764:	80 91 e8 00 	lds	r24, 0x00E8
    1768:	8b 77       	andi	r24, 0x7B	; 123
    176a:	80 93 e8 00 	sts	0x00E8, r24
    176e:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1770:	80 91 de 01 	lds	r24, 0x01DE
    1774:	81 32       	cpi	r24, 0x21	; 33
    1776:	09 f0       	breq	.+2      	; 0x177a <EVENT_USB_Device_ControlRequest+0x76>
    1778:	7d c0       	rjmp	.+250    	; 0x1874 <EVENT_USB_Device_ControlRequest+0x170>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    177a:	80 91 e2 01 	lds	r24, 0x01E2
    177e:	90 91 e3 01 	lds	r25, 0x01E3
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	19 f0       	breq	.+6      	; 0x178c <EVENT_USB_Device_ControlRequest+0x88>
    1786:	04 97       	sbiw	r24, 0x04	; 4
    1788:	09 f0       	breq	.+2      	; 0x178c <EVENT_USB_Device_ControlRequest+0x88>
    178a:	74 c0       	rjmp	.+232    	; 0x1874 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    178c:	80 91 e8 00 	lds	r24, 0x00E8
    1790:	87 7f       	andi	r24, 0xF7	; 247
    1792:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1796:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    179a:	82 fd       	sbrc	r24, 2
    179c:	05 c0       	rjmp	.+10     	; 0x17a8 <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    179e:	80 91 dd 01 	lds	r24, 0x01DD
    17a2:	81 11       	cpse	r24, r1
    17a4:	f8 cf       	rjmp	.-16     	; 0x1796 <EVENT_USB_Device_ControlRequest+0x92>
    17a6:	66 c0       	rjmp	.+204    	; 0x1874 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    17a8:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    17ac:	80 93 5e 01 	sts	0x015E, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    17b0:	80 91 e8 00 	lds	r24, 0x00E8
    17b4:	8b 77       	andi	r24, 0x7B	; 123
    17b6:	5a c0       	rjmp	.+180    	; 0x186c <EVENT_USB_Device_ControlRequest+0x168>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    17b8:	80 91 de 01 	lds	r24, 0x01DE
    17bc:	81 3a       	cpi	r24, 0xA1	; 161
    17be:	09 f0       	breq	.+2      	; 0x17c2 <EVENT_USB_Device_ControlRequest+0xbe>
    17c0:	59 c0       	rjmp	.+178    	; 0x1874 <EVENT_USB_Device_ControlRequest+0x170>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    17c2:	80 91 e2 01 	lds	r24, 0x01E2
    17c6:	90 91 e3 01 	lds	r25, 0x01E3
    17ca:	89 2b       	or	r24, r25
    17cc:	09 f0       	breq	.+2      	; 0x17d0 <EVENT_USB_Device_ControlRequest+0xcc>
    17ce:	52 c0       	rjmp	.+164    	; 0x1874 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17d0:	80 91 e8 00 	lds	r24, 0x00E8
    17d4:	87 7f       	andi	r24, 0xF7	; 247
    17d6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17da:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    17de:	80 ff       	sbrs	r24, 0
    17e0:	fc cf       	rjmp	.-8      	; 0x17da <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    17e2:	80 91 0b 01 	lds	r24, 0x010B
    17e6:	3d c0       	rjmp	.+122    	; 0x1862 <EVENT_USB_Device_ControlRequest+0x15e>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    17e8:	80 91 de 01 	lds	r24, 0x01DE
    17ec:	81 32       	cpi	r24, 0x21	; 33
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <EVENT_USB_Device_ControlRequest+0xee>
    17f0:	41 c0       	rjmp	.+130    	; 0x1874 <EVENT_USB_Device_ControlRequest+0x170>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    17f2:	80 91 e2 01 	lds	r24, 0x01E2
    17f6:	90 91 e3 01 	lds	r25, 0x01E3
    17fa:	89 2b       	or	r24, r25
    17fc:	d9 f5       	brne	.+118    	; 0x1874 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17fe:	80 91 e8 00 	lds	r24, 0x00E8
    1802:	87 7f       	andi	r24, 0xF7	; 247
    1804:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1808:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Endpoint_ClearStatusStage>

                    keyboard_protocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    180c:	90 91 e0 01 	lds	r25, 0x01E0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	91 11       	cpse	r25, r1
    1814:	01 c0       	rjmp	.+2      	; 0x1818 <EVENT_USB_Device_ControlRequest+0x114>
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	80 93 0b 01 	sts	0x010B, r24
#ifdef NKRO_ENABLE
                    keyboard_nkro = !!keyboard_protocol;
    181c:	80 93 0c 01 	sts	0x010C, r24
#endif
                    clear_keyboard();
    1820:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1824:	80 91 de 01 	lds	r24, 0x01DE
    1828:	81 32       	cpi	r24, 0x21	; 33
    182a:	21 f5       	brne	.+72     	; 0x1874 <EVENT_USB_Device_ControlRequest+0x170>
    182c:	80 91 e8 00 	lds	r24, 0x00E8
    1830:	87 7f       	andi	r24, 0xF7	; 247
    1832:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    1836:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    183a:	80 91 e1 01 	lds	r24, 0x01E1
    183e:	80 93 4c 01 	sts	0x014C, r24
    1842:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1844:	80 91 de 01 	lds	r24, 0x01DE
    1848:	81 3a       	cpi	r24, 0xA1	; 161
    184a:	a1 f4       	brne	.+40     	; 0x1874 <EVENT_USB_Device_ControlRequest+0x170>
    184c:	80 91 e8 00 	lds	r24, 0x00E8
    1850:	87 7f       	andi	r24, 0xF7	; 247
    1852:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1856:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    185a:	80 ff       	sbrs	r24, 0
    185c:	fc cf       	rjmp	.-8      	; 0x1856 <EVENT_USB_Device_ControlRequest+0x152>
                Endpoint_Write_8(keyboard_idle);
    185e:	80 91 4c 01 	lds	r24, 0x014C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1862:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1866:	80 91 e8 00 	lds	r24, 0x00E8
    186a:	8e 77       	andi	r24, 0x7E	; 126
    186c:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1870:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <Endpoint_ClearStatusStage>
    1874:	08 95       	ret

00001876 <main>:
 * main
 ******************************************************************************/
static void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1876:	84 b7       	in	r24, 0x34	; 52
    1878:	87 7f       	andi	r24, 0xF7	; 247
    187a:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    187c:	88 e1       	ldi	r24, 0x18	; 24
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	80 93 60 00 	sts	0x0060, r24
    1886:	10 92 60 00 	sts	0x0060, r1
    188a:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	80 e8       	ldi	r24, 0x80	; 128
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	80 93 61 00 	sts	0x0061, r24
    1898:	90 93 61 00 	sts	0x0061, r25
    189c:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    189e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <USB_Disable>

    USB_Init();
    18a2:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <USB_Init>
    18a6:	80 91 e2 00 	lds	r24, 0x00E2
    18aa:	84 60       	ori	r24, 0x04	; 4
    18ac:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    18b0:	86 ee       	ldi	r24, 0xE6	; 230
    18b2:	99 e0       	ldi	r25, 0x09	; 9
    18b4:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <print_set_sendchar>

int main(void)  __attribute__ ((weak));
int main(void)
{
    SetupHardware();
    sei();
    18b8:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    18ba:	80 91 dd 01 	lds	r24, 0x01DD
    18be:	84 30       	cpi	r24, 0x04	; 4
    18c0:	e1 f7       	brne	.-8      	; 0x18ba <main+0x44>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    18c2:	8b ef       	ldi	r24, 0xFB	; 251
    18c4:	91 e0       	ldi	r25, 0x01	; 1
    18c6:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>

    /* init modules */
    keyboard_init();
    18ca:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <keyboard_init>
    host_set_driver(&lufa_driver);
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	91 e0       	ldi	r25, 0x01	; 1
    18d2:	0e 94 51 11 	call	0x22a2	; 0x22a2 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    18d6:	8a ee       	ldi	r24, 0xEA	; 234
    18d8:	91 e0       	ldi	r25, 0x01	; 1
    18da:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    18de:	80 91 dd 01 	lds	r24, 0x01DD
    18e2:	85 30       	cpi	r24, 0x05	; 5
    18e4:	89 f4       	brne	.+34     	; 0x1908 <main+0x92>
            print("[s]");
    18e6:	86 ee       	ldi	r24, 0xE6	; 230
    18e8:	91 e0       	ldi	r25, 0x01	; 1
    18ea:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            suspend_power_down();
    18ee:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    18f2:	80 91 db 01 	lds	r24, 0x01DB
    18f6:	88 23       	and	r24, r24
    18f8:	91 f3       	breq	.-28     	; 0x18de <main+0x68>
    18fa:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <suspend_wakeup_condition>
    18fe:	88 23       	and	r24, r24
    1900:	71 f3       	breq	.-36     	; 0x18de <main+0x68>
                    USB_Device_SendRemoteWakeup();
    1902:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <USB_Device_SendRemoteWakeup>
    1906:	eb cf       	rjmp	.-42     	; 0x18de <main+0x68>
            }
        }

        keyboard_task();
    1908:	0e 94 11 12 	call	0x2422	; 0x2422 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    190c:	e8 cf       	rjmp	.-48     	; 0x18de <main+0x68>

0000190e <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    190e:	29 2f       	mov	r18, r25
    1910:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1912:	23 30       	cpi	r18, 0x03	; 3
    1914:	31 05       	cpc	r19, r1
    1916:	a9 f0       	breq	.+42     	; 0x1942 <CALLBACK_USB_GetDescriptor+0x34>
    1918:	6c f4       	brge	.+26     	; 0x1934 <CALLBACK_USB_GetDescriptor+0x26>
    191a:	21 30       	cpi	r18, 0x01	; 1
    191c:	31 05       	cpc	r19, r1
    191e:	09 f4       	brne	.+2      	; 0x1922 <CALLBACK_USB_GetDescriptor+0x14>
    1920:	42 c0       	rjmp	.+132    	; 0x19a6 <CALLBACK_USB_GetDescriptor+0x98>
    1922:	22 30       	cpi	r18, 0x02	; 2
    1924:	31 05       	cpc	r19, r1
    1926:	09 f0       	breq	.+2      	; 0x192a <CALLBACK_USB_GetDescriptor+0x1c>
    1928:	43 c0       	rjmp	.+134    	; 0x19b0 <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    192a:	8d e8       	ldi	r24, 0x8D	; 141
    192c:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    192e:	24 e4       	ldi	r18, 0x44	; 68
    1930:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    1932:	42 c0       	rjmp	.+132    	; 0x19b8 <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1934:	21 32       	cpi	r18, 0x21	; 33
    1936:	31 05       	cpc	r19, r1
    1938:	c9 f0       	breq	.+50     	; 0x196c <CALLBACK_USB_GetDescriptor+0x5e>
    193a:	22 32       	cpi	r18, 0x22	; 34
    193c:	31 05       	cpc	r19, r1
    193e:	19 f1       	breq	.+70     	; 0x1986 <CALLBACK_USB_GetDescriptor+0x78>
    1940:	37 c0       	rjmp	.+110    	; 0x19b0 <CALLBACK_USB_GetDescriptor+0xa2>
    1942:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	91 05       	cpc	r25, r1
    1948:	41 f0       	breq	.+16     	; 0x195a <CALLBACK_USB_GetDescriptor+0x4c>
    194a:	82 30       	cpi	r24, 0x02	; 2
    194c:	91 05       	cpc	r25, r1
    194e:	41 f0       	breq	.+16     	; 0x1960 <CALLBACK_USB_GetDescriptor+0x52>
    1950:	89 2b       	or	r24, r25
    1952:	71 f5       	brne	.+92     	; 0x19b0 <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1954:	e0 e4       	ldi	r30, 0x40	; 64
    1956:	f2 e0       	ldi	r31, 0x02	; 2
    1958:	05 c0       	rjmp	.+10     	; 0x1964 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    195a:	e0 e3       	ldi	r30, 0x30	; 48
    195c:	f2 e0       	ldi	r31, 0x02	; 2
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1960:	e0 e2       	ldi	r30, 0x20	; 32
    1962:	f2 e0       	ldi	r31, 0x02	; 2
    1964:	84 91       	lpm	r24, Z
    1966:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1968:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    196a:	26 c0       	rjmp	.+76     	; 0x19b8 <CALLBACK_USB_GetDescriptor+0xaa>
    196c:	65 30       	cpi	r22, 0x05	; 5
    196e:	00 f5       	brcc	.+64     	; 0x19b0 <CALLBACK_USB_GetDescriptor+0xa2>
    1970:	e6 2f       	mov	r30, r22
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	ee 0f       	add	r30, r30
    1976:	ff 1f       	adc	r31, r31
    1978:	ec 5d       	subi	r30, 0xDC	; 220
    197a:	fe 4f       	sbci	r31, 0xFE	; 254
    197c:	20 81       	ld	r18, Z
    197e:	31 81       	ldd	r19, Z+1	; 0x01
    1980:	89 e0       	ldi	r24, 0x09	; 9
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	19 c0       	rjmp	.+50     	; 0x19b8 <CALLBACK_USB_GetDescriptor+0xaa>
    1986:	65 30       	cpi	r22, 0x05	; 5
    1988:	98 f4       	brcc	.+38     	; 0x19b0 <CALLBACK_USB_GetDescriptor+0xa2>
    198a:	e6 2f       	mov	r30, r22
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	df 01       	movw	r26, r30
    1990:	aa 0f       	add	r26, r26
    1992:	bb 1f       	adc	r27, r27
    1994:	a6 5e       	subi	r26, 0xE6	; 230
    1996:	be 4f       	sbci	r27, 0xFE	; 254
    1998:	2d 91       	ld	r18, X+
    199a:	3c 91       	ld	r19, X
    199c:	eb 5e       	subi	r30, 0xEB	; 235
    199e:	fe 4f       	sbci	r31, 0xFE	; 254
    19a0:	80 81       	ld	r24, Z
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	09 c0       	rjmp	.+18     	; 0x19b8 <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    19a6:	82 e1       	ldi	r24, 0x12	; 18
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    19aa:	21 ed       	ldi	r18, 0xD1	; 209
    19ac:	32 e0       	ldi	r19, 0x02	; 2
    19ae:	04 c0       	rjmp	.+8      	; 0x19b8 <CALLBACK_USB_GetDescriptor+0xaa>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    19b8:	fa 01       	movw	r30, r20
    19ba:	31 83       	std	Z+1, r19	; 0x01
    19bc:	20 83       	st	Z, r18
    return Size;
}
    19be:	08 95       	ret

000019c0 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    19c0:	80 e1       	ldi	r24, 0x10	; 16
    19c2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    19c4:	82 e1       	ldi	r24, 0x12	; 18
    19c6:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    19c8:	09 b4       	in	r0, 0x29	; 41
    19ca:	00 fe       	sbrs	r0, 0
    19cc:	fd cf       	rjmp	.-6      	; 0x19c8 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    19ce:	80 91 d8 00 	lds	r24, 0x00D8
    19d2:	8f 7d       	andi	r24, 0xDF	; 223
    19d4:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    19d8:	80 91 e0 00 	lds	r24, 0x00E0
    19dc:	82 60       	ori	r24, 0x02	; 2
    19de:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    19e2:	80 91 e0 00 	lds	r24, 0x00E0
    19e6:	81 fd       	sbrc	r24, 1
    19e8:	fc cf       	rjmp	.-8      	; 0x19e2 <USB_Device_SendRemoteWakeup+0x22>
}
    19ea:	08 95       	ret

000019ec <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    19ec:	98 2f       	mov	r25, r24
    19ee:	97 30       	cpi	r25, 0x07	; 7
    19f0:	58 f5       	brcc	.+86     	; 0x1a48 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19f2:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    19f6:	98 17       	cp	r25, r24
    19f8:	39 f0       	breq	.+14     	; 0x1a08 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    19fa:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    19fe:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1a02:	50 91 f0 00 	lds	r21, 0x00F0
    1a06:	03 c0       	rjmp	.+6      	; 0x1a0e <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1a08:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1a0a:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1a0e:	21 ff       	sbrs	r18, 1
    1a10:	19 c0       	rjmp	.+50     	; 0x1a44 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1a12:	30 91 eb 00 	lds	r19, 0x00EB
    1a16:	3e 7f       	andi	r19, 0xFE	; 254
    1a18:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1a1c:	30 91 ed 00 	lds	r19, 0x00ED
    1a20:	3d 7f       	andi	r19, 0xFD	; 253
    1a22:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1a26:	30 91 eb 00 	lds	r19, 0x00EB
    1a2a:	31 60       	ori	r19, 0x01	; 1
    1a2c:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1a30:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1a34:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1a38:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1a3c:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1a40:	27 ff       	sbrs	r18, 7
    1a42:	07 c0       	rjmp	.+14     	; 0x1a52 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1a44:	9f 5f       	subi	r25, 0xFF	; 255
    1a46:	d3 cf       	rjmp	.-90     	; 0x19ee <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a48:	8f 70       	andi	r24, 0x0F	; 15
    1a4a:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1a52:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1a54:	08 95       	ret

00001a56 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1a56:	80 91 de 01 	lds	r24, 0x01DE
    1a5a:	87 fd       	sbrc	r24, 7
    1a5c:	05 c0       	rjmp	.+10     	; 0x1a68 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a5e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1a62:	80 ff       	sbrs	r24, 0
    1a64:	0e c0       	rjmp	.+28     	; 0x1a82 <Endpoint_ClearStatusStage+0x2c>
    1a66:	12 c0       	rjmp	.+36     	; 0x1a8c <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a68:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1a6c:	82 fd       	sbrc	r24, 2
    1a6e:	05 c0       	rjmp	.+10     	; 0x1a7a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a70:	80 91 dd 01 	lds	r24, 0x01DD
    1a74:	81 11       	cpse	r24, r1
    1a76:	f8 cf       	rjmp	.-16     	; 0x1a68 <Endpoint_ClearStatusStage+0x12>
    1a78:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a7a:	80 91 e8 00 	lds	r24, 0x00E8
    1a7e:	8b 77       	andi	r24, 0x7B	; 123
    1a80:	08 c0       	rjmp	.+16     	; 0x1a92 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a82:	80 91 dd 01 	lds	r24, 0x01DD
    1a86:	81 11       	cpse	r24, r1
    1a88:	ea cf       	rjmp	.-44     	; 0x1a5e <Endpoint_ClearStatusStage+0x8>
    1a8a:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a8c:	80 91 e8 00 	lds	r24, 0x00E8
    1a90:	8e 77       	andi	r24, 0x7E	; 126
    1a92:	80 93 e8 00 	sts	0x00E8, r24
    1a96:	08 95       	ret

00001a98 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1a98:	80 91 e4 00 	lds	r24, 0x00E4
    1a9c:	90 91 e5 00 	lds	r25, 0x00E5
    1aa0:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1aa2:	20 91 ec 00 	lds	r18, 0x00EC
    1aa6:	20 ff       	sbrs	r18, 0
    1aa8:	21 c0       	rjmp	.+66     	; 0x1aec <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1aaa:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1aae:	20 fd       	sbrc	r18, 0
    1ab0:	21 c0       	rjmp	.+66     	; 0x1af4 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1ab2:	20 91 dd 01 	lds	r18, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ab6:	22 23       	and	r18, r18
    1ab8:	89 f0       	breq	.+34     	; 0x1adc <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1aba:	25 30       	cpi	r18, 0x05	; 5
    1abc:	89 f0       	breq	.+34     	; 0x1ae0 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1abe:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1ac2:	25 fd       	sbrc	r18, 5
    1ac4:	0f c0       	rjmp	.+30     	; 0x1ae4 <Endpoint_WaitUntilReady+0x4c>
    1ac6:	20 91 e4 00 	lds	r18, 0x00E4
    1aca:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1ace:	28 17       	cp	r18, r24
    1ad0:	39 07       	cpc	r19, r25
    1ad2:	39 f3       	breq	.-50     	; 0x1aa2 <Endpoint_WaitUntilReady+0xa>
    1ad4:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1ad6:	41 f0       	breq	.+16     	; 0x1ae8 <Endpoint_WaitUntilReady+0x50>
    1ad8:	c9 01       	movw	r24, r18
    1ada:	e3 cf       	rjmp	.-58     	; 0x1aa2 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1adc:	82 e0       	ldi	r24, 0x02	; 2
    1ade:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1ae0:	83 e0       	ldi	r24, 0x03	; 3
    1ae2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1ae8:	84 e0       	ldi	r24, 0x04	; 4
    1aea:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1aec:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1af0:	22 ff       	sbrs	r18, 2
    1af2:	df cf       	rjmp	.-66     	; 0x1ab2 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	08 95       	ret

00001af8 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1af8:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1afc:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1b00:	e0 ee       	ldi	r30, 0xE0	; 224
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	81 60       	ori	r24, 0x01	; 1
    1b08:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1b0a:	e8 ed       	ldi	r30, 0xD8	; 216
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	8f 77       	andi	r24, 0x7F	; 127
    1b12:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b14:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1b16:	a7 ed       	ldi	r26, 0xD7	; 215
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	8c 91       	ld	r24, X
    1b1c:	8e 7f       	andi	r24, 0xFE	; 254
    1b1e:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1b20:	80 81       	ld	r24, Z
    1b22:	8f 7e       	andi	r24, 0xEF	; 239
    1b24:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1b26:	10 92 dc 01 	sts	0x01DC, r1
    1b2a:	08 95       	ret

00001b2c <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1b2c:	0f 93       	push	r16
    1b2e:	1f 93       	push	r17
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1b34:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b38:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1b3c:	c8 ed       	ldi	r28, 0xD8	; 216
    1b3e:	d0 e0       	ldi	r29, 0x00	; 0
    1b40:	88 81       	ld	r24, Y
    1b42:	8f 77       	andi	r24, 0x7F	; 127
    1b44:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1b46:	88 81       	ld	r24, Y
    1b48:	80 68       	ori	r24, 0x80	; 128
    1b4a:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1b4c:	88 81       	ld	r24, Y
    1b4e:	8f 7d       	andi	r24, 0xDF	; 223
    1b50:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b52:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1b54:	10 92 dd 01 	sts	0x01DD, r1
	USB_Device_ConfigurationNumber  = 0;
    1b58:	10 92 d9 01 	sts	0x01D9, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1b5c:	10 92 db 01 	sts	0x01DB, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1b60:	10 92 da 01 	sts	0x01DA, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1b64:	00 ee       	ldi	r16, 0xE0	; 224
    1b66:	10 e0       	ldi	r17, 0x00	; 0
    1b68:	f8 01       	movw	r30, r16
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8b 7f       	andi	r24, 0xFB	; 251
    1b6e:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1b70:	88 81       	ld	r24, Y
    1b72:	81 60       	ori	r24, 0x01	; 1
    1b74:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b76:	42 e0       	ldi	r20, 0x02	; 2
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1b80:	e1 ee       	ldi	r30, 0xE1	; 225
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	8e 7f       	andi	r24, 0xFE	; 254
    1b88:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1b8a:	e2 ee       	ldi	r30, 0xE2	; 226
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	81 60       	ori	r24, 0x01	; 1
    1b92:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1b94:	80 81       	ld	r24, Z
    1b96:	88 60       	ori	r24, 0x08	; 8
    1b98:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1b9a:	f8 01       	movw	r30, r16
    1b9c:	80 81       	ld	r24, Z
    1b9e:	8e 7f       	andi	r24, 0xFE	; 254
    1ba0:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1ba2:	88 81       	ld	r24, Y
    1ba4:	80 61       	ori	r24, 0x10	; 16
    1ba6:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	08 95       	ret

00001bb2 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1bb2:	e7 ed       	ldi	r30, 0xD7	; 215
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	81 60       	ori	r24, 0x01	; 1
    1bba:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1bbc:	84 e0       	ldi	r24, 0x04	; 4
    1bbe:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	80 93 dc 01 	sts	0x01DC, r24

	USB_ResetInterface();
    1bc6:	0c 94 96 0d 	jmp	0x1b2c	; 0x1b2c <USB_ResetInterface>

00001bca <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1bca:	e8 ed       	ldi	r30, 0xD8	; 216
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	8e 7f       	andi	r24, 0xFE	; 254
    1bd2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1bd4:	10 92 e2 00 	sts	0x00E2, r1
    1bd8:	08 95       	ret

00001bda <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1bda:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1bde:	10 92 e1 00 	sts	0x00E1, r1
    1be2:	08 95       	ret

00001be4 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1be4:	1f 92       	push	r1
    1be6:	0f 92       	push	r0
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	0f 92       	push	r0
    1bec:	11 24       	eor	r1, r1
    1bee:	2f 93       	push	r18
    1bf0:	3f 93       	push	r19
    1bf2:	4f 93       	push	r20
    1bf4:	5f 93       	push	r21
    1bf6:	6f 93       	push	r22
    1bf8:	7f 93       	push	r23
    1bfa:	8f 93       	push	r24
    1bfc:	9f 93       	push	r25
    1bfe:	af 93       	push	r26
    1c00:	bf 93       	push	r27
    1c02:	ef 93       	push	r30
    1c04:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1c06:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1c0a:	82 ff       	sbrs	r24, 2
    1c0c:	0b c0       	rjmp	.+22     	; 0x1c24 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1c0e:	80 91 e2 00 	lds	r24, 0x00E2
    1c12:	82 ff       	sbrs	r24, 2
    1c14:	07 c0       	rjmp	.+14     	; 0x1c24 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1c16:	80 91 e1 00 	lds	r24, 0x00E1
    1c1a:	8b 7f       	andi	r24, 0xFB	; 251
    1c1c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1c20:	0e 94 3b 0b 	call	0x1676	; 0x1676 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1c24:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1c28:	80 ff       	sbrs	r24, 0
    1c2a:	1f c0       	rjmp	.+62     	; 0x1c6a <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1c2c:	80 91 d8 00 	lds	r24, 0x00D8
    1c30:	80 ff       	sbrs	r24, 0
    1c32:	1b c0       	rjmp	.+54     	; 0x1c6a <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1c34:	80 91 da 00 	lds	r24, 0x00DA
    1c38:	8e 7f       	andi	r24, 0xFE	; 254
    1c3a:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1c3e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1c42:	80 ff       	sbrs	r24, 0
    1c44:	0d c0       	rjmp	.+26     	; 0x1c60 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c46:	80 e1       	ldi	r24, 0x10	; 16
    1c48:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c4a:	82 e1       	ldi	r24, 0x12	; 18
    1c4c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1c4e:	09 b4       	in	r0, 0x29	; 41
    1c50:	00 fe       	sbrs	r0, 0
    1c52:	fd cf       	rjmp	.-6      	; 0x1c4e <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	80 93 dd 01 	sts	0x01DD, r24
			EVENT_USB_Device_Connect();
    1c5a:	0e 94 12 0b 	call	0x1624	; 0x1624 <EVENT_USB_Device_Connect>
    1c5e:	05 c0       	rjmp	.+10     	; 0x1c6a <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c60:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1c62:	10 92 dd 01 	sts	0x01DD, r1
			EVENT_USB_Device_Disconnect();
    1c66:	0e 94 24 0b 	call	0x1648	; 0x1648 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1c6a:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1c6e:	80 ff       	sbrs	r24, 0
    1c70:	19 c0       	rjmp	.+50     	; 0x1ca4 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1c72:	80 91 e2 00 	lds	r24, 0x00E2
    1c76:	80 ff       	sbrs	r24, 0
    1c78:	15 c0       	rjmp	.+42     	; 0x1ca4 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1c7a:	80 91 e2 00 	lds	r24, 0x00E2
    1c7e:	8e 7f       	andi	r24, 0xFE	; 254
    1c80:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1c84:	80 91 e2 00 	lds	r24, 0x00E2
    1c88:	80 61       	ori	r24, 0x10	; 16
    1c8a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1c8e:	80 91 d8 00 	lds	r24, 0x00D8
    1c92:	80 62       	ori	r24, 0x20	; 32
    1c94:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c98:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1c9a:	85 e0       	ldi	r24, 0x05	; 5
    1c9c:	80 93 dd 01 	sts	0x01DD, r24
		EVENT_USB_Device_Suspend();
    1ca0:	0e 94 2f 0b 	call	0x165e	; 0x165e <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1ca4:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1ca8:	84 ff       	sbrs	r24, 4
    1caa:	2e c0       	rjmp	.+92     	; 0x1d08 <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1cac:	80 91 e2 00 	lds	r24, 0x00E2
    1cb0:	84 ff       	sbrs	r24, 4
    1cb2:	2a c0       	rjmp	.+84     	; 0x1d08 <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1cb4:	80 e1       	ldi	r24, 0x10	; 16
    1cb6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1cb8:	82 e1       	ldi	r24, 0x12	; 18
    1cba:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1cbc:	09 b4       	in	r0, 0x29	; 41
    1cbe:	00 fe       	sbrs	r0, 0
    1cc0:	fd cf       	rjmp	.-6      	; 0x1cbc <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1cc2:	80 91 d8 00 	lds	r24, 0x00D8
    1cc6:	8f 7d       	andi	r24, 0xDF	; 223
    1cc8:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1ccc:	80 91 e1 00 	lds	r24, 0x00E1
    1cd0:	8f 7e       	andi	r24, 0xEF	; 239
    1cd2:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1cd6:	80 91 e2 00 	lds	r24, 0x00E2
    1cda:	8f 7e       	andi	r24, 0xEF	; 239
    1cdc:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1ce0:	80 91 e2 00 	lds	r24, 0x00E2
    1ce4:	81 60       	ori	r24, 0x01	; 1
    1ce6:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1cea:	80 91 d9 01 	lds	r24, 0x01D9
    1cee:	81 11       	cpse	r24, r1
    1cf0:	04 c0       	rjmp	.+8      	; 0x1cfa <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1cf2:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1cf6:	87 ff       	sbrs	r24, 7
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <__vector_10+0x11a>
    1cfa:	84 e0       	ldi	r24, 0x04	; 4
    1cfc:	01 c0       	rjmp	.+2      	; 0x1d00 <__vector_10+0x11c>
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	80 93 dd 01 	sts	0x01DD, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1d04:	0e 94 35 0b 	call	0x166a	; 0x166a <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1d08:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1d0c:	83 ff       	sbrs	r24, 3
    1d0e:	29 c0       	rjmp	.+82     	; 0x1d62 <__vector_10+0x17e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1d10:	80 91 e2 00 	lds	r24, 0x00E2
    1d14:	83 ff       	sbrs	r24, 3
    1d16:	25 c0       	rjmp	.+74     	; 0x1d62 <__vector_10+0x17e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1d18:	80 91 e1 00 	lds	r24, 0x00E1
    1d1c:	87 7f       	andi	r24, 0xF7	; 247
    1d1e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	80 93 dd 01 	sts	0x01DD, r24
		USB_Device_ConfigurationNumber = 0;
    1d28:	10 92 d9 01 	sts	0x01D9, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d2c:	80 91 e1 00 	lds	r24, 0x00E1
    1d30:	8e 7f       	andi	r24, 0xFE	; 254
    1d32:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d36:	80 91 e2 00 	lds	r24, 0x00E2
    1d3a:	8e 7f       	andi	r24, 0xFE	; 254
    1d3c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d40:	80 91 e2 00 	lds	r24, 0x00E2
    1d44:	80 61       	ori	r24, 0x10	; 16
    1d46:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d4a:	42 e0       	ldi	r20, 0x02	; 2
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1d54:	80 91 f0 00 	lds	r24, 0x00F0
    1d58:	88 60       	ori	r24, 0x08	; 8
    1d5a:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1d5e:	0e 94 2b 0b 	call	0x1656	; 0x1656 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1d62:	ff 91       	pop	r31
    1d64:	ef 91       	pop	r30
    1d66:	bf 91       	pop	r27
    1d68:	af 91       	pop	r26
    1d6a:	9f 91       	pop	r25
    1d6c:	8f 91       	pop	r24
    1d6e:	7f 91       	pop	r23
    1d70:	6f 91       	pop	r22
    1d72:	5f 91       	pop	r21
    1d74:	4f 91       	pop	r20
    1d76:	3f 91       	pop	r19
    1d78:	2f 91       	pop	r18
    1d7a:	0f 90       	pop	r0
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	0f 90       	pop	r0
    1d80:	1f 90       	pop	r1
    1d82:	18 95       	reti

00001d84 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1d84:	1f 92       	push	r1
    1d86:	0f 92       	push	r0
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	0f 92       	push	r0
    1d8c:	11 24       	eor	r1, r1
    1d8e:	2f 93       	push	r18
    1d90:	3f 93       	push	r19
    1d92:	4f 93       	push	r20
    1d94:	5f 93       	push	r21
    1d96:	6f 93       	push	r22
    1d98:	7f 93       	push	r23
    1d9a:	8f 93       	push	r24
    1d9c:	9f 93       	push	r25
    1d9e:	af 93       	push	r26
    1da0:	bf 93       	push	r27
    1da2:	cf 93       	push	r28
    1da4:	ef 93       	push	r30
    1da6:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1da8:	c0 91 e9 00 	lds	r28, 0x00E9
    1dac:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1dae:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1db2:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1db6:	80 91 f0 00 	lds	r24, 0x00F0
    1dba:	87 7f       	andi	r24, 0xF7	; 247
    1dbc:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1dc0:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1dc2:	0e 94 00 10 	call	0x2000	; 0x2000 <USB_Device_ProcessControlRequest>
    1dc6:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1dca:	80 91 f0 00 	lds	r24, 0x00F0
    1dce:	88 60       	ori	r24, 0x08	; 8
    1dd0:	80 93 f0 00 	sts	0x00F0, r24
    1dd4:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1dd8:	ff 91       	pop	r31
    1dda:	ef 91       	pop	r30
    1ddc:	cf 91       	pop	r28
    1dde:	bf 91       	pop	r27
    1de0:	af 91       	pop	r26
    1de2:	9f 91       	pop	r25
    1de4:	8f 91       	pop	r24
    1de6:	7f 91       	pop	r23
    1de8:	6f 91       	pop	r22
    1dea:	5f 91       	pop	r21
    1dec:	4f 91       	pop	r20
    1dee:	3f 91       	pop	r19
    1df0:	2f 91       	pop	r18
    1df2:	0f 90       	pop	r0
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	0f 90       	pop	r0
    1df8:	1f 90       	pop	r1
    1dfa:	18 95       	reti

00001dfc <Endpoint_Write_Stream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1dfc:	cf 92       	push	r12
    1dfe:	df 92       	push	r13
    1e00:	ef 92       	push	r14
    1e02:	ff 92       	push	r15
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	7c 01       	movw	r14, r24
    1e0e:	8b 01       	movw	r16, r22
    1e10:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1e12:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_WaitUntilReady>
    1e16:	81 11       	cpse	r24, r1
    1e18:	31 c0       	rjmp	.+98     	; 0x1e7c <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1e1a:	20 97       	sbiw	r28, 0x00	; 0
    1e1c:	31 f0       	breq	.+12     	; 0x1e2a <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    1e1e:	88 81       	ld	r24, Y
    1e20:	99 81       	ldd	r25, Y+1	; 0x01
    1e22:	08 1b       	sub	r16, r24
    1e24:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1e26:	e8 0e       	add	r14, r24
    1e28:	f9 1e       	adc	r15, r25
// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1e2a:	c1 2c       	mov	r12, r1
    1e2c:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1e2e:	01 15       	cp	r16, r1
    1e30:	11 05       	cpc	r17, r1
    1e32:	19 f1       	breq	.+70     	; 0x1e7a <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1e34:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1e38:	85 fd       	sbrc	r24, 5
    1e3a:	14 c0       	rjmp	.+40     	; 0x1e64 <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e3c:	80 91 e8 00 	lds	r24, 0x00E8
    1e40:	8e 77       	andi	r24, 0x7E	; 126
    1e42:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1e46:	20 97       	sbiw	r28, 0x00	; 0
    1e48:	41 f0       	breq	.+16     	; 0x1e5a <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    1e4a:	88 81       	ld	r24, Y
    1e4c:	99 81       	ldd	r25, Y+1	; 0x01
    1e4e:	8c 0d       	add	r24, r12
    1e50:	9d 1d       	adc	r25, r13
    1e52:	99 83       	std	Y+1, r25	; 0x01
    1e54:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1e56:	85 e0       	ldi	r24, 0x05	; 5
    1e58:	11 c0       	rjmp	.+34     	; 0x1e7c <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1e5a:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_WaitUntilReady>
    1e5e:	88 23       	and	r24, r24
    1e60:	31 f3       	breq	.-52     	; 0x1e2e <Endpoint_Write_Stream_LE+0x32>
    1e62:	0c c0       	rjmp	.+24     	; 0x1e7c <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1e64:	f7 01       	movw	r30, r14
    1e66:	81 91       	ld	r24, Z+
    1e68:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1e6a:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1e6e:	01 50       	subi	r16, 0x01	; 1
    1e70:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1e72:	ff ef       	ldi	r31, 0xFF	; 255
    1e74:	cf 1a       	sub	r12, r31
    1e76:	df 0a       	sbc	r13, r31
    1e78:	da cf       	rjmp	.-76     	; 0x1e2e <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
}
    1e7c:	df 91       	pop	r29
    1e7e:	cf 91       	pop	r28
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	ff 90       	pop	r15
    1e86:	ef 90       	pop	r14
    1e88:	df 90       	pop	r13
    1e8a:	cf 90       	pop	r12
    1e8c:	08 95       	ret

00001e8e <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1e8e:	20 91 e4 01 	lds	r18, 0x01E4
    1e92:	30 91 e5 01 	lds	r19, 0x01E5
    1e96:	26 17       	cp	r18, r22
    1e98:	37 07       	cpc	r19, r23
    1e9a:	48 f0       	brcs	.+18     	; 0x1eae <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1e9c:	61 15       	cp	r22, r1
    1e9e:	71 05       	cpc	r23, r1
    1ea0:	39 f4       	brne	.+14     	; 0x1eb0 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ea2:	20 91 e8 00 	lds	r18, 0x00E8
    1ea6:	2e 77       	andi	r18, 0x7E	; 126
    1ea8:	20 93 e8 00 	sts	0x00E8, r18
    1eac:	01 c0       	rjmp	.+2      	; 0x1eb0 <Endpoint_Write_Control_Stream_LE+0x22>
    1eae:	b9 01       	movw	r22, r18
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1eb4:	61 15       	cp	r22, r1
    1eb6:	71 05       	cpc	r23, r1
    1eb8:	a9 f1       	breq	.+106    	; 0x1f24 <Endpoint_Write_Control_Stream_LE+0x96>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1eba:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ebe:	88 23       	and	r24, r24
    1ec0:	e9 f1       	breq	.+122    	; 0x1f3c <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ec2:	85 30       	cpi	r24, 0x05	; 5
    1ec4:	e9 f1       	breq	.+122    	; 0x1f40 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ec6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1eca:	83 fd       	sbrc	r24, 3
    1ecc:	35 c0       	rjmp	.+106    	; 0x1f38 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ece:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1ed2:	82 ff       	sbrs	r24, 2
    1ed4:	06 c0       	rjmp	.+12     	; 0x1ee2 <Endpoint_Write_Control_Stream_LE+0x54>
    1ed6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1eda:	82 ff       	sbrs	r24, 2
    1edc:	26 c0       	rjmp	.+76     	; 0x1f2a <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ee2:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1ee6:	80 ff       	sbrs	r24, 0
    1ee8:	e5 cf       	rjmp	.-54     	; 0x1eb4 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1eea:	20 91 f3 00 	lds	r18, 0x00F3
    1eee:	80 91 f2 00 	lds	r24, 0x00F2
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1ef6:	61 15       	cp	r22, r1
    1ef8:	71 05       	cpc	r23, r1
    1efa:	51 f0       	breq	.+20     	; 0x1f10 <Endpoint_Write_Control_Stream_LE+0x82>
    1efc:	88 30       	cpi	r24, 0x08	; 8
    1efe:	91 05       	cpc	r25, r1
    1f00:	38 f4       	brcc	.+14     	; 0x1f10 <Endpoint_Write_Control_Stream_LE+0x82>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1f02:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f04:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1f08:	61 50       	subi	r22, 0x01	; 1
    1f0a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1f0c:	01 96       	adiw	r24, 0x01	; 1
    1f0e:	f3 cf       	rjmp	.-26     	; 0x1ef6 <Endpoint_Write_Control_Stream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1f10:	21 e0       	ldi	r18, 0x01	; 1
    1f12:	08 97       	sbiw	r24, 0x08	; 8
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <Endpoint_Write_Control_Stream_LE+0x8a>
    1f16:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f18:	80 91 e8 00 	lds	r24, 0x00E8
    1f1c:	8e 77       	andi	r24, 0x7E	; 126
    1f1e:	80 93 e8 00 	sts	0x00E8, r24
    1f22:	c8 cf       	rjmp	.-112    	; 0x1eb4 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1f24:	21 11       	cpse	r18, r1
    1f26:	c9 cf       	rjmp	.-110    	; 0x1eba <Endpoint_Write_Control_Stream_LE+0x2c>
    1f28:	d6 cf       	rjmp	.-84     	; 0x1ed6 <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1f2a:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1f2e:	88 23       	and	r24, r24
    1f30:	29 f0       	breq	.+10     	; 0x1f3c <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1f32:	85 30       	cpi	r24, 0x05	; 5
    1f34:	81 f6       	brne	.-96     	; 0x1ed6 <Endpoint_Write_Control_Stream_LE+0x48>
    1f36:	04 c0       	rjmp	.+8      	; 0x1f40 <Endpoint_Write_Control_Stream_LE+0xb2>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1f3c:	82 e0       	ldi	r24, 0x02	; 2
    1f3e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1f40:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1f42:	08 95       	ret

00001f44 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1f44:	20 91 e4 01 	lds	r18, 0x01E4
    1f48:	30 91 e5 01 	lds	r19, 0x01E5
    1f4c:	26 17       	cp	r18, r22
    1f4e:	37 07       	cpc	r19, r23
    1f50:	48 f0       	brcs	.+18     	; 0x1f64 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1f52:	61 15       	cp	r22, r1
    1f54:	71 05       	cpc	r23, r1
    1f56:	39 f4       	brne	.+14     	; 0x1f66 <Endpoint_Write_Control_PStream_LE+0x22>
    1f58:	20 91 e8 00 	lds	r18, 0x00E8
    1f5c:	2e 77       	andi	r18, 0x7E	; 126
    1f5e:	20 93 e8 00 	sts	0x00E8, r18
    1f62:	01 c0       	rjmp	.+2      	; 0x1f66 <Endpoint_Write_Control_PStream_LE+0x22>
    1f64:	b9 01       	movw	r22, r18
    1f66:	fc 01       	movw	r30, r24
    1f68:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1f6a:	61 15       	cp	r22, r1
    1f6c:	71 05       	cpc	r23, r1
    1f6e:	c1 f1       	breq	.+112    	; 0x1fe0 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1f70:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1f74:	88 23       	and	r24, r24
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <Endpoint_Write_Control_PStream_LE+0x36>
    1f78:	3f c0       	rjmp	.+126    	; 0x1ff8 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1f7a:	85 30       	cpi	r24, 0x05	; 5
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <Endpoint_Write_Control_PStream_LE+0x3c>
    1f7e:	3e c0       	rjmp	.+124    	; 0x1ffc <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f80:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1f84:	83 fd       	sbrc	r24, 3
    1f86:	36 c0       	rjmp	.+108    	; 0x1ff4 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1f88:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1f8c:	82 ff       	sbrs	r24, 2
    1f8e:	06 c0       	rjmp	.+12     	; 0x1f9c <Endpoint_Write_Control_PStream_LE+0x58>
    1f90:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1f94:	82 ff       	sbrs	r24, 2
    1f96:	27 c0       	rjmp	.+78     	; 0x1fe6 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f9c:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1fa0:	80 ff       	sbrs	r24, 0
    1fa2:	e3 cf       	rjmp	.-58     	; 0x1f6a <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1fa4:	20 91 f3 00 	lds	r18, 0x00F3
    1fa8:	80 91 f2 00 	lds	r24, 0x00F2
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1fb0:	61 15       	cp	r22, r1
    1fb2:	71 05       	cpc	r23, r1
    1fb4:	59 f0       	breq	.+22     	; 0x1fcc <Endpoint_Write_Control_PStream_LE+0x88>
    1fb6:	88 30       	cpi	r24, 0x08	; 8
    1fb8:	91 05       	cpc	r25, r1
    1fba:	40 f4       	brcc	.+16     	; 0x1fcc <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1fbc:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1fbe:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1fc2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1fc4:	61 50       	subi	r22, 0x01	; 1
    1fc6:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1fc8:	01 96       	adiw	r24, 0x01	; 1
    1fca:	f2 cf       	rjmp	.-28     	; 0x1fb0 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1fcc:	21 e0       	ldi	r18, 0x01	; 1
    1fce:	08 97       	sbiw	r24, 0x08	; 8
    1fd0:	09 f0       	breq	.+2      	; 0x1fd4 <Endpoint_Write_Control_PStream_LE+0x90>
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fd4:	80 91 e8 00 	lds	r24, 0x00E8
    1fd8:	8e 77       	andi	r24, 0x7E	; 126
    1fda:	80 93 e8 00 	sts	0x00E8, r24
    1fde:	c5 cf       	rjmp	.-118    	; 0x1f6a <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1fe0:	21 11       	cpse	r18, r1
    1fe2:	c6 cf       	rjmp	.-116    	; 0x1f70 <Endpoint_Write_Control_PStream_LE+0x2c>
    1fe4:	d5 cf       	rjmp	.-86     	; 0x1f90 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1fe6:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1fea:	88 23       	and	r24, r24
    1fec:	29 f0       	breq	.+10     	; 0x1ff8 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1fee:	85 30       	cpi	r24, 0x05	; 5
    1ff0:	79 f6       	brne	.-98     	; 0x1f90 <Endpoint_Write_Control_PStream_LE+0x4c>
    1ff2:	04 c0       	rjmp	.+8      	; 0x1ffc <Endpoint_Write_Control_PStream_LE+0xb8>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1ff8:	82 e0       	ldi	r24, 0x02	; 2
    1ffa:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1ffc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1ffe:	08 95       	ret

00002000 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	aa 97       	sbiw	r28, 0x2a	; 42
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	ee ed       	ldi	r30, 0xDE	; 222
    201a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    201c:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2020:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2022:	21 e0       	ldi	r18, 0x01	; 1
    2024:	e6 3e       	cpi	r30, 0xE6	; 230
    2026:	f2 07       	cpc	r31, r18
    2028:	c9 f7       	brne	.-14     	; 0x201c <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    202a:	0e 94 82 0b 	call	0x1704	; 0x1704 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    202e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    2032:	83 ff       	sbrs	r24, 3
    2034:	1d c1       	rjmp	.+570    	; 0x2270 <USB_Device_ProcessControlRequest+0x270>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2036:	20 91 de 01 	lds	r18, 0x01DE

		switch (USB_ControlRequest.bRequest)
    203a:	30 91 df 01 	lds	r19, 0x01DF
    203e:	83 2f       	mov	r24, r19
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	8a 30       	cpi	r24, 0x0A	; 10
    2044:	91 05       	cpc	r25, r1
    2046:	08 f0       	brcs	.+2      	; 0x204a <USB_Device_ProcessControlRequest+0x4a>
    2048:	13 c1       	rjmp	.+550    	; 0x2270 <USB_Device_ProcessControlRequest+0x270>
    204a:	fc 01       	movw	r30, r24
    204c:	ea 5a       	subi	r30, 0xAA	; 170
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	0c 94 56 2c 	jmp	0x58ac	; 0x58ac <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2054:	20 38       	cpi	r18, 0x80	; 128
    2056:	81 f0       	breq	.+32     	; 0x2078 <USB_Device_ProcessControlRequest+0x78>
    2058:	22 38       	cpi	r18, 0x82	; 130
    205a:	09 f0       	breq	.+2      	; 0x205e <USB_Device_ProcessControlRequest+0x5e>
    205c:	09 c1       	rjmp	.+530    	; 0x2270 <USB_Device_ProcessControlRequest+0x270>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    205e:	80 91 e2 01 	lds	r24, 0x01E2
    2062:	8f 70       	andi	r24, 0x0F	; 15
    2064:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2068:	80 91 eb 00 	lds	r24, 0x00EB
    206c:	85 fb       	bst	r24, 5
    206e:	88 27       	eor	r24, r24
    2070:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2072:	10 92 e9 00 	sts	0x00E9, r1
    2076:	06 c0       	rjmp	.+12     	; 0x2084 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2078:	80 91 da 01 	lds	r24, 0x01DA
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    207c:	90 91 db 01 	lds	r25, 0x01DB
    2080:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2082:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2084:	90 91 e8 00 	lds	r25, 0x00E8
    2088:	97 7f       	andi	r25, 0xF7	; 247
    208a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    208e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    2092:	10 92 f1 00 	sts	0x00F1, r1
    2096:	c6 c0       	rjmp	.+396    	; 0x2224 <USB_Device_ProcessControlRequest+0x224>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2098:	82 2f       	mov	r24, r18
    209a:	8d 7f       	andi	r24, 0xFD	; 253
    209c:	09 f0       	breq	.+2      	; 0x20a0 <USB_Device_ProcessControlRequest+0xa0>
    209e:	e8 c0       	rjmp	.+464    	; 0x2270 <USB_Device_ProcessControlRequest+0x270>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    20a0:	22 23       	and	r18, r18
    20a2:	19 f0       	breq	.+6      	; 0x20aa <USB_Device_ProcessControlRequest+0xaa>
    20a4:	22 30       	cpi	r18, 0x02	; 2
    20a6:	61 f0       	breq	.+24     	; 0x20c0 <USB_Device_ProcessControlRequest+0xc0>
    20a8:	e3 c0       	rjmp	.+454    	; 0x2270 <USB_Device_ProcessControlRequest+0x270>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    20aa:	80 91 e0 01 	lds	r24, 0x01E0
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <USB_Device_ProcessControlRequest+0xb4>
    20b2:	de c0       	rjmp	.+444    	; 0x2270 <USB_Device_ProcessControlRequest+0x270>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    20b4:	33 30       	cpi	r19, 0x03	; 3
    20b6:	09 f0       	breq	.+2      	; 0x20ba <USB_Device_ProcessControlRequest+0xba>
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	80 93 db 01 	sts	0x01DB, r24
    20be:	28 c0       	rjmp	.+80     	; 0x2110 <USB_Device_ProcessControlRequest+0x110>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    20c0:	80 91 e0 01 	lds	r24, 0x01E0
    20c4:	81 11       	cpse	r24, r1
    20c6:	24 c0       	rjmp	.+72     	; 0x2110 <USB_Device_ProcessControlRequest+0x110>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    20c8:	20 91 e2 01 	lds	r18, 0x01E2
    20cc:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <USB_Device_ProcessControlRequest+0xd2>
    20d0:	cf c0       	rjmp	.+414    	; 0x2270 <USB_Device_ProcessControlRequest+0x270>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20d2:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    20d6:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    20da:	80 ff       	sbrs	r24, 0
    20dc:	19 c0       	rjmp	.+50     	; 0x2110 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    20de:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    20e2:	33 30       	cpi	r19, 0x03	; 3
    20e4:	11 f4       	brne	.+4      	; 0x20ea <USB_Device_ProcessControlRequest+0xea>
    20e6:	80 62       	ori	r24, 0x20	; 32
    20e8:	11 c0       	rjmp	.+34     	; 0x210c <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    20ea:	80 61       	ori	r24, 0x10	; 16
    20ec:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	02 2e       	mov	r0, r18
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <USB_Device_ProcessControlRequest+0xfa>
    20f8:	88 0f       	add	r24, r24
    20fa:	0a 94       	dec	r0
    20fc:	ea f7       	brpl	.-6      	; 0x20f8 <USB_Device_ProcessControlRequest+0xf8>
    20fe:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    2102:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2106:	80 91 eb 00 	lds	r24, 0x00EB
    210a:	88 60       	ori	r24, 0x08	; 8
    210c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2110:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2114:	80 91 e8 00 	lds	r24, 0x00E8
    2118:	87 7f       	andi	r24, 0xF7	; 247
    211a:	87 c0       	rjmp	.+270    	; 0x222a <USB_Device_ProcessControlRequest+0x22a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    211c:	21 11       	cpse	r18, r1
    211e:	a8 c0       	rjmp	.+336    	; 0x2270 <USB_Device_ProcessControlRequest+0x270>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    2120:	10 91 e0 01 	lds	r17, 0x01E0
    2124:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2126:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2128:	f8 94       	cli
    212a:	80 91 e8 00 	lds	r24, 0x00E8
    212e:	87 7f       	andi	r24, 0xF7	; 247
    2130:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2134:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2138:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    213c:	80 ff       	sbrs	r24, 0
    213e:	fc cf       	rjmp	.-8      	; 0x2138 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2140:	80 91 e3 00 	lds	r24, 0x00E3
    2144:	80 78       	andi	r24, 0x80	; 128
    2146:	81 2b       	or	r24, r17

				UDADDR = Temp;
    2148:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    214c:	80 68       	ori	r24, 0x80	; 128
    214e:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2152:	11 23       	and	r17, r17
    2154:	11 f0       	breq	.+4      	; 0x215a <USB_Device_ProcessControlRequest+0x15a>
    2156:	83 e0       	ldi	r24, 0x03	; 3
    2158:	01 c0       	rjmp	.+2      	; 0x215c <USB_Device_ProcessControlRequest+0x15c>
    215a:	82 e0       	ldi	r24, 0x02	; 2
    215c:	80 93 dd 01 	sts	0x01DD, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2160:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    2162:	86 c0       	rjmp	.+268    	; 0x2270 <USB_Device_ProcessControlRequest+0x270>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2164:	20 58       	subi	r18, 0x80	; 128
    2166:	22 30       	cpi	r18, 0x02	; 2
    2168:	08 f0       	brcs	.+2      	; 0x216c <USB_Device_ProcessControlRequest+0x16c>
    216a:	82 c0       	rjmp	.+260    	; 0x2270 <USB_Device_ProcessControlRequest+0x270>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    216c:	80 91 e0 01 	lds	r24, 0x01E0
    2170:	90 91 e1 01 	lds	r25, 0x01E1
    2174:	8c 3d       	cpi	r24, 0xDC	; 220
    2176:	23 e0       	ldi	r18, 0x03	; 3
    2178:	92 07       	cpc	r25, r18
    217a:	79 f5       	brne	.+94     	; 0x21da <USB_Device_ProcessControlRequest+0x1da>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    217c:	83 e0       	ldi	r24, 0x03	; 3
    217e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2180:	8a e2       	ldi	r24, 0x2A	; 42
    2182:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2184:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2186:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2188:	de 01       	movw	r26, r28
    218a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    218c:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    218e:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2190:	51 e2       	ldi	r21, 0x21	; 33
    2192:	e3 2f       	mov	r30, r19
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	50 93 57 00 	sts	0x0057, r21
    219a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    219c:	20 ff       	sbrs	r18, 0
    219e:	03 c0       	rjmp	.+6      	; 0x21a6 <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
    21a0:	e2 95       	swap	r30
    21a2:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    21a4:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    21a6:	ef 70       	andi	r30, 0x0F	; 15
    21a8:	8e 2f       	mov	r24, r30
    21aa:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    21ac:	ea 30       	cpi	r30, 0x0A	; 10
    21ae:	10 f0       	brcs	.+4      	; 0x21b4 <USB_Device_ProcessControlRequest+0x1b4>
    21b0:	c7 96       	adiw	r24, 0x37	; 55
    21b2:	01 c0       	rjmp	.+2      	; 0x21b6 <USB_Device_ProcessControlRequest+0x1b6>
    21b4:	c0 96       	adiw	r24, 0x30	; 48
    21b6:	8d 93       	st	X+, r24
    21b8:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    21ba:	2f 5f       	subi	r18, 0xFF	; 255
    21bc:	24 31       	cpi	r18, 0x14	; 20
    21be:	49 f7       	brne	.-46     	; 0x2192 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    21c0:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21c2:	80 91 e8 00 	lds	r24, 0x00E8
    21c6:	87 7f       	andi	r24, 0xF7	; 247
    21c8:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    21cc:	6a e2       	ldi	r22, 0x2A	; 42
    21ce:	70 e0       	ldi	r23, 0x00	; 0
    21d0:	ce 01       	movw	r24, r28
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <Endpoint_Write_Control_Stream_LE>
    21d8:	14 c0       	rjmp	.+40     	; 0x2202 <USB_Device_ProcessControlRequest+0x202>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    21da:	ae 01       	movw	r20, r28
    21dc:	4f 5f       	subi	r20, 0xFF	; 255
    21de:	5f 4f       	sbci	r21, 0xFF	; 255
    21e0:	60 91 e2 01 	lds	r22, 0x01E2
    21e4:	0e 94 87 0c 	call	0x190e	; 0x190e <CALLBACK_USB_GetDescriptor>
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	09 f4       	brne	.+2      	; 0x21ee <USB_Device_ProcessControlRequest+0x1ee>
    21ec:	41 c0       	rjmp	.+130    	; 0x2270 <USB_Device_ProcessControlRequest+0x270>
    21ee:	20 91 e8 00 	lds	r18, 0x00E8
    21f2:	27 7f       	andi	r18, 0xF7	; 247
    21f4:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    21f8:	bc 01       	movw	r22, r24
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2202:	80 91 e8 00 	lds	r24, 0x00E8
    2206:	8b 77       	andi	r24, 0x7B	; 123
    2208:	80 93 e8 00 	sts	0x00E8, r24
    220c:	31 c0       	rjmp	.+98     	; 0x2270 <USB_Device_ProcessControlRequest+0x270>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    220e:	20 38       	cpi	r18, 0x80	; 128
    2210:	79 f5       	brne	.+94     	; 0x2270 <USB_Device_ProcessControlRequest+0x270>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2212:	80 91 e8 00 	lds	r24, 0x00E8
    2216:	87 7f       	andi	r24, 0xF7	; 247
    2218:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    221c:	80 91 d9 01 	lds	r24, 0x01D9
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2220:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2224:	80 91 e8 00 	lds	r24, 0x00E8
    2228:	8e 77       	andi	r24, 0x7E	; 126
    222a:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    222e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Endpoint_ClearStatusStage>
    2232:	1e c0       	rjmp	.+60     	; 0x2270 <USB_Device_ProcessControlRequest+0x270>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2234:	21 11       	cpse	r18, r1
    2236:	1c c0       	rjmp	.+56     	; 0x2270 <USB_Device_ProcessControlRequest+0x270>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2238:	90 91 e0 01 	lds	r25, 0x01E0
    223c:	92 30       	cpi	r25, 0x02	; 2
    223e:	c0 f4       	brcc	.+48     	; 0x2270 <USB_Device_ProcessControlRequest+0x270>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2240:	80 91 e8 00 	lds	r24, 0x00E8
    2244:	87 7f       	andi	r24, 0xF7	; 247
    2246:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    224a:	90 93 d9 01 	sts	0x01D9, r25

	Endpoint_ClearStatusStage();
    224e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2252:	80 91 d9 01 	lds	r24, 0x01D9
    2256:	81 11       	cpse	r24, r1
    2258:	04 c0       	rjmp	.+8      	; 0x2262 <USB_Device_ProcessControlRequest+0x262>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    225a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    225e:	87 ff       	sbrs	r24, 7
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <USB_Device_ProcessControlRequest+0x266>
    2262:	84 e0       	ldi	r24, 0x04	; 4
    2264:	01 c0       	rjmp	.+2      	; 0x2268 <USB_Device_ProcessControlRequest+0x268>
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	80 93 dd 01 	sts	0x01DD, r24

	EVENT_USB_Device_ConfigurationChanged();
    226c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2270:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2274:	83 ff       	sbrs	r24, 3
    2276:	0a c0       	rjmp	.+20     	; 0x228c <USB_Device_ProcessControlRequest+0x28c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2278:	80 91 eb 00 	lds	r24, 0x00EB
    227c:	80 62       	ori	r24, 0x20	; 32
    227e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2282:	80 91 e8 00 	lds	r24, 0x00E8
    2286:	87 7f       	andi	r24, 0xF7	; 247
    2288:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    228c:	aa 96       	adiw	r28, 0x2a	; 42
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	de bf       	out	0x3e, r29	; 62
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	cd bf       	out	0x3d, r28	; 61
    2298:	df 91       	pop	r29
    229a:	cf 91       	pop	r28
    229c:	1f 91       	pop	r17
    229e:	0f 91       	pop	r16
    22a0:	08 95       	ret

000022a2 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    22a2:	90 93 64 01 	sts	0x0164, r25
    22a6:	80 93 63 01 	sts	0x0163, r24
    22aa:	08 95       	ret

000022ac <host_get_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    22ac:	80 91 63 01 	lds	r24, 0x0163
    22b0:	90 91 64 01 	lds	r25, 0x0164
    22b4:	08 95       	ret

000022b6 <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    22b6:	e0 91 63 01 	lds	r30, 0x0163
    22ba:	f0 91 64 01 	lds	r31, 0x0164
    22be:	30 97       	sbiw	r30, 0x00	; 0
    22c0:	21 f0       	breq	.+8      	; 0x22ca <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    22c2:	01 90       	ld	r0, Z+
    22c4:	f0 81       	ld	r31, Z
    22c6:	e0 2d       	mov	r30, r0
    22c8:	09 94       	ijmp
}
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	08 95       	ret

000022ce <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    22ce:	ff 92       	push	r15
    22d0:	0f 93       	push	r16
    22d2:	1f 93       	push	r17
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	8c 01       	movw	r16, r24
    if (!driver) return;
    22da:	e0 91 63 01 	lds	r30, 0x0163
    22de:	f0 91 64 01 	lds	r31, 0x0164
    22e2:	30 97       	sbiw	r30, 0x00	; 0
    22e4:	99 f1       	breq	.+102    	; 0x234c <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    22e6:	02 80       	ldd	r0, Z+2	; 0x02
    22e8:	f3 81       	ldd	r31, Z+3	; 0x03
    22ea:	e0 2d       	mov	r30, r0
    22ec:	09 95       	icall

    if (debug_keyboard) {
    22ee:	80 91 c3 01 	lds	r24, 0x01C3
    22f2:	82 ff       	sbrs	r24, 2
    22f4:	2b c0       	rjmp	.+86     	; 0x234c <host_keyboard_send+0x7e>
        dprint("keyboard_report: ");
    22f6:	80 ff       	sbrs	r24, 0
    22f8:	04 c0       	rjmp	.+8      	; 0x2302 <host_keyboard_send+0x34>
    22fa:	86 e0       	ldi	r24, 0x06	; 6
    22fc:	94 e0       	ldi	r25, 0x04	; 4
    22fe:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    2302:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2304:	80 e1       	ldi	r24, 0x10	; 16
    2306:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2308:	00 e0       	ldi	r16, 0x00	; 0
    230a:	14 e0       	ldi	r17, 0x04	; 4
    230c:	80 91 c3 01 	lds	r24, 0x01C3
    2310:	80 ff       	sbrs	r24, 0
    2312:	0b c0       	rjmp	.+22     	; 0x232a <host_keyboard_send+0x5c>
    2314:	88 81       	ld	r24, Y
    2316:	1f 92       	push	r1
    2318:	8f 93       	push	r24
    231a:	1f 93       	push	r17
    231c:	0f 93       	push	r16
    231e:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	fa 94       	dec	r15
    232c:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    232e:	f1 10       	cpse	r15, r1
    2330:	ed cf       	rjmp	.-38     	; 0x230c <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2332:	80 91 c3 01 	lds	r24, 0x01C3
    2336:	80 ff       	sbrs	r24, 0
    2338:	09 c0       	rjmp	.+18     	; 0x234c <host_keyboard_send+0x7e>
    233a:	8e ef       	ldi	r24, 0xFE	; 254
    233c:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2348:	0c 94 0e 08 	jmp	0x101c	; 0x101c <xputs>
    }
}
    234c:	df 91       	pop	r29
    234e:	cf 91       	pop	r28
    2350:	1f 91       	pop	r17
    2352:	0f 91       	pop	r16
    2354:	ff 90       	pop	r15
    2356:	08 95       	ret

00002358 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2358:	e0 91 63 01 	lds	r30, 0x0163
    235c:	f0 91 64 01 	lds	r31, 0x0164
    2360:	30 97       	sbiw	r30, 0x00	; 0
    2362:	21 f0       	breq	.+8      	; 0x236c <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2364:	04 80       	ldd	r0, Z+4	; 0x04
    2366:	f5 81       	ldd	r31, Z+5	; 0x05
    2368:	e0 2d       	mov	r30, r0
    236a:	09 94       	ijmp
    236c:	08 95       	ret

0000236e <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    236e:	20 91 61 01 	lds	r18, 0x0161
    2372:	30 91 62 01 	lds	r19, 0x0162
    2376:	82 17       	cp	r24, r18
    2378:	93 07       	cpc	r25, r19
    237a:	71 f0       	breq	.+28     	; 0x2398 <host_system_send+0x2a>
    last_system_report = report;
    237c:	90 93 62 01 	sts	0x0162, r25
    2380:	80 93 61 01 	sts	0x0161, r24

    if (!driver) return;
    2384:	e0 91 63 01 	lds	r30, 0x0163
    2388:	f0 91 64 01 	lds	r31, 0x0164
    238c:	30 97       	sbiw	r30, 0x00	; 0
    238e:	21 f0       	breq	.+8      	; 0x2398 <host_system_send+0x2a>
    (*driver->send_system)(report);
    2390:	06 80       	ldd	r0, Z+6	; 0x06
    2392:	f7 81       	ldd	r31, Z+7	; 0x07
    2394:	e0 2d       	mov	r30, r0
    2396:	09 94       	ijmp
    2398:	08 95       	ret

0000239a <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    239a:	20 91 5f 01 	lds	r18, 0x015F
    239e:	30 91 60 01 	lds	r19, 0x0160
    23a2:	82 17       	cp	r24, r18
    23a4:	93 07       	cpc	r25, r19
    23a6:	71 f0       	breq	.+28     	; 0x23c4 <host_consumer_send+0x2a>
    last_consumer_report = report;
    23a8:	90 93 60 01 	sts	0x0160, r25
    23ac:	80 93 5f 01 	sts	0x015F, r24

    if (!driver) return;
    23b0:	e0 91 63 01 	lds	r30, 0x0163
    23b4:	f0 91 64 01 	lds	r31, 0x0164
    23b8:	30 97       	sbiw	r30, 0x00	; 0
    23ba:	21 f0       	breq	.+8      	; 0x23c4 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    23bc:	00 84       	ldd	r0, Z+8	; 0x08
    23be:	f1 85       	ldd	r31, Z+9	; 0x09
    23c0:	e0 2d       	mov	r30, r0
    23c2:	09 94       	ijmp
    23c4:	08 95       	ret

000023c6 <keyboard_init>:
#endif


void keyboard_init(void)
{
    timer_init();
    23c6:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <timer_init>
    matrix_init();
    23ca:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <matrix_init>
    serial_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    23ce:	0c 94 62 20 	jmp	0x40c4	; 0x40c4 <bootmagic>

000023d2 <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    23d2:	cf 93       	push	r28
    23d4:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    23d6:	80 91 c3 01 	lds	r24, 0x01C3
    23da:	82 ff       	sbrs	r24, 2
    23dc:	1e c0       	rjmp	.+60     	; 0x241a <keyboard_set_leds+0x48>
    23de:	80 ff       	sbrs	r24, 0
    23e0:	04 c0       	rjmp	.+8      	; 0x23ea <keyboard_set_leds+0x18>
    23e2:	8f e1       	ldi	r24, 0x1F	; 31
    23e4:	94 e0       	ldi	r25, 0x04	; 4
    23e6:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    23ea:	80 91 c3 01 	lds	r24, 0x01C3
    23ee:	80 ff       	sbrs	r24, 0
    23f0:	0c c0       	rjmp	.+24     	; 0x240a <keyboard_set_leds+0x38>
    23f2:	1f 92       	push	r1
    23f4:	cf 93       	push	r28
    23f6:	2a e1       	ldi	r18, 0x1A	; 26
    23f8:	34 e0       	ldi	r19, 0x04	; 4
    23fa:	3f 93       	push	r19
    23fc:	2f 93       	push	r18
    23fe:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	80 91 c3 01 	lds	r24, 0x01C3
    240e:	80 ff       	sbrs	r24, 0
    2410:	04 c0       	rjmp	.+8      	; 0x241a <keyboard_set_leds+0x48>
    2412:	88 e1       	ldi	r24, 0x18	; 24
    2414:	94 e0       	ldi	r25, 0x04	; 4
    2416:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    led_set(leds);
    241a:	8c 2f       	mov	r24, r28
}
    241c:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    241e:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <led_set>

00002422 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2422:	5f 92       	push	r5
    2424:	6f 92       	push	r6
    2426:	7f 92       	push	r7
    2428:	8f 92       	push	r8
    242a:	9f 92       	push	r9
    242c:	af 92       	push	r10
    242e:	bf 92       	push	r11
    2430:	cf 92       	push	r12
    2432:	df 92       	push	r13
    2434:	ef 92       	push	r14
    2436:	ff 92       	push	r15
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	2a 97       	sbiw	r28, 0x0a	; 10
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	de bf       	out	0x3e, r29	; 62
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	cd bf       	out	0x3d, r28	; 61
    static matrix_row_t matrix_prev[MATRIX_ROWS];
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2450:	0e 94 ef 08 	call	0x11de	; 0x11de <matrix_scan>
    2454:	96 e6       	ldi	r25, 0x66	; 102
    2456:	c9 2e       	mov	r12, r25
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	d9 2e       	mov	r13, r25
    245c:	00 e0       	ldi	r16, 0x00	; 0
    245e:	10 e0       	ldi	r17, 0x00	; 0
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2460:	aa 24       	eor	r10, r10
    2462:	a3 94       	inc	r10
    2464:	b1 2c       	mov	r11, r1
    2466:	50 2e       	mov	r5, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2468:	80 2f       	mov	r24, r16
    246a:	0e 94 8b 09 	call	0x1316	; 0x1316 <matrix_get_row>
    246e:	3c 01       	movw	r6, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2470:	f6 01       	movw	r30, r12
    2472:	e1 90       	ld	r14, Z+
    2474:	f1 90       	ld	r15, Z+
    2476:	6f 01       	movw	r12, r30
    2478:	e8 26       	eor	r14, r24
    247a:	f9 26       	eor	r15, r25
        if (matrix_change) {
    247c:	e1 14       	cp	r14, r1
    247e:	f1 04       	cpc	r15, r1
    2480:	b1 f4       	brne	.+44     	; 0x24ae <keyboard_task+0x8c>
    2482:	0f 5f       	subi	r16, 0xFF	; 255
    2484:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2486:	05 30       	cpi	r16, 0x05	; 5
    2488:	11 05       	cpc	r17, r1
    248a:	69 f7       	brne	.-38     	; 0x2466 <keyboard_task+0x44>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    248c:	8f ef       	ldi	r24, 0xFF	; 255
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	8a 83       	std	Y+2, r24	; 0x02
    2492:	1b 82       	std	Y+3, r1	; 0x03
    2494:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <timer_read>
    2498:	81 60       	ori	r24, 0x01	; 1
    249a:	78 2f       	mov	r23, r24
    249c:	9d 83       	std	Y+5, r25	; 0x05
    249e:	8c 83       	std	Y+4, r24	; 0x04
    24a0:	49 81       	ldd	r20, Y+1	; 0x01
    24a2:	5a 81       	ldd	r21, Y+2	; 0x02
    24a4:	6b 81       	ldd	r22, Y+3	; 0x03
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	0e 94 ca 12 	call	0x2594	; 0x2594 <action_exec>
    24ac:	3a c0       	rjmp	.+116    	; 0x2522 <keyboard_task+0x100>
    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
        matrix_change = matrix_row ^ matrix_prev[r];
        if (matrix_change) {
            if (debug_matrix) matrix_print();
    24ae:	80 91 c3 01 	lds	r24, 0x01C3
    24b2:	81 fd       	sbrc	r24, 1
    24b4:	0e 94 94 09 	call	0x1328	; 0x1328 <matrix_print>
    static matrix_row_t matrix_prev[MATRIX_ROWS];
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    24bc:	45 01       	movw	r8, r10
    24be:	02 2e       	mov	r0, r18
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <keyboard_task+0xa4>
    24c2:	88 0c       	add	r8, r8
    24c4:	99 1c       	adc	r9, r9
    24c6:	0a 94       	dec	r0
    24c8:	e2 f7       	brpl	.-8      	; 0x24c2 <keyboard_task+0xa0>
    24ca:	c4 01       	movw	r24, r8
    24cc:	8e 21       	and	r24, r14
    24ce:	9f 21       	and	r25, r15
    24d0:	89 2b       	or	r24, r25
    24d2:	09 f1       	breq	.+66     	; 0x2516 <keyboard_task+0xf4>
                    action_exec((keyevent_t){
    24d4:	2e 83       	std	Y+6, r18	; 0x06
    24d6:	5f 82       	std	Y+7, r5	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    24d8:	68 20       	and	r6, r8
    24da:	79 20       	and	r7, r9
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	67 28       	or	r6, r7
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <keyboard_task+0xc2>
    24e2:	80 e0       	ldi	r24, 0x00	; 0
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    24e4:	88 87       	std	Y+8, r24	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    24e6:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <timer_read>
    24ea:	81 60       	ori	r24, 0x01	; 1
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    24ec:	78 2f       	mov	r23, r24
    24ee:	9a 87       	std	Y+10, r25	; 0x0a
    24f0:	89 87       	std	Y+9, r24	; 0x09
    24f2:	4e 81       	ldd	r20, Y+6	; 0x06
    24f4:	5f 81       	ldd	r21, Y+7	; 0x07
    24f6:	68 85       	ldd	r22, Y+8	; 0x08
    24f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    24fa:	0e 94 ca 12 	call	0x2594	; 0x2594 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    24fe:	f8 01       	movw	r30, r16
    2500:	ee 0f       	add	r30, r30
    2502:	ff 1f       	adc	r31, r31
    2504:	ea 59       	subi	r30, 0x9A	; 154
    2506:	fe 4f       	sbci	r31, 0xFE	; 254
    2508:	80 81       	ld	r24, Z
    250a:	91 81       	ldd	r25, Z+1	; 0x01
    250c:	88 25       	eor	r24, r8
    250e:	99 25       	eor	r25, r9
    2510:	91 83       	std	Z+1, r25	; 0x01
    2512:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    2514:	06 c0       	rjmp	.+12     	; 0x2522 <keyboard_task+0x100>
    2516:	2f 5f       	subi	r18, 0xFF	; 255
    2518:	3f 4f       	sbci	r19, 0xFF	; 255
            if (has_ghost_in_row(r)) {
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    251a:	2e 30       	cpi	r18, 0x0E	; 14
    251c:	31 05       	cpc	r19, r1
    251e:	71 f6       	brne	.-100    	; 0x24bc <keyboard_task+0x9a>
    2520:	b0 cf       	rjmp	.-160    	; 0x2482 <keyboard_task+0x60>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2522:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <mousekey_task>
#ifdef SERIAL_MOUSE_ENABLE
        serial_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2526:	10 91 65 01 	lds	r17, 0x0165
    252a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <host_keyboard_leds>
    252e:	18 17       	cp	r17, r24
    2530:	d9 f0       	breq	.+54     	; 0x2568 <keyboard_task+0x146>
        led_status = host_keyboard_leds();
    2532:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <host_keyboard_leds>
    2536:	80 93 65 01 	sts	0x0165, r24
        keyboard_set_leds(led_status);
    }
}
    253a:	2a 96       	adiw	r28, 0x0a	; 10
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	df 91       	pop	r29
    2548:	cf 91       	pop	r28
    254a:	1f 91       	pop	r17
    254c:	0f 91       	pop	r16
    254e:	ff 90       	pop	r15
    2550:	ef 90       	pop	r14
    2552:	df 90       	pop	r13
    2554:	cf 90       	pop	r12
    2556:	bf 90       	pop	r11
    2558:	af 90       	pop	r10
    255a:	9f 90       	pop	r9
    255c:	8f 90       	pop	r8
    255e:	7f 90       	pop	r7
    2560:	6f 90       	pop	r6
    2562:	5f 90       	pop	r5
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    2564:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <keyboard_set_leds>
    }
}
    2568:	2a 96       	adiw	r28, 0x0a	; 10
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	df 91       	pop	r29
    2576:	cf 91       	pop	r28
    2578:	1f 91       	pop	r17
    257a:	0f 91       	pop	r16
    257c:	ff 90       	pop	r15
    257e:	ef 90       	pop	r14
    2580:	df 90       	pop	r13
    2582:	cf 90       	pop	r12
    2584:	bf 90       	pop	r11
    2586:	af 90       	pop	r10
    2588:	9f 90       	pop	r9
    258a:	8f 90       	pop	r8
    258c:	7f 90       	pop	r7
    258e:	6f 90       	pop	r6
    2590:	5f 90       	pop	r5
    2592:	08 95       	ret

00002594 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2594:	cf 93       	push	r28
    2596:	df 93       	push	r29
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	2b 97       	sbiw	r28, 0x0b	; 11
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	f8 94       	cli
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	4f 83       	std	Y+7, r20	; 0x07
    25aa:	58 87       	std	Y+8, r21	; 0x08
    25ac:	69 87       	std	Y+9, r22	; 0x09
    25ae:	7a 87       	std	Y+10, r23	; 0x0a
    25b0:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    25b2:	de 01       	movw	r26, r28
    25b4:	11 96       	adiw	r26, 0x01	; 1
    25b6:	86 e0       	ldi	r24, 0x06	; 6
    25b8:	fd 01       	movw	r30, r26
    25ba:	11 92       	st	Z+, r1
    25bc:	8a 95       	dec	r24
    25be:	e9 f7       	brne	.-6      	; 0x25ba <action_exec+0x26>
    25c0:	85 e0       	ldi	r24, 0x05	; 5
    25c2:	fe 01       	movw	r30, r28
    25c4:	37 96       	adiw	r30, 0x07	; 7
    25c6:	01 90       	ld	r0, Z+
    25c8:	0d 92       	st	X+, r0
    25ca:	8a 95       	dec	r24
    25cc:	e1 f7       	brne	.-8      	; 0x25c6 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    25ce:	49 81       	ldd	r20, Y+1	; 0x01
    25d0:	5a 81       	ldd	r21, Y+2	; 0x02
    25d2:	6b 81       	ldd	r22, Y+3	; 0x03
    25d4:	7c 81       	ldd	r23, Y+4	; 0x04
    25d6:	8d 81       	ldd	r24, Y+5	; 0x05
    25d8:	9e 81       	ldd	r25, Y+6	; 0x06
    25da:	0e 94 fd 19 	call	0x33fa	; 0x33fa <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    25de:	2b 96       	adiw	r28, 0x0b	; 11
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
    25ea:	df 91       	pop	r29
    25ec:	cf 91       	pop	r28
    25ee:	08 95       	ret

000025f0 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    25f0:	cf 93       	push	r28
    25f2:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    25f4:	88 23       	and	r24, r24
    25f6:	09 f4       	brne	.+2      	; 0x25fa <register_code+0xa>
    25f8:	c1 c0       	rjmp	.+386    	; 0x277c <register_code+0x18c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE    
    else if (KC_LOCKING_CAPS == code) {
    25fa:	82 38       	cpi	r24, 0x82	; 130
    25fc:	59 f4       	brne	.+22     	; 0x2614 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    25fe:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <host_keyboard_leds>
    2602:	81 fd       	sbrc	r24, 1
    2604:	bb c0       	rjmp	.+374    	; 0x277c <register_code+0x18c>
#endif
        add_key(KC_CAPSLOCK);
    2606:	89 e3       	ldi	r24, 0x39	; 57
    2608:	0e 94 98 1c 	call	0x3930	; 0x3930 <add_key>
        send_keyboard_report();
    260c:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2610:	89 e3       	ldi	r24, 0x39	; 57
    2612:	0c c0       	rjmp	.+24     	; 0x262c <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2614:	83 38       	cpi	r24, 0x83	; 131
    2616:	79 f4       	brne	.+30     	; 0x2636 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    2618:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <host_keyboard_leds>
    261c:	80 fd       	sbrc	r24, 0
    261e:	ae c0       	rjmp	.+348    	; 0x277c <register_code+0x18c>
#endif
        add_key(KC_NUMLOCK);
    2620:	83 e5       	ldi	r24, 0x53	; 83
    2622:	0e 94 98 1c 	call	0x3930	; 0x3930 <add_key>
        send_keyboard_report();
    2626:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    262a:	83 e5       	ldi	r24, 0x53	; 83
    262c:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2630:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    2632:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2636:	84 38       	cpi	r24, 0x84	; 132
    2638:	59 f4       	brne	.+22     	; 0x2650 <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    263a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <host_keyboard_leds>
    263e:	82 fd       	sbrc	r24, 2
    2640:	9d c0       	rjmp	.+314    	; 0x277c <register_code+0x18c>
#endif
        add_key(KC_SCROLLLOCK);
    2642:	87 e4       	ldi	r24, 0x47	; 71
    2644:	0e 94 98 1c 	call	0x3930	; 0x3930 <add_key>
        send_keyboard_report();
    2648:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    264c:	87 e4       	ldi	r24, 0x47	; 71
    264e:	ee cf       	rjmp	.-36     	; 0x262c <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2650:	8c ef       	ldi	r24, 0xFC	; 252
    2652:	8c 0f       	add	r24, r28
    2654:	81 3a       	cpi	r24, 0xA1	; 161
    2656:	48 f4       	brcc	.+18     	; 0x266a <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2658:	8c 2f       	mov	r24, r28
    265a:	0e 94 b0 29 	call	0x5360	; 0x5360 <command_proc>
    265e:	81 11       	cpse	r24, r1
    2660:	8d c0       	rjmp	.+282    	; 0x277c <register_code+0x18c>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2662:	8c 2f       	mov	r24, r28
    2664:	0e 94 98 1c 	call	0x3930	; 0x3930 <add_key>
    2668:	e3 cf       	rjmp	.-58     	; 0x2630 <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    266a:	80 e2       	ldi	r24, 0x20	; 32
    266c:	8c 0f       	add	r24, r28
    266e:	88 30       	cpi	r24, 0x08	; 8
    2670:	48 f4       	brcc	.+18     	; 0x2684 <register_code+0x94>
        add_mods(MOD_BIT(code));
    2672:	c7 70       	andi	r28, 0x07	; 7
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	01 c0       	rjmp	.+2      	; 0x267a <register_code+0x8a>
    2678:	88 0f       	add	r24, r24
    267a:	ca 95       	dec	r28
    267c:	ea f7       	brpl	.-6      	; 0x2678 <register_code+0x88>
    267e:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <add_mods>
    2682:	d6 cf       	rjmp	.-84     	; 0x2630 <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2684:	8b e5       	ldi	r24, 0x5B	; 91
    2686:	8c 0f       	add	r24, r28
    2688:	83 30       	cpi	r24, 0x03	; 3
    268a:	78 f4       	brcc	.+30     	; 0x26aa <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    268c:	c5 3a       	cpi	r28, 0xA5	; 165
    268e:	29 f0       	breq	.+10     	; 0x269a <register_code+0xaa>
    2690:	c6 3a       	cpi	r28, 0xA6	; 166
    2692:	31 f4       	brne	.+12     	; 0x26a0 <register_code+0xb0>
    2694:	82 e8       	ldi	r24, 0x82	; 130
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	05 c0       	rjmp	.+10     	; 0x26a4 <register_code+0xb4>
    269a:	81 e8       	ldi	r24, 0x81	; 129
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	02 c0       	rjmp	.+4      	; 0x26a4 <register_code+0xb4>
    26a0:	83 e8       	ldi	r24, 0x83	; 131
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    26a4:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    26a6:	0c 94 b7 11 	jmp	0x236e	; 0x236e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    26aa:	88 e5       	ldi	r24, 0x58	; 88
    26ac:	8c 0f       	add	r24, r28
    26ae:	83 31       	cpi	r24, 0x13	; 19
    26b0:	08 f0       	brcs	.+2      	; 0x26b4 <register_code+0xc4>
    26b2:	64 c0       	rjmp	.+200    	; 0x277c <register_code+0x18c>
        host_consumer_send(KEYCODE2CONSUMER(code));
    26b4:	c8 3a       	cpi	r28, 0xA8	; 168
    26b6:	39 f1       	breq	.+78     	; 0x2706 <register_code+0x116>
    26b8:	c9 3a       	cpi	r28, 0xA9	; 169
    26ba:	41 f1       	breq	.+80     	; 0x270c <register_code+0x11c>
    26bc:	ca 3a       	cpi	r28, 0xAA	; 170
    26be:	49 f1       	breq	.+82     	; 0x2712 <register_code+0x122>
    26c0:	cb 3a       	cpi	r28, 0xAB	; 171
    26c2:	51 f1       	breq	.+84     	; 0x2718 <register_code+0x128>
    26c4:	cc 3a       	cpi	r28, 0xAC	; 172
    26c6:	59 f1       	breq	.+86     	; 0x271e <register_code+0x12e>
    26c8:	cd 3a       	cpi	r28, 0xAD	; 173
    26ca:	61 f1       	breq	.+88     	; 0x2724 <register_code+0x134>
    26cc:	c0 3b       	cpi	r28, 0xB0	; 176
    26ce:	69 f1       	breq	.+90     	; 0x272a <register_code+0x13a>
    26d0:	ce 3a       	cpi	r28, 0xAE	; 174
    26d2:	71 f1       	breq	.+92     	; 0x2730 <register_code+0x140>
    26d4:	cf 3a       	cpi	r28, 0xAF	; 175
    26d6:	79 f1       	breq	.+94     	; 0x2736 <register_code+0x146>
    26d8:	c1 3b       	cpi	r28, 0xB1	; 177
    26da:	81 f1       	breq	.+96     	; 0x273c <register_code+0x14c>
    26dc:	c2 3b       	cpi	r28, 0xB2	; 178
    26de:	89 f1       	breq	.+98     	; 0x2742 <register_code+0x152>
    26e0:	c3 3b       	cpi	r28, 0xB3	; 179
    26e2:	91 f1       	breq	.+100    	; 0x2748 <register_code+0x158>
    26e4:	c4 3b       	cpi	r28, 0xB4	; 180
    26e6:	99 f1       	breq	.+102    	; 0x274e <register_code+0x15e>
    26e8:	c5 3b       	cpi	r28, 0xB5	; 181
    26ea:	a1 f1       	breq	.+104    	; 0x2754 <register_code+0x164>
    26ec:	c6 3b       	cpi	r28, 0xB6	; 182
    26ee:	a9 f1       	breq	.+106    	; 0x275a <register_code+0x16a>
    26f0:	c7 3b       	cpi	r28, 0xB7	; 183
    26f2:	b1 f1       	breq	.+108    	; 0x2760 <register_code+0x170>
    26f4:	c8 3b       	cpi	r28, 0xB8	; 184
    26f6:	b9 f1       	breq	.+110    	; 0x2766 <register_code+0x176>
    26f8:	c9 3b       	cpi	r28, 0xB9	; 185
    26fa:	c1 f1       	breq	.+112    	; 0x276c <register_code+0x17c>
    26fc:	ca 3b       	cpi	r28, 0xBA	; 186
    26fe:	c9 f5       	brne	.+114    	; 0x2772 <register_code+0x182>
    2700:	8a e2       	ldi	r24, 0x2A	; 42
    2702:	92 e0       	ldi	r25, 0x02	; 2
    2704:	38 c0       	rjmp	.+112    	; 0x2776 <register_code+0x186>
    2706:	82 ee       	ldi	r24, 0xE2	; 226
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	35 c0       	rjmp	.+106    	; 0x2776 <register_code+0x186>
    270c:	89 ee       	ldi	r24, 0xE9	; 233
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	32 c0       	rjmp	.+100    	; 0x2776 <register_code+0x186>
    2712:	8a ee       	ldi	r24, 0xEA	; 234
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	2f c0       	rjmp	.+94     	; 0x2776 <register_code+0x186>
    2718:	85 eb       	ldi	r24, 0xB5	; 181
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	2c c0       	rjmp	.+88     	; 0x2776 <register_code+0x186>
    271e:	86 eb       	ldi	r24, 0xB6	; 182
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	29 c0       	rjmp	.+82     	; 0x2776 <register_code+0x186>
    2724:	87 eb       	ldi	r24, 0xB7	; 183
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	26 c0       	rjmp	.+76     	; 0x2776 <register_code+0x186>
    272a:	8c ec       	ldi	r24, 0xCC	; 204
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	23 c0       	rjmp	.+70     	; 0x2776 <register_code+0x186>
    2730:	8d ec       	ldi	r24, 0xCD	; 205
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	20 c0       	rjmp	.+64     	; 0x2776 <register_code+0x186>
    2736:	83 e8       	ldi	r24, 0x83	; 131
    2738:	91 e0       	ldi	r25, 0x01	; 1
    273a:	1d c0       	rjmp	.+58     	; 0x2776 <register_code+0x186>
    273c:	8a e8       	ldi	r24, 0x8A	; 138
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	1a c0       	rjmp	.+52     	; 0x2776 <register_code+0x186>
    2742:	82 e9       	ldi	r24, 0x92	; 146
    2744:	91 e0       	ldi	r25, 0x01	; 1
    2746:	17 c0       	rjmp	.+46     	; 0x2776 <register_code+0x186>
    2748:	84 e9       	ldi	r24, 0x94	; 148
    274a:	91 e0       	ldi	r25, 0x01	; 1
    274c:	14 c0       	rjmp	.+40     	; 0x2776 <register_code+0x186>
    274e:	81 e2       	ldi	r24, 0x21	; 33
    2750:	92 e0       	ldi	r25, 0x02	; 2
    2752:	11 c0       	rjmp	.+34     	; 0x2776 <register_code+0x186>
    2754:	83 e2       	ldi	r24, 0x23	; 35
    2756:	92 e0       	ldi	r25, 0x02	; 2
    2758:	0e c0       	rjmp	.+28     	; 0x2776 <register_code+0x186>
    275a:	84 e2       	ldi	r24, 0x24	; 36
    275c:	92 e0       	ldi	r25, 0x02	; 2
    275e:	0b c0       	rjmp	.+22     	; 0x2776 <register_code+0x186>
    2760:	85 e2       	ldi	r24, 0x25	; 37
    2762:	92 e0       	ldi	r25, 0x02	; 2
    2764:	08 c0       	rjmp	.+16     	; 0x2776 <register_code+0x186>
    2766:	86 e2       	ldi	r24, 0x26	; 38
    2768:	92 e0       	ldi	r25, 0x02	; 2
    276a:	05 c0       	rjmp	.+10     	; 0x2776 <register_code+0x186>
    276c:	87 e2       	ldi	r24, 0x27	; 39
    276e:	92 e0       	ldi	r25, 0x02	; 2
    2770:	02 c0       	rjmp	.+4      	; 0x2776 <register_code+0x186>
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    2776:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2778:	0c 94 cd 11 	jmp	0x239a	; 0x239a <host_consumer_send>
    }
}
    277c:	cf 91       	pop	r28
    277e:	08 95       	ret

00002780 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2780:	88 23       	and	r24, r24
    2782:	09 f4       	brne	.+2      	; 0x2786 <unregister_code+0x6>
    2784:	4b c0       	rjmp	.+150    	; 0x281c <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2786:	82 38       	cpi	r24, 0x82	; 130
    2788:	59 f4       	brne	.+22     	; 0x27a0 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    278a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <host_keyboard_leds>
    278e:	81 ff       	sbrs	r24, 1
    2790:	45 c0       	rjmp	.+138    	; 0x281c <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    2792:	89 e3       	ldi	r24, 0x39	; 57
    2794:	0e 94 98 1c 	call	0x3930	; 0x3930 <add_key>
        send_keyboard_report();
    2798:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    279c:	89 e3       	ldi	r24, 0x39	; 57
    279e:	0c c0       	rjmp	.+24     	; 0x27b8 <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    27a0:	83 38       	cpi	r24, 0x83	; 131
    27a2:	71 f4       	brne	.+28     	; 0x27c0 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    27a4:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <host_keyboard_leds>
    27a8:	80 ff       	sbrs	r24, 0
    27aa:	38 c0       	rjmp	.+112    	; 0x281c <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    27ac:	83 e5       	ldi	r24, 0x53	; 83
    27ae:	0e 94 98 1c 	call	0x3930	; 0x3930 <add_key>
        send_keyboard_report();
    27b2:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    27b6:	83 e5       	ldi	r24, 0x53	; 83
    27b8:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <del_key>
        send_keyboard_report();
    27bc:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    27c0:	84 38       	cpi	r24, 0x84	; 132
    27c2:	59 f4       	brne	.+22     	; 0x27da <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    27c4:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <host_keyboard_leds>
    27c8:	82 ff       	sbrs	r24, 2
    27ca:	28 c0       	rjmp	.+80     	; 0x281c <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    27cc:	87 e4       	ldi	r24, 0x47	; 71
    27ce:	0e 94 98 1c 	call	0x3930	; 0x3930 <add_key>
        send_keyboard_report();
    27d2:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    27d6:	87 e4       	ldi	r24, 0x47	; 71
    27d8:	ef cf       	rjmp	.-34     	; 0x27b8 <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    27da:	9c ef       	ldi	r25, 0xFC	; 252
    27dc:	98 0f       	add	r25, r24
    27de:	91 3a       	cpi	r25, 0xA1	; 161
    27e0:	58 f3       	brcs	.-42     	; 0x27b8 <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    27e2:	90 e2       	ldi	r25, 0x20	; 32
    27e4:	98 0f       	add	r25, r24
    27e6:	98 30       	cpi	r25, 0x08	; 8
    27e8:	50 f4       	brcc	.+20     	; 0x27fe <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    27ea:	87 70       	andi	r24, 0x07	; 7
    27ec:	91 e0       	ldi	r25, 0x01	; 1
    27ee:	01 c0       	rjmp	.+2      	; 0x27f2 <unregister_code+0x72>
    27f0:	99 0f       	add	r25, r25
    27f2:	8a 95       	dec	r24
    27f4:	ea f7       	brpl	.-6      	; 0x27f0 <unregister_code+0x70>
    27f6:	89 2f       	mov	r24, r25
    27f8:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <del_mods>
    27fc:	df cf       	rjmp	.-66     	; 0x27bc <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    27fe:	9b e5       	ldi	r25, 0x5B	; 91
    2800:	98 0f       	add	r25, r24
    2802:	93 30       	cpi	r25, 0x03	; 3
    2804:	20 f4       	brcc	.+8      	; 0x280e <unregister_code+0x8e>
        host_system_send(0);
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	0c 94 b7 11 	jmp	0x236e	; 0x236e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    280e:	88 5a       	subi	r24, 0xA8	; 168
    2810:	83 31       	cpi	r24, 0x13	; 19
    2812:	20 f4       	brcc	.+8      	; 0x281c <unregister_code+0x9c>
        host_consumer_send(0);
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	0c 94 cd 11 	jmp	0x239a	; 0x239a <host_consumer_send>
    281c:	08 95       	ret

0000281e <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    281e:	88 23       	and	r24, r24
    2820:	21 f0       	breq	.+8      	; 0x282a <register_mods+0xc>
        add_mods(mods);
    2822:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <add_mods>
        send_keyboard_report();
    2826:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <send_keyboard_report>
    282a:	08 95       	ret

0000282c <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    282c:	88 23       	and	r24, r24
    282e:	21 f0       	breq	.+8      	; 0x2838 <unregister_mods+0xc>
        del_mods(mods);
    2830:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <del_mods>
        send_keyboard_report();
    2834:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <send_keyboard_report>
    2838:	08 95       	ret

0000283a <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    283a:	cf 92       	push	r12
    283c:	df 92       	push	r13
    283e:	ef 92       	push	r14
    2840:	ff 92       	push	r15
    2842:	0f 93       	push	r16
    2844:	1f 93       	push	r17
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	28 97       	sbiw	r28, 0x08	; 8
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	f8 94       	cli
    2854:	de bf       	out	0x3e, r29	; 62
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	cd bf       	out	0x3d, r28	; 61
    285a:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    285c:	85 e0       	ldi	r24, 0x05	; 5
    285e:	f8 01       	movw	r30, r16
    2860:	de 01       	movw	r26, r28
    2862:	11 96       	adiw	r26, 0x01	; 1
    2864:	01 90       	ld	r0, Z+
    2866:	0d 92       	st	X+, r0
    2868:	8a 95       	dec	r24
    286a:	e1 f7       	brne	.-8      	; 0x2864 <process_action+0x2a>
    286c:	f8 01       	movw	r30, r16
    286e:	40 81       	ld	r20, Z
    2870:	31 81       	ldd	r19, Z+1	; 0x01
    2872:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2874:	25 81       	ldd	r18, Z+5	; 0x05
    2876:	22 95       	swap	r18
    2878:	2f 70       	andi	r18, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    287a:	83 81       	ldd	r24, Z+3	; 0x03
    287c:	94 81       	ldd	r25, Z+4	; 0x04
    287e:	89 2b       	or	r24, r25
    2880:	31 f0       	breq	.+12     	; 0x288e <process_action+0x54>
    2882:	3f 3f       	cpi	r19, 0xFF	; 255
    2884:	31 f4       	brne	.+12     	; 0x2892 <process_action+0x58>
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	4f 3f       	cpi	r20, 0xFF	; 255
    288a:	19 f4       	brne	.+6      	; 0x2892 <process_action+0x58>
    288c:	03 c0       	rjmp	.+6      	; 0x2894 <process_action+0x5a>
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	01 c0       	rjmp	.+2      	; 0x2894 <process_action+0x5a>
    2892:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    2894:	80 fd       	sbrc	r24, 0
    2896:	c8 c2       	rjmp	.+1424   	; 0x2e28 <process_action+0x5ee>

    action_t action = layer_switch_get_action(event.key);
    2898:	49 83       	std	Y+1, r20	; 0x01
    289a:	3a 83       	std	Y+2, r19	; 0x02
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	2f 83       	std	Y+7, r18	; 0x07
    28a2:	0e 94 56 1c 	call	0x38ac	; 0x38ac <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    28a6:	9e 83       	std	Y+6, r25	; 0x06
    28a8:	88 87       	std	Y+8, r24	; 0x08
    28aa:	0e 94 55 1c 	call	0x38aa	; 0x38aa <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    28ae:	0e 94 28 1b 	call	0x3650	; 0x3650 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    28b2:	4e 81       	ldd	r20, Y+6	; 0x06
    28b4:	e4 2f       	mov	r30, r20
    28b6:	e2 95       	swap	r30
    28b8:	ef 70       	andi	r30, 0x0F	; 15
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	e0 5a       	subi	r30, 0xA0	; 160
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	2f 81       	ldd	r18, Y+7	; 0x07
    28c2:	68 85       	ldd	r22, Y+8	; 0x08
    28c4:	0c 94 56 2c 	jmp	0x58ac	; 0x58ac <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    28c8:	84 2f       	mov	r24, r20
    28ca:	80 7f       	andi	r24, 0xF0	; 240
    28cc:	14 2f       	mov	r17, r20
    28ce:	1f 70       	andi	r17, 0x0F	; 15
    28d0:	88 23       	and	r24, r24
    28d2:	11 f0       	breq	.+4      	; 0x28d8 <process_action+0x9e>
    28d4:	12 95       	swap	r17
    28d6:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    28d8:	ff 20       	and	r15, r15
    28da:	59 f0       	breq	.+22     	; 0x28f2 <process_action+0xb8>
                    if (mods) {
    28dc:	11 23       	and	r17, r17
    28de:	09 f4       	brne	.+2      	; 0x28e2 <process_action+0xa8>
    28e0:	58 c2       	rjmp	.+1200   	; 0x2d92 <process_action+0x558>
                        add_weak_mods(mods);
    28e2:	81 2f       	mov	r24, r17
    28e4:	68 87       	std	Y+8, r22	; 0x08
    28e6:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <add_weak_mods>
                        send_keyboard_report();
    28ea:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <send_keyboard_report>
    28ee:	68 85       	ldd	r22, Y+8	; 0x08
    28f0:	50 c2       	rjmp	.+1184   	; 0x2d92 <process_action+0x558>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    28f2:	86 2f       	mov	r24, r22
    28f4:	0e 94 c0 13 	call	0x2780	; 0x2780 <unregister_code>
                    if (mods) {
    28f8:	11 23       	and	r17, r17
    28fa:	09 f4       	brne	.+2      	; 0x28fe <process_action+0xc4>
    28fc:	95 c2       	rjmp	.+1322   	; 0x2e28 <process_action+0x5ee>
                        del_weak_mods(mods);
    28fe:	81 2f       	mov	r24, r17
    2900:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2904:	28 96       	adiw	r28, 0x08	; 8
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	f8 94       	cli
    290a:	de bf       	out	0x3e, r29	; 62
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	cd bf       	out	0x3d, r28	; 61
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	1f 91       	pop	r17
    2916:	0f 91       	pop	r16
    2918:	ff 90       	pop	r15
    291a:	ef 90       	pop	r14
    291c:	df 90       	pop	r13
    291e:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2920:	0c 94 6c 1d 	jmp	0x3ad8	; 0x3ad8 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2924:	34 2f       	mov	r19, r20
    2926:	30 7f       	andi	r19, 0xF0	; 240
    2928:	84 2f       	mov	r24, r20
    292a:	8f 70       	andi	r24, 0x0F	; 15
    292c:	30 32       	cpi	r19, 0x20	; 32
    292e:	11 f0       	breq	.+4      	; 0x2934 <process_action+0xfa>
    2930:	82 95       	swap	r24
    2932:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    2934:	66 23       	and	r22, r22
    2936:	19 f0       	breq	.+6      	; 0x293e <process_action+0x104>
    2938:	61 30       	cpi	r22, 0x01	; 1
    293a:	09 f1       	breq	.+66     	; 0x297e <process_action+0x144>
    293c:	2a c0       	rjmp	.+84     	; 0x2992 <process_action+0x158>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    293e:	ff 20       	and	r15, r15
    2940:	a1 f0       	breq	.+40     	; 0x296a <process_action+0x130>
                            if (tap_count == 0) {
    2942:	22 23       	and	r18, r18
    2944:	81 f1       	breq	.+96     	; 0x29a6 <process_action+0x16c>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2946:	21 30       	cpi	r18, 0x01	; 1
    2948:	71 f5       	brne	.+92     	; 0x29a6 <process_action+0x16c>
            break;
#endif
        default:
            break;
    }
}
    294a:	28 96       	adiw	r28, 0x08	; 8
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	de bf       	out	0x3e, r29	; 62
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	cd bf       	out	0x3d, r28	; 61
    2956:	df 91       	pop	r29
    2958:	cf 91       	pop	r28
    295a:	1f 91       	pop	r17
    295c:	0f 91       	pop	r16
    295e:	ff 90       	pop	r15
    2960:	ef 90       	pop	r14
    2962:	df 90       	pop	r13
    2964:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2966:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    296a:	22 23       	and	r18, r18
    296c:	19 f0       	breq	.+6      	; 0x2974 <process_action+0x13a>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    296e:	21 30       	cpi	r18, 0x01	; 1
    2970:	09 f4       	brne	.+2      	; 0x2974 <process_action+0x13a>
    2972:	5a c2       	rjmp	.+1204   	; 0x2e28 <process_action+0x5ee>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2974:	8e 83       	std	Y+6, r24	; 0x06
    2976:	0e 94 56 1d 	call	0x3aac	; 0x3aac <clear_oneshot_mods>
                                unregister_mods(mods);
    297a:	8e 81       	ldd	r24, Y+6	; 0x06
    297c:	8e c1       	rjmp	.+796    	; 0x2c9a <process_action+0x460>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    297e:	ff 20       	and	r15, r15
    2980:	21 f0       	breq	.+8      	; 0x298a <process_action+0x150>
                            if (tap_count <= TAPPING_TOGGLE) {
    2982:	26 30       	cpi	r18, 0x06	; 6
    2984:	08 f0       	brcs	.+2      	; 0x2988 <process_action+0x14e>
    2986:	50 c2       	rjmp	.+1184   	; 0x2e28 <process_action+0x5ee>
    2988:	0e c0       	rjmp	.+28     	; 0x29a6 <process_action+0x16c>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    298a:	25 30       	cpi	r18, 0x05	; 5
    298c:	08 f0       	brcs	.+2      	; 0x2990 <process_action+0x156>
    298e:	4c c2       	rjmp	.+1176   	; 0x2e28 <process_action+0x5ee>
    2990:	84 c1       	rjmp	.+776    	; 0x2c9a <process_action+0x460>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2992:	ff 20       	and	r15, r15
    2994:	c1 f0       	breq	.+48     	; 0x29c6 <process_action+0x18c>
                            if (tap_count > 0) {
    2996:	22 23       	and	r18, r18
    2998:	31 f0       	breq	.+12     	; 0x29a6 <process_action+0x16c>
                                if (record->tap.interrupted) {
    299a:	f8 01       	movw	r30, r16
    299c:	95 81       	ldd	r25, Z+5	; 0x05
    299e:	90 ff       	sbrs	r25, 0
    29a0:	f8 c1       	rjmp	.+1008   	; 0x2d92 <process_action+0x558>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    29a2:	9f 70       	andi	r25, 0x0F	; 15
    29a4:	95 83       	std	Z+5, r25	; 0x05
            break;
#endif
        default:
            break;
    }
}
    29a6:	28 96       	adiw	r28, 0x08	; 8
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	de bf       	out	0x3e, r29	; 62
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	cd bf       	out	0x3d, r28	; 61
    29b2:	df 91       	pop	r29
    29b4:	cf 91       	pop	r28
    29b6:	1f 91       	pop	r17
    29b8:	0f 91       	pop	r16
    29ba:	ff 90       	pop	r15
    29bc:	ef 90       	pop	r14
    29be:	df 90       	pop	r13
    29c0:	cf 90       	pop	r12
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
                                    register_mods(mods);
    29c2:	0c 94 0f 14 	jmp	0x281e	; 0x281e <register_mods>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    29c6:	22 23       	and	r18, r18
    29c8:	09 f4       	brne	.+2      	; 0x29cc <process_action+0x192>
    29ca:	67 c1       	rjmp	.+718    	; 0x2c9a <process_action+0x460>
    29cc:	f6 c1       	rjmp	.+1004   	; 0x2dba <process_action+0x580>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    29ce:	24 2f       	mov	r18, r20
    29d0:	26 95       	lsr	r18
    29d2:	26 95       	lsr	r18
    29d4:	23 70       	andi	r18, 0x03	; 3
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	21 15       	cp	r18, r1
    29da:	31 05       	cpc	r19, r1
    29dc:	21 f0       	breq	.+8      	; 0x29e6 <process_action+0x1ac>
    29de:	21 30       	cpi	r18, 0x01	; 1
    29e0:	31 05       	cpc	r19, r1
    29e2:	c9 f0       	breq	.+50     	; 0x2a16 <process_action+0x1dc>
    29e4:	21 c2       	rjmp	.+1090   	; 0x2e28 <process_action+0x5ee>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    29e6:	ff 20       	and	r15, r15
    29e8:	21 f0       	breq	.+8      	; 0x29f2 <process_action+0x1b8>
                        host_system_send(action.usage.code);
    29ea:	86 2f       	mov	r24, r22
    29ec:	94 2f       	mov	r25, r20
    29ee:	93 70       	andi	r25, 0x03	; 3
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <process_action+0x1bc>
                    } else {
                        host_system_send(0);
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    29f6:	28 96       	adiw	r28, 0x08	; 8
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	df 91       	pop	r29
    2a04:	cf 91       	pop	r28
    2a06:	1f 91       	pop	r17
    2a08:	0f 91       	pop	r16
    2a0a:	ff 90       	pop	r15
    2a0c:	ef 90       	pop	r14
    2a0e:	df 90       	pop	r13
    2a10:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2a12:	0c 94 b7 11 	jmp	0x236e	; 0x236e <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2a16:	ff 20       	and	r15, r15
    2a18:	21 f0       	breq	.+8      	; 0x2a22 <process_action+0x1e8>
                        host_consumer_send(action.usage.code);
    2a1a:	86 2f       	mov	r24, r22
    2a1c:	94 2f       	mov	r25, r20
    2a1e:	93 70       	andi	r25, 0x03	; 3
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <process_action+0x1ec>
                    } else {
                        host_consumer_send(0);
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2a26:	28 96       	adiw	r28, 0x08	; 8
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	1f 91       	pop	r17
    2a38:	0f 91       	pop	r16
    2a3a:	ff 90       	pop	r15
    2a3c:	ef 90       	pop	r14
    2a3e:	df 90       	pop	r13
    2a40:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    2a42:	0c 94 cd 11 	jmp	0x239a	; 0x239a <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2a46:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2a48:	ff 20       	and	r15, r15
    2a4a:	19 f0       	breq	.+6      	; 0x2a52 <process_action+0x218>
                mousekey_on(action.key.code);
    2a4c:	0e 94 56 22 	call	0x44ac	; 0x44ac <mousekey_on>
    2a50:	02 c0       	rjmp	.+4      	; 0x2a56 <process_action+0x21c>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2a52:	0e 94 be 22 	call	0x457c	; 0x457c <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    2a56:	28 96       	adiw	r28, 0x08	; 8
    2a58:	0f b6       	in	r0, 0x3f	; 63
    2a5a:	f8 94       	cli
    2a5c:	de bf       	out	0x3e, r29	; 62
    2a5e:	0f be       	out	0x3f, r0	; 63
    2a60:	cd bf       	out	0x3d, r28	; 61
    2a62:	df 91       	pop	r29
    2a64:	cf 91       	pop	r28
    2a66:	1f 91       	pop	r17
    2a68:	0f 91       	pop	r16
    2a6a:	ff 90       	pop	r15
    2a6c:	ef 90       	pop	r14
    2a6e:	df 90       	pop	r13
    2a70:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    2a72:	0c 94 43 23 	jmp	0x4686	; 0x4686 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2a76:	84 2f       	mov	r24, r20
    2a78:	83 70       	andi	r24, 0x03	; 3
    2a7a:	09 f0       	breq	.+2      	; 0x2a7e <process_action+0x244>
    2a7c:	76 c0       	rjmp	.+236    	; 0x2b6a <process_action+0x330>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2a7e:	f1 10       	cpse	r15, r1
    2a80:	d3 c1       	rjmp	.+934    	; 0x2e28 <process_action+0x5ee>
                    uint8_t shift = action.layer_bitop.part*4;
    2a82:	26 2f       	mov	r18, r22
    2a84:	22 95       	swap	r18
    2a86:	26 95       	lsr	r18
    2a88:	27 70       	andi	r18, 0x07	; 7
    2a8a:	22 0f       	add	r18, r18
    2a8c:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2a8e:	86 2f       	mov	r24, r22
    2a90:	8f 70       	andi	r24, 0x0F	; 15
    2a92:	c8 2e       	mov	r12, r24
    2a94:	d1 2c       	mov	r13, r1
    2a96:	e1 2c       	mov	r14, r1
    2a98:	f1 2c       	mov	r15, r1
    2a9a:	02 2e       	mov	r0, r18
    2a9c:	04 c0       	rjmp	.+8      	; 0x2aa6 <process_action+0x26c>
    2a9e:	cc 0c       	add	r12, r12
    2aa0:	dd 1c       	adc	r13, r13
    2aa2:	ee 1c       	adc	r14, r14
    2aa4:	ff 1c       	adc	r15, r15
    2aa6:	0a 94       	dec	r0
    2aa8:	d2 f7       	brpl	.-12     	; 0x2a9e <process_action+0x264>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2aaa:	64 ff       	sbrs	r22, 4
    2aac:	10 c0       	rjmp	.+32     	; 0x2ace <process_action+0x294>
    2aae:	6f e0       	ldi	r22, 0x0F	; 15
    2ab0:	70 e0       	ldi	r23, 0x00	; 0
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	04 c0       	rjmp	.+8      	; 0x2ac0 <process_action+0x286>
    2ab8:	66 0f       	add	r22, r22
    2aba:	77 1f       	adc	r23, r23
    2abc:	88 1f       	adc	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	2a 95       	dec	r18
    2ac2:	d2 f7       	brpl	.-12     	; 0x2ab8 <process_action+0x27e>
    2ac4:	60 95       	com	r22
    2ac6:	70 95       	com	r23
    2ac8:	80 95       	com	r24
    2aca:	90 95       	com	r25
    2acc:	03 c0       	rjmp	.+6      	; 0x2ad4 <process_action+0x29a>
    2ace:	60 e0       	ldi	r22, 0x00	; 0
    2ad0:	70 e0       	ldi	r23, 0x00	; 0
    2ad2:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2ad4:	24 2f       	mov	r18, r20
    2ad6:	26 95       	lsr	r18
    2ad8:	26 95       	lsr	r18
    2ada:	23 70       	andi	r18, 0x03	; 3
    2adc:	42 2f       	mov	r20, r18
    2ade:	50 e0       	ldi	r21, 0x00	; 0
    2ae0:	42 30       	cpi	r20, 0x02	; 2
    2ae2:	51 05       	cpc	r21, r1
    2ae4:	d1 f0       	breq	.+52     	; 0x2b1a <process_action+0x2e0>
    2ae6:	43 30       	cpi	r20, 0x03	; 3
    2ae8:	51 05       	cpc	r21, r1
    2aea:	59 f1       	breq	.+86     	; 0x2b42 <process_action+0x308>
    2aec:	6c 29       	or	r22, r12
    2aee:	7d 29       	or	r23, r13
    2af0:	8e 29       	or	r24, r14
    2af2:	9f 29       	or	r25, r15
    2af4:	41 30       	cpi	r20, 0x01	; 1
    2af6:	51 05       	cpc	r21, r1
    2af8:	41 f1       	breq	.+80     	; 0x2b4a <process_action+0x310>
            break;
#endif
        default:
            break;
    }
}
    2afa:	28 96       	adiw	r28, 0x08	; 8
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	df 91       	pop	r29
    2b08:	cf 91       	pop	r28
    2b0a:	1f 91       	pop	r17
    2b0c:	0f 91       	pop	r16
    2b0e:	ff 90       	pop	r15
    2b10:	ef 90       	pop	r14
    2b12:	df 90       	pop	r13
    2b14:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2b16:	0c 94 4d 1b 	jmp	0x369a	; 0x369a <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2b1a:	6c 29       	or	r22, r12
    2b1c:	7d 29       	or	r23, r13
    2b1e:	8e 29       	or	r24, r14
    2b20:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2b22:	28 96       	adiw	r28, 0x08	; 8
    2b24:	0f b6       	in	r0, 0x3f	; 63
    2b26:	f8 94       	cli
    2b28:	de bf       	out	0x3e, r29	; 62
    2b2a:	0f be       	out	0x3f, r0	; 63
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	1f 91       	pop	r17
    2b34:	0f 91       	pop	r16
    2b36:	ff 90       	pop	r15
    2b38:	ef 90       	pop	r14
    2b3a:	df 90       	pop	r13
    2b3c:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2b3e:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2b42:	0e 94 4d 1b 	call	0x369a	; 0x369a <default_layer_and>
    2b46:	c7 01       	movw	r24, r14
    2b48:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2b4a:	28 96       	adiw	r28, 0x08	; 8
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	df 91       	pop	r29
    2b58:	cf 91       	pop	r28
    2b5a:	1f 91       	pop	r17
    2b5c:	0f 91       	pop	r16
    2b5e:	ff 90       	pop	r15
    2b60:	ef 90       	pop	r14
    2b62:	df 90       	pop	r13
    2b64:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2b66:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2b6a:	ff 20       	and	r15, r15
    2b6c:	19 f0       	breq	.+6      	; 0x2b74 <process_action+0x33a>
    2b6e:	84 2f       	mov	r24, r20
    2b70:	81 70       	andi	r24, 0x01	; 1
    2b72:	01 c0       	rjmp	.+2      	; 0x2b76 <process_action+0x33c>
    2b74:	86 95       	lsr	r24
    2b76:	88 23       	and	r24, r24
    2b78:	09 f4       	brne	.+2      	; 0x2b7c <process_action+0x342>
    2b7a:	56 c1       	rjmp	.+684    	; 0x2e28 <process_action+0x5ee>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2b7c:	26 2f       	mov	r18, r22
    2b7e:	22 95       	swap	r18
    2b80:	26 95       	lsr	r18
    2b82:	27 70       	andi	r18, 0x07	; 7
    2b84:	22 0f       	add	r18, r18
    2b86:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2b88:	86 2f       	mov	r24, r22
    2b8a:	8f 70       	andi	r24, 0x0F	; 15
    2b8c:	c8 2e       	mov	r12, r24
    2b8e:	d1 2c       	mov	r13, r1
    2b90:	e1 2c       	mov	r14, r1
    2b92:	f1 2c       	mov	r15, r1
    2b94:	02 2e       	mov	r0, r18
    2b96:	04 c0       	rjmp	.+8      	; 0x2ba0 <process_action+0x366>
    2b98:	cc 0c       	add	r12, r12
    2b9a:	dd 1c       	adc	r13, r13
    2b9c:	ee 1c       	adc	r14, r14
    2b9e:	ff 1c       	adc	r15, r15
    2ba0:	0a 94       	dec	r0
    2ba2:	d2 f7       	brpl	.-12     	; 0x2b98 <process_action+0x35e>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2ba4:	64 ff       	sbrs	r22, 4
    2ba6:	10 c0       	rjmp	.+32     	; 0x2bc8 <process_action+0x38e>
    2ba8:	6f e0       	ldi	r22, 0x0F	; 15
    2baa:	70 e0       	ldi	r23, 0x00	; 0
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	04 c0       	rjmp	.+8      	; 0x2bba <process_action+0x380>
    2bb2:	66 0f       	add	r22, r22
    2bb4:	77 1f       	adc	r23, r23
    2bb6:	88 1f       	adc	r24, r24
    2bb8:	99 1f       	adc	r25, r25
    2bba:	2a 95       	dec	r18
    2bbc:	d2 f7       	brpl	.-12     	; 0x2bb2 <process_action+0x378>
    2bbe:	60 95       	com	r22
    2bc0:	70 95       	com	r23
    2bc2:	80 95       	com	r24
    2bc4:	90 95       	com	r25
    2bc6:	03 c0       	rjmp	.+6      	; 0x2bce <process_action+0x394>
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	70 e0       	ldi	r23, 0x00	; 0
    2bcc:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2bce:	24 2f       	mov	r18, r20
    2bd0:	26 95       	lsr	r18
    2bd2:	26 95       	lsr	r18
    2bd4:	23 70       	andi	r18, 0x03	; 3
    2bd6:	42 2f       	mov	r20, r18
    2bd8:	50 e0       	ldi	r21, 0x00	; 0
    2bda:	42 30       	cpi	r20, 0x02	; 2
    2bdc:	51 05       	cpc	r21, r1
    2bde:	d1 f0       	breq	.+52     	; 0x2c14 <process_action+0x3da>
    2be0:	43 30       	cpi	r20, 0x03	; 3
    2be2:	51 05       	cpc	r21, r1
    2be4:	59 f1       	breq	.+86     	; 0x2c3c <process_action+0x402>
    2be6:	6c 29       	or	r22, r12
    2be8:	7d 29       	or	r23, r13
    2bea:	8e 29       	or	r24, r14
    2bec:	9f 29       	or	r25, r15
    2bee:	41 30       	cpi	r20, 0x01	; 1
    2bf0:	51 05       	cpc	r21, r1
    2bf2:	41 f1       	breq	.+80     	; 0x2c44 <process_action+0x40a>
            break;
#endif
        default:
            break;
    }
}
    2bf4:	28 96       	adiw	r28, 0x08	; 8
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	df 91       	pop	r29
    2c02:	cf 91       	pop	r28
    2c04:	1f 91       	pop	r17
    2c06:	0f 91       	pop	r16
    2c08:	ff 90       	pop	r15
    2c0a:	ef 90       	pop	r14
    2c0c:	df 90       	pop	r13
    2c0e:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2c10:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2c14:	6c 29       	or	r22, r12
    2c16:	7d 29       	or	r23, r13
    2c18:	8e 29       	or	r24, r14
    2c1a:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2c1c:	28 96       	adiw	r28, 0x08	; 8
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	f8 94       	cli
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	1f 91       	pop	r17
    2c2e:	0f 91       	pop	r16
    2c30:	ff 90       	pop	r15
    2c32:	ef 90       	pop	r14
    2c34:	df 90       	pop	r13
    2c36:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2c38:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2c3c:	0e 94 21 1c 	call	0x3842	; 0x3842 <layer_and>
    2c40:	c7 01       	movw	r24, r14
    2c42:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2c44:	28 96       	adiw	r28, 0x08	; 8
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	1f 91       	pop	r17
    2c56:	0f 91       	pop	r16
    2c58:	ff 90       	pop	r15
    2c5a:	ef 90       	pop	r14
    2c5c:	df 90       	pop	r13
    2c5e:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2c60:	0c 94 07 1c 	jmp	0x380e	; 0x380e <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2c64:	60 3f       	cpi	r22, 0xF0	; 240
    2c66:	49 f1       	breq	.+82     	; 0x2cba <process_action+0x480>
    2c68:	18 f4       	brcc	.+6      	; 0x2c70 <process_action+0x436>
    2c6a:	60 3e       	cpi	r22, 0xE0	; 224
    2c6c:	48 f4       	brcc	.+18     	; 0x2c80 <process_action+0x446>
    2c6e:	8c c0       	rjmp	.+280    	; 0x2d88 <process_action+0x54e>
    2c70:	62 3f       	cpi	r22, 0xF2	; 242
    2c72:	09 f4       	brne	.+2      	; 0x2c76 <process_action+0x43c>
    2c74:	51 c0       	rjmp	.+162    	; 0x2d18 <process_action+0x4de>
    2c76:	e0 f1       	brcs	.+120    	; 0x2cf0 <process_action+0x4b6>
    2c78:	63 3f       	cpi	r22, 0xF3	; 243
    2c7a:	09 f4       	brne	.+2      	; 0x2c7e <process_action+0x444>
    2c7c:	61 c0       	rjmp	.+194    	; 0x2d40 <process_action+0x506>
    2c7e:	84 c0       	rjmp	.+264    	; 0x2d88 <process_action+0x54e>
    2c80:	16 2f       	mov	r17, r22
    2c82:	1f 70       	andi	r17, 0x0F	; 15
    2c84:	84 2f       	mov	r24, r20
    2c86:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2c88:	ff 20       	and	r15, r15
    2c8a:	21 f0       	breq	.+8      	; 0x2c94 <process_action+0x45a>
                        layer_on(action.layer_tap.val);
    2c8c:	0e 94 a0 1b 	call	0x3740	; 0x3740 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2c90:	81 2f       	mov	r24, r17
    2c92:	89 ce       	rjmp	.-750    	; 0x29a6 <process_action+0x16c>
                    } else {
                        layer_off(action.layer_tap.val);
    2c94:	0e 94 c1 1b 	call	0x3782	; 0x3782 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2c98:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2c9a:	28 96       	adiw	r28, 0x08	; 8
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
    2ca6:	df 91       	pop	r29
    2ca8:	cf 91       	pop	r28
    2caa:	1f 91       	pop	r17
    2cac:	0f 91       	pop	r16
    2cae:	ff 90       	pop	r15
    2cb0:	ef 90       	pop	r14
    2cb2:	df 90       	pop	r13
    2cb4:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2cb6:	0c 94 16 14 	jmp	0x282c	; 0x282c <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2cba:	ff 20       	and	r15, r15
    2cbc:	a9 f0       	breq	.+42     	; 0x2ce8 <process_action+0x4ae>
                        if (tap_count < TAPPING_TOGGLE) {
    2cbe:	25 30       	cpi	r18, 0x05	; 5
    2cc0:	08 f0       	brcs	.+2      	; 0x2cc4 <process_action+0x48a>
    2cc2:	b2 c0       	rjmp	.+356    	; 0x2e28 <process_action+0x5ee>
                            layer_invert(action.layer_tap.val);
    2cc4:	84 2f       	mov	r24, r20
    2cc6:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2cc8:	28 96       	adiw	r28, 0x08	; 8
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	f8 94       	cli
    2cce:	de bf       	out	0x3e, r29	; 62
    2cd0:	0f be       	out	0x3f, r0	; 63
    2cd2:	cd bf       	out	0x3d, r28	; 61
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	1f 91       	pop	r17
    2cda:	0f 91       	pop	r16
    2cdc:	ff 90       	pop	r15
    2cde:	ef 90       	pop	r14
    2ce0:	df 90       	pop	r13
    2ce2:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2ce4:	0c 94 e6 1b 	jmp	0x37cc	; 0x37cc <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2ce8:	26 30       	cpi	r18, 0x06	; 6
    2cea:	08 f0       	brcs	.+2      	; 0x2cee <process_action+0x4b4>
    2cec:	9d c0       	rjmp	.+314    	; 0x2e28 <process_action+0x5ee>
    2cee:	ea cf       	rjmp	.-44     	; 0x2cc4 <process_action+0x48a>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2cf0:	ff 20       	and	r15, r15
    2cf2:	a1 f0       	breq	.+40     	; 0x2d1c <process_action+0x4e2>
    2cf4:	84 2f       	mov	r24, r20
    2cf6:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2cf8:	28 96       	adiw	r28, 0x08	; 8
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	f8 94       	cli
    2cfe:	de bf       	out	0x3e, r29	; 62
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	cd bf       	out	0x3d, r28	; 61
    2d04:	df 91       	pop	r29
    2d06:	cf 91       	pop	r28
    2d08:	1f 91       	pop	r17
    2d0a:	0f 91       	pop	r16
    2d0c:	ff 90       	pop	r15
    2d0e:	ef 90       	pop	r14
    2d10:	df 90       	pop	r13
    2d12:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2d14:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2d18:	ff 20       	and	r15, r15
    2d1a:	61 f3       	breq	.-40     	; 0x2cf4 <process_action+0x4ba>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2d1c:	84 2f       	mov	r24, r20
    2d1e:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2d20:	28 96       	adiw	r28, 0x08	; 8
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	1f 91       	pop	r17
    2d32:	0f 91       	pop	r16
    2d34:	ff 90       	pop	r15
    2d36:	ef 90       	pop	r14
    2d38:	df 90       	pop	r13
    2d3a:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2d3c:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2d40:	ff 20       	and	r15, r15
    2d42:	91 f0       	breq	.+36     	; 0x2d68 <process_action+0x52e>
    2d44:	84 2f       	mov	r24, r20
    2d46:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2d48:	28 96       	adiw	r28, 0x08	; 8
    2d4a:	0f b6       	in	r0, 0x3f	; 63
    2d4c:	f8 94       	cli
    2d4e:	de bf       	out	0x3e, r29	; 62
    2d50:	0f be       	out	0x3f, r0	; 63
    2d52:	cd bf       	out	0x3d, r28	; 61
    2d54:	df 91       	pop	r29
    2d56:	cf 91       	pop	r28
    2d58:	1f 91       	pop	r17
    2d5a:	0f 91       	pop	r16
    2d5c:	ff 90       	pop	r15
    2d5e:	ef 90       	pop	r14
    2d60:	df 90       	pop	r13
    2d62:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2d64:	0c 94 8b 1b 	jmp	0x3716	; 0x3716 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2d68:	28 96       	adiw	r28, 0x08	; 8
    2d6a:	0f b6       	in	r0, 0x3f	; 63
    2d6c:	f8 94       	cli
    2d6e:	de bf       	out	0x3e, r29	; 62
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	cd bf       	out	0x3d, r28	; 61
    2d74:	df 91       	pop	r29
    2d76:	cf 91       	pop	r28
    2d78:	1f 91       	pop	r17
    2d7a:	0f 91       	pop	r16
    2d7c:	ff 90       	pop	r15
    2d7e:	ef 90       	pop	r14
    2d80:	df 90       	pop	r13
    2d82:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2d84:	0c 94 81 1b 	jmp	0x3702	; 0x3702 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2d88:	ff 20       	and	r15, r15
    2d8a:	a1 f0       	breq	.+40     	; 0x2db4 <process_action+0x57a>
                        if (tap_count > 0) {
    2d8c:	22 23       	and	r18, r18
    2d8e:	09 f4       	brne	.+2      	; 0x2d92 <process_action+0x558>
    2d90:	b1 cf       	rjmp	.-158    	; 0x2cf4 <process_action+0x4ba>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2d92:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2d94:	28 96       	adiw	r28, 0x08	; 8
    2d96:	0f b6       	in	r0, 0x3f	; 63
    2d98:	f8 94       	cli
    2d9a:	de bf       	out	0x3e, r29	; 62
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	cd bf       	out	0x3d, r28	; 61
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
    2da4:	1f 91       	pop	r17
    2da6:	0f 91       	pop	r16
    2da8:	ff 90       	pop	r15
    2daa:	ef 90       	pop	r14
    2dac:	df 90       	pop	r13
    2dae:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2db0:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2db4:	22 23       	and	r18, r18
    2db6:	09 f4       	brne	.+2      	; 0x2dba <process_action+0x580>
    2db8:	b1 cf       	rjmp	.-158    	; 0x2d1c <process_action+0x4e2>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2dba:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2dbc:	28 96       	adiw	r28, 0x08	; 8
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	f8 94       	cli
    2dc2:	de bf       	out	0x3e, r29	; 62
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	cd bf       	out	0x3d, r28	; 61
    2dc8:	df 91       	pop	r29
    2dca:	cf 91       	pop	r28
    2dcc:	1f 91       	pop	r17
    2dce:	0f 91       	pop	r16
    2dd0:	ff 90       	pop	r15
    2dd2:	ef 90       	pop	r14
    2dd4:	df 90       	pop	r13
    2dd6:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2dd8:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2ddc:	4f 70       	andi	r20, 0x0F	; 15
    2dde:	c8 01       	movw	r24, r16
    2de0:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2de4:	28 96       	adiw	r28, 0x08	; 8
    2de6:	0f b6       	in	r0, 0x3f	; 63
    2de8:	f8 94       	cli
    2dea:	de bf       	out	0x3e, r29	; 62
    2dec:	0f be       	out	0x3f, r0	; 63
    2dee:	cd bf       	out	0x3d, r28	; 61
    2df0:	df 91       	pop	r29
    2df2:	cf 91       	pop	r28
    2df4:	1f 91       	pop	r17
    2df6:	0f 91       	pop	r16
    2df8:	ff 90       	pop	r15
    2dfa:	ef 90       	pop	r14
    2dfc:	df 90       	pop	r13
    2dfe:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2e00:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2e04:	4f 70       	andi	r20, 0x0F	; 15
    2e06:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2e08:	28 96       	adiw	r28, 0x08	; 8
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	df 91       	pop	r29
    2e16:	cf 91       	pop	r28
    2e18:	1f 91       	pop	r17
    2e1a:	0f 91       	pop	r16
    2e1c:	ff 90       	pop	r15
    2e1e:	ef 90       	pop	r14
    2e20:	df 90       	pop	r13
    2e22:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2e24:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2e28:	28 96       	adiw	r28, 0x08	; 8
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	df 91       	pop	r29
    2e36:	cf 91       	pop	r28
    2e38:	1f 91       	pop	r17
    2e3a:	0f 91       	pop	r16
    2e3c:	ff 90       	pop	r15
    2e3e:	ef 90       	pop	r14
    2e40:	df 90       	pop	r13
    2e42:	cf 90       	pop	r12
    2e44:	08 95       	ret

00002e46 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2e46:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <clear_weak_mods>
    clear_keys();
    2e4a:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <clear_keys>
    send_keyboard_report();
    2e4e:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2e52:	0e 94 71 24 	call	0x48e2	; 0x48e2 <mousekey_clear>
    mousekey_send();
    2e56:	0e 94 43 23 	call	0x4686	; 0x4686 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	0e 94 b7 11 	call	0x236e	; 0x236e <host_system_send>
    host_consumer_send(0);
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	0c 94 cd 11 	jmp	0x239a	; 0x239a <host_consumer_send>

00002e6a <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2e6a:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <clear_mods>
    clear_keyboard_but_mods();
    2e6e:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <clear_keyboard_but_mods>

00002e72 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2e72:	0e 94 56 1c 	call	0x38ac	; 0x38ac <layer_switch_get_action>

    switch (action.kind.id) {
    2e76:	29 2f       	mov	r18, r25
    2e78:	22 95       	swap	r18
    2e7a:	2f 70       	andi	r18, 0x0F	; 15
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	2c 30       	cpi	r18, 0x0C	; 12
    2e80:	31 05       	cpc	r19, r1
    2e82:	4c f4       	brge	.+18     	; 0x2e96 <is_tap_key+0x24>
    2e84:	2a 30       	cpi	r18, 0x0A	; 10
    2e86:	31 05       	cpc	r19, r1
    2e88:	6c f4       	brge	.+26     	; 0x2ea4 <is_tap_key+0x32>
    2e8a:	22 50       	subi	r18, 0x02	; 2
    2e8c:	31 09       	sbc	r19, r1
    2e8e:	22 30       	cpi	r18, 0x02	; 2
    2e90:	31 05       	cpc	r19, r1
    2e92:	70 f4       	brcc	.+28     	; 0x2eb0 <is_tap_key+0x3e>
    2e94:	07 c0       	rjmp	.+14     	; 0x2ea4 <is_tap_key+0x32>
    2e96:	2c 30       	cpi	r18, 0x0C	; 12
    2e98:	31 05       	cpc	r19, r1
    2e9a:	31 f0       	breq	.+12     	; 0x2ea8 <is_tap_key+0x36>
    2e9c:	2f 30       	cpi	r18, 0x0F	; 15
    2e9e:	31 05       	cpc	r19, r1
    2ea0:	19 f0       	breq	.+6      	; 0x2ea8 <is_tap_key+0x36>
    2ea2:	06 c0       	rjmp	.+12     	; 0x2eb0 <is_tap_key+0x3e>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            return true;
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	08 95       	ret
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2ea8:	93 fb       	bst	r25, 3
    2eaa:	88 27       	eor	r24, r24
    2eac:	80 f9       	bld	r24, 0
    2eae:	08 95       	ret
            return false;
    }
    return false;
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
}
    2eb2:	08 95       	ret

00002eb4 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2eb4:	cf 93       	push	r28
    2eb6:	df 93       	push	r29
    2eb8:	00 d0       	rcall	.+0      	; 0x2eba <debug_event+0x6>
    2eba:	00 d0       	rcall	.+0      	; 0x2ebc <debug_event+0x8>
    2ebc:	1f 92       	push	r1
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	df 91       	pop	r29
    2ece:	cf 91       	pop	r28
    2ed0:	08 95       	ret

00002ed2 <debug_record>:

void debug_record(keyrecord_t record)
{
    2ed2:	cf 93       	push	r28
    2ed4:	df 93       	push	r29
    2ed6:	00 d0       	rcall	.+0      	; 0x2ed8 <debug_record+0x6>
    2ed8:	00 d0       	rcall	.+0      	; 0x2eda <debug_record+0x8>
    2eda:	00 d0       	rcall	.+0      	; 0x2edc <debug_record+0xa>
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2ee0:	26 96       	adiw	r28, 0x06	; 6
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	de bf       	out	0x3e, r29	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	cd bf       	out	0x3d, r28	; 61
    2eec:	df 91       	pop	r29
    2eee:	cf 91       	pop	r28
    2ef0:	08 95       	ret

00002ef2 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ef8:	c0 91 70 01 	lds	r28, 0x0170
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2efc:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2efe:	80 91 71 01 	lds	r24, 0x0171
    2f02:	c8 17       	cp	r28, r24
    2f04:	99 f0       	breq	.+38     	; 0x2f2c <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2f06:	d0 e0       	ldi	r29, 0x00	; 0
    2f08:	1c 9f       	mul	r17, r28
    2f0a:	f0 01       	movw	r30, r0
    2f0c:	1d 9f       	mul	r17, r29
    2f0e:	f0 0d       	add	r31, r0
    2f10:	11 24       	eor	r1, r1
    2f12:	ee 58       	subi	r30, 0x8E	; 142
    2f14:	fe 4f       	sbci	r31, 0xFE	; 254
    2f16:	40 81       	ld	r20, Z
    2f18:	51 81       	ldd	r21, Z+1	; 0x01
    2f1a:	62 81       	ldd	r22, Z+2	; 0x02
    2f1c:	73 81       	ldd	r23, Z+3	; 0x03
    2f1e:	84 81       	ldd	r24, Z+4	; 0x04
    2f20:	95 81       	ldd	r25, Z+5	; 0x05
    2f22:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f26:	21 96       	adiw	r28, 0x01	; 1
    2f28:	c7 70       	andi	r28, 0x07	; 7
    2f2a:	e9 cf       	rjmp	.-46     	; 0x2efe <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	1f 91       	pop	r17
    2f32:	08 95       	ret

00002f34 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2f34:	40 91 a2 01 	lds	r20, 0x01A2
    2f38:	50 91 a3 01 	lds	r21, 0x01A3
    2f3c:	60 91 a4 01 	lds	r22, 0x01A4
    2f40:	70 91 a5 01 	lds	r23, 0x01A5
    2f44:	80 91 a6 01 	lds	r24, 0x01A6
    2f48:	90 91 a7 01 	lds	r25, 0x01A7
    2f4c:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <debug_record>

00002f50 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    2f50:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2f52:	80 91 a7 01 	lds	r24, 0x01A7
    2f56:	82 95       	swap	r24
    2f58:	8f 70       	andi	r24, 0x0F	; 15
    2f5a:	09 f0       	breq	.+2      	; 0x2f5e <waiting_buffer_scan_tap+0xe>
    2f5c:	5f c0       	rjmp	.+190    	; 0x301c <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2f5e:	80 91 a4 01 	lds	r24, 0x01A4
    2f62:	88 23       	and	r24, r24
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <waiting_buffer_scan_tap+0x18>
    2f66:	5a c0       	rjmp	.+180    	; 0x301c <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f68:	20 91 70 01 	lds	r18, 0x0170
    2f6c:	a0 91 71 01 	lds	r26, 0x0171
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2f70:	60 91 a2 01 	lds	r22, 0x01A2
    2f74:	70 91 a3 01 	lds	r23, 0x01A3
    2f78:	80 91 a5 01 	lds	r24, 0x01A5
    2f7c:	90 91 a6 01 	lds	r25, 0x01A6
    2f80:	31 e0       	ldi	r19, 0x01	; 1
    2f82:	6f 3f       	cpi	r22, 0xFF	; 255
    2f84:	09 f0       	breq	.+2      	; 0x2f88 <waiting_buffer_scan_tap+0x38>
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	b3 2f       	mov	r27, r19
    2f8a:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f8c:	2a 17       	cp	r18, r26
    2f8e:	09 f4       	brne	.+2      	; 0x2f92 <waiting_buffer_scan_tap+0x42>
    2f90:	45 c0       	rjmp	.+138    	; 0x301c <waiting_buffer_scan_tap+0xcc>
    2f92:	00 97       	sbiw	r24, 0x00	; 0
    2f94:	21 f0       	breq	.+8      	; 0x2f9e <waiting_buffer_scan_tap+0x4e>
    2f96:	7f 3f       	cpi	r23, 0xFF	; 255
    2f98:	21 f4       	brne	.+8      	; 0x2fa2 <waiting_buffer_scan_tap+0x52>
    2f9a:	4b 2f       	mov	r20, r27
    2f9c:	03 c0       	rjmp	.+6      	; 0x2fa4 <waiting_buffer_scan_tap+0x54>
    2f9e:	41 e0       	ldi	r20, 0x01	; 1
    2fa0:	01 c0       	rjmp	.+2      	; 0x2fa4 <waiting_buffer_scan_tap+0x54>
    2fa2:	40 e0       	ldi	r20, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2fa6:	40 fd       	sbrc	r20, 0
    2fa8:	35 c0       	rjmp	.+106    	; 0x3014 <waiting_buffer_scan_tap+0xc4>
    2faa:	c2 9f       	mul	r28, r18
    2fac:	f0 01       	movw	r30, r0
    2fae:	c3 9f       	mul	r28, r19
    2fb0:	f0 0d       	add	r31, r0
    2fb2:	11 24       	eor	r1, r1
    2fb4:	ee 58       	subi	r30, 0x8E	; 142
    2fb6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb8:	41 81       	ldd	r20, Z+1	; 0x01
    2fba:	74 13       	cpse	r23, r20
    2fbc:	2b c0       	rjmp	.+86     	; 0x3014 <waiting_buffer_scan_tap+0xc4>
    2fbe:	40 81       	ld	r20, Z
    2fc0:	64 13       	cpse	r22, r20
    2fc2:	28 c0       	rjmp	.+80     	; 0x3014 <waiting_buffer_scan_tap+0xc4>
    2fc4:	42 81       	ldd	r20, Z+2	; 0x02
    2fc6:	41 11       	cpse	r20, r1
    2fc8:	25 c0       	rjmp	.+74     	; 0x3014 <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2fca:	43 81       	ldd	r20, Z+3	; 0x03
    2fcc:	54 81       	ldd	r21, Z+4	; 0x04
    2fce:	48 17       	cp	r20, r24
    2fd0:	59 07       	cpc	r21, r25
    2fd2:	10 f4       	brcc	.+4      	; 0x2fd8 <waiting_buffer_scan_tap+0x88>
    2fd4:	41 50       	subi	r20, 0x01	; 1
    2fd6:	51 09       	sbc	r21, r1
    2fd8:	48 1b       	sub	r20, r24
    2fda:	59 0b       	sbc	r21, r25
    2fdc:	48 3c       	cpi	r20, 0xC8	; 200
    2fde:	51 05       	cpc	r21, r1
    2fe0:	c8 f4       	brcc	.+50     	; 0x3014 <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    2fe2:	80 91 a7 01 	lds	r24, 0x01A7
    2fe6:	8f 70       	andi	r24, 0x0F	; 15
    2fe8:	80 61       	ori	r24, 0x10	; 16
    2fea:	80 93 a7 01 	sts	0x01A7, r24
            waiting_buffer[i].tap.count = 1;
    2fee:	86 e0       	ldi	r24, 0x06	; 6
    2ff0:	82 9f       	mul	r24, r18
    2ff2:	f0 01       	movw	r30, r0
    2ff4:	83 9f       	mul	r24, r19
    2ff6:	f0 0d       	add	r31, r0
    2ff8:	11 24       	eor	r1, r1
    2ffa:	e9 58       	subi	r30, 0x89	; 137
    2ffc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ffe:	80 81       	ld	r24, Z
    3000:	8f 70       	andi	r24, 0x0F	; 15
    3002:	80 61       	ori	r24, 0x10	; 16
    3004:	80 83       	st	Z, r24
            process_action(&tapping_key);
    3006:	82 ea       	ldi	r24, 0xA2	; 162
    3008:	91 e0       	ldi	r25, 0x01	; 1
    300a:	0e 94 1d 14 	call	0x283a	; 0x283a <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    300e:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    3010:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3014:	2f 5f       	subi	r18, 0xFF	; 255
    3016:	3f 4f       	sbci	r19, 0xFF	; 255
    3018:	27 70       	andi	r18, 0x07	; 7
    301a:	b8 cf       	rjmp	.-144    	; 0x2f8c <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    301c:	cf 91       	pop	r28
    301e:	08 95       	ret

00003020 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    3020:	cf 92       	push	r12
    3022:	df 92       	push	r13
    3024:	ef 92       	push	r14
    3026:	ff 92       	push	r15
    3028:	0f 93       	push	r16
    302a:	1f 93       	push	r17
    302c:	cf 93       	push	r28
    302e:	df 93       	push	r29
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	62 97       	sbiw	r28, 0x12	; 18
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
    3040:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    3042:	85 e0       	ldi	r24, 0x05	; 5
    3044:	f8 01       	movw	r30, r16
    3046:	de 01       	movw	r26, r28
    3048:	1d 96       	adiw	r26, 0x0d	; 13
    304a:	01 90       	ld	r0, Z+
    304c:	0d 92       	st	X+, r0
    304e:	8a 95       	dec	r24
    3050:	e1 f7       	brne	.-8      	; 0x304a <process_tapping+0x2a>
    3052:	d8 01       	movw	r26, r16
    3054:	4c 91       	ld	r20, X
    3056:	11 96       	adiw	r26, 0x01	; 1
    3058:	5c 91       	ld	r21, X
    305a:	11 97       	sbiw	r26, 0x01	; 1
    305c:	12 96       	adiw	r26, 0x02	; 2
    305e:	6c 91       	ld	r22, X
    3060:	12 97       	sbiw	r26, 0x02	; 2
    3062:	13 96       	adiw	r26, 0x03	; 3
    3064:	ed 90       	ld	r14, X+
    3066:	fc 90       	ld	r15, X
    3068:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    306a:	70 91 a2 01 	lds	r23, 0x01A2
    306e:	e0 91 a3 01 	lds	r30, 0x01A3
    3072:	20 91 a5 01 	lds	r18, 0x01A5
    3076:	30 91 a6 01 	lds	r19, 0x01A6
    307a:	21 15       	cp	r18, r1
    307c:	31 05       	cpc	r19, r1
    307e:	31 f0       	breq	.+12     	; 0x308c <process_tapping+0x6c>
    3080:	ef 3f       	cpi	r30, 0xFF	; 255
    3082:	31 f4       	brne	.+12     	; 0x3090 <process_tapping+0x70>
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	7f 3f       	cpi	r23, 0xFF	; 255
    3088:	19 f4       	brne	.+6      	; 0x3090 <process_tapping+0x70>
    308a:	03 c0       	rjmp	.+6      	; 0x3092 <process_tapping+0x72>
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	01 c0       	rjmp	.+2      	; 0x3092 <process_tapping+0x72>
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	b8 2f       	mov	r27, r24
    3094:	b1 70       	andi	r27, 0x01	; 1
    3096:	cb 2e       	mov	r12, r27
    3098:	80 fd       	sbrc	r24, 0
    309a:	6c c1       	rjmp	.+728    	; 0x3374 <process_tapping+0x354>
    309c:	d0 90 a4 01 	lds	r13, 0x01A4
    30a0:	dd 20       	and	r13, r13
    30a2:	09 f4       	brne	.+2      	; 0x30a6 <process_tapping+0x86>
    30a4:	f5 c0       	rjmp	.+490    	; 0x3290 <process_tapping+0x270>
    30a6:	f0 91 a7 01 	lds	r31, 0x01A7
        if (WITHIN_TAPPING_TERM(event)) {
    30aa:	e2 16       	cp	r14, r18
    30ac:	f3 06       	cpc	r15, r19
    30ae:	38 f0       	brcs	.+14     	; 0x30be <process_tapping+0x9e>
    30b0:	c7 01       	movw	r24, r14
    30b2:	82 1b       	sub	r24, r18
    30b4:	93 0b       	sbc	r25, r19
    30b6:	88 3c       	cpi	r24, 0xC8	; 200
    30b8:	91 05       	cpc	r25, r1
    30ba:	48 f0       	brcs	.+18     	; 0x30ce <process_tapping+0xae>
    30bc:	9b c0       	rjmp	.+310    	; 0x31f4 <process_tapping+0x1d4>
    30be:	20 95       	com	r18
    30c0:	30 95       	com	r19
    30c2:	2e 0d       	add	r18, r14
    30c4:	3f 1d       	adc	r19, r15
    30c6:	28 3c       	cpi	r18, 0xC8	; 200
    30c8:	31 05       	cpc	r19, r1
    30ca:	08 f0       	brcs	.+2      	; 0x30ce <process_tapping+0xae>
    30cc:	93 c0       	rjmp	.+294    	; 0x31f4 <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    30ce:	8f 2f       	mov	r24, r31
    30d0:	80 7f       	andi	r24, 0xF0	; 240
    30d2:	09 f0       	breq	.+2      	; 0x30d6 <process_tapping+0xb6>
    30d4:	52 c0       	rjmp	.+164    	; 0x317a <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    30d6:	e5 13       	cpse	r30, r21
    30d8:	14 c0       	rjmp	.+40     	; 0x3102 <process_tapping+0xe2>
    30da:	74 13       	cpse	r23, r20
    30dc:	12 c0       	rjmp	.+36     	; 0x3102 <process_tapping+0xe2>
    30de:	d6 2e       	mov	r13, r22
    30e0:	61 11       	cpse	r22, r1
    30e2:	0f c0       	rjmp	.+30     	; 0x3102 <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    30e4:	ff 70       	andi	r31, 0x0F	; 15
    30e6:	f0 61       	ori	r31, 0x10	; 16
    30e8:	f0 93 a7 01 	sts	0x01A7, r31
                    debug_tapping_key();
    30ec:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <debug_tapping_key>
                    process_action(&tapping_key);
    30f0:	82 ea       	ldi	r24, 0xA2	; 162
    30f2:	91 e0       	ldi	r25, 0x01	; 1
    30f4:	0e 94 1d 14 	call	0x283a	; 0x283a <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    30f8:	80 91 a7 01 	lds	r24, 0x01A7
    30fc:	f8 01       	movw	r30, r16
    30fe:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    3100:	6c c1       	rjmp	.+728    	; 0x33da <process_tapping+0x3ba>
    3102:	ef 28       	or	r14, r15
    3104:	31 f0       	breq	.+12     	; 0x3112 <process_tapping+0xf2>
    3106:	5f 3f       	cpi	r21, 0xFF	; 255
    3108:	31 f4       	brne	.+12     	; 0x3116 <process_tapping+0xf6>
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	4f 3f       	cpi	r20, 0xFF	; 255
    310e:	19 f4       	brne	.+6      	; 0x3116 <process_tapping+0xf6>
    3110:	03 c0       	rjmp	.+6      	; 0x3118 <process_tapping+0xf8>
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	01 c0       	rjmp	.+2      	; 0x3118 <process_tapping+0xf8>
    3116:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    3118:	80 fd       	sbrc	r24, 0
    311a:	03 c0       	rjmp	.+6      	; 0x3122 <process_tapping+0x102>
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	86 27       	eor	r24, r22
    3120:	01 c0       	rjmp	.+2      	; 0x3124 <process_tapping+0x104>
    3122:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    3124:	f8 2f       	mov	r31, r24
    3126:	f1 70       	andi	r31, 0x01	; 1
    3128:	ff 2e       	mov	r15, r31
    312a:	80 ff       	sbrs	r24, 0
    312c:	1c c0       	rjmp	.+56     	; 0x3166 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    312e:	80 91 70 01 	lds	r24, 0x0170
    3132:	20 91 71 01 	lds	r18, 0x0171
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3136:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3138:	82 17       	cp	r24, r18
    313a:	09 f4       	brne	.+2      	; 0x313e <process_tapping+0x11e>
    313c:	28 c1       	rjmp	.+592    	; 0x338e <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	38 9f       	mul	r19, r24
    3142:	f0 01       	movw	r30, r0
    3144:	39 9f       	mul	r19, r25
    3146:	f0 0d       	add	r31, r0
    3148:	11 24       	eor	r1, r1
    314a:	ee 58       	subi	r30, 0x8E	; 142
    314c:	fe 4f       	sbci	r31, 0xFE	; 254
    314e:	71 81       	ldd	r23, Z+1	; 0x01
    3150:	57 13       	cpse	r21, r23
    3152:	06 c0       	rjmp	.+12     	; 0x3160 <process_tapping+0x140>
    3154:	70 81       	ld	r23, Z
    3156:	47 13       	cpse	r20, r23
    3158:	03 c0       	rjmp	.+6      	; 0x3160 <process_tapping+0x140>
    315a:	72 81       	ldd	r23, Z+2	; 0x02
    315c:	67 13       	cpse	r22, r23
    315e:	03 c0       	rjmp	.+6      	; 0x3166 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3160:	01 96       	adiw	r24, 0x01	; 1
    3162:	87 70       	andi	r24, 0x07	; 7
    3164:	e9 cf       	rjmp	.-46     	; 0x3138 <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    3166:	d6 2e       	mov	r13, r22
    3168:	66 23       	and	r22, r22
    316a:	09 f4       	brne	.+2      	; 0x316e <process_tapping+0x14e>
    316c:	36 c1       	rjmp	.+620    	; 0x33da <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    316e:	80 91 a7 01 	lds	r24, 0x01A7
    3172:	81 60       	ori	r24, 0x01	; 1
    3174:	80 93 a7 01 	sts	0x01A7, r24
    3178:	53 c0       	rjmp	.+166    	; 0x3220 <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    317a:	e5 13       	cpse	r30, r21
    317c:	08 c0       	rjmp	.+16     	; 0x318e <process_tapping+0x16e>
    317e:	74 13       	cpse	r23, r20
    3180:	06 c0       	rjmp	.+12     	; 0x318e <process_tapping+0x16e>
    3182:	61 11       	cpse	r22, r1
    3184:	04 c0       	rjmp	.+8      	; 0x318e <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    3186:	d8 01       	movw	r26, r16
    3188:	15 96       	adiw	r26, 0x05	; 5
    318a:	fc 93       	st	X, r31
    318c:	ae c0       	rjmp	.+348    	; 0x32ea <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    318e:	4d 87       	std	Y+13, r20	; 0x0d
    3190:	5e 87       	std	Y+14, r21	; 0x0e
    3192:	8d 85       	ldd	r24, Y+13	; 0x0d
    3194:	9e 85       	ldd	r25, Y+14	; 0x0e
    3196:	6a 8b       	std	Y+18, r22	; 0x12
    3198:	0e 94 39 17 	call	0x2e72	; 0x2e72 <is_tap_key>
    319c:	6a 89       	ldd	r22, Y+18	; 0x12
    319e:	88 23       	and	r24, r24
    31a0:	29 f1       	breq	.+74     	; 0x31ec <process_tapping+0x1cc>
    31a2:	d6 2e       	mov	r13, r22
    31a4:	66 23       	and	r22, r22
    31a6:	11 f1       	breq	.+68     	; 0x31ec <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    31a8:	20 91 a7 01 	lds	r18, 0x01A7
    31ac:	82 2f       	mov	r24, r18
    31ae:	82 95       	swap	r24
    31b0:	8f 70       	andi	r24, 0x0F	; 15
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	02 97       	sbiw	r24, 0x02	; 2
    31b6:	0c f4       	brge	.+2      	; 0x31ba <process_tapping+0x19a>
    31b8:	60 c0       	rjmp	.+192    	; 0x327a <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    31ba:	80 91 a2 01 	lds	r24, 0x01A2
    31be:	90 91 a3 01 	lds	r25, 0x01A3
    31c2:	98 87       	std	Y+8, r25	; 0x08
    31c4:	8f 83       	std	Y+7, r24	; 0x07
    31c6:	19 86       	std	Y+9, r1	; 0x09
    31c8:	fb 86       	std	Y+11, r15	; 0x0b
    31ca:	ea 86       	std	Y+10, r14	; 0x0a
    31cc:	2c 87       	std	Y+12, r18	; 0x0c
    31ce:	ce 01       	movw	r24, r28
    31d0:	07 96       	adiw	r24, 0x07	; 7
    31d2:	51 c0       	rjmp	.+162    	; 0x3276 <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    31d4:	e5 17       	cp	r30, r21
    31d6:	31 f1       	breq	.+76     	; 0x3224 <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    31d8:	4d 87       	std	Y+13, r20	; 0x0d
    31da:	5e 87       	std	Y+14, r21	; 0x0e
    31dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31de:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e0:	6a 8b       	std	Y+18, r22	; 0x12
    31e2:	0e 94 39 17 	call	0x2e72	; 0x2e72 <is_tap_key>
    31e6:	6a 89       	ldd	r22, Y+18	; 0x12
    31e8:	81 11       	cpse	r24, r1
    31ea:	2e c0       	rjmp	.+92     	; 0x3248 <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    31ec:	c8 01       	movw	r24, r16
    31ee:	0e 94 1d 14 	call	0x283a	; 0x283a <process_action>
    31f2:	a4 c0       	rjmp	.+328    	; 0x333c <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    31f4:	8f 2f       	mov	r24, r31
    31f6:	80 7f       	andi	r24, 0xF0	; 240
    31f8:	69 f7       	brne	.-38     	; 0x31d4 <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    31fa:	7e 2d       	mov	r23, r14
    31fc:	f9 8a       	std	Y+17, r15	; 0x11
    31fe:	e8 8a       	std	Y+16, r14	; 0x10
    3200:	89 89       	ldd	r24, Y+17	; 0x11
    3202:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <debug_event>
                process_action(&tapping_key);
    3206:	82 ea       	ldi	r24, 0xA2	; 162
    3208:	91 e0       	ldi	r25, 0x01	; 1
    320a:	0e 94 1d 14 	call	0x283a	; 0x283a <process_action>
                tapping_key = (keyrecord_t){};
    320e:	e2 ea       	ldi	r30, 0xA2	; 162
    3210:	f1 e0       	ldi	r31, 0x01	; 1
    3212:	86 e0       	ldi	r24, 0x06	; 6
    3214:	df 01       	movw	r26, r30
    3216:	1d 92       	st	X+, r1
    3218:	8a 95       	dec	r24
    321a:	e9 f7       	brne	.-6      	; 0x3216 <process_tapping+0x1f6>
                debug_tapping_key();
    321c:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <debug_tapping_key>
                return false;
    3220:	d1 2c       	mov	r13, r1
    3222:	db c0       	rjmp	.+438    	; 0x33da <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3224:	74 13       	cpse	r23, r20
    3226:	d8 cf       	rjmp	.-80     	; 0x31d8 <process_tapping+0x1b8>
    3228:	61 11       	cpse	r22, r1
    322a:	d6 cf       	rjmp	.-84     	; 0x31d8 <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    322c:	d8 01       	movw	r26, r16
    322e:	15 96       	adiw	r26, 0x05	; 5
    3230:	fc 93       	st	X, r31
                    process_action(keyp);
    3232:	c8 01       	movw	r24, r16
    3234:	0e 94 1d 14 	call	0x283a	; 0x283a <process_action>
                    tapping_key = (keyrecord_t){};
    3238:	e2 ea       	ldi	r30, 0xA2	; 162
    323a:	f1 e0       	ldi	r31, 0x01	; 1
    323c:	86 e0       	ldi	r24, 0x06	; 6
    323e:	df 01       	movw	r26, r30
    3240:	1d 92       	st	X+, r1
    3242:	8a 95       	dec	r24
    3244:	e9 f7       	brne	.-6      	; 0x3240 <process_tapping+0x220>
                    return true;
    3246:	c9 c0       	rjmp	.+402    	; 0x33da <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3248:	d6 2e       	mov	r13, r22
    324a:	66 23       	and	r22, r22
    324c:	79 f2       	breq	.-98     	; 0x31ec <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    324e:	20 91 a7 01 	lds	r18, 0x01A7
    3252:	82 2f       	mov	r24, r18
    3254:	82 95       	swap	r24
    3256:	8f 70       	andi	r24, 0x0F	; 15
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	02 97       	sbiw	r24, 0x02	; 2
    325c:	74 f0       	brlt	.+28     	; 0x327a <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    325e:	80 91 a2 01 	lds	r24, 0x01A2
    3262:	90 91 a3 01 	lds	r25, 0x01A3
    3266:	9a 83       	std	Y+2, r25	; 0x02
    3268:	89 83       	std	Y+1, r24	; 0x01
    326a:	1b 82       	std	Y+3, r1	; 0x03
    326c:	fd 82       	std	Y+5, r15	; 0x05
    326e:	ec 82       	std	Y+4, r14	; 0x04
    3270:	2e 83       	std	Y+6, r18	; 0x06
    3272:	ce 01       	movw	r24, r28
    3274:	01 96       	adiw	r24, 0x01	; 1
    3276:	0e 94 1d 14 	call	0x283a	; 0x283a <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    327a:	86 e0       	ldi	r24, 0x06	; 6
    327c:	f8 01       	movw	r30, r16
    327e:	a2 ea       	ldi	r26, 0xA2	; 162
    3280:	b1 e0       	ldi	r27, 0x01	; 1
    3282:	01 90       	ld	r0, Z+
    3284:	0d 92       	st	X+, r0
    3286:	8a 95       	dec	r24
    3288:	e1 f7       	brne	.-8      	; 0x3282 <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    328a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <waiting_buffer_scan_tap>
    328e:	6f c0       	rjmp	.+222    	; 0x336e <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3290:	e2 16       	cp	r14, r18
    3292:	f3 06       	cpc	r15, r19
    3294:	28 f0       	brcs	.+10     	; 0x32a0 <process_tapping+0x280>
    3296:	c7 01       	movw	r24, r14
    3298:	82 1b       	sub	r24, r18
    329a:	93 0b       	sbc	r25, r19
    329c:	9c 01       	movw	r18, r24
    329e:	04 c0       	rjmp	.+8      	; 0x32a8 <process_tapping+0x288>
    32a0:	20 95       	com	r18
    32a2:	30 95       	com	r19
    32a4:	2e 0d       	add	r18, r14
    32a6:	3f 1d       	adc	r19, r15
    32a8:	28 3c       	cpi	r18, 0xC8	; 200
    32aa:	31 05       	cpc	r19, r1
    32ac:	08 f0       	brcs	.+2      	; 0x32b0 <process_tapping+0x290>
    32ae:	52 c0       	rjmp	.+164    	; 0x3354 <process_tapping+0x334>
            if (event.pressed) {
    32b0:	d6 2e       	mov	r13, r22
    32b2:	66 23       	and	r22, r22
    32b4:	09 f4       	brne	.+2      	; 0x32b8 <process_tapping+0x298>
    32b6:	9a cf       	rjmp	.-204    	; 0x31ec <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    32b8:	e5 13       	cpse	r30, r21
    32ba:	2c c0       	rjmp	.+88     	; 0x3314 <process_tapping+0x2f4>
    32bc:	74 13       	cpse	r23, r20
    32be:	2a c0       	rjmp	.+84     	; 0x3314 <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    32c0:	80 91 a7 01 	lds	r24, 0x01A7
    32c4:	80 fd       	sbrc	r24, 0
    32c6:	1d c0       	rjmp	.+58     	; 0x3302 <process_tapping+0x2e2>
    32c8:	98 2f       	mov	r25, r24
    32ca:	92 95       	swap	r25
    32cc:	9f 70       	andi	r25, 0x0F	; 15
    32ce:	c9 f0       	breq	.+50     	; 0x3302 <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    32d0:	d8 01       	movw	r26, r16
    32d2:	15 96       	adiw	r26, 0x05	; 5
    32d4:	8c 93       	st	X, r24
    32d6:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    32d8:	9f 30       	cpi	r25, 0x0F	; 15
    32da:	39 f0       	breq	.+14     	; 0x32ea <process_tapping+0x2ca>
    32dc:	9f 5f       	subi	r25, 0xFF	; 255
    32de:	92 95       	swap	r25
    32e0:	90 7f       	andi	r25, 0xF0	; 240
    32e2:	8f 70       	andi	r24, 0x0F	; 15
    32e4:	89 2b       	or	r24, r25
    32e6:	15 96       	adiw	r26, 0x05	; 5
    32e8:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    32ea:	c8 01       	movw	r24, r16
    32ec:	0e 94 1d 14 	call	0x283a	; 0x283a <process_action>
                        tapping_key = *keyp;
    32f0:	86 e0       	ldi	r24, 0x06	; 6
    32f2:	f8 01       	movw	r30, r16
    32f4:	a2 ea       	ldi	r26, 0xA2	; 162
    32f6:	b1 e0       	ldi	r27, 0x01	; 1
    32f8:	01 90       	ld	r0, Z+
    32fa:	0d 92       	st	X+, r0
    32fc:	8a 95       	dec	r24
    32fe:	e1 f7       	brne	.-8      	; 0x32f8 <process_tapping+0x2d8>
    3300:	36 c0       	rjmp	.+108    	; 0x336e <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    3302:	86 e0       	ldi	r24, 0x06	; 6
    3304:	f8 01       	movw	r30, r16
    3306:	a2 ea       	ldi	r26, 0xA2	; 162
    3308:	b1 e0       	ldi	r27, 0x01	; 1
    330a:	01 90       	ld	r0, Z+
    330c:	0d 92       	st	X+, r0
    330e:	8a 95       	dec	r24
    3310:	e1 f7       	brne	.-8      	; 0x330a <process_tapping+0x2ea>
                        return true;
    3312:	63 c0       	rjmp	.+198    	; 0x33da <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    3314:	4d 87       	std	Y+13, r20	; 0x0d
    3316:	5e 87       	std	Y+14, r21	; 0x0e
    3318:	8d 85       	ldd	r24, Y+13	; 0x0d
    331a:	9e 85       	ldd	r25, Y+14	; 0x0e
    331c:	0e 94 39 17 	call	0x2e72	; 0x2e72 <is_tap_key>
    3320:	88 23       	and	r24, r24
    3322:	79 f0       	breq	.+30     	; 0x3342 <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    3324:	86 e0       	ldi	r24, 0x06	; 6
    3326:	f8 01       	movw	r30, r16
    3328:	a2 ea       	ldi	r26, 0xA2	; 162
    332a:	b1 e0       	ldi	r27, 0x01	; 1
    332c:	01 90       	ld	r0, Z+
    332e:	0d 92       	st	X+, r0
    3330:	8a 95       	dec	r24
    3332:	e1 f7       	brne	.-8      	; 0x332c <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    3334:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3338:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <debug_tapping_key>
                    return true;
    333c:	dd 24       	eor	r13, r13
    333e:	d3 94       	inc	r13
    3340:	4c c0       	rjmp	.+152    	; 0x33da <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    3342:	80 91 a7 01 	lds	r24, 0x01A7
    3346:	81 60       	ori	r24, 0x01	; 1
    3348:	80 93 a7 01 	sts	0x01A7, r24
                    process_action(keyp);
    334c:	c8 01       	movw	r24, r16
    334e:	0e 94 1d 14 	call	0x283a	; 0x283a <process_action>
                    return true;
    3352:	43 c0       	rjmp	.+134    	; 0x33da <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    3354:	7e 2d       	mov	r23, r14
    3356:	f9 8a       	std	Y+17, r15	; 0x11
    3358:	e8 8a       	std	Y+16, r14	; 0x10
    335a:	89 89       	ldd	r24, Y+17	; 0x11
    335c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <debug_event>
            tapping_key = (keyrecord_t){};
    3360:	e2 ea       	ldi	r30, 0xA2	; 162
    3362:	f1 e0       	ldi	r31, 0x01	; 1
    3364:	86 e0       	ldi	r24, 0x06	; 6
    3366:	df 01       	movw	r26, r30
    3368:	1d 92       	st	X+, r1
    336a:	8a 95       	dec	r24
    336c:	e9 f7       	brne	.-6      	; 0x3368 <process_tapping+0x348>
            debug_tapping_key();
    336e:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <debug_tapping_key>
            return false;
    3372:	33 c0       	rjmp	.+102    	; 0x33da <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    3374:	66 23       	and	r22, r22
    3376:	09 f4       	brne	.+2      	; 0x337a <process_tapping+0x35a>
    3378:	39 cf       	rjmp	.-398    	; 0x31ec <process_tapping+0x1cc>
    337a:	4d 87       	std	Y+13, r20	; 0x0d
    337c:	5e 87       	std	Y+14, r21	; 0x0e
    337e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3380:	9e 85       	ldd	r25, Y+14	; 0x0e
    3382:	0e 94 39 17 	call	0x2e72	; 0x2e72 <is_tap_key>
    3386:	88 23       	and	r24, r24
    3388:	09 f4       	brne	.+2      	; 0x338c <process_tapping+0x36c>
    338a:	30 cf       	rjmp	.-416    	; 0x31ec <process_tapping+0x1cc>
    338c:	cb cf       	rjmp	.-106    	; 0x3324 <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    338e:	4d 87       	std	Y+13, r20	; 0x0d
    3390:	5e 87       	std	Y+14, r21	; 0x0e
    3392:	8d 85       	ldd	r24, Y+13	; 0x0d
    3394:	9e 85       	ldd	r25, Y+14	; 0x0e
    3396:	0e 94 56 1c 	call	0x38ac	; 0x38ac <layer_switch_get_action>
                    switch (action.kind.id) {
    339a:	29 2f       	mov	r18, r25
    339c:	22 95       	swap	r18
    339e:	2f 70       	andi	r18, 0x0F	; 15
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	22 30       	cpi	r18, 0x02	; 2
    33a4:	31 05       	cpc	r19, r1
    33a6:	2c f4       	brge	.+10     	; 0x33b2 <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    33a8:	9f 70       	andi	r25, 0x0F	; 15
    33aa:	41 f0       	breq	.+16     	; 0x33bc <process_tapping+0x39c>
    33ac:	81 11       	cpse	r24, r1
    33ae:	06 c0       	rjmp	.+12     	; 0x33bc <process_tapping+0x39c>
    33b0:	0c c0       	rjmp	.+24     	; 0x33ca <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    33b2:	24 30       	cpi	r18, 0x04	; 4
    33b4:	31 05       	cpc	r19, r1
    33b6:	2c f4       	brge	.+10     	; 0x33c2 <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    33b8:	9f 70       	andi	r25, 0x0F	; 15
    33ba:	49 f4       	brne	.+18     	; 0x33ce <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    33bc:	80 5e       	subi	r24, 0xE0	; 224
    33be:	88 30       	cpi	r24, 0x08	; 8
    33c0:	20 f0       	brcs	.+8      	; 0x33ca <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    33c2:	c8 01       	movw	r24, r16
    33c4:	0e 94 1d 14 	call	0x283a	; 0x283a <process_action>
                    return true;
    33c8:	cf 2c       	mov	r12, r15
    33ca:	dc 2c       	mov	r13, r12
    33cc:	06 c0       	rjmp	.+12     	; 0x33da <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    33ce:	d8 01       	movw	r26, r16
    33d0:	15 96       	adiw	r26, 0x05	; 5
    33d2:	9c 91       	ld	r25, X
    33d4:	90 7f       	andi	r25, 0xF0	; 240
    33d6:	91 f7       	brne	.-28     	; 0x33bc <process_tapping+0x39c>
    33d8:	f8 cf       	rjmp	.-16     	; 0x33ca <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    33da:	8d 2d       	mov	r24, r13
    33dc:	62 96       	adiw	r28, 0x12	; 18
    33de:	0f b6       	in	r0, 0x3f	; 63
    33e0:	f8 94       	cli
    33e2:	de bf       	out	0x3e, r29	; 62
    33e4:	0f be       	out	0x3f, r0	; 63
    33e6:	cd bf       	out	0x3d, r28	; 61
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	1f 91       	pop	r17
    33ee:	0f 91       	pop	r16
    33f0:	ff 90       	pop	r15
    33f2:	ef 90       	pop	r14
    33f4:	df 90       	pop	r13
    33f6:	cf 90       	pop	r12
    33f8:	08 95       	ret

000033fa <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    33fa:	1f 93       	push	r17
    33fc:	cf 93       	push	r28
    33fe:	df 93       	push	r29
    3400:	cd b7       	in	r28, 0x3d	; 61
    3402:	de b7       	in	r29, 0x3e	; 62
    3404:	2c 97       	sbiw	r28, 0x0c	; 12
    3406:	0f b6       	in	r0, 0x3f	; 63
    3408:	f8 94       	cli
    340a:	de bf       	out	0x3e, r29	; 62
    340c:	0f be       	out	0x3f, r0	; 63
    340e:	cd bf       	out	0x3d, r28	; 61
    3410:	4f 83       	std	Y+7, r20	; 0x07
    3412:	58 87       	std	Y+8, r21	; 0x08
    3414:	69 87       	std	Y+9, r22	; 0x09
    3416:	7a 87       	std	Y+10, r23	; 0x0a
    3418:	8b 87       	std	Y+11, r24	; 0x0b
    341a:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    341c:	ce 01       	movw	r24, r28
    341e:	07 96       	adiw	r24, 0x07	; 7
    3420:	0e 94 10 18 	call	0x3020	; 0x3020 <process_tapping>
    3424:	88 23       	and	r24, r24
    3426:	c1 f0       	breq	.+48     	; 0x3458 <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    3428:	2f 81       	ldd	r18, Y+7	; 0x07
    342a:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    342c:	8a 85       	ldd	r24, Y+10	; 0x0a
    342e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3430:	89 2b       	or	r24, r25
    3432:	31 f0       	breq	.+12     	; 0x3440 <action_tapping_process+0x46>
    3434:	3f 3f       	cpi	r19, 0xFF	; 255
    3436:	11 f0       	breq	.+4      	; 0x343c <action_tapping_process+0x42>
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	03 c0       	rjmp	.+6      	; 0x3442 <action_tapping_process+0x48>
    343c:	2f 3f       	cpi	r18, 0xFF	; 255
    343e:	e1 f7       	brne	.-8      	; 0x3438 <action_tapping_process+0x3e>
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	81 11       	cpse	r24, r1
    3444:	47 c0       	rjmp	.+142    	; 0x34d4 <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    3446:	4f 81       	ldd	r20, Y+7	; 0x07
    3448:	58 85       	ldd	r21, Y+8	; 0x08
    344a:	69 85       	ldd	r22, Y+9	; 0x09
    344c:	7a 85       	ldd	r23, Y+10	; 0x0a
    344e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3450:	9c 85       	ldd	r25, Y+12	; 0x0c
    3452:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <debug_record>
    3456:	3e c0       	rjmp	.+124    	; 0x34d4 <action_tapping_process+0xda>
    3458:	86 e0       	ldi	r24, 0x06	; 6
    345a:	fe 01       	movw	r30, r28
    345c:	37 96       	adiw	r30, 0x07	; 7
    345e:	de 01       	movw	r26, r28
    3460:	11 96       	adiw	r26, 0x01	; 1
    3462:	01 90       	ld	r0, Z+
    3464:	0d 92       	st	X+, r0
    3466:	8a 95       	dec	r24
    3468:	e1 f7       	brne	.-8      	; 0x3462 <action_tapping_process+0x68>
    346a:	ff 81       	ldd	r31, Y+7	; 0x07
    346c:	e8 85       	ldd	r30, Y+8	; 0x08
    346e:	4a 85       	ldd	r20, Y+10	; 0x0a
    3470:	5b 85       	ldd	r21, Y+11	; 0x0b
    3472:	41 15       	cp	r20, r1
    3474:	51 05       	cpc	r21, r1
    3476:	31 f0       	breq	.+12     	; 0x3484 <action_tapping_process+0x8a>
    3478:	ef 3f       	cpi	r30, 0xFF	; 255
    347a:	31 f4       	brne	.+12     	; 0x3488 <action_tapping_process+0x8e>
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	ff 3f       	cpi	r31, 0xFF	; 255
    3480:	19 f4       	brne	.+6      	; 0x3488 <action_tapping_process+0x8e>
    3482:	03 c0       	rjmp	.+6      	; 0x348a <action_tapping_process+0x90>
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	01 c0       	rjmp	.+2      	; 0x348a <action_tapping_process+0x90>
    3488:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    348a:	80 fd       	sbrc	r24, 0
    348c:	23 c0       	rjmp	.+70     	; 0x34d4 <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    348e:	20 91 71 01 	lds	r18, 0x0171
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	c9 01       	movw	r24, r18
    3496:	01 96       	adiw	r24, 0x01	; 1
    3498:	87 70       	andi	r24, 0x07	; 7
    349a:	99 27       	eor	r25, r25
    349c:	60 91 70 01 	lds	r22, 0x0170
    34a0:	70 e0       	ldi	r23, 0x00	; 0
    34a2:	86 17       	cp	r24, r22
    34a4:	97 07       	cpc	r25, r23
    34a6:	f1 f1       	breq	.+124    	; 0x3524 <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    34a8:	f9 83       	std	Y+1, r31	; 0x01
    34aa:	ea 83       	std	Y+2, r30	; 0x02
    34ac:	5d 83       	std	Y+5, r21	; 0x05
    34ae:	4c 83       	std	Y+4, r20	; 0x04
    34b0:	96 e0       	ldi	r25, 0x06	; 6
    34b2:	92 9f       	mul	r25, r18
    34b4:	d0 01       	movw	r26, r0
    34b6:	93 9f       	mul	r25, r19
    34b8:	b0 0d       	add	r27, r0
    34ba:	11 24       	eor	r1, r1
    34bc:	ae 58       	subi	r26, 0x8E	; 142
    34be:	be 4f       	sbci	r27, 0xFE	; 254
    34c0:	fe 01       	movw	r30, r28
    34c2:	31 96       	adiw	r30, 0x01	; 1
    34c4:	01 90       	ld	r0, Z+
    34c6:	0d 92       	st	X+, r0
    34c8:	9a 95       	dec	r25
    34ca:	e1 f7       	brne	.-8      	; 0x34c4 <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    34cc:	80 93 71 01 	sts	0x0171, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    34d0:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    34d4:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    34d6:	80 91 70 01 	lds	r24, 0x0170
    34da:	90 91 71 01 	lds	r25, 0x0171
    34de:	89 17       	cp	r24, r25
    34e0:	79 f1       	breq	.+94     	; 0x3540 <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    34e2:	18 9f       	mul	r17, r24
    34e4:	c0 01       	movw	r24, r0
    34e6:	11 24       	eor	r1, r1
    34e8:	8e 58       	subi	r24, 0x8E	; 142
    34ea:	9e 4f       	sbci	r25, 0xFE	; 254
    34ec:	0e 94 10 18 	call	0x3020	; 0x3020 <process_tapping>
    34f0:	88 23       	and	r24, r24
    34f2:	31 f1       	breq	.+76     	; 0x3540 <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    34f4:	e0 91 70 01 	lds	r30, 0x0170
    34f8:	1e 9f       	mul	r17, r30
    34fa:	f0 01       	movw	r30, r0
    34fc:	11 24       	eor	r1, r1
    34fe:	ee 58       	subi	r30, 0x8E	; 142
    3500:	fe 4f       	sbci	r31, 0xFE	; 254
    3502:	40 81       	ld	r20, Z
    3504:	51 81       	ldd	r21, Z+1	; 0x01
    3506:	62 81       	ldd	r22, Z+2	; 0x02
    3508:	73 81       	ldd	r23, Z+3	; 0x03
    350a:	84 81       	ldd	r24, Z+4	; 0x04
    350c:	95 81       	ldd	r25, Z+5	; 0x05
    350e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3512:	80 91 70 01 	lds	r24, 0x0170
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	01 96       	adiw	r24, 0x01	; 1
    351a:	87 70       	andi	r24, 0x07	; 7
    351c:	99 27       	eor	r25, r25
    351e:	80 93 70 01 	sts	0x0170, r24
    3522:	d9 cf       	rjmp	.-78     	; 0x34d6 <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3524:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    3528:	10 92 71 01 	sts	0x0171, r1
    waiting_buffer_tail = 0;
    352c:	10 92 70 01 	sts	0x0170, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    3530:	e2 ea       	ldi	r30, 0xA2	; 162
    3532:	f1 e0       	ldi	r31, 0x01	; 1
    3534:	86 e0       	ldi	r24, 0x06	; 6
    3536:	df 01       	movw	r26, r30
    3538:	1d 92       	st	X+, r1
    353a:	8a 95       	dec	r24
    353c:	e9 f7       	brne	.-6      	; 0x3538 <action_tapping_process+0x13e>
    353e:	ca cf       	rjmp	.-108    	; 0x34d4 <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3540:	2c 96       	adiw	r28, 0x0c	; 12
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	de bf       	out	0x3e, r29	; 62
    3548:	0f be       	out	0x3f, r0	; 63
    354a:	cd bf       	out	0x3d, r28	; 61
    354c:	df 91       	pop	r29
    354e:	cf 91       	pop	r28
    3550:	1f 91       	pop	r17
    3552:	08 95       	ret

00003554 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3554:	ef 92       	push	r14
    3556:	ff 92       	push	r15
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    3562:	00 97       	sbiw	r24, 0x00	; 0
    3564:	09 f4       	brne	.+2      	; 0x3568 <action_macro_play+0x14>
    3566:	6d c0       	rjmp	.+218    	; 0x3642 <action_macro_play+0xee>
    3568:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    356a:	ee 24       	eor	r14, r14
    356c:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    356e:	ef 01       	movw	r28, r30
    3570:	21 96       	adiw	r28, 0x01	; 1
    3572:	84 91       	lpm	r24, Z
    3574:	84 37       	cpi	r24, 0x74	; 116
    3576:	40 f4       	brcc	.+16     	; 0x3588 <action_macro_play+0x34>
    3578:	84 30       	cpi	r24, 0x04	; 4
    357a:	08 f0       	brcs	.+2      	; 0x357e <action_macro_play+0x2a>
    357c:	53 c0       	rjmp	.+166    	; 0x3624 <action_macro_play+0xd0>
    357e:	81 30       	cpi	r24, 0x01	; 1
    3580:	81 f0       	breq	.+32     	; 0x35a2 <action_macro_play+0x4e>
    3582:	82 30       	cpi	r24, 0x02	; 2
    3584:	21 f1       	breq	.+72     	; 0x35ce <action_macro_play+0x7a>
    3586:	5d c0       	rjmp	.+186    	; 0x3642 <action_macro_play+0xee>
    3588:	85 37       	cpi	r24, 0x75	; 117
    358a:	09 f4       	brne	.+2      	; 0x358e <action_macro_play+0x3a>
    358c:	45 c0       	rjmp	.+138    	; 0x3618 <action_macro_play+0xc4>
    358e:	b0 f1       	brcs	.+108    	; 0x35fc <action_macro_play+0xa8>
    3590:	9c e7       	ldi	r25, 0x7C	; 124
    3592:	98 0f       	add	r25, r24
    3594:	90 37       	cpi	r25, 0x70	; 112
    3596:	08 f0       	brcs	.+2      	; 0x359a <action_macro_play+0x46>
    3598:	54 c0       	rjmp	.+168    	; 0x3642 <action_macro_play+0xee>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    359a:	8f 77       	andi	r24, 0x7F	; 127
    359c:	0e 94 c0 13 	call	0x2780	; 0x2780 <unregister_code>
                break;
    35a0:	43 c0       	rjmp	.+134    	; 0x3628 <action_macro_play+0xd4>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    35a2:	8f 01       	movw	r16, r30
    35a4:	0e 5f       	subi	r16, 0xFE	; 254
    35a6:	1f 4f       	sbci	r17, 0xFF	; 255
    35a8:	fe 01       	movw	r30, r28
    35aa:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    35ac:	90 e2       	ldi	r25, 0x20	; 32
    35ae:	98 0f       	add	r25, r24
    35b0:	98 30       	cpi	r25, 0x08	; 8
    35b2:	50 f4       	brcc	.+20     	; 0x35c8 <action_macro_play+0x74>
                    add_weak_mods(MOD_BIT(macro));
    35b4:	87 70       	andi	r24, 0x07	; 7
    35b6:	fe 2d       	mov	r31, r14
    35b8:	01 c0       	rjmp	.+2      	; 0x35bc <action_macro_play+0x68>
    35ba:	ff 0f       	add	r31, r31
    35bc:	8a 95       	dec	r24
    35be:	ea f7       	brpl	.-6      	; 0x35ba <action_macro_play+0x66>
    35c0:	8f 2f       	mov	r24, r31
    35c2:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <add_weak_mods>
    35c6:	15 c0       	rjmp	.+42     	; 0x35f2 <action_macro_play+0x9e>
                } else {
                    register_code(macro);
    35c8:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <register_code>
    35cc:	12 c0       	rjmp	.+36     	; 0x35f2 <action_macro_play+0x9e>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    35ce:	8f 01       	movw	r16, r30
    35d0:	0e 5f       	subi	r16, 0xFE	; 254
    35d2:	1f 4f       	sbci	r17, 0xFF	; 255
    35d4:	fe 01       	movw	r30, r28
    35d6:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    35d8:	90 e2       	ldi	r25, 0x20	; 32
    35da:	98 0f       	add	r25, r24
    35dc:	98 30       	cpi	r25, 0x08	; 8
    35de:	58 f4       	brcc	.+22     	; 0x35f6 <action_macro_play+0xa2>
                    del_weak_mods(MOD_BIT(macro));
    35e0:	87 70       	andi	r24, 0x07	; 7
    35e2:	fe 2d       	mov	r31, r14
    35e4:	01 c0       	rjmp	.+2      	; 0x35e8 <action_macro_play+0x94>
    35e6:	ff 0f       	add	r31, r31
    35e8:	8a 95       	dec	r24
    35ea:	ea f7       	brpl	.-6      	; 0x35e6 <action_macro_play+0x92>
    35ec:	8f 2f       	mov	r24, r31
    35ee:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <del_weak_mods>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    35f2:	e8 01       	movw	r28, r16
    35f4:	19 c0       	rjmp	.+50     	; 0x3628 <action_macro_play+0xd4>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                } else {
                    unregister_code(macro);
    35f6:	0e 94 c0 13 	call	0x2780	; 0x2780 <unregister_code>
    35fa:	fb cf       	rjmp	.-10     	; 0x35f2 <action_macro_play+0x9e>
                }
                break;
            case WAIT:
                MACRO_READ();
    35fc:	cf 01       	movw	r24, r30
    35fe:	02 96       	adiw	r24, 0x02	; 2
    3600:	fe 01       	movw	r30, r28
    3602:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3604:	cc 23       	and	r28, r28
    3606:	61 f0       	breq	.+24     	; 0x3620 <action_macro_play+0xcc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3608:	ef e9       	ldi	r30, 0x9F	; 159
    360a:	ff e0       	ldi	r31, 0x0F	; 15
    360c:	31 97       	sbiw	r30, 0x01	; 1
    360e:	f1 f7       	brne	.-4      	; 0x360c <action_macro_play+0xb8>
    3610:	00 c0       	rjmp	.+0      	; 0x3612 <action_macro_play+0xbe>
    3612:	00 00       	nop
    3614:	c1 50       	subi	r28, 0x01	; 1
    3616:	f6 cf       	rjmp	.-20     	; 0x3604 <action_macro_play+0xb0>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3618:	cf 01       	movw	r24, r30
    361a:	02 96       	adiw	r24, 0x02	; 2
    361c:	fe 01       	movw	r30, r28
    361e:	f4 90       	lpm	r15, Z
    3620:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    3622:	02 c0       	rjmp	.+4      	; 0x3628 <action_macro_play+0xd4>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3624:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3628:	8f 2d       	mov	r24, r15
    362a:	88 23       	and	r24, r24
    362c:	41 f0       	breq	.+16     	; 0x363e <action_macro_play+0xea>
    362e:	ef e9       	ldi	r30, 0x9F	; 159
    3630:	ff e0       	ldi	r31, 0x0F	; 15
    3632:	31 97       	sbiw	r30, 0x01	; 1
    3634:	f1 f7       	brne	.-4      	; 0x3632 <action_macro_play+0xde>
    3636:	00 c0       	rjmp	.+0      	; 0x3638 <action_macro_play+0xe4>
    3638:	00 00       	nop
    363a:	81 50       	subi	r24, 0x01	; 1
    363c:	f6 cf       	rjmp	.-20     	; 0x362a <action_macro_play+0xd6>
    363e:	fe 01       	movw	r30, r28
    3640:	96 cf       	rjmp	.-212    	; 0x356e <action_macro_play+0x1a>
    }
}
    3642:	df 91       	pop	r29
    3644:	cf 91       	pop	r28
    3646:	1f 91       	pop	r17
    3648:	0f 91       	pop	r16
    364a:	ff 90       	pop	r15
    364c:	ef 90       	pop	r14
    364e:	08 95       	ret

00003650 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    3650:	08 95       	ret

00003652 <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3652:	60 93 ac 01 	sts	0x01AC, r22
    3656:	70 93 ad 01 	sts	0x01AD, r23
    365a:	80 93 ae 01 	sts	0x01AE, r24
    365e:	90 93 af 01 	sts	0x01AF, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3662:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <clear_keyboard_but_mods>

00003666 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3666:	0f 93       	push	r16
    3668:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    366a:	00 91 ac 01 	lds	r16, 0x01AC
    366e:	10 91 ad 01 	lds	r17, 0x01AD
    3672:	20 91 ae 01 	lds	r18, 0x01AE
    3676:	30 91 af 01 	lds	r19, 0x01AF
    367a:	06 2b       	or	r16, r22
    367c:	17 2b       	or	r17, r23
    367e:	28 2b       	or	r18, r24
    3680:	39 2b       	or	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3682:	00 93 ac 01 	sts	0x01AC, r16
    3686:	10 93 ad 01 	sts	0x01AD, r17
    368a:	20 93 ae 01 	sts	0x01AE, r18
    368e:	30 93 af 01 	sts	0x01AF, r19

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    3692:	1f 91       	pop	r17
    3694:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3696:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <clear_keyboard_but_mods>

0000369a <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    369a:	0f 93       	push	r16
    369c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    369e:	00 91 ac 01 	lds	r16, 0x01AC
    36a2:	10 91 ad 01 	lds	r17, 0x01AD
    36a6:	20 91 ae 01 	lds	r18, 0x01AE
    36aa:	30 91 af 01 	lds	r19, 0x01AF
    36ae:	06 23       	and	r16, r22
    36b0:	17 23       	and	r17, r23
    36b2:	28 23       	and	r18, r24
    36b4:	39 23       	and	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    36b6:	00 93 ac 01 	sts	0x01AC, r16
    36ba:	10 93 ad 01 	sts	0x01AD, r17
    36be:	20 93 ae 01 	sts	0x01AE, r18
    36c2:	30 93 af 01 	sts	0x01AF, r19
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    36c6:	1f 91       	pop	r17
    36c8:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    36ca:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <clear_keyboard_but_mods>

000036ce <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    36ce:	0f 93       	push	r16
    36d0:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    36d2:	00 91 ac 01 	lds	r16, 0x01AC
    36d6:	10 91 ad 01 	lds	r17, 0x01AD
    36da:	20 91 ae 01 	lds	r18, 0x01AE
    36de:	30 91 af 01 	lds	r19, 0x01AF
    36e2:	06 27       	eor	r16, r22
    36e4:	17 27       	eor	r17, r23
    36e6:	28 27       	eor	r18, r24
    36e8:	39 27       	eor	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    36ea:	00 93 ac 01 	sts	0x01AC, r16
    36ee:	10 93 ad 01 	sts	0x01AD, r17
    36f2:	20 93 ae 01 	sts	0x01AE, r18
    36f6:	30 93 af 01 	sts	0x01AF, r19
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    36fa:	1f 91       	pop	r17
    36fc:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    36fe:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <clear_keyboard_but_mods>

00003702 <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3702:	10 92 a8 01 	sts	0x01A8, r1
    3706:	10 92 a9 01 	sts	0x01A9, r1
    370a:	10 92 aa 01 	sts	0x01AA, r1
    370e:	10 92 ab 01 	sts	0x01AB, r1
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3712:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <clear_keyboard_but_mods>

00003716 <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3716:	41 e0       	ldi	r20, 0x01	; 1
    3718:	50 e0       	ldi	r21, 0x00	; 0
    371a:	60 e0       	ldi	r22, 0x00	; 0
    371c:	70 e0       	ldi	r23, 0x00	; 0
    371e:	04 c0       	rjmp	.+8      	; 0x3728 <layer_move+0x12>
    3720:	44 0f       	add	r20, r20
    3722:	55 1f       	adc	r21, r21
    3724:	66 1f       	adc	r22, r22
    3726:	77 1f       	adc	r23, r23
    3728:	8a 95       	dec	r24
    372a:	d2 f7       	brpl	.-12     	; 0x3720 <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    372c:	40 93 a8 01 	sts	0x01A8, r20
    3730:	50 93 a9 01 	sts	0x01A9, r21
    3734:	60 93 aa 01 	sts	0x01AA, r22
    3738:	70 93 ab 01 	sts	0x01AB, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    373c:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <clear_keyboard_but_mods>

00003740 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3740:	41 e0       	ldi	r20, 0x01	; 1
    3742:	50 e0       	ldi	r21, 0x00	; 0
    3744:	60 e0       	ldi	r22, 0x00	; 0
    3746:	70 e0       	ldi	r23, 0x00	; 0
    3748:	04 c0       	rjmp	.+8      	; 0x3752 <layer_on+0x12>
    374a:	44 0f       	add	r20, r20
    374c:	55 1f       	adc	r21, r21
    374e:	66 1f       	adc	r22, r22
    3750:	77 1f       	adc	r23, r23
    3752:	8a 95       	dec	r24
    3754:	d2 f7       	brpl	.-12     	; 0x374a <layer_on+0xa>
    3756:	80 91 a8 01 	lds	r24, 0x01A8
    375a:	90 91 a9 01 	lds	r25, 0x01A9
    375e:	a0 91 aa 01 	lds	r26, 0x01AA
    3762:	b0 91 ab 01 	lds	r27, 0x01AB
    3766:	84 2b       	or	r24, r20
    3768:	95 2b       	or	r25, r21
    376a:	a6 2b       	or	r26, r22
    376c:	b7 2b       	or	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    376e:	80 93 a8 01 	sts	0x01A8, r24
    3772:	90 93 a9 01 	sts	0x01A9, r25
    3776:	a0 93 aa 01 	sts	0x01AA, r26
    377a:	b0 93 ab 01 	sts	0x01AB, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    377e:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <clear_keyboard_but_mods>

00003782 <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3782:	41 e0       	ldi	r20, 0x01	; 1
    3784:	50 e0       	ldi	r21, 0x00	; 0
    3786:	60 e0       	ldi	r22, 0x00	; 0
    3788:	70 e0       	ldi	r23, 0x00	; 0
    378a:	04 c0       	rjmp	.+8      	; 0x3794 <layer_off+0x12>
    378c:	44 0f       	add	r20, r20
    378e:	55 1f       	adc	r21, r21
    3790:	66 1f       	adc	r22, r22
    3792:	77 1f       	adc	r23, r23
    3794:	8a 95       	dec	r24
    3796:	d2 f7       	brpl	.-12     	; 0x378c <layer_off+0xa>
    3798:	40 95       	com	r20
    379a:	50 95       	com	r21
    379c:	60 95       	com	r22
    379e:	70 95       	com	r23
    37a0:	80 91 a8 01 	lds	r24, 0x01A8
    37a4:	90 91 a9 01 	lds	r25, 0x01A9
    37a8:	a0 91 aa 01 	lds	r26, 0x01AA
    37ac:	b0 91 ab 01 	lds	r27, 0x01AB
    37b0:	84 23       	and	r24, r20
    37b2:	95 23       	and	r25, r21
    37b4:	a6 23       	and	r26, r22
    37b6:	b7 23       	and	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    37b8:	80 93 a8 01 	sts	0x01A8, r24
    37bc:	90 93 a9 01 	sts	0x01A9, r25
    37c0:	a0 93 aa 01 	sts	0x01AA, r26
    37c4:	b0 93 ab 01 	sts	0x01AB, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    37c8:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <clear_keyboard_but_mods>

000037cc <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    37cc:	41 e0       	ldi	r20, 0x01	; 1
    37ce:	50 e0       	ldi	r21, 0x00	; 0
    37d0:	60 e0       	ldi	r22, 0x00	; 0
    37d2:	70 e0       	ldi	r23, 0x00	; 0
    37d4:	04 c0       	rjmp	.+8      	; 0x37de <layer_invert+0x12>
    37d6:	44 0f       	add	r20, r20
    37d8:	55 1f       	adc	r21, r21
    37da:	66 1f       	adc	r22, r22
    37dc:	77 1f       	adc	r23, r23
    37de:	8a 95       	dec	r24
    37e0:	d2 f7       	brpl	.-12     	; 0x37d6 <layer_invert+0xa>
    37e2:	80 91 a8 01 	lds	r24, 0x01A8
    37e6:	90 91 a9 01 	lds	r25, 0x01A9
    37ea:	a0 91 aa 01 	lds	r26, 0x01AA
    37ee:	b0 91 ab 01 	lds	r27, 0x01AB
    37f2:	84 27       	eor	r24, r20
    37f4:	95 27       	eor	r25, r21
    37f6:	a6 27       	eor	r26, r22
    37f8:	b7 27       	eor	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    37fa:	80 93 a8 01 	sts	0x01A8, r24
    37fe:	90 93 a9 01 	sts	0x01A9, r25
    3802:	a0 93 aa 01 	sts	0x01AA, r26
    3806:	b0 93 ab 01 	sts	0x01AB, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    380a:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <clear_keyboard_but_mods>

0000380e <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    380e:	0f 93       	push	r16
    3810:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3812:	00 91 a8 01 	lds	r16, 0x01A8
    3816:	10 91 a9 01 	lds	r17, 0x01A9
    381a:	20 91 aa 01 	lds	r18, 0x01AA
    381e:	30 91 ab 01 	lds	r19, 0x01AB
    3822:	06 2b       	or	r16, r22
    3824:	17 2b       	or	r17, r23
    3826:	28 2b       	or	r18, r24
    3828:	39 2b       	or	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    382a:	00 93 a8 01 	sts	0x01A8, r16
    382e:	10 93 a9 01 	sts	0x01A9, r17
    3832:	20 93 aa 01 	sts	0x01AA, r18
    3836:	30 93 ab 01 	sts	0x01AB, r19
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    383a:	1f 91       	pop	r17
    383c:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    383e:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <clear_keyboard_but_mods>

00003842 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    3842:	0f 93       	push	r16
    3844:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3846:	00 91 a8 01 	lds	r16, 0x01A8
    384a:	10 91 a9 01 	lds	r17, 0x01A9
    384e:	20 91 aa 01 	lds	r18, 0x01AA
    3852:	30 91 ab 01 	lds	r19, 0x01AB
    3856:	06 23       	and	r16, r22
    3858:	17 23       	and	r17, r23
    385a:	28 23       	and	r18, r24
    385c:	39 23       	and	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    385e:	00 93 a8 01 	sts	0x01A8, r16
    3862:	10 93 a9 01 	sts	0x01A9, r17
    3866:	20 93 aa 01 	sts	0x01AA, r18
    386a:	30 93 ab 01 	sts	0x01AB, r19
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    386e:	1f 91       	pop	r17
    3870:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3872:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <clear_keyboard_but_mods>

00003876 <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    3876:	0f 93       	push	r16
    3878:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    387a:	00 91 a8 01 	lds	r16, 0x01A8
    387e:	10 91 a9 01 	lds	r17, 0x01A9
    3882:	20 91 aa 01 	lds	r18, 0x01AA
    3886:	30 91 ab 01 	lds	r19, 0x01AB
    388a:	06 27       	eor	r16, r22
    388c:	17 27       	eor	r17, r23
    388e:	28 27       	eor	r18, r24
    3890:	39 27       	eor	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3892:	00 93 a8 01 	sts	0x01A8, r16
    3896:	10 93 a9 01 	sts	0x01A9, r17
    389a:	20 93 aa 01 	sts	0x01AA, r18
    389e:	30 93 ab 01 	sts	0x01AB, r19
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    38a2:	1f 91       	pop	r17
    38a4:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    38a6:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <clear_keyboard_but_mods>

000038aa <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    38aa:	08 95       	ret

000038ac <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    38ac:	cf 92       	push	r12
    38ae:	df 92       	push	r13
    38b0:	ef 92       	push	r14
    38b2:	ff 92       	push	r15
    38b4:	0f 93       	push	r16
    38b6:	1f 93       	push	r17
    38b8:	cf 93       	push	r28
    38ba:	df 93       	push	r29
    38bc:	ec 01       	movw	r28, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    38be:	c0 90 ac 01 	lds	r12, 0x01AC
    38c2:	d0 90 ad 01 	lds	r13, 0x01AD
    38c6:	e0 90 ae 01 	lds	r14, 0x01AE
    38ca:	f0 90 af 01 	lds	r15, 0x01AF
    38ce:	80 91 a8 01 	lds	r24, 0x01A8
    38d2:	90 91 a9 01 	lds	r25, 0x01A9
    38d6:	a0 91 aa 01 	lds	r26, 0x01AA
    38da:	b0 91 ab 01 	lds	r27, 0x01AB
    38de:	c8 2a       	or	r12, r24
    38e0:	d9 2a       	or	r13, r25
    38e2:	ea 2a       	or	r14, r26
    38e4:	fb 2a       	or	r15, r27
    38e6:	0f e1       	ldi	r16, 0x1F	; 31
    38e8:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    38ea:	b7 01       	movw	r22, r14
    38ec:	a6 01       	movw	r20, r12
    38ee:	00 2e       	mov	r0, r16
    38f0:	04 c0       	rjmp	.+8      	; 0x38fa <layer_switch_get_action+0x4e>
    38f2:	76 95       	lsr	r23
    38f4:	67 95       	ror	r22
    38f6:	57 95       	ror	r21
    38f8:	47 95       	ror	r20
    38fa:	0a 94       	dec	r0
    38fc:	d2 f7       	brpl	.-12     	; 0x38f2 <layer_switch_get_action+0x46>
    38fe:	40 ff       	sbrs	r20, 0
    3900:	07 c0       	rjmp	.+14     	; 0x3910 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    3902:	be 01       	movw	r22, r28
    3904:	80 2f       	mov	r24, r16
    3906:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    390a:	81 30       	cpi	r24, 0x01	; 1
    390c:	91 05       	cpc	r25, r1
    390e:	39 f4       	brne	.+14     	; 0x391e <layer_switch_get_action+0x72>
    3910:	01 50       	subi	r16, 0x01	; 1
    3912:	11 09       	sbc	r17, r1
    3914:	50 f7       	brcc	.-44     	; 0x38ea <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3916:	be 01       	movw	r22, r28
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    391e:	df 91       	pop	r29
    3920:	cf 91       	pop	r28
    3922:	1f 91       	pop	r17
    3924:	0f 91       	pop	r16
    3926:	ff 90       	pop	r15
    3928:	ef 90       	pop	r14
    392a:	df 90       	pop	r13
    392c:	cf 90       	pop	r12
    392e:	08 95       	ret

00003930 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    3930:	90 91 0c 01 	lds	r25, 0x010C
    3934:	99 23       	and	r25, r25
    3936:	41 f1       	breq	.+80     	; 0x3988 <add_key+0x58>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3938:	98 2f       	mov	r25, r24
    393a:	96 95       	lsr	r25
    393c:	96 95       	lsr	r25
    393e:	96 95       	lsr	r25
    3940:	9f 30       	cpi	r25, 0x0F	; 15
    3942:	88 f4       	brcc	.+34     	; 0x3966 <add_key+0x36>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3944:	e0 91 0d 01 	lds	r30, 0x010D
    3948:	f0 91 0e 01 	lds	r31, 0x010E
    394c:	e9 0f       	add	r30, r25
    394e:	f1 1d       	adc	r31, r1
    3950:	87 70       	andi	r24, 0x07	; 7
    3952:	21 e0       	ldi	r18, 0x01	; 1
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	01 c0       	rjmp	.+2      	; 0x395a <add_key+0x2a>
    3958:	22 0f       	add	r18, r18
    395a:	8a 95       	dec	r24
    395c:	ea f7       	brpl	.-6      	; 0x3958 <add_key+0x28>
    395e:	81 81       	ldd	r24, Z+1	; 0x01
    3960:	82 2b       	or	r24, r18
    3962:	81 83       	std	Z+1, r24	; 0x01
    3964:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3966:	90 91 c3 01 	lds	r25, 0x01C3
    396a:	90 ff       	sbrs	r25, 0
    396c:	2d c0       	rjmp	.+90     	; 0x39c8 <add_key+0x98>
    396e:	1f 92       	push	r1
    3970:	8f 93       	push	r24
    3972:	80 e5       	ldi	r24, 0x50	; 80
    3974:	94 e0       	ldi	r25, 0x04	; 4
    3976:	9f 93       	push	r25
    3978:	8f 93       	push	r24
    397a:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    397e:	0f 90       	pop	r0
    3980:	0f 90       	pop	r0
    3982:	0f 90       	pop	r0
    3984:	0f 90       	pop	r0
    3986:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3988:	40 91 0d 01 	lds	r20, 0x010D
    398c:	50 91 0e 01 	lds	r21, 0x010E
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	9f ef       	ldi	r25, 0xFF	; 255
    3996:	fa 01       	movw	r30, r20
    3998:	e2 0f       	add	r30, r18
    399a:	f3 1f       	adc	r31, r19
    399c:	62 81       	ldd	r22, Z+2	; 0x02
    399e:	68 17       	cp	r22, r24
    39a0:	99 f0       	breq	.+38     	; 0x39c8 <add_key+0x98>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    39a2:	9f 3f       	cpi	r25, 0xFF	; 255
    39a4:	19 f4       	brne	.+6      	; 0x39ac <add_key+0x7c>
    39a6:	61 11       	cpse	r22, r1
    39a8:	01 c0       	rjmp	.+2      	; 0x39ac <add_key+0x7c>
    39aa:	92 2f       	mov	r25, r18
    39ac:	2f 5f       	subi	r18, 0xFF	; 255
    39ae:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    39b0:	2e 30       	cpi	r18, 0x0E	; 14
    39b2:	31 05       	cpc	r19, r1
    39b4:	81 f7       	brne	.-32     	; 0x3996 <add_key+0x66>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    39b6:	9f 3f       	cpi	r25, 0xFF	; 255
    39b8:	39 f0       	breq	.+14     	; 0x39c8 <add_key+0x98>
            keyboard_report->keys[empty] = code;
    39ba:	fa 01       	movw	r30, r20
    39bc:	e9 0f       	add	r30, r25
    39be:	f1 1d       	adc	r31, r1
    39c0:	97 fd       	sbrc	r25, 7
    39c2:	fa 95       	dec	r31
    39c4:	82 83       	std	Z+2, r24	; 0x02
    39c6:	08 95       	ret
    39c8:	08 95       	ret

000039ca <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    39ca:	90 91 0c 01 	lds	r25, 0x010C
    39ce:	99 23       	and	r25, r25
    39d0:	49 f1       	breq	.+82     	; 0x3a24 <del_key+0x5a>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    39d2:	98 2f       	mov	r25, r24
    39d4:	96 95       	lsr	r25
    39d6:	96 95       	lsr	r25
    39d8:	96 95       	lsr	r25
    39da:	9f 30       	cpi	r25, 0x0F	; 15
    39dc:	90 f4       	brcc	.+36     	; 0x3a02 <del_key+0x38>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    39de:	e0 91 0d 01 	lds	r30, 0x010D
    39e2:	f0 91 0e 01 	lds	r31, 0x010E
    39e6:	e9 0f       	add	r30, r25
    39e8:	f1 1d       	adc	r31, r1
    39ea:	87 70       	andi	r24, 0x07	; 7
    39ec:	21 e0       	ldi	r18, 0x01	; 1
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	01 c0       	rjmp	.+2      	; 0x39f4 <del_key+0x2a>
    39f2:	22 0f       	add	r18, r18
    39f4:	8a 95       	dec	r24
    39f6:	ea f7       	brpl	.-6      	; 0x39f2 <del_key+0x28>
    39f8:	20 95       	com	r18
    39fa:	81 81       	ldd	r24, Z+1	; 0x01
    39fc:	28 23       	and	r18, r24
    39fe:	21 83       	std	Z+1, r18	; 0x01
    3a00:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3a02:	90 91 c3 01 	lds	r25, 0x01C3
    3a06:	90 ff       	sbrs	r25, 0
    3a08:	1f c0       	rjmp	.+62     	; 0x3a48 <del_key+0x7e>
    3a0a:	1f 92       	push	r1
    3a0c:	8f 93       	push	r24
    3a0e:	82 e3       	ldi	r24, 0x32	; 50
    3a10:	94 e0       	ldi	r25, 0x04	; 4
    3a12:	9f 93       	push	r25
    3a14:	8f 93       	push	r24
    3a16:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    3a1a:	0f 90       	pop	r0
    3a1c:	0f 90       	pop	r0
    3a1e:	0f 90       	pop	r0
    3a20:	0f 90       	pop	r0
    3a22:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3a24:	40 91 0d 01 	lds	r20, 0x010D
    3a28:	50 91 0e 01 	lds	r21, 0x010E
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	fa 01       	movw	r30, r20
    3a32:	e2 0f       	add	r30, r18
    3a34:	f3 1f       	adc	r31, r19
    3a36:	92 81       	ldd	r25, Z+2	; 0x02
    3a38:	98 13       	cpse	r25, r24
    3a3a:	01 c0       	rjmp	.+2      	; 0x3a3e <del_key+0x74>
            keyboard_report->keys[i] = 0;
    3a3c:	12 82       	std	Z+2, r1	; 0x02
    3a3e:	2f 5f       	subi	r18, 0xFF	; 255
    3a40:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3a42:	2e 30       	cpi	r18, 0x0E	; 14
    3a44:	31 05       	cpc	r19, r1
    3a46:	a1 f7       	brne	.-24     	; 0x3a30 <del_key+0x66>
    3a48:	08 95       	ret

00003a4a <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3a4e:	e0 91 0d 01 	lds	r30, 0x010D
    3a52:	f0 91 0e 01 	lds	r31, 0x010E
    3a56:	e8 0f       	add	r30, r24
    3a58:	f9 1f       	adc	r31, r25
    3a5a:	10 82       	st	Z, r1
    3a5c:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3a5e:	80 31       	cpi	r24, 0x10	; 16
    3a60:	91 05       	cpc	r25, r1
    3a62:	a9 f7       	brne	.-22     	; 0x3a4e <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3a64:	08 95       	ret

00003a66 <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    3a66:	90 91 c2 01 	lds	r25, 0x01C2
    3a6a:	98 2b       	or	r25, r24
    3a6c:	90 93 c2 01 	sts	0x01C2, r25
    3a70:	08 95       	ret

00003a72 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3a72:	80 95       	com	r24
    3a74:	90 91 c2 01 	lds	r25, 0x01C2
    3a78:	98 23       	and	r25, r24
    3a7a:	90 93 c2 01 	sts	0x01C2, r25
    3a7e:	08 95       	ret

00003a80 <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    3a80:	10 92 c2 01 	sts	0x01C2, r1
    3a84:	08 95       	ret

00003a86 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3a86:	90 91 c1 01 	lds	r25, 0x01C1
    3a8a:	98 2b       	or	r25, r24
    3a8c:	90 93 c1 01 	sts	0x01C1, r25
    3a90:	08 95       	ret

00003a92 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3a92:	80 95       	com	r24
    3a94:	90 91 c1 01 	lds	r25, 0x01C1
    3a98:	98 23       	and	r25, r24
    3a9a:	90 93 c1 01 	sts	0x01C1, r25
    3a9e:	08 95       	ret

00003aa0 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3aa0:	10 92 c1 01 	sts	0x01C1, r1
    3aa4:	08 95       	ret

00003aa6 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3aa6:	80 93 b0 01 	sts	0x01B0, r24
    3aaa:	08 95       	ret

00003aac <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3aac:	10 92 b0 01 	sts	0x01B0, r1
    3ab0:	08 95       	ret

00003ab2 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3ab2:	40 91 0d 01 	lds	r20, 0x010D
    3ab6:	50 91 0e 01 	lds	r21, 0x010E
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	fa 01       	movw	r30, r20
    3ac2:	e2 0f       	add	r30, r18
    3ac4:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3ac6:	91 81       	ldd	r25, Z+1	; 0x01
    3ac8:	91 11       	cpse	r25, r1
            cnt++;
    3aca:	8f 5f       	subi	r24, 0xFF	; 255
    3acc:	2f 5f       	subi	r18, 0xFF	; 255
    3ace:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3ad0:	2f 30       	cpi	r18, 0x0F	; 15
    3ad2:	31 05       	cpc	r19, r1
    3ad4:	a9 f7       	brne	.-22     	; 0x3ac0 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3ad6:	08 95       	ret

00003ad8 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3ad8:	e0 91 0d 01 	lds	r30, 0x010D
    3adc:	f0 91 0e 01 	lds	r31, 0x010E
    3ae0:	80 91 c2 01 	lds	r24, 0x01C2
    3ae4:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3ae6:	e0 91 0d 01 	lds	r30, 0x010D
    3aea:	f0 91 0e 01 	lds	r31, 0x010E
    3aee:	80 81       	ld	r24, Z
    3af0:	90 91 c1 01 	lds	r25, 0x01C1
    3af4:	89 2b       	or	r24, r25
    3af6:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3af8:	90 91 b0 01 	lds	r25, 0x01B0
    3afc:	99 23       	and	r25, r25
    3afe:	61 f0       	breq	.+24     	; 0x3b18 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3b00:	e0 91 0d 01 	lds	r30, 0x010D
    3b04:	f0 91 0e 01 	lds	r31, 0x010E
    3b08:	80 81       	ld	r24, Z
    3b0a:	89 2b       	or	r24, r25
    3b0c:	80 83       	st	Z, r24
        if (has_anykey()) {
    3b0e:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <has_anykey>
    3b12:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3b14:	10 92 b0 01 	sts	0x01B0, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3b18:	80 91 0d 01 	lds	r24, 0x010D
    3b1c:	90 91 0e 01 	lds	r25, 0x010E
    3b20:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <host_keyboard_send>

00003b24 <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    3b24:	8b 3b       	cpi	r24, 0xBB	; 187
    3b26:	60 f4       	brcc	.+24     	; 0x3b40 <keycode_to_action+0x1c>
    3b28:	88 3a       	cpi	r24, 0xA8	; 168
    3b2a:	00 f5       	brcc	.+64     	; 0x3b6c <keycode_to_action+0x48>
    3b2c:	85 3a       	cpi	r24, 0xA5	; 165
    3b2e:	a8 f4       	brcc	.+42     	; 0x3b5a <keycode_to_action+0x36>
    3b30:	84 30       	cpi	r24, 0x04	; 4
    3b32:	88 f4       	brcc	.+34     	; 0x3b56 <keycode_to_action+0x32>
    3b34:	81 30       	cpi	r24, 0x01	; 1
    3b36:	09 f0       	breq	.+2      	; 0x3b3a <keycode_to_action+0x16>
    3b38:	55 c0       	rjmp	.+170    	; 0x3be4 <keycode_to_action+0xc0>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3b3a:	81 e0       	ldi	r24, 0x01	; 1
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    3b40:	80 3e       	cpi	r24, 0xE0	; 224
    3b42:	08 f4       	brcc	.+2      	; 0x3b46 <keycode_to_action+0x22>
    3b44:	4f c0       	rjmp	.+158    	; 0x3be4 <keycode_to_action+0xc0>
    3b46:	88 3e       	cpi	r24, 0xE8	; 232
    3b48:	30 f0       	brcs	.+12     	; 0x3b56 <keycode_to_action+0x32>
    3b4a:	80 3f       	cpi	r24, 0xF0	; 240
    3b4c:	08 f4       	brcc	.+2      	; 0x3b50 <keycode_to_action+0x2c>
    3b4e:	4a c0       	rjmp	.+148    	; 0x3be4 <keycode_to_action+0xc0>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	90 65       	ori	r25, 0x50	; 80
            break;
    3b54:	08 95       	ret
{
    action_t action;
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3b56:	90 e0       	ldi	r25, 0x00	; 0
            break;
    3b58:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3b5a:	85 3a       	cpi	r24, 0xA5	; 165
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <keycode_to_action+0x3c>
    3b5e:	45 c0       	rjmp	.+138    	; 0x3bea <keycode_to_action+0xc6>
    3b60:	86 3a       	cpi	r24, 0xA6	; 166
    3b62:	09 f0       	breq	.+2      	; 0x3b66 <keycode_to_action+0x42>
    3b64:	45 c0       	rjmp	.+138    	; 0x3bf0 <keycode_to_action+0xcc>
    3b66:	82 e8       	ldi	r24, 0x82	; 130
    3b68:	90 e4       	ldi	r25, 0x40	; 64
    3b6a:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3b6c:	88 3a       	cpi	r24, 0xA8	; 168
    3b6e:	09 f4       	brne	.+2      	; 0x3b72 <keycode_to_action+0x4e>
    3b70:	42 c0       	rjmp	.+132    	; 0x3bf6 <keycode_to_action+0xd2>
    3b72:	89 3a       	cpi	r24, 0xA9	; 169
    3b74:	09 f4       	brne	.+2      	; 0x3b78 <keycode_to_action+0x54>
    3b76:	42 c0       	rjmp	.+132    	; 0x3bfc <keycode_to_action+0xd8>
    3b78:	8a 3a       	cpi	r24, 0xAA	; 170
    3b7a:	09 f4       	brne	.+2      	; 0x3b7e <keycode_to_action+0x5a>
    3b7c:	42 c0       	rjmp	.+132    	; 0x3c02 <keycode_to_action+0xde>
    3b7e:	8b 3a       	cpi	r24, 0xAB	; 171
    3b80:	09 f4       	brne	.+2      	; 0x3b84 <keycode_to_action+0x60>
    3b82:	42 c0       	rjmp	.+132    	; 0x3c08 <keycode_to_action+0xe4>
    3b84:	8c 3a       	cpi	r24, 0xAC	; 172
    3b86:	09 f4       	brne	.+2      	; 0x3b8a <keycode_to_action+0x66>
    3b88:	42 c0       	rjmp	.+132    	; 0x3c0e <keycode_to_action+0xea>
    3b8a:	8d 3a       	cpi	r24, 0xAD	; 173
    3b8c:	09 f4       	brne	.+2      	; 0x3b90 <keycode_to_action+0x6c>
    3b8e:	42 c0       	rjmp	.+132    	; 0x3c14 <keycode_to_action+0xf0>
    3b90:	80 3b       	cpi	r24, 0xB0	; 176
    3b92:	09 f4       	brne	.+2      	; 0x3b96 <keycode_to_action+0x72>
    3b94:	42 c0       	rjmp	.+132    	; 0x3c1a <keycode_to_action+0xf6>
    3b96:	8e 3a       	cpi	r24, 0xAE	; 174
    3b98:	09 f4       	brne	.+2      	; 0x3b9c <keycode_to_action+0x78>
    3b9a:	42 c0       	rjmp	.+132    	; 0x3c20 <keycode_to_action+0xfc>
    3b9c:	8f 3a       	cpi	r24, 0xAF	; 175
    3b9e:	09 f4       	brne	.+2      	; 0x3ba2 <keycode_to_action+0x7e>
    3ba0:	42 c0       	rjmp	.+132    	; 0x3c26 <keycode_to_action+0x102>
    3ba2:	81 3b       	cpi	r24, 0xB1	; 177
    3ba4:	09 f4       	brne	.+2      	; 0x3ba8 <keycode_to_action+0x84>
    3ba6:	42 c0       	rjmp	.+132    	; 0x3c2c <keycode_to_action+0x108>
    3ba8:	82 3b       	cpi	r24, 0xB2	; 178
    3baa:	09 f4       	brne	.+2      	; 0x3bae <keycode_to_action+0x8a>
    3bac:	42 c0       	rjmp	.+132    	; 0x3c32 <keycode_to_action+0x10e>
    3bae:	83 3b       	cpi	r24, 0xB3	; 179
    3bb0:	09 f4       	brne	.+2      	; 0x3bb4 <keycode_to_action+0x90>
    3bb2:	42 c0       	rjmp	.+132    	; 0x3c38 <keycode_to_action+0x114>
    3bb4:	84 3b       	cpi	r24, 0xB4	; 180
    3bb6:	09 f4       	brne	.+2      	; 0x3bba <keycode_to_action+0x96>
    3bb8:	42 c0       	rjmp	.+132    	; 0x3c3e <keycode_to_action+0x11a>
    3bba:	85 3b       	cpi	r24, 0xB5	; 181
    3bbc:	09 f4       	brne	.+2      	; 0x3bc0 <keycode_to_action+0x9c>
    3bbe:	42 c0       	rjmp	.+132    	; 0x3c44 <keycode_to_action+0x120>
    3bc0:	86 3b       	cpi	r24, 0xB6	; 182
    3bc2:	09 f4       	brne	.+2      	; 0x3bc6 <keycode_to_action+0xa2>
    3bc4:	42 c0       	rjmp	.+132    	; 0x3c4a <keycode_to_action+0x126>
    3bc6:	87 3b       	cpi	r24, 0xB7	; 183
    3bc8:	09 f4       	brne	.+2      	; 0x3bcc <keycode_to_action+0xa8>
    3bca:	42 c0       	rjmp	.+132    	; 0x3c50 <keycode_to_action+0x12c>
    3bcc:	88 3b       	cpi	r24, 0xB8	; 184
    3bce:	09 f4       	brne	.+2      	; 0x3bd2 <keycode_to_action+0xae>
    3bd0:	42 c0       	rjmp	.+132    	; 0x3c56 <keycode_to_action+0x132>
    3bd2:	89 3b       	cpi	r24, 0xB9	; 185
    3bd4:	09 f4       	brne	.+2      	; 0x3bd8 <keycode_to_action+0xb4>
    3bd6:	42 c0       	rjmp	.+132    	; 0x3c5c <keycode_to_action+0x138>
    3bd8:	8a 3b       	cpi	r24, 0xBA	; 186
    3bda:	09 f0       	breq	.+2      	; 0x3bde <keycode_to_action+0xba>
    3bdc:	42 c0       	rjmp	.+132    	; 0x3c62 <keycode_to_action+0x13e>
    3bde:	8a e2       	ldi	r24, 0x2A	; 42
    3be0:	96 e4       	ldi	r25, 0x46	; 70
    3be2:	08 95       	ret
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        default:
            action.code = ACTION_NO;
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3bea:	81 e8       	ldi	r24, 0x81	; 129
    3bec:	90 e4       	ldi	r25, 0x40	; 64
    3bee:	08 95       	ret
    3bf0:	83 e8       	ldi	r24, 0x83	; 131
    3bf2:	90 e4       	ldi	r25, 0x40	; 64
    3bf4:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3bf6:	82 ee       	ldi	r24, 0xE2	; 226
    3bf8:	94 e4       	ldi	r25, 0x44	; 68
    3bfa:	08 95       	ret
    3bfc:	89 ee       	ldi	r24, 0xE9	; 233
    3bfe:	94 e4       	ldi	r25, 0x44	; 68
    3c00:	08 95       	ret
    3c02:	8a ee       	ldi	r24, 0xEA	; 234
    3c04:	94 e4       	ldi	r25, 0x44	; 68
    3c06:	08 95       	ret
    3c08:	85 eb       	ldi	r24, 0xB5	; 181
    3c0a:	94 e4       	ldi	r25, 0x44	; 68
    3c0c:	08 95       	ret
    3c0e:	86 eb       	ldi	r24, 0xB6	; 182
    3c10:	94 e4       	ldi	r25, 0x44	; 68
    3c12:	08 95       	ret
    3c14:	87 eb       	ldi	r24, 0xB7	; 183
    3c16:	94 e4       	ldi	r25, 0x44	; 68
    3c18:	08 95       	ret
    3c1a:	8c ec       	ldi	r24, 0xCC	; 204
    3c1c:	94 e4       	ldi	r25, 0x44	; 68
    3c1e:	08 95       	ret
    3c20:	8d ec       	ldi	r24, 0xCD	; 205
    3c22:	94 e4       	ldi	r25, 0x44	; 68
    3c24:	08 95       	ret
    3c26:	83 e8       	ldi	r24, 0x83	; 131
    3c28:	95 e4       	ldi	r25, 0x45	; 69
    3c2a:	08 95       	ret
    3c2c:	8a e8       	ldi	r24, 0x8A	; 138
    3c2e:	95 e4       	ldi	r25, 0x45	; 69
    3c30:	08 95       	ret
    3c32:	82 e9       	ldi	r24, 0x92	; 146
    3c34:	95 e4       	ldi	r25, 0x45	; 69
    3c36:	08 95       	ret
    3c38:	84 e9       	ldi	r24, 0x94	; 148
    3c3a:	95 e4       	ldi	r25, 0x45	; 69
    3c3c:	08 95       	ret
    3c3e:	81 e2       	ldi	r24, 0x21	; 33
    3c40:	96 e4       	ldi	r25, 0x46	; 70
    3c42:	08 95       	ret
    3c44:	83 e2       	ldi	r24, 0x23	; 35
    3c46:	96 e4       	ldi	r25, 0x46	; 70
    3c48:	08 95       	ret
    3c4a:	84 e2       	ldi	r24, 0x24	; 36
    3c4c:	96 e4       	ldi	r25, 0x46	; 70
    3c4e:	08 95       	ret
    3c50:	85 e2       	ldi	r24, 0x25	; 37
    3c52:	96 e4       	ldi	r25, 0x46	; 70
    3c54:	08 95       	ret
    3c56:	86 e2       	ldi	r24, 0x26	; 38
    3c58:	96 e4       	ldi	r25, 0x46	; 70
    3c5a:	08 95       	ret
    3c5c:	87 e2       	ldi	r24, 0x27	; 39
    3c5e:	96 e4       	ldi	r25, 0x46	; 70
    3c60:	08 95       	ret
    3c62:	80 e0       	ldi	r24, 0x00	; 0
    3c64:	94 e4       	ldi	r25, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    3c66:	08 95       	ret

00003c68 <action_for_key>:

/* converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3c68:	0e 94 b2 08 	call	0x1164	; 0x1164 <keymap_key_to_keycode>
    switch (keycode) {
    3c6c:	80 3e       	cpi	r24, 0xE0	; 224
    3c6e:	a8 f4       	brcc	.+42     	; 0x3c9a <action_for_key+0x32>
    3c70:	80 3c       	cpi	r24, 0xC0	; 192
    3c72:	00 f5       	brcc	.+64     	; 0x3cb4 <action_for_key+0x4c>
    3c74:	81 33       	cpi	r24, 0x31	; 49
    3c76:	09 f4       	brne	.+2      	; 0x3c7a <action_for_key+0x12>
    3c78:	5c c0       	rjmp	.+184    	; 0x3d32 <action_for_key+0xca>
    3c7a:	38 f4       	brcc	.+14     	; 0x3c8a <action_for_key+0x22>
    3c7c:	89 32       	cpi	r24, 0x29	; 41
    3c7e:	09 f4       	brne	.+2      	; 0x3c82 <action_for_key+0x1a>
    3c80:	52 c0       	rjmp	.+164    	; 0x3d26 <action_for_key+0xbe>
    3c82:	8a 32       	cpi	r24, 0x2A	; 42
    3c84:	09 f4       	brne	.+2      	; 0x3c88 <action_for_key+0x20>
    3c86:	5b c0       	rjmp	.+182    	; 0x3d3e <action_for_key+0xd6>
    3c88:	5f c0       	rjmp	.+190    	; 0x3d48 <action_for_key+0xe0>
    3c8a:	89 33       	cpi	r24, 0x39	; 57
    3c8c:	b1 f0       	breq	.+44     	; 0x3cba <action_for_key+0x52>
    3c8e:	82 38       	cpi	r24, 0x82	; 130
    3c90:	a1 f0       	breq	.+40     	; 0x3cba <action_for_key+0x52>
    3c92:	85 33       	cpi	r24, 0x35	; 53
    3c94:	09 f4       	brne	.+2      	; 0x3c98 <action_for_key+0x30>
    3c96:	41 c0       	rjmp	.+130    	; 0x3d1a <action_for_key+0xb2>
    3c98:	57 c0       	rjmp	.+174    	; 0x3d48 <action_for_key+0xe0>
    3c9a:	83 3e       	cpi	r24, 0xE3	; 227
    3c9c:	41 f1       	breq	.+80     	; 0x3cee <action_for_key+0x86>
    3c9e:	28 f4       	brcc	.+10     	; 0x3caa <action_for_key+0x42>
    3ca0:	80 3e       	cpi	r24, 0xE0	; 224
    3ca2:	99 f0       	breq	.+38     	; 0x3cca <action_for_key+0x62>
    3ca4:	82 3e       	cpi	r24, 0xE2	; 226
    3ca6:	b9 f0       	breq	.+46     	; 0x3cd6 <action_for_key+0x6e>
    3ca8:	4f c0       	rjmp	.+158    	; 0x3d48 <action_for_key+0xe0>
    3caa:	86 3e       	cpi	r24, 0xE6	; 230
    3cac:	31 f1       	breq	.+76     	; 0x3cfa <action_for_key+0x92>
    3cae:	87 3e       	cpi	r24, 0xE7	; 231
    3cb0:	71 f1       	breq	.+92     	; 0x3d0e <action_for_key+0xa6>
    3cb2:	4a c0       	rjmp	.+148    	; 0x3d48 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3cb4:	0e 94 c1 08 	call	0x1182	; 0x1182 <keymap_fn_to_action>
    3cb8:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3cba:	90 91 d8 01 	lds	r25, 0x01D8
    3cbe:	90 fd       	sbrc	r25, 0
    3cc0:	02 c0       	rjmp	.+4      	; 0x3cc6 <action_for_key+0x5e>
    3cc2:	91 ff       	sbrs	r25, 1
    3cc4:	41 c0       	rjmp	.+130    	; 0x3d48 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3cc6:	80 ee       	ldi	r24, 0xE0	; 224
    3cc8:	3f c0       	rjmp	.+126    	; 0x3d48 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3cca:	80 91 d8 01 	lds	r24, 0x01D8
    3cce:	80 ff       	sbrs	r24, 0
    3cd0:	fa cf       	rjmp	.-12     	; 0x3cc6 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3cd2:	89 e3       	ldi	r24, 0x39	; 57
    3cd4:	39 c0       	rjmp	.+114    	; 0x3d48 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3cd6:	80 91 d8 01 	lds	r24, 0x01D8
    3cda:	82 ff       	sbrs	r24, 2
    3cdc:	0c c0       	rjmp	.+24     	; 0x3cf6 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3cde:	80 91 d8 01 	lds	r24, 0x01D8
    3ce2:	84 ff       	sbrs	r24, 4
    3ce4:	02 c0       	rjmp	.+4      	; 0x3cea <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3ce6:	80 e0       	ldi	r24, 0x00	; 0
    3ce8:	2f c0       	rjmp	.+94     	; 0x3d48 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3cea:	83 ee       	ldi	r24, 0xE3	; 227
    3cec:	2d c0       	rjmp	.+90     	; 0x3d48 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3cee:	80 91 d8 01 	lds	r24, 0x01D8
    3cf2:	82 ff       	sbrs	r24, 2
    3cf4:	f4 cf       	rjmp	.-24     	; 0x3cde <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3cf6:	82 ee       	ldi	r24, 0xE2	; 226
    3cf8:	27 c0       	rjmp	.+78     	; 0x3d48 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3cfa:	80 91 d8 01 	lds	r24, 0x01D8
    3cfe:	83 ff       	sbrs	r24, 3
    3d00:	0a c0       	rjmp	.+20     	; 0x3d16 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3d02:	80 91 d8 01 	lds	r24, 0x01D8
    3d06:	84 fd       	sbrc	r24, 4
    3d08:	ee cf       	rjmp	.-36     	; 0x3ce6 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3d0a:	87 ee       	ldi	r24, 0xE7	; 231
    3d0c:	1d c0       	rjmp	.+58     	; 0x3d48 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3d0e:	80 91 d8 01 	lds	r24, 0x01D8
    3d12:	83 ff       	sbrs	r24, 3
    3d14:	f6 cf       	rjmp	.-20     	; 0x3d02 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3d16:	86 ee       	ldi	r24, 0xE6	; 230
    3d18:	17 c0       	rjmp	.+46     	; 0x3d48 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3d1a:	80 91 d8 01 	lds	r24, 0x01D8
    3d1e:	85 ff       	sbrs	r24, 5
    3d20:	06 c0       	rjmp	.+12     	; 0x3d2e <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3d22:	89 e2       	ldi	r24, 0x29	; 41
    3d24:	11 c0       	rjmp	.+34     	; 0x3d48 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3d26:	80 91 d8 01 	lds	r24, 0x01D8
    3d2a:	85 ff       	sbrs	r24, 5
    3d2c:	fa cf       	rjmp	.-12     	; 0x3d22 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3d2e:	85 e3       	ldi	r24, 0x35	; 53
    3d30:	0b c0       	rjmp	.+22     	; 0x3d48 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3d32:	80 91 d8 01 	lds	r24, 0x01D8
    3d36:	86 ff       	sbrs	r24, 6
    3d38:	06 c0       	rjmp	.+12     	; 0x3d46 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3d3a:	8a e2       	ldi	r24, 0x2A	; 42
    3d3c:	05 c0       	rjmp	.+10     	; 0x3d48 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3d3e:	80 91 d8 01 	lds	r24, 0x01D8
    3d42:	86 ff       	sbrs	r24, 6
    3d44:	fa cf       	rjmp	.-12     	; 0x3d3a <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3d46:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3d48:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <keycode_to_action>
    }
}
    3d4c:	08 95       	ret

00003d4e <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    3d4e:	80 e0       	ldi	r24, 0x00	; 0
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	08 95       	ret

00003d54 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3d54:	08 95       	ret

00003d56 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3d56:	90 93 c6 01 	sts	0x01C6, r25
    3d5a:	80 93 c5 01 	sts	0x01C5, r24
    3d5e:	08 95       	ret

00003d60 <biton32>:
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}

uint8_t biton32(uint32_t bits)
{
    3d60:	cf 92       	push	r12
    3d62:	df 92       	push	r13
    3d64:	ef 92       	push	r14
    3d66:	ff 92       	push	r15
    3d68:	0f 93       	push	r16
    3d6a:	1f 93       	push	r17
    uint8_t n = 0;
    if (bits >>16) { bits >>=16; n +=16;}
    3d6c:	6c 01       	movw	r12, r24
    3d6e:	ee 24       	eor	r14, r14
    3d70:	ff 24       	eor	r15, r15
    3d72:	c1 14       	cp	r12, r1
    3d74:	d1 04       	cpc	r13, r1
    3d76:	e1 04       	cpc	r14, r1
    3d78:	f1 04       	cpc	r15, r1
    3d7a:	21 f4       	brne	.+8      	; 0x3d84 <biton32+0x24>
    3d7c:	6b 01       	movw	r12, r22
    3d7e:	7c 01       	movw	r14, r24
    return n;
}

uint8_t biton32(uint32_t bits)
{
    uint8_t n = 0;
    3d80:	80 e0       	ldi	r24, 0x00	; 0
    3d82:	01 c0       	rjmp	.+2      	; 0x3d86 <biton32+0x26>
    if (bits >>16) { bits >>=16; n +=16;}
    3d84:	80 e1       	ldi	r24, 0x10	; 16
    if (bits >> 8) { bits >>= 8; n += 8;}
    3d86:	33 27       	eor	r19, r19
    3d88:	2f 2d       	mov	r18, r15
    3d8a:	1e 2d       	mov	r17, r14
    3d8c:	0d 2d       	mov	r16, r13
    3d8e:	01 15       	cp	r16, r1
    3d90:	11 05       	cpc	r17, r1
    3d92:	21 05       	cpc	r18, r1
    3d94:	31 05       	cpc	r19, r1
    3d96:	19 f0       	breq	.+6      	; 0x3d9e <biton32+0x3e>
    3d98:	88 5f       	subi	r24, 0xF8	; 248
    3d9a:	68 01       	movw	r12, r16
    3d9c:	79 01       	movw	r14, r18
    if (bits >> 4) { bits >>= 4; n += 4;}
    3d9e:	97 01       	movw	r18, r14
    3da0:	86 01       	movw	r16, r12
    3da2:	a4 e0       	ldi	r26, 0x04	; 4
    3da4:	36 95       	lsr	r19
    3da6:	27 95       	ror	r18
    3da8:	17 95       	ror	r17
    3daa:	07 95       	ror	r16
    3dac:	aa 95       	dec	r26
    3dae:	d1 f7       	brne	.-12     	; 0x3da4 <biton32+0x44>
    3db0:	01 15       	cp	r16, r1
    3db2:	11 05       	cpc	r17, r1
    3db4:	21 05       	cpc	r18, r1
    3db6:	31 05       	cpc	r19, r1
    3db8:	19 f0       	breq	.+6      	; 0x3dc0 <biton32+0x60>
    3dba:	8c 5f       	subi	r24, 0xFC	; 252
    3dbc:	68 01       	movw	r12, r16
    3dbe:	79 01       	movw	r14, r18
    if (bits >> 2) { bits >>= 2; n += 2;}
    3dc0:	97 01       	movw	r18, r14
    3dc2:	86 01       	movw	r16, r12
    3dc4:	f2 e0       	ldi	r31, 0x02	; 2
    3dc6:	36 95       	lsr	r19
    3dc8:	27 95       	ror	r18
    3dca:	17 95       	ror	r17
    3dcc:	07 95       	ror	r16
    3dce:	fa 95       	dec	r31
    3dd0:	d1 f7       	brne	.-12     	; 0x3dc6 <biton32+0x66>
    3dd2:	01 15       	cp	r16, r1
    3dd4:	11 05       	cpc	r17, r1
    3dd6:	21 05       	cpc	r18, r1
    3dd8:	31 05       	cpc	r19, r1
    3dda:	19 f0       	breq	.+6      	; 0x3de2 <biton32+0x82>
    3ddc:	8e 5f       	subi	r24, 0xFE	; 254
    3dde:	68 01       	movw	r12, r16
    3de0:	79 01       	movw	r14, r18
    if (bits >> 1) { bits >>= 1; n += 1;}
    3de2:	b7 01       	movw	r22, r14
    3de4:	a6 01       	movw	r20, r12
    3de6:	76 95       	lsr	r23
    3de8:	67 95       	ror	r22
    3dea:	57 95       	ror	r21
    3dec:	47 95       	ror	r20
    3dee:	45 2b       	or	r20, r21
    3df0:	46 2b       	or	r20, r22
    3df2:	47 2b       	or	r20, r23
    3df4:	09 f0       	breq	.+2      	; 0x3df8 <biton32+0x98>
    3df6:	8f 5f       	subi	r24, 0xFF	; 255
    return n;
}
    3df8:	1f 91       	pop	r17
    3dfa:	0f 91       	pop	r16
    3dfc:	ff 90       	pop	r15
    3dfe:	ef 90       	pop	r14
    3e00:	df 90       	pop	r13
    3e02:	cf 90       	pop	r12
    3e04:	08 95       	ret

00003e06 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3e06:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3e08:	98 2f       	mov	r25, r24
    3e0a:	9c 7c       	andi	r25, 0xCC	; 204
    3e0c:	96 95       	lsr	r25
    3e0e:	96 95       	lsr	r25
    3e10:	83 73       	andi	r24, 0x33	; 51
    3e12:	44 e0       	ldi	r20, 0x04	; 4
    3e14:	84 9f       	mul	r24, r20
    3e16:	90 01       	movw	r18, r0
    3e18:	11 24       	eor	r1, r1
    3e1a:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3e1c:	89 2f       	mov	r24, r25
    3e1e:	8a 7a       	andi	r24, 0xAA	; 170
    3e20:	86 95       	lsr	r24
    3e22:	95 75       	andi	r25, 0x55	; 85
    3e24:	99 0f       	add	r25, r25
    return bits;
}
    3e26:	89 2b       	or	r24, r25
    3e28:	08 95       	ret

00003e2a <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3e2a:	1f 93       	push	r17
    3e2c:	cf 93       	push	r28
    3e2e:	df 93       	push	r29
    3e30:	1f 92       	push	r1
    3e32:	cd b7       	in	r28, 0x3d	; 61
    3e34:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3e36:	99 83       	std	Y+1, r25	; 0x01
    3e38:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <bitrev>
    3e3c:	18 2f       	mov	r17, r24
    3e3e:	99 81       	ldd	r25, Y+1	; 0x01
    3e40:	89 2f       	mov	r24, r25
    3e42:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <bitrev>
    3e46:	21 2f       	mov	r18, r17
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	32 2f       	mov	r19, r18
    3e4c:	22 27       	eor	r18, r18
    return bits;
}
    3e4e:	a9 01       	movw	r20, r18
    3e50:	48 2b       	or	r20, r24
    3e52:	ca 01       	movw	r24, r20
    3e54:	0f 90       	pop	r0
    3e56:	df 91       	pop	r29
    3e58:	cf 91       	pop	r28
    3e5a:	1f 91       	pop	r17
    3e5c:	08 95       	ret

00003e5e <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3e5e:	80 91 dd 01 	lds	r24, 0x01DD
    3e62:	84 30       	cpi	r24, 0x04	; 4
    3e64:	09 f1       	breq	.+66     	; 0x3ea8 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3e66:	10 92 c4 01 	sts	0x01C4, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3e6a:	20 e4       	ldi	r18, 0x40	; 64
    3e6c:	88 e1       	ldi	r24, 0x18	; 24
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	0f b6       	in	r0, 0x3f	; 63
    3e72:	f8 94       	cli
    3e74:	a8 95       	wdr
    3e76:	80 93 60 00 	sts	0x0060, r24
    3e7a:	0f be       	out	0x3f, r0	; 63
    3e7c:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3e80:	83 b7       	in	r24, 0x33	; 51
    3e82:	81 7f       	andi	r24, 0xF1	; 241
    3e84:	84 60       	ori	r24, 0x04	; 4
    3e86:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3e88:	83 b7       	in	r24, 0x33	; 51
    3e8a:	81 60       	ori	r24, 0x01	; 1
    3e8c:	83 bf       	out	0x33, r24	; 51
    sei();
    3e8e:	78 94       	sei
    sleep_cpu();
    3e90:	88 95       	sleep
    sleep_disable();
    3e92:	83 b7       	in	r24, 0x33	; 51
    3e94:	8e 7f       	andi	r24, 0xFE	; 254
    3e96:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3e98:	88 e1       	ldi	r24, 0x18	; 24
    3e9a:	0f b6       	in	r0, 0x3f	; 63
    3e9c:	f8 94       	cli
    3e9e:	80 93 60 00 	sts	0x0060, r24
    3ea2:	10 92 60 00 	sts	0x0060, r1
    3ea6:	0f be       	out	0x3f, r0	; 63
    3ea8:	08 95       	ret

00003eaa <suspend_wakeup_condition>:
{
    power_down(WDTO_15MS);
}

bool suspend_wakeup_condition(void)
{
    3eaa:	cf 93       	push	r28
    matrix_power_up();
    3eac:	0e 94 b0 08 	call	0x1160	; 0x1160 <matrix_power_up>
    matrix_scan();
    3eb0:	0e 94 ef 08 	call	0x11de	; 0x11de <matrix_scan>
    matrix_power_down();
    3eb4:	0e 94 b1 08 	call	0x1162	; 0x1162 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3eb8:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3eba:	8c 2f       	mov	r24, r28
    3ebc:	0e 94 8b 09 	call	0x1316	; 0x1316 <matrix_get_row>
    3ec0:	89 2b       	or	r24, r25
    3ec2:	29 f4       	brne	.+10     	; 0x3ece <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3ec4:	cf 5f       	subi	r28, 0xFF	; 255
    3ec6:	c5 30       	cpi	r28, 0x05	; 5
    3ec8:	c1 f7       	brne	.-16     	; 0x3eba <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3eca:	80 e0       	ldi	r24, 0x00	; 0
    3ecc:	01 c0       	rjmp	.+2      	; 0x3ed0 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3ece:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3ed0:	cf 91       	pop	r28
    3ed2:	08 95       	ret

00003ed4 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3ed4:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <clear_keyboard>

00003ed8 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3ed8:	1f 92       	push	r1
    3eda:	0f 92       	push	r0
    3edc:	0f b6       	in	r0, 0x3f	; 63
    3ede:	0f 92       	push	r0
    3ee0:	11 24       	eor	r1, r1
    3ee2:	8f 93       	push	r24
    3ee4:	9f 93       	push	r25
    3ee6:	af 93       	push	r26
    3ee8:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3eea:	80 91 c4 01 	lds	r24, 0x01C4
    3eee:	81 11       	cpse	r24, r1
    3ef0:	13 c0       	rjmp	.+38     	; 0x3f18 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3ef2:	80 91 c7 01 	lds	r24, 0x01C7
    3ef6:	90 91 c8 01 	lds	r25, 0x01C8
    3efa:	a0 91 c9 01 	lds	r26, 0x01C9
    3efe:	b0 91 ca 01 	lds	r27, 0x01CA
    3f02:	41 96       	adiw	r24, 0x11	; 17
    3f04:	a1 1d       	adc	r26, r1
    3f06:	b1 1d       	adc	r27, r1
    3f08:	80 93 c7 01 	sts	0x01C7, r24
    3f0c:	90 93 c8 01 	sts	0x01C8, r25
    3f10:	a0 93 c9 01 	sts	0x01C9, r26
    3f14:	b0 93 ca 01 	sts	0x01CA, r27
            break;
        default:
            ;
    }
}
    3f18:	bf 91       	pop	r27
    3f1a:	af 91       	pop	r26
    3f1c:	9f 91       	pop	r25
    3f1e:	8f 91       	pop	r24
    3f20:	0f 90       	pop	r0
    3f22:	0f be       	out	0x3f, r0	; 63
    3f24:	0f 90       	pop	r0
    3f26:	1f 90       	pop	r1
    3f28:	18 95       	reti

00003f2a <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3f2a:	82 e0       	ldi	r24, 0x02	; 2
    3f2c:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3f2e:	93 e0       	ldi	r25, 0x03	; 3
    3f30:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3f32:	9a ef       	ldi	r25, 0xFA	; 250
    3f34:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3f36:	80 93 6e 00 	sts	0x006E, r24
    3f3a:	08 95       	ret

00003f3c <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3f3c:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3f3e:	f8 94       	cli
    t = timer_count;
    3f40:	80 91 c7 01 	lds	r24, 0x01C7
    3f44:	90 91 c8 01 	lds	r25, 0x01C8
    3f48:	a0 91 c9 01 	lds	r26, 0x01C9
    3f4c:	b0 91 ca 01 	lds	r27, 0x01CA
    SREG = sreg;
    3f50:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    3f52:	08 95       	ret

00003f54 <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    3f54:	cf 92       	push	r12
    3f56:	df 92       	push	r13
    3f58:	ef 92       	push	r14
    3f5a:	ff 92       	push	r15
    3f5c:	0f 93       	push	r16
    3f5e:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    3f60:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3f62:	f8 94       	cli
    t = timer_count;
    3f64:	40 91 c7 01 	lds	r20, 0x01C7
    3f68:	50 91 c8 01 	lds	r21, 0x01C8
    3f6c:	60 91 c9 01 	lds	r22, 0x01C9
    3f70:	70 91 ca 01 	lds	r23, 0x01CA
    SREG = sreg;
    3f74:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    3f76:	6a 01       	movw	r12, r20
    3f78:	7b 01       	movw	r14, r22
    3f7a:	ee 24       	eor	r14, r14
    3f7c:	ff 24       	eor	r15, r15
    3f7e:	8c 01       	movw	r16, r24
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	c0 16       	cp	r12, r16
    3f86:	d1 06       	cpc	r13, r17
    3f88:	e2 06       	cpc	r14, r18
    3f8a:	f3 06       	cpc	r15, r19
    3f8c:	10 f4       	brcc	.+4      	; 0x3f92 <timer_elapsed+0x3e>
    3f8e:	41 50       	subi	r20, 0x01	; 1
    3f90:	51 09       	sbc	r21, r1
    3f92:	48 1b       	sub	r20, r24
    3f94:	59 0b       	sbc	r21, r25
}
    3f96:	ca 01       	movw	r24, r20
    3f98:	1f 91       	pop	r17
    3f9a:	0f 91       	pop	r16
    3f9c:	ff 90       	pop	r15
    3f9e:	ef 90       	pop	r14
    3fa0:	df 90       	pop	r13
    3fa2:	cf 90       	pop	r12
    3fa4:	08 95       	ret

00003fa6 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3fa6:	1f 92       	push	r1
    3fa8:	0f 92       	push	r0
    3faa:	0f b6       	in	r0, 0x3f	; 63
    3fac:	0f 92       	push	r0
    3fae:	11 24       	eor	r1, r1
    3fb0:	8f 93       	push	r24
    3fb2:	9f 93       	push	r25
    3fb4:	af 93       	push	r26
    3fb6:	bf 93       	push	r27
    timer_count++;
    3fb8:	80 91 c7 01 	lds	r24, 0x01C7
    3fbc:	90 91 c8 01 	lds	r25, 0x01C8
    3fc0:	a0 91 c9 01 	lds	r26, 0x01C9
    3fc4:	b0 91 ca 01 	lds	r27, 0x01CA
    3fc8:	01 96       	adiw	r24, 0x01	; 1
    3fca:	a1 1d       	adc	r26, r1
    3fcc:	b1 1d       	adc	r27, r1
    3fce:	80 93 c7 01 	sts	0x01C7, r24
    3fd2:	90 93 c8 01 	sts	0x01C8, r25
    3fd6:	a0 93 c9 01 	sts	0x01C9, r26
    3fda:	b0 93 ca 01 	sts	0x01CA, r27
}
    3fde:	bf 91       	pop	r27
    3fe0:	af 91       	pop	r26
    3fe2:	9f 91       	pop	r25
    3fe4:	8f 91       	pop	r24
    3fe6:	0f 90       	pop	r0
    3fe8:	0f be       	out	0x3f, r0	; 63
    3fea:	0f 90       	pop	r0
    3fec:	1f 90       	pop	r1
    3fee:	18 95       	reti

00003ff0 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3ff0:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <USB_Disable>
    cli();
    3ff4:	f8 94       	cli
    3ff6:	2f ef       	ldi	r18, 0xFF	; 255
    3ff8:	87 ea       	ldi	r24, 0xA7	; 167
    3ffa:	91 e6       	ldi	r25, 0x61	; 97
    3ffc:	21 50       	subi	r18, 0x01	; 1
    3ffe:	80 40       	sbci	r24, 0x00	; 0
    4000:	90 40       	sbci	r25, 0x00	; 0
    4002:	e1 f7       	brne	.-8      	; 0x3ffc <bootloader_jump+0xc>
    4004:	00 c0       	rjmp	.+0      	; 0x4006 <bootloader_jump+0x16>
    4006:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    4008:	87 e0       	ldi	r24, 0x07	; 7
    400a:	90 eb       	ldi	r25, 0xB0	; 176
    400c:	dc 01       	movw	r26, r24
    400e:	80 93 e6 01 	sts	0x01E6, r24
    4012:	90 93 e7 01 	sts	0x01E7, r25
    4016:	a0 93 e8 01 	sts	0x01E8, r26
    401a:	b0 93 e9 01 	sts	0x01E9, r27
    wdt_enable(WDTO_250MS);
    401e:	2c e0       	ldi	r18, 0x0C	; 12
    4020:	88 e1       	ldi	r24, 0x18	; 24
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	0f b6       	in	r0, 0x3f	; 63
    4026:	f8 94       	cli
    4028:	a8 95       	wdr
    402a:	80 93 60 00 	sts	0x0060, r24
    402e:	0f be       	out	0x3f, r0	; 63
    4030:	20 93 60 00 	sts	0x0060, r18
    4034:	ff cf       	rjmp	.-2      	; 0x4034 <bootloader_jump+0x44>

00004036 <scan_keycode>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_keycode(uint8_t keycode)
{
    4036:	cf 92       	push	r12
    4038:	df 92       	push	r13
    403a:	ef 92       	push	r14
    403c:	ff 92       	push	r15
    403e:	0f 93       	push	r16
    4040:	1f 93       	push	r17
    4042:	cf 93       	push	r28
    4044:	df 93       	push	r29
    4046:	c8 2e       	mov	r12, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4048:	d1 2c       	mov	r13, r1
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    404a:	01 e0       	ldi	r16, 0x01	; 1
    404c:	10 e0       	ldi	r17, 0x00	; 0
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    404e:	8d 2d       	mov	r24, r13
    4050:	0e 94 8b 09 	call	0x1316	; 0x1316 <matrix_get_row>
    4054:	7c 01       	movw	r14, r24
    4056:	c0 e0       	ldi	r28, 0x00	; 0
    4058:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    405a:	98 01       	movw	r18, r16
    405c:	0c 2e       	mov	r0, r28
    405e:	02 c0       	rjmp	.+4      	; 0x4064 <scan_keycode+0x2e>
    4060:	22 0f       	add	r18, r18
    4062:	33 1f       	adc	r19, r19
    4064:	0a 94       	dec	r0
    4066:	e2 f7       	brpl	.-8      	; 0x4060 <scan_keycode+0x2a>
    4068:	2e 21       	and	r18, r14
    406a:	3f 21       	and	r19, r15
    406c:	23 2b       	or	r18, r19
    406e:	29 f4       	brne	.+10     	; 0x407a <scan_keycode+0x44>
    4070:	21 96       	adiw	r28, 0x01	; 1

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    4072:	ce 30       	cpi	r28, 0x0E	; 14
    4074:	d1 05       	cpc	r29, r1
    4076:	89 f7       	brne	.-30     	; 0x405a <scan_keycode+0x24>
    4078:	09 c0       	rjmp	.+18     	; 0x408c <scan_keycode+0x56>
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    407a:	6c 2f       	mov	r22, r28
    407c:	7d 2d       	mov	r23, r13
    407e:	80 e0       	ldi	r24, 0x00	; 0
    4080:	0e 94 b2 08 	call	0x1164	; 0x1164 <keymap_key_to_keycode>
    4084:	c8 12       	cpse	r12, r24
    4086:	f4 cf       	rjmp	.-24     	; 0x4070 <scan_keycode+0x3a>
                    return true;
    4088:	81 e0       	ldi	r24, 0x01	; 1
    408a:	05 c0       	rjmp	.+10     	; 0x4096 <scan_keycode+0x60>
    }
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    408c:	d3 94       	inc	r13
    408e:	85 e0       	ldi	r24, 0x05	; 5
    4090:	d8 12       	cpse	r13, r24
    4092:	dd cf       	rjmp	.-70     	; 0x404e <scan_keycode+0x18>
                    return true;
                }
            }
        }
    }
    return false;
    4094:	80 e0       	ldi	r24, 0x00	; 0
}
    4096:	df 91       	pop	r29
    4098:	cf 91       	pop	r28
    409a:	1f 91       	pop	r17
    409c:	0f 91       	pop	r16
    409e:	ff 90       	pop	r15
    40a0:	ef 90       	pop	r14
    40a2:	df 90       	pop	r13
    40a4:	cf 90       	pop	r12
    40a6:	08 95       	ret

000040a8 <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    40a8:	cf 93       	push	r28
    40aa:	c8 2f       	mov	r28, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    40ac:	8c e2       	ldi	r24, 0x2C	; 44
    40ae:	0e 94 1b 20 	call	0x4036	; 0x4036 <scan_keycode>
    40b2:	88 23       	and	r24, r24
    40b4:	21 f0       	breq	.+8      	; 0x40be <bootmagic_scan_keycode+0x16>

    return scan_keycode(keycode);
    40b6:	8c 2f       	mov	r24, r28
}
    40b8:	cf 91       	pop	r28

bool bootmagic_scan_keycode(uint8_t keycode)
{
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;

    return scan_keycode(keycode);
    40ba:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <scan_keycode>
}
    40be:	80 e0       	ldi	r24, 0x00	; 0
    40c0:	cf 91       	pop	r28
    40c2:	08 95       	ret

000040c4 <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    40c4:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    40c6:	0e 94 af 21 	call	0x435e	; 0x435e <eeconfig_is_enabled>
    40ca:	81 11       	cpse	r24, r1
    40cc:	02 c0       	rjmp	.+4      	; 0x40d2 <bootmagic+0xe>
        eeconfig_init();
    40ce:	0e 94 95 21 	call	0x432a	; 0x432a <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    40d2:	85 e7       	ldi	r24, 0x75	; 117
    40d4:	94 e0       	ldi	r25, 0x04	; 4
    40d6:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    40da:	c5 e6       	ldi	r28, 0x65	; 101
    40dc:	c1 50       	subi	r28, 0x01	; 1
    40de:	49 f0       	breq	.+18     	; 0x40f2 <bootmagic+0x2e>
    40e0:	0e 94 ef 08 	call	0x11de	; 0x11de <matrix_scan>
    40e4:	8f e3       	ldi	r24, 0x3F	; 63
    40e6:	9c e9       	ldi	r25, 0x9C	; 156
    40e8:	01 97       	sbiw	r24, 0x01	; 1
    40ea:	f1 f7       	brne	.-4      	; 0x40e8 <bootmagic+0x24>
    40ec:	00 c0       	rjmp	.+0      	; 0x40ee <bootmagic+0x2a>
    40ee:	00 00       	nop
    40f0:	f5 cf       	rjmp	.-22     	; 0x40dc <bootmagic+0x18>
    print("done.\n");
    40f2:	8e e6       	ldi	r24, 0x6E	; 110
    40f4:	94 e0       	ldi	r25, 0x04	; 4
    40f6:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    40fa:	89 e2       	ldi	r24, 0x29	; 41
    40fc:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    4100:	81 11       	cpse	r24, r1
    4102:	11 c1       	rjmp	.+546    	; 0x4326 <bootmagic+0x262>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    4104:	8a e2       	ldi	r24, 0x2A	; 42
    4106:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    410a:	81 11       	cpse	r24, r1
        eeconfig_init();
    410c:	0e 94 95 21 	call	0x432a	; 0x432a <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    4110:	85 e0       	ldi	r24, 0x05	; 5
    4112:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    4116:	81 11       	cpse	r24, r1
        bootloader_jump();
    4118:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    411c:	0e 94 ba 21 	call	0x4374	; 0x4374 <eeconfig_read_debug>
    4120:	80 93 c3 01 	sts	0x01C3, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    4124:	87 e0       	ldi	r24, 0x07	; 7
    4126:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    412a:	88 23       	and	r24, r24
    412c:	99 f1       	breq	.+102    	; 0x4194 <bootmagic+0xd0>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    412e:	8b e1       	ldi	r24, 0x1B	; 27
    4130:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    4134:	88 23       	and	r24, r24
    4136:	51 f0       	breq	.+20     	; 0x414c <bootmagic+0x88>
            debug_config.matrix = !debug_config.matrix;
    4138:	90 91 c3 01 	lds	r25, 0x01C3
    413c:	91 fb       	bst	r25, 1
    413e:	88 27       	eor	r24, r24
    4140:	80 f9       	bld	r24, 0
    4142:	21 e0       	ldi	r18, 0x01	; 1
    4144:	82 27       	eor	r24, r18
    4146:	80 fb       	bst	r24, 0
    4148:	91 f9       	bld	r25, 1
    414a:	22 c0       	rjmp	.+68     	; 0x4190 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    414c:	8e e0       	ldi	r24, 0x0E	; 14
    414e:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    4152:	88 23       	and	r24, r24
    4154:	51 f0       	breq	.+20     	; 0x416a <bootmagic+0xa6>
            debug_config.keyboard = !debug_config.keyboard;
    4156:	90 91 c3 01 	lds	r25, 0x01C3
    415a:	92 fb       	bst	r25, 2
    415c:	88 27       	eor	r24, r24
    415e:	80 f9       	bld	r24, 0
    4160:	21 e0       	ldi	r18, 0x01	; 1
    4162:	82 27       	eor	r24, r18
    4164:	80 fb       	bst	r24, 0
    4166:	92 f9       	bld	r25, 2
    4168:	13 c0       	rjmp	.+38     	; 0x4190 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    416a:	80 e1       	ldi	r24, 0x10	; 16
    416c:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    4170:	90 91 c3 01 	lds	r25, 0x01C3
    4174:	88 23       	and	r24, r24
    4176:	41 f0       	breq	.+16     	; 0x4188 <bootmagic+0xc4>
            debug_config.mouse = !debug_config.mouse;
    4178:	93 fb       	bst	r25, 3
    417a:	88 27       	eor	r24, r24
    417c:	80 f9       	bld	r24, 0
    417e:	21 e0       	ldi	r18, 0x01	; 1
    4180:	82 27       	eor	r24, r18
    4182:	80 fb       	bst	r24, 0
    4184:	93 f9       	bld	r25, 3
    4186:	04 c0       	rjmp	.+8      	; 0x4190 <bootmagic+0xcc>
        } else {
            debug_config.enable = !debug_config.enable;
    4188:	89 2f       	mov	r24, r25
    418a:	80 95       	com	r24
    418c:	80 fb       	bst	r24, 0
    418e:	90 f9       	bld	r25, 0
    4190:	90 93 c3 01 	sts	0x01C3, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    4194:	80 91 c3 01 	lds	r24, 0x01C3
    4198:	0e 94 be 21 	call	0x437c	; 0x437c <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    419c:	0e 94 cc 21 	call	0x4398	; 0x4398 <eeconfig_read_keymap>
    41a0:	80 93 d8 01 	sts	0x01D8, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    41a4:	80 ee       	ldi	r24, 0xE0	; 224
    41a6:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    41aa:	88 23       	and	r24, r24
    41ac:	41 f0       	breq	.+16     	; 0x41be <bootmagic+0xfa>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    41ae:	80 91 d8 01 	lds	r24, 0x01D8
    41b2:	98 2f       	mov	r25, r24
    41b4:	90 95       	com	r25
    41b6:	90 fb       	bst	r25, 0
    41b8:	80 f9       	bld	r24, 0
    41ba:	80 93 d8 01 	sts	0x01D8, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    41be:	89 e3       	ldi	r24, 0x39	; 57
    41c0:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    41c4:	88 23       	and	r24, r24
    41c6:	59 f0       	breq	.+22     	; 0x41de <bootmagic+0x11a>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    41c8:	90 91 d8 01 	lds	r25, 0x01D8
    41cc:	91 fb       	bst	r25, 1
    41ce:	88 27       	eor	r24, r24
    41d0:	80 f9       	bld	r24, 0
    41d2:	21 e0       	ldi	r18, 0x01	; 1
    41d4:	82 27       	eor	r24, r18
    41d6:	80 fb       	bst	r24, 0
    41d8:	91 f9       	bld	r25, 1
    41da:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    41de:	82 ee       	ldi	r24, 0xE2	; 226
    41e0:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    41e4:	88 23       	and	r24, r24
    41e6:	59 f0       	breq	.+22     	; 0x41fe <bootmagic+0x13a>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    41e8:	90 91 d8 01 	lds	r25, 0x01D8
    41ec:	92 fb       	bst	r25, 2
    41ee:	88 27       	eor	r24, r24
    41f0:	80 f9       	bld	r24, 0
    41f2:	21 e0       	ldi	r18, 0x01	; 1
    41f4:	82 27       	eor	r24, r18
    41f6:	80 fb       	bst	r24, 0
    41f8:	92 f9       	bld	r25, 2
    41fa:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    41fe:	86 ee       	ldi	r24, 0xE6	; 230
    4200:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    4204:	88 23       	and	r24, r24
    4206:	59 f0       	breq	.+22     	; 0x421e <bootmagic+0x15a>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    4208:	90 91 d8 01 	lds	r25, 0x01D8
    420c:	93 fb       	bst	r25, 3
    420e:	88 27       	eor	r24, r24
    4210:	80 f9       	bld	r24, 0
    4212:	21 e0       	ldi	r18, 0x01	; 1
    4214:	82 27       	eor	r24, r18
    4216:	80 fb       	bst	r24, 0
    4218:	93 f9       	bld	r25, 3
    421a:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    421e:	83 ee       	ldi	r24, 0xE3	; 227
    4220:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    4224:	88 23       	and	r24, r24
    4226:	59 f0       	breq	.+22     	; 0x423e <bootmagic+0x17a>
        keymap_config.no_gui = !keymap_config.no_gui;
    4228:	90 91 d8 01 	lds	r25, 0x01D8
    422c:	94 fb       	bst	r25, 4
    422e:	88 27       	eor	r24, r24
    4230:	80 f9       	bld	r24, 0
    4232:	21 e0       	ldi	r18, 0x01	; 1
    4234:	82 27       	eor	r24, r18
    4236:	80 fb       	bst	r24, 0
    4238:	94 f9       	bld	r25, 4
    423a:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    423e:	85 e3       	ldi	r24, 0x35	; 53
    4240:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    4244:	88 23       	and	r24, r24
    4246:	59 f0       	breq	.+22     	; 0x425e <bootmagic+0x19a>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    4248:	90 91 d8 01 	lds	r25, 0x01D8
    424c:	95 fb       	bst	r25, 5
    424e:	88 27       	eor	r24, r24
    4250:	80 f9       	bld	r24, 0
    4252:	21 e0       	ldi	r18, 0x01	; 1
    4254:	82 27       	eor	r24, r18
    4256:	80 fb       	bst	r24, 0
    4258:	95 f9       	bld	r25, 5
    425a:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    425e:	81 e3       	ldi	r24, 0x31	; 49
    4260:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    4264:	88 23       	and	r24, r24
    4266:	59 f0       	breq	.+22     	; 0x427e <bootmagic+0x1ba>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    4268:	90 91 d8 01 	lds	r25, 0x01D8
    426c:	96 fb       	bst	r25, 6
    426e:	88 27       	eor	r24, r24
    4270:	80 f9       	bld	r24, 0
    4272:	21 e0       	ldi	r18, 0x01	; 1
    4274:	82 27       	eor	r24, r18
    4276:	80 fb       	bst	r24, 0
    4278:	96 f9       	bld	r25, 6
    427a:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    427e:	81 e1       	ldi	r24, 0x11	; 17
    4280:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    4284:	88 23       	and	r24, r24
    4286:	59 f0       	breq	.+22     	; 0x429e <bootmagic+0x1da>
        keymap_config.nkro = !keymap_config.nkro;
    4288:	90 91 d8 01 	lds	r25, 0x01D8
    428c:	97 fb       	bst	r25, 7
    428e:	88 27       	eor	r24, r24
    4290:	80 f9       	bld	r24, 0
    4292:	21 e0       	ldi	r18, 0x01	; 1
    4294:	82 27       	eor	r24, r18
    4296:	80 fb       	bst	r24, 0
    4298:	97 f9       	bld	r25, 7
    429a:	90 93 d8 01 	sts	0x01D8, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    429e:	80 91 d8 01 	lds	r24, 0x01D8
    42a2:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    42a6:	80 91 d8 01 	lds	r24, 0x01D8
    42aa:	87 fb       	bst	r24, 7
    42ac:	88 27       	eor	r24, r24
    42ae:	80 f9       	bld	r24, 0
    42b0:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    42b4:	87 e2       	ldi	r24, 0x27	; 39
    42b6:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    42ba:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    42bc:	8e e1       	ldi	r24, 0x1E	; 30
    42be:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    42c2:	81 11       	cpse	r24, r1
    42c4:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    42c6:	8f e1       	ldi	r24, 0x1F	; 31
    42c8:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    42cc:	81 11       	cpse	r24, r1
    42ce:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    42d0:	80 e2       	ldi	r24, 0x20	; 32
    42d2:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    42d6:	81 11       	cpse	r24, r1
    42d8:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    42da:	81 e2       	ldi	r24, 0x21	; 33
    42dc:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    42e0:	81 11       	cpse	r24, r1
    42e2:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    42e4:	82 e2       	ldi	r24, 0x22	; 34
    42e6:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    42ea:	81 11       	cpse	r24, r1
    42ec:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    42ee:	83 e2       	ldi	r24, 0x23	; 35
    42f0:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    42f4:	81 11       	cpse	r24, r1
    42f6:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    42f8:	84 e2       	ldi	r24, 0x24	; 36
    42fa:	0e 94 54 20 	call	0x40a8	; 0x40a8 <bootmagic_scan_keycode>
    42fe:	88 23       	and	r24, r24
    4300:	11 f0       	breq	.+4      	; 0x4306 <bootmagic+0x242>
    4302:	c0 68       	ori	r28, 0x80	; 128
    4304:	02 c0       	rjmp	.+4      	; 0x430a <bootmagic+0x246>
    if (default_layer) {
    4306:	cc 23       	and	r28, r28
    4308:	29 f0       	breq	.+10     	; 0x4314 <bootmagic+0x250>
        eeconfig_write_default_layer(default_layer);
    430a:	8c 2f       	mov	r24, r28
    430c:	0e 94 c7 21 	call	0x438e	; 0x438e <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4310:	6c 2f       	mov	r22, r28
    4312:	03 c0       	rjmp	.+6      	; 0x431a <bootmagic+0x256>
    } else {
        default_layer = eeconfig_read_default_layer();
    4314:	0e 94 c3 21 	call	0x4386	; 0x4386 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    4318:	68 2f       	mov	r22, r24
    431a:	70 e0       	ldi	r23, 0x00	; 0
    431c:	80 e0       	ldi	r24, 0x00	; 0
    431e:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    4320:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    4322:	0c 94 29 1b 	jmp	0x3652	; 0x3652 <default_layer_set>
    }
}
    4326:	cf 91       	pop	r28
    4328:	08 95       	ret

0000432a <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    432a:	6d ee       	ldi	r22, 0xED	; 237
    432c:	7e ef       	ldi	r23, 0xFE	; 254
    432e:	80 e0       	ldi	r24, 0x00	; 0
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	0e 94 8c 2c 	call	0x5918	; 0x5918 <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4336:	60 e0       	ldi	r22, 0x00	; 0
    4338:	82 e0       	ldi	r24, 0x02	; 2
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    4340:	60 e0       	ldi	r22, 0x00	; 0
    4342:	83 e0       	ldi	r24, 0x03	; 3
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    434a:	60 e0       	ldi	r22, 0x00	; 0
    434c:	84 e0       	ldi	r24, 0x04	; 4
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    4354:	60 e0       	ldi	r22, 0x00	; 0
    4356:	85 e0       	ldi	r24, 0x05	; 5
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	0c 94 7e 2c 	jmp	0x58fc	; 0x58fc <__eewr_byte_m32u4>

0000435e <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    435e:	80 e0       	ldi	r24, 0x00	; 0
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <__eerd_word_m32u4>
    4366:	21 e0       	ldi	r18, 0x01	; 1
    4368:	8d 3e       	cpi	r24, 0xED	; 237
    436a:	9e 4f       	sbci	r25, 0xFE	; 254
    436c:	09 f0       	breq	.+2      	; 0x4370 <eeconfig_is_enabled+0x12>
    436e:	20 e0       	ldi	r18, 0x00	; 0
}
    4370:	82 2f       	mov	r24, r18
    4372:	08 95       	ret

00004374 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4374:	82 e0       	ldi	r24, 0x02	; 2
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	0c 94 70 2c 	jmp	0x58e0	; 0x58e0 <__eerd_byte_m32u4>

0000437c <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    437c:	68 2f       	mov	r22, r24
    437e:	82 e0       	ldi	r24, 0x02	; 2
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	0c 94 7e 2c 	jmp	0x58fc	; 0x58fc <__eewr_byte_m32u4>

00004386 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    4386:	83 e0       	ldi	r24, 0x03	; 3
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	0c 94 70 2c 	jmp	0x58e0	; 0x58e0 <__eerd_byte_m32u4>

0000438e <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    438e:	68 2f       	mov	r22, r24
    4390:	83 e0       	ldi	r24, 0x03	; 3
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	0c 94 7e 2c 	jmp	0x58fc	; 0x58fc <__eewr_byte_m32u4>

00004398 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4398:	84 e0       	ldi	r24, 0x04	; 4
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	0c 94 70 2c 	jmp	0x58e0	; 0x58e0 <__eerd_byte_m32u4>

000043a0 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    43a0:	68 2f       	mov	r22, r24
    43a2:	84 e0       	ldi	r24, 0x04	; 4
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	0c 94 7e 2c 	jmp	0x58fc	; 0x58fc <__eewr_byte_m32u4>

000043aa <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    43aa:	80 91 cd 01 	lds	r24, 0x01CD
    43ae:	80 ff       	sbrs	r24, 0
    43b0:	0b c0       	rjmp	.+22     	; 0x43c8 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    43b2:	60 91 12 01 	lds	r22, 0x0112
    43b6:	85 e0       	ldi	r24, 0x05	; 5
    43b8:	68 9f       	mul	r22, r24
    43ba:	b0 01       	movw	r22, r0
    43bc:	11 24       	eor	r1, r1
    43be:	75 95       	asr	r23
    43c0:	67 95       	ror	r22
    43c2:	75 95       	asr	r23
    43c4:	67 95       	ror	r22
    43c6:	2a c0       	rjmp	.+84     	; 0x441c <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    43c8:	81 ff       	sbrs	r24, 1
    43ca:	09 c0       	rjmp	.+18     	; 0x43de <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    43cc:	60 91 12 01 	lds	r22, 0x0112
    43d0:	85 e0       	ldi	r24, 0x05	; 5
    43d2:	68 9f       	mul	r22, r24
    43d4:	b0 01       	movw	r22, r0
    43d6:	11 24       	eor	r1, r1
    43d8:	75 95       	asr	r23
    43da:	67 95       	ror	r22
    43dc:	1f c0       	rjmp	.+62     	; 0x441c <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    43de:	82 ff       	sbrs	r24, 2
    43e0:	07 c0       	rjmp	.+14     	; 0x43f0 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    43e2:	60 91 12 01 	lds	r22, 0x0112
    43e6:	85 e0       	ldi	r24, 0x05	; 5
    43e8:	68 9f       	mul	r22, r24
    43ea:	b0 01       	movw	r22, r0
    43ec:	11 24       	eor	r1, r1
    43ee:	16 c0       	rjmp	.+44     	; 0x441c <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    43f0:	40 91 ce 01 	lds	r20, 0x01CE
    43f4:	44 23       	and	r20, r20
    43f6:	c9 f0       	breq	.+50     	; 0x442a <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    43f8:	60 91 11 01 	lds	r22, 0x0111
    43fc:	46 17       	cp	r20, r22
    43fe:	88 f7       	brcc	.-30     	; 0x43e2 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4400:	20 91 12 01 	lds	r18, 0x0112
    4404:	85 e0       	ldi	r24, 0x05	; 5
    4406:	28 9f       	mul	r18, r24
    4408:	90 01       	movw	r18, r0
    440a:	11 24       	eor	r1, r1
    440c:	42 9f       	mul	r20, r18
    440e:	c0 01       	movw	r24, r0
    4410:	43 9f       	mul	r20, r19
    4412:	90 0d       	add	r25, r0
    4414:	11 24       	eor	r1, r1
    4416:	70 e0       	ldi	r23, 0x00	; 0
    4418:	0e 94 42 2c 	call	0x5884	; 0x5884 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    441c:	60 38       	cpi	r22, 0x80	; 128
    441e:	71 05       	cpc	r23, r1
    4420:	40 f4       	brcc	.+16     	; 0x4432 <move_unit+0x88>
    4422:	61 15       	cp	r22, r1
    4424:	71 05       	cpc	r23, r1
    4426:	39 f0       	breq	.+14     	; 0x4436 <move_unit+0x8c>
    4428:	02 c0       	rjmp	.+4      	; 0x442e <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    442a:	65 e0       	ldi	r22, 0x05	; 5
    442c:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    442e:	86 2f       	mov	r24, r22
    4430:	08 95       	ret
    4432:	8f e7       	ldi	r24, 0x7F	; 127
    4434:	08 95       	ret
    4436:	81 e0       	ldi	r24, 0x01	; 1
}
    4438:	08 95       	ret

0000443a <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    443a:	80 91 cd 01 	lds	r24, 0x01CD
    443e:	80 ff       	sbrs	r24, 0
    4440:	08 c0       	rjmp	.+16     	; 0x4452 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4442:	60 91 10 01 	lds	r22, 0x0110
    4446:	70 e0       	ldi	r23, 0x00	; 0
    4448:	75 95       	asr	r23
    444a:	67 95       	ror	r22
    444c:	75 95       	asr	r23
    444e:	67 95       	ror	r22
    4450:	21 c0       	rjmp	.+66     	; 0x4494 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    4452:	81 ff       	sbrs	r24, 1
    4454:	06 c0       	rjmp	.+12     	; 0x4462 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4456:	60 91 10 01 	lds	r22, 0x0110
    445a:	70 e0       	ldi	r23, 0x00	; 0
    445c:	75 95       	asr	r23
    445e:	67 95       	ror	r22
    4460:	19 c0       	rjmp	.+50     	; 0x4494 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    4462:	82 ff       	sbrs	r24, 2
    4464:	04 c0       	rjmp	.+8      	; 0x446e <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4466:	60 91 10 01 	lds	r22, 0x0110
    446a:	70 e0       	ldi	r23, 0x00	; 0
    446c:	10 c0       	rjmp	.+32     	; 0x448e <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    446e:	80 91 ce 01 	lds	r24, 0x01CE
    4472:	88 23       	and	r24, r24
    4474:	c1 f0       	breq	.+48     	; 0x44a6 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4476:	60 91 0f 01 	lds	r22, 0x010F
    447a:	86 17       	cp	r24, r22
    447c:	a0 f7       	brcc	.-24     	; 0x4466 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    447e:	90 91 10 01 	lds	r25, 0x0110
    4482:	98 9f       	mul	r25, r24
    4484:	c0 01       	movw	r24, r0
    4486:	11 24       	eor	r1, r1
    4488:	70 e0       	ldi	r23, 0x00	; 0
    448a:	0e 94 42 2c 	call	0x5884	; 0x5884 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    448e:	60 38       	cpi	r22, 0x80	; 128
    4490:	71 05       	cpc	r23, r1
    4492:	28 f4       	brcc	.+10     	; 0x449e <wheel_unit+0x64>
    4494:	61 15       	cp	r22, r1
    4496:	71 05       	cpc	r23, r1
    4498:	21 f0       	breq	.+8      	; 0x44a2 <wheel_unit+0x68>
    449a:	86 2f       	mov	r24, r22
    449c:	08 95       	ret
    449e:	8f e7       	ldi	r24, 0x7F	; 127
    44a0:	08 95       	ret
    44a2:	81 e0       	ldi	r24, 0x01	; 1
    44a4:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    44a6:	61 e0       	ldi	r22, 0x01	; 1
    44a8:	70 e0       	ldi	r23, 0x00	; 0
    44aa:	f4 cf       	rjmp	.-24     	; 0x4494 <wheel_unit+0x5a>

000044ac <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    44ac:	80 3f       	cpi	r24, 0xF0	; 240
    44ae:	21 f4       	brne	.+8      	; 0x44b8 <mousekey_on+0xc>
    44b0:	0e 94 d5 21 	call	0x43aa	; 0x43aa <move_unit>
    44b4:	81 95       	neg	r24
    44b6:	04 c0       	rjmp	.+8      	; 0x44c0 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    44b8:	81 3f       	cpi	r24, 0xF1	; 241
    44ba:	29 f4       	brne	.+10     	; 0x44c6 <mousekey_on+0x1a>
    44bc:	0e 94 d5 21 	call	0x43aa	; 0x43aa <move_unit>
    44c0:	80 93 d1 01 	sts	0x01D1, r24
    44c4:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    44c6:	82 3f       	cpi	r24, 0xF2	; 242
    44c8:	21 f4       	brne	.+8      	; 0x44d2 <mousekey_on+0x26>
    44ca:	0e 94 d5 21 	call	0x43aa	; 0x43aa <move_unit>
    44ce:	81 95       	neg	r24
    44d0:	04 c0       	rjmp	.+8      	; 0x44da <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    44d2:	83 3f       	cpi	r24, 0xF3	; 243
    44d4:	29 f4       	brne	.+10     	; 0x44e0 <mousekey_on+0x34>
    44d6:	0e 94 d5 21 	call	0x43aa	; 0x43aa <move_unit>
    44da:	80 93 d0 01 	sts	0x01D0, r24
    44de:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    44e0:	89 3f       	cpi	r24, 0xF9	; 249
    44e2:	19 f4       	brne	.+6      	; 0x44ea <mousekey_on+0x3e>
    44e4:	0e 94 1d 22 	call	0x443a	; 0x443a <wheel_unit>
    44e8:	05 c0       	rjmp	.+10     	; 0x44f4 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    44ea:	8a 3f       	cpi	r24, 0xFA	; 250
    44ec:	31 f4       	brne	.+12     	; 0x44fa <mousekey_on+0x4e>
    44ee:	0e 94 1d 22 	call	0x443a	; 0x443a <wheel_unit>
    44f2:	81 95       	neg	r24
    44f4:	80 93 d2 01 	sts	0x01D2, r24
    44f8:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    44fa:	8b 3f       	cpi	r24, 0xFB	; 251
    44fc:	21 f4       	brne	.+8      	; 0x4506 <mousekey_on+0x5a>
    44fe:	0e 94 1d 22 	call	0x443a	; 0x443a <wheel_unit>
    4502:	81 95       	neg	r24
    4504:	04 c0       	rjmp	.+8      	; 0x450e <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    4506:	8c 3f       	cpi	r24, 0xFC	; 252
    4508:	29 f4       	brne	.+10     	; 0x4514 <mousekey_on+0x68>
    450a:	0e 94 1d 22 	call	0x443a	; 0x443a <wheel_unit>
    450e:	80 93 d3 01 	sts	0x01D3, r24
    4512:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4514:	84 3f       	cpi	r24, 0xF4	; 244
    4516:	21 f4       	brne	.+8      	; 0x4520 <mousekey_on+0x74>
    4518:	80 91 cf 01 	lds	r24, 0x01CF
    451c:	81 60       	ori	r24, 0x01	; 1
    451e:	17 c0       	rjmp	.+46     	; 0x454e <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4520:	85 3f       	cpi	r24, 0xF5	; 245
    4522:	21 f4       	brne	.+8      	; 0x452c <mousekey_on+0x80>
    4524:	80 91 cf 01 	lds	r24, 0x01CF
    4528:	82 60       	ori	r24, 0x02	; 2
    452a:	11 c0       	rjmp	.+34     	; 0x454e <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    452c:	86 3f       	cpi	r24, 0xF6	; 246
    452e:	21 f4       	brne	.+8      	; 0x4538 <mousekey_on+0x8c>
    4530:	80 91 cf 01 	lds	r24, 0x01CF
    4534:	84 60       	ori	r24, 0x04	; 4
    4536:	0b c0       	rjmp	.+22     	; 0x454e <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4538:	87 3f       	cpi	r24, 0xF7	; 247
    453a:	21 f4       	brne	.+8      	; 0x4544 <mousekey_on+0x98>
    453c:	80 91 cf 01 	lds	r24, 0x01CF
    4540:	88 60       	ori	r24, 0x08	; 8
    4542:	05 c0       	rjmp	.+10     	; 0x454e <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4544:	88 3f       	cpi	r24, 0xF8	; 248
    4546:	31 f4       	brne	.+12     	; 0x4554 <mousekey_on+0xa8>
    4548:	80 91 cf 01 	lds	r24, 0x01CF
    454c:	80 61       	ori	r24, 0x10	; 16
    454e:	80 93 cf 01 	sts	0x01CF, r24
    4552:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4554:	8d 3f       	cpi	r24, 0xFD	; 253
    4556:	21 f4       	brne	.+8      	; 0x4560 <mousekey_on+0xb4>
    4558:	80 91 cd 01 	lds	r24, 0x01CD
    455c:	81 60       	ori	r24, 0x01	; 1
    455e:	0b c0       	rjmp	.+22     	; 0x4576 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4560:	8e 3f       	cpi	r24, 0xFE	; 254
    4562:	21 f4       	brne	.+8      	; 0x456c <mousekey_on+0xc0>
    4564:	80 91 cd 01 	lds	r24, 0x01CD
    4568:	82 60       	ori	r24, 0x02	; 2
    456a:	05 c0       	rjmp	.+10     	; 0x4576 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    456c:	8f 3f       	cpi	r24, 0xFF	; 255
    456e:	29 f4       	brne	.+10     	; 0x457a <mousekey_on+0xce>
    4570:	80 91 cd 01 	lds	r24, 0x01CD
    4574:	84 60       	ori	r24, 0x04	; 4
    4576:	80 93 cd 01 	sts	0x01CD, r24
    457a:	08 95       	ret

0000457c <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    457c:	80 3f       	cpi	r24, 0xF0	; 240
    457e:	39 f4       	brne	.+14     	; 0x458e <mousekey_off+0x12>
    4580:	80 91 d1 01 	lds	r24, 0x01D1
    4584:	87 ff       	sbrs	r24, 7
    4586:	6c c0       	rjmp	.+216    	; 0x4660 <mousekey_off+0xe4>
    4588:	10 92 d1 01 	sts	0x01D1, r1
    458c:	69 c0       	rjmp	.+210    	; 0x4660 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    458e:	81 3f       	cpi	r24, 0xF1	; 241
    4590:	29 f4       	brne	.+10     	; 0x459c <mousekey_off+0x20>
    4592:	80 91 d1 01 	lds	r24, 0x01D1
    4596:	18 16       	cp	r1, r24
    4598:	bc f3       	brlt	.-18     	; 0x4588 <mousekey_off+0xc>
    459a:	62 c0       	rjmp	.+196    	; 0x4660 <mousekey_off+0xe4>
    459c:	90 91 d0 01 	lds	r25, 0x01D0
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    45a0:	82 3f       	cpi	r24, 0xF2	; 242
    45a2:	29 f4       	brne	.+10     	; 0x45ae <mousekey_off+0x32>
    45a4:	97 ff       	sbrs	r25, 7
    45a6:	5c c0       	rjmp	.+184    	; 0x4660 <mousekey_off+0xe4>
    45a8:	10 92 d0 01 	sts	0x01D0, r1
    45ac:	59 c0       	rjmp	.+178    	; 0x4660 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    45ae:	83 3f       	cpi	r24, 0xF3	; 243
    45b0:	19 f4       	brne	.+6      	; 0x45b8 <mousekey_off+0x3c>
    45b2:	19 16       	cp	r1, r25
    45b4:	cc f3       	brlt	.-14     	; 0x45a8 <mousekey_off+0x2c>
    45b6:	54 c0       	rjmp	.+168    	; 0x4660 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    45b8:	89 3f       	cpi	r24, 0xF9	; 249
    45ba:	41 f4       	brne	.+16     	; 0x45cc <mousekey_off+0x50>
    45bc:	80 91 d2 01 	lds	r24, 0x01D2
    45c0:	18 16       	cp	r1, r24
    45c2:	0c f0       	brlt	.+2      	; 0x45c6 <mousekey_off+0x4a>
    45c4:	4d c0       	rjmp	.+154    	; 0x4660 <mousekey_off+0xe4>
    45c6:	10 92 d2 01 	sts	0x01D2, r1
    45ca:	4a c0       	rjmp	.+148    	; 0x4660 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    45cc:	8a 3f       	cpi	r24, 0xFA	; 250
    45ce:	29 f4       	brne	.+10     	; 0x45da <mousekey_off+0x5e>
    45d0:	80 91 d2 01 	lds	r24, 0x01D2
    45d4:	87 ff       	sbrs	r24, 7
    45d6:	44 c0       	rjmp	.+136    	; 0x4660 <mousekey_off+0xe4>
    45d8:	f6 cf       	rjmp	.-20     	; 0x45c6 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    45da:	8b 3f       	cpi	r24, 0xFB	; 251
    45dc:	39 f4       	brne	.+14     	; 0x45ec <mousekey_off+0x70>
    45de:	80 91 d3 01 	lds	r24, 0x01D3
    45e2:	87 ff       	sbrs	r24, 7
    45e4:	3d c0       	rjmp	.+122    	; 0x4660 <mousekey_off+0xe4>
    45e6:	10 92 d3 01 	sts	0x01D3, r1
    45ea:	3a c0       	rjmp	.+116    	; 0x4660 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    45ec:	8c 3f       	cpi	r24, 0xFC	; 252
    45ee:	29 f4       	brne	.+10     	; 0x45fa <mousekey_off+0x7e>
    45f0:	80 91 d3 01 	lds	r24, 0x01D3
    45f4:	18 16       	cp	r1, r24
    45f6:	bc f3       	brlt	.-18     	; 0x45e6 <mousekey_off+0x6a>
    45f8:	33 c0       	rjmp	.+102    	; 0x4660 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    45fa:	84 3f       	cpi	r24, 0xF4	; 244
    45fc:	21 f4       	brne	.+8      	; 0x4606 <mousekey_off+0x8a>
    45fe:	80 91 cf 01 	lds	r24, 0x01CF
    4602:	8e 7f       	andi	r24, 0xFE	; 254
    4604:	17 c0       	rjmp	.+46     	; 0x4634 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4606:	85 3f       	cpi	r24, 0xF5	; 245
    4608:	21 f4       	brne	.+8      	; 0x4612 <mousekey_off+0x96>
    460a:	80 91 cf 01 	lds	r24, 0x01CF
    460e:	8d 7f       	andi	r24, 0xFD	; 253
    4610:	11 c0       	rjmp	.+34     	; 0x4634 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4612:	86 3f       	cpi	r24, 0xF6	; 246
    4614:	21 f4       	brne	.+8      	; 0x461e <mousekey_off+0xa2>
    4616:	80 91 cf 01 	lds	r24, 0x01CF
    461a:	8b 7f       	andi	r24, 0xFB	; 251
    461c:	0b c0       	rjmp	.+22     	; 0x4634 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    461e:	87 3f       	cpi	r24, 0xF7	; 247
    4620:	21 f4       	brne	.+8      	; 0x462a <mousekey_off+0xae>
    4622:	80 91 cf 01 	lds	r24, 0x01CF
    4626:	87 7f       	andi	r24, 0xF7	; 247
    4628:	05 c0       	rjmp	.+10     	; 0x4634 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    462a:	88 3f       	cpi	r24, 0xF8	; 248
    462c:	31 f4       	brne	.+12     	; 0x463a <mousekey_off+0xbe>
    462e:	80 91 cf 01 	lds	r24, 0x01CF
    4632:	8f 7e       	andi	r24, 0xEF	; 239
    4634:	80 93 cf 01 	sts	0x01CF, r24
    4638:	13 c0       	rjmp	.+38     	; 0x4660 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    463a:	8d 3f       	cpi	r24, 0xFD	; 253
    463c:	21 f4       	brne	.+8      	; 0x4646 <mousekey_off+0xca>
    463e:	80 91 cd 01 	lds	r24, 0x01CD
    4642:	8e 7f       	andi	r24, 0xFE	; 254
    4644:	0b c0       	rjmp	.+22     	; 0x465c <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4646:	8e 3f       	cpi	r24, 0xFE	; 254
    4648:	21 f4       	brne	.+8      	; 0x4652 <mousekey_off+0xd6>
    464a:	80 91 cd 01 	lds	r24, 0x01CD
    464e:	8d 7f       	andi	r24, 0xFD	; 253
    4650:	05 c0       	rjmp	.+10     	; 0x465c <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4652:	8f 3f       	cpi	r24, 0xFF	; 255
    4654:	29 f4       	brne	.+10     	; 0x4660 <mousekey_off+0xe4>
    4656:	80 91 cd 01 	lds	r24, 0x01CD
    465a:	8b 7f       	andi	r24, 0xFB	; 251
    465c:	80 93 cd 01 	sts	0x01CD, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4660:	80 91 d0 01 	lds	r24, 0x01D0
    4664:	81 11       	cpse	r24, r1
    4666:	0e c0       	rjmp	.+28     	; 0x4684 <mousekey_off+0x108>
    4668:	80 91 d1 01 	lds	r24, 0x01D1
    466c:	81 11       	cpse	r24, r1
    466e:	0a c0       	rjmp	.+20     	; 0x4684 <mousekey_off+0x108>
    4670:	80 91 d2 01 	lds	r24, 0x01D2
    4674:	81 11       	cpse	r24, r1
    4676:	06 c0       	rjmp	.+12     	; 0x4684 <mousekey_off+0x108>
    4678:	80 91 d3 01 	lds	r24, 0x01D3
    467c:	81 11       	cpse	r24, r1
    467e:	02 c0       	rjmp	.+4      	; 0x4684 <mousekey_off+0x108>
        mousekey_repeat = 0;
    4680:	10 92 ce 01 	sts	0x01CE, r1
    4684:	08 95       	ret

00004686 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4686:	80 91 c3 01 	lds	r24, 0x01C3
    468a:	83 ff       	sbrs	r24, 3
    468c:	7e c0       	rjmp	.+252    	; 0x478a <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    468e:	81 eb       	ldi	r24, 0xB1	; 177
    4690:	94 e0       	ldi	r25, 0x04	; 4
    4692:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    phex(mouse_report.buttons); print("|");
    4696:	80 91 cf 01 	lds	r24, 0x01CF
    469a:	1f 92       	push	r1
    469c:	8f 93       	push	r24
    469e:	8c ea       	ldi	r24, 0xAC	; 172
    46a0:	94 e0       	ldi	r25, 0x04	; 4
    46a2:	9f 93       	push	r25
    46a4:	8f 93       	push	r24
    46a6:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    46aa:	8a ea       	ldi	r24, 0xAA	; 170
    46ac:	94 e0       	ldi	r25, 0x04	; 4
    46ae:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print_decs(mouse_report.x); print(" ");
    46b2:	20 91 d0 01 	lds	r18, 0x01D0
    46b6:	82 2f       	mov	r24, r18
    46b8:	99 27       	eor	r25, r25
    46ba:	87 fd       	sbrc	r24, 7
    46bc:	90 95       	com	r25
    46be:	9f 93       	push	r25
    46c0:	2f 93       	push	r18
    46c2:	87 ea       	ldi	r24, 0xA7	; 167
    46c4:	94 e0       	ldi	r25, 0x04	; 4
    46c6:	9f 93       	push	r25
    46c8:	8f 93       	push	r24
    46ca:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    46ce:	85 ea       	ldi	r24, 0xA5	; 165
    46d0:	94 e0       	ldi	r25, 0x04	; 4
    46d2:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print_decs(mouse_report.y); print(" ");
    46d6:	20 91 d1 01 	lds	r18, 0x01D1
    46da:	82 2f       	mov	r24, r18
    46dc:	99 27       	eor	r25, r25
    46de:	87 fd       	sbrc	r24, 7
    46e0:	90 95       	com	r25
    46e2:	9f 93       	push	r25
    46e4:	2f 93       	push	r18
    46e6:	82 ea       	ldi	r24, 0xA2	; 162
    46e8:	94 e0       	ldi	r25, 0x04	; 4
    46ea:	9f 93       	push	r25
    46ec:	8f 93       	push	r24
    46ee:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    46f2:	80 ea       	ldi	r24, 0xA0	; 160
    46f4:	94 e0       	ldi	r25, 0x04	; 4
    46f6:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print_decs(mouse_report.v); print(" ");
    46fa:	20 91 d2 01 	lds	r18, 0x01D2
    46fe:	82 2f       	mov	r24, r18
    4700:	99 27       	eor	r25, r25
    4702:	87 fd       	sbrc	r24, 7
    4704:	90 95       	com	r25
    4706:	9f 93       	push	r25
    4708:	2f 93       	push	r18
    470a:	8d e9       	ldi	r24, 0x9D	; 157
    470c:	94 e0       	ldi	r25, 0x04	; 4
    470e:	9f 93       	push	r25
    4710:	8f 93       	push	r24
    4712:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4716:	8b e9       	ldi	r24, 0x9B	; 155
    4718:	94 e0       	ldi	r25, 0x04	; 4
    471a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print_decs(mouse_report.h); print("](");
    471e:	20 91 d3 01 	lds	r18, 0x01D3
    4722:	82 2f       	mov	r24, r18
    4724:	99 27       	eor	r25, r25
    4726:	87 fd       	sbrc	r24, 7
    4728:	90 95       	com	r25
    472a:	9f 93       	push	r25
    472c:	2f 93       	push	r18
    472e:	88 e9       	ldi	r24, 0x98	; 152
    4730:	94 e0       	ldi	r25, 0x04	; 4
    4732:	9f 93       	push	r25
    4734:	8f 93       	push	r24
    4736:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    473a:	85 e9       	ldi	r24, 0x95	; 149
    473c:	94 e0       	ldi	r25, 0x04	; 4
    473e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print_dec(mousekey_repeat); print("/");
    4742:	80 91 ce 01 	lds	r24, 0x01CE
    4746:	1f 92       	push	r1
    4748:	8f 93       	push	r24
    474a:	82 e9       	ldi	r24, 0x92	; 146
    474c:	94 e0       	ldi	r25, 0x04	; 4
    474e:	9f 93       	push	r25
    4750:	8f 93       	push	r24
    4752:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4756:	80 e9       	ldi	r24, 0x90	; 144
    4758:	94 e0       	ldi	r25, 0x04	; 4
    475a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print_dec(mousekey_accel); print(")\n");
    475e:	80 91 cd 01 	lds	r24, 0x01CD
    4762:	1f 92       	push	r1
    4764:	8f 93       	push	r24
    4766:	8d e8       	ldi	r24, 0x8D	; 141
    4768:	94 e0       	ldi	r25, 0x04	; 4
    476a:	9f 93       	push	r25
    476c:	8f 93       	push	r24
    476e:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4772:	8a e8       	ldi	r24, 0x8A	; 138
    4774:	94 e0       	ldi	r25, 0x04	; 4
    4776:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    477a:	8d b7       	in	r24, 0x3d	; 61
    477c:	9e b7       	in	r25, 0x3e	; 62
    477e:	4c 96       	adiw	r24, 0x1c	; 28
    4780:	0f b6       	in	r0, 0x3f	; 63
    4782:	f8 94       	cli
    4784:	9e bf       	out	0x3e, r25	; 62
    4786:	0f be       	out	0x3f, r0	; 63
    4788:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    478a:	8f ec       	ldi	r24, 0xCF	; 207
    478c:	91 e0       	ldi	r25, 0x01	; 1
    478e:	0e 94 ac 11 	call	0x2358	; 0x2358 <host_mouse_send>
    last_timer = timer_read();
    4792:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <timer_read>
    4796:	90 93 cc 01 	sts	0x01CC, r25
    479a:	80 93 cb 01 	sts	0x01CB, r24
    479e:	08 95       	ret

000047a0 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    47a0:	1f 93       	push	r17
    47a2:	cf 93       	push	r28
    47a4:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    47a6:	80 91 cb 01 	lds	r24, 0x01CB
    47aa:	90 91 cc 01 	lds	r25, 0x01CC
    47ae:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <timer_elapsed>
    47b2:	40 91 ce 01 	lds	r20, 0x01CE
    47b6:	44 23       	and	r20, r20
    47b8:	21 f0       	breq	.+8      	; 0x47c2 <mousekey_task+0x22>
    47ba:	20 91 13 01 	lds	r18, 0x0113
    47be:	30 e0       	ldi	r19, 0x00	; 0
    47c0:	06 c0       	rjmp	.+12     	; 0x47ce <mousekey_task+0x2e>
    47c2:	20 91 14 01 	lds	r18, 0x0114
    47c6:	5a e0       	ldi	r21, 0x0A	; 10
    47c8:	25 9f       	mul	r18, r21
    47ca:	90 01       	movw	r18, r0
    47cc:	11 24       	eor	r1, r1
    47ce:	82 17       	cp	r24, r18
    47d0:	93 07       	cpc	r25, r19
    47d2:	08 f4       	brcc	.+2      	; 0x47d6 <mousekey_task+0x36>
    47d4:	82 c0       	rjmp	.+260    	; 0x48da <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    47d6:	80 91 d0 01 	lds	r24, 0x01D0
    47da:	10 91 d1 01 	lds	r17, 0x01D1
    47de:	d0 91 d2 01 	lds	r29, 0x01D2
    47e2:	c0 91 d3 01 	lds	r28, 0x01D3
    47e6:	81 11       	cpse	r24, r1
    47e8:	07 c0       	rjmp	.+14     	; 0x47f8 <mousekey_task+0x58>
    47ea:	11 11       	cpse	r17, r1
    47ec:	05 c0       	rjmp	.+10     	; 0x47f8 <mousekey_task+0x58>
    47ee:	d1 11       	cpse	r29, r1
    47f0:	03 c0       	rjmp	.+6      	; 0x47f8 <mousekey_task+0x58>
    47f2:	cc 23       	and	r28, r28
    47f4:	09 f4       	brne	.+2      	; 0x47f8 <mousekey_task+0x58>
    47f6:	71 c0       	rjmp	.+226    	; 0x48da <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    47f8:	4f 3f       	cpi	r20, 0xFF	; 255
    47fa:	19 f0       	breq	.+6      	; 0x4802 <mousekey_task+0x62>
        mousekey_repeat++;
    47fc:	4f 5f       	subi	r20, 0xFF	; 255
    47fe:	40 93 ce 01 	sts	0x01CE, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4802:	18 16       	cp	r1, r24
    4804:	24 f4       	brge	.+8      	; 0x480e <mousekey_task+0x6e>
    4806:	0e 94 d5 21 	call	0x43aa	; 0x43aa <move_unit>
    480a:	80 93 d0 01 	sts	0x01D0, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    480e:	80 91 d0 01 	lds	r24, 0x01D0
    4812:	87 ff       	sbrs	r24, 7
    4814:	05 c0       	rjmp	.+10     	; 0x4820 <mousekey_task+0x80>
    4816:	0e 94 d5 21 	call	0x43aa	; 0x43aa <move_unit>
    481a:	81 95       	neg	r24
    481c:	80 93 d0 01 	sts	0x01D0, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4820:	11 16       	cp	r1, r17
    4822:	24 f4       	brge	.+8      	; 0x482c <mousekey_task+0x8c>
    4824:	0e 94 d5 21 	call	0x43aa	; 0x43aa <move_unit>
    4828:	80 93 d1 01 	sts	0x01D1, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    482c:	80 91 d1 01 	lds	r24, 0x01D1
    4830:	87 ff       	sbrs	r24, 7
    4832:	05 c0       	rjmp	.+10     	; 0x483e <mousekey_task+0x9e>
    4834:	0e 94 d5 21 	call	0x43aa	; 0x43aa <move_unit>
    4838:	81 95       	neg	r24
    483a:	80 93 d1 01 	sts	0x01D1, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    483e:	60 91 d0 01 	lds	r22, 0x01D0
    4842:	66 23       	and	r22, r22
    4844:	39 f1       	breq	.+78     	; 0x4894 <mousekey_task+0xf4>
    4846:	10 91 d1 01 	lds	r17, 0x01D1
    484a:	11 23       	and	r17, r17
    484c:	19 f1       	breq	.+70     	; 0x4894 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    484e:	77 27       	eor	r23, r23
    4850:	67 fd       	sbrc	r22, 7
    4852:	70 95       	com	r23
    4854:	87 2f       	mov	r24, r23
    4856:	97 2f       	mov	r25, r23
    4858:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <__floatsisf>
    485c:	23 e3       	ldi	r18, 0x33	; 51
    485e:	33 e3       	ldi	r19, 0x33	; 51
    4860:	43 e3       	ldi	r20, 0x33	; 51
    4862:	5f e3       	ldi	r21, 0x3F	; 63
    4864:	0e 94 b7 2b 	call	0x576e	; 0x576e <__mulsf3>
    4868:	0e 94 20 2b 	call	0x5640	; 0x5640 <__fixsfsi>
    486c:	60 93 d0 01 	sts	0x01D0, r22
        mouse_report.y *= 0.7;
    4870:	61 2f       	mov	r22, r17
    4872:	77 27       	eor	r23, r23
    4874:	67 fd       	sbrc	r22, 7
    4876:	70 95       	com	r23
    4878:	87 2f       	mov	r24, r23
    487a:	97 2f       	mov	r25, r23
    487c:	0e 94 53 2b 	call	0x56a6	; 0x56a6 <__floatsisf>
    4880:	23 e3       	ldi	r18, 0x33	; 51
    4882:	33 e3       	ldi	r19, 0x33	; 51
    4884:	43 e3       	ldi	r20, 0x33	; 51
    4886:	5f e3       	ldi	r21, 0x3F	; 63
    4888:	0e 94 b7 2b 	call	0x576e	; 0x576e <__mulsf3>
    488c:	0e 94 20 2b 	call	0x5640	; 0x5640 <__fixsfsi>
    4890:	60 93 d1 01 	sts	0x01D1, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4894:	1d 16       	cp	r1, r29
    4896:	24 f4       	brge	.+8      	; 0x48a0 <mousekey_task+0x100>
    4898:	0e 94 1d 22 	call	0x443a	; 0x443a <wheel_unit>
    489c:	80 93 d2 01 	sts	0x01D2, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    48a0:	80 91 d2 01 	lds	r24, 0x01D2
    48a4:	87 ff       	sbrs	r24, 7
    48a6:	05 c0       	rjmp	.+10     	; 0x48b2 <mousekey_task+0x112>
    48a8:	0e 94 1d 22 	call	0x443a	; 0x443a <wheel_unit>
    48ac:	81 95       	neg	r24
    48ae:	80 93 d2 01 	sts	0x01D2, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    48b2:	1c 16       	cp	r1, r28
    48b4:	24 f4       	brge	.+8      	; 0x48be <mousekey_task+0x11e>
    48b6:	0e 94 1d 22 	call	0x443a	; 0x443a <wheel_unit>
    48ba:	80 93 d3 01 	sts	0x01D3, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    48be:	80 91 d3 01 	lds	r24, 0x01D3
    48c2:	87 ff       	sbrs	r24, 7
    48c4:	05 c0       	rjmp	.+10     	; 0x48d0 <mousekey_task+0x130>
    48c6:	0e 94 1d 22 	call	0x443a	; 0x443a <wheel_unit>
    48ca:	81 95       	neg	r24
    48cc:	80 93 d3 01 	sts	0x01D3, r24

    mousekey_send();
}
    48d0:	df 91       	pop	r29
    48d2:	cf 91       	pop	r28
    48d4:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    48d6:	0c 94 43 23 	jmp	0x4686	; 0x4686 <mousekey_send>
}
    48da:	df 91       	pop	r29
    48dc:	cf 91       	pop	r28
    48de:	1f 91       	pop	r17
    48e0:	08 95       	ret

000048e2 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    48e2:	ef ec       	ldi	r30, 0xCF	; 207
    48e4:	f1 e0       	ldi	r31, 0x01	; 1
    48e6:	85 e0       	ldi	r24, 0x05	; 5
    48e8:	df 01       	movw	r26, r30
    48ea:	1d 92       	st	X+, r1
    48ec:	8a 95       	dec	r24
    48ee:	e9 f7       	brne	.-6      	; 0x48ea <mousekey_clear+0x8>
    mousekey_repeat = 0;
    48f0:	10 92 ce 01 	sts	0x01CE, r1
    mousekey_accel = 0;
    48f4:	10 92 cd 01 	sts	0x01CD, r1
    48f8:	08 95       	ret

000048fa <command_console_help>:
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\n----- Console Help -----\n");
    48fa:	80 e8       	ldi	r24, 0x80	; 128
    48fc:	99 e0       	ldi	r25, 0x09	; 9
    48fe:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("ESC/q:	quit\n");
    4902:	83 e7       	ldi	r24, 0x73	; 115
    4904:	99 e0       	ldi	r25, 0x09	; 9
    4906:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
#ifdef MOUSEKEY_ENABLE
    print("m:	mousekey\n");
    490a:	86 e6       	ldi	r24, 0x66	; 102
    490c:	99 e0       	ldi	r25, 0x09	; 9
    490e:	0c 94 0e 08 	jmp	0x101c	; 0x101c <xputs>

00004912 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\n----- Mousekey Parameters Help -----\n");
    4912:	83 ee       	ldi	r24, 0xE3	; 227
    4914:	98 e0       	ldi	r25, 0x08	; 8
    4916:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("ESC/q:	quit\n");
    491a:	86 ed       	ldi	r24, 0xD6	; 214
    491c:	98 e0       	ldi	r25, 0x08	; 8
    491e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("1:	select mk_delay(*10ms)\n");
    4922:	8b eb       	ldi	r24, 0xBB	; 187
    4924:	98 e0       	ldi	r25, 0x08	; 8
    4926:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("2:	select mk_interval(ms)\n");
    492a:	80 ea       	ldi	r24, 0xA0	; 160
    492c:	98 e0       	ldi	r25, 0x08	; 8
    492e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("3:	select mk_max_speed\n");
    4932:	88 e8       	ldi	r24, 0x88	; 136
    4934:	98 e0       	ldi	r25, 0x08	; 8
    4936:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("4:	select mk_time_to_max\n");
    493a:	8e e6       	ldi	r24, 0x6E	; 110
    493c:	98 e0       	ldi	r25, 0x08	; 8
    493e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("5:	select mk_wheel_max_speed\n");
    4942:	80 e5       	ldi	r24, 0x50	; 80
    4944:	98 e0       	ldi	r25, 0x08	; 8
    4946:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("6:	select mk_wheel_time_to_max\n");
    494a:	80 e3       	ldi	r24, 0x30	; 48
    494c:	98 e0       	ldi	r25, 0x08	; 8
    494e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("p:	print parameters\n");
    4952:	8b e1       	ldi	r24, 0x1B	; 27
    4954:	98 e0       	ldi	r25, 0x08	; 8
    4956:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("d:	set default values\n");
    495a:	84 e0       	ldi	r24, 0x04	; 4
    495c:	98 e0       	ldi	r25, 0x08	; 8
    495e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("up:	increase parameters(+1)\n");
    4962:	87 ee       	ldi	r24, 0xE7	; 231
    4964:	97 e0       	ldi	r25, 0x07	; 7
    4966:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("down:	decrease parameters(-1)\n");
    496a:	88 ec       	ldi	r24, 0xC8	; 200
    496c:	97 e0       	ldi	r25, 0x07	; 7
    496e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("pgup:	increase parameters(+10)\n");
    4972:	88 ea       	ldi	r24, 0xA8	; 168
    4974:	97 e0       	ldi	r25, 0x07	; 7
    4976:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("pgdown:	decrease parameters(-10)\n");
    497a:	86 e8       	ldi	r24, 0x86	; 134
    497c:	97 e0       	ldi	r25, 0x07	; 7
    497e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("\nspeed = delta * max_speed * (repeat / time_to_max)\n");
    4982:	81 e5       	ldi	r24, 0x51	; 81
    4984:	97 e0       	ldi	r25, 0x07	; 7
    4986:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("where delta: cursor="); pdec(MOUSEKEY_MOVE_DELTA);
    498a:	8c e3       	ldi	r24, 0x3C	; 60
    498c:	97 e0       	ldi	r25, 0x07	; 7
    498e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4992:	1f 92       	push	r1
    4994:	85 e0       	ldi	r24, 0x05	; 5
    4996:	8f 93       	push	r24
    4998:	89 e3       	ldi	r24, 0x39	; 57
    499a:	97 e0       	ldi	r25, 0x07	; 7
    499c:	9f 93       	push	r25
    499e:	8f 93       	push	r24
    49a0:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    print(", wheel="); pdec(MOUSEKEY_WHEEL_DELTA); print("\n");
    49a4:	80 e3       	ldi	r24, 0x30	; 48
    49a6:	97 e0       	ldi	r25, 0x07	; 7
    49a8:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    49ac:	1f 92       	push	r1
    49ae:	81 e0       	ldi	r24, 0x01	; 1
    49b0:	8f 93       	push	r24
    49b2:	8d e2       	ldi	r24, 0x2D	; 45
    49b4:	97 e0       	ldi	r25, 0x07	; 7
    49b6:	9f 93       	push	r25
    49b8:	8f 93       	push	r24
    49ba:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    49be:	8b e2       	ldi	r24, 0x2B	; 43
    49c0:	97 e0       	ldi	r25, 0x07	; 7
    49c2:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
    49c6:	8d b7       	in	r24, 0x3d	; 61
    49c8:	9e b7       	in	r25, 0x3e	; 62
    49ca:	08 96       	adiw	r24, 0x08	; 8
    49cc:	0f b6       	in	r0, 0x3f	; 63
    49ce:	f8 94       	cli
    49d0:	9e bf       	out	0x3e, r25	; 62
    49d2:	0f be       	out	0x3f, r0	; 63
    49d4:	8d bf       	out	0x3d, r24	; 61
    49d6:	8e ef       	ldi	r24, 0xFE	; 254
    49d8:	96 e0       	ldi	r25, 0x06	; 6
    49da:	0c 94 0e 08 	jmp	0x101c	; 0x101c <xputs>

000049de <mousekey_param_inc>:
}

#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    49de:	83 30       	cpi	r24, 0x03	; 3
    49e0:	09 f4       	brne	.+2      	; 0x49e4 <mousekey_param_inc+0x6>
    49e2:	59 c0       	rjmp	.+178    	; 0x4a96 <mousekey_param_inc+0xb8>
    49e4:	28 f4       	brcc	.+10     	; 0x49f0 <mousekey_param_inc+0x12>
    49e6:	81 30       	cpi	r24, 0x01	; 1
    49e8:	61 f0       	breq	.+24     	; 0x4a02 <mousekey_param_inc+0x24>
    49ea:	82 30       	cpi	r24, 0x02	; 2
    49ec:	79 f1       	breq	.+94     	; 0x4a4c <mousekey_param_inc+0x6e>
    49ee:	08 95       	ret
    49f0:	85 30       	cpi	r24, 0x05	; 5
    49f2:	09 f4       	brne	.+2      	; 0x49f6 <mousekey_param_inc+0x18>
    49f4:	9a c0       	rjmp	.+308    	; 0x4b2a <mousekey_param_inc+0x14c>
    49f6:	08 f4       	brcc	.+2      	; 0x49fa <mousekey_param_inc+0x1c>
    49f8:	73 c0       	rjmp	.+230    	; 0x4ae0 <mousekey_param_inc+0x102>
    49fa:	86 30       	cpi	r24, 0x06	; 6
    49fc:	09 f4       	brne	.+2      	; 0x4a00 <mousekey_param_inc+0x22>
    49fe:	ba c0       	rjmp	.+372    	; 0x4b74 <mousekey_param_inc+0x196>
    4a00:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4a02:	20 91 14 01 	lds	r18, 0x0114
    4a06:	86 2f       	mov	r24, r22
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	82 0f       	add	r24, r18
    4a0c:	91 1d       	adc	r25, r1
    4a0e:	8f 3f       	cpi	r24, 0xFF	; 255
    4a10:	91 05       	cpc	r25, r1
    4a12:	20 f4       	brcc	.+8      	; 0x4a1c <mousekey_param_inc+0x3e>
                mk_delay += inc;
    4a14:	62 0f       	add	r22, r18
    4a16:	60 93 14 01 	sts	0x0114, r22
    4a1a:	03 c0       	rjmp	.+6      	; 0x4a22 <mousekey_param_inc+0x44>
            else
                mk_delay = UINT8_MAX;
    4a1c:	8f ef       	ldi	r24, 0xFF	; 255
    4a1e:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_delay);
    4a22:	8a ed       	ldi	r24, 0xDA	; 218
    4a24:	95 e0       	ldi	r25, 0x05	; 5
    4a26:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4a2a:	80 91 14 01 	lds	r24, 0x0114
    4a2e:	1f 92       	push	r1
    4a30:	8f 93       	push	r24
    4a32:	87 ed       	ldi	r24, 0xD7	; 215
    4a34:	95 e0       	ldi	r25, 0x05	; 5
    4a36:	9f 93       	push	r25
    4a38:	8f 93       	push	r24
    4a3a:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4a3e:	0f 90       	pop	r0
    4a40:	0f 90       	pop	r0
    4a42:	0f 90       	pop	r0
    4a44:	0f 90       	pop	r0
    4a46:	85 ed       	ldi	r24, 0xD5	; 213
    4a48:	95 e0       	ldi	r25, 0x05	; 5
    4a4a:	b8 c0       	rjmp	.+368    	; 0x4bbc <mousekey_param_inc+0x1de>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4a4c:	20 91 13 01 	lds	r18, 0x0113
    4a50:	86 2f       	mov	r24, r22
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	82 0f       	add	r24, r18
    4a56:	91 1d       	adc	r25, r1
    4a58:	8f 3f       	cpi	r24, 0xFF	; 255
    4a5a:	91 05       	cpc	r25, r1
    4a5c:	20 f4       	brcc	.+8      	; 0x4a66 <mousekey_param_inc+0x88>
                mk_interval += inc;
    4a5e:	62 0f       	add	r22, r18
    4a60:	60 93 13 01 	sts	0x0113, r22
    4a64:	03 c0       	rjmp	.+6      	; 0x4a6c <mousekey_param_inc+0x8e>
            else
                mk_interval = UINT8_MAX;
    4a66:	8f ef       	ldi	r24, 0xFF	; 255
    4a68:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_interval);
    4a6c:	86 ec       	ldi	r24, 0xC6	; 198
    4a6e:	95 e0       	ldi	r25, 0x05	; 5
    4a70:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4a74:	80 91 13 01 	lds	r24, 0x0113
    4a78:	1f 92       	push	r1
    4a7a:	8f 93       	push	r24
    4a7c:	83 ec       	ldi	r24, 0xC3	; 195
    4a7e:	95 e0       	ldi	r25, 0x05	; 5
    4a80:	9f 93       	push	r25
    4a82:	8f 93       	push	r24
    4a84:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4a88:	0f 90       	pop	r0
    4a8a:	0f 90       	pop	r0
    4a8c:	0f 90       	pop	r0
    4a8e:	0f 90       	pop	r0
    4a90:	81 ec       	ldi	r24, 0xC1	; 193
    4a92:	95 e0       	ldi	r25, 0x05	; 5
    4a94:	93 c0       	rjmp	.+294    	; 0x4bbc <mousekey_param_inc+0x1de>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4a96:	20 91 12 01 	lds	r18, 0x0112
    4a9a:	86 2f       	mov	r24, r22
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	82 0f       	add	r24, r18
    4aa0:	91 1d       	adc	r25, r1
    4aa2:	8f 3f       	cpi	r24, 0xFF	; 255
    4aa4:	91 05       	cpc	r25, r1
    4aa6:	20 f4       	brcc	.+8      	; 0x4ab0 <mousekey_param_inc+0xd2>
                mk_max_speed += inc;
    4aa8:	62 0f       	add	r22, r18
    4aaa:	60 93 12 01 	sts	0x0112, r22
    4aae:	03 c0       	rjmp	.+6      	; 0x4ab6 <mousekey_param_inc+0xd8>
            else
                mk_max_speed = UINT8_MAX;
    4ab0:	8f ef       	ldi	r24, 0xFF	; 255
    4ab2:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_max_speed);
    4ab6:	81 eb       	ldi	r24, 0xB1	; 177
    4ab8:	95 e0       	ldi	r25, 0x05	; 5
    4aba:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4abe:	80 91 12 01 	lds	r24, 0x0112
    4ac2:	1f 92       	push	r1
    4ac4:	8f 93       	push	r24
    4ac6:	8e ea       	ldi	r24, 0xAE	; 174
    4ac8:	95 e0       	ldi	r25, 0x05	; 5
    4aca:	9f 93       	push	r25
    4acc:	8f 93       	push	r24
    4ace:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4ad2:	0f 90       	pop	r0
    4ad4:	0f 90       	pop	r0
    4ad6:	0f 90       	pop	r0
    4ad8:	0f 90       	pop	r0
    4ada:	8c ea       	ldi	r24, 0xAC	; 172
    4adc:	95 e0       	ldi	r25, 0x05	; 5
    4ade:	6e c0       	rjmp	.+220    	; 0x4bbc <mousekey_param_inc+0x1de>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4ae0:	20 91 11 01 	lds	r18, 0x0111
    4ae4:	86 2f       	mov	r24, r22
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	82 0f       	add	r24, r18
    4aea:	91 1d       	adc	r25, r1
    4aec:	8f 3f       	cpi	r24, 0xFF	; 255
    4aee:	91 05       	cpc	r25, r1
    4af0:	20 f4       	brcc	.+8      	; 0x4afa <mousekey_param_inc+0x11c>
                mk_time_to_max += inc;
    4af2:	62 0f       	add	r22, r18
    4af4:	60 93 11 01 	sts	0x0111, r22
    4af8:	03 c0       	rjmp	.+6      	; 0x4b00 <mousekey_param_inc+0x122>
            else
                mk_time_to_max = UINT8_MAX;
    4afa:	8f ef       	ldi	r24, 0xFF	; 255
    4afc:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_time_to_max);
    4b00:	8a e9       	ldi	r24, 0x9A	; 154
    4b02:	95 e0       	ldi	r25, 0x05	; 5
    4b04:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4b08:	80 91 11 01 	lds	r24, 0x0111
    4b0c:	1f 92       	push	r1
    4b0e:	8f 93       	push	r24
    4b10:	87 e9       	ldi	r24, 0x97	; 151
    4b12:	95 e0       	ldi	r25, 0x05	; 5
    4b14:	9f 93       	push	r25
    4b16:	8f 93       	push	r24
    4b18:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4b1c:	0f 90       	pop	r0
    4b1e:	0f 90       	pop	r0
    4b20:	0f 90       	pop	r0
    4b22:	0f 90       	pop	r0
    4b24:	85 e9       	ldi	r24, 0x95	; 149
    4b26:	95 e0       	ldi	r25, 0x05	; 5
    4b28:	49 c0       	rjmp	.+146    	; 0x4bbc <mousekey_param_inc+0x1de>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4b2a:	20 91 10 01 	lds	r18, 0x0110
    4b2e:	86 2f       	mov	r24, r22
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	82 0f       	add	r24, r18
    4b34:	91 1d       	adc	r25, r1
    4b36:	8f 3f       	cpi	r24, 0xFF	; 255
    4b38:	91 05       	cpc	r25, r1
    4b3a:	20 f4       	brcc	.+8      	; 0x4b44 <mousekey_param_inc+0x166>
                mk_wheel_max_speed += inc;
    4b3c:	62 0f       	add	r22, r18
    4b3e:	60 93 10 01 	sts	0x0110, r22
    4b42:	03 c0       	rjmp	.+6      	; 0x4b4a <mousekey_param_inc+0x16c>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4b44:	8f ef       	ldi	r24, 0xFF	; 255
    4b46:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4b4a:	8f e7       	ldi	r24, 0x7F	; 127
    4b4c:	95 e0       	ldi	r25, 0x05	; 5
    4b4e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4b52:	80 91 10 01 	lds	r24, 0x0110
    4b56:	1f 92       	push	r1
    4b58:	8f 93       	push	r24
    4b5a:	8c e7       	ldi	r24, 0x7C	; 124
    4b5c:	95 e0       	ldi	r25, 0x05	; 5
    4b5e:	9f 93       	push	r25
    4b60:	8f 93       	push	r24
    4b62:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4b66:	0f 90       	pop	r0
    4b68:	0f 90       	pop	r0
    4b6a:	0f 90       	pop	r0
    4b6c:	0f 90       	pop	r0
    4b6e:	8a e7       	ldi	r24, 0x7A	; 122
    4b70:	95 e0       	ldi	r25, 0x05	; 5
    4b72:	24 c0       	rjmp	.+72     	; 0x4bbc <mousekey_param_inc+0x1de>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4b74:	20 91 0f 01 	lds	r18, 0x010F
    4b78:	86 2f       	mov	r24, r22
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	82 0f       	add	r24, r18
    4b7e:	91 1d       	adc	r25, r1
    4b80:	8f 3f       	cpi	r24, 0xFF	; 255
    4b82:	91 05       	cpc	r25, r1
    4b84:	20 f4       	brcc	.+8      	; 0x4b8e <mousekey_param_inc+0x1b0>
                mk_wheel_time_to_max += inc;
    4b86:	62 0f       	add	r22, r18
    4b88:	60 93 0f 01 	sts	0x010F, r22
    4b8c:	03 c0       	rjmp	.+6      	; 0x4b94 <mousekey_param_inc+0x1b6>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4b8e:	8f ef       	ldi	r24, 0xFF	; 255
    4b90:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4b94:	82 e6       	ldi	r24, 0x62	; 98
    4b96:	95 e0       	ldi	r25, 0x05	; 5
    4b98:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4b9c:	80 91 0f 01 	lds	r24, 0x010F
    4ba0:	1f 92       	push	r1
    4ba2:	8f 93       	push	r24
    4ba4:	8f e5       	ldi	r24, 0x5F	; 95
    4ba6:	95 e0       	ldi	r25, 0x05	; 5
    4ba8:	9f 93       	push	r25
    4baa:	8f 93       	push	r24
    4bac:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4bb0:	0f 90       	pop	r0
    4bb2:	0f 90       	pop	r0
    4bb4:	0f 90       	pop	r0
    4bb6:	0f 90       	pop	r0
    4bb8:	8d e5       	ldi	r24, 0x5D	; 93
    4bba:	95 e0       	ldi	r25, 0x05	; 5
    4bbc:	0c 94 0e 08 	jmp	0x101c	; 0x101c <xputs>

00004bc0 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4bc0:	83 30       	cpi	r24, 0x03	; 3
    4bc2:	09 f4       	brne	.+2      	; 0x4bc6 <mousekey_param_dec+0x6>
    4bc4:	4d c0       	rjmp	.+154    	; 0x4c60 <mousekey_param_dec+0xa0>
    4bc6:	28 f4       	brcc	.+10     	; 0x4bd2 <mousekey_param_dec+0x12>
    4bc8:	81 30       	cpi	r24, 0x01	; 1
    4bca:	61 f0       	breq	.+24     	; 0x4be4 <mousekey_param_dec+0x24>
    4bcc:	82 30       	cpi	r24, 0x02	; 2
    4bce:	49 f1       	breq	.+82     	; 0x4c22 <mousekey_param_dec+0x62>
    4bd0:	08 95       	ret
    4bd2:	85 30       	cpi	r24, 0x05	; 5
    4bd4:	09 f4       	brne	.+2      	; 0x4bd8 <mousekey_param_dec+0x18>
    4bd6:	82 c0       	rjmp	.+260    	; 0x4cdc <mousekey_param_dec+0x11c>
    4bd8:	08 f4       	brcc	.+2      	; 0x4bdc <mousekey_param_dec+0x1c>
    4bda:	61 c0       	rjmp	.+194    	; 0x4c9e <mousekey_param_dec+0xde>
    4bdc:	86 30       	cpi	r24, 0x06	; 6
    4bde:	09 f4       	brne	.+2      	; 0x4be2 <mousekey_param_dec+0x22>
    4be0:	9c c0       	rjmp	.+312    	; 0x4d1a <mousekey_param_dec+0x15a>
    4be2:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4be4:	80 91 14 01 	lds	r24, 0x0114
    4be8:	68 17       	cp	r22, r24
    4bea:	20 f4       	brcc	.+8      	; 0x4bf4 <mousekey_param_dec+0x34>
                mk_delay -= dec;
    4bec:	86 1b       	sub	r24, r22
    4bee:	80 93 14 01 	sts	0x0114, r24
    4bf2:	02 c0       	rjmp	.+4      	; 0x4bf8 <mousekey_param_dec+0x38>
            else
                mk_delay = 0;
    4bf4:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_delay);
    4bf8:	81 e5       	ldi	r24, 0x51	; 81
    4bfa:	95 e0       	ldi	r25, 0x05	; 5
    4bfc:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4c00:	80 91 14 01 	lds	r24, 0x0114
    4c04:	1f 92       	push	r1
    4c06:	8f 93       	push	r24
    4c08:	8e e4       	ldi	r24, 0x4E	; 78
    4c0a:	95 e0       	ldi	r25, 0x05	; 5
    4c0c:	9f 93       	push	r25
    4c0e:	8f 93       	push	r24
    4c10:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4c14:	0f 90       	pop	r0
    4c16:	0f 90       	pop	r0
    4c18:	0f 90       	pop	r0
    4c1a:	0f 90       	pop	r0
    4c1c:	8c e4       	ldi	r24, 0x4C	; 76
    4c1e:	95 e0       	ldi	r25, 0x05	; 5
    4c20:	9a c0       	rjmp	.+308    	; 0x4d56 <mousekey_param_dec+0x196>
            break;
        case 2:
            if (mk_interval > dec)
    4c22:	80 91 13 01 	lds	r24, 0x0113
    4c26:	68 17       	cp	r22, r24
    4c28:	20 f4       	brcc	.+8      	; 0x4c32 <mousekey_param_dec+0x72>
                mk_interval -= dec;
    4c2a:	86 1b       	sub	r24, r22
    4c2c:	80 93 13 01 	sts	0x0113, r24
    4c30:	02 c0       	rjmp	.+4      	; 0x4c36 <mousekey_param_dec+0x76>
            else
                mk_interval = 0;
    4c32:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_interval);
    4c36:	8d e3       	ldi	r24, 0x3D	; 61
    4c38:	95 e0       	ldi	r25, 0x05	; 5
    4c3a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4c3e:	80 91 13 01 	lds	r24, 0x0113
    4c42:	1f 92       	push	r1
    4c44:	8f 93       	push	r24
    4c46:	8a e3       	ldi	r24, 0x3A	; 58
    4c48:	95 e0       	ldi	r25, 0x05	; 5
    4c4a:	9f 93       	push	r25
    4c4c:	8f 93       	push	r24
    4c4e:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4c52:	0f 90       	pop	r0
    4c54:	0f 90       	pop	r0
    4c56:	0f 90       	pop	r0
    4c58:	0f 90       	pop	r0
    4c5a:	88 e3       	ldi	r24, 0x38	; 56
    4c5c:	95 e0       	ldi	r25, 0x05	; 5
    4c5e:	7b c0       	rjmp	.+246    	; 0x4d56 <mousekey_param_dec+0x196>
            break;
        case 3:
            if (mk_max_speed > dec)
    4c60:	80 91 12 01 	lds	r24, 0x0112
    4c64:	68 17       	cp	r22, r24
    4c66:	20 f4       	brcc	.+8      	; 0x4c70 <mousekey_param_dec+0xb0>
                mk_max_speed -= dec;
    4c68:	86 1b       	sub	r24, r22
    4c6a:	80 93 12 01 	sts	0x0112, r24
    4c6e:	02 c0       	rjmp	.+4      	; 0x4c74 <mousekey_param_dec+0xb4>
            else
                mk_max_speed = 0;
    4c70:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_max_speed);
    4c74:	88 e2       	ldi	r24, 0x28	; 40
    4c76:	95 e0       	ldi	r25, 0x05	; 5
    4c78:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4c7c:	80 91 12 01 	lds	r24, 0x0112
    4c80:	1f 92       	push	r1
    4c82:	8f 93       	push	r24
    4c84:	85 e2       	ldi	r24, 0x25	; 37
    4c86:	95 e0       	ldi	r25, 0x05	; 5
    4c88:	9f 93       	push	r25
    4c8a:	8f 93       	push	r24
    4c8c:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4c90:	0f 90       	pop	r0
    4c92:	0f 90       	pop	r0
    4c94:	0f 90       	pop	r0
    4c96:	0f 90       	pop	r0
    4c98:	83 e2       	ldi	r24, 0x23	; 35
    4c9a:	95 e0       	ldi	r25, 0x05	; 5
    4c9c:	5c c0       	rjmp	.+184    	; 0x4d56 <mousekey_param_dec+0x196>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4c9e:	80 91 11 01 	lds	r24, 0x0111
    4ca2:	68 17       	cp	r22, r24
    4ca4:	20 f4       	brcc	.+8      	; 0x4cae <mousekey_param_dec+0xee>
                mk_time_to_max -= dec;
    4ca6:	86 1b       	sub	r24, r22
    4ca8:	80 93 11 01 	sts	0x0111, r24
    4cac:	02 c0       	rjmp	.+4      	; 0x4cb2 <mousekey_param_dec+0xf2>
            else
                mk_time_to_max = 0;
    4cae:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_time_to_max);
    4cb2:	81 e1       	ldi	r24, 0x11	; 17
    4cb4:	95 e0       	ldi	r25, 0x05	; 5
    4cb6:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4cba:	80 91 11 01 	lds	r24, 0x0111
    4cbe:	1f 92       	push	r1
    4cc0:	8f 93       	push	r24
    4cc2:	8e e0       	ldi	r24, 0x0E	; 14
    4cc4:	95 e0       	ldi	r25, 0x05	; 5
    4cc6:	9f 93       	push	r25
    4cc8:	8f 93       	push	r24
    4cca:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4cce:	0f 90       	pop	r0
    4cd0:	0f 90       	pop	r0
    4cd2:	0f 90       	pop	r0
    4cd4:	0f 90       	pop	r0
    4cd6:	8c e0       	ldi	r24, 0x0C	; 12
    4cd8:	95 e0       	ldi	r25, 0x05	; 5
    4cda:	3d c0       	rjmp	.+122    	; 0x4d56 <mousekey_param_dec+0x196>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4cdc:	80 91 10 01 	lds	r24, 0x0110
    4ce0:	68 17       	cp	r22, r24
    4ce2:	20 f4       	brcc	.+8      	; 0x4cec <mousekey_param_dec+0x12c>
                mk_wheel_max_speed -= dec;
    4ce4:	86 1b       	sub	r24, r22
    4ce6:	80 93 10 01 	sts	0x0110, r24
    4cea:	02 c0       	rjmp	.+4      	; 0x4cf0 <mousekey_param_dec+0x130>
            else
                mk_wheel_max_speed = 0;
    4cec:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4cf0:	86 ef       	ldi	r24, 0xF6	; 246
    4cf2:	94 e0       	ldi	r25, 0x04	; 4
    4cf4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4cf8:	80 91 10 01 	lds	r24, 0x0110
    4cfc:	1f 92       	push	r1
    4cfe:	8f 93       	push	r24
    4d00:	83 ef       	ldi	r24, 0xF3	; 243
    4d02:	94 e0       	ldi	r25, 0x04	; 4
    4d04:	9f 93       	push	r25
    4d06:	8f 93       	push	r24
    4d08:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4d0c:	0f 90       	pop	r0
    4d0e:	0f 90       	pop	r0
    4d10:	0f 90       	pop	r0
    4d12:	0f 90       	pop	r0
    4d14:	81 ef       	ldi	r24, 0xF1	; 241
    4d16:	94 e0       	ldi	r25, 0x04	; 4
    4d18:	1e c0       	rjmp	.+60     	; 0x4d56 <mousekey_param_dec+0x196>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4d1a:	80 91 0f 01 	lds	r24, 0x010F
    4d1e:	68 17       	cp	r22, r24
    4d20:	20 f4       	brcc	.+8      	; 0x4d2a <mousekey_param_dec+0x16a>
                mk_wheel_time_to_max -= dec;
    4d22:	86 1b       	sub	r24, r22
    4d24:	80 93 0f 01 	sts	0x010F, r24
    4d28:	02 c0       	rjmp	.+4      	; 0x4d2e <mousekey_param_dec+0x16e>
            else
                mk_wheel_time_to_max = 0;
    4d2a:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4d2e:	89 ed       	ldi	r24, 0xD9	; 217
    4d30:	94 e0       	ldi	r25, 0x04	; 4
    4d32:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4d36:	80 91 0f 01 	lds	r24, 0x010F
    4d3a:	1f 92       	push	r1
    4d3c:	8f 93       	push	r24
    4d3e:	86 ed       	ldi	r24, 0xD6	; 214
    4d40:	94 e0       	ldi	r25, 0x04	; 4
    4d42:	9f 93       	push	r25
    4d44:	8f 93       	push	r24
    4d46:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4d4a:	0f 90       	pop	r0
    4d4c:	0f 90       	pop	r0
    4d4e:	0f 90       	pop	r0
    4d50:	0f 90       	pop	r0
    4d52:	84 ed       	ldi	r24, 0xD4	; 212
    4d54:	94 e0       	ldi	r25, 0x04	; 4
    4d56:	0c 94 0e 08 	jmp	0x101c	; 0x101c <xputs>

00004d5a <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4d5a:	cf 93       	push	r28
    4d5c:	c8 2f       	mov	r28, r24
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    4d5e:	8f e4       	ldi	r24, 0x4F	; 79
    4d60:	99 e0       	ldi	r25, 0x09	; 9
    4d62:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4d66:	60 91 ac 01 	lds	r22, 0x01AC
    4d6a:	70 91 ad 01 	lds	r23, 0x01AD
    4d6e:	80 91 ae 01 	lds	r24, 0x01AE
    4d72:	90 91 af 01 	lds	r25, 0x01AF
    4d76:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <biton32>
    4d7a:	1f 92       	push	r1
    4d7c:	8f 93       	push	r24
    4d7e:	2c e4       	ldi	r18, 0x4C	; 76
    4d80:	39 e0       	ldi	r19, 0x09	; 9
    4d82:	3f 93       	push	r19
    4d84:	2f 93       	push	r18
    4d86:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    print(" to "); print_dec(layer); print("\n");
    4d8a:	87 e4       	ldi	r24, 0x47	; 71
    4d8c:	99 e0       	ldi	r25, 0x09	; 9
    4d8e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4d92:	1f 92       	push	r1
    4d94:	cf 93       	push	r28
    4d96:	24 e4       	ldi	r18, 0x44	; 68
    4d98:	39 e0       	ldi	r19, 0x09	; 9
    4d9a:	3f 93       	push	r19
    4d9c:	2f 93       	push	r18
    4d9e:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4da2:	82 e4       	ldi	r24, 0x42	; 66
    4da4:	99 e0       	ldi	r25, 0x09	; 9
    4da6:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    default_layer_set(1UL<<layer);
    4daa:	61 e0       	ldi	r22, 0x01	; 1
    4dac:	70 e0       	ldi	r23, 0x00	; 0
    4dae:	80 e0       	ldi	r24, 0x00	; 0
    4db0:	90 e0       	ldi	r25, 0x00	; 0
    4db2:	04 c0       	rjmp	.+8      	; 0x4dbc <switch_default_layer+0x62>
    4db4:	66 0f       	add	r22, r22
    4db6:	77 1f       	adc	r23, r23
    4db8:	88 1f       	adc	r24, r24
    4dba:	99 1f       	adc	r25, r25
    4dbc:	ca 95       	dec	r28
    4dbe:	d2 f7       	brpl	.-12     	; 0x4db4 <switch_default_layer+0x5a>
    4dc0:	0e 94 29 1b 	call	0x3652	; 0x3652 <default_layer_set>
    clear_keyboard();
    4dc4:	8d b7       	in	r24, 0x3d	; 61
    4dc6:	9e b7       	in	r25, 0x3e	; 62
    4dc8:	08 96       	adiw	r24, 0x08	; 8
    4dca:	0f b6       	in	r0, 0x3f	; 63
    4dcc:	f8 94       	cli
    4dce:	9e bf       	out	0x3e, r25	; 62
    4dd0:	0f be       	out	0x3f, r0	; 63
    4dd2:	8d bf       	out	0x3d, r24	; 61
}
    4dd4:	cf 91       	pop	r28
static void switch_default_layer(uint8_t layer)
{
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    print(" to "); print_dec(layer); print("\n");
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4dd6:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <clear_keyboard>

00004dda <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4dda:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    4ddc:	48 2f       	mov	r20, r24
    4dde:	50 e0       	ldi	r21, 0x00	; 0
    4de0:	fa 01       	movw	r30, r20
    4de2:	36 97       	sbiw	r30, 0x06	; 6
    4de4:	e3 34       	cpi	r30, 0x43	; 67
    4de6:	f1 05       	cpc	r31, r1
    4de8:	08 f0       	brcs	.+2      	; 0x4dec <command_common+0x12>
    4dea:	ae c2       	rjmp	.+1372   	; 0x5348 <command_common+0x56e>
    4dec:	e0 59       	subi	r30, 0x90	; 144
    4dee:	ff 4f       	sbci	r31, 0xFF	; 255
    4df0:	0c 94 56 2c 	jmp	0x58ac	; 0x58ac <__tablejump2__>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4df4:	8d e6       	ldi	r24, 0x6D	; 109
    4df6:	9f e0       	ldi	r25, 0x0F	; 15
    4df8:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4dfc:	8d ea       	ldi	r24, 0xAD	; 173
    4dfe:	9c e0       	ldi	r25, 0x0C	; 12
    4e00:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4e04:	0e 94 c3 21 	call	0x4386	; 0x4386 <eeconfig_read_default_layer>
    4e08:	1f 92       	push	r1
    4e0a:	8f 93       	push	r24
    4e0c:	8a ea       	ldi	r24, 0xAA	; 170
    4e0e:	9c e0       	ldi	r25, 0x0C	; 12
    4e10:	9f 93       	push	r25
    4e12:	8f 93       	push	r24
    4e14:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4e18:	88 ea       	ldi	r24, 0xA8	; 168
    4e1a:	9c e0       	ldi	r25, 0x0C	; 12
    4e1c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4e20:	0e 94 ba 21 	call	0x4374	; 0x4374 <eeconfig_read_debug>
    4e24:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4e26:	85 e9       	ldi	r24, 0x95	; 149
    4e28:	9c e0       	ldi	r25, 0x0C	; 12
    4e2a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4e2e:	1f 92       	push	r1
    4e30:	cf 93       	push	r28
    4e32:	20 e9       	ldi	r18, 0x90	; 144
    4e34:	3c e0       	ldi	r19, 0x0C	; 12
    4e36:	3f 93       	push	r19
    4e38:	2f 93       	push	r18
    4e3a:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4e3e:	8e e8       	ldi	r24, 0x8E	; 142
    4e40:	9c e0       	ldi	r25, 0x0C	; 12
    4e42:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4e46:	84 e8       	ldi	r24, 0x84	; 132
    4e48:	9c e0       	ldi	r25, 0x0C	; 12
    4e4a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4e4e:	8c 2f       	mov	r24, r28
    4e50:	81 70       	andi	r24, 0x01	; 1
    4e52:	1f 92       	push	r1
    4e54:	8f 93       	push	r24
    4e56:	21 e8       	ldi	r18, 0x81	; 129
    4e58:	3c e0       	ldi	r19, 0x0C	; 12
    4e5a:	3f 93       	push	r19
    4e5c:	2f 93       	push	r18
    4e5e:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4e62:	8f e7       	ldi	r24, 0x7F	; 127
    4e64:	9c e0       	ldi	r25, 0x0C	; 12
    4e66:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4e6a:	85 e7       	ldi	r24, 0x75	; 117
    4e6c:	9c e0       	ldi	r25, 0x0C	; 12
    4e6e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4e72:	c1 fb       	bst	r28, 1
    4e74:	88 27       	eor	r24, r24
    4e76:	80 f9       	bld	r24, 0
    4e78:	1f 92       	push	r1
    4e7a:	8f 93       	push	r24
    4e7c:	22 e7       	ldi	r18, 0x72	; 114
    4e7e:	3c e0       	ldi	r19, 0x0C	; 12
    4e80:	3f 93       	push	r19
    4e82:	2f 93       	push	r18
    4e84:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4e88:	80 e7       	ldi	r24, 0x70	; 112
    4e8a:	9c e0       	ldi	r25, 0x0C	; 12
    4e8c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4e90:	84 e6       	ldi	r24, 0x64	; 100
    4e92:	9c e0       	ldi	r25, 0x0C	; 12
    4e94:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4e98:	c2 fb       	bst	r28, 2
    4e9a:	88 27       	eor	r24, r24
    4e9c:	80 f9       	bld	r24, 0
    4e9e:	1f 92       	push	r1
    4ea0:	8f 93       	push	r24
    4ea2:	21 e6       	ldi	r18, 0x61	; 97
    4ea4:	3c e0       	ldi	r19, 0x0C	; 12
    4ea6:	3f 93       	push	r19
    4ea8:	2f 93       	push	r18
    4eaa:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4eae:	8f e5       	ldi	r24, 0x5F	; 95
    4eb0:	9c e0       	ldi	r25, 0x0C	; 12
    4eb2:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4eb6:	86 e5       	ldi	r24, 0x56	; 86
    4eb8:	9c e0       	ldi	r25, 0x0C	; 12
    4eba:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4ebe:	c3 fb       	bst	r28, 3
    4ec0:	cc 27       	eor	r28, r28
    4ec2:	c0 f9       	bld	r28, 0
    4ec4:	1f 92       	push	r1
    4ec6:	cf 93       	push	r28
    4ec8:	83 e5       	ldi	r24, 0x53	; 83
    4eca:	9c e0       	ldi	r25, 0x0C	; 12
    4ecc:	9f 93       	push	r25
    4ece:	8f 93       	push	r24
    4ed0:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4ed4:	81 e5       	ldi	r24, 0x51	; 81
    4ed6:	9c e0       	ldi	r25, 0x0C	; 12
    4ed8:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4edc:	0e 94 cc 21 	call	0x4398	; 0x4398 <eeconfig_read_keymap>
    4ee0:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4ee2:	8d e3       	ldi	r24, 0x3D	; 61
    4ee4:	9c e0       	ldi	r25, 0x0C	; 12
    4ee6:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4eea:	1f 92       	push	r1
    4eec:	cf 93       	push	r28
    4eee:	28 e3       	ldi	r18, 0x38	; 56
    4ef0:	3c e0       	ldi	r19, 0x0C	; 12
    4ef2:	3f 93       	push	r19
    4ef4:	2f 93       	push	r18
    4ef6:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4efa:	86 e3       	ldi	r24, 0x36	; 54
    4efc:	9c e0       	ldi	r25, 0x0C	; 12
    4efe:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4f02:	8d e1       	ldi	r24, 0x1D	; 29
    4f04:	9c e0       	ldi	r25, 0x0C	; 12
    4f06:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4f0a:	8c 2f       	mov	r24, r28
    4f0c:	81 70       	andi	r24, 0x01	; 1
    4f0e:	1f 92       	push	r1
    4f10:	8f 93       	push	r24
    4f12:	2a e1       	ldi	r18, 0x1A	; 26
    4f14:	3c e0       	ldi	r19, 0x0C	; 12
    4f16:	3f 93       	push	r19
    4f18:	2f 93       	push	r18
    4f1a:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4f1e:	8d b7       	in	r24, 0x3d	; 61
    4f20:	9e b7       	in	r25, 0x3e	; 62
    4f22:	80 96       	adiw	r24, 0x20	; 32
    4f24:	0f b6       	in	r0, 0x3f	; 63
    4f26:	f8 94       	cli
    4f28:	9e bf       	out	0x3e, r25	; 62
    4f2a:	0f be       	out	0x3f, r0	; 63
    4f2c:	8d bf       	out	0x3d, r24	; 61
    4f2e:	88 e1       	ldi	r24, 0x18	; 24
    4f30:	9c e0       	ldi	r25, 0x0C	; 12
    4f32:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4f36:	81 e0       	ldi	r24, 0x01	; 1
    4f38:	9c e0       	ldi	r25, 0x0C	; 12
    4f3a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4f3e:	c1 fb       	bst	r28, 1
    4f40:	88 27       	eor	r24, r24
    4f42:	80 f9       	bld	r24, 0
    4f44:	1f 92       	push	r1
    4f46:	8f 93       	push	r24
    4f48:	2e ef       	ldi	r18, 0xFE	; 254
    4f4a:	3b e0       	ldi	r19, 0x0B	; 11
    4f4c:	3f 93       	push	r19
    4f4e:	2f 93       	push	r18
    4f50:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4f54:	8c ef       	ldi	r24, 0xFC	; 252
    4f56:	9b e0       	ldi	r25, 0x0B	; 11
    4f58:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4f5c:	8a ee       	ldi	r24, 0xEA	; 234
    4f5e:	9b e0       	ldi	r25, 0x0B	; 11
    4f60:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4f64:	c2 fb       	bst	r28, 2
    4f66:	88 27       	eor	r24, r24
    4f68:	80 f9       	bld	r24, 0
    4f6a:	1f 92       	push	r1
    4f6c:	8f 93       	push	r24
    4f6e:	27 ee       	ldi	r18, 0xE7	; 231
    4f70:	3b e0       	ldi	r19, 0x0B	; 11
    4f72:	3f 93       	push	r19
    4f74:	2f 93       	push	r18
    4f76:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4f7a:	85 ee       	ldi	r24, 0xE5	; 229
    4f7c:	9b e0       	ldi	r25, 0x0B	; 11
    4f7e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4f82:	83 ed       	ldi	r24, 0xD3	; 211
    4f84:	9b e0       	ldi	r25, 0x0B	; 11
    4f86:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4f8a:	c3 fb       	bst	r28, 3
    4f8c:	88 27       	eor	r24, r24
    4f8e:	80 f9       	bld	r24, 0
    4f90:	1f 92       	push	r1
    4f92:	8f 93       	push	r24
    4f94:	20 ed       	ldi	r18, 0xD0	; 208
    4f96:	3b e0       	ldi	r19, 0x0B	; 11
    4f98:	3f 93       	push	r19
    4f9a:	2f 93       	push	r18
    4f9c:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4fa0:	8e ec       	ldi	r24, 0xCE	; 206
    4fa2:	9b e0       	ldi	r25, 0x0B	; 11
    4fa4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4fa8:	84 ec       	ldi	r24, 0xC4	; 196
    4faa:	9b e0       	ldi	r25, 0x0B	; 11
    4fac:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4fb0:	c4 fb       	bst	r28, 4
    4fb2:	88 27       	eor	r24, r24
    4fb4:	80 f9       	bld	r24, 0
    4fb6:	1f 92       	push	r1
    4fb8:	8f 93       	push	r24
    4fba:	21 ec       	ldi	r18, 0xC1	; 193
    4fbc:	3b e0       	ldi	r19, 0x0B	; 11
    4fbe:	3f 93       	push	r19
    4fc0:	2f 93       	push	r18
    4fc2:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4fc6:	8f eb       	ldi	r24, 0xBF	; 191
    4fc8:	9b e0       	ldi	r25, 0x0B	; 11
    4fca:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4fce:	8d ea       	ldi	r24, 0xAD	; 173
    4fd0:	9b e0       	ldi	r25, 0x0B	; 11
    4fd2:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4fd6:	c5 fb       	bst	r28, 5
    4fd8:	88 27       	eor	r24, r24
    4fda:	80 f9       	bld	r24, 0
    4fdc:	1f 92       	push	r1
    4fde:	8f 93       	push	r24
    4fe0:	2a ea       	ldi	r18, 0xAA	; 170
    4fe2:	3b e0       	ldi	r19, 0x0B	; 11
    4fe4:	3f 93       	push	r19
    4fe6:	2f 93       	push	r18
    4fe8:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4fec:	88 ea       	ldi	r24, 0xA8	; 168
    4fee:	9b e0       	ldi	r25, 0x0B	; 11
    4ff0:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4ff4:	8c e8       	ldi	r24, 0x8C	; 140
    4ff6:	9b e0       	ldi	r25, 0x0B	; 11
    4ff8:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4ffc:	c6 fb       	bst	r28, 6
    4ffe:	88 27       	eor	r24, r24
    5000:	80 f9       	bld	r24, 0
    5002:	1f 92       	push	r1
    5004:	8f 93       	push	r24
    5006:	29 e8       	ldi	r18, 0x89	; 137
    5008:	3b e0       	ldi	r19, 0x0B	; 11
    500a:	3f 93       	push	r19
    500c:	2f 93       	push	r18
    500e:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    5012:	87 e8       	ldi	r24, 0x87	; 135
    5014:	9b e0       	ldi	r25, 0x0B	; 11
    5016:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    501a:	8f e7       	ldi	r24, 0x7F	; 127
    501c:	9b e0       	ldi	r25, 0x0B	; 11
    501e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5022:	c7 fb       	bst	r28, 7
    5024:	cc 27       	eor	r28, r28
    5026:	c0 f9       	bld	r28, 0
    5028:	1f 92       	push	r1
    502a:	cf 93       	push	r28
    502c:	8c e7       	ldi	r24, 0x7C	; 124
    502e:	9b e0       	ldi	r25, 0x0B	; 11
    5030:	9f 93       	push	r25
    5032:	8f 93       	push	r24
    5034:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    5038:	8a e7       	ldi	r24, 0x7A	; 122
    503a:	9b e0       	ldi	r25, 0x0B	; 11
    503c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5040:	8d b7       	in	r24, 0x3d	; 61
    5042:	9e b7       	in	r25, 0x3e	; 62
    5044:	4c 96       	adiw	r24, 0x1c	; 28
    5046:	0f b6       	in	r0, 0x3f	; 63
    5048:	f8 94       	cli
    504a:	9e bf       	out	0x3e, r25	; 62
    504c:	0f be       	out	0x3f, r0	; 63
    504e:	8d bf       	out	0x3d, r24	; 61
    5050:	1d c0       	rjmp	.+58     	; 0x508c <command_common+0x2b2>
            print("eeconfig:\n");
            print_eeconfig();
            break;
#endif
        case KC_CAPSLOCK:
            if (host_get_driver()) {
    5052:	0e 94 56 11 	call	0x22ac	; 0x22ac <host_get_driver>
    5056:	89 2b       	or	r24, r25
    5058:	79 f0       	breq	.+30     	; 0x5078 <command_common+0x29e>
                host_driver = host_get_driver();
    505a:	0e 94 56 11 	call	0x22ac	; 0x22ac <host_get_driver>
    505e:	90 93 d6 01 	sts	0x01D6, r25
    5062:	80 93 d5 01 	sts	0x01D5, r24
                clear_keyboard();
    5066:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <clear_keyboard>
                host_set_driver(0);
    506a:	80 e0       	ldi	r24, 0x00	; 0
    506c:	90 e0       	ldi	r25, 0x00	; 0
    506e:	0e 94 51 11 	call	0x22a2	; 0x22a2 <host_set_driver>
                print("Locked.\n");
    5072:	84 e6       	ldi	r24, 0x64	; 100
    5074:	9f e0       	ldi	r25, 0x0F	; 15
    5076:	08 c0       	rjmp	.+16     	; 0x5088 <command_common+0x2ae>
            } else {
                host_set_driver(host_driver);
    5078:	80 91 d5 01 	lds	r24, 0x01D5
    507c:	90 91 d6 01 	lds	r25, 0x01D6
    5080:	0e 94 51 11 	call	0x22a2	; 0x22a2 <host_set_driver>
                print("Unlocked.\n");
    5084:	89 e5       	ldi	r24, 0x59	; 89
    5086:	9f e0       	ldi	r25, 0x0F	; 15
    5088:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    508c:	c1 e0       	ldi	r28, 0x01	; 1
    508e:	61 c1       	rjmp	.+706    	; 0x5352 <command_common+0x578>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\n----- Command Help -----\n");
    5090:	8e e5       	ldi	r24, 0x5E	; 94
    5092:	9b e0       	ldi	r25, 0x0B	; 11
    5094:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("c:	enter console mode\n");
    5098:	87 e4       	ldi	r24, 0x47	; 71
    509a:	9b e0       	ldi	r25, 0x0B	; 11
    509c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("d:	toggle debug enable\n");
    50a0:	8f e2       	ldi	r24, 0x2F	; 47
    50a2:	9b e0       	ldi	r25, 0x0B	; 11
    50a4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("x:	toggle matrix debug\n");
    50a8:	87 e1       	ldi	r24, 0x17	; 23
    50aa:	9b e0       	ldi	r25, 0x0B	; 11
    50ac:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("k:	toggle keyboard debug\n");
    50b0:	8d ef       	ldi	r24, 0xFD	; 253
    50b2:	9a e0       	ldi	r25, 0x0A	; 10
    50b4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("m:	toggle mouse debug\n");
    50b8:	86 ee       	ldi	r24, 0xE6	; 230
    50ba:	9a e0       	ldi	r25, 0x0A	; 10
    50bc:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
#ifdef SLEEP_LED_ENABLE
    print("z:	toggle sleep LED test\n");
#endif
    print("v:	print device version & info\n");
    50c0:	86 ec       	ldi	r24, 0xC6	; 198
    50c2:	9a e0       	ldi	r25, 0x0A	; 10
    50c4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("t:	print timer count\n");
    50c8:	80 eb       	ldi	r24, 0xB0	; 176
    50ca:	9a e0       	ldi	r25, 0x0A	; 10
    50cc:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("s:	print status\n");
    50d0:	8f e9       	ldi	r24, 0x9F	; 159
    50d2:	9a e0       	ldi	r25, 0x0A	; 10
    50d4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("e:	print eeprom config\n");
    50d8:	87 e8       	ldi	r24, 0x87	; 135
    50da:	9a e0       	ldi	r25, 0x0A	; 10
    50dc:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
#ifdef NKRO_ENABLE
    print("n:	toggle NKRO\n");
    50e0:	87 e7       	ldi	r24, 0x77	; 119
    50e2:	9a e0       	ldi	r25, 0x0A	; 10
    50e4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
#endif
    print("0/F10:	switch to Layer0 \n");
    50e8:	8d e5       	ldi	r24, 0x5D	; 93
    50ea:	9a e0       	ldi	r25, 0x0A	; 10
    50ec:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("1/F1:	switch to Layer1 \n");
    50f0:	84 e4       	ldi	r24, 0x44	; 68
    50f2:	9a e0       	ldi	r25, 0x0A	; 10
    50f4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("2/F2:	switch to Layer2 \n");
    50f8:	8b e2       	ldi	r24, 0x2B	; 43
    50fa:	9a e0       	ldi	r25, 0x0A	; 10
    50fc:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("3/F3:	switch to Layer3 \n");
    5100:	82 e1       	ldi	r24, 0x12	; 18
    5102:	9a e0       	ldi	r25, 0x0A	; 10
    5104:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("4/F4:	switch to Layer4 \n");
    5108:	89 ef       	ldi	r24, 0xF9	; 249
    510a:	99 e0       	ldi	r25, 0x09	; 9
    510c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("PScr:	power down/remote wake-up\n");
    5110:	88 ed       	ldi	r24, 0xD8	; 216
    5112:	99 e0       	ldi	r25, 0x09	; 9
    5114:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("Caps:	Lock Keyboard(Child Proof)\n");
    5118:	86 eb       	ldi	r24, 0xB6	; 182
    511a:	99 e0       	ldi	r25, 0x09	; 9
    511c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("Paus:	jump to bootloader\n");
    5120:	8c e9       	ldi	r24, 0x9C	; 156
    5122:	99 e0       	ldi	r25, 0x09	; 9
    5124:	b1 cf       	rjmp	.-158    	; 0x5088 <command_common+0x2ae>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    5126:	80 91 c3 01 	lds	r24, 0x01C3
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    512a:	81 7f       	andi	r24, 0xF1	; 241
    512c:	8e 7f       	andi	r24, 0xFE	; 254
    512e:	80 93 c3 01 	sts	0x01C3, r24
            command_console_help();
    5132:	0e 94 7d 24 	call	0x48fa	; 0x48fa <command_console_help>
            print("\nEnter Console Mode\n");
    5136:	84 e4       	ldi	r24, 0x44	; 68
    5138:	9f e0       	ldi	r25, 0x0F	; 15
    513a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            print("C> ");
    513e:	80 e4       	ldi	r24, 0x40	; 64
    5140:	9f e0       	ldi	r25, 0x0F	; 15
    5142:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            command_state = CONSOLE;
    5146:	81 e0       	ldi	r24, 0x01	; 1
    5148:	80 93 d4 01 	sts	0x01D4, r24
    514c:	9f cf       	rjmp	.-194    	; 0x508c <command_common+0x2b2>
            break;
        case KC_PAUSE:
            clear_keyboard();
    514e:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <clear_keyboard>
            print("\n\nJump to bootloader... ");
    5152:	87 e2       	ldi	r24, 0x27	; 39
    5154:	9f e0       	ldi	r25, 0x0F	; 15
    5156:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    515a:	9f ef       	ldi	r25, 0xFF	; 255
    515c:	23 ed       	ldi	r18, 0xD3	; 211
    515e:	80 e3       	ldi	r24, 0x30	; 48
    5160:	91 50       	subi	r25, 0x01	; 1
    5162:	20 40       	sbci	r18, 0x00	; 0
    5164:	80 40       	sbci	r24, 0x00	; 0
    5166:	e1 f7       	brne	.-8      	; 0x5160 <command_common+0x386>
    5168:	00 c0       	rjmp	.+0      	; 0x516a <command_common+0x390>
    516a:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    516c:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <bootloader_jump>
            print("not supported.\n");
    5170:	87 e1       	ldi	r24, 0x17	; 23
    5172:	9f e0       	ldi	r25, 0x0F	; 15
    5174:	89 cf       	rjmp	.-238    	; 0x5088 <command_common+0x2ae>
            break;
        case KC_D:
            if (debug_enable) {
    5176:	80 91 c3 01 	lds	r24, 0x01C3
    517a:	c8 2f       	mov	r28, r24
    517c:	c1 70       	andi	r28, 0x01	; 1
    517e:	80 ff       	sbrs	r24, 0
    5180:	09 c0       	rjmp	.+18     	; 0x5194 <command_common+0x3ba>
                print("\nDEBUG: disabled.\n");
    5182:	84 e0       	ldi	r24, 0x04	; 4
    5184:	9f e0       	ldi	r25, 0x0F	; 15
    5186:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
                debug_matrix   = false;
    518a:	80 91 c3 01 	lds	r24, 0x01C3
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    518e:	81 7f       	andi	r24, 0xF1	; 241
    5190:	8e 7f       	andi	r24, 0xFE	; 254
    5192:	44 c0       	rjmp	.+136    	; 0x521c <command_common+0x442>
            } else {
                print("\nDEBUG: enabled.\n");
    5194:	82 ef       	ldi	r24, 0xF2	; 242
    5196:	9e e0       	ldi	r25, 0x0E	; 14
    5198:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
                debug_enable   = true;
    519c:	80 91 c3 01 	lds	r24, 0x01C3
    51a0:	81 60       	ori	r24, 0x01	; 1
    51a2:	80 93 c3 01 	sts	0x01C3, r24
    51a6:	72 cf       	rjmp	.-284    	; 0x508c <command_common+0x2b2>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    51a8:	80 91 c3 01 	lds	r24, 0x01C3
    51ac:	81 fb       	bst	r24, 1
    51ae:	cc 27       	eor	r28, r28
    51b0:	c0 f9       	bld	r28, 0
    51b2:	91 e0       	ldi	r25, 0x01	; 1
    51b4:	c9 27       	eor	r28, r25
    51b6:	c0 fb       	bst	r28, 0
    51b8:	81 f9       	bld	r24, 1
    51ba:	80 93 c3 01 	sts	0x01C3, r24
            if (debug_matrix) {
    51be:	cc 23       	and	r28, r28
    51c0:	19 f0       	breq	.+6      	; 0x51c8 <command_common+0x3ee>
                print("\nDEBUG: matrix enabled.\n");
    51c2:	89 ed       	ldi	r24, 0xD9	; 217
    51c4:	9e e0       	ldi	r25, 0x0E	; 14
    51c6:	25 c0       	rjmp	.+74     	; 0x5212 <command_common+0x438>
                debug_enable = true;
            } else {
                print("\nDEBUG: matrix disabled.\n");
    51c8:	8f eb       	ldi	r24, 0xBF	; 191
    51ca:	9e e0       	ldi	r25, 0x0E	; 14
    51cc:	5d cf       	rjmp	.-326    	; 0x5088 <command_common+0x2ae>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    51ce:	80 91 c3 01 	lds	r24, 0x01C3
    51d2:	82 fb       	bst	r24, 2
    51d4:	cc 27       	eor	r28, r28
    51d6:	c0 f9       	bld	r28, 0
    51d8:	91 e0       	ldi	r25, 0x01	; 1
    51da:	c9 27       	eor	r28, r25
    51dc:	c0 fb       	bst	r28, 0
    51de:	82 f9       	bld	r24, 2
    51e0:	80 93 c3 01 	sts	0x01C3, r24
            if (debug_keyboard) {
    51e4:	cc 23       	and	r28, r28
    51e6:	19 f0       	breq	.+6      	; 0x51ee <command_common+0x414>
                print("\nDEBUG: keyboard enabled.\n");
    51e8:	84 ea       	ldi	r24, 0xA4	; 164
    51ea:	9e e0       	ldi	r25, 0x0E	; 14
    51ec:	12 c0       	rjmp	.+36     	; 0x5212 <command_common+0x438>
                debug_enable = true;
            } else {
                print("\nDEBUG: keyboard disabled.\n");
    51ee:	88 e8       	ldi	r24, 0x88	; 136
    51f0:	9e e0       	ldi	r25, 0x0E	; 14
    51f2:	4a cf       	rjmp	.-364    	; 0x5088 <command_common+0x2ae>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    51f4:	80 91 c3 01 	lds	r24, 0x01C3
    51f8:	83 fb       	bst	r24, 3
    51fa:	cc 27       	eor	r28, r28
    51fc:	c0 f9       	bld	r28, 0
    51fe:	91 e0       	ldi	r25, 0x01	; 1
    5200:	c9 27       	eor	r28, r25
    5202:	c0 fb       	bst	r28, 0
    5204:	83 f9       	bld	r24, 3
    5206:	80 93 c3 01 	sts	0x01C3, r24
            if (debug_mouse) {
    520a:	cc 23       	and	r28, r28
    520c:	51 f0       	breq	.+20     	; 0x5222 <command_common+0x448>
                print("\nDEBUG: mouse enabled.\n");
    520e:	80 e7       	ldi	r24, 0x70	; 112
    5210:	9e e0       	ldi	r25, 0x0E	; 14
    5212:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
                debug_enable = true;
    5216:	80 91 c3 01 	lds	r24, 0x01C3
    521a:	81 60       	ori	r24, 0x01	; 1
    521c:	80 93 c3 01 	sts	0x01C3, r24
    5220:	98 c0       	rjmp	.+304    	; 0x5352 <command_common+0x578>
            } else {
                print("\nDEBUG: mouse disabled.\n");
    5222:	87 e5       	ldi	r24, 0x57	; 87
    5224:	9e e0       	ldi	r25, 0x0E	; 14
    5226:	30 cf       	rjmp	.-416    	; 0x5088 <command_common+0x2ae>
            }
            break;
        case KC_V: // print version & information
            print("\n\n----- Version -----\n");
    5228:	80 e4       	ldi	r24, 0x40	; 64
    522a:	9e e0       	ldi	r25, 0x0E	; 14
    522c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    5230:	81 e2       	ldi	r24, 0x21	; 33
    5232:	9e e0       	ldi	r25, 0x0E	; 14
    5234:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    5238:	8c ee       	ldi	r24, 0xEC	; 236
    523a:	9d e0       	ldi	r25, 0x0D	; 13
    523c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    5240:	8f eb       	ldi	r24, 0xBF	; 191
    5242:	9d e0       	ldi	r25, 0x0D	; 13
    5244:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            /* build options */
            print("OPTIONS:"
    5248:	8a e7       	ldi	r24, 0x7A	; 122
    524a:	9d e0       	ldi	r25, 0x0D	; 13
    524c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    5250:	8c e4       	ldi	r24, 0x4C	; 76
    5252:	9d e0       	ldi	r25, 0x0D	; 13
    5254:	19 cf       	rjmp	.-462    	; 0x5088 <command_common+0x2ae>
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_T: // print timer
            print_val_hex32(timer_count);
    5256:	80 91 c7 01 	lds	r24, 0x01C7
    525a:	90 91 c8 01 	lds	r25, 0x01C8
    525e:	a0 91 c9 01 	lds	r26, 0x01C9
    5262:	b0 91 ca 01 	lds	r27, 0x01CA
    5266:	bf 93       	push	r27
    5268:	af 93       	push	r26
    526a:	9f 93       	push	r25
    526c:	8f 93       	push	r24
    526e:	88 e3       	ldi	r24, 0x38	; 56
    5270:	9d e0       	ldi	r25, 0x0D	; 13
    5272:	9f 93       	push	r25
    5274:	8f 93       	push	r24
    5276:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
            break;
    527a:	0f 90       	pop	r0
    527c:	0f 90       	pop	r0
    527e:	0f 90       	pop	r0
    5280:	0f 90       	pop	r0
    5282:	0f 90       	pop	r0
    5284:	0f 90       	pop	r0
    5286:	02 cf       	rjmp	.-508    	; 0x508c <command_common+0x2b2>
        case KC_S:
            print("\n\n----- Status -----\n");
    5288:	82 e2       	ldi	r24, 0x22	; 34
    528a:	9d e0       	ldi	r25, 0x0D	; 13
    528c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            print_val_hex8(host_keyboard_leds());
    5290:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <host_keyboard_leds>
    5294:	1f 92       	push	r1
    5296:	8f 93       	push	r24
    5298:	88 e0       	ldi	r24, 0x08	; 8
    529a:	9d e0       	ldi	r25, 0x0D	; 13
    529c:	9f 93       	push	r25
    529e:	8f 93       	push	r24
    52a0:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
            print_val_hex8(keyboard_protocol);
    52a4:	80 91 0b 01 	lds	r24, 0x010B
    52a8:	1f 92       	push	r1
    52aa:	8f 93       	push	r24
    52ac:	81 ef       	ldi	r24, 0xF1	; 241
    52ae:	9c e0       	ldi	r25, 0x0C	; 12
    52b0:	9f 93       	push	r25
    52b2:	8f 93       	push	r24
    52b4:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
            print_val_hex8(keyboard_idle);
    52b8:	80 91 4c 01 	lds	r24, 0x014C
    52bc:	1f 92       	push	r1
    52be:	8f 93       	push	r24
    52c0:	8e ed       	ldi	r24, 0xDE	; 222
    52c2:	9c e0       	ldi	r25, 0x0C	; 12
    52c4:	9f 93       	push	r25
    52c6:	8f 93       	push	r24
    52c8:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    52cc:	8d b7       	in	r24, 0x3d	; 61
    52ce:	9e b7       	in	r25, 0x3e	; 62
    52d0:	0c 96       	adiw	r24, 0x0c	; 12
    52d2:	0f b6       	in	r0, 0x3f	; 63
    52d4:	f8 94       	cli
    52d6:	9e bf       	out	0x3e, r25	; 62
    52d8:	0f be       	out	0x3f, r0	; 63
    52da:	8d bf       	out	0x3d, r24	; 61
    52dc:	d7 ce       	rjmp	.-594    	; 0x508c <command_common+0x2b2>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    52de:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    52e2:	c0 91 0c 01 	lds	r28, 0x010C
    52e6:	81 e0       	ldi	r24, 0x01	; 1
    52e8:	c8 27       	eor	r28, r24
    52ea:	c0 93 0c 01 	sts	0x010C, r28
            if (keyboard_nkro)
    52ee:	cc 23       	and	r28, r28
    52f0:	29 f0       	breq	.+10     	; 0x52fc <command_common+0x522>
                print("NKRO: enabled\n");
    52f2:	8f ec       	ldi	r24, 0xCF	; 207
    52f4:	9c e0       	ldi	r25, 0x0C	; 12
    52f6:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    52fa:	2b c0       	rjmp	.+86     	; 0x5352 <command_common+0x578>
            else
                print("NKRO: disabled\n");
    52fc:	8f eb       	ldi	r24, 0xBF	; 191
    52fe:	9c e0       	ldi	r25, 0x0C	; 12
    5300:	c3 ce       	rjmp	.-634    	; 0x5088 <command_common+0x2ae>
                host_system_send(SYSTEM_POWER_DOWN);
                host_system_send(0);
                _delay_ms(500);
            }
#else
            host_system_send(SYSTEM_POWER_DOWN);
    5302:	81 e8       	ldi	r24, 0x81	; 129
    5304:	90 e0       	ldi	r25, 0x00	; 0
    5306:	0e 94 b7 11 	call	0x236e	; 0x236e <host_system_send>
    530a:	9f ef       	ldi	r25, 0xFF	; 255
    530c:	21 ee       	ldi	r18, 0xE1	; 225
    530e:	84 e0       	ldi	r24, 0x04	; 4
    5310:	91 50       	subi	r25, 0x01	; 1
    5312:	20 40       	sbci	r18, 0x00	; 0
    5314:	80 40       	sbci	r24, 0x00	; 0
    5316:	e1 f7       	brne	.-8      	; 0x5310 <command_common+0x536>
    5318:	00 c0       	rjmp	.+0      	; 0x531a <command_common+0x540>
    531a:	00 00       	nop
            _delay_ms(100);
            host_system_send(0);
    531c:	80 e0       	ldi	r24, 0x00	; 0
    531e:	90 e0       	ldi	r25, 0x00	; 0
    5320:	0e 94 b7 11 	call	0x236e	; 0x236e <host_system_send>
    5324:	9f ef       	ldi	r25, 0xFF	; 255
    5326:	29 e6       	ldi	r18, 0x69	; 105
    5328:	88 e1       	ldi	r24, 0x18	; 24
    532a:	91 50       	subi	r25, 0x01	; 1
    532c:	20 40       	sbci	r18, 0x00	; 0
    532e:	80 40       	sbci	r24, 0x00	; 0
    5330:	e1 f7       	brne	.-8      	; 0x532a <command_common+0x550>
    5332:	00 c0       	rjmp	.+0      	; 0x5334 <command_common+0x55a>
    5334:	00 00       	nop
    5336:	aa ce       	rjmp	.-684    	; 0x508c <command_common+0x2b2>
            break;
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
            switch_default_layer(0);
    5338:	80 e0       	ldi	r24, 0x00	; 0
    533a:	03 c0       	rjmp	.+6      	; 0x5342 <command_common+0x568>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    533c:	8d 51       	subi	r24, 0x1D	; 29
    533e:	01 c0       	rjmp	.+2      	; 0x5342 <command_common+0x568>
            break;
        case KC_F1 ... KC_F12:
            switch_default_layer((code - KC_F1) + 1);
    5340:	89 53       	subi	r24, 0x39	; 57
    5342:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <switch_default_layer>
    5346:	a2 ce       	rjmp	.-700    	; 0x508c <command_common+0x2b2>
            break;
        default:
            print("?");
    5348:	8d eb       	ldi	r24, 0xBD	; 189
    534a:	9c e0       	ldi	r25, 0x0C	; 12
    534c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            return false;
    5350:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    5352:	8c 2f       	mov	r24, r28
    5354:	cf 91       	pop	r28
    5356:	08 95       	ret

00005358 <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    5358:	80 e0       	ldi	r24, 0x00	; 0
    535a:	08 95       	ret

0000535c <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    535c:	80 e0       	ldi	r24, 0x00	; 0
    535e:	08 95       	ret

00005360 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    5360:	cf 93       	push	r28
    5362:	c8 2f       	mov	r28, r24
    switch (command_state) {
    5364:	80 91 d4 01 	lds	r24, 0x01D4
    5368:	81 30       	cpi	r24, 0x01	; 1
    536a:	71 f0       	breq	.+28     	; 0x5388 <command_proc+0x28>
    536c:	20 f0       	brcs	.+8      	; 0x5376 <command_proc+0x16>
    536e:	82 30       	cpi	r24, 0x02	; 2
    5370:	09 f4       	brne	.+2      	; 0x5374 <command_proc+0x14>
    5372:	4e c0       	rjmp	.+156    	; 0x5410 <command_proc+0xb0>
    5374:	5d c1       	rjmp	.+698    	; 0x5630 <command_proc+0x2d0>
        case ONESHOT:
            if (!IS_COMMAND())
    5376:	a0 91 0d 01 	lds	r26, 0x010D
    537a:	b0 91 0e 01 	lds	r27, 0x010E
    537e:	8c 91       	ld	r24, X
    5380:	82 32       	cpi	r24, 0x22	; 34
    5382:	09 f0       	breq	.+2      	; 0x5386 <command_proc+0x26>
    5384:	57 c1       	rjmp	.+686    	; 0x5634 <command_proc+0x2d4>
    5386:	07 c0       	rjmp	.+14     	; 0x5396 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    5388:	a0 91 0d 01 	lds	r26, 0x010D
    538c:	b0 91 0e 01 	lds	r27, 0x010E
    5390:	8c 91       	ld	r24, X
    5392:	82 32       	cpi	r24, 0x22	; 34
    5394:	49 f4       	brne	.+18     	; 0x53a8 <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    5396:	8c 2f       	mov	r24, r28
    5398:	0e 94 ac 29 	call	0x5358	; 0x5358 <command_extra>
    539c:	81 11       	cpse	r24, r1
    539e:	35 c0       	rjmp	.+106    	; 0x540a <command_proc+0xaa>
    53a0:	8c 2f       	mov	r24, r28
    53a2:	0e 94 ed 26 	call	0x4dda	; 0x4dda <command_common>
    53a6:	32 c0       	rjmp	.+100    	; 0x540c <command_proc+0xac>
            else
                return (command_console_extra(code) || command_console(code));
    53a8:	8c 2f       	mov	r24, r28
    53aa:	0e 94 ae 29 	call	0x535c	; 0x535c <command_console_extra>
    53ae:	81 11       	cpse	r24, r1
    53b0:	2c c0       	rjmp	.+88     	; 0x540a <command_proc+0xaa>
#endif
}

static bool command_console(uint8_t code)
{
    switch (code) {
    53b2:	c4 31       	cpi	r28, 0x14	; 20
    53b4:	f1 f0       	breq	.+60     	; 0x53f2 <command_proc+0x92>
    53b6:	90 f4       	brcc	.+36     	; 0x53dc <command_proc+0x7c>
    53b8:	cb 30       	cpi	r28, 0x0B	; 11
    53ba:	a1 f0       	breq	.+40     	; 0x53e4 <command_proc+0x84>
    53bc:	c0 31       	cpi	r28, 0x10	; 16
    53be:	01 f5       	brne	.+64     	; 0x5400 <command_proc+0xa0>
            print("\nQuit Console Mode\n");
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    53c0:	0e 94 89 24 	call	0x4912	; 0x4912 <mousekey_console_help>
            print("\nEnter Mousekey Console\n");
    53c4:	81 e1       	ldi	r24, 0x11	; 17
    53c6:	99 e0       	ldi	r25, 0x09	; 9
    53c8:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            print("M0>");
    53cc:	8d e0       	ldi	r24, 0x0D	; 13
    53ce:	99 e0       	ldi	r25, 0x09	; 9
    53d0:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            command_state = MOUSEKEY;
    53d4:	82 e0       	ldi	r24, 0x02	; 2
    53d6:	80 93 d4 01 	sts	0x01D4, r24
    53da:	17 c0       	rjmp	.+46     	; 0x540a <command_proc+0xaa>
#endif
}

static bool command_console(uint8_t code)
{
    switch (code) {
    53dc:	c9 32       	cpi	r28, 0x29	; 41
    53de:	49 f0       	breq	.+18     	; 0x53f2 <command_proc+0x92>
    53e0:	c8 33       	cpi	r28, 0x38	; 56
    53e2:	71 f4       	brne	.+28     	; 0x5400 <command_proc+0xa0>
        case KC_H:
        case KC_SLASH: /* ? */
            command_console_help();
    53e4:	0e 94 7d 24 	call	0x48fa	; 0x48fa <command_console_help>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    53e8:	8e e3       	ldi	r24, 0x3E	; 62
    53ea:	99 e0       	ldi	r25, 0x09	; 9
    53ec:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    53f0:	0c c0       	rjmp	.+24     	; 0x540a <command_proc+0xaa>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            print("\nQuit Console Mode\n");
    53f2:	8a e2       	ldi	r24, 0x2A	; 42
    53f4:	99 e0       	ldi	r25, 0x09	; 9
    53f6:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            command_state = ONESHOT;
    53fa:	10 92 d4 01 	sts	0x01D4, r1
    53fe:	1c c1       	rjmp	.+568    	; 0x5638 <command_proc+0x2d8>
            print("M0>");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    5400:	8b e0       	ldi	r24, 0x0B	; 11
    5402:	99 e0       	ldi	r25, 0x09	; 9
    5404:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5408:	17 c1       	rjmp	.+558    	; 0x5638 <command_proc+0x2d8>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    540a:	81 e0       	ldi	r24, 0x01	; 1
    540c:	81 70       	andi	r24, 0x01	; 1
    540e:	16 c1       	rjmp	.+556    	; 0x563c <command_proc+0x2dc>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5410:	c8 32       	cpi	r28, 0x28	; 40
    5412:	28 f5       	brcc	.+74     	; 0x545e <command_proc+0xfe>
    5414:	ce 31       	cpi	r28, 0x1E	; 30
    5416:	08 f0       	brcs	.+2      	; 0x541a <command_proc+0xba>
    5418:	c0 c0       	rjmp	.+384    	; 0x559a <command_proc+0x23a>
    541a:	cb 30       	cpi	r28, 0x0B	; 11
    541c:	a1 f1       	breq	.+104    	; 0x5486 <command_proc+0x126>
    541e:	d0 f4       	brcc	.+52     	; 0x5454 <command_proc+0xf4>
    5420:	c7 30       	cpi	r28, 0x07	; 7
    5422:	09 f0       	breq	.+2      	; 0x5426 <command_proc+0xc6>
    5424:	e8 c0       	rjmp	.+464    	; 0x55f6 <command_proc+0x296>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    5426:	8e e1       	ldi	r24, 0x1E	; 30
    5428:	80 93 14 01 	sts	0x0114, r24
            mk_interval = MOUSEKEY_INTERVAL;
    542c:	82 e3       	ldi	r24, 0x32	; 50
    542e:	80 93 13 01 	sts	0x0113, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    5432:	8a e0       	ldi	r24, 0x0A	; 10
    5434:	80 93 12 01 	sts	0x0112, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    5438:	84 e1       	ldi	r24, 0x14	; 20
    543a:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    543e:	88 e0       	ldi	r24, 0x08	; 8
    5440:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    5444:	88 e2       	ldi	r24, 0x28	; 40
    5446:	80 93 0f 01 	sts	0x010F, r24
            print("set default values.\n");
    544a:	83 eb       	ldi	r24, 0xB3	; 179
    544c:	96 e0       	ldi	r25, 0x06	; 6
    544e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5452:	d6 c0       	rjmp	.+428    	; 0x5600 <command_proc+0x2a0>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5454:	c3 31       	cpi	r28, 0x13	; 19
    5456:	41 f1       	breq	.+80     	; 0x54a8 <command_proc+0x148>
    5458:	c4 31       	cpi	r28, 0x14	; 20
    545a:	c1 f0       	breq	.+48     	; 0x548c <command_proc+0x12c>
    545c:	cc c0       	rjmp	.+408    	; 0x55f6 <command_proc+0x296>
    545e:	cb 34       	cpi	r28, 0x4B	; 75
    5460:	09 f4       	brne	.+2      	; 0x5464 <command_proc+0x104>
    5462:	be c0       	rjmp	.+380    	; 0x55e0 <command_proc+0x280>
    5464:	28 f4       	brcc	.+10     	; 0x5470 <command_proc+0x110>
    5466:	c9 32       	cpi	r28, 0x29	; 41
    5468:	89 f0       	breq	.+34     	; 0x548c <command_proc+0x12c>
    546a:	c8 33       	cpi	r28, 0x38	; 56
    546c:	61 f0       	breq	.+24     	; 0x5486 <command_proc+0x126>
    546e:	c3 c0       	rjmp	.+390    	; 0x55f6 <command_proc+0x296>
    5470:	c1 35       	cpi	r28, 0x51	; 81
    5472:	09 f4       	brne	.+2      	; 0x5476 <command_proc+0x116>
    5474:	b3 c0       	rjmp	.+358    	; 0x55dc <command_proc+0x27c>
    5476:	c2 35       	cpi	r28, 0x52	; 82
    5478:	09 f4       	brne	.+2      	; 0x547c <command_proc+0x11c>
    547a:	ae c0       	rjmp	.+348    	; 0x55d8 <command_proc+0x278>
    547c:	ce 34       	cpi	r28, 0x4E	; 78
    547e:	09 f0       	breq	.+2      	; 0x5482 <command_proc+0x122>
    5480:	ba c0       	rjmp	.+372    	; 0x55f6 <command_proc+0x296>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5482:	6a e0       	ldi	r22, 0x0A	; 10
    5484:	b3 c0       	rjmp	.+358    	; 0x55ec <command_proc+0x28c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    5486:	0e 94 89 24 	call	0x4912	; 0x4912 <mousekey_console_help>
    548a:	ba c0       	rjmp	.+372    	; 0x5600 <command_proc+0x2a0>
            break;
        case KC_Q:
        case KC_ESC:
            mousekey_param = 0;
    548c:	10 92 d7 01 	sts	0x01D7, r1
            print("\nQuit Mousekey Console\n");
    5490:	86 ee       	ldi	r24, 0xE6	; 230
    5492:	96 e0       	ldi	r25, 0x06	; 6
    5494:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            print("C> ");
    5498:	82 ee       	ldi	r24, 0xE2	; 226
    549a:	96 e0       	ldi	r25, 0x06	; 6
    549c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            command_state = CONSOLE;
    54a0:	81 e0       	ldi	r24, 0x01	; 1
    54a2:	80 93 d4 01 	sts	0x01D4, r24
    54a6:	ca c0       	rjmp	.+404    	; 0x563c <command_proc+0x2dc>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\n----- Mousekey Parameters -----\n");
    54a8:	86 e8       	ldi	r24, 0x86	; 134
    54aa:	96 e0       	ldi	r25, 0x06	; 6
    54ac:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("1: mk_delay(*10ms): "); pdec(mk_delay); print("\n");
    54b0:	81 e7       	ldi	r24, 0x71	; 113
    54b2:	96 e0       	ldi	r25, 0x06	; 6
    54b4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    54b8:	80 91 14 01 	lds	r24, 0x0114
    54bc:	1f 92       	push	r1
    54be:	8f 93       	push	r24
    54c0:	8e e6       	ldi	r24, 0x6E	; 110
    54c2:	96 e0       	ldi	r25, 0x06	; 6
    54c4:	9f 93       	push	r25
    54c6:	8f 93       	push	r24
    54c8:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    54cc:	8c e6       	ldi	r24, 0x6C	; 108
    54ce:	96 e0       	ldi	r25, 0x06	; 6
    54d0:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("2: mk_interval(ms): "); pdec(mk_interval); print("\n");
    54d4:	87 e5       	ldi	r24, 0x57	; 87
    54d6:	96 e0       	ldi	r25, 0x06	; 6
    54d8:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    54dc:	80 91 13 01 	lds	r24, 0x0113
    54e0:	1f 92       	push	r1
    54e2:	8f 93       	push	r24
    54e4:	84 e5       	ldi	r24, 0x54	; 84
    54e6:	96 e0       	ldi	r25, 0x06	; 6
    54e8:	9f 93       	push	r25
    54ea:	8f 93       	push	r24
    54ec:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    54f0:	82 e5       	ldi	r24, 0x52	; 82
    54f2:	96 e0       	ldi	r25, 0x06	; 6
    54f4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("3: mk_max_speed: "); pdec(mk_max_speed); print("\n");
    54f8:	80 e4       	ldi	r24, 0x40	; 64
    54fa:	96 e0       	ldi	r25, 0x06	; 6
    54fc:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5500:	80 91 12 01 	lds	r24, 0x0112
    5504:	1f 92       	push	r1
    5506:	8f 93       	push	r24
    5508:	8d e3       	ldi	r24, 0x3D	; 61
    550a:	96 e0       	ldi	r25, 0x06	; 6
    550c:	9f 93       	push	r25
    550e:	8f 93       	push	r24
    5510:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    5514:	8b e3       	ldi	r24, 0x3B	; 59
    5516:	96 e0       	ldi	r25, 0x06	; 6
    5518:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("4: mk_time_to_max: "); pdec(mk_time_to_max); print("\n");
    551c:	87 e2       	ldi	r24, 0x27	; 39
    551e:	96 e0       	ldi	r25, 0x06	; 6
    5520:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5524:	80 91 11 01 	lds	r24, 0x0111
    5528:	1f 92       	push	r1
    552a:	8f 93       	push	r24
    552c:	84 e2       	ldi	r24, 0x24	; 36
    552e:	96 e0       	ldi	r25, 0x06	; 6
    5530:	9f 93       	push	r25
    5532:	8f 93       	push	r24
    5534:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    5538:	82 e2       	ldi	r24, 0x22	; 34
    553a:	96 e0       	ldi	r25, 0x06	; 6
    553c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("5: mk_wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5540:	8a e0       	ldi	r24, 0x0A	; 10
    5542:	96 e0       	ldi	r25, 0x06	; 6
    5544:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5548:	80 91 10 01 	lds	r24, 0x0110
    554c:	1f 92       	push	r1
    554e:	8f 93       	push	r24
    5550:	87 e0       	ldi	r24, 0x07	; 7
    5552:	96 e0       	ldi	r25, 0x06	; 6
    5554:	9f 93       	push	r25
    5556:	8f 93       	push	r24
    5558:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    555c:	85 e0       	ldi	r24, 0x05	; 5
    555e:	96 e0       	ldi	r25, 0x06	; 6
    5560:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("6: mk_wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5564:	8b ee       	ldi	r24, 0xEB	; 235
    5566:	95 e0       	ldi	r25, 0x05	; 5
    5568:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    556c:	80 91 0f 01 	lds	r24, 0x010F
    5570:	1f 92       	push	r1
    5572:	8f 93       	push	r24
    5574:	88 ee       	ldi	r24, 0xE8	; 232
    5576:	95 e0       	ldi	r25, 0x05	; 5
    5578:	9f 93       	push	r25
    557a:	8f 93       	push	r24
    557c:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    5580:	86 ee       	ldi	r24, 0xE6	; 230
    5582:	95 e0       	ldi	r25, 0x05	; 5
    5584:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5588:	8d b7       	in	r24, 0x3d	; 61
    558a:	9e b7       	in	r25, 0x3e	; 62
    558c:	48 96       	adiw	r24, 0x18	; 24
    558e:	0f b6       	in	r0, 0x3f	; 63
    5590:	f8 94       	cli
    5592:	9e bf       	out	0x3e, r25	; 62
    5594:	0f be       	out	0x3f, r0	; 63
    5596:	8d bf       	out	0x3d, r24	; 61
    5598:	33 c0       	rjmp	.+102    	; 0x5600 <command_proc+0x2a0>
    559a:	ce 51       	subi	r28, 0x1E	; 30
    559c:	ec 2f       	mov	r30, r28
    559e:	f0 e0       	ldi	r31, 0x00	; 0
    55a0:	e2 5d       	subi	r30, 0xD2	; 210
    55a2:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_6:
        case KC_7:
        case KC_8:
        case KC_9:
        case KC_0:
            mousekey_param = numkey2num(code);
    55a4:	80 81       	ld	r24, Z
    55a6:	80 93 d7 01 	sts	0x01D7, r24
            print("selected parameter: "); pdec(mousekey_param); print("\n");
    55aa:	8d ec       	ldi	r24, 0xCD	; 205
    55ac:	96 e0       	ldi	r25, 0x06	; 6
    55ae:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    55b2:	80 91 d7 01 	lds	r24, 0x01D7
    55b6:	1f 92       	push	r1
    55b8:	8f 93       	push	r24
    55ba:	8a ec       	ldi	r24, 0xCA	; 202
    55bc:	96 e0       	ldi	r25, 0x06	; 6
    55be:	9f 93       	push	r25
    55c0:	8f 93       	push	r24
    55c2:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    55c6:	88 ec       	ldi	r24, 0xC8	; 200
    55c8:	96 e0       	ldi	r25, 0x06	; 6
    55ca:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    55ce:	0f 90       	pop	r0
    55d0:	0f 90       	pop	r0
    55d2:	0f 90       	pop	r0
    55d4:	0f 90       	pop	r0
    55d6:	14 c0       	rjmp	.+40     	; 0x5600 <command_proc+0x2a0>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    55d8:	61 e0       	ldi	r22, 0x01	; 1
    55da:	03 c0       	rjmp	.+6      	; 0x55e2 <command_proc+0x282>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    55dc:	61 e0       	ldi	r22, 0x01	; 1
    55de:	06 c0       	rjmp	.+12     	; 0x55ec <command_proc+0x28c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    55e0:	6a e0       	ldi	r22, 0x0A	; 10
    55e2:	80 91 d7 01 	lds	r24, 0x01D7
    55e6:	0e 94 ef 24 	call	0x49de	; 0x49de <mousekey_param_inc>
    55ea:	0a c0       	rjmp	.+20     	; 0x5600 <command_proc+0x2a0>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    55ec:	80 91 d7 01 	lds	r24, 0x01D7
    55f0:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <mousekey_param_dec>
    55f4:	05 c0       	rjmp	.+10     	; 0x5600 <command_proc+0x2a0>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default values.\n");
            break;
        default:
            print("?");
    55f6:	81 eb       	ldi	r24, 0xB1	; 177
    55f8:	96 e0       	ldi	r25, 0x06	; 6
    55fa:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    55fe:	16 c0       	rjmp	.+44     	; 0x562c <command_proc+0x2cc>
            return false;
    }
    print("M"); pdec(mousekey_param); print("> ");
    5600:	8f ea       	ldi	r24, 0xAF	; 175
    5602:	96 e0       	ldi	r25, 0x06	; 6
    5604:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5608:	80 91 d7 01 	lds	r24, 0x01D7
    560c:	1f 92       	push	r1
    560e:	8f 93       	push	r24
    5610:	8c ea       	ldi	r24, 0xAC	; 172
    5612:	96 e0       	ldi	r25, 0x06	; 6
    5614:	9f 93       	push	r25
    5616:	8f 93       	push	r24
    5618:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    561c:	89 ea       	ldi	r24, 0xA9	; 169
    561e:	96 e0       	ldi	r25, 0x06	; 6
    5620:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5624:	0f 90       	pop	r0
    5626:	0f 90       	pop	r0
    5628:	0f 90       	pop	r0
    562a:	0f 90       	pop	r0
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    562c:	81 e0       	ldi	r24, 0x01	; 1
    562e:	06 c0       	rjmp	.+12     	; 0x563c <command_proc+0x2dc>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    5630:	10 92 d4 01 	sts	0x01D4, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    5634:	80 e0       	ldi	r24, 0x00	; 0
    5636:	02 c0       	rjmp	.+4      	; 0x563c <command_proc+0x2dc>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5638:	80 e0       	ldi	r24, 0x00	; 0
    563a:	e8 ce       	rjmp	.-560    	; 0x540c <command_proc+0xac>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    563c:	cf 91       	pop	r28
    563e:	08 95       	ret

00005640 <__fixsfsi>:
    5640:	04 d0       	rcall	.+8      	; 0x564a <__fixunssfsi>
    5642:	68 94       	set
    5644:	b1 11       	cpse	r27, r1
    5646:	8d c0       	rjmp	.+282    	; 0x5762 <__fp_szero>
    5648:	08 95       	ret

0000564a <__fixunssfsi>:
    564a:	70 d0       	rcall	.+224    	; 0x572c <__fp_splitA>
    564c:	88 f0       	brcs	.+34     	; 0x5670 <__fixunssfsi+0x26>
    564e:	9f 57       	subi	r25, 0x7F	; 127
    5650:	90 f0       	brcs	.+36     	; 0x5676 <__fixunssfsi+0x2c>
    5652:	b9 2f       	mov	r27, r25
    5654:	99 27       	eor	r25, r25
    5656:	b7 51       	subi	r27, 0x17	; 23
    5658:	a0 f0       	brcs	.+40     	; 0x5682 <__fixunssfsi+0x38>
    565a:	d1 f0       	breq	.+52     	; 0x5690 <__fixunssfsi+0x46>
    565c:	66 0f       	add	r22, r22
    565e:	77 1f       	adc	r23, r23
    5660:	88 1f       	adc	r24, r24
    5662:	99 1f       	adc	r25, r25
    5664:	1a f0       	brmi	.+6      	; 0x566c <__fixunssfsi+0x22>
    5666:	ba 95       	dec	r27
    5668:	c9 f7       	brne	.-14     	; 0x565c <__fixunssfsi+0x12>
    566a:	12 c0       	rjmp	.+36     	; 0x5690 <__fixunssfsi+0x46>
    566c:	b1 30       	cpi	r27, 0x01	; 1
    566e:	81 f0       	breq	.+32     	; 0x5690 <__fixunssfsi+0x46>
    5670:	77 d0       	rcall	.+238    	; 0x5760 <__fp_zero>
    5672:	b1 e0       	ldi	r27, 0x01	; 1
    5674:	08 95       	ret
    5676:	74 c0       	rjmp	.+232    	; 0x5760 <__fp_zero>
    5678:	67 2f       	mov	r22, r23
    567a:	78 2f       	mov	r23, r24
    567c:	88 27       	eor	r24, r24
    567e:	b8 5f       	subi	r27, 0xF8	; 248
    5680:	39 f0       	breq	.+14     	; 0x5690 <__fixunssfsi+0x46>
    5682:	b9 3f       	cpi	r27, 0xF9	; 249
    5684:	cc f3       	brlt	.-14     	; 0x5678 <__fixunssfsi+0x2e>
    5686:	86 95       	lsr	r24
    5688:	77 95       	ror	r23
    568a:	67 95       	ror	r22
    568c:	b3 95       	inc	r27
    568e:	d9 f7       	brne	.-10     	; 0x5686 <__fixunssfsi+0x3c>
    5690:	3e f4       	brtc	.+14     	; 0x56a0 <__fixunssfsi+0x56>
    5692:	90 95       	com	r25
    5694:	80 95       	com	r24
    5696:	70 95       	com	r23
    5698:	61 95       	neg	r22
    569a:	7f 4f       	sbci	r23, 0xFF	; 255
    569c:	8f 4f       	sbci	r24, 0xFF	; 255
    569e:	9f 4f       	sbci	r25, 0xFF	; 255
    56a0:	08 95       	ret

000056a2 <__floatunsisf>:
    56a2:	e8 94       	clt
    56a4:	09 c0       	rjmp	.+18     	; 0x56b8 <__floatsisf+0x12>

000056a6 <__floatsisf>:
    56a6:	97 fb       	bst	r25, 7
    56a8:	3e f4       	brtc	.+14     	; 0x56b8 <__floatsisf+0x12>
    56aa:	90 95       	com	r25
    56ac:	80 95       	com	r24
    56ae:	70 95       	com	r23
    56b0:	61 95       	neg	r22
    56b2:	7f 4f       	sbci	r23, 0xFF	; 255
    56b4:	8f 4f       	sbci	r24, 0xFF	; 255
    56b6:	9f 4f       	sbci	r25, 0xFF	; 255
    56b8:	99 23       	and	r25, r25
    56ba:	a9 f0       	breq	.+42     	; 0x56e6 <__floatsisf+0x40>
    56bc:	f9 2f       	mov	r31, r25
    56be:	96 e9       	ldi	r25, 0x96	; 150
    56c0:	bb 27       	eor	r27, r27
    56c2:	93 95       	inc	r25
    56c4:	f6 95       	lsr	r31
    56c6:	87 95       	ror	r24
    56c8:	77 95       	ror	r23
    56ca:	67 95       	ror	r22
    56cc:	b7 95       	ror	r27
    56ce:	f1 11       	cpse	r31, r1
    56d0:	f8 cf       	rjmp	.-16     	; 0x56c2 <__floatsisf+0x1c>
    56d2:	fa f4       	brpl	.+62     	; 0x5712 <__floatsisf+0x6c>
    56d4:	bb 0f       	add	r27, r27
    56d6:	11 f4       	brne	.+4      	; 0x56dc <__floatsisf+0x36>
    56d8:	60 ff       	sbrs	r22, 0
    56da:	1b c0       	rjmp	.+54     	; 0x5712 <__floatsisf+0x6c>
    56dc:	6f 5f       	subi	r22, 0xFF	; 255
    56de:	7f 4f       	sbci	r23, 0xFF	; 255
    56e0:	8f 4f       	sbci	r24, 0xFF	; 255
    56e2:	9f 4f       	sbci	r25, 0xFF	; 255
    56e4:	16 c0       	rjmp	.+44     	; 0x5712 <__floatsisf+0x6c>
    56e6:	88 23       	and	r24, r24
    56e8:	11 f0       	breq	.+4      	; 0x56ee <__floatsisf+0x48>
    56ea:	96 e9       	ldi	r25, 0x96	; 150
    56ec:	11 c0       	rjmp	.+34     	; 0x5710 <__floatsisf+0x6a>
    56ee:	77 23       	and	r23, r23
    56f0:	21 f0       	breq	.+8      	; 0x56fa <__floatsisf+0x54>
    56f2:	9e e8       	ldi	r25, 0x8E	; 142
    56f4:	87 2f       	mov	r24, r23
    56f6:	76 2f       	mov	r23, r22
    56f8:	05 c0       	rjmp	.+10     	; 0x5704 <__floatsisf+0x5e>
    56fa:	66 23       	and	r22, r22
    56fc:	71 f0       	breq	.+28     	; 0x571a <__floatsisf+0x74>
    56fe:	96 e8       	ldi	r25, 0x86	; 134
    5700:	86 2f       	mov	r24, r22
    5702:	70 e0       	ldi	r23, 0x00	; 0
    5704:	60 e0       	ldi	r22, 0x00	; 0
    5706:	2a f0       	brmi	.+10     	; 0x5712 <__floatsisf+0x6c>
    5708:	9a 95       	dec	r25
    570a:	66 0f       	add	r22, r22
    570c:	77 1f       	adc	r23, r23
    570e:	88 1f       	adc	r24, r24
    5710:	da f7       	brpl	.-10     	; 0x5708 <__floatsisf+0x62>
    5712:	88 0f       	add	r24, r24
    5714:	96 95       	lsr	r25
    5716:	87 95       	ror	r24
    5718:	97 f9       	bld	r25, 7
    571a:	08 95       	ret

0000571c <__fp_split3>:
    571c:	57 fd       	sbrc	r21, 7
    571e:	90 58       	subi	r25, 0x80	; 128
    5720:	44 0f       	add	r20, r20
    5722:	55 1f       	adc	r21, r21
    5724:	59 f0       	breq	.+22     	; 0x573c <__fp_splitA+0x10>
    5726:	5f 3f       	cpi	r21, 0xFF	; 255
    5728:	71 f0       	breq	.+28     	; 0x5746 <__fp_splitA+0x1a>
    572a:	47 95       	ror	r20

0000572c <__fp_splitA>:
    572c:	88 0f       	add	r24, r24
    572e:	97 fb       	bst	r25, 7
    5730:	99 1f       	adc	r25, r25
    5732:	61 f0       	breq	.+24     	; 0x574c <__fp_splitA+0x20>
    5734:	9f 3f       	cpi	r25, 0xFF	; 255
    5736:	79 f0       	breq	.+30     	; 0x5756 <__fp_splitA+0x2a>
    5738:	87 95       	ror	r24
    573a:	08 95       	ret
    573c:	12 16       	cp	r1, r18
    573e:	13 06       	cpc	r1, r19
    5740:	14 06       	cpc	r1, r20
    5742:	55 1f       	adc	r21, r21
    5744:	f2 cf       	rjmp	.-28     	; 0x572a <__fp_split3+0xe>
    5746:	46 95       	lsr	r20
    5748:	f1 df       	rcall	.-30     	; 0x572c <__fp_splitA>
    574a:	08 c0       	rjmp	.+16     	; 0x575c <__fp_splitA+0x30>
    574c:	16 16       	cp	r1, r22
    574e:	17 06       	cpc	r1, r23
    5750:	18 06       	cpc	r1, r24
    5752:	99 1f       	adc	r25, r25
    5754:	f1 cf       	rjmp	.-30     	; 0x5738 <__fp_splitA+0xc>
    5756:	86 95       	lsr	r24
    5758:	71 05       	cpc	r23, r1
    575a:	61 05       	cpc	r22, r1
    575c:	08 94       	sec
    575e:	08 95       	ret

00005760 <__fp_zero>:
    5760:	e8 94       	clt

00005762 <__fp_szero>:
    5762:	bb 27       	eor	r27, r27
    5764:	66 27       	eor	r22, r22
    5766:	77 27       	eor	r23, r23
    5768:	cb 01       	movw	r24, r22
    576a:	97 f9       	bld	r25, 7
    576c:	08 95       	ret

0000576e <__mulsf3>:
    576e:	0b d0       	rcall	.+22     	; 0x5786 <__mulsf3x>
    5770:	78 c0       	rjmp	.+240    	; 0x5862 <__fp_round>
    5772:	69 d0       	rcall	.+210    	; 0x5846 <__fp_pscA>
    5774:	28 f0       	brcs	.+10     	; 0x5780 <__mulsf3+0x12>
    5776:	6e d0       	rcall	.+220    	; 0x5854 <__fp_pscB>
    5778:	18 f0       	brcs	.+6      	; 0x5780 <__mulsf3+0x12>
    577a:	95 23       	and	r25, r21
    577c:	09 f0       	breq	.+2      	; 0x5780 <__mulsf3+0x12>
    577e:	5a c0       	rjmp	.+180    	; 0x5834 <__fp_inf>
    5780:	5f c0       	rjmp	.+190    	; 0x5840 <__fp_nan>
    5782:	11 24       	eor	r1, r1
    5784:	ee cf       	rjmp	.-36     	; 0x5762 <__fp_szero>

00005786 <__mulsf3x>:
    5786:	ca df       	rcall	.-108    	; 0x571c <__fp_split3>
    5788:	a0 f3       	brcs	.-24     	; 0x5772 <__mulsf3+0x4>

0000578a <__mulsf3_pse>:
    578a:	95 9f       	mul	r25, r21
    578c:	d1 f3       	breq	.-12     	; 0x5782 <__mulsf3+0x14>
    578e:	95 0f       	add	r25, r21
    5790:	50 e0       	ldi	r21, 0x00	; 0
    5792:	55 1f       	adc	r21, r21
    5794:	62 9f       	mul	r22, r18
    5796:	f0 01       	movw	r30, r0
    5798:	72 9f       	mul	r23, r18
    579a:	bb 27       	eor	r27, r27
    579c:	f0 0d       	add	r31, r0
    579e:	b1 1d       	adc	r27, r1
    57a0:	63 9f       	mul	r22, r19
    57a2:	aa 27       	eor	r26, r26
    57a4:	f0 0d       	add	r31, r0
    57a6:	b1 1d       	adc	r27, r1
    57a8:	aa 1f       	adc	r26, r26
    57aa:	64 9f       	mul	r22, r20
    57ac:	66 27       	eor	r22, r22
    57ae:	b0 0d       	add	r27, r0
    57b0:	a1 1d       	adc	r26, r1
    57b2:	66 1f       	adc	r22, r22
    57b4:	82 9f       	mul	r24, r18
    57b6:	22 27       	eor	r18, r18
    57b8:	b0 0d       	add	r27, r0
    57ba:	a1 1d       	adc	r26, r1
    57bc:	62 1f       	adc	r22, r18
    57be:	73 9f       	mul	r23, r19
    57c0:	b0 0d       	add	r27, r0
    57c2:	a1 1d       	adc	r26, r1
    57c4:	62 1f       	adc	r22, r18
    57c6:	83 9f       	mul	r24, r19
    57c8:	a0 0d       	add	r26, r0
    57ca:	61 1d       	adc	r22, r1
    57cc:	22 1f       	adc	r18, r18
    57ce:	74 9f       	mul	r23, r20
    57d0:	33 27       	eor	r19, r19
    57d2:	a0 0d       	add	r26, r0
    57d4:	61 1d       	adc	r22, r1
    57d6:	23 1f       	adc	r18, r19
    57d8:	84 9f       	mul	r24, r20
    57da:	60 0d       	add	r22, r0
    57dc:	21 1d       	adc	r18, r1
    57de:	82 2f       	mov	r24, r18
    57e0:	76 2f       	mov	r23, r22
    57e2:	6a 2f       	mov	r22, r26
    57e4:	11 24       	eor	r1, r1
    57e6:	9f 57       	subi	r25, 0x7F	; 127
    57e8:	50 40       	sbci	r21, 0x00	; 0
    57ea:	8a f0       	brmi	.+34     	; 0x580e <__mulsf3_pse+0x84>
    57ec:	e1 f0       	breq	.+56     	; 0x5826 <__mulsf3_pse+0x9c>
    57ee:	88 23       	and	r24, r24
    57f0:	4a f0       	brmi	.+18     	; 0x5804 <__mulsf3_pse+0x7a>
    57f2:	ee 0f       	add	r30, r30
    57f4:	ff 1f       	adc	r31, r31
    57f6:	bb 1f       	adc	r27, r27
    57f8:	66 1f       	adc	r22, r22
    57fa:	77 1f       	adc	r23, r23
    57fc:	88 1f       	adc	r24, r24
    57fe:	91 50       	subi	r25, 0x01	; 1
    5800:	50 40       	sbci	r21, 0x00	; 0
    5802:	a9 f7       	brne	.-22     	; 0x57ee <__mulsf3_pse+0x64>
    5804:	9e 3f       	cpi	r25, 0xFE	; 254
    5806:	51 05       	cpc	r21, r1
    5808:	70 f0       	brcs	.+28     	; 0x5826 <__mulsf3_pse+0x9c>
    580a:	14 c0       	rjmp	.+40     	; 0x5834 <__fp_inf>
    580c:	aa cf       	rjmp	.-172    	; 0x5762 <__fp_szero>
    580e:	5f 3f       	cpi	r21, 0xFF	; 255
    5810:	ec f3       	brlt	.-6      	; 0x580c <__mulsf3_pse+0x82>
    5812:	98 3e       	cpi	r25, 0xE8	; 232
    5814:	dc f3       	brlt	.-10     	; 0x580c <__mulsf3_pse+0x82>
    5816:	86 95       	lsr	r24
    5818:	77 95       	ror	r23
    581a:	67 95       	ror	r22
    581c:	b7 95       	ror	r27
    581e:	f7 95       	ror	r31
    5820:	e7 95       	ror	r30
    5822:	9f 5f       	subi	r25, 0xFF	; 255
    5824:	c1 f7       	brne	.-16     	; 0x5816 <__mulsf3_pse+0x8c>
    5826:	fe 2b       	or	r31, r30
    5828:	88 0f       	add	r24, r24
    582a:	91 1d       	adc	r25, r1
    582c:	96 95       	lsr	r25
    582e:	87 95       	ror	r24
    5830:	97 f9       	bld	r25, 7
    5832:	08 95       	ret

00005834 <__fp_inf>:
    5834:	97 f9       	bld	r25, 7
    5836:	9f 67       	ori	r25, 0x7F	; 127
    5838:	80 e8       	ldi	r24, 0x80	; 128
    583a:	70 e0       	ldi	r23, 0x00	; 0
    583c:	60 e0       	ldi	r22, 0x00	; 0
    583e:	08 95       	ret

00005840 <__fp_nan>:
    5840:	9f ef       	ldi	r25, 0xFF	; 255
    5842:	80 ec       	ldi	r24, 0xC0	; 192
    5844:	08 95       	ret

00005846 <__fp_pscA>:
    5846:	00 24       	eor	r0, r0
    5848:	0a 94       	dec	r0
    584a:	16 16       	cp	r1, r22
    584c:	17 06       	cpc	r1, r23
    584e:	18 06       	cpc	r1, r24
    5850:	09 06       	cpc	r0, r25
    5852:	08 95       	ret

00005854 <__fp_pscB>:
    5854:	00 24       	eor	r0, r0
    5856:	0a 94       	dec	r0
    5858:	12 16       	cp	r1, r18
    585a:	13 06       	cpc	r1, r19
    585c:	14 06       	cpc	r1, r20
    585e:	05 06       	cpc	r0, r21
    5860:	08 95       	ret

00005862 <__fp_round>:
    5862:	09 2e       	mov	r0, r25
    5864:	03 94       	inc	r0
    5866:	00 0c       	add	r0, r0
    5868:	11 f4       	brne	.+4      	; 0x586e <__fp_round+0xc>
    586a:	88 23       	and	r24, r24
    586c:	52 f0       	brmi	.+20     	; 0x5882 <__fp_round+0x20>
    586e:	bb 0f       	add	r27, r27
    5870:	40 f4       	brcc	.+16     	; 0x5882 <__fp_round+0x20>
    5872:	bf 2b       	or	r27, r31
    5874:	11 f4       	brne	.+4      	; 0x587a <__fp_round+0x18>
    5876:	60 ff       	sbrs	r22, 0
    5878:	04 c0       	rjmp	.+8      	; 0x5882 <__fp_round+0x20>
    587a:	6f 5f       	subi	r22, 0xFF	; 255
    587c:	7f 4f       	sbci	r23, 0xFF	; 255
    587e:	8f 4f       	sbci	r24, 0xFF	; 255
    5880:	9f 4f       	sbci	r25, 0xFF	; 255
    5882:	08 95       	ret

00005884 <__divmodhi4>:
    5884:	97 fb       	bst	r25, 7
    5886:	07 2e       	mov	r0, r23
    5888:	16 f4       	brtc	.+4      	; 0x588e <__divmodhi4+0xa>
    588a:	00 94       	com	r0
    588c:	07 d0       	rcall	.+14     	; 0x589c <__divmodhi4_neg1>
    588e:	77 fd       	sbrc	r23, 7
    5890:	09 d0       	rcall	.+18     	; 0x58a4 <__divmodhi4_neg2>
    5892:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__udivmodhi4>
    5896:	07 fc       	sbrc	r0, 7
    5898:	05 d0       	rcall	.+10     	; 0x58a4 <__divmodhi4_neg2>
    589a:	3e f4       	brtc	.+14     	; 0x58aa <__divmodhi4_exit>

0000589c <__divmodhi4_neg1>:
    589c:	90 95       	com	r25
    589e:	81 95       	neg	r24
    58a0:	9f 4f       	sbci	r25, 0xFF	; 255
    58a2:	08 95       	ret

000058a4 <__divmodhi4_neg2>:
    58a4:	70 95       	com	r23
    58a6:	61 95       	neg	r22
    58a8:	7f 4f       	sbci	r23, 0xFF	; 255

000058aa <__divmodhi4_exit>:
    58aa:	08 95       	ret

000058ac <__tablejump2__>:
    58ac:	ee 0f       	add	r30, r30
    58ae:	ff 1f       	adc	r31, r31

000058b0 <__tablejump__>:
    58b0:	05 90       	lpm	r0, Z+
    58b2:	f4 91       	lpm	r31, Z
    58b4:	e0 2d       	mov	r30, r0
    58b6:	09 94       	ijmp

000058b8 <__udivmodhi4>:
    58b8:	aa 1b       	sub	r26, r26
    58ba:	bb 1b       	sub	r27, r27
    58bc:	51 e1       	ldi	r21, 0x11	; 17
    58be:	07 c0       	rjmp	.+14     	; 0x58ce <__udivmodhi4_ep>

000058c0 <__udivmodhi4_loop>:
    58c0:	aa 1f       	adc	r26, r26
    58c2:	bb 1f       	adc	r27, r27
    58c4:	a6 17       	cp	r26, r22
    58c6:	b7 07       	cpc	r27, r23
    58c8:	10 f0       	brcs	.+4      	; 0x58ce <__udivmodhi4_ep>
    58ca:	a6 1b       	sub	r26, r22
    58cc:	b7 0b       	sbc	r27, r23

000058ce <__udivmodhi4_ep>:
    58ce:	88 1f       	adc	r24, r24
    58d0:	99 1f       	adc	r25, r25
    58d2:	5a 95       	dec	r21
    58d4:	a9 f7       	brne	.-22     	; 0x58c0 <__udivmodhi4_loop>
    58d6:	80 95       	com	r24
    58d8:	90 95       	com	r25
    58da:	bc 01       	movw	r22, r24
    58dc:	cd 01       	movw	r24, r26
    58de:	08 95       	ret

000058e0 <__eerd_byte_m32u4>:
    58e0:	f9 99       	sbic	0x1f, 1	; 31
    58e2:	fe cf       	rjmp	.-4      	; 0x58e0 <__eerd_byte_m32u4>
    58e4:	92 bd       	out	0x22, r25	; 34
    58e6:	81 bd       	out	0x21, r24	; 33
    58e8:	f8 9a       	sbi	0x1f, 0	; 31
    58ea:	99 27       	eor	r25, r25
    58ec:	80 b5       	in	r24, 0x20	; 32
    58ee:	08 95       	ret

000058f0 <__eerd_word_m32u4>:
    58f0:	a8 e1       	ldi	r26, 0x18	; 24
    58f2:	b0 e0       	ldi	r27, 0x00	; 0
    58f4:	42 e0       	ldi	r20, 0x02	; 2
    58f6:	50 e0       	ldi	r21, 0x00	; 0
    58f8:	0c 94 93 2c 	jmp	0x5926	; 0x5926 <__eerd_blraw_m32u4>

000058fc <__eewr_byte_m32u4>:
    58fc:	26 2f       	mov	r18, r22

000058fe <__eewr_r18_m32u4>:
    58fe:	f9 99       	sbic	0x1f, 1	; 31
    5900:	fe cf       	rjmp	.-4      	; 0x58fe <__eewr_r18_m32u4>
    5902:	1f ba       	out	0x1f, r1	; 31
    5904:	92 bd       	out	0x22, r25	; 34
    5906:	81 bd       	out	0x21, r24	; 33
    5908:	20 bd       	out	0x20, r18	; 32
    590a:	0f b6       	in	r0, 0x3f	; 63
    590c:	f8 94       	cli
    590e:	fa 9a       	sbi	0x1f, 2	; 31
    5910:	f9 9a       	sbi	0x1f, 1	; 31
    5912:	0f be       	out	0x3f, r0	; 63
    5914:	01 96       	adiw	r24, 0x01	; 1
    5916:	08 95       	ret

00005918 <__eewr_word_m32u4>:
    5918:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <__eewr_byte_m32u4>
    591c:	27 2f       	mov	r18, r23
    591e:	0c 94 7f 2c 	jmp	0x58fe	; 0x58fe <__eewr_r18_m32u4>

00005922 <__eerd_block_m32u4>:
    5922:	dc 01       	movw	r26, r24
    5924:	cb 01       	movw	r24, r22

00005926 <__eerd_blraw_m32u4>:
    5926:	fc 01       	movw	r30, r24
    5928:	f9 99       	sbic	0x1f, 1	; 31
    592a:	fe cf       	rjmp	.-4      	; 0x5928 <__eerd_blraw_m32u4+0x2>
    592c:	06 c0       	rjmp	.+12     	; 0x593a <__eerd_blraw_m32u4+0x14>
    592e:	f2 bd       	out	0x22, r31	; 34
    5930:	e1 bd       	out	0x21, r30	; 33
    5932:	f8 9a       	sbi	0x1f, 0	; 31
    5934:	31 96       	adiw	r30, 0x01	; 1
    5936:	00 b4       	in	r0, 0x20	; 32
    5938:	0d 92       	st	X+, r0
    593a:	41 50       	subi	r20, 0x01	; 1
    593c:	50 40       	sbci	r21, 0x00	; 0
    593e:	b8 f7       	brcc	.-18     	; 0x592e <__eerd_blraw_m32u4+0x8>
    5940:	08 95       	ret

00005942 <_exit>:
    5942:	f8 94       	cli

00005944 <__stop_program>:
    5944:	ff cf       	rjmp	.-2      	; 0x5944 <__stop_program>

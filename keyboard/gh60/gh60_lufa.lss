
gh60_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00005a48  00005adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005a48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ae  00800138  00800138  00005b14  2**0
                  ALLOC
  3 .noinit       00000004  008001e6  008001e6  00005b14  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000097  00000000  00000000  000063cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00006463  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000b30  00000000  00000000  00006478  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00010f9b  00000000  00000000  00006fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003feb  00000000  00000000  00017f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000584c  00000000  00000000  0001bf2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001d00  00000000  00000000  0002177c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000045e2  00000000  00000000  0002347c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008e50  00000000  00000000  00027a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000cb0  00000000  00000000  000308ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
       0:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__ctors_end>
       4:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
       8:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
       c:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      10:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      14:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      18:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
	uint8_t ErrorCode;

	while (*BytesRem)
      1c:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      20:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      24:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
      28:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <__vector_10>
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
      2c:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__vector_11>
      30:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__vector_12>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
      34:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      38:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      3c:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
      40:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
			{
				*CurrConfigLoc = PrevDescLoc;
      44:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
				*BytesRem      = PrevBytesRem;
      48:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      4c:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
      50:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      54:	0c 94 54 20 	jmp	0x40a8	; 0x40a8 <__vector_21>
      58:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      5c:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      60:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      64:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      68:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      70:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      74:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      78:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      7c:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
      80:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      84:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      88:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
      8c:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      90:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      94:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
      98:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      a0:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      a4:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a8:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__bad_interrupt>
      ac:	ab 10       	cpse	r10, r11
      ae:	cd 10       	cpse	r12, r13
      b0:	b9 11       	cpse	r27, r9
      b2:	cd 10       	cpse	r12, r13
      b4:	b9 11       	cpse	r27, r9
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	0f 11       	cpse	r16, r15
      b8:	33 11       	cpse	r19, r3
      ba:	b9 11       	cpse	r27, r9
      bc:	88 11       	cpse	r24, r8
      be:	9b 11       	cpse	r25, r11
      c0:	e5 14       	cp	r14, r5
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	e5 14       	cp	r14, r5
      c4:	13 15       	cp	r17, r3
      c6:	13 15       	cp	r17, r3
      c8:	68 15       	cp	r22, r8
      ca:	a4 15       	cp	r26, r4
      cc:	95 17       	cp	r25, r21
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	95 17       	cp	r25, r21
      d0:	bc 15       	cp	r27, r12
      d2:	95 17       	cp	r25, r21
      d4:	b3 16       	cp	r11, r19
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	b3 16       	cp	r11, r19
      d8:	6f 17       	cp	r22, r31
      da:	95 17       	cp	r25, r21
      dc:	95 17       	cp	r25, r21
      de:	83 17       	cp	r24, r19
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	14 29       	or	r17, r4
      e2:	3c 29       	or	r19, r12
      e4:	7b 27       	eor	r23, r27
      e6:	25 2a       	or	r2, r21
      e8:	25 2a       	or	r2, r21
      ea:	c9 28       	or	r12, r9
      ec:	25 2a       	or	r2, r21
      ee:	25 2a       	or	r2, r21
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
      f0:	68 29       	or	r22, r8
      f2:	25 2a       	or	r2, r21
      f4:	7b 29       	or	r23, r11
		ReportSize--;
      f6:	f0 29       	or	r31, r0
      f8:	25 2a       	or	r2, r21
	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;
      fa:	25 2a       	or	r2, r21
      fc:	25 2a       	or	r2, r21
      fe:	25 2a       	or	r2, r21
     100:	c5 29       	or	r28, r5
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     102:	ac 29       	or	r26, r12
     104:	25 2a       	or	r2, r21
     106:	95 29       	or	r25, r5
     108:	25 2a       	or	r2, r21
     10a:	55 29       	or	r21, r5
     10c:	25 2a       	or	r2, r21
     10e:	25 2a       	or	r2, r21
     110:	1f 2a       	or	r1, r31
     112:	1f 2a       	or	r1, r31
     114:	1f 2a       	or	r1, r31
     116:	1f 2a       	or	r1, r31
     118:	1f 2a       	or	r1, r31
     11a:	1f 2a       	or	r1, r31
     11c:	1f 2a       	or	r1, r31
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     11e:	1f 2a       	or	r1, r31
     120:	1f 2a       	or	r1, r31
     122:	1d 2a       	or	r1, r29
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     124:	25 2a       	or	r2, r21
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	1d 2a       	or	r1, r29
     128:	25 2a       	or	r2, r21
     12a:	25 2a       	or	r2, r21
     12c:	25 2a       	or	r2, r21
     12e:	25 2a       	or	r2, r21
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     130:	25 2a       	or	r2, r21
     132:	25 2a       	or	r2, r21
     134:	25 2a       	or	r2, r21
     136:	25 2a       	or	r2, r21
     138:	25 2a       	or	r2, r21
     13a:	25 2a       	or	r2, r21
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     13c:	25 2a       	or	r2, r21
     13e:	1d 2a       	or	r1, r29
				ReportData     += 4;
     140:	25 2a       	or	r2, r21
     142:	25 2a       	or	r2, r21
     144:	c9 28       	or	r12, r9
				break;
     146:	aa 28       	or	r10, r10
			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     148:	21 2a       	or	r2, r17
     14a:	21 2a       	or	r2, r17
     14c:	21 2a       	or	r2, r17
     14e:	21 2a       	or	r2, r17
     150:	21 2a       	or	r2, r17
     152:	21 2a       	or	r2, r17
     154:	21 2a       	or	r2, r17
     156:	21 2a       	or	r2, r17
     158:	21 2a       	or	r2, r17
				ReportSize     -= 2;
     15a:	21 2a       	or	r2, r17
     15c:	21 2a       	or	r2, r17
				ReportData     += 2;
     15e:	21 2a       	or	r2, r17
     160:	02 2a       	or	r0, r18
     162:	25 2a       	or	r2, r21
				break;
     164:	28 29       	or	r18, r8

00000166 <__trampolines_end>:
			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     166:	f1 a1       	ldd	r31, Z+33	; 0x21

00000168 <keymaps>:
     168:	29 1e 1f 20 21 22 23 24 25 26 27 2d 2e 2a a9 2b     ).. !"#$%&'-.*.+
				ReportSize     -= 1;
				ReportData     += 1;
     178:	14 1a 08 15 17 1c 18 0c 12 13 2f 30 31 aa c0 04     ........../01...
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     188:	16 07 09 0a 0b 0d 0e 0f 33 34 00 28 4b e1 00 1d     ........34.(K...
     198:	1b 06 19 05 11 10 36 37 38 e5 52 4e e0 e2 e3 00     ......678.RN....
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1a8:	00 00 2c 00 00 e7 e6 e4 50 51 4f                    ..,.....PQO

000001b3 <__c.2367>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b3:	0a 00                                               ..

000001b5 <__c.2365>:
     1b5:	25 30 31 36 62 00                                   %016b.

000001bb <__c.2363>:
     1bb:	3a 20 00                                            : .

000001be <__c.2361>:
     1be:	25 30 32 58 00                                      %02X.

000001c3 <__c.2358>:
     1c3:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d3:	42 43 44 45 46 0a 00                                BCDEF..

000001da <__c.2331>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1da:	0a 00                                               ..

000001dc <__c.2329>:
     1dc:	25 30 32 58 00                                      %02X.

000001e1 <__c.2327>:
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     1e1:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

000001eb <__c.4678>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1eb:	5b 73 5d 00                                         [s].

000001ef <__c.4676>:
     1ef:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
     1ff:	00                                                  .

00000200 <__c.4674>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     200:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     210:	00                                                  .

00000211 <__c.4582>:
     211:	5b 57 5d 00                                         [W].

00000215 <__c.4578>:
     215:	5b 53 5d 00                                         [S].

00000219 <__c.4574>:
     219:	5b 52 5d 00                                         [R].

0000021d <__c.4569>:
     21d:	5b 44 5d 00                                         [D].

00000221 <__c.4564>:
     221:	5b 43 5d 00                                         [C].

00000225 <ProductString>:
     225:	0e 03 6a 00 75 00 6c 00 69 00 61 00 6e 00 00 00     ..j.u.l.i.a.n...

00000235 <ManufacturerString>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     235:	0e 03 6a 00 75 00 6c 00 69 00 61 00 6e 00 00 00     ..j.u.l.i.a.n...

00000245 <LanguageString>:
     245:	04 03 09 04                                         ....

00000249 <ConfigurationDescriptor>:
     249:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     259:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     269:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     279:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
				break;
     289:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
				break;
     299:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2a9:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2b9:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2c9:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

000002d6 <DeviceDescriptor>:
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
     2d6:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2e6:	00 01                                               ..

000002e8 <NKROReport>:
     2e8:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     2f8:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     308:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     318:	25 01 95 78 75 01 81 02 c0                          %..xu....

00000321 <ConsoleReport>:
     321:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     331:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

00000341 <ExtrakeyReport>:
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     341:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     351:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     361:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
					}
				}

				ParserData->UsingReportIDs = true;

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     371:	10 95 01 81 00 c0                                   ......

00000377 <MouseReport>:
     377:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     387:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     397:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     3a7:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3b7:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000003c4 <KeyboardReport>:
     3c4:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3d4:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     3e4:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f4:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

00000403 <__c.4335>:
				}

				CurrCollectionPath->Type       = ReportItemData;
     403:	0a 00                                               ..

00000405 <__c.4330>:
     405:	25 30 32 58 20 00                                   %02X .

0000040b <__c.4327>:
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     40b:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:

				if (UsageListSize)
     41b:	20 00                                                .

0000041d <__c.4668>:
     41d:	0a 00                                               ..

0000041f <__c.4666>:
     41f:	25 30 32 58 00                                      %02X.

00000424 <__c.4664>:
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     424:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
     434:	3a 20 00                                            : .

00000437 <__c.4475>:
     437:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can

					for (uint8_t i = 0; i < UsageListSize; i++)
     447:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000455 <__c.4470>:
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     455:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     465:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

00000473 <__c.4614>:
     473:	64 6f 6e 65 2e 0a 00                                done...

0000047a <__c.4608>:
     47a:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	2e 2e 2e 20 00                                      ... .

0000048f <__c.4407>:
     48f:	29 0a 00                                            )..

00000492 <__c.4405>:
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     492:	25 75 00                                            %u.

00000495 <__c.4403>:
     495:	2f 00                                               /.

00000497 <__c.4401>:
     497:	25 75 00                                            %u.

0000049a <__c.4399>:
     49a:	5d 28 00                                            ](.

0000049d <__c.4397>:
     49d:	25 64 00                                            %d.

000004a0 <__c.4395>:
     4a0:	20 00                                                .

000004a2 <__c.4393>:
				break;
     4a2:	25 64 00                                            %d.

000004a5 <__c.4391>:
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4a5:	20 00                                                .

000004a7 <__c.4389>:
     4a7:	25 64 00                                            %d.

000004aa <__c.4387>:
     4aa:	20 00                                                .

000004ac <__c.4385>:
     4ac:	25 64 00                                            %d.

000004af <__c.4383>:
     4af:	7c 00                                               |.

000004b1 <__c.4381>:
     4b1:	25 30 32 58 00                                      %02X.

000004b6 <__c.4379>:
     4b6:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4c6:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     4d6:	20 5b 00                                             [.

000004d9 <__c.5107>:
     4d9:	0a 00                                               ..

000004db <__c.5105>:
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4db:	25 75 00                                            %u.

000004de <__c.5103>:
     4de:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4ee:	5f 6d 61 78 20 3d 20 00                             _max = .

000004f6 <__c.5100>:
     4f6:	0a 00                                               ..

000004f8 <__c.5098>:
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4f8:	25 75 00                                            %u.

000004fb <__c.5096>:
     4fb:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
					NewReportItem.CollectionPath = CurrCollectionPath;
     50b:	65 64 20 3d 20 00                                   ed = .

00000511 <__c.5093>:
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     511:	0a 00                                               ..

00000513 <__c.5091>:
     513:	25 75 00                                            %u.

00000516 <__c.5089>:

					if (UsageListSize)
     516:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     526:	20 00                                                .

00000528 <__c.5086>:
     528:	0a 00                                               ..

0000052a <__c.5084>:
     52a:	25 75 00                                            %u.

0000052d <__c.5082>:
     52d:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 00     mk_max_speed = .

0000053d <__c.5079>:

						for (uint8_t i = 0; i < UsageListSize; i++)
						  UsageList[i] = UsageList[i + 1];
     53d:	0a 00                                               ..

0000053f <__c.5077>:

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     53f:	25 75 00                                            %u.

00000542 <__c.5075>:
     542:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 00        mk_interval = .

00000551 <__c.5071>:
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     551:	0a 00                                               ..

00000553 <__c.5069>:
     553:	25 75 00                                            %u.

00000556 <__c.5067>:
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     556:	6d 6b 5f 64 65 6c 61 79 20 3d 20 00                 mk_delay = .

00000562 <__c.5060>:
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     562:	0a 00                                               ..

00000564 <__c.5058>:
     564:	25 75 00                                            %u.

00000567 <__c.5056>:
     567:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     577:	5f 6d 61 78 20 3d 20 00                             _max = .

0000057f <__c.5053>:
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57f:	0a 00                                               ..

00000581 <__c.5051>:
     581:	25 75 00                                            %u.

00000584 <__c.5049>:
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     584:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     594:	65 64 20 3d 20 00                                   ed = .

0000059a <__c.5046>:
     59a:	0a 00                                               ..

0000059c <__c.5044>:
     59c:	25 75 00                                            %u.

0000059f <__c.5042>:
     59f:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5af:	20 00                                                .

000005b1 <__c.5039>:

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b1:	0a 00                                               ..

000005b3 <__c.5037>:
     5b3:	25 75 00                                            %u.

000005b6 <__c.5035>:
     5b6:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 00     mk_max_speed = .

000005c6 <__c.5032>:
     5c6:	0a 00                                               ..

000005c8 <__c.5030>:
     5c8:	25 75 00                                            %u.

000005cb <__c.5028>:
     5cb:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 00        mk_interval = .

000005da <__c.5024>:
     5da:	0a 00                                               ..

000005dc <__c.5022>:
     5dc:	25 75 00                                            %u.

000005df <__c.5020>:
     5df:	6d 6b 5f 64 65 6c 61 79 20 3d 20 00                 mk_delay = .

000005eb <__c.5013>:

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5eb:	0a 00                                               ..

000005ed <__c.5011>:
     5ed:	25 75 00                                            %u.

000005f0 <__c.5009>:
     5f0:	36 3a 20 6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65     6: mk_wheel_time
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     600:	5f 74 6f 5f 6d 61 78 3a 20 00                       _to_max: .

0000060a <__c.5007>:
     60a:	0a 00                                               ..

0000060c <__c.5005>:
     60c:	25 75 00                                            %u.

0000060f <__c.5003>:
     60f:	35 3a 20 6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f     5: mk_wheel_max_
     61f:	73 70 65 65 64 3a 20 00                             speed: .

00000627 <__c.5001>:
     627:	0a 00                                               ..

00000629 <__c.4999>:
     629:	25 75 00                                            %u.

0000062c <__c.4997>:
     62c:	34 3a 20 6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61     4: mk_time_to_ma
     63c:	78 3a 20 00                                         x: .

00000640 <__c.4995>:
     640:	0a 00                                               ..

00000642 <__c.4993>:
     642:	25 75 00                                            %u.

00000645 <__c.4991>:
     645:	33 3a 20 6d 6b 5f 6d 61 78 5f 73 70 65 65 64 3a     3: mk_max_speed:
     655:	20 00                                                .

00000657 <__c.4989>:
     657:	0a 00                                               ..

00000659 <__c.4987>:
     659:	25 75 00                                            %u.

0000065c <__c.4985>:
     65c:	32 3a 20 6d 6b 5f 69 6e 74 65 72 76 61 6c 28 6d     2: mk_interval(m
     66c:	73 29 3a 20 00                                      s): .

00000671 <__c.4983>:
     671:	0a 00                                               ..

00000673 <__c.4981>:
     673:	25 75 00                                            %u.

00000676 <__c.4979>:
     676:	31 3a 20 6d 6b 5f 64 65 6c 61 79 28 2a 31 30 6d     1: mk_delay(*10m
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     686:	73 29 3a 20 00                                      s): .

0000068b <__c.4977>:
     68b:	0a 0a 2d 2d 2d 2d 2d 20 4d 6f 75 73 65 6b 65 79     ..----- Mousekey
		{
			UsageMinMax.Minimum = 0;
     69b:	20 50 61 72 61 6d 65 74 65 72 73 20 2d 2d 2d 2d      Parameters ----
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ab:	2d 0a 00                                            -..

000006ae <__c.5197>:
	  return HID_PARSE_NoUnfilteredReportItems;
     6ae:	3e 20 00                                            > .

000006b1 <__c.5195>:
     6b1:	25 75 00                                            %u.

000006b4 <__c.5193>:

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6b4:	4d 00                                               M.

000006b6 <__c.5191>:

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6b6:	3f 00                                               ?.

000006b8 <__c.5188>:
     6b8:	73 65 74 20 64 65 66 61 75 6c 74 20 76 61 6c 75     set default valu
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6c8:	65 73 2e 0a 00                                      es...

000006cd <__c.5181>:
}
     6cd:	0a 00                                               ..

000006cf <__c.5179>:
     6cf:	25 75 00                                            %u.

000006d2 <__c.5177>:
     6d2:	73 65 6c 65 63 74 65 64 20 70 61 72 61 6d 65 74     selected paramet
     6e2:	65 72 3a 20 00                                      er: .

000006e7 <__c.5164>:
     6e7:	43 3e 20 00                                         C> .

000006eb <__c.5162>:
     6eb:	0a 51 75 69 74 20 4d 6f 75 73 65 6b 65 79 20 43     .Quit Mousekey C
     6fb:	6f 6e 73 6f 6c 65 0a 00                             onsole..

00000703 <__c.5152>:
     703:	53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77 69     See http://en.wi
     713:	6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b 69     kipedia.org/wiki
     723:	2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00              /Mouse_keys..

00000730 <__c.5150>:
     730:	0a 00                                               ..

00000732 <__c.5148>:
     732:	25 75 00                                            %u.

00000735 <__c.5146>:
     735:	2c 20 77 68 65 65 6c 3d 00                          , wheel=.

0000073e <__c.5144>:
     73e:	25 75 00                                            %u.

00000741 <__c.5142>:
     741:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     751:	73 6f 72 3d 00                                      sor=.

00000756 <__c.5140>:
     756:	0a 73 70 65 65 64 20 3d 20 64 65 6c 74 61 20 2a     .speed = delta *
     766:	20 6d 61 78 5f 73 70 65 65 64 20 2a 20 28 72 65      max_speed * (re
     776:	70 65 61 74 20 2f 20 74 69 6d 65 5f 74 6f 5f 6d     peat / time_to_m
     786:	61 78 29 0a 00                                      ax)..

0000078b <__c.5138>:
     78b:	70 67 64 6f 77 6e 3a 09 64 65 63 72 65 61 73 65     pgdown:.decrease
     79b:	20 70 61 72 61 6d 65 74 65 72 73 28 2d 31 30 29      parameters(-10)
     7ab:	0a 00                                               ..

000007ad <__c.5136>:
     7ad:	70 67 75 70 3a 09 69 6e 63 72 65 61 73 65 20 70     pgup:.increase p
     7bd:	61 72 61 6d 65 74 65 72 73 28 2b 31 30 29 0a 00     arameters(+10)..

000007cd <__c.5134>:
     7cd:	64 6f 77 6e 3a 09 64 65 63 72 65 61 73 65 20 70     down:.decrease p
     7dd:	61 72 61 6d 65 74 65 72 73 28 2d 31 29 0a 00        arameters(-1)..

000007ec <__c.5132>:
     7ec:	75 70 3a 09 69 6e 63 72 65 61 73 65 20 70 61 72     up:.increase par
     7fc:	61 6d 65 74 65 72 73 28 2b 31 29 0a 00              ameters(+1)..

00000809 <__c.5130>:
     809:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 20 76     d:.set default v
     819:	61 6c 75 65 73 0a 00                                alues..

00000820 <__c.5128>:
     820:	70 3a 09 70 72 69 6e 74 20 70 61 72 61 6d 65 74     p:.print paramet
     830:	65 72 73 0a 00                                      ers..

00000835 <__c.5126>:
     835:	36 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 77 68 65     6:.select mk_whe
     845:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 00     el_time_to_max..

00000855 <__c.5124>:
     855:	35 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 77 68 65     5:.select mk_whe
     865:	65 6c 5f 6d 61 78 5f 73 70 65 65 64 0a 00           el_max_speed..

00000873 <__c.5122>:
     873:	34 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 74 69 6d     4:.select mk_tim
     883:	65 5f 74 6f 5f 6d 61 78 0a 00                       e_to_max..

0000088d <__c.5120>:
     88d:	33 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 6d 61 78     3:.select mk_max
     89d:	5f 73 70 65 65 64 0a 00                             _speed..

000008a5 <__c.5118>:
     8a5:	32 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 69 6e 74     2:.select mk_int
     8b5:	65 72 76 61 6c 28 6d 73 29 0a 00                    erval(ms)..

000008c0 <__c.5116>:
     8c0:	31 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 64 65 6c     1:.select mk_del
     8d0:	61 79 28 2a 31 30 6d 73 29 0a 00                    ay(*10ms)..

000008db <__c.5114>:
     8db:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

000008e8 <__c.5112>:
     8e8:	0a 0a 2d 2d 2d 2d 2d 20 4d 6f 75 73 65 6b 65 79     ..----- Mousekey
     8f8:	20 50 61 72 61 6d 65 74 65 72 73 20 48 65 6c 70      Parameters Help
     908:	20 2d 2d 2d 2d 2d 0a 00                              -----..

00000910 <__c.4969>:
     910:	3f 00                                               ?.

00000912 <__c.4966>:
     912:	4d 30 3e 00                                         M0>.

00000916 <__c.4964>:
     916:	0a 45 6e 74 65 72 20 4d 6f 75 73 65 6b 65 79 20     .Enter Mousekey 
     926:	43 6f 6e 73 6f 6c 65 0a 00                          Console..

0000092f <__c.4961>:
     92f:	0a 51 75 69 74 20 43 6f 6e 73 6f 6c 65 20 4d 6f     .Quit Console Mo
     93f:	64 65 0a 00                                         de..

00000943 <__c.4971>:
     943:	43 3e 20 00                                         C> .

00000947 <__c.5223>:
     947:	0a 00                                               ..

00000949 <__c.5221>:
     949:	25 75 00                                            %u.

0000094c <__c.5219>:
     94c:	20 74 6f 20 00                                       to .

00000951 <__c.5217>:
     951:	25 75 00                                            %u.

00000954 <__c.5215>:
     954:	73 77 69 74 63 68 5f 64 65 66 61 75 6c 74 5f 6c     switch_default_l
     964:	61 79 65 72 3a 20 00                                ayer: .

0000096b <__c.4951>:
     96b:	6d 3a 09 6d 6f 75 73 65 6b 65 79 0a 00              m:.mousekey..

00000978 <__c.4949>:
     978:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

00000985 <__c.4947>:
     985:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6e 73 6f 6c 65 20     ..----- Console 
     995:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

000009a1 <__c.4763>:
     9a1:	50 61 75 73 3a 09 6a 75 6d 70 20 74 6f 20 62 6f     Paus:.jump to bo
     9b1:	6f 74 6c 6f 61 64 65 72 0a 00                       otloader..

000009bb <__c.4761>:
     9bb:	43 61 70 73 3a 09 4c 6f 63 6b 20 4b 65 79 62 6f     Caps:.Lock Keybo
     9cb:	61 72 64 28 43 68 69 6c 64 20 50 72 6f 6f 66 29     ard(Child Proof)
     9db:	0a 00                                               ..

000009dd <__c.4759>:
     9dd:	50 53 63 72 3a 09 70 6f 77 65 72 20 64 6f 77 6e     PScr:.power down
     9ed:	2f 72 65 6d 6f 74 65 20 77 61 6b 65 2d 75 70 0a     /remote wake-up.
     9fd:	00                                                  .

000009fe <__c.4757>:
     9fe:	34 2f 46 34 3a 09 73 77 69 74 63 68 20 74 6f 20     4/F4:.switch to 
     a0e:	4c 61 79 65 72 34 20 0a 00                          Layer4 ..

00000a17 <__c.4755>:
     a17:	33 2f 46 33 3a 09 73 77 69 74 63 68 20 74 6f 20     3/F3:.switch to 
     a27:	4c 61 79 65 72 33 20 0a 00                          Layer3 ..

00000a30 <__c.4753>:
     a30:	32 2f 46 32 3a 09 73 77 69 74 63 68 20 74 6f 20     2/F2:.switch to 
     a40:	4c 61 79 65 72 32 20 0a 00                          Layer2 ..

00000a49 <__c.4751>:
     a49:	31 2f 46 31 3a 09 73 77 69 74 63 68 20 74 6f 20     1/F1:.switch to 
     a59:	4c 61 79 65 72 31 20 0a 00                          Layer1 ..

00000a62 <__c.4749>:
     a62:	30 2f 46 31 30 3a 09 73 77 69 74 63 68 20 74 6f     0/F10:.switch to
     a72:	20 4c 61 79 65 72 30 20 0a 00                        Layer0 ..

00000a7c <__c.4747>:
     a7c:	6e 3a 09 74 6f 67 67 6c 65 20 4e 4b 52 4f 0a 00     n:.toggle NKRO..

00000a8c <__c.4745>:
     a8c:	65 3a 09 70 72 69 6e 74 20 65 65 70 72 6f 6d 20     e:.print eeprom 
     a9c:	63 6f 6e 66 69 67 0a 00                             config..

00000aa4 <__c.4743>:
     aa4:	73 3a 09 70 72 69 6e 74 20 73 74 61 74 75 73 0a     s:.print status.
     ab4:	00                                                  .

00000ab5 <__c.4741>:
     ab5:	74 3a 09 70 72 69 6e 74 20 74 69 6d 65 72 20 63     t:.print timer c
     ac5:	6f 75 6e 74 0a 00                                   ount..

00000acb <__c.4739>:
     acb:	76 3a 09 70 72 69 6e 74 20 64 65 76 69 63 65 20     v:.print device 
     adb:	76 65 72 73 69 6f 6e 20 26 20 69 6e 66 6f 0a 00     version & info..

00000aeb <__c.4737>:
     aeb:	6d 3a 09 74 6f 67 67 6c 65 20 6d 6f 75 73 65 20     m:.toggle mouse 
     afb:	64 65 62 75 67 0a 00                                debug..

00000b02 <__c.4735>:
     b02:	6b 3a 09 74 6f 67 67 6c 65 20 6b 65 79 62 6f 61     k:.toggle keyboa
     b12:	72 64 20 64 65 62 75 67 0a 00                       rd debug..

00000b1c <__c.4733>:
     b1c:	78 3a 09 74 6f 67 67 6c 65 20 6d 61 74 72 69 78     x:.toggle matrix
     b2c:	20 64 65 62 75 67 0a 00                              debug..

00000b34 <__c.4731>:
     b34:	64 3a 09 74 6f 67 67 6c 65 20 64 65 62 75 67 20     d:.toggle debug 
     b44:	65 6e 61 62 6c 65 0a 00                             enable..

00000b4c <__c.4729>:
     b4c:	63 3a 09 65 6e 74 65 72 20 63 6f 6e 73 6f 6c 65     c:.enter console
     b5c:	20 6d 6f 64 65 0a 00                                 mode..

00000b63 <__c.4727>:
     b63:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6d 6d 61 6e 64 20     ..----- Command 
     b73:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

00000b7f <__c.4858>:
     b7f:	0a 00                                               ..

00000b81 <__c.4856>:
     b81:	25 75 00                                            %u.

00000b84 <__c.4854>:
     b84:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000b8c <__c.4852>:
     b8c:	0a 00                                               ..

00000b8e <__c.4850>:
     b8e:	25 75 00                                            %u.

00000b91 <__c.4848>:
     b91:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     ba1:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000bad <__c.4846>:
     bad:	0a 00                                               ..

00000baf <__c.4844>:
     baf:	25 75 00                                            %u.

00000bb2 <__c.4842>:
     bb2:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     bc2:	20 00                                                .

00000bc4 <__c.4840>:
     bc4:	0a 00                                               ..

00000bc6 <__c.4838>:
     bc6:	25 75 00                                            %u.

00000bc9 <__c.4836>:
     bc9:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000bd3 <__c.4834>:
     bd3:	0a 00                                               ..

00000bd5 <__c.4832>:
     bd5:	25 75 00                                            %u.

00000bd8 <__c.4830>:
     bd8:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     be8:	20 00                                                .

00000bea <__c.4828>:
     bea:	0a 00                                               ..

00000bec <__c.4826>:
     bec:	25 75 00                                            %u.

00000bef <__c.4824>:
     bef:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     bff:	20 00                                                .

00000c01 <__c.4822>:
     c01:	0a 00                                               ..

00000c03 <__c.4820>:
     c03:	25 75 00                                            %u.

00000c06 <__c.4818>:
     c06:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     c16:	74 72 6f 6c 3a 20 00                                trol: .

00000c1d <__c.4816>:
     c1d:	0a 00                                               ..

00000c1f <__c.4814>:
     c1f:	25 75 00                                            %u.

00000c22 <__c.4812>:
     c22:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     c32:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000c3b <__c.4810>:
     c3b:	0a 00                                               ..

00000c3d <__c.4808>:
     c3d:	25 30 32 58 00                                      %02X.

00000c42 <__c.4806>:
     c42:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     c52:	77 3a 20 00                                         w: .

00000c56 <__c.4803>:
     c56:	0a 00                                               ..

00000c58 <__c.4801>:
     c58:	25 75 00                                            %u.

00000c5b <__c.4799>:
     c5b:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000c64 <__c.4797>:
     c64:	0a 00                                               ..

00000c66 <__c.4795>:
     c66:	25 75 00                                            %u.

00000c69 <__c.4793>:
     c69:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000c75 <__c.4791>:
     c75:	0a 00                                               ..

00000c77 <__c.4789>:
     c77:	25 75 00                                            %u.

00000c7a <__c.4787>:
     c7a:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000c84 <__c.4785>:
     c84:	0a 00                                               ..

00000c86 <__c.4783>:
     c86:	25 75 00                                            %u.

00000c89 <__c.4781>:
     c89:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000c93 <__c.4779>:
     c93:	0a 00                                               ..

00000c95 <__c.4777>:
     c95:	25 30 32 58 00                                      %02X.

00000c9a <__c.4775>:
     c9a:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     caa:	3a 20 00                                            : .

00000cad <__c.4772>:
     cad:	0a 00                                               ..

00000caf <__c.4770>:
     caf:	25 75 00                                            %u.

00000cb2 <__c.4768>:
     cb2:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000cc2 <__c.4942>:
     cc2:	3f 00                                               ?.

00000cc4 <__c.4933>:
     cc4:	4e 4b 52 4f 3a 20 64 69 73 61 62 6c 65 64 0a 00     NKRO: disabled..

00000cd4 <__c.4931>:
     cd4:	4e 4b 52 4f 3a 20 65 6e 61 62 6c 65 64 0a 00        NKRO: enabled..

00000ce3 <__c.4928>:
     ce3:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     cf3:	58 0a 00                                            X..

00000cf6 <__c.4926>:
     cf6:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     d06:	6c 3a 20 25 58 0a 00                                l: %X..

00000d0d <__c.4924>:
     d0d:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     d1d:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000d27 <__c.4922>:
     d27:	0a 0a 2d 2d 2d 2d 2d 20 53 74 61 74 75 73 20 2d     ..----- Status -
     d37:	2d 2d 2d 2d 0a 00                                   ----..

00000d3d <__c.4919>:
     d3d:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     d4d:	6c 58 0a 00                                         lX..

00000d51 <__c.4916>:
     d51:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     d61:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     d71:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000d7f <__c.4914>:
     d7f:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     d8f:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     d9f:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     daf:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     dbf:	30 39 36 0a 00                                      096..

00000dc4 <__c.4912>:
     dc4:	42 55 49 4c 44 3a 20 31 35 39 62 39 34 31 2d 64     BUILD: 159b941-d
     dd4:	69 72 74 79 20 28 32 33 3a 30 38 3a 31 37 20 4a     irty (23:08:17 J
     de4:	75 6c 20 32 39 20 32 30 31 35 29 0a 00              ul 29 2015)..

00000df1 <__c.4910>:
     df1:	56 49 44 3a 20 30 78 46 45 45 44 28 6a 75 6c 69     VID: 0xFEED(juli
     e01:	61 6e 29 20 50 49 44 3a 20 30 78 36 30 36 30 28     an) PID: 0x6060(
     e11:	6a 75 6c 69 61 6e 29 20 56 45 52 3a 20 30 78 30     julian) VER: 0x0
     e21:	30 30 31 0a 00                                      001..

00000e26 <__c.4908>:
     e26:	44 45 53 43 3a 20 66 69 72 6d 77 61 72 65 20 66     DESC: firmware f
     e36:	6f 72 20 74 68 65 20 74 65 65 6e 73 79 0a 00        or the teensy..

00000e45 <__c.4906>:
     e45:	0a 0a 2d 2d 2d 2d 2d 20 56 65 72 73 69 6f 6e 20     ..----- Version 
     e55:	2d 2d 2d 2d 2d 0a 00                                -----..

00000e5c <__c.4903>:
     e5c:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 64 69     .DEBUG: mouse di
     e6c:	73 61 62 6c 65 64 2e 0a 00                          sabled...

00000e75 <__c.4901>:
     e75:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 65 6e     .DEBUG: mouse en
     e85:	61 62 6c 65 64 2e 0a 00                             abled...

00000e8d <__c.4898>:
     e8d:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     e9d:	20 64 69 73 61 62 6c 65 64 2e 0a 00                  disabled...

00000ea9 <__c.4896>:
     ea9:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     eb9:	20 65 6e 61 62 6c 65 64 2e 0a 00                     enabled...

00000ec4 <__c.4893>:
     ec4:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 64     .DEBUG: matrix d
     ed4:	69 73 61 62 6c 65 64 2e 0a 00                       isabled...

00000ede <__c.4891>:
     ede:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 65     .DEBUG: matrix e
     eee:	6e 61 62 6c 65 64 2e 0a 00                          nabled...

00000ef7 <__c.4888>:
     ef7:	0a 44 45 42 55 47 3a 20 65 6e 61 62 6c 65 64 2e     .DEBUG: enabled.
     f07:	0a 00                                               ..

00000f09 <__c.4886>:
     f09:	0a 44 45 42 55 47 3a 20 64 69 73 61 62 6c 65 64     .DEBUG: disabled
     f19:	2e 0a 00                                            ...

00000f1c <__c.4883>:
     f1c:	6e 6f 74 20 73 75 70 70 6f 72 74 65 64 2e 0a 00     not supported...

00000f2c <__c.4881>:
     f2c:	0a 0a 4a 75 6d 70 20 74 6f 20 62 6f 6f 74 6c 6f     ..Jump to bootlo
     f3c:	61 64 65 72 2e 2e 2e 20 00                          ader... .

00000f45 <__c.4878>:
     f45:	43 3e 20 00                                         C> .

00000f49 <__c.4876>:
     f49:	0a 45 6e 74 65 72 20 43 6f 6e 73 6f 6c 65 20 4d     .Enter Console M
     f59:	6f 64 65 0a 00                                      ode..

00000f5e <__c.4871>:
     f5e:	55 6e 6c 6f 63 6b 65 64 2e 0a 00                    Unlocked...

00000f69 <__c.4869>:
     f69:	4c 6f 63 6b 65 64 2e 0a 00                          Locked...

00000f72 <__c.4865>:
     f72:	65 65 63 6f 6e 66 69 67 3a 0a 00 00                 eeconfig:...

00000f7e <__ctors_end>:
     f7e:	11 24       	eor	r1, r1
     f80:	1f be       	out	0x3f, r1	; 63
     f82:	cf ef       	ldi	r28, 0xFF	; 255
     f84:	da e0       	ldi	r29, 0x0A	; 10
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	cd bf       	out	0x3d, r28	; 61

00000f8a <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     f8a:	04 b6       	in	r0, 0x34	; 52
     f8c:	03 fe       	sbrs	r0, 3
     f8e:	24 c0       	rjmp	.+72     	; 0xfd8 <__do_copy_data>
     f90:	80 91 e6 01 	lds	r24, 0x01E6
     f94:	90 91 e7 01 	lds	r25, 0x01E7
     f98:	a0 91 e8 01 	lds	r26, 0x01E8
     f9c:	b0 91 e9 01 	lds	r27, 0x01E9
     fa0:	87 30       	cpi	r24, 0x07	; 7
     fa2:	90 4b       	sbci	r25, 0xB0	; 176
     fa4:	a7 40       	sbci	r26, 0x07	; 7
     fa6:	b0 4b       	sbci	r27, 0xB0	; 176
     fa8:	b9 f4       	brne	.+46     	; 0xfd8 <__do_copy_data>
        reset_key = 0;
     faa:	10 92 e6 01 	sts	0x01E6, r1
     fae:	10 92 e7 01 	sts	0x01E7, r1
     fb2:	10 92 e8 01 	sts	0x01E8, r1
     fb6:	10 92 e9 01 	sts	0x01E9, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     fba:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     fbc:	84 b7       	in	r24, 0x34	; 52
     fbe:	87 7f       	andi	r24, 0xF7	; 247
     fc0:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     fc2:	88 e1       	ldi	r24, 0x18	; 24
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	80 93 60 00 	sts	0x0060, r24
     fcc:	10 92 60 00 	sts	0x0060, r1
     fd0:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     fd2:	e0 e0       	ldi	r30, 0x00	; 0
     fd4:	f8 e3       	ldi	r31, 0x38	; 56
     fd6:	09 95       	icall

00000fd8 <__do_copy_data>:
     fd8:	11 e0       	ldi	r17, 0x01	; 1
     fda:	a0 e0       	ldi	r26, 0x00	; 0
     fdc:	b1 e0       	ldi	r27, 0x01	; 1
     fde:	e8 e4       	ldi	r30, 0x48	; 72
     fe0:	fa e5       	ldi	r31, 0x5A	; 90
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <__do_copy_data+0x10>
     fe4:	05 90       	lpm	r0, Z+
     fe6:	0d 92       	st	X+, r0
     fe8:	a8 33       	cpi	r26, 0x38	; 56
     fea:	b1 07       	cpc	r27, r17
     fec:	d9 f7       	brne	.-10     	; 0xfe4 <__do_copy_data+0xc>

00000fee <__do_clear_bss>:
     fee:	21 e0       	ldi	r18, 0x01	; 1
     ff0:	a8 e3       	ldi	r26, 0x38	; 56
     ff2:	b1 e0       	ldi	r27, 0x01	; 1
     ff4:	01 c0       	rjmp	.+2      	; 0xff8 <.do_clear_bss_start>

00000ff6 <.do_clear_bss_loop>:
     ff6:	1d 92       	st	X+, r1

00000ff8 <.do_clear_bss_start>:
     ff8:	a6 3e       	cpi	r26, 0xE6	; 230
     ffa:	b2 07       	cpc	r27, r18
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <.do_clear_bss_loop>
     ffe:	0e 94 bc 0c 	call	0x1978	; 0x1978 <main>
    1002:	0c 94 22 2d 	jmp	0x5a44	; 0x5a44 <_exit>

00001006 <__bad_interrupt>:
    1006:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000100a <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
    100a:	ff 93       	push	r31
	push	ZL
    100c:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    100e:	e0 91 c5 01 	lds	r30, 0x01C5
	lds	ZH, xfunc_out+1	;/
    1012:	f0 91 c6 01 	lds	r31, 0x01C6
	sbiw	ZL, 0		;Skip if null
    1016:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
    1018:	09 f0       	breq	.+2      	; 0x101c <xputc+0x12>
	icall
    101a:	09 95       	icall
2:	pop	ZL
    101c:	ef 91       	pop	r30
	pop	ZH
    101e:	ff 91       	pop	r31
	ret
    1020:	08 95       	ret

00001022 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    1022:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    1024:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    1026:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    1028:	11 f0       	breq	.+4      	; 0x102e <xputs+0xc>
	rcall	xputc
    102a:	ef df       	rcall	.-34     	; 0x100a <xputc>
	rjmp	1b
    102c:	fb cf       	rjmp	.-10     	; 0x1024 <xputs+0x2>
2:	ret
    102e:	08 95       	ret

00001030 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    1030:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    1032:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    1034:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    1036:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    1038:	0c c0       	rjmp	.+24     	; 0x1052 <xitoa+0x22>
	neg	r20		;
    103a:	41 95       	neg	r20
	sbrs	r25, 7		;
    103c:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    103e:	09 c0       	rjmp	.+18     	; 0x1052 <xitoa+0x22>
	ldi	r30, '-'	;
    1040:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    1042:	60 95       	com	r22
	com	r23		;
    1044:	70 95       	com	r23
	com	r24		;
    1046:	80 95       	com	r24
	com	r25		;
    1048:	90 95       	com	r25
	adc	r22, r1		;
    104a:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    104c:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    104e:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    1050:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    1052:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    1054:	02 c0       	rjmp	.+4      	; 0x105a <xitoa+0x2a>
	neg	r18		;
    1056:	21 95       	neg	r18
	ldi	r19, '0'	;/
    1058:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    105a:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    105c:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    105e:	66 0f       	add	r22, r22
	rol	r23		;
    1060:	77 1f       	adc	r23, r23
	rol	r24		;
    1062:	88 1f       	adc	r24, r24
	rol	r25		;
    1064:	99 1f       	adc	r25, r25
	rol	r26		;
    1066:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    1068:	a4 17       	cp	r26, r20
	brcs	3f		;
    106a:	10 f0       	brcs	.+4      	; 0x1070 <xitoa+0x40>
	sub	r26, r20	;
    106c:	a4 1b       	sub	r26, r20
	inc	r22		;
    106e:	63 95       	inc	r22
3:	dec	r21		;
    1070:	5a 95       	dec	r21
	brne	2b		;/
    1072:	a9 f7       	brne	.-22     	; 0x105e <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    1074:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    1076:	08 f0       	brcs	.+2      	; 0x107a <xitoa+0x4a>
	subi	r26, -7		;
    1078:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    107a:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    107c:	af 93       	push	r26
	inc	r31		;/
    107e:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    1080:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    1082:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    1084:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    1086:	91 05       	cpc	r25, r1
	brne	1b		;/
    1088:	41 f7       	brne	.-48     	; 0x105a <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    108a:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    108c:	11 f4       	brne	.+4      	; 0x1092 <xitoa+0x62>
	push	r30		;
    108e:	ef 93       	push	r30
	inc	r31		;/
    1090:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    1092:	f2 17       	cp	r31, r18
	brcc	6f		;
    1094:	18 f4       	brcc	.+6      	; 0x109c <xitoa+0x6c>
	push	r19		;
    1096:	3f 93       	push	r19
	inc	r31		;
    1098:	f3 95       	inc	r31
	rjmp	5b		;/
    109a:	fb cf       	rjmp	.-10     	; 0x1092 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    109c:	8f 91       	pop	r24
	rcall	xputc		;
    109e:	b5 df       	rcall	.-150    	; 0x100a <xputc>
	dec	r31		;
    10a0:	fa 95       	dec	r31
	brne	6b		;/
    10a2:	e1 f7       	brne	.-8      	; 0x109c <xitoa+0x6c>

	ret
    10a4:	08 95       	ret

000010a6 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
    10a6:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    10a8:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    10aa:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    10ac:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    10ae:	21 f0       	breq	.+8      	; 0x10b8 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
    10b0:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    10b2:	19 f0       	breq	.+6      	; 0x10ba <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
    10b4:	aa df       	rcall	.-172    	; 0x100a <xputc>
	rjmp	0b		;/
    10b6:	f9 cf       	rjmp	.-14     	; 0x10aa <xvprintf+0x4>
90:	ret
    10b8:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    10ba:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    10bc:	e8 94       	clt
	_LPMI	r21		;Get flags
    10be:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    10c0:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    10c2:	c1 f3       	breq	.-16     	; 0x10b4 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
    10c4:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    10c6:	11 f4       	brne	.+4      	; 0x10cc <xvprintf+0x26>
	set			;/
    10c8:	68 94       	set
22:	_LPMI	r21		;Get width
    10ca:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    10cc:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    10ce:	48 f4       	brcc	.+18     	; 0x10e2 <xvprintf+0x3c>
	subi	r21, '0'	;
    10d0:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    10d2:	90 f3       	brcs	.-28     	; 0x10b8 <xvprintf+0x12>
	lsl	r18		;
    10d4:	22 0f       	add	r18, r18
	mov	r0, r18		;
    10d6:	02 2e       	mov	r0, r18
	lsl	r18		;
    10d8:	22 0f       	add	r18, r18
	lsl	r18		;
    10da:	22 0f       	add	r18, r18
	add	r18, r0		;
    10dc:	20 0d       	add	r18, r0
	add	r18, r21	;
    10de:	25 0f       	add	r18, r21
	rjmp	22b		;/
    10e0:	f4 cf       	rjmp	.-24     	; 0x10ca <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
    10e2:	0e f4       	brtc	.+2      	; 0x10e6 <xvprintf+0x40>
	neg	r18		;
    10e4:	21 95       	neg	r18
25:	ld	r24, Y+		;
    10e6:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    10e8:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    10ea:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    10ec:	19 f3       	breq	.-58     	; 0x10b4 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
    10ee:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    10f0:	29 f1       	breq	.+74     	; 0x113c <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
    10f2:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    10f4:	59 f1       	breq	.+86     	; 0x114c <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    10f6:	bc 01       	movw	r22, r24
	clr	r24		;
    10f8:	88 27       	eor	r24, r24
	clr	r25		;
    10fa:	99 27       	eor	r25, r25
	clt			;/
    10fc:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    10fe:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    1100:	21 f4       	brne	.+8      	; 0x110a <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
    1102:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    1104:	99 91       	ld	r25, Y+
	set			;
    1106:	68 94       	set
	_LPMI	r21		;/
    1108:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    110a:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    110c:	39 f4       	brne	.+14     	; 0x111c <xvprintf+0x76>
	ldi	r20, -10	;
    110e:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    1110:	7e f0       	brts	.+30     	; 0x1130 <xvprintf+0x8a>
	sbrs	r23, 7		;
    1112:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    1114:	0d c0       	rjmp	.+26     	; 0x1130 <xvprintf+0x8a>
	ldi	r24, -1		;
    1116:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    1118:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    111a:	0a c0       	rjmp	.+20     	; 0x1130 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    111c:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    111e:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    1120:	39 f0       	breq	.+14     	; 0x1130 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
    1122:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    1124:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    1126:	21 f0       	breq	.+8      	; 0x1130 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
    1128:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    112a:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    112c:	09 f0       	breq	.+2      	; 0x1130 <xvprintf+0x8a>
	ret			;abort
    112e:	08 95       	ret
40:	push	ZH		;Output the value
    1130:	ff 93       	push	r31
	push	ZL		;
    1132:	ef 93       	push	r30
	rcall	xitoa		;
    1134:	7d df       	rcall	.-262    	; 0x1030 <xitoa>
42:	pop	ZL		;
    1136:	ef 91       	pop	r30
	pop	ZH		;
    1138:	ff 91       	pop	r31
	rjmp	0b		;/
    113a:	b7 cf       	rjmp	.-146    	; 0x10aa <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
    113c:	ff 93       	push	r31
	push	ZL
    113e:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    1140:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    1142:	81 91       	ld	r24, Z+
	cpi	r24, 0
    1144:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    1146:	b9 f3       	breq	.-18     	; 0x1136 <xvprintf+0x90>
	rcall	xputc
    1148:	60 df       	rcall	.-320    	; 0x100a <xputc>
	rjmp	51b
    114a:	fb cf       	rjmp	.-10     	; 0x1142 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
    114c:	ff 93       	push	r31
	push	ZL
    114e:	ef 93       	push	r30
	rcall	xputs
    1150:	68 df       	rcall	.-304    	; 0x1022 <xputs>
	rjmp	42b
    1152:	f1 cf       	rjmp	.-30     	; 0x1136 <xvprintf+0x90>

00001154 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
    1154:	df 93       	push	r29
	push	YL
    1156:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    1158:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    115a:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
    115c:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
    115e:	a3 df       	rcall	.-186    	; 0x10a6 <xvprintf>
	pop	YL
    1160:	cf 91       	pop	r28
	pop	YH
    1162:	df 91       	pop	r29
	ret
    1164:	08 95       	ret

00001166 <matrix_power_up>:

void keyboard_init(void);
void keyboard_task(void);
void keyboard_set_leds(uint8_t leds);

__attribute__ ((weak)) void matrix_power_up(void) {}
    1166:	08 95       	ret

00001168 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    1168:	08 95       	ret

0000116a <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    116a:	9f e0       	ldi	r25, 0x0F	; 15
    116c:	79 9f       	mul	r23, r25
    116e:	f0 01       	movw	r30, r0
    1170:	11 24       	eor	r1, r1
    1172:	9b e4       	ldi	r25, 0x4B	; 75
    1174:	89 9f       	mul	r24, r25
    1176:	e0 0d       	add	r30, r0
    1178:	f1 1d       	adc	r31, r1
    117a:	11 24       	eor	r1, r1
    117c:	e6 0f       	add	r30, r22
    117e:	f1 1d       	adc	r31, r1
    1180:	e8 59       	subi	r30, 0x98	; 152
    1182:	fe 4f       	sbci	r31, 0xFE	; 254
    1184:	84 91       	lpm	r24, Z
}
    1186:	08 95       	ret

00001188 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
    1188:	e8 2f       	mov	r30, r24
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	ee 0f       	add	r30, r30
    118e:	ff 1f       	adc	r31, r31
    1190:	ea 51       	subi	r30, 0x1A	; 26
    1192:	f0 40       	sbci	r31, 0x00	; 0
}
    1194:	85 91       	lpm	r24, Z+
    1196:	94 91       	lpm	r25, Z
    1198:	08 95       	ret

0000119a <unselect_rows>:
 * pin: B0 B1 B2 B30
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRC  &= ~0b01000000;
    119a:	3e 98       	cbi	0x07, 6	; 7
    PORTC &= ~0b01000000;
    119c:	46 98       	cbi	0x08, 6	; 8
    DDRD  &= ~0b00001111;
    119e:	8a b1       	in	r24, 0x0a	; 10
    11a0:	80 7f       	andi	r24, 0xF0	; 240
    11a2:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b00001111;
    11a4:	8b b1       	in	r24, 0x0b	; 11
    11a6:	80 7f       	andi	r24, 0xF0	; 240
    11a8:	8b b9       	out	0x0b, r24	; 11
    11aa:	08 95       	ret

000011ac <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
    11ac:	0e 94 cd 08 	call	0x119a	; 0x119a <unselect_rows>

static void init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    // 'F' port columns enabled
    DDRF  &= ~(1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
    11b0:	80 b3       	in	r24, 0x10	; 16
    11b2:	8c 70       	andi	r24, 0x0C	; 12
    11b4:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<1 | 1<<0);
    11b6:	81 b3       	in	r24, 0x11	; 17
    11b8:	83 6f       	ori	r24, 0xF3	; 243
    11ba:	81 bb       	out	0x11, r24	; 17
    // 'B' port columns enabled
    DDRB  &= ~(1<<0 | 1<<1 | 1<<2 | 1<<3 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
    11bc:	84 b1       	in	r24, 0x04	; 4
    11be:	14 b8       	out	0x04, r1	; 4
    PORTB |=  (1<<0 | 1<<1 | 1<<2 | 1<<3 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
    11c0:	85 b1       	in	r24, 0x05	; 5
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	85 b9       	out	0x05, r24	; 5
    // 'D' ports columns enabled
    DDRD  &= ~(1<<7);
    11c6:	57 98       	cbi	0x0a, 7	; 10
    PORTD |=  (1<<7);
    11c8:	5f 9a       	sbi	0x0b, 7	; 11
    11ca:	e2 e4       	ldi	r30, 0x42	; 66
    11cc:	f1 e0       	ldi	r31, 0x01	; 1
    11ce:	a8 e3       	ldi	r26, 0x38	; 56
    11d0:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    11d2:	11 92       	st	Z+, r1
    11d4:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
    11d6:	1d 92       	st	X+, r1
    11d8:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	ec 34       	cpi	r30, 0x4C	; 76
    11de:	f8 07       	cpc	r31, r24
    11e0:	c1 f7       	brne	.-16     	; 0x11d2 <matrix_init+0x26>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
    11e2:	08 95       	ret

000011e4 <matrix_scan>:

uint8_t matrix_scan(void)
{
    11e4:	ef 92       	push	r14
    11e6:	ff 92       	push	r15
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	c8 e3       	ldi	r28, 0x38	; 56
    11f0:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    11f2:	10 e0       	ldi	r17, 0x00	; 0
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    11f4:	ec ed       	ldi	r30, 0xDC	; 220
    11f6:	ee 2e       	mov	r14, r30
    11f8:	e1 e0       	ldi	r30, 0x01	; 1
    11fa:	fe 2e       	mov	r15, r30
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
       switch (row) {
    11fc:	12 30       	cpi	r17, 0x02	; 2
    11fe:	71 f0       	breq	.+28     	; 0x121c <matrix_scan+0x38>
    1200:	18 f4       	brcc	.+6      	; 0x1208 <matrix_scan+0x24>
    1202:	11 30       	cpi	r17, 0x01	; 1
    1204:	41 f0       	breq	.+16     	; 0x1216 <matrix_scan+0x32>
    1206:	04 c0       	rjmp	.+8      	; 0x1210 <matrix_scan+0x2c>
    1208:	13 30       	cpi	r17, 0x03	; 3
    120a:	59 f0       	breq	.+22     	; 0x1222 <matrix_scan+0x3e>
    120c:	14 30       	cpi	r17, 0x04	; 4
    120e:	61 f0       	breq	.+24     	; 0x1228 <matrix_scan+0x44>
           case 0:
               DDRD  |= (1<<0);
    1210:	50 9a       	sbi	0x0a, 0	; 10
               PORTD &= ~(1<<0);
    1212:	58 98       	cbi	0x0b, 0	; 11
    1214:	0b c0       	rjmp	.+22     	; 0x122c <matrix_scan+0x48>
               break;
           case 1:
               DDRD  |= (1<<1);
    1216:	51 9a       	sbi	0x0a, 1	; 10
               PORTD &= ~(1<<1);
    1218:	59 98       	cbi	0x0b, 1	; 11
    121a:	08 c0       	rjmp	.+16     	; 0x122c <matrix_scan+0x48>
               break;
           case 2:
               DDRD  |= (1<<2);
    121c:	52 9a       	sbi	0x0a, 2	; 10
               PORTD &= ~(1<<2);
    121e:	5a 98       	cbi	0x0b, 2	; 11
    1220:	05 c0       	rjmp	.+10     	; 0x122c <matrix_scan+0x48>
               break;
           case 3:
               DDRD  |= (1<<3);
    1222:	53 9a       	sbi	0x0a, 3	; 10
               PORTD &= ~(1<<3);
    1224:	5b 98       	cbi	0x0b, 3	; 11
    1226:	02 c0       	rjmp	.+4      	; 0x122c <matrix_scan+0x48>
               break;
           case 4:
               DDRC  |= (1<<6);
    1228:	3e 9a       	sbi	0x07, 6	; 7
               PORTC &= ~(1<<6);
    122a:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    122c:	80 ea       	ldi	r24, 0xA0	; 160
    122e:	8a 95       	dec	r24
    1230:	f1 f7       	brne	.-4      	; 0x122e <matrix_scan+0x4a>
}

static matrix_row_t read_cols(void)
{
    return 
           (PINB&(1<<7) ? 0 : (1<<0))  |
    1232:	23 b1       	in	r18, 0x03	; 3
    1234:	33 27       	eor	r19, r19
    1236:	27 fd       	sbrc	r18, 7
    1238:	30 95       	com	r19
    123a:	20 95       	com	r18
    123c:	30 95       	com	r19
    123e:	83 2f       	mov	r24, r19
    1240:	88 1f       	adc	r24, r24
    1242:	88 27       	eor	r24, r24
    1244:	88 1f       	adc	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
           (PINB&(1<<3) ? 0 : (1<<1))  |
    1248:	1b 9b       	sbis	0x03, 3	; 3
    124a:	03 c0       	rjmp	.+6      	; 0x1252 <matrix_scan+0x6e>
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <matrix_scan+0x72>
    1252:	62 e0       	ldi	r22, 0x02	; 2
    1254:	70 e0       	ldi	r23, 0x00	; 0
}

static matrix_row_t read_cols(void)
{
    return 
           (PINB&(1<<7) ? 0 : (1<<0))  |
    1256:	86 2b       	or	r24, r22
    1258:	97 2b       	or	r25, r23
           (PINB&(1<<3) ? 0 : (1<<1))  |
           (PINB&(1<<2) ? 0 : (1<<2))  |
    125a:	1a 9b       	sbis	0x03, 2	; 3
    125c:	03 c0       	rjmp	.+6      	; 0x1264 <matrix_scan+0x80>
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <matrix_scan+0x84>
    1264:	64 e0       	ldi	r22, 0x04	; 4
    1266:	70 e0       	ldi	r23, 0x00	; 0

static matrix_row_t read_cols(void)
{
    return 
           (PINB&(1<<7) ? 0 : (1<<0))  |
           (PINB&(1<<3) ? 0 : (1<<1))  |
    1268:	68 2b       	or	r22, r24
    126a:	79 2b       	or	r23, r25
           (PINB&(1<<2) ? 0 : (1<<2))  |
           (PINB&(1<<1) ? 0 : (1<<3))  |
    126c:	19 9b       	sbis	0x03, 1	; 3
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <matrix_scan+0x92>
    1270:	40 e0       	ldi	r20, 0x00	; 0
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	02 c0       	rjmp	.+4      	; 0x127a <matrix_scan+0x96>
    1276:	48 e0       	ldi	r20, 0x08	; 8
    1278:	50 e0       	ldi	r21, 0x00	; 0
static matrix_row_t read_cols(void)
{
    return 
           (PINB&(1<<7) ? 0 : (1<<0))  |
           (PINB&(1<<3) ? 0 : (1<<1))  |
           (PINB&(1<<2) ? 0 : (1<<2))  |
    127a:	9b 01       	movw	r18, r22
    127c:	24 2b       	or	r18, r20
    127e:	35 2b       	or	r19, r21
           (PINB&(1<<1) ? 0 : (1<<3))  |
           (PINB&(1<<0) ? 0 : (1<<4))  |
    1280:	18 9b       	sbis	0x03, 0	; 3
    1282:	03 c0       	rjmp	.+6      	; 0x128a <matrix_scan+0xa6>
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	02 c0       	rjmp	.+4      	; 0x128e <matrix_scan+0xaa>
    128a:	40 e1       	ldi	r20, 0x10	; 16
    128c:	50 e0       	ldi	r21, 0x00	; 0
{
    return 
           (PINB&(1<<7) ? 0 : (1<<0))  |
           (PINB&(1<<3) ? 0 : (1<<1))  |
           (PINB&(1<<2) ? 0 : (1<<2))  |
           (PINB&(1<<1) ? 0 : (1<<3))  |
    128e:	24 2b       	or	r18, r20
    1290:	35 2b       	or	r19, r21
           (PINB&(1<<0) ? 0 : (1<<4))  |
           (PIND&(1<<7) ? 0 : (1<<5))  |
    1292:	89 b1       	in	r24, 0x09	; 9
    1294:	99 27       	eor	r25, r25
    1296:	87 fd       	sbrc	r24, 7
    1298:	90 95       	com	r25
    129a:	80 95       	com	r24
    129c:	90 95       	com	r25
    129e:	88 27       	eor	r24, r24
    12a0:	99 0f       	add	r25, r25
    12a2:	88 1f       	adc	r24, r24
    12a4:	99 27       	eor	r25, r25
    12a6:	75 e0       	ldi	r23, 0x05	; 5
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	7a 95       	dec	r23
    12ae:	e1 f7       	brne	.-8      	; 0x12a8 <matrix_scan+0xc4>
    return 
           (PINB&(1<<7) ? 0 : (1<<0))  |
           (PINB&(1<<3) ? 0 : (1<<1))  |
           (PINB&(1<<2) ? 0 : (1<<2))  |
           (PINB&(1<<1) ? 0 : (1<<3))  |
           (PINB&(1<<0) ? 0 : (1<<4))  |
    12b0:	28 2b       	or	r18, r24
    12b2:	39 2b       	or	r19, r25
           (PIND&(1<<7) ? 0 : (1<<5))  |
           (PINB&(1<<4) ? 0 : (1<<6))  |
    12b4:	1c 9b       	sbis	0x03, 4	; 3
    12b6:	03 c0       	rjmp	.+6      	; 0x12be <matrix_scan+0xda>
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <matrix_scan+0xde>
    12be:	80 e4       	ldi	r24, 0x40	; 64
    12c0:	90 e0       	ldi	r25, 0x00	; 0
           (PINB&(1<<7) ? 0 : (1<<0))  |
           (PINB&(1<<3) ? 0 : (1<<1))  |
           (PINB&(1<<2) ? 0 : (1<<2))  |
           (PINB&(1<<1) ? 0 : (1<<3))  |
           (PINB&(1<<0) ? 0 : (1<<4))  |
           (PIND&(1<<7) ? 0 : (1<<5))  |
    12c2:	28 2b       	or	r18, r24
    12c4:	39 2b       	or	r19, r25
           (PINB&(1<<4) ? 0 : (1<<6))  |
           (PINB&(1<<5) ? 0 : (1<<7))  |
    12c6:	1d 9b       	sbis	0x03, 5	; 3
    12c8:	03 c0       	rjmp	.+6      	; 0x12d0 <matrix_scan+0xec>
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <matrix_scan+0xf0>
    12d0:	80 e8       	ldi	r24, 0x80	; 128
    12d2:	90 e0       	ldi	r25, 0x00	; 0
           (PINB&(1<<3) ? 0 : (1<<1))  |
           (PINB&(1<<2) ? 0 : (1<<2))  |
           (PINB&(1<<1) ? 0 : (1<<3))  |
           (PINB&(1<<0) ? 0 : (1<<4))  |
           (PIND&(1<<7) ? 0 : (1<<5))  |
           (PINB&(1<<4) ? 0 : (1<<6))  |
    12d4:	28 2b       	or	r18, r24
    12d6:	39 2b       	or	r19, r25
           (PINB&(1<<5) ? 0 : (1<<7))  |
           (PINB&(1<<6) ? 0 : (1<<8))  |
    12d8:	1e 9b       	sbis	0x03, 6	; 3
    12da:	03 c0       	rjmp	.+6      	; 0x12e2 <matrix_scan+0xfe>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <matrix_scan+0x102>
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	91 e0       	ldi	r25, 0x01	; 1
           (PINB&(1<<2) ? 0 : (1<<2))  |
           (PINB&(1<<1) ? 0 : (1<<3))  |
           (PINB&(1<<0) ? 0 : (1<<4))  |
           (PIND&(1<<7) ? 0 : (1<<5))  |
           (PINB&(1<<4) ? 0 : (1<<6))  |
           (PINB&(1<<5) ? 0 : (1<<7))  |
    12e6:	28 2b       	or	r18, r24
    12e8:	39 2b       	or	r19, r25
           (PINB&(1<<6) ? 0 : (1<<8))  |
           (PINF&(1<<7) ? 0 : (1<<9))  |
    12ea:	8f b1       	in	r24, 0x0f	; 15
    12ec:	99 27       	eor	r25, r25
    12ee:	87 fd       	sbrc	r24, 7
    12f0:	90 95       	com	r25
    12f2:	80 95       	com	r24
    12f4:	90 95       	com	r25
    12f6:	88 27       	eor	r24, r24
    12f8:	99 0f       	add	r25, r25
    12fa:	88 1f       	adc	r24, r24
    12fc:	99 27       	eor	r25, r25
    12fe:	98 2f       	mov	r25, r24
    1300:	88 27       	eor	r24, r24
    1302:	99 0f       	add	r25, r25
           (PINB&(1<<1) ? 0 : (1<<3))  |
           (PINB&(1<<0) ? 0 : (1<<4))  |
           (PIND&(1<<7) ? 0 : (1<<5))  |
           (PINB&(1<<4) ? 0 : (1<<6))  |
           (PINB&(1<<5) ? 0 : (1<<7))  |
           (PINB&(1<<6) ? 0 : (1<<8))  |
    1304:	28 2b       	or	r18, r24
    1306:	39 2b       	or	r19, r25
           (PINF&(1<<7) ? 0 : (1<<9))  |
           (PINF&(1<<6) ? 0 : (1<<10)) |
    1308:	7e 9b       	sbis	0x0f, 6	; 15
    130a:	03 c0       	rjmp	.+6      	; 0x1312 <matrix_scan+0x12e>
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <matrix_scan+0x132>
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	74 e0       	ldi	r23, 0x04	; 4
           (PINB&(1<<0) ? 0 : (1<<4))  |
           (PIND&(1<<7) ? 0 : (1<<5))  |
           (PINB&(1<<4) ? 0 : (1<<6))  |
           (PINB&(1<<5) ? 0 : (1<<7))  |
           (PINB&(1<<6) ? 0 : (1<<8))  |
           (PINF&(1<<7) ? 0 : (1<<9))  |
    1316:	26 2b       	or	r18, r22
    1318:	37 2b       	or	r19, r23
           (PINF&(1<<6) ? 0 : (1<<10)) |
           (PINF&(1<<5) ? 0 : (1<<11)) |
    131a:	7d 9b       	sbis	0x0f, 5	; 15
    131c:	03 c0       	rjmp	.+6      	; 0x1324 <matrix_scan+0x140>
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <matrix_scan+0x144>
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	78 e0       	ldi	r23, 0x08	; 8
           (PIND&(1<<7) ? 0 : (1<<5))  |
           (PINB&(1<<4) ? 0 : (1<<6))  |
           (PINB&(1<<5) ? 0 : (1<<7))  |
           (PINB&(1<<6) ? 0 : (1<<8))  |
           (PINF&(1<<7) ? 0 : (1<<9))  |
           (PINF&(1<<6) ? 0 : (1<<10)) |
    1328:	26 2b       	or	r18, r22
    132a:	37 2b       	or	r19, r23
           (PINF&(1<<5) ? 0 : (1<<11)) |
           (PINF&(1<<4) ? 0 : (1<<12)) |
    132c:	7c 9b       	sbis	0x0f, 4	; 15
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <matrix_scan+0x152>
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	02 c0       	rjmp	.+4      	; 0x133a <matrix_scan+0x156>
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	50 e1       	ldi	r21, 0x10	; 16
           (PINB&(1<<4) ? 0 : (1<<6))  |
           (PINB&(1<<5) ? 0 : (1<<7))  |
           (PINB&(1<<6) ? 0 : (1<<8))  |
           (PINF&(1<<7) ? 0 : (1<<9))  |
           (PINF&(1<<6) ? 0 : (1<<10)) |
           (PINF&(1<<5) ? 0 : (1<<11)) |
    133a:	24 2b       	or	r18, r20
    133c:	35 2b       	or	r19, r21
           (PINF&(1<<4) ? 0 : (1<<12)) |
           (PINF&(1<<1) ? 0 : (1<<13)) |
    133e:	79 9b       	sbis	0x0f, 1	; 15
    1340:	03 c0       	rjmp	.+6      	; 0x1348 <matrix_scan+0x164>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 c0       	rjmp	.+4      	; 0x134c <matrix_scan+0x168>
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e2       	ldi	r25, 0x20	; 32
           (PINB&(1<<5) ? 0 : (1<<7))  |
           (PINB&(1<<6) ? 0 : (1<<8))  |
           (PINF&(1<<7) ? 0 : (1<<9))  |
           (PINF&(1<<6) ? 0 : (1<<10)) |
           (PINF&(1<<5) ? 0 : (1<<11)) |
           (PINF&(1<<4) ? 0 : (1<<12)) |
    134c:	28 2b       	or	r18, r24
    134e:	39 2b       	or	r19, r25
           (PINF&(1<<1) ? 0 : (1<<13)) |
           (PINF&(1<<0) ? 0 : (1<<14))    ;
    1350:	78 9b       	sbis	0x0f, 0	; 15
    1352:	03 c0       	rjmp	.+6      	; 0x135a <matrix_scan+0x176>
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 c0       	rjmp	.+4      	; 0x135e <matrix_scan+0x17a>
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e4       	ldi	r25, 0x40	; 64
           (PINB&(1<<6) ? 0 : (1<<8))  |
           (PINF&(1<<7) ? 0 : (1<<9))  |
           (PINF&(1<<6) ? 0 : (1<<10)) |
           (PINF&(1<<5) ? 0 : (1<<11)) |
           (PINF&(1<<4) ? 0 : (1<<12)) |
           (PINF&(1<<1) ? 0 : (1<<13)) |
    135e:	28 2b       	or	r18, r24
    1360:	39 2b       	or	r19, r25
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    1362:	88 81       	ld	r24, Y
    1364:	99 81       	ldd	r25, Y+1	; 0x01
    1366:	82 17       	cp	r24, r18
    1368:	93 07       	cpc	r25, r19
    136a:	49 f1       	breq	.+82     	; 0x13be <matrix_scan+0x1da>
            matrix_debouncing[i] = cols;
    136c:	39 83       	std	Y+1, r19	; 0x01
    136e:	28 83       	st	Y, r18
            if (debouncing) {
    1370:	80 91 00 01 	lds	r24, 0x0100
    1374:	88 23       	and	r24, r24
    1376:	01 f1       	breq	.+64     	; 0x13b8 <matrix_scan+0x1d4>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1378:	80 91 c3 01 	lds	r24, 0x01C3
    137c:	80 ff       	sbrs	r24, 0
    137e:	04 c0       	rjmp	.+8      	; 0x1388 <matrix_scan+0x1a4>
    1380:	81 ee       	ldi	r24, 0xE1	; 225
    1382:	91 e0       	ldi	r25, 0x01	; 1
    1384:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    1388:	80 91 c3 01 	lds	r24, 0x01C3
    138c:	80 ff       	sbrs	r24, 0
    138e:	0c c0       	rjmp	.+24     	; 0x13a8 <matrix_scan+0x1c4>
    1390:	80 91 00 01 	lds	r24, 0x0100
    1394:	1f 92       	push	r1
    1396:	8f 93       	push	r24
    1398:	ff 92       	push	r15
    139a:	ef 92       	push	r14
    139c:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	80 91 c3 01 	lds	r24, 0x01C3
    13ac:	80 ff       	sbrs	r24, 0
    13ae:	04 c0       	rjmp	.+8      	; 0x13b8 <matrix_scan+0x1d4>
    13b0:	8a ed       	ldi	r24, 0xDA	; 218
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
            }
            debouncing = DEBOUNCE;
    13b8:	85 e0       	ldi	r24, 0x05	; 5
    13ba:	80 93 00 01 	sts	0x0100, r24
        }
        unselect_rows();
    13be:	0e 94 cd 08 	call	0x119a	; 0x119a <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    13c2:	1f 5f       	subi	r17, 0xFF	; 255
    13c4:	22 96       	adiw	r28, 0x02	; 2
    13c6:	15 30       	cpi	r17, 0x05	; 5
    13c8:	09 f0       	breq	.+2      	; 0x13cc <matrix_scan+0x1e8>
    13ca:	18 cf       	rjmp	.-464    	; 0x11fc <matrix_scan+0x18>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    13cc:	80 91 00 01 	lds	r24, 0x0100
    13d0:	88 23       	and	r24, r24
    13d2:	c1 f0       	breq	.+48     	; 0x1404 <matrix_scan+0x220>
        if (--debouncing) {
    13d4:	81 50       	subi	r24, 0x01	; 1
    13d6:	80 93 00 01 	sts	0x0100, r24
    13da:	88 23       	and	r24, r24
    13dc:	39 f0       	breq	.+14     	; 0x13ec <matrix_scan+0x208>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13de:	8f e9       	ldi	r24, 0x9F	; 159
    13e0:	9f e0       	ldi	r25, 0x0F	; 15
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <matrix_scan+0x1fe>
    13e6:	00 c0       	rjmp	.+0      	; 0x13e8 <matrix_scan+0x204>
    13e8:	00 00       	nop
    13ea:	0c c0       	rjmp	.+24     	; 0x1404 <matrix_scan+0x220>
    13ec:	a2 e4       	ldi	r26, 0x42	; 66
    13ee:	b1 e0       	ldi	r27, 0x01	; 1
    13f0:	e8 e3       	ldi	r30, 0x38	; 56
    13f2:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    13f4:	81 91       	ld	r24, Z+
    13f6:	91 91       	ld	r25, Z+
    13f8:	8d 93       	st	X+, r24
    13fa:	9d 93       	st	X+, r25

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	e2 34       	cpi	r30, 0x42	; 66
    1400:	f9 07       	cpc	r31, r25
    1402:	c1 f7       	brne	.-16     	; 0x13f4 <matrix_scan+0x210>
                matrix[i] = matrix_debouncing[i];
            }
        }
    }

    uint8_t layer = biton32(layer_state);
    1404:	60 91 a8 01 	lds	r22, 0x01A8
    1408:	70 91 a9 01 	lds	r23, 0x01A9
    140c:	80 91 aa 01 	lds	r24, 0x01AA
    1410:	90 91 ab 01 	lds	r25, 0x01AB
    1414:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <biton32>
            // PORTC &= ~(1<<7);
            break;
    }

    return 1;
}
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	ff 90       	pop	r15
    1422:	ef 90       	pop	r14
    1424:	08 95       	ret

00001426 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    1426:	e8 2f       	mov	r30, r24
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	ee 0f       	add	r30, r30
    142c:	ff 1f       	adc	r31, r31
    142e:	ee 5b       	subi	r30, 0xBE	; 190
    1430:	fe 4f       	sbci	r31, 0xFE	; 254
}
    1432:	80 81       	ld	r24, Z
    1434:	91 81       	ldd	r25, Z+1	; 0x01
    1436:	08 95       	ret

00001438 <matrix_print>:

void matrix_print(void)
{
    1438:	cf 92       	push	r12
    143a:	df 92       	push	r13
    143c:	ef 92       	push	r14
    143e:	ff 92       	push	r15
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    1448:	83 ec       	ldi	r24, 0xC3	; 195
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    1450:	c2 e4       	ldi	r28, 0x42	; 66
    1452:	ec 2e       	mov	r14, r28
    1454:	c1 e0       	ldi	r28, 0x01	; 1
    1456:	fc 2e       	mov	r15, r28
    1458:	c0 e0       	ldi	r28, 0x00	; 0
    145a:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    145c:	1e eb       	ldi	r17, 0xBE	; 190
    145e:	c1 2e       	mov	r12, r17
    1460:	11 e0       	ldi	r17, 0x01	; 1
    1462:	d1 2e       	mov	r13, r17
        pbin_reverse16(matrix_get_row(row));
    1464:	05 eb       	ldi	r16, 0xB5	; 181
    1466:	11 e0       	ldi	r17, 0x01	; 1

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	df 92       	push	r13
    146e:	cf 92       	push	r12
    1470:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    1474:	8b eb       	ldi	r24, 0xBB	; 187
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
        pbin_reverse16(matrix_get_row(row));
    147c:	f7 01       	movw	r30, r14
    147e:	81 91       	ld	r24, Z+
    1480:	91 91       	ld	r25, Z+
    1482:	7f 01       	movw	r14, r30
    1484:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <bitrev16>
    1488:	9f 93       	push	r25
    148a:	8f 93       	push	r24
    148c:	1f 93       	push	r17
    148e:	0f 93       	push	r16
    1490:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
        print("\n");
    1494:	83 eb       	ldi	r24, 0xB3	; 179
    1496:	91 e0       	ldi	r25, 0x01	; 1
    1498:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    149c:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    149e:	8d b7       	in	r24, 0x3d	; 61
    14a0:	9e b7       	in	r25, 0x3e	; 62
    14a2:	08 96       	adiw	r24, 0x08	; 8
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	9e bf       	out	0x3e, r25	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	8d bf       	out	0x3d, r24	; 61
    14ae:	c5 30       	cpi	r28, 0x05	; 5
    14b0:	d1 05       	cpc	r29, r1
    14b2:	d1 f6       	brne	.-76     	; 0x1468 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	ff 90       	pop	r15
    14be:	ef 90       	pop	r14
    14c0:	df 90       	pop	r13
    14c2:	cf 90       	pop	r12
    14c4:	08 95       	ret

000014c6 <led_set>:
#include "stdint.h"
#include "led.h"


void led_set(uint8_t usb_led)
{
    14c6:	08 95       	ret

000014c8 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    14c8:	80 91 5e 01 	lds	r24, 0x015E
    14cc:	08 95       	ret

000014ce <sendchar>:
{
    // Not wait once timeouted.
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    14ce:	90 91 dd 01 	lds	r25, 0x01DD
    14d2:	94 30       	cpi	r25, 0x04	; 4
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <sendchar+0xa>
    14d6:	4d c0       	rjmp	.+154    	; 0x1572 <sendchar+0xa4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14d8:	90 91 e9 00 	lds	r25, 0x00E9
    14dc:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    14de:	20 91 ec 00 	lds	r18, 0x00EC
    14e2:	20 ff       	sbrs	r18, 0
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <sendchar+0x1c>
    14e6:	20 e8       	ldi	r18, 0x80	; 128
    14e8:	01 c0       	rjmp	.+2      	; 0x14ec <sendchar+0x1e>
    14ea:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14ec:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14ee:	94 e0       	ldi	r25, 0x04	; 4
    14f0:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    14f4:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    14f8:	90 ff       	sbrs	r25, 0
    14fa:	38 c0       	rjmp	.+112    	; 0x156c <sendchar+0x9e>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    14fc:	90 91 ee 00 	lds	r25, 0x00EE
    1500:	97 ff       	sbrs	r25, 7
    1502:	34 c0       	rjmp	.+104    	; 0x156c <sendchar+0x9e>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    1504:	90 91 4d 01 	lds	r25, 0x014D
    1508:	99 23       	and	r25, r25
    150a:	21 f0       	breq	.+8      	; 0x1514 <sendchar+0x46>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    150c:	90 91 e8 00 	lds	r25, 0x00E8
    1510:	95 ff       	sbrs	r25, 5
    1512:	2c c0       	rjmp	.+88     	; 0x156c <sendchar+0x9e>
        goto ERROR_EXIT;
    }

    timeouted = false;
    1514:	10 92 4d 01 	sts	0x014D, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1518:	96 e0       	ldi	r25, 0x06	; 6
    151a:	30 91 e8 00 	lds	r19, 0x00E8
    151e:	35 fd       	sbrc	r19, 5
    1520:	15 c0       	rjmp	.+42     	; 0x154c <sendchar+0x7e>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    1522:	30 91 dd 01 	lds	r19, 0x01DD
    1526:	34 30       	cpi	r19, 0x04	; 4
    1528:	09 f5       	brne	.+66     	; 0x156c <sendchar+0x9e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    152a:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    152e:	35 fd       	sbrc	r19, 5
    1530:	1d c0       	rjmp	.+58     	; 0x156c <sendchar+0x9e>
    1532:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    1534:	21 f4       	brne	.+8      	; 0x153e <sendchar+0x70>
            timeouted = true;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	80 93 4d 01 	sts	0x014D, r24
            goto ERROR_EXIT;
    153c:	17 c0       	rjmp	.+46     	; 0x156c <sendchar+0x9e>
    153e:	ef e9       	ldi	r30, 0x9F	; 159
    1540:	ff e0       	ldi	r31, 0x0F	; 15
    1542:	31 97       	sbiw	r30, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <sendchar+0x74>
    1546:	00 c0       	rjmp	.+0      	; 0x1548 <sendchar+0x7a>
    1548:	00 00       	nop
    154a:	e7 cf       	rjmp	.-50     	; 0x151a <sendchar+0x4c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    154c:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1550:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed())
    1554:	85 fd       	sbrc	r24, 5
    1556:	05 c0       	rjmp	.+10     	; 0x1562 <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1558:	80 91 e8 00 	lds	r24, 0x00E8
    155c:	8e 77       	andi	r24, 0x7E	; 126
    155e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1562:	2f 70       	andi	r18, 0x0F	; 15
    1564:	20 93 e9 00 	sts	0x00E9, r18
        Endpoint_ClearIN();

    Endpoint_SelectEndpoint(ep);
    return 0;
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	08 95       	ret
    156c:	2f 70       	andi	r18, 0x0F	; 15
    156e:	20 93 e9 00 	sts	0x00E9, r18
    // Not wait once timeouted.
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1572:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1574:	08 95       	ret

00001576 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	00 d0       	rcall	.+0      	; 0x157c <send_consumer+0x6>
    157c:	1f 92       	push	r1
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1582:	20 91 dd 01 	lds	r18, 0x01DD
    1586:	24 30       	cpi	r18, 0x04	; 4
    1588:	19 f5       	brne	.+70     	; 0x15d0 <send_consumer+0x5a>
        return;

    report_extra_t r = {
    158a:	23 e0       	ldi	r18, 0x03	; 3
    158c:	29 83       	std	Y+1, r18	; 0x01
    158e:	9b 83       	std	Y+3, r25	; 0x03
    1590:	8a 83       	std	Y+2, r24	; 0x02
    1592:	20 93 e9 00 	sts	0x00E9, r18
    1596:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1598:	90 91 e8 00 	lds	r25, 0x00E8
    159c:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    159e:	95 fd       	sbrc	r25, 5
    15a0:	06 c0       	rjmp	.+12     	; 0x15ae <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15a2:	95 ed       	ldi	r25, 0xD5	; 213
    15a4:	9a 95       	dec	r25
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <send_consumer+0x2e>
    15a8:	00 00       	nop
    15aa:	81 11       	cpse	r24, r1
    15ac:	f5 cf       	rjmp	.-22     	; 0x1598 <send_consumer+0x22>
    15ae:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    15b2:	85 ff       	sbrs	r24, 5
    15b4:	0d c0       	rjmp	.+26     	; 0x15d0 <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	63 e0       	ldi	r22, 0x03	; 3
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	ce 01       	movw	r24, r28
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15c6:	80 91 e8 00 	lds	r24, 0x00E8
    15ca:	8e 77       	andi	r24, 0x7E	; 126
    15cc:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <send_system+0x6>
    15e2:	1f 92       	push	r1
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    15e8:	20 91 dd 01 	lds	r18, 0x01DD
    15ec:	24 30       	cpi	r18, 0x04	; 4
    15ee:	21 f5       	brne	.+72     	; 0x1638 <send_system+0x5c>
        return;

    report_extra_t r = {
    15f0:	22 e0       	ldi	r18, 0x02	; 2
    15f2:	29 83       	std	Y+1, r18	; 0x01
    15f4:	9b 83       	std	Y+3, r25	; 0x03
    15f6:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15f8:	83 e0       	ldi	r24, 0x03	; 3
    15fa:	80 93 e9 00 	sts	0x00E9, r24
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1600:	90 91 e8 00 	lds	r25, 0x00E8
    1604:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1606:	95 fd       	sbrc	r25, 5
    1608:	06 c0       	rjmp	.+12     	; 0x1616 <send_system+0x3a>
    160a:	95 ed       	ldi	r25, 0xD5	; 213
    160c:	9a 95       	dec	r25
    160e:	f1 f7       	brne	.-4      	; 0x160c <send_system+0x30>
    1610:	00 00       	nop
    1612:	81 11       	cpse	r24, r1
    1614:	f5 cf       	rjmp	.-22     	; 0x1600 <send_system+0x24>
    1616:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    161a:	85 ff       	sbrs	r24, 5
    161c:	0d c0       	rjmp	.+26     	; 0x1638 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	50 e0       	ldi	r21, 0x00	; 0
    1622:	63 e0       	ldi	r22, 0x03	; 3
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	ce 01       	movw	r24, r28
    1628:	01 96       	adiw	r24, 0x01	; 1
    162a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    162e:	80 91 e8 00 	lds	r24, 0x00E8
    1632:	8e 77       	andi	r24, 0x7E	; 126
    1634:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1644:	20 91 dd 01 	lds	r18, 0x01DD
    1648:	24 30       	cpi	r18, 0x04	; 4
    164a:	f1 f4       	brne	.+60     	; 0x1688 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    164c:	22 e0       	ldi	r18, 0x02	; 2
    164e:	20 93 e9 00 	sts	0x00E9, r18
    1652:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1654:	30 91 e8 00 	lds	r19, 0x00E8
    1658:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    165a:	35 fd       	sbrc	r19, 5
    165c:	06 c0       	rjmp	.+12     	; 0x166a <send_mouse+0x26>
    165e:	35 ed       	ldi	r19, 0xD5	; 213
    1660:	3a 95       	dec	r19
    1662:	f1 f7       	brne	.-4      	; 0x1660 <send_mouse+0x1c>
    1664:	00 00       	nop
    1666:	21 11       	cpse	r18, r1
    1668:	f5 cf       	rjmp	.-22     	; 0x1654 <send_mouse+0x10>
    166a:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    166e:	25 ff       	sbrs	r18, 5
    1670:	0b c0       	rjmp	.+22     	; 0x1688 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	65 e0       	ldi	r22, 0x05	; 5
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    167e:	80 91 e8 00 	lds	r24, 0x00E8
    1682:	8e 77       	andi	r24, 0x7E	; 126
    1684:	80 93 e8 00 	sts	0x00E8, r24
    1688:	08 95       	ret

0000168a <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1690:	80 91 dd 01 	lds	r24, 0x01DD
    1694:	84 30       	cpi	r24, 0x04	; 4
    1696:	09 f0       	breq	.+2      	; 0x169a <send_keyboard+0x10>
    1698:	43 c0       	rjmp	.+134    	; 0x1720 <send_keyboard+0x96>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    169a:	80 91 0c 01 	lds	r24, 0x010C
    169e:	88 23       	and	r24, r24
    16a0:	c1 f0       	breq	.+48     	; 0x16d2 <send_keyboard+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16a2:	85 e0       	ldi	r24, 0x05	; 5
    16a4:	80 93 e9 00 	sts	0x00E9, r24
    16a8:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16aa:	90 91 e8 00 	lds	r25, 0x00E8
    16ae:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    16b0:	95 fd       	sbrc	r25, 5
    16b2:	06 c0       	rjmp	.+12     	; 0x16c0 <send_keyboard+0x36>
    16b4:	95 e1       	ldi	r25, 0x15	; 21
    16b6:	9a 95       	dec	r25
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <send_keyboard+0x2c>
    16ba:	00 00       	nop
    16bc:	81 11       	cpse	r24, r1
    16be:	f5 cf       	rjmp	.-22     	; 0x16aa <send_keyboard+0x20>
    16c0:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    16c4:	85 ff       	sbrs	r24, 5
    16c6:	2c c0       	rjmp	.+88     	; 0x1720 <send_keyboard+0x96>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	60 e1       	ldi	r22, 0x10	; 16
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	17 c0       	rjmp	.+46     	; 0x1700 <send_keyboard+0x76>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	80 93 e9 00 	sts	0x00E9, r24
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16da:	90 91 e8 00 	lds	r25, 0x00E8
    16de:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    16e0:	95 fd       	sbrc	r25, 5
    16e2:	06 c0       	rjmp	.+12     	; 0x16f0 <send_keyboard+0x66>
    16e4:	95 ed       	ldi	r25, 0xD5	; 213
    16e6:	9a 95       	dec	r25
    16e8:	f1 f7       	brne	.-4      	; 0x16e6 <send_keyboard+0x5c>
    16ea:	00 00       	nop
    16ec:	81 11       	cpse	r24, r1
    16ee:	f5 cf       	rjmp	.-22     	; 0x16da <send_keyboard+0x50>
    16f0:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    16f4:	85 ff       	sbrs	r24, 5
    16f6:	14 c0       	rjmp	.+40     	; 0x1720 <send_keyboard+0x96>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	68 e0       	ldi	r22, 0x08	; 8
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	ce 01       	movw	r24, r28
    1702:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1706:	80 91 e8 00 	lds	r24, 0x00E8
    170a:	8e 77       	andi	r24, 0x7E	; 126
    170c:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    1710:	80 e1       	ldi	r24, 0x10	; 16
    1712:	fe 01       	movw	r30, r28
    1714:	ae e4       	ldi	r26, 0x4E	; 78
    1716:	b1 e0       	ldi	r27, 0x01	; 1
    1718:	01 90       	ld	r0, Z+
    171a:	0d 92       	st	X+, r0
    171c:	8a 95       	dec	r24
    171e:	e1 f7       	brne	.-8      	; 0x1718 <send_keyboard+0x8e>
}
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	08 95       	ret

00001726 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    1726:	81 e2       	ldi	r24, 0x21	; 33
    1728:	92 e0       	ldi	r25, 0x02	; 2
    172a:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    172e:	80 91 dc 01 	lds	r24, 0x01DC
    1732:	81 11       	cpse	r24, r1
    1734:	09 c0       	rjmp	.+18     	; 0x1748 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    1736:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <USB_Disable>
        USB_Init();
    173a:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    173e:	80 91 e2 00 	lds	r24, 0x00E2
    1742:	84 60       	ori	r24, 0x04	; 4
    1744:	80 93 e2 00 	sts	0x00E2, r24
    1748:	08 95       	ret

0000174a <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    174a:	8d e1       	ldi	r24, 0x1D	; 29
    174c:	92 e0       	ldi	r25, 0x02	; 2
    174e:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    1752:	10 92 dc 01 	sts	0x01DC, r1
    1756:	08 95       	ret

00001758 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    1758:	89 e1       	ldi	r24, 0x19	; 25
    175a:	92 e0       	ldi	r25, 0x02	; 2
    175c:	0c 94 11 08 	jmp	0x1022	; 0x1022 <xputs>

00001760 <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    1760:	85 e1       	ldi	r24, 0x15	; 21
    1762:	92 e0       	ldi	r25, 0x02	; 2
    1764:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    matrix_power_down();
    1768:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <matrix_power_down>

0000176c <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    176c:	81 e1       	ldi	r24, 0x11	; 17
    176e:	92 e0       	ldi	r25, 0x02	; 2
    1770:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    suspend_wakeup_init();
    1774:	0c 94 eb 1f 	jmp	0x3fd6	; 0x3fd6 <suspend_wakeup_init>

00001778 <EVENT_USB_Device_StartOfFrame>:
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1778:	80 91 dd 01 	lds	r24, 0x01DD
    177c:	84 30       	cpi	r24, 0x04	; 4
    177e:	49 f5       	brne	.+82     	; 0x17d2 <EVENT_USB_Device_StartOfFrame+0x5a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1780:	80 91 e9 00 	lds	r24, 0x00E9
    1784:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1786:	90 91 ec 00 	lds	r25, 0x00EC
    178a:	90 ff       	sbrs	r25, 0
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <EVENT_USB_Device_StartOfFrame+0x1a>
    178e:	90 e8       	ldi	r25, 0x80	; 128
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <EVENT_USB_Device_StartOfFrame+0x1c>
    1792:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1794:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1796:	84 e0       	ldi	r24, 0x04	; 4
    1798:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    179c:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    17a0:	80 ff       	sbrs	r24, 0
    17a2:	14 c0       	rjmp	.+40     	; 0x17cc <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    17a4:	80 91 ee 00 	lds	r24, 0x00EE
    17a8:	87 ff       	sbrs	r24, 7
    17aa:	10 c0       	rjmp	.+32     	; 0x17cc <EVENT_USB_Device_StartOfFrame+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    17ac:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    17b0:	85 ff       	sbrs	r24, 5
    17b2:	03 c0       	rjmp	.+6      	; 0x17ba <EVENT_USB_Device_StartOfFrame+0x42>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17b4:	10 92 f1 00 	sts	0x00F1, r1
    17b8:	f9 cf       	rjmp	.-14     	; 0x17ac <EVENT_USB_Device_StartOfFrame+0x34>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17ba:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    17be:	80 ff       	sbrs	r24, 0
    17c0:	05 c0       	rjmp	.+10     	; 0x17cc <EVENT_USB_Device_StartOfFrame+0x54>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17c2:	80 91 e8 00 	lds	r24, 0x00E8
    17c6:	8e 77       	andi	r24, 0x7E	; 126
    17c8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17cc:	9f 70       	andi	r25, 0x0F	; 15
    17ce:	90 93 e9 00 	sts	0x00E9, r25
    17d2:	08 95       	ret

000017d4 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    17d4:	42 e0       	ldi	r20, 0x02	; 2
    17d6:	61 ec       	ldi	r22, 0xC1	; 193
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Endpoint_ConfigureEndpoint_Prv>
    17de:	42 e0       	ldi	r20, 0x02	; 2
    17e0:	61 ec       	ldi	r22, 0xC1	; 193
    17e2:	82 e0       	ldi	r24, 0x02	; 2
    17e4:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Endpoint_ConfigureEndpoint_Prv>
    17e8:	42 e0       	ldi	r20, 0x02	; 2
    17ea:	61 ec       	ldi	r22, 0xC1	; 193
    17ec:	83 e0       	ldi	r24, 0x03	; 3
    17ee:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Endpoint_ConfigureEndpoint_Prv>
    17f2:	46 e2       	ldi	r20, 0x26	; 38
    17f4:	61 ec       	ldi	r22, 0xC1	; 193
    17f6:	84 e0       	ldi	r24, 0x04	; 4
    17f8:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Endpoint_ConfigureEndpoint_Prv>
    17fc:	42 e1       	ldi	r20, 0x12	; 18
    17fe:	61 ec       	ldi	r22, 0xC1	; 193
    1800:	85 e0       	ldi	r24, 0x05	; 5
    1802:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <Endpoint_ConfigureEndpoint_Prv>

00001806 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    1806:	80 91 df 01 	lds	r24, 0x01DF
    180a:	83 30       	cpi	r24, 0x03	; 3
    180c:	09 f4       	brne	.+2      	; 0x1810 <EVENT_USB_Device_ControlRequest+0xa>
    180e:	55 c0       	rjmp	.+170    	; 0x18ba <EVENT_USB_Device_ControlRequest+0xb4>
    1810:	30 f4       	brcc	.+12     	; 0x181e <EVENT_USB_Device_ControlRequest+0x18>
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	71 f0       	breq	.+28     	; 0x1832 <EVENT_USB_Device_ControlRequest+0x2c>
    1816:	82 30       	cpi	r24, 0x02	; 2
    1818:	09 f4       	brne	.+2      	; 0x181c <EVENT_USB_Device_ControlRequest+0x16>
    181a:	95 c0       	rjmp	.+298    	; 0x1946 <EVENT_USB_Device_ControlRequest+0x140>
    181c:	08 95       	ret
    181e:	8a 30       	cpi	r24, 0x0A	; 10
    1820:	09 f4       	brne	.+2      	; 0x1824 <EVENT_USB_Device_ControlRequest+0x1e>
    1822:	81 c0       	rjmp	.+258    	; 0x1926 <EVENT_USB_Device_ControlRequest+0x120>
    1824:	8b 30       	cpi	r24, 0x0B	; 11
    1826:	09 f4       	brne	.+2      	; 0x182a <EVENT_USB_Device_ControlRequest+0x24>
    1828:	60 c0       	rjmp	.+192    	; 0x18ea <EVENT_USB_Device_ControlRequest+0xe4>
    182a:	89 30       	cpi	r24, 0x09	; 9
    182c:	09 f0       	breq	.+2      	; 0x1830 <EVENT_USB_Device_ControlRequest+0x2a>
    182e:	a3 c0       	rjmp	.+326    	; 0x1976 <EVENT_USB_Device_ControlRequest+0x170>
    1830:	20 c0       	rjmp	.+64     	; 0x1872 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1832:	80 91 de 01 	lds	r24, 0x01DE
    1836:	81 3a       	cpi	r24, 0xA1	; 161
    1838:	09 f0       	breq	.+2      	; 0x183c <EVENT_USB_Device_ControlRequest+0x36>
    183a:	9d c0       	rjmp	.+314    	; 0x1976 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    183c:	80 91 e8 00 	lds	r24, 0x00E8
    1840:	87 7f       	andi	r24, 0xF7	; 247
    1842:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1846:	80 91 e2 01 	lds	r24, 0x01E2
    184a:	90 91 e3 01 	lds	r25, 0x01E3
    184e:	89 2b       	or	r24, r25
    1850:	21 f0       	breq	.+8      	; 0x185a <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    1852:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	03 c0       	rjmp	.+6      	; 0x1860 <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    185a:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    185c:	8e e4       	ldi	r24, 0x4E	; 78
    185e:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1866:	80 91 e8 00 	lds	r24, 0x00E8
    186a:	8b 77       	andi	r24, 0x7B	; 123
    186c:	80 93 e8 00 	sts	0x00E8, r24
    1870:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1872:	80 91 de 01 	lds	r24, 0x01DE
    1876:	81 32       	cpi	r24, 0x21	; 33
    1878:	09 f0       	breq	.+2      	; 0x187c <EVENT_USB_Device_ControlRequest+0x76>
    187a:	7d c0       	rjmp	.+250    	; 0x1976 <EVENT_USB_Device_ControlRequest+0x170>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    187c:	80 91 e2 01 	lds	r24, 0x01E2
    1880:	90 91 e3 01 	lds	r25, 0x01E3
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	19 f0       	breq	.+6      	; 0x188e <EVENT_USB_Device_ControlRequest+0x88>
    1888:	04 97       	sbiw	r24, 0x04	; 4
    188a:	09 f0       	breq	.+2      	; 0x188e <EVENT_USB_Device_ControlRequest+0x88>
    188c:	74 c0       	rjmp	.+232    	; 0x1976 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    188e:	80 91 e8 00 	lds	r24, 0x00E8
    1892:	87 7f       	andi	r24, 0xF7	; 247
    1894:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1898:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    189c:	82 fd       	sbrc	r24, 2
    189e:	05 c0       	rjmp	.+10     	; 0x18aa <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    18a0:	80 91 dd 01 	lds	r24, 0x01DD
    18a4:	81 11       	cpse	r24, r1
    18a6:	f8 cf       	rjmp	.-16     	; 0x1898 <EVENT_USB_Device_ControlRequest+0x92>
    18a8:	66 c0       	rjmp	.+204    	; 0x1976 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    18aa:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    18ae:	80 93 5e 01 	sts	0x015E, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    18b2:	80 91 e8 00 	lds	r24, 0x00E8
    18b6:	8b 77       	andi	r24, 0x7B	; 123
    18b8:	5a c0       	rjmp	.+180    	; 0x196e <EVENT_USB_Device_ControlRequest+0x168>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    18ba:	80 91 de 01 	lds	r24, 0x01DE
    18be:	81 3a       	cpi	r24, 0xA1	; 161
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <EVENT_USB_Device_ControlRequest+0xbe>
    18c2:	59 c0       	rjmp	.+178    	; 0x1976 <EVENT_USB_Device_ControlRequest+0x170>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    18c4:	80 91 e2 01 	lds	r24, 0x01E2
    18c8:	90 91 e3 01 	lds	r25, 0x01E3
    18cc:	89 2b       	or	r24, r25
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <EVENT_USB_Device_ControlRequest+0xcc>
    18d0:	52 c0       	rjmp	.+164    	; 0x1976 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18d2:	80 91 e8 00 	lds	r24, 0x00E8
    18d6:	87 7f       	andi	r24, 0xF7	; 247
    18d8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18dc:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    18e0:	80 ff       	sbrs	r24, 0
    18e2:	fc cf       	rjmp	.-8      	; 0x18dc <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    18e4:	80 91 0b 01 	lds	r24, 0x010B
    18e8:	3d c0       	rjmp	.+122    	; 0x1964 <EVENT_USB_Device_ControlRequest+0x15e>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    18ea:	80 91 de 01 	lds	r24, 0x01DE
    18ee:	81 32       	cpi	r24, 0x21	; 33
    18f0:	09 f0       	breq	.+2      	; 0x18f4 <EVENT_USB_Device_ControlRequest+0xee>
    18f2:	41 c0       	rjmp	.+130    	; 0x1976 <EVENT_USB_Device_ControlRequest+0x170>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    18f4:	80 91 e2 01 	lds	r24, 0x01E2
    18f8:	90 91 e3 01 	lds	r25, 0x01E3
    18fc:	89 2b       	or	r24, r25
    18fe:	d9 f5       	brne	.+118    	; 0x1976 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1900:	80 91 e8 00 	lds	r24, 0x00E8
    1904:	87 7f       	andi	r24, 0xF7	; 247
    1906:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    190a:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <Endpoint_ClearStatusStage>

                    keyboard_protocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    190e:	90 91 e0 01 	lds	r25, 0x01E0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	91 11       	cpse	r25, r1
    1916:	01 c0       	rjmp	.+2      	; 0x191a <EVENT_USB_Device_ControlRequest+0x114>
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	80 93 0b 01 	sts	0x010B, r24
#ifdef NKRO_ENABLE
                    keyboard_nkro = !!keyboard_protocol;
    191e:	80 93 0c 01 	sts	0x010C, r24
#endif
                    clear_keyboard();
    1922:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1926:	80 91 de 01 	lds	r24, 0x01DE
    192a:	81 32       	cpi	r24, 0x21	; 33
    192c:	21 f5       	brne	.+72     	; 0x1976 <EVENT_USB_Device_ControlRequest+0x170>
    192e:	80 91 e8 00 	lds	r24, 0x00E8
    1932:	87 7f       	andi	r24, 0xF7	; 247
    1934:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    1938:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    193c:	80 91 e1 01 	lds	r24, 0x01E1
    1940:	80 93 4c 01 	sts	0x014C, r24
    1944:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1946:	80 91 de 01 	lds	r24, 0x01DE
    194a:	81 3a       	cpi	r24, 0xA1	; 161
    194c:	a1 f4       	brne	.+40     	; 0x1976 <EVENT_USB_Device_ControlRequest+0x170>
    194e:	80 91 e8 00 	lds	r24, 0x00E8
    1952:	87 7f       	andi	r24, 0xF7	; 247
    1954:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1958:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    195c:	80 ff       	sbrs	r24, 0
    195e:	fc cf       	rjmp	.-8      	; 0x1958 <EVENT_USB_Device_ControlRequest+0x152>
                Endpoint_Write_8(keyboard_idle);
    1960:	80 91 4c 01 	lds	r24, 0x014C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1964:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1968:	80 91 e8 00 	lds	r24, 0x00E8
    196c:	8e 77       	andi	r24, 0x7E	; 126
    196e:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1972:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <Endpoint_ClearStatusStage>
    1976:	08 95       	ret

00001978 <main>:
 * main
 ******************************************************************************/
static void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1978:	84 b7       	in	r24, 0x34	; 52
    197a:	87 7f       	andi	r24, 0xF7	; 247
    197c:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    197e:	88 e1       	ldi	r24, 0x18	; 24
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	80 93 60 00 	sts	0x0060, r24
    1988:	10 92 60 00 	sts	0x0060, r1
    198c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	80 e8       	ldi	r24, 0x80	; 128
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	80 93 61 00 	sts	0x0061, r24
    199a:	90 93 61 00 	sts	0x0061, r25
    199e:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    19a0:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <USB_Disable>

    USB_Init();
    19a4:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <USB_Init>
    19a8:	80 91 e2 00 	lds	r24, 0x00E2
    19ac:	84 60       	ori	r24, 0x04	; 4
    19ae:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    19b2:	87 e6       	ldi	r24, 0x67	; 103
    19b4:	9a e0       	ldi	r25, 0x0A	; 10
    19b6:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <print_set_sendchar>

int main(void)  __attribute__ ((weak));
int main(void)
{
    SetupHardware();
    sei();
    19ba:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    19bc:	80 91 dd 01 	lds	r24, 0x01DD
    19c0:	84 30       	cpi	r24, 0x04	; 4
    19c2:	e1 f7       	brne	.-8      	; 0x19bc <main+0x44>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	92 e0       	ldi	r25, 0x02	; 2
    19c8:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>

    /* init modules */
    keyboard_init();
    19cc:	0e 94 64 12 	call	0x24c8	; 0x24c8 <keyboard_init>
    host_set_driver(&lufa_driver);
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	91 e0       	ldi	r25, 0x01	; 1
    19d4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    19d8:	8f ee       	ldi	r24, 0xEF	; 239
    19da:	91 e0       	ldi	r25, 0x01	; 1
    19dc:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    19e0:	80 91 dd 01 	lds	r24, 0x01DD
    19e4:	85 30       	cpi	r24, 0x05	; 5
    19e6:	89 f4       	brne	.+34     	; 0x1a0a <main+0x92>
            print("[s]");
    19e8:	8b ee       	ldi	r24, 0xEB	; 235
    19ea:	91 e0       	ldi	r25, 0x01	; 1
    19ec:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
            suspend_power_down();
    19f0:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    19f4:	80 91 db 01 	lds	r24, 0x01DB
    19f8:	88 23       	and	r24, r24
    19fa:	91 f3       	breq	.-28     	; 0x19e0 <main+0x68>
    19fc:	0e 94 d6 1f 	call	0x3fac	; 0x3fac <suspend_wakeup_condition>
    1a00:	88 23       	and	r24, r24
    1a02:	71 f3       	breq	.-36     	; 0x19e0 <main+0x68>
                    USB_Device_SendRemoteWakeup();
    1a04:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <USB_Device_SendRemoteWakeup>
    1a08:	eb cf       	rjmp	.-42     	; 0x19e0 <main+0x68>
            }
        }

        keyboard_task();
    1a0a:	0e 94 92 12 	call	0x2524	; 0x2524 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    1a0e:	e8 cf       	rjmp	.-48     	; 0x19e0 <main+0x68>

00001a10 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1a10:	29 2f       	mov	r18, r25
    1a12:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1a14:	23 30       	cpi	r18, 0x03	; 3
    1a16:	31 05       	cpc	r19, r1
    1a18:	a9 f0       	breq	.+42     	; 0x1a44 <CALLBACK_USB_GetDescriptor+0x34>
    1a1a:	6c f4       	brge	.+26     	; 0x1a36 <CALLBACK_USB_GetDescriptor+0x26>
    1a1c:	21 30       	cpi	r18, 0x01	; 1
    1a1e:	31 05       	cpc	r19, r1
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <CALLBACK_USB_GetDescriptor+0x14>
    1a22:	42 c0       	rjmp	.+132    	; 0x1aa8 <CALLBACK_USB_GetDescriptor+0x98>
    1a24:	22 30       	cpi	r18, 0x02	; 2
    1a26:	31 05       	cpc	r19, r1
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <CALLBACK_USB_GetDescriptor+0x1c>
    1a2a:	43 c0       	rjmp	.+134    	; 0x1ab2 <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1a2c:	8d e8       	ldi	r24, 0x8D	; 141
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1a30:	29 e4       	ldi	r18, 0x49	; 73
    1a32:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    1a34:	42 c0       	rjmp	.+132    	; 0x1aba <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1a36:	21 32       	cpi	r18, 0x21	; 33
    1a38:	31 05       	cpc	r19, r1
    1a3a:	c9 f0       	breq	.+50     	; 0x1a6e <CALLBACK_USB_GetDescriptor+0x5e>
    1a3c:	22 32       	cpi	r18, 0x22	; 34
    1a3e:	31 05       	cpc	r19, r1
    1a40:	19 f1       	breq	.+70     	; 0x1a88 <CALLBACK_USB_GetDescriptor+0x78>
    1a42:	37 c0       	rjmp	.+110    	; 0x1ab2 <CALLBACK_USB_GetDescriptor+0xa2>
    1a44:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1a46:	81 30       	cpi	r24, 0x01	; 1
    1a48:	91 05       	cpc	r25, r1
    1a4a:	41 f0       	breq	.+16     	; 0x1a5c <CALLBACK_USB_GetDescriptor+0x4c>
    1a4c:	82 30       	cpi	r24, 0x02	; 2
    1a4e:	91 05       	cpc	r25, r1
    1a50:	41 f0       	breq	.+16     	; 0x1a62 <CALLBACK_USB_GetDescriptor+0x52>
    1a52:	89 2b       	or	r24, r25
    1a54:	71 f5       	brne	.+92     	; 0x1ab2 <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1a56:	e5 e4       	ldi	r30, 0x45	; 69
    1a58:	f2 e0       	ldi	r31, 0x02	; 2
    1a5a:	05 c0       	rjmp	.+10     	; 0x1a66 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1a5c:	e5 e3       	ldi	r30, 0x35	; 53
    1a5e:	f2 e0       	ldi	r31, 0x02	; 2
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1a62:	e5 e2       	ldi	r30, 0x25	; 37
    1a64:	f2 e0       	ldi	r31, 0x02	; 2
    1a66:	84 91       	lpm	r24, Z
    1a68:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1a6a:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    1a6c:	26 c0       	rjmp	.+76     	; 0x1aba <CALLBACK_USB_GetDescriptor+0xaa>
    1a6e:	65 30       	cpi	r22, 0x05	; 5
    1a70:	00 f5       	brcc	.+64     	; 0x1ab2 <CALLBACK_USB_GetDescriptor+0xa2>
    1a72:	e6 2f       	mov	r30, r22
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	ee 0f       	add	r30, r30
    1a78:	ff 1f       	adc	r31, r31
    1a7a:	ec 5d       	subi	r30, 0xDC	; 220
    1a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7e:	20 81       	ld	r18, Z
    1a80:	31 81       	ldd	r19, Z+1	; 0x01
    1a82:	89 e0       	ldi	r24, 0x09	; 9
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	19 c0       	rjmp	.+50     	; 0x1aba <CALLBACK_USB_GetDescriptor+0xaa>
    1a88:	65 30       	cpi	r22, 0x05	; 5
    1a8a:	98 f4       	brcc	.+38     	; 0x1ab2 <CALLBACK_USB_GetDescriptor+0xa2>
    1a8c:	e6 2f       	mov	r30, r22
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	df 01       	movw	r26, r30
    1a92:	aa 0f       	add	r26, r26
    1a94:	bb 1f       	adc	r27, r27
    1a96:	a6 5e       	subi	r26, 0xE6	; 230
    1a98:	be 4f       	sbci	r27, 0xFE	; 254
    1a9a:	2d 91       	ld	r18, X+
    1a9c:	3c 91       	ld	r19, X
    1a9e:	eb 5e       	subi	r30, 0xEB	; 235
    1aa0:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa2:	80 81       	ld	r24, Z
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	09 c0       	rjmp	.+18     	; 0x1aba <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1aa8:	82 e1       	ldi	r24, 0x12	; 18
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1aac:	26 ed       	ldi	r18, 0xD6	; 214
    1aae:	32 e0       	ldi	r19, 0x02	; 2
    1ab0:	04 c0       	rjmp	.+8      	; 0x1aba <CALLBACK_USB_GetDescriptor+0xaa>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1aba:	fa 01       	movw	r30, r20
    1abc:	31 83       	std	Z+1, r19	; 0x01
    1abe:	20 83       	st	Z, r18
    return Size;
}
    1ac0:	08 95       	ret

00001ac2 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1ac2:	80 e1       	ldi	r24, 0x10	; 16
    1ac4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1ac6:	82 e1       	ldi	r24, 0x12	; 18
    1ac8:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1aca:	09 b4       	in	r0, 0x29	; 41
    1acc:	00 fe       	sbrs	r0, 0
    1ace:	fd cf       	rjmp	.-6      	; 0x1aca <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1ad0:	80 91 d8 00 	lds	r24, 0x00D8
    1ad4:	8f 7d       	andi	r24, 0xDF	; 223
    1ad6:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1ada:	80 91 e0 00 	lds	r24, 0x00E0
    1ade:	82 60       	ori	r24, 0x02	; 2
    1ae0:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1ae4:	80 91 e0 00 	lds	r24, 0x00E0
    1ae8:	81 fd       	sbrc	r24, 1
    1aea:	fc cf       	rjmp	.-8      	; 0x1ae4 <USB_Device_SendRemoteWakeup+0x22>
}
    1aec:	08 95       	ret

00001aee <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1aee:	98 2f       	mov	r25, r24
    1af0:	97 30       	cpi	r25, 0x07	; 7
    1af2:	58 f5       	brcc	.+86     	; 0x1b4a <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1af4:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1af8:	98 17       	cp	r25, r24
    1afa:	39 f0       	breq	.+14     	; 0x1b0a <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1afc:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1b00:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1b04:	50 91 f0 00 	lds	r21, 0x00F0
    1b08:	03 c0       	rjmp	.+6      	; 0x1b10 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1b0a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1b0c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1b0e:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1b10:	21 ff       	sbrs	r18, 1
    1b12:	19 c0       	rjmp	.+50     	; 0x1b46 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1b14:	30 91 eb 00 	lds	r19, 0x00EB
    1b18:	3e 7f       	andi	r19, 0xFE	; 254
    1b1a:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1b1e:	30 91 ed 00 	lds	r19, 0x00ED
    1b22:	3d 7f       	andi	r19, 0xFD	; 253
    1b24:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1b28:	30 91 eb 00 	lds	r19, 0x00EB
    1b2c:	31 60       	ori	r19, 0x01	; 1
    1b2e:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1b32:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1b36:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1b3a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1b3e:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1b42:	27 ff       	sbrs	r18, 7
    1b44:	07 c0       	rjmp	.+14     	; 0x1b54 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1b46:	9f 5f       	subi	r25, 0xFF	; 255
    1b48:	d3 cf       	rjmp	.-90     	; 0x1af0 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b4a:	8f 70       	andi	r24, 0x0F	; 15
    1b4c:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1b54:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1b56:	08 95       	ret

00001b58 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1b58:	80 91 de 01 	lds	r24, 0x01DE
    1b5c:	87 fd       	sbrc	r24, 7
    1b5e:	05 c0       	rjmp	.+10     	; 0x1b6a <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b60:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1b64:	80 ff       	sbrs	r24, 0
    1b66:	0e c0       	rjmp	.+28     	; 0x1b84 <Endpoint_ClearStatusStage+0x2c>
    1b68:	12 c0       	rjmp	.+36     	; 0x1b8e <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b6a:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1b6e:	82 fd       	sbrc	r24, 2
    1b70:	05 c0       	rjmp	.+10     	; 0x1b7c <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b72:	80 91 dd 01 	lds	r24, 0x01DD
    1b76:	81 11       	cpse	r24, r1
    1b78:	f8 cf       	rjmp	.-16     	; 0x1b6a <Endpoint_ClearStatusStage+0x12>
    1b7a:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b7c:	80 91 e8 00 	lds	r24, 0x00E8
    1b80:	8b 77       	andi	r24, 0x7B	; 123
    1b82:	08 c0       	rjmp	.+16     	; 0x1b94 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b84:	80 91 dd 01 	lds	r24, 0x01DD
    1b88:	81 11       	cpse	r24, r1
    1b8a:	ea cf       	rjmp	.-44     	; 0x1b60 <Endpoint_ClearStatusStage+0x8>
    1b8c:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b8e:	80 91 e8 00 	lds	r24, 0x00E8
    1b92:	8e 77       	andi	r24, 0x7E	; 126
    1b94:	80 93 e8 00 	sts	0x00E8, r24
    1b98:	08 95       	ret

00001b9a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1b9a:	80 91 e4 00 	lds	r24, 0x00E4
    1b9e:	90 91 e5 00 	lds	r25, 0x00E5
    1ba2:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1ba4:	20 91 ec 00 	lds	r18, 0x00EC
    1ba8:	20 ff       	sbrs	r18, 0
    1baa:	21 c0       	rjmp	.+66     	; 0x1bee <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bac:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1bb0:	20 fd       	sbrc	r18, 0
    1bb2:	21 c0       	rjmp	.+66     	; 0x1bf6 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1bb4:	20 91 dd 01 	lds	r18, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1bb8:	22 23       	and	r18, r18
    1bba:	89 f0       	breq	.+34     	; 0x1bde <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1bbc:	25 30       	cpi	r18, 0x05	; 5
    1bbe:	89 f0       	breq	.+34     	; 0x1be2 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1bc0:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1bc4:	25 fd       	sbrc	r18, 5
    1bc6:	0f c0       	rjmp	.+30     	; 0x1be6 <Endpoint_WaitUntilReady+0x4c>
    1bc8:	20 91 e4 00 	lds	r18, 0x00E4
    1bcc:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1bd0:	28 17       	cp	r18, r24
    1bd2:	39 07       	cpc	r19, r25
    1bd4:	39 f3       	breq	.-50     	; 0x1ba4 <Endpoint_WaitUntilReady+0xa>
    1bd6:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1bd8:	41 f0       	breq	.+16     	; 0x1bea <Endpoint_WaitUntilReady+0x50>
    1bda:	c9 01       	movw	r24, r18
    1bdc:	e3 cf       	rjmp	.-58     	; 0x1ba4 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1be2:	83 e0       	ldi	r24, 0x03	; 3
    1be4:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1bea:	84 e0       	ldi	r24, 0x04	; 4
    1bec:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1bee:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1bf2:	22 ff       	sbrs	r18, 2
    1bf4:	df cf       	rjmp	.-66     	; 0x1bb4 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	08 95       	ret

00001bfa <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1bfa:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1bfe:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1c02:	e0 ee       	ldi	r30, 0xE0	; 224
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	81 60       	ori	r24, 0x01	; 1
    1c0a:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1c0c:	e8 ed       	ldi	r30, 0xD8	; 216
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	8f 77       	andi	r24, 0x7F	; 127
    1c14:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c16:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1c18:	a7 ed       	ldi	r26, 0xD7	; 215
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	8c 91       	ld	r24, X
    1c1e:	8e 7f       	andi	r24, 0xFE	; 254
    1c20:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1c22:	80 81       	ld	r24, Z
    1c24:	8f 7e       	andi	r24, 0xEF	; 239
    1c26:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1c28:	10 92 dc 01 	sts	0x01DC, r1
    1c2c:	08 95       	ret

00001c2e <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1c36:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1c3a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1c3e:	c8 ed       	ldi	r28, 0xD8	; 216
    1c40:	d0 e0       	ldi	r29, 0x00	; 0
    1c42:	88 81       	ld	r24, Y
    1c44:	8f 77       	andi	r24, 0x7F	; 127
    1c46:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1c48:	88 81       	ld	r24, Y
    1c4a:	80 68       	ori	r24, 0x80	; 128
    1c4c:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c4e:	88 81       	ld	r24, Y
    1c50:	8f 7d       	andi	r24, 0xDF	; 223
    1c52:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c54:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1c56:	10 92 dd 01 	sts	0x01DD, r1
	USB_Device_ConfigurationNumber  = 0;
    1c5a:	10 92 d9 01 	sts	0x01D9, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1c5e:	10 92 db 01 	sts	0x01DB, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1c62:	10 92 da 01 	sts	0x01DA, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1c66:	00 ee       	ldi	r16, 0xE0	; 224
    1c68:	10 e0       	ldi	r17, 0x00	; 0
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8b 7f       	andi	r24, 0xFB	; 251
    1c70:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1c72:	88 81       	ld	r24, Y
    1c74:	81 60       	ori	r24, 0x01	; 1
    1c76:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c78:	42 e0       	ldi	r20, 0x02	; 2
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c82:	e1 ee       	ldi	r30, 0xE1	; 225
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	8e 7f       	andi	r24, 0xFE	; 254
    1c8a:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c8c:	e2 ee       	ldi	r30, 0xE2	; 226
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	81 60       	ori	r24, 0x01	; 1
    1c94:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1c96:	80 81       	ld	r24, Z
    1c98:	88 60       	ori	r24, 0x08	; 8
    1c9a:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1c9c:	f8 01       	movw	r30, r16
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8e 7f       	andi	r24, 0xFE	; 254
    1ca2:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1ca4:	88 81       	ld	r24, Y
    1ca6:	80 61       	ori	r24, 0x10	; 16
    1ca8:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	1f 91       	pop	r17
    1cb0:	0f 91       	pop	r16
    1cb2:	08 95       	ret

00001cb4 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1cb4:	e7 ed       	ldi	r30, 0xD7	; 215
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	81 60       	ori	r24, 0x01	; 1
    1cbc:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1cbe:	84 e0       	ldi	r24, 0x04	; 4
    1cc0:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	80 93 dc 01 	sts	0x01DC, r24

	USB_ResetInterface();
    1cc8:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <USB_ResetInterface>

00001ccc <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1ccc:	e8 ed       	ldi	r30, 0xD8	; 216
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8e 7f       	andi	r24, 0xFE	; 254
    1cd4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1cd6:	10 92 e2 00 	sts	0x00E2, r1
    1cda:	08 95       	ret

00001cdc <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1cdc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1ce0:	10 92 e1 00 	sts	0x00E1, r1
    1ce4:	08 95       	ret

00001ce6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1ce6:	1f 92       	push	r1
    1ce8:	0f 92       	push	r0
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	0f 92       	push	r0
    1cee:	11 24       	eor	r1, r1
    1cf0:	2f 93       	push	r18
    1cf2:	3f 93       	push	r19
    1cf4:	4f 93       	push	r20
    1cf6:	5f 93       	push	r21
    1cf8:	6f 93       	push	r22
    1cfa:	7f 93       	push	r23
    1cfc:	8f 93       	push	r24
    1cfe:	9f 93       	push	r25
    1d00:	af 93       	push	r26
    1d02:	bf 93       	push	r27
    1d04:	ef 93       	push	r30
    1d06:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1d08:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1d0c:	82 ff       	sbrs	r24, 2
    1d0e:	0b c0       	rjmp	.+22     	; 0x1d26 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1d10:	80 91 e2 00 	lds	r24, 0x00E2
    1d14:	82 ff       	sbrs	r24, 2
    1d16:	07 c0       	rjmp	.+14     	; 0x1d26 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1d18:	80 91 e1 00 	lds	r24, 0x00E1
    1d1c:	8b 7f       	andi	r24, 0xFB	; 251
    1d1e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1d22:	0e 94 bc 0b 	call	0x1778	; 0x1778 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1d26:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1d2a:	80 ff       	sbrs	r24, 0
    1d2c:	1f c0       	rjmp	.+62     	; 0x1d6c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1d2e:	80 91 d8 00 	lds	r24, 0x00D8
    1d32:	80 ff       	sbrs	r24, 0
    1d34:	1b c0       	rjmp	.+54     	; 0x1d6c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1d36:	80 91 da 00 	lds	r24, 0x00DA
    1d3a:	8e 7f       	andi	r24, 0xFE	; 254
    1d3c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1d40:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1d44:	80 ff       	sbrs	r24, 0
    1d46:	0d c0       	rjmp	.+26     	; 0x1d62 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d48:	80 e1       	ldi	r24, 0x10	; 16
    1d4a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d4c:	82 e1       	ldi	r24, 0x12	; 18
    1d4e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1d50:	09 b4       	in	r0, 0x29	; 41
    1d52:	00 fe       	sbrs	r0, 0
    1d54:	fd cf       	rjmp	.-6      	; 0x1d50 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	80 93 dd 01 	sts	0x01DD, r24
			EVENT_USB_Device_Connect();
    1d5c:	0e 94 93 0b 	call	0x1726	; 0x1726 <EVENT_USB_Device_Connect>
    1d60:	05 c0       	rjmp	.+10     	; 0x1d6c <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d62:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1d64:	10 92 dd 01 	sts	0x01DD, r1
			EVENT_USB_Device_Disconnect();
    1d68:	0e 94 a5 0b 	call	0x174a	; 0x174a <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1d6c:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1d70:	80 ff       	sbrs	r24, 0
    1d72:	19 c0       	rjmp	.+50     	; 0x1da6 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1d74:	80 91 e2 00 	lds	r24, 0x00E2
    1d78:	80 ff       	sbrs	r24, 0
    1d7a:	15 c0       	rjmp	.+42     	; 0x1da6 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d7c:	80 91 e2 00 	lds	r24, 0x00E2
    1d80:	8e 7f       	andi	r24, 0xFE	; 254
    1d82:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d86:	80 91 e2 00 	lds	r24, 0x00E2
    1d8a:	80 61       	ori	r24, 0x10	; 16
    1d8c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1d90:	80 91 d8 00 	lds	r24, 0x00D8
    1d94:	80 62       	ori	r24, 0x20	; 32
    1d96:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d9a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1d9c:	85 e0       	ldi	r24, 0x05	; 5
    1d9e:	80 93 dd 01 	sts	0x01DD, r24
		EVENT_USB_Device_Suspend();
    1da2:	0e 94 b0 0b 	call	0x1760	; 0x1760 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1da6:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1daa:	84 ff       	sbrs	r24, 4
    1dac:	2e c0       	rjmp	.+92     	; 0x1e0a <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1dae:	80 91 e2 00 	lds	r24, 0x00E2
    1db2:	84 ff       	sbrs	r24, 4
    1db4:	2a c0       	rjmp	.+84     	; 0x1e0a <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1db6:	80 e1       	ldi	r24, 0x10	; 16
    1db8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1dba:	82 e1       	ldi	r24, 0x12	; 18
    1dbc:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1dbe:	09 b4       	in	r0, 0x29	; 41
    1dc0:	00 fe       	sbrs	r0, 0
    1dc2:	fd cf       	rjmp	.-6      	; 0x1dbe <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1dc4:	80 91 d8 00 	lds	r24, 0x00D8
    1dc8:	8f 7d       	andi	r24, 0xDF	; 223
    1dca:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1dce:	80 91 e1 00 	lds	r24, 0x00E1
    1dd2:	8f 7e       	andi	r24, 0xEF	; 239
    1dd4:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1dd8:	80 91 e2 00 	lds	r24, 0x00E2
    1ddc:	8f 7e       	andi	r24, 0xEF	; 239
    1dde:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1de2:	80 91 e2 00 	lds	r24, 0x00E2
    1de6:	81 60       	ori	r24, 0x01	; 1
    1de8:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1dec:	80 91 d9 01 	lds	r24, 0x01D9
    1df0:	81 11       	cpse	r24, r1
    1df2:	04 c0       	rjmp	.+8      	; 0x1dfc <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1df4:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1df8:	87 ff       	sbrs	r24, 7
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <__vector_10+0x11a>
    1dfc:	84 e0       	ldi	r24, 0x04	; 4
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <__vector_10+0x11c>
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	80 93 dd 01 	sts	0x01DD, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1e06:	0e 94 b6 0b 	call	0x176c	; 0x176c <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1e0a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1e0e:	83 ff       	sbrs	r24, 3
    1e10:	29 c0       	rjmp	.+82     	; 0x1e64 <__vector_10+0x17e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1e12:	80 91 e2 00 	lds	r24, 0x00E2
    1e16:	83 ff       	sbrs	r24, 3
    1e18:	25 c0       	rjmp	.+74     	; 0x1e64 <__vector_10+0x17e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1e1a:	80 91 e1 00 	lds	r24, 0x00E1
    1e1e:	87 7f       	andi	r24, 0xF7	; 247
    1e20:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1e24:	82 e0       	ldi	r24, 0x02	; 2
    1e26:	80 93 dd 01 	sts	0x01DD, r24
		USB_Device_ConfigurationNumber = 0;
    1e2a:	10 92 d9 01 	sts	0x01D9, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1e2e:	80 91 e1 00 	lds	r24, 0x00E1
    1e32:	8e 7f       	andi	r24, 0xFE	; 254
    1e34:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1e38:	80 91 e2 00 	lds	r24, 0x00E2
    1e3c:	8e 7f       	andi	r24, 0xFE	; 254
    1e3e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1e42:	80 91 e2 00 	lds	r24, 0x00E2
    1e46:	80 61       	ori	r24, 0x10	; 16
    1e48:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1e4c:	42 e0       	ldi	r20, 0x02	; 2
    1e4e:	60 e0       	ldi	r22, 0x00	; 0
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1e56:	80 91 f0 00 	lds	r24, 0x00F0
    1e5a:	88 60       	ori	r24, 0x08	; 8
    1e5c:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1e60:	0e 94 ac 0b 	call	0x1758	; 0x1758 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1e64:	ff 91       	pop	r31
    1e66:	ef 91       	pop	r30
    1e68:	bf 91       	pop	r27
    1e6a:	af 91       	pop	r26
    1e6c:	9f 91       	pop	r25
    1e6e:	8f 91       	pop	r24
    1e70:	7f 91       	pop	r23
    1e72:	6f 91       	pop	r22
    1e74:	5f 91       	pop	r21
    1e76:	4f 91       	pop	r20
    1e78:	3f 91       	pop	r19
    1e7a:	2f 91       	pop	r18
    1e7c:	0f 90       	pop	r0
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	0f 90       	pop	r0
    1e82:	1f 90       	pop	r1
    1e84:	18 95       	reti

00001e86 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1e86:	1f 92       	push	r1
    1e88:	0f 92       	push	r0
    1e8a:	0f b6       	in	r0, 0x3f	; 63
    1e8c:	0f 92       	push	r0
    1e8e:	11 24       	eor	r1, r1
    1e90:	2f 93       	push	r18
    1e92:	3f 93       	push	r19
    1e94:	4f 93       	push	r20
    1e96:	5f 93       	push	r21
    1e98:	6f 93       	push	r22
    1e9a:	7f 93       	push	r23
    1e9c:	8f 93       	push	r24
    1e9e:	9f 93       	push	r25
    1ea0:	af 93       	push	r26
    1ea2:	bf 93       	push	r27
    1ea4:	cf 93       	push	r28
    1ea6:	ef 93       	push	r30
    1ea8:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1eaa:	c0 91 e9 00 	lds	r28, 0x00E9
    1eae:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1eb0:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1eb4:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1eb8:	80 91 f0 00 	lds	r24, 0x00F0
    1ebc:	87 7f       	andi	r24, 0xF7	; 247
    1ebe:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1ec2:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1ec4:	0e 94 81 10 	call	0x2102	; 0x2102 <USB_Device_ProcessControlRequest>
    1ec8:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1ecc:	80 91 f0 00 	lds	r24, 0x00F0
    1ed0:	88 60       	ori	r24, 0x08	; 8
    1ed2:	80 93 f0 00 	sts	0x00F0, r24
    1ed6:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1eda:	ff 91       	pop	r31
    1edc:	ef 91       	pop	r30
    1ede:	cf 91       	pop	r28
    1ee0:	bf 91       	pop	r27
    1ee2:	af 91       	pop	r26
    1ee4:	9f 91       	pop	r25
    1ee6:	8f 91       	pop	r24
    1ee8:	7f 91       	pop	r23
    1eea:	6f 91       	pop	r22
    1eec:	5f 91       	pop	r21
    1eee:	4f 91       	pop	r20
    1ef0:	3f 91       	pop	r19
    1ef2:	2f 91       	pop	r18
    1ef4:	0f 90       	pop	r0
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	0f 90       	pop	r0
    1efa:	1f 90       	pop	r1
    1efc:	18 95       	reti

00001efe <Endpoint_Write_Stream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1efe:	cf 92       	push	r12
    1f00:	df 92       	push	r13
    1f02:	ef 92       	push	r14
    1f04:	ff 92       	push	r15
    1f06:	0f 93       	push	r16
    1f08:	1f 93       	push	r17
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	7c 01       	movw	r14, r24
    1f10:	8b 01       	movw	r16, r22
    1f12:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1f14:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Endpoint_WaitUntilReady>
    1f18:	81 11       	cpse	r24, r1
    1f1a:	31 c0       	rjmp	.+98     	; 0x1f7e <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1f1c:	20 97       	sbiw	r28, 0x00	; 0
    1f1e:	31 f0       	breq	.+12     	; 0x1f2c <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    1f20:	88 81       	ld	r24, Y
    1f22:	99 81       	ldd	r25, Y+1	; 0x01
    1f24:	08 1b       	sub	r16, r24
    1f26:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1f28:	e8 0e       	add	r14, r24
    1f2a:	f9 1e       	adc	r15, r25
// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1f2c:	c1 2c       	mov	r12, r1
    1f2e:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1f30:	01 15       	cp	r16, r1
    1f32:	11 05       	cpc	r17, r1
    1f34:	19 f1       	breq	.+70     	; 0x1f7c <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1f36:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1f3a:	85 fd       	sbrc	r24, 5
    1f3c:	14 c0       	rjmp	.+40     	; 0x1f66 <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f3e:	80 91 e8 00 	lds	r24, 0x00E8
    1f42:	8e 77       	andi	r24, 0x7E	; 126
    1f44:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1f48:	20 97       	sbiw	r28, 0x00	; 0
    1f4a:	41 f0       	breq	.+16     	; 0x1f5c <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    1f4c:	88 81       	ld	r24, Y
    1f4e:	99 81       	ldd	r25, Y+1	; 0x01
    1f50:	8c 0d       	add	r24, r12
    1f52:	9d 1d       	adc	r25, r13
    1f54:	99 83       	std	Y+1, r25	; 0x01
    1f56:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1f58:	85 e0       	ldi	r24, 0x05	; 5
    1f5a:	11 c0       	rjmp	.+34     	; 0x1f7e <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1f5c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Endpoint_WaitUntilReady>
    1f60:	88 23       	and	r24, r24
    1f62:	31 f3       	breq	.-52     	; 0x1f30 <Endpoint_Write_Stream_LE+0x32>
    1f64:	0c c0       	rjmp	.+24     	; 0x1f7e <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1f66:	f7 01       	movw	r30, r14
    1f68:	81 91       	ld	r24, Z+
    1f6a:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f6c:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1f70:	01 50       	subi	r16, 0x01	; 1
    1f72:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1f74:	ff ef       	ldi	r31, 0xFF	; 255
    1f76:	cf 1a       	sub	r12, r31
    1f78:	df 0a       	sbc	r13, r31
    1f7a:	da cf       	rjmp	.-76     	; 0x1f30 <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
}
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	ff 90       	pop	r15
    1f88:	ef 90       	pop	r14
    1f8a:	df 90       	pop	r13
    1f8c:	cf 90       	pop	r12
    1f8e:	08 95       	ret

00001f90 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1f90:	20 91 e4 01 	lds	r18, 0x01E4
    1f94:	30 91 e5 01 	lds	r19, 0x01E5
    1f98:	26 17       	cp	r18, r22
    1f9a:	37 07       	cpc	r19, r23
    1f9c:	48 f0       	brcs	.+18     	; 0x1fb0 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1f9e:	61 15       	cp	r22, r1
    1fa0:	71 05       	cpc	r23, r1
    1fa2:	39 f4       	brne	.+14     	; 0x1fb2 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fa4:	20 91 e8 00 	lds	r18, 0x00E8
    1fa8:	2e 77       	andi	r18, 0x7E	; 126
    1faa:	20 93 e8 00 	sts	0x00E8, r18
    1fae:	01 c0       	rjmp	.+2      	; 0x1fb2 <Endpoint_Write_Control_Stream_LE+0x22>
    1fb0:	b9 01       	movw	r22, r18
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1fb6:	61 15       	cp	r22, r1
    1fb8:	71 05       	cpc	r23, r1
    1fba:	a9 f1       	breq	.+106    	; 0x2026 <Endpoint_Write_Control_Stream_LE+0x96>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1fbc:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1fc0:	88 23       	and	r24, r24
    1fc2:	e9 f1       	breq	.+122    	; 0x203e <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1fc4:	85 30       	cpi	r24, 0x05	; 5
    1fc6:	e9 f1       	breq	.+122    	; 0x2042 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fc8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1fcc:	83 fd       	sbrc	r24, 3
    1fce:	35 c0       	rjmp	.+106    	; 0x203a <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1fd0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1fd4:	82 ff       	sbrs	r24, 2
    1fd6:	06 c0       	rjmp	.+12     	; 0x1fe4 <Endpoint_Write_Control_Stream_LE+0x54>
    1fd8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1fdc:	82 ff       	sbrs	r24, 2
    1fde:	26 c0       	rjmp	.+76     	; 0x202c <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1fe4:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1fe8:	80 ff       	sbrs	r24, 0
    1fea:	e5 cf       	rjmp	.-54     	; 0x1fb6 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1fec:	20 91 f3 00 	lds	r18, 0x00F3
    1ff0:	80 91 f2 00 	lds	r24, 0x00F2
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1ff8:	61 15       	cp	r22, r1
    1ffa:	71 05       	cpc	r23, r1
    1ffc:	51 f0       	breq	.+20     	; 0x2012 <Endpoint_Write_Control_Stream_LE+0x82>
    1ffe:	88 30       	cpi	r24, 0x08	; 8
    2000:	91 05       	cpc	r25, r1
    2002:	38 f4       	brcc	.+14     	; 0x2012 <Endpoint_Write_Control_Stream_LE+0x82>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2004:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2006:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    200a:	61 50       	subi	r22, 0x01	; 1
    200c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    200e:	01 96       	adiw	r24, 0x01	; 1
    2010:	f3 cf       	rjmp	.-26     	; 0x1ff8 <Endpoint_Write_Control_Stream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2012:	21 e0       	ldi	r18, 0x01	; 1
    2014:	08 97       	sbiw	r24, 0x08	; 8
    2016:	09 f0       	breq	.+2      	; 0x201a <Endpoint_Write_Control_Stream_LE+0x8a>
    2018:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    201a:	80 91 e8 00 	lds	r24, 0x00E8
    201e:	8e 77       	andi	r24, 0x7E	; 126
    2020:	80 93 e8 00 	sts	0x00E8, r24
    2024:	c8 cf       	rjmp	.-112    	; 0x1fb6 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2026:	21 11       	cpse	r18, r1
    2028:	c9 cf       	rjmp	.-110    	; 0x1fbc <Endpoint_Write_Control_Stream_LE+0x2c>
    202a:	d6 cf       	rjmp	.-84     	; 0x1fd8 <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    202c:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2030:	88 23       	and	r24, r24
    2032:	29 f0       	breq	.+10     	; 0x203e <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2034:	85 30       	cpi	r24, 0x05	; 5
    2036:	81 f6       	brne	.-96     	; 0x1fd8 <Endpoint_Write_Control_Stream_LE+0x48>
    2038:	04 c0       	rjmp	.+8      	; 0x2042 <Endpoint_Write_Control_Stream_LE+0xb2>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2042:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2044:	08 95       	ret

00002046 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2046:	20 91 e4 01 	lds	r18, 0x01E4
    204a:	30 91 e5 01 	lds	r19, 0x01E5
    204e:	26 17       	cp	r18, r22
    2050:	37 07       	cpc	r19, r23
    2052:	48 f0       	brcs	.+18     	; 0x2066 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2054:	61 15       	cp	r22, r1
    2056:	71 05       	cpc	r23, r1
    2058:	39 f4       	brne	.+14     	; 0x2068 <Endpoint_Write_Control_PStream_LE+0x22>
    205a:	20 91 e8 00 	lds	r18, 0x00E8
    205e:	2e 77       	andi	r18, 0x7E	; 126
    2060:	20 93 e8 00 	sts	0x00E8, r18
    2064:	01 c0       	rjmp	.+2      	; 0x2068 <Endpoint_Write_Control_PStream_LE+0x22>
    2066:	b9 01       	movw	r22, r18
    2068:	fc 01       	movw	r30, r24
    206a:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    206c:	61 15       	cp	r22, r1
    206e:	71 05       	cpc	r23, r1
    2070:	c1 f1       	breq	.+112    	; 0x20e2 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2072:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2076:	88 23       	and	r24, r24
    2078:	09 f4       	brne	.+2      	; 0x207c <Endpoint_Write_Control_PStream_LE+0x36>
    207a:	3f c0       	rjmp	.+126    	; 0x20fa <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    207c:	85 30       	cpi	r24, 0x05	; 5
    207e:	09 f4       	brne	.+2      	; 0x2082 <Endpoint_Write_Control_PStream_LE+0x3c>
    2080:	3e c0       	rjmp	.+124    	; 0x20fe <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2082:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2086:	83 fd       	sbrc	r24, 3
    2088:	36 c0       	rjmp	.+108    	; 0x20f6 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    208a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    208e:	82 ff       	sbrs	r24, 2
    2090:	06 c0       	rjmp	.+12     	; 0x209e <Endpoint_Write_Control_PStream_LE+0x58>
    2092:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2096:	82 ff       	sbrs	r24, 2
    2098:	27 c0       	rjmp	.+78     	; 0x20e8 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    209e:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    20a2:	80 ff       	sbrs	r24, 0
    20a4:	e3 cf       	rjmp	.-58     	; 0x206c <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    20a6:	20 91 f3 00 	lds	r18, 0x00F3
    20aa:	80 91 f2 00 	lds	r24, 0x00F2
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    20b2:	61 15       	cp	r22, r1
    20b4:	71 05       	cpc	r23, r1
    20b6:	59 f0       	breq	.+22     	; 0x20ce <Endpoint_Write_Control_PStream_LE+0x88>
    20b8:	88 30       	cpi	r24, 0x08	; 8
    20ba:	91 05       	cpc	r25, r1
    20bc:	40 f4       	brcc	.+16     	; 0x20ce <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    20be:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20c0:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    20c4:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    20c6:	61 50       	subi	r22, 0x01	; 1
    20c8:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    20ca:	01 96       	adiw	r24, 0x01	; 1
    20cc:	f2 cf       	rjmp	.-28     	; 0x20b2 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    20ce:	21 e0       	ldi	r18, 0x01	; 1
    20d0:	08 97       	sbiw	r24, 0x08	; 8
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <Endpoint_Write_Control_PStream_LE+0x90>
    20d4:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20d6:	80 91 e8 00 	lds	r24, 0x00E8
    20da:	8e 77       	andi	r24, 0x7E	; 126
    20dc:	80 93 e8 00 	sts	0x00E8, r24
    20e0:	c5 cf       	rjmp	.-118    	; 0x206c <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    20e2:	21 11       	cpse	r18, r1
    20e4:	c6 cf       	rjmp	.-116    	; 0x2072 <Endpoint_Write_Control_PStream_LE+0x2c>
    20e6:	d5 cf       	rjmp	.-86     	; 0x2092 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    20e8:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    20ec:	88 23       	and	r24, r24
    20ee:	29 f0       	breq	.+10     	; 0x20fa <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    20f0:	85 30       	cpi	r24, 0x05	; 5
    20f2:	79 f6       	brne	.-98     	; 0x2092 <Endpoint_Write_Control_PStream_LE+0x4c>
    20f4:	04 c0       	rjmp	.+8      	; 0x20fe <Endpoint_Write_Control_PStream_LE+0xb8>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    20fa:	82 e0       	ldi	r24, 0x02	; 2
    20fc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    20fe:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2100:	08 95       	ret

00002102 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2102:	0f 93       	push	r16
    2104:	1f 93       	push	r17
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	aa 97       	sbiw	r28, 0x2a	; 42
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	f8 94       	cli
    2114:	de bf       	out	0x3e, r29	; 62
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	cd bf       	out	0x3d, r28	; 61
    211a:	ee ed       	ldi	r30, 0xDE	; 222
    211c:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    211e:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2122:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2124:	21 e0       	ldi	r18, 0x01	; 1
    2126:	e6 3e       	cpi	r30, 0xE6	; 230
    2128:	f2 07       	cpc	r31, r18
    212a:	c9 f7       	brne	.-14     	; 0x211e <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    212c:	0e 94 03 0c 	call	0x1806	; 0x1806 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2130:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    2134:	83 ff       	sbrs	r24, 3
    2136:	1d c1       	rjmp	.+570    	; 0x2372 <USB_Device_ProcessControlRequest+0x270>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2138:	20 91 de 01 	lds	r18, 0x01DE

		switch (USB_ControlRequest.bRequest)
    213c:	30 91 df 01 	lds	r19, 0x01DF
    2140:	83 2f       	mov	r24, r19
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	8a 30       	cpi	r24, 0x0A	; 10
    2146:	91 05       	cpc	r25, r1
    2148:	08 f0       	brcs	.+2      	; 0x214c <USB_Device_ProcessControlRequest+0x4a>
    214a:	13 c1       	rjmp	.+550    	; 0x2372 <USB_Device_ProcessControlRequest+0x270>
    214c:	fc 01       	movw	r30, r24
    214e:	ea 5a       	subi	r30, 0xAA	; 170
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	0c 94 d7 2c 	jmp	0x59ae	; 0x59ae <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2156:	20 38       	cpi	r18, 0x80	; 128
    2158:	81 f0       	breq	.+32     	; 0x217a <USB_Device_ProcessControlRequest+0x78>
    215a:	22 38       	cpi	r18, 0x82	; 130
    215c:	09 f0       	breq	.+2      	; 0x2160 <USB_Device_ProcessControlRequest+0x5e>
    215e:	09 c1       	rjmp	.+530    	; 0x2372 <USB_Device_ProcessControlRequest+0x270>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2160:	80 91 e2 01 	lds	r24, 0x01E2
    2164:	8f 70       	andi	r24, 0x0F	; 15
    2166:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    216a:	80 91 eb 00 	lds	r24, 0x00EB
    216e:	85 fb       	bst	r24, 5
    2170:	88 27       	eor	r24, r24
    2172:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2174:	10 92 e9 00 	sts	0x00E9, r1
    2178:	06 c0       	rjmp	.+12     	; 0x2186 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    217a:	80 91 da 01 	lds	r24, 0x01DA
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    217e:	90 91 db 01 	lds	r25, 0x01DB
    2182:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2184:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2186:	90 91 e8 00 	lds	r25, 0x00E8
    218a:	97 7f       	andi	r25, 0xF7	; 247
    218c:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2190:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    2194:	10 92 f1 00 	sts	0x00F1, r1
    2198:	c6 c0       	rjmp	.+396    	; 0x2326 <USB_Device_ProcessControlRequest+0x224>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    219a:	82 2f       	mov	r24, r18
    219c:	8d 7f       	andi	r24, 0xFD	; 253
    219e:	09 f0       	breq	.+2      	; 0x21a2 <USB_Device_ProcessControlRequest+0xa0>
    21a0:	e8 c0       	rjmp	.+464    	; 0x2372 <USB_Device_ProcessControlRequest+0x270>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    21a2:	22 23       	and	r18, r18
    21a4:	19 f0       	breq	.+6      	; 0x21ac <USB_Device_ProcessControlRequest+0xaa>
    21a6:	22 30       	cpi	r18, 0x02	; 2
    21a8:	61 f0       	breq	.+24     	; 0x21c2 <USB_Device_ProcessControlRequest+0xc0>
    21aa:	e3 c0       	rjmp	.+454    	; 0x2372 <USB_Device_ProcessControlRequest+0x270>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    21ac:	80 91 e0 01 	lds	r24, 0x01E0
    21b0:	81 30       	cpi	r24, 0x01	; 1
    21b2:	09 f0       	breq	.+2      	; 0x21b6 <USB_Device_ProcessControlRequest+0xb4>
    21b4:	de c0       	rjmp	.+444    	; 0x2372 <USB_Device_ProcessControlRequest+0x270>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    21b6:	33 30       	cpi	r19, 0x03	; 3
    21b8:	09 f0       	breq	.+2      	; 0x21bc <USB_Device_ProcessControlRequest+0xba>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	80 93 db 01 	sts	0x01DB, r24
    21c0:	28 c0       	rjmp	.+80     	; 0x2212 <USB_Device_ProcessControlRequest+0x110>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    21c2:	80 91 e0 01 	lds	r24, 0x01E0
    21c6:	81 11       	cpse	r24, r1
    21c8:	24 c0       	rjmp	.+72     	; 0x2212 <USB_Device_ProcessControlRequest+0x110>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    21ca:	20 91 e2 01 	lds	r18, 0x01E2
    21ce:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <USB_Device_ProcessControlRequest+0xd2>
    21d2:	cf c0       	rjmp	.+414    	; 0x2372 <USB_Device_ProcessControlRequest+0x270>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21d4:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    21d8:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    21dc:	80 ff       	sbrs	r24, 0
    21de:	19 c0       	rjmp	.+50     	; 0x2212 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    21e0:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    21e4:	33 30       	cpi	r19, 0x03	; 3
    21e6:	11 f4       	brne	.+4      	; 0x21ec <USB_Device_ProcessControlRequest+0xea>
    21e8:	80 62       	ori	r24, 0x20	; 32
    21ea:	11 c0       	rjmp	.+34     	; 0x220e <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    21ec:	80 61       	ori	r24, 0x10	; 16
    21ee:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	02 2e       	mov	r0, r18
    21f8:	01 c0       	rjmp	.+2      	; 0x21fc <USB_Device_ProcessControlRequest+0xfa>
    21fa:	88 0f       	add	r24, r24
    21fc:	0a 94       	dec	r0
    21fe:	ea f7       	brpl	.-6      	; 0x21fa <USB_Device_ProcessControlRequest+0xf8>
    2200:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    2204:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2208:	80 91 eb 00 	lds	r24, 0x00EB
    220c:	88 60       	ori	r24, 0x08	; 8
    220e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2212:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2216:	80 91 e8 00 	lds	r24, 0x00E8
    221a:	87 7f       	andi	r24, 0xF7	; 247
    221c:	87 c0       	rjmp	.+270    	; 0x232c <USB_Device_ProcessControlRequest+0x22a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    221e:	21 11       	cpse	r18, r1
    2220:	a8 c0       	rjmp	.+336    	; 0x2372 <USB_Device_ProcessControlRequest+0x270>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    2222:	10 91 e0 01 	lds	r17, 0x01E0
    2226:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2228:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    222a:	f8 94       	cli
    222c:	80 91 e8 00 	lds	r24, 0x00E8
    2230:	87 7f       	andi	r24, 0xF7	; 247
    2232:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2236:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    223a:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    223e:	80 ff       	sbrs	r24, 0
    2240:	fc cf       	rjmp	.-8      	; 0x223a <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2242:	80 91 e3 00 	lds	r24, 0x00E3
    2246:	80 78       	andi	r24, 0x80	; 128
    2248:	81 2b       	or	r24, r17

				UDADDR = Temp;
    224a:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    224e:	80 68       	ori	r24, 0x80	; 128
    2250:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2254:	11 23       	and	r17, r17
    2256:	11 f0       	breq	.+4      	; 0x225c <USB_Device_ProcessControlRequest+0x15a>
    2258:	83 e0       	ldi	r24, 0x03	; 3
    225a:	01 c0       	rjmp	.+2      	; 0x225e <USB_Device_ProcessControlRequest+0x15c>
    225c:	82 e0       	ldi	r24, 0x02	; 2
    225e:	80 93 dd 01 	sts	0x01DD, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2262:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    2264:	86 c0       	rjmp	.+268    	; 0x2372 <USB_Device_ProcessControlRequest+0x270>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2266:	20 58       	subi	r18, 0x80	; 128
    2268:	22 30       	cpi	r18, 0x02	; 2
    226a:	08 f0       	brcs	.+2      	; 0x226e <USB_Device_ProcessControlRequest+0x16c>
    226c:	82 c0       	rjmp	.+260    	; 0x2372 <USB_Device_ProcessControlRequest+0x270>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    226e:	80 91 e0 01 	lds	r24, 0x01E0
    2272:	90 91 e1 01 	lds	r25, 0x01E1
    2276:	8c 3d       	cpi	r24, 0xDC	; 220
    2278:	23 e0       	ldi	r18, 0x03	; 3
    227a:	92 07       	cpc	r25, r18
    227c:	79 f5       	brne	.+94     	; 0x22dc <USB_Device_ProcessControlRequest+0x1da>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    227e:	83 e0       	ldi	r24, 0x03	; 3
    2280:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2282:	8a e2       	ldi	r24, 0x2A	; 42
    2284:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2286:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2288:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    228a:	de 01       	movw	r26, r28
    228c:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    228e:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2290:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2292:	51 e2       	ldi	r21, 0x21	; 33
    2294:	e3 2f       	mov	r30, r19
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	50 93 57 00 	sts	0x0057, r21
    229c:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    229e:	20 ff       	sbrs	r18, 0
    22a0:	03 c0       	rjmp	.+6      	; 0x22a8 <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
    22a2:	e2 95       	swap	r30
    22a4:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    22a6:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    22a8:	ef 70       	andi	r30, 0x0F	; 15
    22aa:	8e 2f       	mov	r24, r30
    22ac:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    22ae:	ea 30       	cpi	r30, 0x0A	; 10
    22b0:	10 f0       	brcs	.+4      	; 0x22b6 <USB_Device_ProcessControlRequest+0x1b4>
    22b2:	c7 96       	adiw	r24, 0x37	; 55
    22b4:	01 c0       	rjmp	.+2      	; 0x22b8 <USB_Device_ProcessControlRequest+0x1b6>
    22b6:	c0 96       	adiw	r24, 0x30	; 48
    22b8:	8d 93       	st	X+, r24
    22ba:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    22bc:	2f 5f       	subi	r18, 0xFF	; 255
    22be:	24 31       	cpi	r18, 0x14	; 20
    22c0:	49 f7       	brne	.-46     	; 0x2294 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    22c2:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22c4:	80 91 e8 00 	lds	r24, 0x00E8
    22c8:	87 7f       	andi	r24, 0xF7	; 247
    22ca:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    22ce:	6a e2       	ldi	r22, 0x2A	; 42
    22d0:	70 e0       	ldi	r23, 0x00	; 0
    22d2:	ce 01       	movw	r24, r28
    22d4:	01 96       	adiw	r24, 0x01	; 1
    22d6:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <Endpoint_Write_Control_Stream_LE>
    22da:	14 c0       	rjmp	.+40     	; 0x2304 <USB_Device_ProcessControlRequest+0x202>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    22dc:	ae 01       	movw	r20, r28
    22de:	4f 5f       	subi	r20, 0xFF	; 255
    22e0:	5f 4f       	sbci	r21, 0xFF	; 255
    22e2:	60 91 e2 01 	lds	r22, 0x01E2
    22e6:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <CALLBACK_USB_GetDescriptor>
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <USB_Device_ProcessControlRequest+0x1ee>
    22ee:	41 c0       	rjmp	.+130    	; 0x2372 <USB_Device_ProcessControlRequest+0x270>
    22f0:	20 91 e8 00 	lds	r18, 0x00E8
    22f4:	27 7f       	andi	r18, 0xF7	; 247
    22f6:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    22fa:	bc 01       	movw	r22, r24
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2300:	0e 94 23 10 	call	0x2046	; 0x2046 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2304:	80 91 e8 00 	lds	r24, 0x00E8
    2308:	8b 77       	andi	r24, 0x7B	; 123
    230a:	80 93 e8 00 	sts	0x00E8, r24
    230e:	31 c0       	rjmp	.+98     	; 0x2372 <USB_Device_ProcessControlRequest+0x270>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2310:	20 38       	cpi	r18, 0x80	; 128
    2312:	79 f5       	brne	.+94     	; 0x2372 <USB_Device_ProcessControlRequest+0x270>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2314:	80 91 e8 00 	lds	r24, 0x00E8
    2318:	87 7f       	andi	r24, 0xF7	; 247
    231a:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    231e:	80 91 d9 01 	lds	r24, 0x01D9
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2322:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2326:	80 91 e8 00 	lds	r24, 0x00E8
    232a:	8e 77       	andi	r24, 0x7E	; 126
    232c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2330:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <Endpoint_ClearStatusStage>
    2334:	1e c0       	rjmp	.+60     	; 0x2372 <USB_Device_ProcessControlRequest+0x270>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2336:	21 11       	cpse	r18, r1
    2338:	1c c0       	rjmp	.+56     	; 0x2372 <USB_Device_ProcessControlRequest+0x270>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    233a:	90 91 e0 01 	lds	r25, 0x01E0
    233e:	92 30       	cpi	r25, 0x02	; 2
    2340:	c0 f4       	brcc	.+48     	; 0x2372 <USB_Device_ProcessControlRequest+0x270>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2342:	80 91 e8 00 	lds	r24, 0x00E8
    2346:	87 7f       	andi	r24, 0xF7	; 247
    2348:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    234c:	90 93 d9 01 	sts	0x01D9, r25

	Endpoint_ClearStatusStage();
    2350:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2354:	80 91 d9 01 	lds	r24, 0x01D9
    2358:	81 11       	cpse	r24, r1
    235a:	04 c0       	rjmp	.+8      	; 0x2364 <USB_Device_ProcessControlRequest+0x262>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    235c:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2360:	87 ff       	sbrs	r24, 7
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <USB_Device_ProcessControlRequest+0x266>
    2364:	84 e0       	ldi	r24, 0x04	; 4
    2366:	01 c0       	rjmp	.+2      	; 0x236a <USB_Device_ProcessControlRequest+0x268>
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	80 93 dd 01 	sts	0x01DD, r24

	EVENT_USB_Device_ConfigurationChanged();
    236e:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2372:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2376:	83 ff       	sbrs	r24, 3
    2378:	0a c0       	rjmp	.+20     	; 0x238e <USB_Device_ProcessControlRequest+0x28c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    237a:	80 91 eb 00 	lds	r24, 0x00EB
    237e:	80 62       	ori	r24, 0x20	; 32
    2380:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2384:	80 91 e8 00 	lds	r24, 0x00E8
    2388:	87 7f       	andi	r24, 0xF7	; 247
    238a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    238e:	aa 96       	adiw	r28, 0x2a	; 42
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	de bf       	out	0x3e, r29	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	cd bf       	out	0x3d, r28	; 61
    239a:	df 91       	pop	r29
    239c:	cf 91       	pop	r28
    239e:	1f 91       	pop	r17
    23a0:	0f 91       	pop	r16
    23a2:	08 95       	ret

000023a4 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    23a4:	90 93 64 01 	sts	0x0164, r25
    23a8:	80 93 63 01 	sts	0x0163, r24
    23ac:	08 95       	ret

000023ae <host_get_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    23ae:	80 91 63 01 	lds	r24, 0x0163
    23b2:	90 91 64 01 	lds	r25, 0x0164
    23b6:	08 95       	ret

000023b8 <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    23b8:	e0 91 63 01 	lds	r30, 0x0163
    23bc:	f0 91 64 01 	lds	r31, 0x0164
    23c0:	30 97       	sbiw	r30, 0x00	; 0
    23c2:	21 f0       	breq	.+8      	; 0x23cc <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    23c4:	01 90       	ld	r0, Z+
    23c6:	f0 81       	ld	r31, Z
    23c8:	e0 2d       	mov	r30, r0
    23ca:	09 94       	ijmp
}
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	08 95       	ret

000023d0 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    23d0:	ff 92       	push	r15
    23d2:	0f 93       	push	r16
    23d4:	1f 93       	push	r17
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	8c 01       	movw	r16, r24
    if (!driver) return;
    23dc:	e0 91 63 01 	lds	r30, 0x0163
    23e0:	f0 91 64 01 	lds	r31, 0x0164
    23e4:	30 97       	sbiw	r30, 0x00	; 0
    23e6:	99 f1       	breq	.+102    	; 0x244e <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    23e8:	02 80       	ldd	r0, Z+2	; 0x02
    23ea:	f3 81       	ldd	r31, Z+3	; 0x03
    23ec:	e0 2d       	mov	r30, r0
    23ee:	09 95       	icall

    if (debug_keyboard) {
    23f0:	80 91 c3 01 	lds	r24, 0x01C3
    23f4:	82 ff       	sbrs	r24, 2
    23f6:	2b c0       	rjmp	.+86     	; 0x244e <host_keyboard_send+0x7e>
        dprint("keyboard_report: ");
    23f8:	80 ff       	sbrs	r24, 0
    23fa:	04 c0       	rjmp	.+8      	; 0x2404 <host_keyboard_send+0x34>
    23fc:	8b e0       	ldi	r24, 0x0B	; 11
    23fe:	94 e0       	ldi	r25, 0x04	; 4
    2400:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    2404:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2406:	80 e1       	ldi	r24, 0x10	; 16
    2408:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    240a:	05 e0       	ldi	r16, 0x05	; 5
    240c:	14 e0       	ldi	r17, 0x04	; 4
    240e:	80 91 c3 01 	lds	r24, 0x01C3
    2412:	80 ff       	sbrs	r24, 0
    2414:	0b c0       	rjmp	.+22     	; 0x242c <host_keyboard_send+0x5c>
    2416:	88 81       	ld	r24, Y
    2418:	1f 92       	push	r1
    241a:	8f 93       	push	r24
    241c:	1f 93       	push	r17
    241e:	0f 93       	push	r16
    2420:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	fa 94       	dec	r15
    242e:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    2430:	f1 10       	cpse	r15, r1
    2432:	ed cf       	rjmp	.-38     	; 0x240e <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2434:	80 91 c3 01 	lds	r24, 0x01C3
    2438:	80 ff       	sbrs	r24, 0
    243a:	09 c0       	rjmp	.+18     	; 0x244e <host_keyboard_send+0x7e>
    243c:	83 e0       	ldi	r24, 0x03	; 3
    243e:	94 e0       	ldi	r25, 0x04	; 4
    }
}
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	1f 91       	pop	r17
    2446:	0f 91       	pop	r16
    2448:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    244a:	0c 94 11 08 	jmp	0x1022	; 0x1022 <xputs>
    }
}
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	1f 91       	pop	r17
    2454:	0f 91       	pop	r16
    2456:	ff 90       	pop	r15
    2458:	08 95       	ret

0000245a <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    245a:	e0 91 63 01 	lds	r30, 0x0163
    245e:	f0 91 64 01 	lds	r31, 0x0164
    2462:	30 97       	sbiw	r30, 0x00	; 0
    2464:	21 f0       	breq	.+8      	; 0x246e <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2466:	04 80       	ldd	r0, Z+4	; 0x04
    2468:	f5 81       	ldd	r31, Z+5	; 0x05
    246a:	e0 2d       	mov	r30, r0
    246c:	09 94       	ijmp
    246e:	08 95       	ret

00002470 <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    2470:	20 91 61 01 	lds	r18, 0x0161
    2474:	30 91 62 01 	lds	r19, 0x0162
    2478:	82 17       	cp	r24, r18
    247a:	93 07       	cpc	r25, r19
    247c:	71 f0       	breq	.+28     	; 0x249a <host_system_send+0x2a>
    last_system_report = report;
    247e:	90 93 62 01 	sts	0x0162, r25
    2482:	80 93 61 01 	sts	0x0161, r24

    if (!driver) return;
    2486:	e0 91 63 01 	lds	r30, 0x0163
    248a:	f0 91 64 01 	lds	r31, 0x0164
    248e:	30 97       	sbiw	r30, 0x00	; 0
    2490:	21 f0       	breq	.+8      	; 0x249a <host_system_send+0x2a>
    (*driver->send_system)(report);
    2492:	06 80       	ldd	r0, Z+6	; 0x06
    2494:	f7 81       	ldd	r31, Z+7	; 0x07
    2496:	e0 2d       	mov	r30, r0
    2498:	09 94       	ijmp
    249a:	08 95       	ret

0000249c <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    249c:	20 91 5f 01 	lds	r18, 0x015F
    24a0:	30 91 60 01 	lds	r19, 0x0160
    24a4:	82 17       	cp	r24, r18
    24a6:	93 07       	cpc	r25, r19
    24a8:	71 f0       	breq	.+28     	; 0x24c6 <host_consumer_send+0x2a>
    last_consumer_report = report;
    24aa:	90 93 60 01 	sts	0x0160, r25
    24ae:	80 93 5f 01 	sts	0x015F, r24

    if (!driver) return;
    24b2:	e0 91 63 01 	lds	r30, 0x0163
    24b6:	f0 91 64 01 	lds	r31, 0x0164
    24ba:	30 97       	sbiw	r30, 0x00	; 0
    24bc:	21 f0       	breq	.+8      	; 0x24c6 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    24be:	00 84       	ldd	r0, Z+8	; 0x08
    24c0:	f1 85       	ldd	r31, Z+9	; 0x09
    24c2:	e0 2d       	mov	r30, r0
    24c4:	09 94       	ijmp
    24c6:	08 95       	ret

000024c8 <keyboard_init>:
#endif


void keyboard_init(void)
{
    timer_init();
    24c8:	0e 94 16 20 	call	0x402c	; 0x402c <timer_init>
    matrix_init();
    24cc:	0e 94 d6 08 	call	0x11ac	; 0x11ac <matrix_init>
    serial_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    24d0:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <bootmagic>

000024d4 <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    24d4:	cf 93       	push	r28
    24d6:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    24d8:	80 91 c3 01 	lds	r24, 0x01C3
    24dc:	82 ff       	sbrs	r24, 2
    24de:	1e c0       	rjmp	.+60     	; 0x251c <keyboard_set_leds+0x48>
    24e0:	80 ff       	sbrs	r24, 0
    24e2:	04 c0       	rjmp	.+8      	; 0x24ec <keyboard_set_leds+0x18>
    24e4:	84 e2       	ldi	r24, 0x24	; 36
    24e6:	94 e0       	ldi	r25, 0x04	; 4
    24e8:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    24ec:	80 91 c3 01 	lds	r24, 0x01C3
    24f0:	80 ff       	sbrs	r24, 0
    24f2:	0c c0       	rjmp	.+24     	; 0x250c <keyboard_set_leds+0x38>
    24f4:	1f 92       	push	r1
    24f6:	cf 93       	push	r28
    24f8:	2f e1       	ldi	r18, 0x1F	; 31
    24fa:	34 e0       	ldi	r19, 0x04	; 4
    24fc:	3f 93       	push	r19
    24fe:	2f 93       	push	r18
    2500:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	80 91 c3 01 	lds	r24, 0x01C3
    2510:	80 ff       	sbrs	r24, 0
    2512:	04 c0       	rjmp	.+8      	; 0x251c <keyboard_set_leds+0x48>
    2514:	8d e1       	ldi	r24, 0x1D	; 29
    2516:	94 e0       	ldi	r25, 0x04	; 4
    2518:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    led_set(leds);
    251c:	8c 2f       	mov	r24, r28
}
    251e:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    2520:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <led_set>

00002524 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    2524:	5f 92       	push	r5
    2526:	6f 92       	push	r6
    2528:	7f 92       	push	r7
    252a:	8f 92       	push	r8
    252c:	9f 92       	push	r9
    252e:	af 92       	push	r10
    2530:	bf 92       	push	r11
    2532:	cf 92       	push	r12
    2534:	df 92       	push	r13
    2536:	ef 92       	push	r14
    2538:	ff 92       	push	r15
    253a:	0f 93       	push	r16
    253c:	1f 93       	push	r17
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	2a 97       	sbiw	r28, 0x0a	; 10
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    static matrix_row_t matrix_prev[MATRIX_ROWS];
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2552:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <matrix_scan>
    2556:	96 e6       	ldi	r25, 0x66	; 102
    2558:	c9 2e       	mov	r12, r25
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	d9 2e       	mov	r13, r25
    255e:	00 e0       	ldi	r16, 0x00	; 0
    2560:	10 e0       	ldi	r17, 0x00	; 0
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2562:	aa 24       	eor	r10, r10
    2564:	a3 94       	inc	r10
    2566:	b1 2c       	mov	r11, r1
    2568:	50 2e       	mov	r5, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    256a:	80 2f       	mov	r24, r16
    256c:	0e 94 13 0a 	call	0x1426	; 0x1426 <matrix_get_row>
    2570:	3c 01       	movw	r6, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2572:	f6 01       	movw	r30, r12
    2574:	e1 90       	ld	r14, Z+
    2576:	f1 90       	ld	r15, Z+
    2578:	6f 01       	movw	r12, r30
    257a:	e8 26       	eor	r14, r24
    257c:	f9 26       	eor	r15, r25
        if (matrix_change) {
    257e:	e1 14       	cp	r14, r1
    2580:	f1 04       	cpc	r15, r1
    2582:	b1 f4       	brne	.+44     	; 0x25b0 <keyboard_task+0x8c>
    2584:	0f 5f       	subi	r16, 0xFF	; 255
    2586:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2588:	05 30       	cpi	r16, 0x05	; 5
    258a:	11 05       	cpc	r17, r1
    258c:	69 f7       	brne	.-38     	; 0x2568 <keyboard_task+0x44>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    258e:	8f ef       	ldi	r24, 0xFF	; 255
    2590:	89 83       	std	Y+1, r24	; 0x01
    2592:	8a 83       	std	Y+2, r24	; 0x02
    2594:	1b 82       	std	Y+3, r1	; 0x03
    2596:	0e 94 1f 20 	call	0x403e	; 0x403e <timer_read>
    259a:	81 60       	ori	r24, 0x01	; 1
    259c:	78 2f       	mov	r23, r24
    259e:	9d 83       	std	Y+5, r25	; 0x05
    25a0:	8c 83       	std	Y+4, r24	; 0x04
    25a2:	49 81       	ldd	r20, Y+1	; 0x01
    25a4:	5a 81       	ldd	r21, Y+2	; 0x02
    25a6:	6b 81       	ldd	r22, Y+3	; 0x03
    25a8:	8d 81       	ldd	r24, Y+5	; 0x05
    25aa:	0e 94 4b 13 	call	0x2696	; 0x2696 <action_exec>
    25ae:	3a c0       	rjmp	.+116    	; 0x2624 <keyboard_task+0x100>
    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
        matrix_change = matrix_row ^ matrix_prev[r];
        if (matrix_change) {
            if (debug_matrix) matrix_print();
    25b0:	80 91 c3 01 	lds	r24, 0x01C3
    25b4:	81 fd       	sbrc	r24, 1
    25b6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <matrix_print>
    static matrix_row_t matrix_prev[MATRIX_ROWS];
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    25be:	45 01       	movw	r8, r10
    25c0:	02 2e       	mov	r0, r18
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <keyboard_task+0xa4>
    25c4:	88 0c       	add	r8, r8
    25c6:	99 1c       	adc	r9, r9
    25c8:	0a 94       	dec	r0
    25ca:	e2 f7       	brpl	.-8      	; 0x25c4 <keyboard_task+0xa0>
    25cc:	c4 01       	movw	r24, r8
    25ce:	8e 21       	and	r24, r14
    25d0:	9f 21       	and	r25, r15
    25d2:	89 2b       	or	r24, r25
    25d4:	09 f1       	breq	.+66     	; 0x2618 <keyboard_task+0xf4>
                    action_exec((keyevent_t){
    25d6:	2e 83       	std	Y+6, r18	; 0x06
    25d8:	5f 82       	std	Y+7, r5	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    25da:	68 20       	and	r6, r8
    25dc:	79 20       	and	r7, r9
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	67 28       	or	r6, r7
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <keyboard_task+0xc2>
    25e4:	80 e0       	ldi	r24, 0x00	; 0
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    25e6:	88 87       	std	Y+8, r24	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    25e8:	0e 94 1f 20 	call	0x403e	; 0x403e <timer_read>
    25ec:	81 60       	ori	r24, 0x01	; 1
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    25ee:	78 2f       	mov	r23, r24
    25f0:	9a 87       	std	Y+10, r25	; 0x0a
    25f2:	89 87       	std	Y+9, r24	; 0x09
    25f4:	4e 81       	ldd	r20, Y+6	; 0x06
    25f6:	5f 81       	ldd	r21, Y+7	; 0x07
    25f8:	68 85       	ldd	r22, Y+8	; 0x08
    25fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    25fc:	0e 94 4b 13 	call	0x2696	; 0x2696 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    2600:	f8 01       	movw	r30, r16
    2602:	ee 0f       	add	r30, r30
    2604:	ff 1f       	adc	r31, r31
    2606:	ea 59       	subi	r30, 0x9A	; 154
    2608:	fe 4f       	sbci	r31, 0xFE	; 254
    260a:	80 81       	ld	r24, Z
    260c:	91 81       	ldd	r25, Z+1	; 0x01
    260e:	88 25       	eor	r24, r8
    2610:	99 25       	eor	r25, r9
    2612:	91 83       	std	Z+1, r25	; 0x01
    2614:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    2616:	06 c0       	rjmp	.+12     	; 0x2624 <keyboard_task+0x100>
    2618:	2f 5f       	subi	r18, 0xFF	; 255
    261a:	3f 4f       	sbci	r19, 0xFF	; 255
            if (has_ghost_in_row(r)) {
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    261c:	2f 30       	cpi	r18, 0x0F	; 15
    261e:	31 05       	cpc	r19, r1
    2620:	71 f6       	brne	.-100    	; 0x25be <keyboard_task+0x9a>
    2622:	b0 cf       	rjmp	.-160    	; 0x2584 <keyboard_task+0x60>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    2624:	0e 94 51 24 	call	0x48a2	; 0x48a2 <mousekey_task>
#ifdef SERIAL_MOUSE_ENABLE
        serial_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2628:	10 91 65 01 	lds	r17, 0x0165
    262c:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <host_keyboard_leds>
    2630:	18 17       	cp	r17, r24
    2632:	d9 f0       	breq	.+54     	; 0x266a <keyboard_task+0x146>
        led_status = host_keyboard_leds();
    2634:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <host_keyboard_leds>
    2638:	80 93 65 01 	sts	0x0165, r24
        keyboard_set_leds(led_status);
    }
}
    263c:	2a 96       	adiw	r28, 0x0a	; 10
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	ff 90       	pop	r15
    2652:	ef 90       	pop	r14
    2654:	df 90       	pop	r13
    2656:	cf 90       	pop	r12
    2658:	bf 90       	pop	r11
    265a:	af 90       	pop	r10
    265c:	9f 90       	pop	r9
    265e:	8f 90       	pop	r8
    2660:	7f 90       	pop	r7
    2662:	6f 90       	pop	r6
    2664:	5f 90       	pop	r5
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    2666:	0c 94 6a 12 	jmp	0x24d4	; 0x24d4 <keyboard_set_leds>
    }
}
    266a:	2a 96       	adiw	r28, 0x0a	; 10
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	df 91       	pop	r29
    2678:	cf 91       	pop	r28
    267a:	1f 91       	pop	r17
    267c:	0f 91       	pop	r16
    267e:	ff 90       	pop	r15
    2680:	ef 90       	pop	r14
    2682:	df 90       	pop	r13
    2684:	cf 90       	pop	r12
    2686:	bf 90       	pop	r11
    2688:	af 90       	pop	r10
    268a:	9f 90       	pop	r9
    268c:	8f 90       	pop	r8
    268e:	7f 90       	pop	r7
    2690:	6f 90       	pop	r6
    2692:	5f 90       	pop	r5
    2694:	08 95       	ret

00002696 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2696:	cf 93       	push	r28
    2698:	df 93       	push	r29
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	2b 97       	sbiw	r28, 0x0b	; 11
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	4f 83       	std	Y+7, r20	; 0x07
    26ac:	58 87       	std	Y+8, r21	; 0x08
    26ae:	69 87       	std	Y+9, r22	; 0x09
    26b0:	7a 87       	std	Y+10, r23	; 0x0a
    26b2:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    26b4:	de 01       	movw	r26, r28
    26b6:	11 96       	adiw	r26, 0x01	; 1
    26b8:	86 e0       	ldi	r24, 0x06	; 6
    26ba:	fd 01       	movw	r30, r26
    26bc:	11 92       	st	Z+, r1
    26be:	8a 95       	dec	r24
    26c0:	e9 f7       	brne	.-6      	; 0x26bc <action_exec+0x26>
    26c2:	85 e0       	ldi	r24, 0x05	; 5
    26c4:	fe 01       	movw	r30, r28
    26c6:	37 96       	adiw	r30, 0x07	; 7
    26c8:	01 90       	ld	r0, Z+
    26ca:	0d 92       	st	X+, r0
    26cc:	8a 95       	dec	r24
    26ce:	e1 f7       	brne	.-8      	; 0x26c8 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    26d0:	49 81       	ldd	r20, Y+1	; 0x01
    26d2:	5a 81       	ldd	r21, Y+2	; 0x02
    26d4:	6b 81       	ldd	r22, Y+3	; 0x03
    26d6:	7c 81       	ldd	r23, Y+4	; 0x04
    26d8:	8d 81       	ldd	r24, Y+5	; 0x05
    26da:	9e 81       	ldd	r25, Y+6	; 0x06
    26dc:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    26e0:	2b 96       	adiw	r28, 0x0b	; 11
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	08 95       	ret

000026f2 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    26f2:	cf 93       	push	r28
    26f4:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    26f6:	88 23       	and	r24, r24
    26f8:	09 f4       	brne	.+2      	; 0x26fc <register_code+0xa>
    26fa:	c1 c0       	rjmp	.+386    	; 0x287e <register_code+0x18c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE    
    else if (KC_LOCKING_CAPS == code) {
    26fc:	82 38       	cpi	r24, 0x82	; 130
    26fe:	59 f4       	brne	.+22     	; 0x2716 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    2700:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <host_keyboard_leds>
    2704:	81 fd       	sbrc	r24, 1
    2706:	bb c0       	rjmp	.+374    	; 0x287e <register_code+0x18c>
#endif
        add_key(KC_CAPSLOCK);
    2708:	89 e3       	ldi	r24, 0x39	; 57
    270a:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <add_key>
        send_keyboard_report();
    270e:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    2712:	89 e3       	ldi	r24, 0x39	; 57
    2714:	0c c0       	rjmp	.+24     	; 0x272e <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2716:	83 38       	cpi	r24, 0x83	; 131
    2718:	79 f4       	brne	.+30     	; 0x2738 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    271a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <host_keyboard_leds>
    271e:	80 fd       	sbrc	r24, 0
    2720:	ae c0       	rjmp	.+348    	; 0x287e <register_code+0x18c>
#endif
        add_key(KC_NUMLOCK);
    2722:	83 e5       	ldi	r24, 0x53	; 83
    2724:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <add_key>
        send_keyboard_report();
    2728:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <send_keyboard_report>
        del_key(KC_NUMLOCK);
    272c:	83 e5       	ldi	r24, 0x53	; 83
    272e:	0e 94 66 1d 	call	0x3acc	; 0x3acc <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2732:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    2734:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2738:	84 38       	cpi	r24, 0x84	; 132
    273a:	59 f4       	brne	.+22     	; 0x2752 <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    273c:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <host_keyboard_leds>
    2740:	82 fd       	sbrc	r24, 2
    2742:	9d c0       	rjmp	.+314    	; 0x287e <register_code+0x18c>
#endif
        add_key(KC_SCROLLLOCK);
    2744:	87 e4       	ldi	r24, 0x47	; 71
    2746:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <add_key>
        send_keyboard_report();
    274a:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    274e:	87 e4       	ldi	r24, 0x47	; 71
    2750:	ee cf       	rjmp	.-36     	; 0x272e <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2752:	8c ef       	ldi	r24, 0xFC	; 252
    2754:	8c 0f       	add	r24, r28
    2756:	81 3a       	cpi	r24, 0xA1	; 161
    2758:	48 f4       	brcc	.+18     	; 0x276c <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    275a:	8c 2f       	mov	r24, r28
    275c:	0e 94 31 2a 	call	0x5462	; 0x5462 <command_proc>
    2760:	81 11       	cpse	r24, r1
    2762:	8d c0       	rjmp	.+282    	; 0x287e <register_code+0x18c>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2764:	8c 2f       	mov	r24, r28
    2766:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <add_key>
    276a:	e3 cf       	rjmp	.-58     	; 0x2732 <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    276c:	80 e2       	ldi	r24, 0x20	; 32
    276e:	8c 0f       	add	r24, r28
    2770:	88 30       	cpi	r24, 0x08	; 8
    2772:	48 f4       	brcc	.+18     	; 0x2786 <register_code+0x94>
        add_mods(MOD_BIT(code));
    2774:	c7 70       	andi	r28, 0x07	; 7
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	01 c0       	rjmp	.+2      	; 0x277c <register_code+0x8a>
    277a:	88 0f       	add	r24, r24
    277c:	ca 95       	dec	r28
    277e:	ea f7       	brpl	.-6      	; 0x277a <register_code+0x88>
    2780:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <add_mods>
    2784:	d6 cf       	rjmp	.-84     	; 0x2732 <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2786:	8b e5       	ldi	r24, 0x5B	; 91
    2788:	8c 0f       	add	r24, r28
    278a:	83 30       	cpi	r24, 0x03	; 3
    278c:	78 f4       	brcc	.+30     	; 0x27ac <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    278e:	c5 3a       	cpi	r28, 0xA5	; 165
    2790:	29 f0       	breq	.+10     	; 0x279c <register_code+0xaa>
    2792:	c6 3a       	cpi	r28, 0xA6	; 166
    2794:	31 f4       	brne	.+12     	; 0x27a2 <register_code+0xb0>
    2796:	82 e8       	ldi	r24, 0x82	; 130
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	05 c0       	rjmp	.+10     	; 0x27a6 <register_code+0xb4>
    279c:	81 e8       	ldi	r24, 0x81	; 129
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <register_code+0xb4>
    27a2:	83 e8       	ldi	r24, 0x83	; 131
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    27a6:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    27a8:	0c 94 38 12 	jmp	0x2470	; 0x2470 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    27ac:	88 e5       	ldi	r24, 0x58	; 88
    27ae:	8c 0f       	add	r24, r28
    27b0:	83 31       	cpi	r24, 0x13	; 19
    27b2:	08 f0       	brcs	.+2      	; 0x27b6 <register_code+0xc4>
    27b4:	64 c0       	rjmp	.+200    	; 0x287e <register_code+0x18c>
        host_consumer_send(KEYCODE2CONSUMER(code));
    27b6:	c8 3a       	cpi	r28, 0xA8	; 168
    27b8:	39 f1       	breq	.+78     	; 0x2808 <register_code+0x116>
    27ba:	c9 3a       	cpi	r28, 0xA9	; 169
    27bc:	41 f1       	breq	.+80     	; 0x280e <register_code+0x11c>
    27be:	ca 3a       	cpi	r28, 0xAA	; 170
    27c0:	49 f1       	breq	.+82     	; 0x2814 <register_code+0x122>
    27c2:	cb 3a       	cpi	r28, 0xAB	; 171
    27c4:	51 f1       	breq	.+84     	; 0x281a <register_code+0x128>
    27c6:	cc 3a       	cpi	r28, 0xAC	; 172
    27c8:	59 f1       	breq	.+86     	; 0x2820 <register_code+0x12e>
    27ca:	cd 3a       	cpi	r28, 0xAD	; 173
    27cc:	61 f1       	breq	.+88     	; 0x2826 <register_code+0x134>
    27ce:	c0 3b       	cpi	r28, 0xB0	; 176
    27d0:	69 f1       	breq	.+90     	; 0x282c <register_code+0x13a>
    27d2:	ce 3a       	cpi	r28, 0xAE	; 174
    27d4:	71 f1       	breq	.+92     	; 0x2832 <register_code+0x140>
    27d6:	cf 3a       	cpi	r28, 0xAF	; 175
    27d8:	79 f1       	breq	.+94     	; 0x2838 <register_code+0x146>
    27da:	c1 3b       	cpi	r28, 0xB1	; 177
    27dc:	81 f1       	breq	.+96     	; 0x283e <register_code+0x14c>
    27de:	c2 3b       	cpi	r28, 0xB2	; 178
    27e0:	89 f1       	breq	.+98     	; 0x2844 <register_code+0x152>
    27e2:	c3 3b       	cpi	r28, 0xB3	; 179
    27e4:	91 f1       	breq	.+100    	; 0x284a <register_code+0x158>
    27e6:	c4 3b       	cpi	r28, 0xB4	; 180
    27e8:	99 f1       	breq	.+102    	; 0x2850 <register_code+0x15e>
    27ea:	c5 3b       	cpi	r28, 0xB5	; 181
    27ec:	a1 f1       	breq	.+104    	; 0x2856 <register_code+0x164>
    27ee:	c6 3b       	cpi	r28, 0xB6	; 182
    27f0:	a9 f1       	breq	.+106    	; 0x285c <register_code+0x16a>
    27f2:	c7 3b       	cpi	r28, 0xB7	; 183
    27f4:	b1 f1       	breq	.+108    	; 0x2862 <register_code+0x170>
    27f6:	c8 3b       	cpi	r28, 0xB8	; 184
    27f8:	b9 f1       	breq	.+110    	; 0x2868 <register_code+0x176>
    27fa:	c9 3b       	cpi	r28, 0xB9	; 185
    27fc:	c1 f1       	breq	.+112    	; 0x286e <register_code+0x17c>
    27fe:	ca 3b       	cpi	r28, 0xBA	; 186
    2800:	c9 f5       	brne	.+114    	; 0x2874 <register_code+0x182>
    2802:	8a e2       	ldi	r24, 0x2A	; 42
    2804:	92 e0       	ldi	r25, 0x02	; 2
    2806:	38 c0       	rjmp	.+112    	; 0x2878 <register_code+0x186>
    2808:	82 ee       	ldi	r24, 0xE2	; 226
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	35 c0       	rjmp	.+106    	; 0x2878 <register_code+0x186>
    280e:	89 ee       	ldi	r24, 0xE9	; 233
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	32 c0       	rjmp	.+100    	; 0x2878 <register_code+0x186>
    2814:	8a ee       	ldi	r24, 0xEA	; 234
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	2f c0       	rjmp	.+94     	; 0x2878 <register_code+0x186>
    281a:	85 eb       	ldi	r24, 0xB5	; 181
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	2c c0       	rjmp	.+88     	; 0x2878 <register_code+0x186>
    2820:	86 eb       	ldi	r24, 0xB6	; 182
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	29 c0       	rjmp	.+82     	; 0x2878 <register_code+0x186>
    2826:	87 eb       	ldi	r24, 0xB7	; 183
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	26 c0       	rjmp	.+76     	; 0x2878 <register_code+0x186>
    282c:	8c ec       	ldi	r24, 0xCC	; 204
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	23 c0       	rjmp	.+70     	; 0x2878 <register_code+0x186>
    2832:	8d ec       	ldi	r24, 0xCD	; 205
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	20 c0       	rjmp	.+64     	; 0x2878 <register_code+0x186>
    2838:	83 e8       	ldi	r24, 0x83	; 131
    283a:	91 e0       	ldi	r25, 0x01	; 1
    283c:	1d c0       	rjmp	.+58     	; 0x2878 <register_code+0x186>
    283e:	8a e8       	ldi	r24, 0x8A	; 138
    2840:	91 e0       	ldi	r25, 0x01	; 1
    2842:	1a c0       	rjmp	.+52     	; 0x2878 <register_code+0x186>
    2844:	82 e9       	ldi	r24, 0x92	; 146
    2846:	91 e0       	ldi	r25, 0x01	; 1
    2848:	17 c0       	rjmp	.+46     	; 0x2878 <register_code+0x186>
    284a:	84 e9       	ldi	r24, 0x94	; 148
    284c:	91 e0       	ldi	r25, 0x01	; 1
    284e:	14 c0       	rjmp	.+40     	; 0x2878 <register_code+0x186>
    2850:	81 e2       	ldi	r24, 0x21	; 33
    2852:	92 e0       	ldi	r25, 0x02	; 2
    2854:	11 c0       	rjmp	.+34     	; 0x2878 <register_code+0x186>
    2856:	83 e2       	ldi	r24, 0x23	; 35
    2858:	92 e0       	ldi	r25, 0x02	; 2
    285a:	0e c0       	rjmp	.+28     	; 0x2878 <register_code+0x186>
    285c:	84 e2       	ldi	r24, 0x24	; 36
    285e:	92 e0       	ldi	r25, 0x02	; 2
    2860:	0b c0       	rjmp	.+22     	; 0x2878 <register_code+0x186>
    2862:	85 e2       	ldi	r24, 0x25	; 37
    2864:	92 e0       	ldi	r25, 0x02	; 2
    2866:	08 c0       	rjmp	.+16     	; 0x2878 <register_code+0x186>
    2868:	86 e2       	ldi	r24, 0x26	; 38
    286a:	92 e0       	ldi	r25, 0x02	; 2
    286c:	05 c0       	rjmp	.+10     	; 0x2878 <register_code+0x186>
    286e:	87 e2       	ldi	r24, 0x27	; 39
    2870:	92 e0       	ldi	r25, 0x02	; 2
    2872:	02 c0       	rjmp	.+4      	; 0x2878 <register_code+0x186>
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    2878:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    287a:	0c 94 4e 12 	jmp	0x249c	; 0x249c <host_consumer_send>
    }
}
    287e:	cf 91       	pop	r28
    2880:	08 95       	ret

00002882 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2882:	88 23       	and	r24, r24
    2884:	09 f4       	brne	.+2      	; 0x2888 <unregister_code+0x6>
    2886:	4b c0       	rjmp	.+150    	; 0x291e <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2888:	82 38       	cpi	r24, 0x82	; 130
    288a:	59 f4       	brne	.+22     	; 0x28a2 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    288c:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <host_keyboard_leds>
    2890:	81 ff       	sbrs	r24, 1
    2892:	45 c0       	rjmp	.+138    	; 0x291e <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    2894:	89 e3       	ldi	r24, 0x39	; 57
    2896:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <add_key>
        send_keyboard_report();
    289a:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    289e:	89 e3       	ldi	r24, 0x39	; 57
    28a0:	0c c0       	rjmp	.+24     	; 0x28ba <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    28a2:	83 38       	cpi	r24, 0x83	; 131
    28a4:	71 f4       	brne	.+28     	; 0x28c2 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    28a6:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <host_keyboard_leds>
    28aa:	80 ff       	sbrs	r24, 0
    28ac:	38 c0       	rjmp	.+112    	; 0x291e <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    28ae:	83 e5       	ldi	r24, 0x53	; 83
    28b0:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <add_key>
        send_keyboard_report();
    28b4:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <send_keyboard_report>
        del_key(KC_NUMLOCK);
    28b8:	83 e5       	ldi	r24, 0x53	; 83
    28ba:	0e 94 66 1d 	call	0x3acc	; 0x3acc <del_key>
        send_keyboard_report();
    28be:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    28c2:	84 38       	cpi	r24, 0x84	; 132
    28c4:	59 f4       	brne	.+22     	; 0x28dc <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    28c6:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <host_keyboard_leds>
    28ca:	82 ff       	sbrs	r24, 2
    28cc:	28 c0       	rjmp	.+80     	; 0x291e <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    28ce:	87 e4       	ldi	r24, 0x47	; 71
    28d0:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <add_key>
        send_keyboard_report();
    28d4:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    28d8:	87 e4       	ldi	r24, 0x47	; 71
    28da:	ef cf       	rjmp	.-34     	; 0x28ba <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    28dc:	9c ef       	ldi	r25, 0xFC	; 252
    28de:	98 0f       	add	r25, r24
    28e0:	91 3a       	cpi	r25, 0xA1	; 161
    28e2:	58 f3       	brcs	.-42     	; 0x28ba <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    28e4:	90 e2       	ldi	r25, 0x20	; 32
    28e6:	98 0f       	add	r25, r24
    28e8:	98 30       	cpi	r25, 0x08	; 8
    28ea:	50 f4       	brcc	.+20     	; 0x2900 <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    28ec:	87 70       	andi	r24, 0x07	; 7
    28ee:	91 e0       	ldi	r25, 0x01	; 1
    28f0:	01 c0       	rjmp	.+2      	; 0x28f4 <unregister_code+0x72>
    28f2:	99 0f       	add	r25, r25
    28f4:	8a 95       	dec	r24
    28f6:	ea f7       	brpl	.-6      	; 0x28f2 <unregister_code+0x70>
    28f8:	89 2f       	mov	r24, r25
    28fa:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <del_mods>
    28fe:	df cf       	rjmp	.-66     	; 0x28be <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2900:	9b e5       	ldi	r25, 0x5B	; 91
    2902:	98 0f       	add	r25, r24
    2904:	93 30       	cpi	r25, 0x03	; 3
    2906:	20 f4       	brcc	.+8      	; 0x2910 <unregister_code+0x8e>
        host_system_send(0);
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	0c 94 38 12 	jmp	0x2470	; 0x2470 <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2910:	88 5a       	subi	r24, 0xA8	; 168
    2912:	83 31       	cpi	r24, 0x13	; 19
    2914:	20 f4       	brcc	.+8      	; 0x291e <unregister_code+0x9c>
        host_consumer_send(0);
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	0c 94 4e 12 	jmp	0x249c	; 0x249c <host_consumer_send>
    291e:	08 95       	ret

00002920 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2920:	88 23       	and	r24, r24
    2922:	21 f0       	breq	.+8      	; 0x292c <register_mods+0xc>
        add_mods(mods);
    2924:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <add_mods>
        send_keyboard_report();
    2928:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <send_keyboard_report>
    292c:	08 95       	ret

0000292e <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    292e:	88 23       	and	r24, r24
    2930:	21 f0       	breq	.+8      	; 0x293a <unregister_mods+0xc>
        del_mods(mods);
    2932:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <del_mods>
        send_keyboard_report();
    2936:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <send_keyboard_report>
    293a:	08 95       	ret

0000293c <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    293c:	cf 92       	push	r12
    293e:	df 92       	push	r13
    2940:	ef 92       	push	r14
    2942:	ff 92       	push	r15
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	cf 93       	push	r28
    294a:	df 93       	push	r29
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	28 97       	sbiw	r28, 0x08	; 8
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	cd bf       	out	0x3d, r28	; 61
    295c:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    295e:	85 e0       	ldi	r24, 0x05	; 5
    2960:	f8 01       	movw	r30, r16
    2962:	de 01       	movw	r26, r28
    2964:	11 96       	adiw	r26, 0x01	; 1
    2966:	01 90       	ld	r0, Z+
    2968:	0d 92       	st	X+, r0
    296a:	8a 95       	dec	r24
    296c:	e1 f7       	brne	.-8      	; 0x2966 <process_action+0x2a>
    296e:	f8 01       	movw	r30, r16
    2970:	40 81       	ld	r20, Z
    2972:	31 81       	ldd	r19, Z+1	; 0x01
    2974:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2976:	25 81       	ldd	r18, Z+5	; 0x05
    2978:	22 95       	swap	r18
    297a:	2f 70       	andi	r18, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    297c:	83 81       	ldd	r24, Z+3	; 0x03
    297e:	94 81       	ldd	r25, Z+4	; 0x04
    2980:	89 2b       	or	r24, r25
    2982:	31 f0       	breq	.+12     	; 0x2990 <process_action+0x54>
    2984:	3f 3f       	cpi	r19, 0xFF	; 255
    2986:	31 f4       	brne	.+12     	; 0x2994 <process_action+0x58>
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	4f 3f       	cpi	r20, 0xFF	; 255
    298c:	19 f4       	brne	.+6      	; 0x2994 <process_action+0x58>
    298e:	03 c0       	rjmp	.+6      	; 0x2996 <process_action+0x5a>
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	01 c0       	rjmp	.+2      	; 0x2996 <process_action+0x5a>
    2994:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    2996:	80 fd       	sbrc	r24, 0
    2998:	c8 c2       	rjmp	.+1424   	; 0x2f2a <process_action+0x5ee>

    action_t action = layer_switch_get_action(event.key);
    299a:	49 83       	std	Y+1, r20	; 0x01
    299c:	3a 83       	std	Y+2, r19	; 0x02
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	9a 81       	ldd	r25, Y+2	; 0x02
    29a2:	2f 83       	std	Y+7, r18	; 0x07
    29a4:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    29a8:	9e 83       	std	Y+6, r25	; 0x06
    29aa:	88 87       	std	Y+8, r24	; 0x08
    29ac:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    29b0:	0e 94 a9 1b 	call	0x3752	; 0x3752 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    29b4:	4e 81       	ldd	r20, Y+6	; 0x06
    29b6:	e4 2f       	mov	r30, r20
    29b8:	e2 95       	swap	r30
    29ba:	ef 70       	andi	r30, 0x0F	; 15
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	e0 5a       	subi	r30, 0xA0	; 160
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	2f 81       	ldd	r18, Y+7	; 0x07
    29c4:	68 85       	ldd	r22, Y+8	; 0x08
    29c6:	0c 94 d7 2c 	jmp	0x59ae	; 0x59ae <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    29ca:	84 2f       	mov	r24, r20
    29cc:	80 7f       	andi	r24, 0xF0	; 240
    29ce:	14 2f       	mov	r17, r20
    29d0:	1f 70       	andi	r17, 0x0F	; 15
    29d2:	88 23       	and	r24, r24
    29d4:	11 f0       	breq	.+4      	; 0x29da <process_action+0x9e>
    29d6:	12 95       	swap	r17
    29d8:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    29da:	ff 20       	and	r15, r15
    29dc:	59 f0       	breq	.+22     	; 0x29f4 <process_action+0xb8>
                    if (mods) {
    29de:	11 23       	and	r17, r17
    29e0:	09 f4       	brne	.+2      	; 0x29e4 <process_action+0xa8>
    29e2:	58 c2       	rjmp	.+1200   	; 0x2e94 <process_action+0x558>
                        add_weak_mods(mods);
    29e4:	81 2f       	mov	r24, r17
    29e6:	68 87       	std	Y+8, r22	; 0x08
    29e8:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <add_weak_mods>
                        send_keyboard_report();
    29ec:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <send_keyboard_report>
    29f0:	68 85       	ldd	r22, Y+8	; 0x08
    29f2:	50 c2       	rjmp	.+1184   	; 0x2e94 <process_action+0x558>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    29f4:	86 2f       	mov	r24, r22
    29f6:	0e 94 41 14 	call	0x2882	; 0x2882 <unregister_code>
                    if (mods) {
    29fa:	11 23       	and	r17, r17
    29fc:	09 f4       	brne	.+2      	; 0x2a00 <process_action+0xc4>
    29fe:	95 c2       	rjmp	.+1322   	; 0x2f2a <process_action+0x5ee>
                        del_weak_mods(mods);
    2a00:	81 2f       	mov	r24, r17
    2a02:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2a06:	28 96       	adiw	r28, 0x08	; 8
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	de bf       	out	0x3e, r29	; 62
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	cd bf       	out	0x3d, r28	; 61
    2a12:	df 91       	pop	r29
    2a14:	cf 91       	pop	r28
    2a16:	1f 91       	pop	r17
    2a18:	0f 91       	pop	r16
    2a1a:	ff 90       	pop	r15
    2a1c:	ef 90       	pop	r14
    2a1e:	df 90       	pop	r13
    2a20:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2a22:	0c 94 ed 1d 	jmp	0x3bda	; 0x3bda <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2a26:	34 2f       	mov	r19, r20
    2a28:	30 7f       	andi	r19, 0xF0	; 240
    2a2a:	84 2f       	mov	r24, r20
    2a2c:	8f 70       	andi	r24, 0x0F	; 15
    2a2e:	30 32       	cpi	r19, 0x20	; 32
    2a30:	11 f0       	breq	.+4      	; 0x2a36 <process_action+0xfa>
    2a32:	82 95       	swap	r24
    2a34:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    2a36:	66 23       	and	r22, r22
    2a38:	19 f0       	breq	.+6      	; 0x2a40 <process_action+0x104>
    2a3a:	61 30       	cpi	r22, 0x01	; 1
    2a3c:	09 f1       	breq	.+66     	; 0x2a80 <process_action+0x144>
    2a3e:	2a c0       	rjmp	.+84     	; 0x2a94 <process_action+0x158>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2a40:	ff 20       	and	r15, r15
    2a42:	a1 f0       	breq	.+40     	; 0x2a6c <process_action+0x130>
                            if (tap_count == 0) {
    2a44:	22 23       	and	r18, r18
    2a46:	81 f1       	breq	.+96     	; 0x2aa8 <process_action+0x16c>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2a48:	21 30       	cpi	r18, 0x01	; 1
    2a4a:	71 f5       	brne	.+92     	; 0x2aa8 <process_action+0x16c>
            break;
#endif
        default:
            break;
    }
}
    2a4c:	28 96       	adiw	r28, 0x08	; 8
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	de bf       	out	0x3e, r29	; 62
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	ff 90       	pop	r15
    2a62:	ef 90       	pop	r14
    2a64:	df 90       	pop	r13
    2a66:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2a68:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2a6c:	22 23       	and	r18, r18
    2a6e:	19 f0       	breq	.+6      	; 0x2a76 <process_action+0x13a>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2a70:	21 30       	cpi	r18, 0x01	; 1
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <process_action+0x13a>
    2a74:	5a c2       	rjmp	.+1204   	; 0x2f2a <process_action+0x5ee>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2a76:	8e 83       	std	Y+6, r24	; 0x06
    2a78:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <clear_oneshot_mods>
                                unregister_mods(mods);
    2a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a7e:	8e c1       	rjmp	.+796    	; 0x2d9c <process_action+0x460>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2a80:	ff 20       	and	r15, r15
    2a82:	21 f0       	breq	.+8      	; 0x2a8c <process_action+0x150>
                            if (tap_count <= TAPPING_TOGGLE) {
    2a84:	26 30       	cpi	r18, 0x06	; 6
    2a86:	08 f0       	brcs	.+2      	; 0x2a8a <process_action+0x14e>
    2a88:	50 c2       	rjmp	.+1184   	; 0x2f2a <process_action+0x5ee>
    2a8a:	0e c0       	rjmp	.+28     	; 0x2aa8 <process_action+0x16c>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2a8c:	25 30       	cpi	r18, 0x05	; 5
    2a8e:	08 f0       	brcs	.+2      	; 0x2a92 <process_action+0x156>
    2a90:	4c c2       	rjmp	.+1176   	; 0x2f2a <process_action+0x5ee>
    2a92:	84 c1       	rjmp	.+776    	; 0x2d9c <process_action+0x460>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2a94:	ff 20       	and	r15, r15
    2a96:	c1 f0       	breq	.+48     	; 0x2ac8 <process_action+0x18c>
                            if (tap_count > 0) {
    2a98:	22 23       	and	r18, r18
    2a9a:	31 f0       	breq	.+12     	; 0x2aa8 <process_action+0x16c>
                                if (record->tap.interrupted) {
    2a9c:	f8 01       	movw	r30, r16
    2a9e:	95 81       	ldd	r25, Z+5	; 0x05
    2aa0:	90 ff       	sbrs	r25, 0
    2aa2:	f8 c1       	rjmp	.+1008   	; 0x2e94 <process_action+0x558>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2aa4:	9f 70       	andi	r25, 0x0F	; 15
    2aa6:	95 83       	std	Z+5, r25	; 0x05
            break;
#endif
        default:
            break;
    }
}
    2aa8:	28 96       	adiw	r28, 0x08	; 8
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	df 91       	pop	r29
    2ab6:	cf 91       	pop	r28
    2ab8:	1f 91       	pop	r17
    2aba:	0f 91       	pop	r16
    2abc:	ff 90       	pop	r15
    2abe:	ef 90       	pop	r14
    2ac0:	df 90       	pop	r13
    2ac2:	cf 90       	pop	r12
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
                                    register_mods(mods);
    2ac4:	0c 94 90 14 	jmp	0x2920	; 0x2920 <register_mods>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2ac8:	22 23       	and	r18, r18
    2aca:	09 f4       	brne	.+2      	; 0x2ace <process_action+0x192>
    2acc:	67 c1       	rjmp	.+718    	; 0x2d9c <process_action+0x460>
    2ace:	f6 c1       	rjmp	.+1004   	; 0x2ebc <process_action+0x580>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2ad0:	24 2f       	mov	r18, r20
    2ad2:	26 95       	lsr	r18
    2ad4:	26 95       	lsr	r18
    2ad6:	23 70       	andi	r18, 0x03	; 3
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	21 15       	cp	r18, r1
    2adc:	31 05       	cpc	r19, r1
    2ade:	21 f0       	breq	.+8      	; 0x2ae8 <process_action+0x1ac>
    2ae0:	21 30       	cpi	r18, 0x01	; 1
    2ae2:	31 05       	cpc	r19, r1
    2ae4:	c9 f0       	breq	.+50     	; 0x2b18 <process_action+0x1dc>
    2ae6:	21 c2       	rjmp	.+1090   	; 0x2f2a <process_action+0x5ee>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2ae8:	ff 20       	and	r15, r15
    2aea:	21 f0       	breq	.+8      	; 0x2af4 <process_action+0x1b8>
                        host_system_send(action.usage.code);
    2aec:	86 2f       	mov	r24, r22
    2aee:	94 2f       	mov	r25, r20
    2af0:	93 70       	andi	r25, 0x03	; 3
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <process_action+0x1bc>
                    } else {
                        host_system_send(0);
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2af8:	28 96       	adiw	r28, 0x08	; 8
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	de bf       	out	0x3e, r29	; 62
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	cd bf       	out	0x3d, r28	; 61
    2b04:	df 91       	pop	r29
    2b06:	cf 91       	pop	r28
    2b08:	1f 91       	pop	r17
    2b0a:	0f 91       	pop	r16
    2b0c:	ff 90       	pop	r15
    2b0e:	ef 90       	pop	r14
    2b10:	df 90       	pop	r13
    2b12:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2b14:	0c 94 38 12 	jmp	0x2470	; 0x2470 <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2b18:	ff 20       	and	r15, r15
    2b1a:	21 f0       	breq	.+8      	; 0x2b24 <process_action+0x1e8>
                        host_consumer_send(action.usage.code);
    2b1c:	86 2f       	mov	r24, r22
    2b1e:	94 2f       	mov	r25, r20
    2b20:	93 70       	andi	r25, 0x03	; 3
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <process_action+0x1ec>
                    } else {
                        host_consumer_send(0);
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2b28:	28 96       	adiw	r28, 0x08	; 8
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	1f 91       	pop	r17
    2b3a:	0f 91       	pop	r16
    2b3c:	ff 90       	pop	r15
    2b3e:	ef 90       	pop	r14
    2b40:	df 90       	pop	r13
    2b42:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    2b44:	0c 94 4e 12 	jmp	0x249c	; 0x249c <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2b48:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2b4a:	ff 20       	and	r15, r15
    2b4c:	19 f0       	breq	.+6      	; 0x2b54 <process_action+0x218>
                mousekey_on(action.key.code);
    2b4e:	0e 94 d7 22 	call	0x45ae	; 0x45ae <mousekey_on>
    2b52:	02 c0       	rjmp	.+4      	; 0x2b58 <process_action+0x21c>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2b54:	0e 94 3f 23 	call	0x467e	; 0x467e <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    2b58:	28 96       	adiw	r28, 0x08	; 8
    2b5a:	0f b6       	in	r0, 0x3f	; 63
    2b5c:	f8 94       	cli
    2b5e:	de bf       	out	0x3e, r29	; 62
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	cd bf       	out	0x3d, r28	; 61
    2b64:	df 91       	pop	r29
    2b66:	cf 91       	pop	r28
    2b68:	1f 91       	pop	r17
    2b6a:	0f 91       	pop	r16
    2b6c:	ff 90       	pop	r15
    2b6e:	ef 90       	pop	r14
    2b70:	df 90       	pop	r13
    2b72:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    2b74:	0c 94 c4 23 	jmp	0x4788	; 0x4788 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2b78:	84 2f       	mov	r24, r20
    2b7a:	83 70       	andi	r24, 0x03	; 3
    2b7c:	09 f0       	breq	.+2      	; 0x2b80 <process_action+0x244>
    2b7e:	76 c0       	rjmp	.+236    	; 0x2c6c <process_action+0x330>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2b80:	f1 10       	cpse	r15, r1
    2b82:	d3 c1       	rjmp	.+934    	; 0x2f2a <process_action+0x5ee>
                    uint8_t shift = action.layer_bitop.part*4;
    2b84:	26 2f       	mov	r18, r22
    2b86:	22 95       	swap	r18
    2b88:	26 95       	lsr	r18
    2b8a:	27 70       	andi	r18, 0x07	; 7
    2b8c:	22 0f       	add	r18, r18
    2b8e:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2b90:	86 2f       	mov	r24, r22
    2b92:	8f 70       	andi	r24, 0x0F	; 15
    2b94:	c8 2e       	mov	r12, r24
    2b96:	d1 2c       	mov	r13, r1
    2b98:	e1 2c       	mov	r14, r1
    2b9a:	f1 2c       	mov	r15, r1
    2b9c:	02 2e       	mov	r0, r18
    2b9e:	04 c0       	rjmp	.+8      	; 0x2ba8 <process_action+0x26c>
    2ba0:	cc 0c       	add	r12, r12
    2ba2:	dd 1c       	adc	r13, r13
    2ba4:	ee 1c       	adc	r14, r14
    2ba6:	ff 1c       	adc	r15, r15
    2ba8:	0a 94       	dec	r0
    2baa:	d2 f7       	brpl	.-12     	; 0x2ba0 <process_action+0x264>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2bac:	64 ff       	sbrs	r22, 4
    2bae:	10 c0       	rjmp	.+32     	; 0x2bd0 <process_action+0x294>
    2bb0:	6f e0       	ldi	r22, 0x0F	; 15
    2bb2:	70 e0       	ldi	r23, 0x00	; 0
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	04 c0       	rjmp	.+8      	; 0x2bc2 <process_action+0x286>
    2bba:	66 0f       	add	r22, r22
    2bbc:	77 1f       	adc	r23, r23
    2bbe:	88 1f       	adc	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	2a 95       	dec	r18
    2bc4:	d2 f7       	brpl	.-12     	; 0x2bba <process_action+0x27e>
    2bc6:	60 95       	com	r22
    2bc8:	70 95       	com	r23
    2bca:	80 95       	com	r24
    2bcc:	90 95       	com	r25
    2bce:	03 c0       	rjmp	.+6      	; 0x2bd6 <process_action+0x29a>
    2bd0:	60 e0       	ldi	r22, 0x00	; 0
    2bd2:	70 e0       	ldi	r23, 0x00	; 0
    2bd4:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2bd6:	24 2f       	mov	r18, r20
    2bd8:	26 95       	lsr	r18
    2bda:	26 95       	lsr	r18
    2bdc:	23 70       	andi	r18, 0x03	; 3
    2bde:	42 2f       	mov	r20, r18
    2be0:	50 e0       	ldi	r21, 0x00	; 0
    2be2:	42 30       	cpi	r20, 0x02	; 2
    2be4:	51 05       	cpc	r21, r1
    2be6:	d1 f0       	breq	.+52     	; 0x2c1c <process_action+0x2e0>
    2be8:	43 30       	cpi	r20, 0x03	; 3
    2bea:	51 05       	cpc	r21, r1
    2bec:	59 f1       	breq	.+86     	; 0x2c44 <process_action+0x308>
    2bee:	6c 29       	or	r22, r12
    2bf0:	7d 29       	or	r23, r13
    2bf2:	8e 29       	or	r24, r14
    2bf4:	9f 29       	or	r25, r15
    2bf6:	41 30       	cpi	r20, 0x01	; 1
    2bf8:	51 05       	cpc	r21, r1
    2bfa:	41 f1       	breq	.+80     	; 0x2c4c <process_action+0x310>
            break;
#endif
        default:
            break;
    }
}
    2bfc:	28 96       	adiw	r28, 0x08	; 8
    2bfe:	0f b6       	in	r0, 0x3f	; 63
    2c00:	f8 94       	cli
    2c02:	de bf       	out	0x3e, r29	; 62
    2c04:	0f be       	out	0x3f, r0	; 63
    2c06:	cd bf       	out	0x3d, r28	; 61
    2c08:	df 91       	pop	r29
    2c0a:	cf 91       	pop	r28
    2c0c:	1f 91       	pop	r17
    2c0e:	0f 91       	pop	r16
    2c10:	ff 90       	pop	r15
    2c12:	ef 90       	pop	r14
    2c14:	df 90       	pop	r13
    2c16:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2c18:	0c 94 ce 1b 	jmp	0x379c	; 0x379c <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2c1c:	6c 29       	or	r22, r12
    2c1e:	7d 29       	or	r23, r13
    2c20:	8e 29       	or	r24, r14
    2c22:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2c24:	28 96       	adiw	r28, 0x08	; 8
    2c26:	0f b6       	in	r0, 0x3f	; 63
    2c28:	f8 94       	cli
    2c2a:	de bf       	out	0x3e, r29	; 62
    2c2c:	0f be       	out	0x3f, r0	; 63
    2c2e:	cd bf       	out	0x3d, r28	; 61
    2c30:	df 91       	pop	r29
    2c32:	cf 91       	pop	r28
    2c34:	1f 91       	pop	r17
    2c36:	0f 91       	pop	r16
    2c38:	ff 90       	pop	r15
    2c3a:	ef 90       	pop	r14
    2c3c:	df 90       	pop	r13
    2c3e:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2c40:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2c44:	0e 94 ce 1b 	call	0x379c	; 0x379c <default_layer_and>
    2c48:	c7 01       	movw	r24, r14
    2c4a:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2c4c:	28 96       	adiw	r28, 0x08	; 8
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	df 91       	pop	r29
    2c5a:	cf 91       	pop	r28
    2c5c:	1f 91       	pop	r17
    2c5e:	0f 91       	pop	r16
    2c60:	ff 90       	pop	r15
    2c62:	ef 90       	pop	r14
    2c64:	df 90       	pop	r13
    2c66:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2c68:	0c 94 b4 1b 	jmp	0x3768	; 0x3768 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2c6c:	ff 20       	and	r15, r15
    2c6e:	19 f0       	breq	.+6      	; 0x2c76 <process_action+0x33a>
    2c70:	84 2f       	mov	r24, r20
    2c72:	81 70       	andi	r24, 0x01	; 1
    2c74:	01 c0       	rjmp	.+2      	; 0x2c78 <process_action+0x33c>
    2c76:	86 95       	lsr	r24
    2c78:	88 23       	and	r24, r24
    2c7a:	09 f4       	brne	.+2      	; 0x2c7e <process_action+0x342>
    2c7c:	56 c1       	rjmp	.+684    	; 0x2f2a <process_action+0x5ee>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2c7e:	26 2f       	mov	r18, r22
    2c80:	22 95       	swap	r18
    2c82:	26 95       	lsr	r18
    2c84:	27 70       	andi	r18, 0x07	; 7
    2c86:	22 0f       	add	r18, r18
    2c88:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2c8a:	86 2f       	mov	r24, r22
    2c8c:	8f 70       	andi	r24, 0x0F	; 15
    2c8e:	c8 2e       	mov	r12, r24
    2c90:	d1 2c       	mov	r13, r1
    2c92:	e1 2c       	mov	r14, r1
    2c94:	f1 2c       	mov	r15, r1
    2c96:	02 2e       	mov	r0, r18
    2c98:	04 c0       	rjmp	.+8      	; 0x2ca2 <process_action+0x366>
    2c9a:	cc 0c       	add	r12, r12
    2c9c:	dd 1c       	adc	r13, r13
    2c9e:	ee 1c       	adc	r14, r14
    2ca0:	ff 1c       	adc	r15, r15
    2ca2:	0a 94       	dec	r0
    2ca4:	d2 f7       	brpl	.-12     	; 0x2c9a <process_action+0x35e>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2ca6:	64 ff       	sbrs	r22, 4
    2ca8:	10 c0       	rjmp	.+32     	; 0x2cca <process_action+0x38e>
    2caa:	6f e0       	ldi	r22, 0x0F	; 15
    2cac:	70 e0       	ldi	r23, 0x00	; 0
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	04 c0       	rjmp	.+8      	; 0x2cbc <process_action+0x380>
    2cb4:	66 0f       	add	r22, r22
    2cb6:	77 1f       	adc	r23, r23
    2cb8:	88 1f       	adc	r24, r24
    2cba:	99 1f       	adc	r25, r25
    2cbc:	2a 95       	dec	r18
    2cbe:	d2 f7       	brpl	.-12     	; 0x2cb4 <process_action+0x378>
    2cc0:	60 95       	com	r22
    2cc2:	70 95       	com	r23
    2cc4:	80 95       	com	r24
    2cc6:	90 95       	com	r25
    2cc8:	03 c0       	rjmp	.+6      	; 0x2cd0 <process_action+0x394>
    2cca:	60 e0       	ldi	r22, 0x00	; 0
    2ccc:	70 e0       	ldi	r23, 0x00	; 0
    2cce:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2cd0:	24 2f       	mov	r18, r20
    2cd2:	26 95       	lsr	r18
    2cd4:	26 95       	lsr	r18
    2cd6:	23 70       	andi	r18, 0x03	; 3
    2cd8:	42 2f       	mov	r20, r18
    2cda:	50 e0       	ldi	r21, 0x00	; 0
    2cdc:	42 30       	cpi	r20, 0x02	; 2
    2cde:	51 05       	cpc	r21, r1
    2ce0:	d1 f0       	breq	.+52     	; 0x2d16 <process_action+0x3da>
    2ce2:	43 30       	cpi	r20, 0x03	; 3
    2ce4:	51 05       	cpc	r21, r1
    2ce6:	59 f1       	breq	.+86     	; 0x2d3e <process_action+0x402>
    2ce8:	6c 29       	or	r22, r12
    2cea:	7d 29       	or	r23, r13
    2cec:	8e 29       	or	r24, r14
    2cee:	9f 29       	or	r25, r15
    2cf0:	41 30       	cpi	r20, 0x01	; 1
    2cf2:	51 05       	cpc	r21, r1
    2cf4:	41 f1       	breq	.+80     	; 0x2d46 <process_action+0x40a>
            break;
#endif
        default:
            break;
    }
}
    2cf6:	28 96       	adiw	r28, 0x08	; 8
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	f8 94       	cli
    2cfc:	de bf       	out	0x3e, r29	; 62
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	cd bf       	out	0x3d, r28	; 61
    2d02:	df 91       	pop	r29
    2d04:	cf 91       	pop	r28
    2d06:	1f 91       	pop	r17
    2d08:	0f 91       	pop	r16
    2d0a:	ff 90       	pop	r15
    2d0c:	ef 90       	pop	r14
    2d0e:	df 90       	pop	r13
    2d10:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2d12:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2d16:	6c 29       	or	r22, r12
    2d18:	7d 29       	or	r23, r13
    2d1a:	8e 29       	or	r24, r14
    2d1c:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2d1e:	28 96       	adiw	r28, 0x08	; 8
    2d20:	0f b6       	in	r0, 0x3f	; 63
    2d22:	f8 94       	cli
    2d24:	de bf       	out	0x3e, r29	; 62
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	cd bf       	out	0x3d, r28	; 61
    2d2a:	df 91       	pop	r29
    2d2c:	cf 91       	pop	r28
    2d2e:	1f 91       	pop	r17
    2d30:	0f 91       	pop	r16
    2d32:	ff 90       	pop	r15
    2d34:	ef 90       	pop	r14
    2d36:	df 90       	pop	r13
    2d38:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2d3a:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2d3e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <layer_and>
    2d42:	c7 01       	movw	r24, r14
    2d44:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2d46:	28 96       	adiw	r28, 0x08	; 8
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	f8 94       	cli
    2d4c:	de bf       	out	0x3e, r29	; 62
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	cd bf       	out	0x3d, r28	; 61
    2d52:	df 91       	pop	r29
    2d54:	cf 91       	pop	r28
    2d56:	1f 91       	pop	r17
    2d58:	0f 91       	pop	r16
    2d5a:	ff 90       	pop	r15
    2d5c:	ef 90       	pop	r14
    2d5e:	df 90       	pop	r13
    2d60:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2d62:	0c 94 88 1c 	jmp	0x3910	; 0x3910 <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2d66:	60 3f       	cpi	r22, 0xF0	; 240
    2d68:	49 f1       	breq	.+82     	; 0x2dbc <process_action+0x480>
    2d6a:	18 f4       	brcc	.+6      	; 0x2d72 <process_action+0x436>
    2d6c:	60 3e       	cpi	r22, 0xE0	; 224
    2d6e:	48 f4       	brcc	.+18     	; 0x2d82 <process_action+0x446>
    2d70:	8c c0       	rjmp	.+280    	; 0x2e8a <process_action+0x54e>
    2d72:	62 3f       	cpi	r22, 0xF2	; 242
    2d74:	09 f4       	brne	.+2      	; 0x2d78 <process_action+0x43c>
    2d76:	51 c0       	rjmp	.+162    	; 0x2e1a <process_action+0x4de>
    2d78:	e0 f1       	brcs	.+120    	; 0x2df2 <process_action+0x4b6>
    2d7a:	63 3f       	cpi	r22, 0xF3	; 243
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <process_action+0x444>
    2d7e:	61 c0       	rjmp	.+194    	; 0x2e42 <process_action+0x506>
    2d80:	84 c0       	rjmp	.+264    	; 0x2e8a <process_action+0x54e>
    2d82:	16 2f       	mov	r17, r22
    2d84:	1f 70       	andi	r17, 0x0F	; 15
    2d86:	84 2f       	mov	r24, r20
    2d88:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2d8a:	ff 20       	and	r15, r15
    2d8c:	21 f0       	breq	.+8      	; 0x2d96 <process_action+0x45a>
                        layer_on(action.layer_tap.val);
    2d8e:	0e 94 21 1c 	call	0x3842	; 0x3842 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2d92:	81 2f       	mov	r24, r17
    2d94:	89 ce       	rjmp	.-750    	; 0x2aa8 <process_action+0x16c>
                    } else {
                        layer_off(action.layer_tap.val);
    2d96:	0e 94 42 1c 	call	0x3884	; 0x3884 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2d9a:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2d9c:	28 96       	adiw	r28, 0x08	; 8
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
    2dac:	1f 91       	pop	r17
    2dae:	0f 91       	pop	r16
    2db0:	ff 90       	pop	r15
    2db2:	ef 90       	pop	r14
    2db4:	df 90       	pop	r13
    2db6:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2db8:	0c 94 97 14 	jmp	0x292e	; 0x292e <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2dbc:	ff 20       	and	r15, r15
    2dbe:	a9 f0       	breq	.+42     	; 0x2dea <process_action+0x4ae>
                        if (tap_count < TAPPING_TOGGLE) {
    2dc0:	25 30       	cpi	r18, 0x05	; 5
    2dc2:	08 f0       	brcs	.+2      	; 0x2dc6 <process_action+0x48a>
    2dc4:	b2 c0       	rjmp	.+356    	; 0x2f2a <process_action+0x5ee>
                            layer_invert(action.layer_tap.val);
    2dc6:	84 2f       	mov	r24, r20
    2dc8:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2dca:	28 96       	adiw	r28, 0x08	; 8
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	f8 94       	cli
    2dd0:	de bf       	out	0x3e, r29	; 62
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	cd bf       	out	0x3d, r28	; 61
    2dd6:	df 91       	pop	r29
    2dd8:	cf 91       	pop	r28
    2dda:	1f 91       	pop	r17
    2ddc:	0f 91       	pop	r16
    2dde:	ff 90       	pop	r15
    2de0:	ef 90       	pop	r14
    2de2:	df 90       	pop	r13
    2de4:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2de6:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2dea:	26 30       	cpi	r18, 0x06	; 6
    2dec:	08 f0       	brcs	.+2      	; 0x2df0 <process_action+0x4b4>
    2dee:	9d c0       	rjmp	.+314    	; 0x2f2a <process_action+0x5ee>
    2df0:	ea cf       	rjmp	.-44     	; 0x2dc6 <process_action+0x48a>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2df2:	ff 20       	and	r15, r15
    2df4:	a1 f0       	breq	.+40     	; 0x2e1e <process_action+0x4e2>
    2df6:	84 2f       	mov	r24, r20
    2df8:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2dfa:	28 96       	adiw	r28, 0x08	; 8
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	df 91       	pop	r29
    2e08:	cf 91       	pop	r28
    2e0a:	1f 91       	pop	r17
    2e0c:	0f 91       	pop	r16
    2e0e:	ff 90       	pop	r15
    2e10:	ef 90       	pop	r14
    2e12:	df 90       	pop	r13
    2e14:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2e16:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2e1a:	ff 20       	and	r15, r15
    2e1c:	61 f3       	breq	.-40     	; 0x2df6 <process_action+0x4ba>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2e1e:	84 2f       	mov	r24, r20
    2e20:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2e22:	28 96       	adiw	r28, 0x08	; 8
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	f8 94       	cli
    2e28:	de bf       	out	0x3e, r29	; 62
    2e2a:	0f be       	out	0x3f, r0	; 63
    2e2c:	cd bf       	out	0x3d, r28	; 61
    2e2e:	df 91       	pop	r29
    2e30:	cf 91       	pop	r28
    2e32:	1f 91       	pop	r17
    2e34:	0f 91       	pop	r16
    2e36:	ff 90       	pop	r15
    2e38:	ef 90       	pop	r14
    2e3a:	df 90       	pop	r13
    2e3c:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2e3e:	0c 94 42 1c 	jmp	0x3884	; 0x3884 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2e42:	ff 20       	and	r15, r15
    2e44:	91 f0       	breq	.+36     	; 0x2e6a <process_action+0x52e>
    2e46:	84 2f       	mov	r24, r20
    2e48:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2e4a:	28 96       	adiw	r28, 0x08	; 8
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	df 91       	pop	r29
    2e58:	cf 91       	pop	r28
    2e5a:	1f 91       	pop	r17
    2e5c:	0f 91       	pop	r16
    2e5e:	ff 90       	pop	r15
    2e60:	ef 90       	pop	r14
    2e62:	df 90       	pop	r13
    2e64:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2e66:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2e6a:	28 96       	adiw	r28, 0x08	; 8
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	f8 94       	cli
    2e70:	de bf       	out	0x3e, r29	; 62
    2e72:	0f be       	out	0x3f, r0	; 63
    2e74:	cd bf       	out	0x3d, r28	; 61
    2e76:	df 91       	pop	r29
    2e78:	cf 91       	pop	r28
    2e7a:	1f 91       	pop	r17
    2e7c:	0f 91       	pop	r16
    2e7e:	ff 90       	pop	r15
    2e80:	ef 90       	pop	r14
    2e82:	df 90       	pop	r13
    2e84:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2e86:	0c 94 02 1c 	jmp	0x3804	; 0x3804 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2e8a:	ff 20       	and	r15, r15
    2e8c:	a1 f0       	breq	.+40     	; 0x2eb6 <process_action+0x57a>
                        if (tap_count > 0) {
    2e8e:	22 23       	and	r18, r18
    2e90:	09 f4       	brne	.+2      	; 0x2e94 <process_action+0x558>
    2e92:	b1 cf       	rjmp	.-158    	; 0x2df6 <process_action+0x4ba>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2e94:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2e96:	28 96       	adiw	r28, 0x08	; 8
    2e98:	0f b6       	in	r0, 0x3f	; 63
    2e9a:	f8 94       	cli
    2e9c:	de bf       	out	0x3e, r29	; 62
    2e9e:	0f be       	out	0x3f, r0	; 63
    2ea0:	cd bf       	out	0x3d, r28	; 61
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	1f 91       	pop	r17
    2ea8:	0f 91       	pop	r16
    2eaa:	ff 90       	pop	r15
    2eac:	ef 90       	pop	r14
    2eae:	df 90       	pop	r13
    2eb0:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2eb2:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2eb6:	22 23       	and	r18, r18
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <process_action+0x580>
    2eba:	b1 cf       	rjmp	.-158    	; 0x2e1e <process_action+0x4e2>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2ebc:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2ebe:	28 96       	adiw	r28, 0x08	; 8
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
    2eca:	df 91       	pop	r29
    2ecc:	cf 91       	pop	r28
    2ece:	1f 91       	pop	r17
    2ed0:	0f 91       	pop	r16
    2ed2:	ff 90       	pop	r15
    2ed4:	ef 90       	pop	r14
    2ed6:	df 90       	pop	r13
    2ed8:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2eda:	0c 94 41 14 	jmp	0x2882	; 0x2882 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2ede:	4f 70       	andi	r20, 0x0F	; 15
    2ee0:	c8 01       	movw	r24, r16
    2ee2:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2ee6:	28 96       	adiw	r28, 0x08	; 8
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	f8 94       	cli
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	cd bf       	out	0x3d, r28	; 61
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	1f 91       	pop	r17
    2ef8:	0f 91       	pop	r16
    2efa:	ff 90       	pop	r15
    2efc:	ef 90       	pop	r14
    2efe:	df 90       	pop	r13
    2f00:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2f02:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2f06:	4f 70       	andi	r20, 0x0F	; 15
    2f08:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2f0a:	28 96       	adiw	r28, 0x08	; 8
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	f8 94       	cli
    2f10:	de bf       	out	0x3e, r29	; 62
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	cd bf       	out	0x3d, r28	; 61
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	1f 91       	pop	r17
    2f1c:	0f 91       	pop	r16
    2f1e:	ff 90       	pop	r15
    2f20:	ef 90       	pop	r14
    2f22:	df 90       	pop	r13
    2f24:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2f26:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2f2a:	28 96       	adiw	r28, 0x08	; 8
    2f2c:	0f b6       	in	r0, 0x3f	; 63
    2f2e:	f8 94       	cli
    2f30:	de bf       	out	0x3e, r29	; 62
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	cd bf       	out	0x3d, r28	; 61
    2f36:	df 91       	pop	r29
    2f38:	cf 91       	pop	r28
    2f3a:	1f 91       	pop	r17
    2f3c:	0f 91       	pop	r16
    2f3e:	ff 90       	pop	r15
    2f40:	ef 90       	pop	r14
    2f42:	df 90       	pop	r13
    2f44:	cf 90       	pop	r12
    2f46:	08 95       	ret

00002f48 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2f48:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <clear_weak_mods>
    clear_keys();
    2f4c:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <clear_keys>
    send_keyboard_report();
    2f50:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2f54:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <mousekey_clear>
    mousekey_send();
    2f58:	0e 94 c4 23 	call	0x4788	; 0x4788 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	0e 94 38 12 	call	0x2470	; 0x2470 <host_system_send>
    host_consumer_send(0);
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	0c 94 4e 12 	jmp	0x249c	; 0x249c <host_consumer_send>

00002f6c <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2f6c:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <clear_mods>
    clear_keyboard_but_mods();
    2f70:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <clear_keyboard_but_mods>

00002f74 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2f74:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <layer_switch_get_action>

    switch (action.kind.id) {
    2f78:	29 2f       	mov	r18, r25
    2f7a:	22 95       	swap	r18
    2f7c:	2f 70       	andi	r18, 0x0F	; 15
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	2c 30       	cpi	r18, 0x0C	; 12
    2f82:	31 05       	cpc	r19, r1
    2f84:	4c f4       	brge	.+18     	; 0x2f98 <is_tap_key+0x24>
    2f86:	2a 30       	cpi	r18, 0x0A	; 10
    2f88:	31 05       	cpc	r19, r1
    2f8a:	6c f4       	brge	.+26     	; 0x2fa6 <is_tap_key+0x32>
    2f8c:	22 50       	subi	r18, 0x02	; 2
    2f8e:	31 09       	sbc	r19, r1
    2f90:	22 30       	cpi	r18, 0x02	; 2
    2f92:	31 05       	cpc	r19, r1
    2f94:	70 f4       	brcc	.+28     	; 0x2fb2 <is_tap_key+0x3e>
    2f96:	07 c0       	rjmp	.+14     	; 0x2fa6 <is_tap_key+0x32>
    2f98:	2c 30       	cpi	r18, 0x0C	; 12
    2f9a:	31 05       	cpc	r19, r1
    2f9c:	31 f0       	breq	.+12     	; 0x2faa <is_tap_key+0x36>
    2f9e:	2f 30       	cpi	r18, 0x0F	; 15
    2fa0:	31 05       	cpc	r19, r1
    2fa2:	19 f0       	breq	.+6      	; 0x2faa <is_tap_key+0x36>
    2fa4:	06 c0       	rjmp	.+12     	; 0x2fb2 <is_tap_key+0x3e>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            return true;
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	08 95       	ret
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2faa:	93 fb       	bst	r25, 3
    2fac:	88 27       	eor	r24, r24
    2fae:	80 f9       	bld	r24, 0
    2fb0:	08 95       	ret
            return false;
    }
    return false;
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
}
    2fb4:	08 95       	ret

00002fb6 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2fb6:	cf 93       	push	r28
    2fb8:	df 93       	push	r29
    2fba:	00 d0       	rcall	.+0      	; 0x2fbc <debug_event+0x6>
    2fbc:	00 d0       	rcall	.+0      	; 0x2fbe <debug_event+0x8>
    2fbe:	1f 92       	push	r1
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2fc4:	0f 90       	pop	r0
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	0f 90       	pop	r0
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	08 95       	ret

00002fd4 <debug_record>:

void debug_record(keyrecord_t record)
{
    2fd4:	cf 93       	push	r28
    2fd6:	df 93       	push	r29
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <debug_record+0x6>
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <debug_record+0x8>
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <debug_record+0xa>
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2fe2:	26 96       	adiw	r28, 0x06	; 6
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61
    2fee:	df 91       	pop	r29
    2ff0:	cf 91       	pop	r28
    2ff2:	08 95       	ret

00002ff4 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2ff4:	1f 93       	push	r17
    2ff6:	cf 93       	push	r28
    2ff8:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2ffa:	c0 91 70 01 	lds	r28, 0x0170
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2ffe:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3000:	80 91 71 01 	lds	r24, 0x0171
    3004:	c8 17       	cp	r28, r24
    3006:	99 f0       	breq	.+38     	; 0x302e <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    3008:	d0 e0       	ldi	r29, 0x00	; 0
    300a:	1c 9f       	mul	r17, r28
    300c:	f0 01       	movw	r30, r0
    300e:	1d 9f       	mul	r17, r29
    3010:	f0 0d       	add	r31, r0
    3012:	11 24       	eor	r1, r1
    3014:	ee 58       	subi	r30, 0x8E	; 142
    3016:	fe 4f       	sbci	r31, 0xFE	; 254
    3018:	40 81       	ld	r20, Z
    301a:	51 81       	ldd	r21, Z+1	; 0x01
    301c:	62 81       	ldd	r22, Z+2	; 0x02
    301e:	73 81       	ldd	r23, Z+3	; 0x03
    3020:	84 81       	ldd	r24, Z+4	; 0x04
    3022:	95 81       	ldd	r25, Z+5	; 0x05
    3024:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3028:	21 96       	adiw	r28, 0x01	; 1
    302a:	c7 70       	andi	r28, 0x07	; 7
    302c:	e9 cf       	rjmp	.-46     	; 0x3000 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    302e:	df 91       	pop	r29
    3030:	cf 91       	pop	r28
    3032:	1f 91       	pop	r17
    3034:	08 95       	ret

00003036 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    3036:	40 91 a2 01 	lds	r20, 0x01A2
    303a:	50 91 a3 01 	lds	r21, 0x01A3
    303e:	60 91 a4 01 	lds	r22, 0x01A4
    3042:	70 91 a5 01 	lds	r23, 0x01A5
    3046:	80 91 a6 01 	lds	r24, 0x01A6
    304a:	90 91 a7 01 	lds	r25, 0x01A7
    304e:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <debug_record>

00003052 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    3052:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    3054:	80 91 a7 01 	lds	r24, 0x01A7
    3058:	82 95       	swap	r24
    305a:	8f 70       	andi	r24, 0x0F	; 15
    305c:	09 f0       	breq	.+2      	; 0x3060 <waiting_buffer_scan_tap+0xe>
    305e:	5f c0       	rjmp	.+190    	; 0x311e <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    3060:	80 91 a4 01 	lds	r24, 0x01A4
    3064:	88 23       	and	r24, r24
    3066:	09 f4       	brne	.+2      	; 0x306a <waiting_buffer_scan_tap+0x18>
    3068:	5a c0       	rjmp	.+180    	; 0x311e <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    306a:	20 91 70 01 	lds	r18, 0x0170
    306e:	a0 91 71 01 	lds	r26, 0x0171
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3072:	60 91 a2 01 	lds	r22, 0x01A2
    3076:	70 91 a3 01 	lds	r23, 0x01A3
    307a:	80 91 a5 01 	lds	r24, 0x01A5
    307e:	90 91 a6 01 	lds	r25, 0x01A6
    3082:	31 e0       	ldi	r19, 0x01	; 1
    3084:	6f 3f       	cpi	r22, 0xFF	; 255
    3086:	09 f0       	breq	.+2      	; 0x308a <waiting_buffer_scan_tap+0x38>
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	b3 2f       	mov	r27, r19
    308c:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    308e:	2a 17       	cp	r18, r26
    3090:	09 f4       	brne	.+2      	; 0x3094 <waiting_buffer_scan_tap+0x42>
    3092:	45 c0       	rjmp	.+138    	; 0x311e <waiting_buffer_scan_tap+0xcc>
    3094:	00 97       	sbiw	r24, 0x00	; 0
    3096:	21 f0       	breq	.+8      	; 0x30a0 <waiting_buffer_scan_tap+0x4e>
    3098:	7f 3f       	cpi	r23, 0xFF	; 255
    309a:	21 f4       	brne	.+8      	; 0x30a4 <waiting_buffer_scan_tap+0x52>
    309c:	4b 2f       	mov	r20, r27
    309e:	03 c0       	rjmp	.+6      	; 0x30a6 <waiting_buffer_scan_tap+0x54>
    30a0:	41 e0       	ldi	r20, 0x01	; 1
    30a2:	01 c0       	rjmp	.+2      	; 0x30a6 <waiting_buffer_scan_tap+0x54>
    30a4:	40 e0       	ldi	r20, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    30a8:	40 fd       	sbrc	r20, 0
    30aa:	35 c0       	rjmp	.+106    	; 0x3116 <waiting_buffer_scan_tap+0xc4>
    30ac:	c2 9f       	mul	r28, r18
    30ae:	f0 01       	movw	r30, r0
    30b0:	c3 9f       	mul	r28, r19
    30b2:	f0 0d       	add	r31, r0
    30b4:	11 24       	eor	r1, r1
    30b6:	ee 58       	subi	r30, 0x8E	; 142
    30b8:	fe 4f       	sbci	r31, 0xFE	; 254
    30ba:	41 81       	ldd	r20, Z+1	; 0x01
    30bc:	74 13       	cpse	r23, r20
    30be:	2b c0       	rjmp	.+86     	; 0x3116 <waiting_buffer_scan_tap+0xc4>
    30c0:	40 81       	ld	r20, Z
    30c2:	64 13       	cpse	r22, r20
    30c4:	28 c0       	rjmp	.+80     	; 0x3116 <waiting_buffer_scan_tap+0xc4>
    30c6:	42 81       	ldd	r20, Z+2	; 0x02
    30c8:	41 11       	cpse	r20, r1
    30ca:	25 c0       	rjmp	.+74     	; 0x3116 <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    30cc:	43 81       	ldd	r20, Z+3	; 0x03
    30ce:	54 81       	ldd	r21, Z+4	; 0x04
    30d0:	48 17       	cp	r20, r24
    30d2:	59 07       	cpc	r21, r25
    30d4:	10 f4       	brcc	.+4      	; 0x30da <waiting_buffer_scan_tap+0x88>
    30d6:	41 50       	subi	r20, 0x01	; 1
    30d8:	51 09       	sbc	r21, r1
    30da:	48 1b       	sub	r20, r24
    30dc:	59 0b       	sbc	r21, r25
    30de:	48 3c       	cpi	r20, 0xC8	; 200
    30e0:	51 05       	cpc	r21, r1
    30e2:	c8 f4       	brcc	.+50     	; 0x3116 <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    30e4:	80 91 a7 01 	lds	r24, 0x01A7
    30e8:	8f 70       	andi	r24, 0x0F	; 15
    30ea:	80 61       	ori	r24, 0x10	; 16
    30ec:	80 93 a7 01 	sts	0x01A7, r24
            waiting_buffer[i].tap.count = 1;
    30f0:	86 e0       	ldi	r24, 0x06	; 6
    30f2:	82 9f       	mul	r24, r18
    30f4:	f0 01       	movw	r30, r0
    30f6:	83 9f       	mul	r24, r19
    30f8:	f0 0d       	add	r31, r0
    30fa:	11 24       	eor	r1, r1
    30fc:	e9 58       	subi	r30, 0x89	; 137
    30fe:	fe 4f       	sbci	r31, 0xFE	; 254
    3100:	80 81       	ld	r24, Z
    3102:	8f 70       	andi	r24, 0x0F	; 15
    3104:	80 61       	ori	r24, 0x10	; 16
    3106:	80 83       	st	Z, r24
            process_action(&tapping_key);
    3108:	82 ea       	ldi	r24, 0xA2	; 162
    310a:	91 e0       	ldi	r25, 0x01	; 1
    310c:	0e 94 9e 14 	call	0x293c	; 0x293c <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    3110:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    3112:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3116:	2f 5f       	subi	r18, 0xFF	; 255
    3118:	3f 4f       	sbci	r19, 0xFF	; 255
    311a:	27 70       	andi	r18, 0x07	; 7
    311c:	b8 cf       	rjmp	.-144    	; 0x308e <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    311e:	cf 91       	pop	r28
    3120:	08 95       	ret

00003122 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    3122:	cf 92       	push	r12
    3124:	df 92       	push	r13
    3126:	ef 92       	push	r14
    3128:	ff 92       	push	r15
    312a:	0f 93       	push	r16
    312c:	1f 93       	push	r17
    312e:	cf 93       	push	r28
    3130:	df 93       	push	r29
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	62 97       	sbiw	r28, 0x12	; 18
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	f8 94       	cli
    313c:	de bf       	out	0x3e, r29	; 62
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	cd bf       	out	0x3d, r28	; 61
    3142:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    3144:	85 e0       	ldi	r24, 0x05	; 5
    3146:	f8 01       	movw	r30, r16
    3148:	de 01       	movw	r26, r28
    314a:	1d 96       	adiw	r26, 0x0d	; 13
    314c:	01 90       	ld	r0, Z+
    314e:	0d 92       	st	X+, r0
    3150:	8a 95       	dec	r24
    3152:	e1 f7       	brne	.-8      	; 0x314c <process_tapping+0x2a>
    3154:	d8 01       	movw	r26, r16
    3156:	4c 91       	ld	r20, X
    3158:	11 96       	adiw	r26, 0x01	; 1
    315a:	5c 91       	ld	r21, X
    315c:	11 97       	sbiw	r26, 0x01	; 1
    315e:	12 96       	adiw	r26, 0x02	; 2
    3160:	6c 91       	ld	r22, X
    3162:	12 97       	sbiw	r26, 0x02	; 2
    3164:	13 96       	adiw	r26, 0x03	; 3
    3166:	ed 90       	ld	r14, X+
    3168:	fc 90       	ld	r15, X
    316a:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    316c:	70 91 a2 01 	lds	r23, 0x01A2
    3170:	e0 91 a3 01 	lds	r30, 0x01A3
    3174:	20 91 a5 01 	lds	r18, 0x01A5
    3178:	30 91 a6 01 	lds	r19, 0x01A6
    317c:	21 15       	cp	r18, r1
    317e:	31 05       	cpc	r19, r1
    3180:	31 f0       	breq	.+12     	; 0x318e <process_tapping+0x6c>
    3182:	ef 3f       	cpi	r30, 0xFF	; 255
    3184:	31 f4       	brne	.+12     	; 0x3192 <process_tapping+0x70>
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	7f 3f       	cpi	r23, 0xFF	; 255
    318a:	19 f4       	brne	.+6      	; 0x3192 <process_tapping+0x70>
    318c:	03 c0       	rjmp	.+6      	; 0x3194 <process_tapping+0x72>
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	01 c0       	rjmp	.+2      	; 0x3194 <process_tapping+0x72>
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	b8 2f       	mov	r27, r24
    3196:	b1 70       	andi	r27, 0x01	; 1
    3198:	cb 2e       	mov	r12, r27
    319a:	80 fd       	sbrc	r24, 0
    319c:	6c c1       	rjmp	.+728    	; 0x3476 <process_tapping+0x354>
    319e:	d0 90 a4 01 	lds	r13, 0x01A4
    31a2:	dd 20       	and	r13, r13
    31a4:	09 f4       	brne	.+2      	; 0x31a8 <process_tapping+0x86>
    31a6:	f5 c0       	rjmp	.+490    	; 0x3392 <process_tapping+0x270>
    31a8:	f0 91 a7 01 	lds	r31, 0x01A7
        if (WITHIN_TAPPING_TERM(event)) {
    31ac:	e2 16       	cp	r14, r18
    31ae:	f3 06       	cpc	r15, r19
    31b0:	38 f0       	brcs	.+14     	; 0x31c0 <process_tapping+0x9e>
    31b2:	c7 01       	movw	r24, r14
    31b4:	82 1b       	sub	r24, r18
    31b6:	93 0b       	sbc	r25, r19
    31b8:	88 3c       	cpi	r24, 0xC8	; 200
    31ba:	91 05       	cpc	r25, r1
    31bc:	48 f0       	brcs	.+18     	; 0x31d0 <process_tapping+0xae>
    31be:	9b c0       	rjmp	.+310    	; 0x32f6 <process_tapping+0x1d4>
    31c0:	20 95       	com	r18
    31c2:	30 95       	com	r19
    31c4:	2e 0d       	add	r18, r14
    31c6:	3f 1d       	adc	r19, r15
    31c8:	28 3c       	cpi	r18, 0xC8	; 200
    31ca:	31 05       	cpc	r19, r1
    31cc:	08 f0       	brcs	.+2      	; 0x31d0 <process_tapping+0xae>
    31ce:	93 c0       	rjmp	.+294    	; 0x32f6 <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    31d0:	8f 2f       	mov	r24, r31
    31d2:	80 7f       	andi	r24, 0xF0	; 240
    31d4:	09 f0       	breq	.+2      	; 0x31d8 <process_tapping+0xb6>
    31d6:	52 c0       	rjmp	.+164    	; 0x327c <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    31d8:	e5 13       	cpse	r30, r21
    31da:	14 c0       	rjmp	.+40     	; 0x3204 <process_tapping+0xe2>
    31dc:	74 13       	cpse	r23, r20
    31de:	12 c0       	rjmp	.+36     	; 0x3204 <process_tapping+0xe2>
    31e0:	d6 2e       	mov	r13, r22
    31e2:	61 11       	cpse	r22, r1
    31e4:	0f c0       	rjmp	.+30     	; 0x3204 <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    31e6:	ff 70       	andi	r31, 0x0F	; 15
    31e8:	f0 61       	ori	r31, 0x10	; 16
    31ea:	f0 93 a7 01 	sts	0x01A7, r31
                    debug_tapping_key();
    31ee:	0e 94 1b 18 	call	0x3036	; 0x3036 <debug_tapping_key>
                    process_action(&tapping_key);
    31f2:	82 ea       	ldi	r24, 0xA2	; 162
    31f4:	91 e0       	ldi	r25, 0x01	; 1
    31f6:	0e 94 9e 14 	call	0x293c	; 0x293c <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    31fa:	80 91 a7 01 	lds	r24, 0x01A7
    31fe:	f8 01       	movw	r30, r16
    3200:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    3202:	6c c1       	rjmp	.+728    	; 0x34dc <process_tapping+0x3ba>
    3204:	ef 28       	or	r14, r15
    3206:	31 f0       	breq	.+12     	; 0x3214 <process_tapping+0xf2>
    3208:	5f 3f       	cpi	r21, 0xFF	; 255
    320a:	31 f4       	brne	.+12     	; 0x3218 <process_tapping+0xf6>
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	4f 3f       	cpi	r20, 0xFF	; 255
    3210:	19 f4       	brne	.+6      	; 0x3218 <process_tapping+0xf6>
    3212:	03 c0       	rjmp	.+6      	; 0x321a <process_tapping+0xf8>
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	01 c0       	rjmp	.+2      	; 0x321a <process_tapping+0xf8>
    3218:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    321a:	80 fd       	sbrc	r24, 0
    321c:	03 c0       	rjmp	.+6      	; 0x3224 <process_tapping+0x102>
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	86 27       	eor	r24, r22
    3222:	01 c0       	rjmp	.+2      	; 0x3226 <process_tapping+0x104>
    3224:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    3226:	f8 2f       	mov	r31, r24
    3228:	f1 70       	andi	r31, 0x01	; 1
    322a:	ff 2e       	mov	r15, r31
    322c:	80 ff       	sbrs	r24, 0
    322e:	1c c0       	rjmp	.+56     	; 0x3268 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3230:	80 91 70 01 	lds	r24, 0x0170
    3234:	20 91 71 01 	lds	r18, 0x0171
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3238:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    323a:	82 17       	cp	r24, r18
    323c:	09 f4       	brne	.+2      	; 0x3240 <process_tapping+0x11e>
    323e:	28 c1       	rjmp	.+592    	; 0x3490 <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	38 9f       	mul	r19, r24
    3244:	f0 01       	movw	r30, r0
    3246:	39 9f       	mul	r19, r25
    3248:	f0 0d       	add	r31, r0
    324a:	11 24       	eor	r1, r1
    324c:	ee 58       	subi	r30, 0x8E	; 142
    324e:	fe 4f       	sbci	r31, 0xFE	; 254
    3250:	71 81       	ldd	r23, Z+1	; 0x01
    3252:	57 13       	cpse	r21, r23
    3254:	06 c0       	rjmp	.+12     	; 0x3262 <process_tapping+0x140>
    3256:	70 81       	ld	r23, Z
    3258:	47 13       	cpse	r20, r23
    325a:	03 c0       	rjmp	.+6      	; 0x3262 <process_tapping+0x140>
    325c:	72 81       	ldd	r23, Z+2	; 0x02
    325e:	67 13       	cpse	r22, r23
    3260:	03 c0       	rjmp	.+6      	; 0x3268 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3262:	01 96       	adiw	r24, 0x01	; 1
    3264:	87 70       	andi	r24, 0x07	; 7
    3266:	e9 cf       	rjmp	.-46     	; 0x323a <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    3268:	d6 2e       	mov	r13, r22
    326a:	66 23       	and	r22, r22
    326c:	09 f4       	brne	.+2      	; 0x3270 <process_tapping+0x14e>
    326e:	36 c1       	rjmp	.+620    	; 0x34dc <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    3270:	80 91 a7 01 	lds	r24, 0x01A7
    3274:	81 60       	ori	r24, 0x01	; 1
    3276:	80 93 a7 01 	sts	0x01A7, r24
    327a:	53 c0       	rjmp	.+166    	; 0x3322 <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    327c:	e5 13       	cpse	r30, r21
    327e:	08 c0       	rjmp	.+16     	; 0x3290 <process_tapping+0x16e>
    3280:	74 13       	cpse	r23, r20
    3282:	06 c0       	rjmp	.+12     	; 0x3290 <process_tapping+0x16e>
    3284:	61 11       	cpse	r22, r1
    3286:	04 c0       	rjmp	.+8      	; 0x3290 <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    3288:	d8 01       	movw	r26, r16
    328a:	15 96       	adiw	r26, 0x05	; 5
    328c:	fc 93       	st	X, r31
    328e:	ae c0       	rjmp	.+348    	; 0x33ec <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3290:	4d 87       	std	Y+13, r20	; 0x0d
    3292:	5e 87       	std	Y+14, r21	; 0x0e
    3294:	8d 85       	ldd	r24, Y+13	; 0x0d
    3296:	9e 85       	ldd	r25, Y+14	; 0x0e
    3298:	6a 8b       	std	Y+18, r22	; 0x12
    329a:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <is_tap_key>
    329e:	6a 89       	ldd	r22, Y+18	; 0x12
    32a0:	88 23       	and	r24, r24
    32a2:	29 f1       	breq	.+74     	; 0x32ee <process_tapping+0x1cc>
    32a4:	d6 2e       	mov	r13, r22
    32a6:	66 23       	and	r22, r22
    32a8:	11 f1       	breq	.+68     	; 0x32ee <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    32aa:	20 91 a7 01 	lds	r18, 0x01A7
    32ae:	82 2f       	mov	r24, r18
    32b0:	82 95       	swap	r24
    32b2:	8f 70       	andi	r24, 0x0F	; 15
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	02 97       	sbiw	r24, 0x02	; 2
    32b8:	0c f4       	brge	.+2      	; 0x32bc <process_tapping+0x19a>
    32ba:	60 c0       	rjmp	.+192    	; 0x337c <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    32bc:	80 91 a2 01 	lds	r24, 0x01A2
    32c0:	90 91 a3 01 	lds	r25, 0x01A3
    32c4:	98 87       	std	Y+8, r25	; 0x08
    32c6:	8f 83       	std	Y+7, r24	; 0x07
    32c8:	19 86       	std	Y+9, r1	; 0x09
    32ca:	fb 86       	std	Y+11, r15	; 0x0b
    32cc:	ea 86       	std	Y+10, r14	; 0x0a
    32ce:	2c 87       	std	Y+12, r18	; 0x0c
    32d0:	ce 01       	movw	r24, r28
    32d2:	07 96       	adiw	r24, 0x07	; 7
    32d4:	51 c0       	rjmp	.+162    	; 0x3378 <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    32d6:	e5 17       	cp	r30, r21
    32d8:	31 f1       	breq	.+76     	; 0x3326 <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    32da:	4d 87       	std	Y+13, r20	; 0x0d
    32dc:	5e 87       	std	Y+14, r21	; 0x0e
    32de:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32e2:	6a 8b       	std	Y+18, r22	; 0x12
    32e4:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <is_tap_key>
    32e8:	6a 89       	ldd	r22, Y+18	; 0x12
    32ea:	81 11       	cpse	r24, r1
    32ec:	2e c0       	rjmp	.+92     	; 0x334a <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    32ee:	c8 01       	movw	r24, r16
    32f0:	0e 94 9e 14 	call	0x293c	; 0x293c <process_action>
    32f4:	a4 c0       	rjmp	.+328    	; 0x343e <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    32f6:	8f 2f       	mov	r24, r31
    32f8:	80 7f       	andi	r24, 0xF0	; 240
    32fa:	69 f7       	brne	.-38     	; 0x32d6 <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    32fc:	7e 2d       	mov	r23, r14
    32fe:	f9 8a       	std	Y+17, r15	; 0x11
    3300:	e8 8a       	std	Y+16, r14	; 0x10
    3302:	89 89       	ldd	r24, Y+17	; 0x11
    3304:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <debug_event>
                process_action(&tapping_key);
    3308:	82 ea       	ldi	r24, 0xA2	; 162
    330a:	91 e0       	ldi	r25, 0x01	; 1
    330c:	0e 94 9e 14 	call	0x293c	; 0x293c <process_action>
                tapping_key = (keyrecord_t){};
    3310:	e2 ea       	ldi	r30, 0xA2	; 162
    3312:	f1 e0       	ldi	r31, 0x01	; 1
    3314:	86 e0       	ldi	r24, 0x06	; 6
    3316:	df 01       	movw	r26, r30
    3318:	1d 92       	st	X+, r1
    331a:	8a 95       	dec	r24
    331c:	e9 f7       	brne	.-6      	; 0x3318 <process_tapping+0x1f6>
                debug_tapping_key();
    331e:	0e 94 1b 18 	call	0x3036	; 0x3036 <debug_tapping_key>
                return false;
    3322:	d1 2c       	mov	r13, r1
    3324:	db c0       	rjmp	.+438    	; 0x34dc <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3326:	74 13       	cpse	r23, r20
    3328:	d8 cf       	rjmp	.-80     	; 0x32da <process_tapping+0x1b8>
    332a:	61 11       	cpse	r22, r1
    332c:	d6 cf       	rjmp	.-84     	; 0x32da <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    332e:	d8 01       	movw	r26, r16
    3330:	15 96       	adiw	r26, 0x05	; 5
    3332:	fc 93       	st	X, r31
                    process_action(keyp);
    3334:	c8 01       	movw	r24, r16
    3336:	0e 94 9e 14 	call	0x293c	; 0x293c <process_action>
                    tapping_key = (keyrecord_t){};
    333a:	e2 ea       	ldi	r30, 0xA2	; 162
    333c:	f1 e0       	ldi	r31, 0x01	; 1
    333e:	86 e0       	ldi	r24, 0x06	; 6
    3340:	df 01       	movw	r26, r30
    3342:	1d 92       	st	X+, r1
    3344:	8a 95       	dec	r24
    3346:	e9 f7       	brne	.-6      	; 0x3342 <process_tapping+0x220>
                    return true;
    3348:	c9 c0       	rjmp	.+402    	; 0x34dc <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    334a:	d6 2e       	mov	r13, r22
    334c:	66 23       	and	r22, r22
    334e:	79 f2       	breq	.-98     	; 0x32ee <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    3350:	20 91 a7 01 	lds	r18, 0x01A7
    3354:	82 2f       	mov	r24, r18
    3356:	82 95       	swap	r24
    3358:	8f 70       	andi	r24, 0x0F	; 15
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	02 97       	sbiw	r24, 0x02	; 2
    335e:	74 f0       	brlt	.+28     	; 0x337c <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    3360:	80 91 a2 01 	lds	r24, 0x01A2
    3364:	90 91 a3 01 	lds	r25, 0x01A3
    3368:	9a 83       	std	Y+2, r25	; 0x02
    336a:	89 83       	std	Y+1, r24	; 0x01
    336c:	1b 82       	std	Y+3, r1	; 0x03
    336e:	fd 82       	std	Y+5, r15	; 0x05
    3370:	ec 82       	std	Y+4, r14	; 0x04
    3372:	2e 83       	std	Y+6, r18	; 0x06
    3374:	ce 01       	movw	r24, r28
    3376:	01 96       	adiw	r24, 0x01	; 1
    3378:	0e 94 9e 14 	call	0x293c	; 0x293c <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    337c:	86 e0       	ldi	r24, 0x06	; 6
    337e:	f8 01       	movw	r30, r16
    3380:	a2 ea       	ldi	r26, 0xA2	; 162
    3382:	b1 e0       	ldi	r27, 0x01	; 1
    3384:	01 90       	ld	r0, Z+
    3386:	0d 92       	st	X+, r0
    3388:	8a 95       	dec	r24
    338a:	e1 f7       	brne	.-8      	; 0x3384 <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    338c:	0e 94 29 18 	call	0x3052	; 0x3052 <waiting_buffer_scan_tap>
    3390:	6f c0       	rjmp	.+222    	; 0x3470 <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3392:	e2 16       	cp	r14, r18
    3394:	f3 06       	cpc	r15, r19
    3396:	28 f0       	brcs	.+10     	; 0x33a2 <process_tapping+0x280>
    3398:	c7 01       	movw	r24, r14
    339a:	82 1b       	sub	r24, r18
    339c:	93 0b       	sbc	r25, r19
    339e:	9c 01       	movw	r18, r24
    33a0:	04 c0       	rjmp	.+8      	; 0x33aa <process_tapping+0x288>
    33a2:	20 95       	com	r18
    33a4:	30 95       	com	r19
    33a6:	2e 0d       	add	r18, r14
    33a8:	3f 1d       	adc	r19, r15
    33aa:	28 3c       	cpi	r18, 0xC8	; 200
    33ac:	31 05       	cpc	r19, r1
    33ae:	08 f0       	brcs	.+2      	; 0x33b2 <process_tapping+0x290>
    33b0:	52 c0       	rjmp	.+164    	; 0x3456 <process_tapping+0x334>
            if (event.pressed) {
    33b2:	d6 2e       	mov	r13, r22
    33b4:	66 23       	and	r22, r22
    33b6:	09 f4       	brne	.+2      	; 0x33ba <process_tapping+0x298>
    33b8:	9a cf       	rjmp	.-204    	; 0x32ee <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    33ba:	e5 13       	cpse	r30, r21
    33bc:	2c c0       	rjmp	.+88     	; 0x3416 <process_tapping+0x2f4>
    33be:	74 13       	cpse	r23, r20
    33c0:	2a c0       	rjmp	.+84     	; 0x3416 <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    33c2:	80 91 a7 01 	lds	r24, 0x01A7
    33c6:	80 fd       	sbrc	r24, 0
    33c8:	1d c0       	rjmp	.+58     	; 0x3404 <process_tapping+0x2e2>
    33ca:	98 2f       	mov	r25, r24
    33cc:	92 95       	swap	r25
    33ce:	9f 70       	andi	r25, 0x0F	; 15
    33d0:	c9 f0       	breq	.+50     	; 0x3404 <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    33d2:	d8 01       	movw	r26, r16
    33d4:	15 96       	adiw	r26, 0x05	; 5
    33d6:	8c 93       	st	X, r24
    33d8:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    33da:	9f 30       	cpi	r25, 0x0F	; 15
    33dc:	39 f0       	breq	.+14     	; 0x33ec <process_tapping+0x2ca>
    33de:	9f 5f       	subi	r25, 0xFF	; 255
    33e0:	92 95       	swap	r25
    33e2:	90 7f       	andi	r25, 0xF0	; 240
    33e4:	8f 70       	andi	r24, 0x0F	; 15
    33e6:	89 2b       	or	r24, r25
    33e8:	15 96       	adiw	r26, 0x05	; 5
    33ea:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    33ec:	c8 01       	movw	r24, r16
    33ee:	0e 94 9e 14 	call	0x293c	; 0x293c <process_action>
                        tapping_key = *keyp;
    33f2:	86 e0       	ldi	r24, 0x06	; 6
    33f4:	f8 01       	movw	r30, r16
    33f6:	a2 ea       	ldi	r26, 0xA2	; 162
    33f8:	b1 e0       	ldi	r27, 0x01	; 1
    33fa:	01 90       	ld	r0, Z+
    33fc:	0d 92       	st	X+, r0
    33fe:	8a 95       	dec	r24
    3400:	e1 f7       	brne	.-8      	; 0x33fa <process_tapping+0x2d8>
    3402:	36 c0       	rjmp	.+108    	; 0x3470 <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    3404:	86 e0       	ldi	r24, 0x06	; 6
    3406:	f8 01       	movw	r30, r16
    3408:	a2 ea       	ldi	r26, 0xA2	; 162
    340a:	b1 e0       	ldi	r27, 0x01	; 1
    340c:	01 90       	ld	r0, Z+
    340e:	0d 92       	st	X+, r0
    3410:	8a 95       	dec	r24
    3412:	e1 f7       	brne	.-8      	; 0x340c <process_tapping+0x2ea>
                        return true;
    3414:	63 c0       	rjmp	.+198    	; 0x34dc <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    3416:	4d 87       	std	Y+13, r20	; 0x0d
    3418:	5e 87       	std	Y+14, r21	; 0x0e
    341a:	8d 85       	ldd	r24, Y+13	; 0x0d
    341c:	9e 85       	ldd	r25, Y+14	; 0x0e
    341e:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <is_tap_key>
    3422:	88 23       	and	r24, r24
    3424:	79 f0       	breq	.+30     	; 0x3444 <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    3426:	86 e0       	ldi	r24, 0x06	; 6
    3428:	f8 01       	movw	r30, r16
    342a:	a2 ea       	ldi	r26, 0xA2	; 162
    342c:	b1 e0       	ldi	r27, 0x01	; 1
    342e:	01 90       	ld	r0, Z+
    3430:	0d 92       	st	X+, r0
    3432:	8a 95       	dec	r24
    3434:	e1 f7       	brne	.-8      	; 0x342e <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    3436:	0e 94 29 18 	call	0x3052	; 0x3052 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    343a:	0e 94 1b 18 	call	0x3036	; 0x3036 <debug_tapping_key>
                    return true;
    343e:	dd 24       	eor	r13, r13
    3440:	d3 94       	inc	r13
    3442:	4c c0       	rjmp	.+152    	; 0x34dc <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    3444:	80 91 a7 01 	lds	r24, 0x01A7
    3448:	81 60       	ori	r24, 0x01	; 1
    344a:	80 93 a7 01 	sts	0x01A7, r24
                    process_action(keyp);
    344e:	c8 01       	movw	r24, r16
    3450:	0e 94 9e 14 	call	0x293c	; 0x293c <process_action>
                    return true;
    3454:	43 c0       	rjmp	.+134    	; 0x34dc <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    3456:	7e 2d       	mov	r23, r14
    3458:	f9 8a       	std	Y+17, r15	; 0x11
    345a:	e8 8a       	std	Y+16, r14	; 0x10
    345c:	89 89       	ldd	r24, Y+17	; 0x11
    345e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <debug_event>
            tapping_key = (keyrecord_t){};
    3462:	e2 ea       	ldi	r30, 0xA2	; 162
    3464:	f1 e0       	ldi	r31, 0x01	; 1
    3466:	86 e0       	ldi	r24, 0x06	; 6
    3468:	df 01       	movw	r26, r30
    346a:	1d 92       	st	X+, r1
    346c:	8a 95       	dec	r24
    346e:	e9 f7       	brne	.-6      	; 0x346a <process_tapping+0x348>
            debug_tapping_key();
    3470:	0e 94 1b 18 	call	0x3036	; 0x3036 <debug_tapping_key>
            return false;
    3474:	33 c0       	rjmp	.+102    	; 0x34dc <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    3476:	66 23       	and	r22, r22
    3478:	09 f4       	brne	.+2      	; 0x347c <process_tapping+0x35a>
    347a:	39 cf       	rjmp	.-398    	; 0x32ee <process_tapping+0x1cc>
    347c:	4d 87       	std	Y+13, r20	; 0x0d
    347e:	5e 87       	std	Y+14, r21	; 0x0e
    3480:	8d 85       	ldd	r24, Y+13	; 0x0d
    3482:	9e 85       	ldd	r25, Y+14	; 0x0e
    3484:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <is_tap_key>
    3488:	88 23       	and	r24, r24
    348a:	09 f4       	brne	.+2      	; 0x348e <process_tapping+0x36c>
    348c:	30 cf       	rjmp	.-416    	; 0x32ee <process_tapping+0x1cc>
    348e:	cb cf       	rjmp	.-106    	; 0x3426 <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    3490:	4d 87       	std	Y+13, r20	; 0x0d
    3492:	5e 87       	std	Y+14, r21	; 0x0e
    3494:	8d 85       	ldd	r24, Y+13	; 0x0d
    3496:	9e 85       	ldd	r25, Y+14	; 0x0e
    3498:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <layer_switch_get_action>
                    switch (action.kind.id) {
    349c:	29 2f       	mov	r18, r25
    349e:	22 95       	swap	r18
    34a0:	2f 70       	andi	r18, 0x0F	; 15
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	22 30       	cpi	r18, 0x02	; 2
    34a6:	31 05       	cpc	r19, r1
    34a8:	2c f4       	brge	.+10     	; 0x34b4 <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    34aa:	9f 70       	andi	r25, 0x0F	; 15
    34ac:	41 f0       	breq	.+16     	; 0x34be <process_tapping+0x39c>
    34ae:	81 11       	cpse	r24, r1
    34b0:	06 c0       	rjmp	.+12     	; 0x34be <process_tapping+0x39c>
    34b2:	0c c0       	rjmp	.+24     	; 0x34cc <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    34b4:	24 30       	cpi	r18, 0x04	; 4
    34b6:	31 05       	cpc	r19, r1
    34b8:	2c f4       	brge	.+10     	; 0x34c4 <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    34ba:	9f 70       	andi	r25, 0x0F	; 15
    34bc:	49 f4       	brne	.+18     	; 0x34d0 <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    34be:	80 5e       	subi	r24, 0xE0	; 224
    34c0:	88 30       	cpi	r24, 0x08	; 8
    34c2:	20 f0       	brcs	.+8      	; 0x34cc <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    34c4:	c8 01       	movw	r24, r16
    34c6:	0e 94 9e 14 	call	0x293c	; 0x293c <process_action>
                    return true;
    34ca:	cf 2c       	mov	r12, r15
    34cc:	dc 2c       	mov	r13, r12
    34ce:	06 c0       	rjmp	.+12     	; 0x34dc <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    34d0:	d8 01       	movw	r26, r16
    34d2:	15 96       	adiw	r26, 0x05	; 5
    34d4:	9c 91       	ld	r25, X
    34d6:	90 7f       	andi	r25, 0xF0	; 240
    34d8:	91 f7       	brne	.-28     	; 0x34be <process_tapping+0x39c>
    34da:	f8 cf       	rjmp	.-16     	; 0x34cc <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    34dc:	8d 2d       	mov	r24, r13
    34de:	62 96       	adiw	r28, 0x12	; 18
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	f8 94       	cli
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	cd bf       	out	0x3d, r28	; 61
    34ea:	df 91       	pop	r29
    34ec:	cf 91       	pop	r28
    34ee:	1f 91       	pop	r17
    34f0:	0f 91       	pop	r16
    34f2:	ff 90       	pop	r15
    34f4:	ef 90       	pop	r14
    34f6:	df 90       	pop	r13
    34f8:	cf 90       	pop	r12
    34fa:	08 95       	ret

000034fc <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    34fc:	1f 93       	push	r17
    34fe:	cf 93       	push	r28
    3500:	df 93       	push	r29
    3502:	cd b7       	in	r28, 0x3d	; 61
    3504:	de b7       	in	r29, 0x3e	; 62
    3506:	2c 97       	sbiw	r28, 0x0c	; 12
    3508:	0f b6       	in	r0, 0x3f	; 63
    350a:	f8 94       	cli
    350c:	de bf       	out	0x3e, r29	; 62
    350e:	0f be       	out	0x3f, r0	; 63
    3510:	cd bf       	out	0x3d, r28	; 61
    3512:	4f 83       	std	Y+7, r20	; 0x07
    3514:	58 87       	std	Y+8, r21	; 0x08
    3516:	69 87       	std	Y+9, r22	; 0x09
    3518:	7a 87       	std	Y+10, r23	; 0x0a
    351a:	8b 87       	std	Y+11, r24	; 0x0b
    351c:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    351e:	ce 01       	movw	r24, r28
    3520:	07 96       	adiw	r24, 0x07	; 7
    3522:	0e 94 91 18 	call	0x3122	; 0x3122 <process_tapping>
    3526:	88 23       	and	r24, r24
    3528:	c1 f0       	breq	.+48     	; 0x355a <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    352a:	2f 81       	ldd	r18, Y+7	; 0x07
    352c:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    352e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3530:	9b 85       	ldd	r25, Y+11	; 0x0b
    3532:	89 2b       	or	r24, r25
    3534:	31 f0       	breq	.+12     	; 0x3542 <action_tapping_process+0x46>
    3536:	3f 3f       	cpi	r19, 0xFF	; 255
    3538:	11 f0       	breq	.+4      	; 0x353e <action_tapping_process+0x42>
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	03 c0       	rjmp	.+6      	; 0x3544 <action_tapping_process+0x48>
    353e:	2f 3f       	cpi	r18, 0xFF	; 255
    3540:	e1 f7       	brne	.-8      	; 0x353a <action_tapping_process+0x3e>
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	81 11       	cpse	r24, r1
    3546:	47 c0       	rjmp	.+142    	; 0x35d6 <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    3548:	4f 81       	ldd	r20, Y+7	; 0x07
    354a:	58 85       	ldd	r21, Y+8	; 0x08
    354c:	69 85       	ldd	r22, Y+9	; 0x09
    354e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3550:	8b 85       	ldd	r24, Y+11	; 0x0b
    3552:	9c 85       	ldd	r25, Y+12	; 0x0c
    3554:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <debug_record>
    3558:	3e c0       	rjmp	.+124    	; 0x35d6 <action_tapping_process+0xda>
    355a:	86 e0       	ldi	r24, 0x06	; 6
    355c:	fe 01       	movw	r30, r28
    355e:	37 96       	adiw	r30, 0x07	; 7
    3560:	de 01       	movw	r26, r28
    3562:	11 96       	adiw	r26, 0x01	; 1
    3564:	01 90       	ld	r0, Z+
    3566:	0d 92       	st	X+, r0
    3568:	8a 95       	dec	r24
    356a:	e1 f7       	brne	.-8      	; 0x3564 <action_tapping_process+0x68>
    356c:	ff 81       	ldd	r31, Y+7	; 0x07
    356e:	e8 85       	ldd	r30, Y+8	; 0x08
    3570:	4a 85       	ldd	r20, Y+10	; 0x0a
    3572:	5b 85       	ldd	r21, Y+11	; 0x0b
    3574:	41 15       	cp	r20, r1
    3576:	51 05       	cpc	r21, r1
    3578:	31 f0       	breq	.+12     	; 0x3586 <action_tapping_process+0x8a>
    357a:	ef 3f       	cpi	r30, 0xFF	; 255
    357c:	31 f4       	brne	.+12     	; 0x358a <action_tapping_process+0x8e>
    357e:	81 e0       	ldi	r24, 0x01	; 1
    3580:	ff 3f       	cpi	r31, 0xFF	; 255
    3582:	19 f4       	brne	.+6      	; 0x358a <action_tapping_process+0x8e>
    3584:	03 c0       	rjmp	.+6      	; 0x358c <action_tapping_process+0x90>
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	01 c0       	rjmp	.+2      	; 0x358c <action_tapping_process+0x90>
    358a:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    358c:	80 fd       	sbrc	r24, 0
    358e:	23 c0       	rjmp	.+70     	; 0x35d6 <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3590:	20 91 71 01 	lds	r18, 0x0171
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	c9 01       	movw	r24, r18
    3598:	01 96       	adiw	r24, 0x01	; 1
    359a:	87 70       	andi	r24, 0x07	; 7
    359c:	99 27       	eor	r25, r25
    359e:	60 91 70 01 	lds	r22, 0x0170
    35a2:	70 e0       	ldi	r23, 0x00	; 0
    35a4:	86 17       	cp	r24, r22
    35a6:	97 07       	cpc	r25, r23
    35a8:	f1 f1       	breq	.+124    	; 0x3626 <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    35aa:	f9 83       	std	Y+1, r31	; 0x01
    35ac:	ea 83       	std	Y+2, r30	; 0x02
    35ae:	5d 83       	std	Y+5, r21	; 0x05
    35b0:	4c 83       	std	Y+4, r20	; 0x04
    35b2:	96 e0       	ldi	r25, 0x06	; 6
    35b4:	92 9f       	mul	r25, r18
    35b6:	d0 01       	movw	r26, r0
    35b8:	93 9f       	mul	r25, r19
    35ba:	b0 0d       	add	r27, r0
    35bc:	11 24       	eor	r1, r1
    35be:	ae 58       	subi	r26, 0x8E	; 142
    35c0:	be 4f       	sbci	r27, 0xFE	; 254
    35c2:	fe 01       	movw	r30, r28
    35c4:	31 96       	adiw	r30, 0x01	; 1
    35c6:	01 90       	ld	r0, Z+
    35c8:	0d 92       	st	X+, r0
    35ca:	9a 95       	dec	r25
    35cc:	e1 f7       	brne	.-8      	; 0x35c6 <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    35ce:	80 93 71 01 	sts	0x0171, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    35d2:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    35d6:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    35d8:	80 91 70 01 	lds	r24, 0x0170
    35dc:	90 91 71 01 	lds	r25, 0x0171
    35e0:	89 17       	cp	r24, r25
    35e2:	79 f1       	breq	.+94     	; 0x3642 <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    35e4:	18 9f       	mul	r17, r24
    35e6:	c0 01       	movw	r24, r0
    35e8:	11 24       	eor	r1, r1
    35ea:	8e 58       	subi	r24, 0x8E	; 142
    35ec:	9e 4f       	sbci	r25, 0xFE	; 254
    35ee:	0e 94 91 18 	call	0x3122	; 0x3122 <process_tapping>
    35f2:	88 23       	and	r24, r24
    35f4:	31 f1       	breq	.+76     	; 0x3642 <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    35f6:	e0 91 70 01 	lds	r30, 0x0170
    35fa:	1e 9f       	mul	r17, r30
    35fc:	f0 01       	movw	r30, r0
    35fe:	11 24       	eor	r1, r1
    3600:	ee 58       	subi	r30, 0x8E	; 142
    3602:	fe 4f       	sbci	r31, 0xFE	; 254
    3604:	40 81       	ld	r20, Z
    3606:	51 81       	ldd	r21, Z+1	; 0x01
    3608:	62 81       	ldd	r22, Z+2	; 0x02
    360a:	73 81       	ldd	r23, Z+3	; 0x03
    360c:	84 81       	ldd	r24, Z+4	; 0x04
    360e:	95 81       	ldd	r25, Z+5	; 0x05
    3610:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3614:	80 91 70 01 	lds	r24, 0x0170
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	01 96       	adiw	r24, 0x01	; 1
    361c:	87 70       	andi	r24, 0x07	; 7
    361e:	99 27       	eor	r25, r25
    3620:	80 93 70 01 	sts	0x0170, r24
    3624:	d9 cf       	rjmp	.-78     	; 0x35d8 <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3626:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    362a:	10 92 71 01 	sts	0x0171, r1
    waiting_buffer_tail = 0;
    362e:	10 92 70 01 	sts	0x0170, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    3632:	e2 ea       	ldi	r30, 0xA2	; 162
    3634:	f1 e0       	ldi	r31, 0x01	; 1
    3636:	86 e0       	ldi	r24, 0x06	; 6
    3638:	df 01       	movw	r26, r30
    363a:	1d 92       	st	X+, r1
    363c:	8a 95       	dec	r24
    363e:	e9 f7       	brne	.-6      	; 0x363a <action_tapping_process+0x13e>
    3640:	ca cf       	rjmp	.-108    	; 0x35d6 <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3642:	2c 96       	adiw	r28, 0x0c	; 12
    3644:	0f b6       	in	r0, 0x3f	; 63
    3646:	f8 94       	cli
    3648:	de bf       	out	0x3e, r29	; 62
    364a:	0f be       	out	0x3f, r0	; 63
    364c:	cd bf       	out	0x3d, r28	; 61
    364e:	df 91       	pop	r29
    3650:	cf 91       	pop	r28
    3652:	1f 91       	pop	r17
    3654:	08 95       	ret

00003656 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3656:	ef 92       	push	r14
    3658:	ff 92       	push	r15
    365a:	0f 93       	push	r16
    365c:	1f 93       	push	r17
    365e:	cf 93       	push	r28
    3660:	df 93       	push	r29
    3662:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    3664:	00 97       	sbiw	r24, 0x00	; 0
    3666:	09 f4       	brne	.+2      	; 0x366a <action_macro_play+0x14>
    3668:	6d c0       	rjmp	.+218    	; 0x3744 <action_macro_play+0xee>
    366a:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    366c:	ee 24       	eor	r14, r14
    366e:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    3670:	ef 01       	movw	r28, r30
    3672:	21 96       	adiw	r28, 0x01	; 1
    3674:	84 91       	lpm	r24, Z
    3676:	84 37       	cpi	r24, 0x74	; 116
    3678:	40 f4       	brcc	.+16     	; 0x368a <action_macro_play+0x34>
    367a:	84 30       	cpi	r24, 0x04	; 4
    367c:	08 f0       	brcs	.+2      	; 0x3680 <action_macro_play+0x2a>
    367e:	53 c0       	rjmp	.+166    	; 0x3726 <action_macro_play+0xd0>
    3680:	81 30       	cpi	r24, 0x01	; 1
    3682:	81 f0       	breq	.+32     	; 0x36a4 <action_macro_play+0x4e>
    3684:	82 30       	cpi	r24, 0x02	; 2
    3686:	21 f1       	breq	.+72     	; 0x36d0 <action_macro_play+0x7a>
    3688:	5d c0       	rjmp	.+186    	; 0x3744 <action_macro_play+0xee>
    368a:	85 37       	cpi	r24, 0x75	; 117
    368c:	09 f4       	brne	.+2      	; 0x3690 <action_macro_play+0x3a>
    368e:	45 c0       	rjmp	.+138    	; 0x371a <action_macro_play+0xc4>
    3690:	b0 f1       	brcs	.+108    	; 0x36fe <action_macro_play+0xa8>
    3692:	9c e7       	ldi	r25, 0x7C	; 124
    3694:	98 0f       	add	r25, r24
    3696:	90 37       	cpi	r25, 0x70	; 112
    3698:	08 f0       	brcs	.+2      	; 0x369c <action_macro_play+0x46>
    369a:	54 c0       	rjmp	.+168    	; 0x3744 <action_macro_play+0xee>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    369c:	8f 77       	andi	r24, 0x7F	; 127
    369e:	0e 94 41 14 	call	0x2882	; 0x2882 <unregister_code>
                break;
    36a2:	43 c0       	rjmp	.+134    	; 0x372a <action_macro_play+0xd4>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    36a4:	8f 01       	movw	r16, r30
    36a6:	0e 5f       	subi	r16, 0xFE	; 254
    36a8:	1f 4f       	sbci	r17, 0xFF	; 255
    36aa:	fe 01       	movw	r30, r28
    36ac:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    36ae:	90 e2       	ldi	r25, 0x20	; 32
    36b0:	98 0f       	add	r25, r24
    36b2:	98 30       	cpi	r25, 0x08	; 8
    36b4:	50 f4       	brcc	.+20     	; 0x36ca <action_macro_play+0x74>
                    add_weak_mods(MOD_BIT(macro));
    36b6:	87 70       	andi	r24, 0x07	; 7
    36b8:	fe 2d       	mov	r31, r14
    36ba:	01 c0       	rjmp	.+2      	; 0x36be <action_macro_play+0x68>
    36bc:	ff 0f       	add	r31, r31
    36be:	8a 95       	dec	r24
    36c0:	ea f7       	brpl	.-6      	; 0x36bc <action_macro_play+0x66>
    36c2:	8f 2f       	mov	r24, r31
    36c4:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <add_weak_mods>
    36c8:	15 c0       	rjmp	.+42     	; 0x36f4 <action_macro_play+0x9e>
                } else {
                    register_code(macro);
    36ca:	0e 94 79 13 	call	0x26f2	; 0x26f2 <register_code>
    36ce:	12 c0       	rjmp	.+36     	; 0x36f4 <action_macro_play+0x9e>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    36d0:	8f 01       	movw	r16, r30
    36d2:	0e 5f       	subi	r16, 0xFE	; 254
    36d4:	1f 4f       	sbci	r17, 0xFF	; 255
    36d6:	fe 01       	movw	r30, r28
    36d8:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    36da:	90 e2       	ldi	r25, 0x20	; 32
    36dc:	98 0f       	add	r25, r24
    36de:	98 30       	cpi	r25, 0x08	; 8
    36e0:	58 f4       	brcc	.+22     	; 0x36f8 <action_macro_play+0xa2>
                    del_weak_mods(MOD_BIT(macro));
    36e2:	87 70       	andi	r24, 0x07	; 7
    36e4:	fe 2d       	mov	r31, r14
    36e6:	01 c0       	rjmp	.+2      	; 0x36ea <action_macro_play+0x94>
    36e8:	ff 0f       	add	r31, r31
    36ea:	8a 95       	dec	r24
    36ec:	ea f7       	brpl	.-6      	; 0x36e8 <action_macro_play+0x92>
    36ee:	8f 2f       	mov	r24, r31
    36f0:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <del_weak_mods>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    36f4:	e8 01       	movw	r28, r16
    36f6:	19 c0       	rjmp	.+50     	; 0x372a <action_macro_play+0xd4>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                } else {
                    unregister_code(macro);
    36f8:	0e 94 41 14 	call	0x2882	; 0x2882 <unregister_code>
    36fc:	fb cf       	rjmp	.-10     	; 0x36f4 <action_macro_play+0x9e>
                }
                break;
            case WAIT:
                MACRO_READ();
    36fe:	cf 01       	movw	r24, r30
    3700:	02 96       	adiw	r24, 0x02	; 2
    3702:	fe 01       	movw	r30, r28
    3704:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3706:	cc 23       	and	r28, r28
    3708:	61 f0       	breq	.+24     	; 0x3722 <action_macro_play+0xcc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    370a:	ef e9       	ldi	r30, 0x9F	; 159
    370c:	ff e0       	ldi	r31, 0x0F	; 15
    370e:	31 97       	sbiw	r30, 0x01	; 1
    3710:	f1 f7       	brne	.-4      	; 0x370e <action_macro_play+0xb8>
    3712:	00 c0       	rjmp	.+0      	; 0x3714 <action_macro_play+0xbe>
    3714:	00 00       	nop
    3716:	c1 50       	subi	r28, 0x01	; 1
    3718:	f6 cf       	rjmp	.-20     	; 0x3706 <action_macro_play+0xb0>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    371a:	cf 01       	movw	r24, r30
    371c:	02 96       	adiw	r24, 0x02	; 2
    371e:	fe 01       	movw	r30, r28
    3720:	f4 90       	lpm	r15, Z
    3722:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    3724:	02 c0       	rjmp	.+4      	; 0x372a <action_macro_play+0xd4>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3726:	0e 94 79 13 	call	0x26f2	; 0x26f2 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    372a:	8f 2d       	mov	r24, r15
    372c:	88 23       	and	r24, r24
    372e:	41 f0       	breq	.+16     	; 0x3740 <action_macro_play+0xea>
    3730:	ef e9       	ldi	r30, 0x9F	; 159
    3732:	ff e0       	ldi	r31, 0x0F	; 15
    3734:	31 97       	sbiw	r30, 0x01	; 1
    3736:	f1 f7       	brne	.-4      	; 0x3734 <action_macro_play+0xde>
    3738:	00 c0       	rjmp	.+0      	; 0x373a <action_macro_play+0xe4>
    373a:	00 00       	nop
    373c:	81 50       	subi	r24, 0x01	; 1
    373e:	f6 cf       	rjmp	.-20     	; 0x372c <action_macro_play+0xd6>
    3740:	fe 01       	movw	r30, r28
    3742:	96 cf       	rjmp	.-212    	; 0x3670 <action_macro_play+0x1a>
    }
}
    3744:	df 91       	pop	r29
    3746:	cf 91       	pop	r28
    3748:	1f 91       	pop	r17
    374a:	0f 91       	pop	r16
    374c:	ff 90       	pop	r15
    374e:	ef 90       	pop	r14
    3750:	08 95       	ret

00003752 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    3752:	08 95       	ret

00003754 <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3754:	60 93 ac 01 	sts	0x01AC, r22
    3758:	70 93 ad 01 	sts	0x01AD, r23
    375c:	80 93 ae 01 	sts	0x01AE, r24
    3760:	90 93 af 01 	sts	0x01AF, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3764:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <clear_keyboard_but_mods>

00003768 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3768:	0f 93       	push	r16
    376a:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    376c:	00 91 ac 01 	lds	r16, 0x01AC
    3770:	10 91 ad 01 	lds	r17, 0x01AD
    3774:	20 91 ae 01 	lds	r18, 0x01AE
    3778:	30 91 af 01 	lds	r19, 0x01AF
    377c:	06 2b       	or	r16, r22
    377e:	17 2b       	or	r17, r23
    3780:	28 2b       	or	r18, r24
    3782:	39 2b       	or	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3784:	00 93 ac 01 	sts	0x01AC, r16
    3788:	10 93 ad 01 	sts	0x01AD, r17
    378c:	20 93 ae 01 	sts	0x01AE, r18
    3790:	30 93 af 01 	sts	0x01AF, r19

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    3794:	1f 91       	pop	r17
    3796:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3798:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <clear_keyboard_but_mods>

0000379c <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    379c:	0f 93       	push	r16
    379e:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    37a0:	00 91 ac 01 	lds	r16, 0x01AC
    37a4:	10 91 ad 01 	lds	r17, 0x01AD
    37a8:	20 91 ae 01 	lds	r18, 0x01AE
    37ac:	30 91 af 01 	lds	r19, 0x01AF
    37b0:	06 23       	and	r16, r22
    37b2:	17 23       	and	r17, r23
    37b4:	28 23       	and	r18, r24
    37b6:	39 23       	and	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    37b8:	00 93 ac 01 	sts	0x01AC, r16
    37bc:	10 93 ad 01 	sts	0x01AD, r17
    37c0:	20 93 ae 01 	sts	0x01AE, r18
    37c4:	30 93 af 01 	sts	0x01AF, r19
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    37c8:	1f 91       	pop	r17
    37ca:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    37cc:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <clear_keyboard_but_mods>

000037d0 <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    37d0:	0f 93       	push	r16
    37d2:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    37d4:	00 91 ac 01 	lds	r16, 0x01AC
    37d8:	10 91 ad 01 	lds	r17, 0x01AD
    37dc:	20 91 ae 01 	lds	r18, 0x01AE
    37e0:	30 91 af 01 	lds	r19, 0x01AF
    37e4:	06 27       	eor	r16, r22
    37e6:	17 27       	eor	r17, r23
    37e8:	28 27       	eor	r18, r24
    37ea:	39 27       	eor	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    37ec:	00 93 ac 01 	sts	0x01AC, r16
    37f0:	10 93 ad 01 	sts	0x01AD, r17
    37f4:	20 93 ae 01 	sts	0x01AE, r18
    37f8:	30 93 af 01 	sts	0x01AF, r19
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    37fc:	1f 91       	pop	r17
    37fe:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3800:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <clear_keyboard_but_mods>

00003804 <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3804:	10 92 a8 01 	sts	0x01A8, r1
    3808:	10 92 a9 01 	sts	0x01A9, r1
    380c:	10 92 aa 01 	sts	0x01AA, r1
    3810:	10 92 ab 01 	sts	0x01AB, r1
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3814:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <clear_keyboard_but_mods>

00003818 <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3818:	41 e0       	ldi	r20, 0x01	; 1
    381a:	50 e0       	ldi	r21, 0x00	; 0
    381c:	60 e0       	ldi	r22, 0x00	; 0
    381e:	70 e0       	ldi	r23, 0x00	; 0
    3820:	04 c0       	rjmp	.+8      	; 0x382a <layer_move+0x12>
    3822:	44 0f       	add	r20, r20
    3824:	55 1f       	adc	r21, r21
    3826:	66 1f       	adc	r22, r22
    3828:	77 1f       	adc	r23, r23
    382a:	8a 95       	dec	r24
    382c:	d2 f7       	brpl	.-12     	; 0x3822 <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    382e:	40 93 a8 01 	sts	0x01A8, r20
    3832:	50 93 a9 01 	sts	0x01A9, r21
    3836:	60 93 aa 01 	sts	0x01AA, r22
    383a:	70 93 ab 01 	sts	0x01AB, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    383e:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <clear_keyboard_but_mods>

00003842 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3842:	41 e0       	ldi	r20, 0x01	; 1
    3844:	50 e0       	ldi	r21, 0x00	; 0
    3846:	60 e0       	ldi	r22, 0x00	; 0
    3848:	70 e0       	ldi	r23, 0x00	; 0
    384a:	04 c0       	rjmp	.+8      	; 0x3854 <layer_on+0x12>
    384c:	44 0f       	add	r20, r20
    384e:	55 1f       	adc	r21, r21
    3850:	66 1f       	adc	r22, r22
    3852:	77 1f       	adc	r23, r23
    3854:	8a 95       	dec	r24
    3856:	d2 f7       	brpl	.-12     	; 0x384c <layer_on+0xa>
    3858:	80 91 a8 01 	lds	r24, 0x01A8
    385c:	90 91 a9 01 	lds	r25, 0x01A9
    3860:	a0 91 aa 01 	lds	r26, 0x01AA
    3864:	b0 91 ab 01 	lds	r27, 0x01AB
    3868:	84 2b       	or	r24, r20
    386a:	95 2b       	or	r25, r21
    386c:	a6 2b       	or	r26, r22
    386e:	b7 2b       	or	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3870:	80 93 a8 01 	sts	0x01A8, r24
    3874:	90 93 a9 01 	sts	0x01A9, r25
    3878:	a0 93 aa 01 	sts	0x01AA, r26
    387c:	b0 93 ab 01 	sts	0x01AB, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3880:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <clear_keyboard_but_mods>

00003884 <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3884:	41 e0       	ldi	r20, 0x01	; 1
    3886:	50 e0       	ldi	r21, 0x00	; 0
    3888:	60 e0       	ldi	r22, 0x00	; 0
    388a:	70 e0       	ldi	r23, 0x00	; 0
    388c:	04 c0       	rjmp	.+8      	; 0x3896 <layer_off+0x12>
    388e:	44 0f       	add	r20, r20
    3890:	55 1f       	adc	r21, r21
    3892:	66 1f       	adc	r22, r22
    3894:	77 1f       	adc	r23, r23
    3896:	8a 95       	dec	r24
    3898:	d2 f7       	brpl	.-12     	; 0x388e <layer_off+0xa>
    389a:	40 95       	com	r20
    389c:	50 95       	com	r21
    389e:	60 95       	com	r22
    38a0:	70 95       	com	r23
    38a2:	80 91 a8 01 	lds	r24, 0x01A8
    38a6:	90 91 a9 01 	lds	r25, 0x01A9
    38aa:	a0 91 aa 01 	lds	r26, 0x01AA
    38ae:	b0 91 ab 01 	lds	r27, 0x01AB
    38b2:	84 23       	and	r24, r20
    38b4:	95 23       	and	r25, r21
    38b6:	a6 23       	and	r26, r22
    38b8:	b7 23       	and	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    38ba:	80 93 a8 01 	sts	0x01A8, r24
    38be:	90 93 a9 01 	sts	0x01A9, r25
    38c2:	a0 93 aa 01 	sts	0x01AA, r26
    38c6:	b0 93 ab 01 	sts	0x01AB, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    38ca:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <clear_keyboard_but_mods>

000038ce <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    38ce:	41 e0       	ldi	r20, 0x01	; 1
    38d0:	50 e0       	ldi	r21, 0x00	; 0
    38d2:	60 e0       	ldi	r22, 0x00	; 0
    38d4:	70 e0       	ldi	r23, 0x00	; 0
    38d6:	04 c0       	rjmp	.+8      	; 0x38e0 <layer_invert+0x12>
    38d8:	44 0f       	add	r20, r20
    38da:	55 1f       	adc	r21, r21
    38dc:	66 1f       	adc	r22, r22
    38de:	77 1f       	adc	r23, r23
    38e0:	8a 95       	dec	r24
    38e2:	d2 f7       	brpl	.-12     	; 0x38d8 <layer_invert+0xa>
    38e4:	80 91 a8 01 	lds	r24, 0x01A8
    38e8:	90 91 a9 01 	lds	r25, 0x01A9
    38ec:	a0 91 aa 01 	lds	r26, 0x01AA
    38f0:	b0 91 ab 01 	lds	r27, 0x01AB
    38f4:	84 27       	eor	r24, r20
    38f6:	95 27       	eor	r25, r21
    38f8:	a6 27       	eor	r26, r22
    38fa:	b7 27       	eor	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    38fc:	80 93 a8 01 	sts	0x01A8, r24
    3900:	90 93 a9 01 	sts	0x01A9, r25
    3904:	a0 93 aa 01 	sts	0x01AA, r26
    3908:	b0 93 ab 01 	sts	0x01AB, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    390c:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <clear_keyboard_but_mods>

00003910 <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    3910:	0f 93       	push	r16
    3912:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3914:	00 91 a8 01 	lds	r16, 0x01A8
    3918:	10 91 a9 01 	lds	r17, 0x01A9
    391c:	20 91 aa 01 	lds	r18, 0x01AA
    3920:	30 91 ab 01 	lds	r19, 0x01AB
    3924:	06 2b       	or	r16, r22
    3926:	17 2b       	or	r17, r23
    3928:	28 2b       	or	r18, r24
    392a:	39 2b       	or	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    392c:	00 93 a8 01 	sts	0x01A8, r16
    3930:	10 93 a9 01 	sts	0x01A9, r17
    3934:	20 93 aa 01 	sts	0x01AA, r18
    3938:	30 93 ab 01 	sts	0x01AB, r19
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    393c:	1f 91       	pop	r17
    393e:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3940:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <clear_keyboard_but_mods>

00003944 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    3944:	0f 93       	push	r16
    3946:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3948:	00 91 a8 01 	lds	r16, 0x01A8
    394c:	10 91 a9 01 	lds	r17, 0x01A9
    3950:	20 91 aa 01 	lds	r18, 0x01AA
    3954:	30 91 ab 01 	lds	r19, 0x01AB
    3958:	06 23       	and	r16, r22
    395a:	17 23       	and	r17, r23
    395c:	28 23       	and	r18, r24
    395e:	39 23       	and	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3960:	00 93 a8 01 	sts	0x01A8, r16
    3964:	10 93 a9 01 	sts	0x01A9, r17
    3968:	20 93 aa 01 	sts	0x01AA, r18
    396c:	30 93 ab 01 	sts	0x01AB, r19
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    3970:	1f 91       	pop	r17
    3972:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3974:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <clear_keyboard_but_mods>

00003978 <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    3978:	0f 93       	push	r16
    397a:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    397c:	00 91 a8 01 	lds	r16, 0x01A8
    3980:	10 91 a9 01 	lds	r17, 0x01A9
    3984:	20 91 aa 01 	lds	r18, 0x01AA
    3988:	30 91 ab 01 	lds	r19, 0x01AB
    398c:	06 27       	eor	r16, r22
    398e:	17 27       	eor	r17, r23
    3990:	28 27       	eor	r18, r24
    3992:	39 27       	eor	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3994:	00 93 a8 01 	sts	0x01A8, r16
    3998:	10 93 a9 01 	sts	0x01A9, r17
    399c:	20 93 aa 01 	sts	0x01AA, r18
    39a0:	30 93 ab 01 	sts	0x01AB, r19
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    39a4:	1f 91       	pop	r17
    39a6:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    39a8:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <clear_keyboard_but_mods>

000039ac <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    39ac:	08 95       	ret

000039ae <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    39ae:	cf 92       	push	r12
    39b0:	df 92       	push	r13
    39b2:	ef 92       	push	r14
    39b4:	ff 92       	push	r15
    39b6:	0f 93       	push	r16
    39b8:	1f 93       	push	r17
    39ba:	cf 93       	push	r28
    39bc:	df 93       	push	r29
    39be:	ec 01       	movw	r28, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    39c0:	c0 90 ac 01 	lds	r12, 0x01AC
    39c4:	d0 90 ad 01 	lds	r13, 0x01AD
    39c8:	e0 90 ae 01 	lds	r14, 0x01AE
    39cc:	f0 90 af 01 	lds	r15, 0x01AF
    39d0:	80 91 a8 01 	lds	r24, 0x01A8
    39d4:	90 91 a9 01 	lds	r25, 0x01A9
    39d8:	a0 91 aa 01 	lds	r26, 0x01AA
    39dc:	b0 91 ab 01 	lds	r27, 0x01AB
    39e0:	c8 2a       	or	r12, r24
    39e2:	d9 2a       	or	r13, r25
    39e4:	ea 2a       	or	r14, r26
    39e6:	fb 2a       	or	r15, r27
    39e8:	0f e1       	ldi	r16, 0x1F	; 31
    39ea:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    39ec:	b7 01       	movw	r22, r14
    39ee:	a6 01       	movw	r20, r12
    39f0:	00 2e       	mov	r0, r16
    39f2:	04 c0       	rjmp	.+8      	; 0x39fc <layer_switch_get_action+0x4e>
    39f4:	76 95       	lsr	r23
    39f6:	67 95       	ror	r22
    39f8:	57 95       	ror	r21
    39fa:	47 95       	ror	r20
    39fc:	0a 94       	dec	r0
    39fe:	d2 f7       	brpl	.-12     	; 0x39f4 <layer_switch_get_action+0x46>
    3a00:	40 ff       	sbrs	r20, 0
    3a02:	07 c0       	rjmp	.+14     	; 0x3a12 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    3a04:	be 01       	movw	r22, r28
    3a06:	80 2f       	mov	r24, r16
    3a08:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    3a0c:	81 30       	cpi	r24, 0x01	; 1
    3a0e:	91 05       	cpc	r25, r1
    3a10:	39 f4       	brne	.+14     	; 0x3a20 <layer_switch_get_action+0x72>
    3a12:	01 50       	subi	r16, 0x01	; 1
    3a14:	11 09       	sbc	r17, r1
    3a16:	50 f7       	brcc	.-44     	; 0x39ec <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3a18:	be 01       	movw	r22, r28
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    3a20:	df 91       	pop	r29
    3a22:	cf 91       	pop	r28
    3a24:	1f 91       	pop	r17
    3a26:	0f 91       	pop	r16
    3a28:	ff 90       	pop	r15
    3a2a:	ef 90       	pop	r14
    3a2c:	df 90       	pop	r13
    3a2e:	cf 90       	pop	r12
    3a30:	08 95       	ret

00003a32 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    3a32:	90 91 0c 01 	lds	r25, 0x010C
    3a36:	99 23       	and	r25, r25
    3a38:	41 f1       	breq	.+80     	; 0x3a8a <add_key+0x58>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3a3a:	98 2f       	mov	r25, r24
    3a3c:	96 95       	lsr	r25
    3a3e:	96 95       	lsr	r25
    3a40:	96 95       	lsr	r25
    3a42:	9f 30       	cpi	r25, 0x0F	; 15
    3a44:	88 f4       	brcc	.+34     	; 0x3a68 <add_key+0x36>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3a46:	e0 91 0d 01 	lds	r30, 0x010D
    3a4a:	f0 91 0e 01 	lds	r31, 0x010E
    3a4e:	e9 0f       	add	r30, r25
    3a50:	f1 1d       	adc	r31, r1
    3a52:	87 70       	andi	r24, 0x07	; 7
    3a54:	21 e0       	ldi	r18, 0x01	; 1
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	01 c0       	rjmp	.+2      	; 0x3a5c <add_key+0x2a>
    3a5a:	22 0f       	add	r18, r18
    3a5c:	8a 95       	dec	r24
    3a5e:	ea f7       	brpl	.-6      	; 0x3a5a <add_key+0x28>
    3a60:	81 81       	ldd	r24, Z+1	; 0x01
    3a62:	82 2b       	or	r24, r18
    3a64:	81 83       	std	Z+1, r24	; 0x01
    3a66:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3a68:	90 91 c3 01 	lds	r25, 0x01C3
    3a6c:	90 ff       	sbrs	r25, 0
    3a6e:	2d c0       	rjmp	.+90     	; 0x3aca <add_key+0x98>
    3a70:	1f 92       	push	r1
    3a72:	8f 93       	push	r24
    3a74:	85 e5       	ldi	r24, 0x55	; 85
    3a76:	94 e0       	ldi	r25, 0x04	; 4
    3a78:	9f 93       	push	r25
    3a7a:	8f 93       	push	r24
    3a7c:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    3a80:	0f 90       	pop	r0
    3a82:	0f 90       	pop	r0
    3a84:	0f 90       	pop	r0
    3a86:	0f 90       	pop	r0
    3a88:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3a8a:	40 91 0d 01 	lds	r20, 0x010D
    3a8e:	50 91 0e 01 	lds	r21, 0x010E
    3a92:	20 e0       	ldi	r18, 0x00	; 0
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	9f ef       	ldi	r25, 0xFF	; 255
    3a98:	fa 01       	movw	r30, r20
    3a9a:	e2 0f       	add	r30, r18
    3a9c:	f3 1f       	adc	r31, r19
    3a9e:	62 81       	ldd	r22, Z+2	; 0x02
    3aa0:	68 17       	cp	r22, r24
    3aa2:	99 f0       	breq	.+38     	; 0x3aca <add_key+0x98>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3aa4:	9f 3f       	cpi	r25, 0xFF	; 255
    3aa6:	19 f4       	brne	.+6      	; 0x3aae <add_key+0x7c>
    3aa8:	61 11       	cpse	r22, r1
    3aaa:	01 c0       	rjmp	.+2      	; 0x3aae <add_key+0x7c>
    3aac:	92 2f       	mov	r25, r18
    3aae:	2f 5f       	subi	r18, 0xFF	; 255
    3ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3ab2:	2e 30       	cpi	r18, 0x0E	; 14
    3ab4:	31 05       	cpc	r19, r1
    3ab6:	81 f7       	brne	.-32     	; 0x3a98 <add_key+0x66>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3ab8:	9f 3f       	cpi	r25, 0xFF	; 255
    3aba:	39 f0       	breq	.+14     	; 0x3aca <add_key+0x98>
            keyboard_report->keys[empty] = code;
    3abc:	fa 01       	movw	r30, r20
    3abe:	e9 0f       	add	r30, r25
    3ac0:	f1 1d       	adc	r31, r1
    3ac2:	97 fd       	sbrc	r25, 7
    3ac4:	fa 95       	dec	r31
    3ac6:	82 83       	std	Z+2, r24	; 0x02
    3ac8:	08 95       	ret
    3aca:	08 95       	ret

00003acc <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    3acc:	90 91 0c 01 	lds	r25, 0x010C
    3ad0:	99 23       	and	r25, r25
    3ad2:	49 f1       	breq	.+82     	; 0x3b26 <del_key+0x5a>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3ad4:	98 2f       	mov	r25, r24
    3ad6:	96 95       	lsr	r25
    3ad8:	96 95       	lsr	r25
    3ada:	96 95       	lsr	r25
    3adc:	9f 30       	cpi	r25, 0x0F	; 15
    3ade:	90 f4       	brcc	.+36     	; 0x3b04 <del_key+0x38>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3ae0:	e0 91 0d 01 	lds	r30, 0x010D
    3ae4:	f0 91 0e 01 	lds	r31, 0x010E
    3ae8:	e9 0f       	add	r30, r25
    3aea:	f1 1d       	adc	r31, r1
    3aec:	87 70       	andi	r24, 0x07	; 7
    3aee:	21 e0       	ldi	r18, 0x01	; 1
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	01 c0       	rjmp	.+2      	; 0x3af6 <del_key+0x2a>
    3af4:	22 0f       	add	r18, r18
    3af6:	8a 95       	dec	r24
    3af8:	ea f7       	brpl	.-6      	; 0x3af4 <del_key+0x28>
    3afa:	20 95       	com	r18
    3afc:	81 81       	ldd	r24, Z+1	; 0x01
    3afe:	28 23       	and	r18, r24
    3b00:	21 83       	std	Z+1, r18	; 0x01
    3b02:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3b04:	90 91 c3 01 	lds	r25, 0x01C3
    3b08:	90 ff       	sbrs	r25, 0
    3b0a:	1f c0       	rjmp	.+62     	; 0x3b4a <del_key+0x7e>
    3b0c:	1f 92       	push	r1
    3b0e:	8f 93       	push	r24
    3b10:	87 e3       	ldi	r24, 0x37	; 55
    3b12:	94 e0       	ldi	r25, 0x04	; 4
    3b14:	9f 93       	push	r25
    3b16:	8f 93       	push	r24
    3b18:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    3b1c:	0f 90       	pop	r0
    3b1e:	0f 90       	pop	r0
    3b20:	0f 90       	pop	r0
    3b22:	0f 90       	pop	r0
    3b24:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3b26:	40 91 0d 01 	lds	r20, 0x010D
    3b2a:	50 91 0e 01 	lds	r21, 0x010E
    3b2e:	20 e0       	ldi	r18, 0x00	; 0
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	fa 01       	movw	r30, r20
    3b34:	e2 0f       	add	r30, r18
    3b36:	f3 1f       	adc	r31, r19
    3b38:	92 81       	ldd	r25, Z+2	; 0x02
    3b3a:	98 13       	cpse	r25, r24
    3b3c:	01 c0       	rjmp	.+2      	; 0x3b40 <del_key+0x74>
            keyboard_report->keys[i] = 0;
    3b3e:	12 82       	std	Z+2, r1	; 0x02
    3b40:	2f 5f       	subi	r18, 0xFF	; 255
    3b42:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3b44:	2e 30       	cpi	r18, 0x0E	; 14
    3b46:	31 05       	cpc	r19, r1
    3b48:	a1 f7       	brne	.-24     	; 0x3b32 <del_key+0x66>
    3b4a:	08 95       	ret

00003b4c <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3b50:	e0 91 0d 01 	lds	r30, 0x010D
    3b54:	f0 91 0e 01 	lds	r31, 0x010E
    3b58:	e8 0f       	add	r30, r24
    3b5a:	f9 1f       	adc	r31, r25
    3b5c:	10 82       	st	Z, r1
    3b5e:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3b60:	80 31       	cpi	r24, 0x10	; 16
    3b62:	91 05       	cpc	r25, r1
    3b64:	a9 f7       	brne	.-22     	; 0x3b50 <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3b66:	08 95       	ret

00003b68 <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    3b68:	90 91 c2 01 	lds	r25, 0x01C2
    3b6c:	98 2b       	or	r25, r24
    3b6e:	90 93 c2 01 	sts	0x01C2, r25
    3b72:	08 95       	ret

00003b74 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3b74:	80 95       	com	r24
    3b76:	90 91 c2 01 	lds	r25, 0x01C2
    3b7a:	98 23       	and	r25, r24
    3b7c:	90 93 c2 01 	sts	0x01C2, r25
    3b80:	08 95       	ret

00003b82 <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    3b82:	10 92 c2 01 	sts	0x01C2, r1
    3b86:	08 95       	ret

00003b88 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3b88:	90 91 c1 01 	lds	r25, 0x01C1
    3b8c:	98 2b       	or	r25, r24
    3b8e:	90 93 c1 01 	sts	0x01C1, r25
    3b92:	08 95       	ret

00003b94 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3b94:	80 95       	com	r24
    3b96:	90 91 c1 01 	lds	r25, 0x01C1
    3b9a:	98 23       	and	r25, r24
    3b9c:	90 93 c1 01 	sts	0x01C1, r25
    3ba0:	08 95       	ret

00003ba2 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3ba2:	10 92 c1 01 	sts	0x01C1, r1
    3ba6:	08 95       	ret

00003ba8 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3ba8:	80 93 b0 01 	sts	0x01B0, r24
    3bac:	08 95       	ret

00003bae <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3bae:	10 92 b0 01 	sts	0x01B0, r1
    3bb2:	08 95       	ret

00003bb4 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3bb4:	40 91 0d 01 	lds	r20, 0x010D
    3bb8:	50 91 0e 01 	lds	r21, 0x010E
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	fa 01       	movw	r30, r20
    3bc4:	e2 0f       	add	r30, r18
    3bc6:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3bc8:	91 81       	ldd	r25, Z+1	; 0x01
    3bca:	91 11       	cpse	r25, r1
            cnt++;
    3bcc:	8f 5f       	subi	r24, 0xFF	; 255
    3bce:	2f 5f       	subi	r18, 0xFF	; 255
    3bd0:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3bd2:	2f 30       	cpi	r18, 0x0F	; 15
    3bd4:	31 05       	cpc	r19, r1
    3bd6:	a9 f7       	brne	.-22     	; 0x3bc2 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3bd8:	08 95       	ret

00003bda <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3bda:	e0 91 0d 01 	lds	r30, 0x010D
    3bde:	f0 91 0e 01 	lds	r31, 0x010E
    3be2:	80 91 c2 01 	lds	r24, 0x01C2
    3be6:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3be8:	e0 91 0d 01 	lds	r30, 0x010D
    3bec:	f0 91 0e 01 	lds	r31, 0x010E
    3bf0:	80 81       	ld	r24, Z
    3bf2:	90 91 c1 01 	lds	r25, 0x01C1
    3bf6:	89 2b       	or	r24, r25
    3bf8:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3bfa:	90 91 b0 01 	lds	r25, 0x01B0
    3bfe:	99 23       	and	r25, r25
    3c00:	61 f0       	breq	.+24     	; 0x3c1a <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3c02:	e0 91 0d 01 	lds	r30, 0x010D
    3c06:	f0 91 0e 01 	lds	r31, 0x010E
    3c0a:	80 81       	ld	r24, Z
    3c0c:	89 2b       	or	r24, r25
    3c0e:	80 83       	st	Z, r24
        if (has_anykey()) {
    3c10:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <has_anykey>
    3c14:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3c16:	10 92 b0 01 	sts	0x01B0, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3c1a:	80 91 0d 01 	lds	r24, 0x010D
    3c1e:	90 91 0e 01 	lds	r25, 0x010E
    3c22:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <host_keyboard_send>

00003c26 <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    3c26:	8b 3b       	cpi	r24, 0xBB	; 187
    3c28:	60 f4       	brcc	.+24     	; 0x3c42 <keycode_to_action+0x1c>
    3c2a:	88 3a       	cpi	r24, 0xA8	; 168
    3c2c:	00 f5       	brcc	.+64     	; 0x3c6e <keycode_to_action+0x48>
    3c2e:	85 3a       	cpi	r24, 0xA5	; 165
    3c30:	a8 f4       	brcc	.+42     	; 0x3c5c <keycode_to_action+0x36>
    3c32:	84 30       	cpi	r24, 0x04	; 4
    3c34:	88 f4       	brcc	.+34     	; 0x3c58 <keycode_to_action+0x32>
    3c36:	81 30       	cpi	r24, 0x01	; 1
    3c38:	09 f0       	breq	.+2      	; 0x3c3c <keycode_to_action+0x16>
    3c3a:	55 c0       	rjmp	.+170    	; 0x3ce6 <keycode_to_action+0xc0>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    3c42:	80 3e       	cpi	r24, 0xE0	; 224
    3c44:	08 f4       	brcc	.+2      	; 0x3c48 <keycode_to_action+0x22>
    3c46:	4f c0       	rjmp	.+158    	; 0x3ce6 <keycode_to_action+0xc0>
    3c48:	88 3e       	cpi	r24, 0xE8	; 232
    3c4a:	30 f0       	brcs	.+12     	; 0x3c58 <keycode_to_action+0x32>
    3c4c:	80 3f       	cpi	r24, 0xF0	; 240
    3c4e:	08 f4       	brcc	.+2      	; 0x3c52 <keycode_to_action+0x2c>
    3c50:	4a c0       	rjmp	.+148    	; 0x3ce6 <keycode_to_action+0xc0>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	90 65       	ori	r25, 0x50	; 80
            break;
    3c56:	08 95       	ret
{
    action_t action;
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3c58:	90 e0       	ldi	r25, 0x00	; 0
            break;
    3c5a:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3c5c:	85 3a       	cpi	r24, 0xA5	; 165
    3c5e:	09 f4       	brne	.+2      	; 0x3c62 <keycode_to_action+0x3c>
    3c60:	45 c0       	rjmp	.+138    	; 0x3cec <keycode_to_action+0xc6>
    3c62:	86 3a       	cpi	r24, 0xA6	; 166
    3c64:	09 f0       	breq	.+2      	; 0x3c68 <keycode_to_action+0x42>
    3c66:	45 c0       	rjmp	.+138    	; 0x3cf2 <keycode_to_action+0xcc>
    3c68:	82 e8       	ldi	r24, 0x82	; 130
    3c6a:	90 e4       	ldi	r25, 0x40	; 64
    3c6c:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3c6e:	88 3a       	cpi	r24, 0xA8	; 168
    3c70:	09 f4       	brne	.+2      	; 0x3c74 <keycode_to_action+0x4e>
    3c72:	42 c0       	rjmp	.+132    	; 0x3cf8 <keycode_to_action+0xd2>
    3c74:	89 3a       	cpi	r24, 0xA9	; 169
    3c76:	09 f4       	brne	.+2      	; 0x3c7a <keycode_to_action+0x54>
    3c78:	42 c0       	rjmp	.+132    	; 0x3cfe <keycode_to_action+0xd8>
    3c7a:	8a 3a       	cpi	r24, 0xAA	; 170
    3c7c:	09 f4       	brne	.+2      	; 0x3c80 <keycode_to_action+0x5a>
    3c7e:	42 c0       	rjmp	.+132    	; 0x3d04 <keycode_to_action+0xde>
    3c80:	8b 3a       	cpi	r24, 0xAB	; 171
    3c82:	09 f4       	brne	.+2      	; 0x3c86 <keycode_to_action+0x60>
    3c84:	42 c0       	rjmp	.+132    	; 0x3d0a <keycode_to_action+0xe4>
    3c86:	8c 3a       	cpi	r24, 0xAC	; 172
    3c88:	09 f4       	brne	.+2      	; 0x3c8c <keycode_to_action+0x66>
    3c8a:	42 c0       	rjmp	.+132    	; 0x3d10 <keycode_to_action+0xea>
    3c8c:	8d 3a       	cpi	r24, 0xAD	; 173
    3c8e:	09 f4       	brne	.+2      	; 0x3c92 <keycode_to_action+0x6c>
    3c90:	42 c0       	rjmp	.+132    	; 0x3d16 <keycode_to_action+0xf0>
    3c92:	80 3b       	cpi	r24, 0xB0	; 176
    3c94:	09 f4       	brne	.+2      	; 0x3c98 <keycode_to_action+0x72>
    3c96:	42 c0       	rjmp	.+132    	; 0x3d1c <keycode_to_action+0xf6>
    3c98:	8e 3a       	cpi	r24, 0xAE	; 174
    3c9a:	09 f4       	brne	.+2      	; 0x3c9e <keycode_to_action+0x78>
    3c9c:	42 c0       	rjmp	.+132    	; 0x3d22 <keycode_to_action+0xfc>
    3c9e:	8f 3a       	cpi	r24, 0xAF	; 175
    3ca0:	09 f4       	brne	.+2      	; 0x3ca4 <keycode_to_action+0x7e>
    3ca2:	42 c0       	rjmp	.+132    	; 0x3d28 <keycode_to_action+0x102>
    3ca4:	81 3b       	cpi	r24, 0xB1	; 177
    3ca6:	09 f4       	brne	.+2      	; 0x3caa <keycode_to_action+0x84>
    3ca8:	42 c0       	rjmp	.+132    	; 0x3d2e <keycode_to_action+0x108>
    3caa:	82 3b       	cpi	r24, 0xB2	; 178
    3cac:	09 f4       	brne	.+2      	; 0x3cb0 <keycode_to_action+0x8a>
    3cae:	42 c0       	rjmp	.+132    	; 0x3d34 <keycode_to_action+0x10e>
    3cb0:	83 3b       	cpi	r24, 0xB3	; 179
    3cb2:	09 f4       	brne	.+2      	; 0x3cb6 <keycode_to_action+0x90>
    3cb4:	42 c0       	rjmp	.+132    	; 0x3d3a <keycode_to_action+0x114>
    3cb6:	84 3b       	cpi	r24, 0xB4	; 180
    3cb8:	09 f4       	brne	.+2      	; 0x3cbc <keycode_to_action+0x96>
    3cba:	42 c0       	rjmp	.+132    	; 0x3d40 <keycode_to_action+0x11a>
    3cbc:	85 3b       	cpi	r24, 0xB5	; 181
    3cbe:	09 f4       	brne	.+2      	; 0x3cc2 <keycode_to_action+0x9c>
    3cc0:	42 c0       	rjmp	.+132    	; 0x3d46 <keycode_to_action+0x120>
    3cc2:	86 3b       	cpi	r24, 0xB6	; 182
    3cc4:	09 f4       	brne	.+2      	; 0x3cc8 <keycode_to_action+0xa2>
    3cc6:	42 c0       	rjmp	.+132    	; 0x3d4c <keycode_to_action+0x126>
    3cc8:	87 3b       	cpi	r24, 0xB7	; 183
    3cca:	09 f4       	brne	.+2      	; 0x3cce <keycode_to_action+0xa8>
    3ccc:	42 c0       	rjmp	.+132    	; 0x3d52 <keycode_to_action+0x12c>
    3cce:	88 3b       	cpi	r24, 0xB8	; 184
    3cd0:	09 f4       	brne	.+2      	; 0x3cd4 <keycode_to_action+0xae>
    3cd2:	42 c0       	rjmp	.+132    	; 0x3d58 <keycode_to_action+0x132>
    3cd4:	89 3b       	cpi	r24, 0xB9	; 185
    3cd6:	09 f4       	brne	.+2      	; 0x3cda <keycode_to_action+0xb4>
    3cd8:	42 c0       	rjmp	.+132    	; 0x3d5e <keycode_to_action+0x138>
    3cda:	8a 3b       	cpi	r24, 0xBA	; 186
    3cdc:	09 f0       	breq	.+2      	; 0x3ce0 <keycode_to_action+0xba>
    3cde:	42 c0       	rjmp	.+132    	; 0x3d64 <keycode_to_action+0x13e>
    3ce0:	8a e2       	ldi	r24, 0x2A	; 42
    3ce2:	96 e4       	ldi	r25, 0x46	; 70
    3ce4:	08 95       	ret
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        default:
            action.code = ACTION_NO;
    3ce6:	80 e0       	ldi	r24, 0x00	; 0
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3cec:	81 e8       	ldi	r24, 0x81	; 129
    3cee:	90 e4       	ldi	r25, 0x40	; 64
    3cf0:	08 95       	ret
    3cf2:	83 e8       	ldi	r24, 0x83	; 131
    3cf4:	90 e4       	ldi	r25, 0x40	; 64
    3cf6:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3cf8:	82 ee       	ldi	r24, 0xE2	; 226
    3cfa:	94 e4       	ldi	r25, 0x44	; 68
    3cfc:	08 95       	ret
    3cfe:	89 ee       	ldi	r24, 0xE9	; 233
    3d00:	94 e4       	ldi	r25, 0x44	; 68
    3d02:	08 95       	ret
    3d04:	8a ee       	ldi	r24, 0xEA	; 234
    3d06:	94 e4       	ldi	r25, 0x44	; 68
    3d08:	08 95       	ret
    3d0a:	85 eb       	ldi	r24, 0xB5	; 181
    3d0c:	94 e4       	ldi	r25, 0x44	; 68
    3d0e:	08 95       	ret
    3d10:	86 eb       	ldi	r24, 0xB6	; 182
    3d12:	94 e4       	ldi	r25, 0x44	; 68
    3d14:	08 95       	ret
    3d16:	87 eb       	ldi	r24, 0xB7	; 183
    3d18:	94 e4       	ldi	r25, 0x44	; 68
    3d1a:	08 95       	ret
    3d1c:	8c ec       	ldi	r24, 0xCC	; 204
    3d1e:	94 e4       	ldi	r25, 0x44	; 68
    3d20:	08 95       	ret
    3d22:	8d ec       	ldi	r24, 0xCD	; 205
    3d24:	94 e4       	ldi	r25, 0x44	; 68
    3d26:	08 95       	ret
    3d28:	83 e8       	ldi	r24, 0x83	; 131
    3d2a:	95 e4       	ldi	r25, 0x45	; 69
    3d2c:	08 95       	ret
    3d2e:	8a e8       	ldi	r24, 0x8A	; 138
    3d30:	95 e4       	ldi	r25, 0x45	; 69
    3d32:	08 95       	ret
    3d34:	82 e9       	ldi	r24, 0x92	; 146
    3d36:	95 e4       	ldi	r25, 0x45	; 69
    3d38:	08 95       	ret
    3d3a:	84 e9       	ldi	r24, 0x94	; 148
    3d3c:	95 e4       	ldi	r25, 0x45	; 69
    3d3e:	08 95       	ret
    3d40:	81 e2       	ldi	r24, 0x21	; 33
    3d42:	96 e4       	ldi	r25, 0x46	; 70
    3d44:	08 95       	ret
    3d46:	83 e2       	ldi	r24, 0x23	; 35
    3d48:	96 e4       	ldi	r25, 0x46	; 70
    3d4a:	08 95       	ret
    3d4c:	84 e2       	ldi	r24, 0x24	; 36
    3d4e:	96 e4       	ldi	r25, 0x46	; 70
    3d50:	08 95       	ret
    3d52:	85 e2       	ldi	r24, 0x25	; 37
    3d54:	96 e4       	ldi	r25, 0x46	; 70
    3d56:	08 95       	ret
    3d58:	86 e2       	ldi	r24, 0x26	; 38
    3d5a:	96 e4       	ldi	r25, 0x46	; 70
    3d5c:	08 95       	ret
    3d5e:	87 e2       	ldi	r24, 0x27	; 39
    3d60:	96 e4       	ldi	r25, 0x46	; 70
    3d62:	08 95       	ret
    3d64:	80 e0       	ldi	r24, 0x00	; 0
    3d66:	94 e4       	ldi	r25, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    3d68:	08 95       	ret

00003d6a <action_for_key>:

/* converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3d6a:	0e 94 b5 08 	call	0x116a	; 0x116a <keymap_key_to_keycode>
    switch (keycode) {
    3d6e:	80 3e       	cpi	r24, 0xE0	; 224
    3d70:	a8 f4       	brcc	.+42     	; 0x3d9c <action_for_key+0x32>
    3d72:	80 3c       	cpi	r24, 0xC0	; 192
    3d74:	00 f5       	brcc	.+64     	; 0x3db6 <action_for_key+0x4c>
    3d76:	81 33       	cpi	r24, 0x31	; 49
    3d78:	09 f4       	brne	.+2      	; 0x3d7c <action_for_key+0x12>
    3d7a:	5c c0       	rjmp	.+184    	; 0x3e34 <action_for_key+0xca>
    3d7c:	38 f4       	brcc	.+14     	; 0x3d8c <action_for_key+0x22>
    3d7e:	89 32       	cpi	r24, 0x29	; 41
    3d80:	09 f4       	brne	.+2      	; 0x3d84 <action_for_key+0x1a>
    3d82:	52 c0       	rjmp	.+164    	; 0x3e28 <action_for_key+0xbe>
    3d84:	8a 32       	cpi	r24, 0x2A	; 42
    3d86:	09 f4       	brne	.+2      	; 0x3d8a <action_for_key+0x20>
    3d88:	5b c0       	rjmp	.+182    	; 0x3e40 <action_for_key+0xd6>
    3d8a:	5f c0       	rjmp	.+190    	; 0x3e4a <action_for_key+0xe0>
    3d8c:	89 33       	cpi	r24, 0x39	; 57
    3d8e:	b1 f0       	breq	.+44     	; 0x3dbc <action_for_key+0x52>
    3d90:	82 38       	cpi	r24, 0x82	; 130
    3d92:	a1 f0       	breq	.+40     	; 0x3dbc <action_for_key+0x52>
    3d94:	85 33       	cpi	r24, 0x35	; 53
    3d96:	09 f4       	brne	.+2      	; 0x3d9a <action_for_key+0x30>
    3d98:	41 c0       	rjmp	.+130    	; 0x3e1c <action_for_key+0xb2>
    3d9a:	57 c0       	rjmp	.+174    	; 0x3e4a <action_for_key+0xe0>
    3d9c:	83 3e       	cpi	r24, 0xE3	; 227
    3d9e:	41 f1       	breq	.+80     	; 0x3df0 <action_for_key+0x86>
    3da0:	28 f4       	brcc	.+10     	; 0x3dac <action_for_key+0x42>
    3da2:	80 3e       	cpi	r24, 0xE0	; 224
    3da4:	99 f0       	breq	.+38     	; 0x3dcc <action_for_key+0x62>
    3da6:	82 3e       	cpi	r24, 0xE2	; 226
    3da8:	b9 f0       	breq	.+46     	; 0x3dd8 <action_for_key+0x6e>
    3daa:	4f c0       	rjmp	.+158    	; 0x3e4a <action_for_key+0xe0>
    3dac:	86 3e       	cpi	r24, 0xE6	; 230
    3dae:	31 f1       	breq	.+76     	; 0x3dfc <action_for_key+0x92>
    3db0:	87 3e       	cpi	r24, 0xE7	; 231
    3db2:	71 f1       	breq	.+92     	; 0x3e10 <action_for_key+0xa6>
    3db4:	4a c0       	rjmp	.+148    	; 0x3e4a <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3db6:	0e 94 c4 08 	call	0x1188	; 0x1188 <keymap_fn_to_action>
    3dba:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3dbc:	90 91 d8 01 	lds	r25, 0x01D8
    3dc0:	90 fd       	sbrc	r25, 0
    3dc2:	02 c0       	rjmp	.+4      	; 0x3dc8 <action_for_key+0x5e>
    3dc4:	91 ff       	sbrs	r25, 1
    3dc6:	41 c0       	rjmp	.+130    	; 0x3e4a <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3dc8:	80 ee       	ldi	r24, 0xE0	; 224
    3dca:	3f c0       	rjmp	.+126    	; 0x3e4a <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3dcc:	80 91 d8 01 	lds	r24, 0x01D8
    3dd0:	80 ff       	sbrs	r24, 0
    3dd2:	fa cf       	rjmp	.-12     	; 0x3dc8 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3dd4:	89 e3       	ldi	r24, 0x39	; 57
    3dd6:	39 c0       	rjmp	.+114    	; 0x3e4a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3dd8:	80 91 d8 01 	lds	r24, 0x01D8
    3ddc:	82 ff       	sbrs	r24, 2
    3dde:	0c c0       	rjmp	.+24     	; 0x3df8 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3de0:	80 91 d8 01 	lds	r24, 0x01D8
    3de4:	84 ff       	sbrs	r24, 4
    3de6:	02 c0       	rjmp	.+4      	; 0x3dec <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3de8:	80 e0       	ldi	r24, 0x00	; 0
    3dea:	2f c0       	rjmp	.+94     	; 0x3e4a <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3dec:	83 ee       	ldi	r24, 0xE3	; 227
    3dee:	2d c0       	rjmp	.+90     	; 0x3e4a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3df0:	80 91 d8 01 	lds	r24, 0x01D8
    3df4:	82 ff       	sbrs	r24, 2
    3df6:	f4 cf       	rjmp	.-24     	; 0x3de0 <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3df8:	82 ee       	ldi	r24, 0xE2	; 226
    3dfa:	27 c0       	rjmp	.+78     	; 0x3e4a <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3dfc:	80 91 d8 01 	lds	r24, 0x01D8
    3e00:	83 ff       	sbrs	r24, 3
    3e02:	0a c0       	rjmp	.+20     	; 0x3e18 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3e04:	80 91 d8 01 	lds	r24, 0x01D8
    3e08:	84 fd       	sbrc	r24, 4
    3e0a:	ee cf       	rjmp	.-36     	; 0x3de8 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3e0c:	87 ee       	ldi	r24, 0xE7	; 231
    3e0e:	1d c0       	rjmp	.+58     	; 0x3e4a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3e10:	80 91 d8 01 	lds	r24, 0x01D8
    3e14:	83 ff       	sbrs	r24, 3
    3e16:	f6 cf       	rjmp	.-20     	; 0x3e04 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3e18:	86 ee       	ldi	r24, 0xE6	; 230
    3e1a:	17 c0       	rjmp	.+46     	; 0x3e4a <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3e1c:	80 91 d8 01 	lds	r24, 0x01D8
    3e20:	85 ff       	sbrs	r24, 5
    3e22:	06 c0       	rjmp	.+12     	; 0x3e30 <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3e24:	89 e2       	ldi	r24, 0x29	; 41
    3e26:	11 c0       	rjmp	.+34     	; 0x3e4a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3e28:	80 91 d8 01 	lds	r24, 0x01D8
    3e2c:	85 ff       	sbrs	r24, 5
    3e2e:	fa cf       	rjmp	.-12     	; 0x3e24 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3e30:	85 e3       	ldi	r24, 0x35	; 53
    3e32:	0b c0       	rjmp	.+22     	; 0x3e4a <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3e34:	80 91 d8 01 	lds	r24, 0x01D8
    3e38:	86 ff       	sbrs	r24, 6
    3e3a:	06 c0       	rjmp	.+12     	; 0x3e48 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3e3c:	8a e2       	ldi	r24, 0x2A	; 42
    3e3e:	05 c0       	rjmp	.+10     	; 0x3e4a <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3e40:	80 91 d8 01 	lds	r24, 0x01D8
    3e44:	86 ff       	sbrs	r24, 6
    3e46:	fa cf       	rjmp	.-12     	; 0x3e3c <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3e48:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3e4a:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <keycode_to_action>
    }
}
    3e4e:	08 95       	ret

00003e50 <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    3e50:	80 e0       	ldi	r24, 0x00	; 0
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	08 95       	ret

00003e56 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3e56:	08 95       	ret

00003e58 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3e58:	90 93 c6 01 	sts	0x01C6, r25
    3e5c:	80 93 c5 01 	sts	0x01C5, r24
    3e60:	08 95       	ret

00003e62 <biton32>:
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}

uint8_t biton32(uint32_t bits)
{
    3e62:	cf 92       	push	r12
    3e64:	df 92       	push	r13
    3e66:	ef 92       	push	r14
    3e68:	ff 92       	push	r15
    3e6a:	0f 93       	push	r16
    3e6c:	1f 93       	push	r17
    uint8_t n = 0;
    if (bits >>16) { bits >>=16; n +=16;}
    3e6e:	6c 01       	movw	r12, r24
    3e70:	ee 24       	eor	r14, r14
    3e72:	ff 24       	eor	r15, r15
    3e74:	c1 14       	cp	r12, r1
    3e76:	d1 04       	cpc	r13, r1
    3e78:	e1 04       	cpc	r14, r1
    3e7a:	f1 04       	cpc	r15, r1
    3e7c:	21 f4       	brne	.+8      	; 0x3e86 <biton32+0x24>
    3e7e:	6b 01       	movw	r12, r22
    3e80:	7c 01       	movw	r14, r24
    return n;
}

uint8_t biton32(uint32_t bits)
{
    uint8_t n = 0;
    3e82:	80 e0       	ldi	r24, 0x00	; 0
    3e84:	01 c0       	rjmp	.+2      	; 0x3e88 <biton32+0x26>
    if (bits >>16) { bits >>=16; n +=16;}
    3e86:	80 e1       	ldi	r24, 0x10	; 16
    if (bits >> 8) { bits >>= 8; n += 8;}
    3e88:	33 27       	eor	r19, r19
    3e8a:	2f 2d       	mov	r18, r15
    3e8c:	1e 2d       	mov	r17, r14
    3e8e:	0d 2d       	mov	r16, r13
    3e90:	01 15       	cp	r16, r1
    3e92:	11 05       	cpc	r17, r1
    3e94:	21 05       	cpc	r18, r1
    3e96:	31 05       	cpc	r19, r1
    3e98:	19 f0       	breq	.+6      	; 0x3ea0 <biton32+0x3e>
    3e9a:	88 5f       	subi	r24, 0xF8	; 248
    3e9c:	68 01       	movw	r12, r16
    3e9e:	79 01       	movw	r14, r18
    if (bits >> 4) { bits >>= 4; n += 4;}
    3ea0:	97 01       	movw	r18, r14
    3ea2:	86 01       	movw	r16, r12
    3ea4:	a4 e0       	ldi	r26, 0x04	; 4
    3ea6:	36 95       	lsr	r19
    3ea8:	27 95       	ror	r18
    3eaa:	17 95       	ror	r17
    3eac:	07 95       	ror	r16
    3eae:	aa 95       	dec	r26
    3eb0:	d1 f7       	brne	.-12     	; 0x3ea6 <biton32+0x44>
    3eb2:	01 15       	cp	r16, r1
    3eb4:	11 05       	cpc	r17, r1
    3eb6:	21 05       	cpc	r18, r1
    3eb8:	31 05       	cpc	r19, r1
    3eba:	19 f0       	breq	.+6      	; 0x3ec2 <biton32+0x60>
    3ebc:	8c 5f       	subi	r24, 0xFC	; 252
    3ebe:	68 01       	movw	r12, r16
    3ec0:	79 01       	movw	r14, r18
    if (bits >> 2) { bits >>= 2; n += 2;}
    3ec2:	97 01       	movw	r18, r14
    3ec4:	86 01       	movw	r16, r12
    3ec6:	f2 e0       	ldi	r31, 0x02	; 2
    3ec8:	36 95       	lsr	r19
    3eca:	27 95       	ror	r18
    3ecc:	17 95       	ror	r17
    3ece:	07 95       	ror	r16
    3ed0:	fa 95       	dec	r31
    3ed2:	d1 f7       	brne	.-12     	; 0x3ec8 <biton32+0x66>
    3ed4:	01 15       	cp	r16, r1
    3ed6:	11 05       	cpc	r17, r1
    3ed8:	21 05       	cpc	r18, r1
    3eda:	31 05       	cpc	r19, r1
    3edc:	19 f0       	breq	.+6      	; 0x3ee4 <biton32+0x82>
    3ede:	8e 5f       	subi	r24, 0xFE	; 254
    3ee0:	68 01       	movw	r12, r16
    3ee2:	79 01       	movw	r14, r18
    if (bits >> 1) { bits >>= 1; n += 1;}
    3ee4:	b7 01       	movw	r22, r14
    3ee6:	a6 01       	movw	r20, r12
    3ee8:	76 95       	lsr	r23
    3eea:	67 95       	ror	r22
    3eec:	57 95       	ror	r21
    3eee:	47 95       	ror	r20
    3ef0:	45 2b       	or	r20, r21
    3ef2:	46 2b       	or	r20, r22
    3ef4:	47 2b       	or	r20, r23
    3ef6:	09 f0       	breq	.+2      	; 0x3efa <biton32+0x98>
    3ef8:	8f 5f       	subi	r24, 0xFF	; 255
    return n;
}
    3efa:	1f 91       	pop	r17
    3efc:	0f 91       	pop	r16
    3efe:	ff 90       	pop	r15
    3f00:	ef 90       	pop	r14
    3f02:	df 90       	pop	r13
    3f04:	cf 90       	pop	r12
    3f06:	08 95       	ret

00003f08 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3f08:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3f0a:	98 2f       	mov	r25, r24
    3f0c:	9c 7c       	andi	r25, 0xCC	; 204
    3f0e:	96 95       	lsr	r25
    3f10:	96 95       	lsr	r25
    3f12:	83 73       	andi	r24, 0x33	; 51
    3f14:	44 e0       	ldi	r20, 0x04	; 4
    3f16:	84 9f       	mul	r24, r20
    3f18:	90 01       	movw	r18, r0
    3f1a:	11 24       	eor	r1, r1
    3f1c:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3f1e:	89 2f       	mov	r24, r25
    3f20:	8a 7a       	andi	r24, 0xAA	; 170
    3f22:	86 95       	lsr	r24
    3f24:	95 75       	andi	r25, 0x55	; 85
    3f26:	99 0f       	add	r25, r25
    return bits;
}
    3f28:	89 2b       	or	r24, r25
    3f2a:	08 95       	ret

00003f2c <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3f2c:	1f 93       	push	r17
    3f2e:	cf 93       	push	r28
    3f30:	df 93       	push	r29
    3f32:	1f 92       	push	r1
    3f34:	cd b7       	in	r28, 0x3d	; 61
    3f36:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3f38:	99 83       	std	Y+1, r25	; 0x01
    3f3a:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bitrev>
    3f3e:	18 2f       	mov	r17, r24
    3f40:	99 81       	ldd	r25, Y+1	; 0x01
    3f42:	89 2f       	mov	r24, r25
    3f44:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <bitrev>
    3f48:	21 2f       	mov	r18, r17
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	32 2f       	mov	r19, r18
    3f4e:	22 27       	eor	r18, r18
    return bits;
}
    3f50:	a9 01       	movw	r20, r18
    3f52:	48 2b       	or	r20, r24
    3f54:	ca 01       	movw	r24, r20
    3f56:	0f 90       	pop	r0
    3f58:	df 91       	pop	r29
    3f5a:	cf 91       	pop	r28
    3f5c:	1f 91       	pop	r17
    3f5e:	08 95       	ret

00003f60 <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3f60:	80 91 dd 01 	lds	r24, 0x01DD
    3f64:	84 30       	cpi	r24, 0x04	; 4
    3f66:	09 f1       	breq	.+66     	; 0x3faa <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3f68:	10 92 c4 01 	sts	0x01C4, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3f6c:	20 e4       	ldi	r18, 0x40	; 64
    3f6e:	88 e1       	ldi	r24, 0x18	; 24
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	0f b6       	in	r0, 0x3f	; 63
    3f74:	f8 94       	cli
    3f76:	a8 95       	wdr
    3f78:	80 93 60 00 	sts	0x0060, r24
    3f7c:	0f be       	out	0x3f, r0	; 63
    3f7e:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3f82:	83 b7       	in	r24, 0x33	; 51
    3f84:	81 7f       	andi	r24, 0xF1	; 241
    3f86:	84 60       	ori	r24, 0x04	; 4
    3f88:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3f8a:	83 b7       	in	r24, 0x33	; 51
    3f8c:	81 60       	ori	r24, 0x01	; 1
    3f8e:	83 bf       	out	0x33, r24	; 51
    sei();
    3f90:	78 94       	sei
    sleep_cpu();
    3f92:	88 95       	sleep
    sleep_disable();
    3f94:	83 b7       	in	r24, 0x33	; 51
    3f96:	8e 7f       	andi	r24, 0xFE	; 254
    3f98:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3f9a:	88 e1       	ldi	r24, 0x18	; 24
    3f9c:	0f b6       	in	r0, 0x3f	; 63
    3f9e:	f8 94       	cli
    3fa0:	80 93 60 00 	sts	0x0060, r24
    3fa4:	10 92 60 00 	sts	0x0060, r1
    3fa8:	0f be       	out	0x3f, r0	; 63
    3faa:	08 95       	ret

00003fac <suspend_wakeup_condition>:
{
    power_down(WDTO_15MS);
}

bool suspend_wakeup_condition(void)
{
    3fac:	cf 93       	push	r28
    matrix_power_up();
    3fae:	0e 94 b3 08 	call	0x1166	; 0x1166 <matrix_power_up>
    matrix_scan();
    3fb2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <matrix_scan>
    matrix_power_down();
    3fb6:	0e 94 b4 08 	call	0x1168	; 0x1168 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3fba:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3fbc:	8c 2f       	mov	r24, r28
    3fbe:	0e 94 13 0a 	call	0x1426	; 0x1426 <matrix_get_row>
    3fc2:	89 2b       	or	r24, r25
    3fc4:	29 f4       	brne	.+10     	; 0x3fd0 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3fc6:	cf 5f       	subi	r28, 0xFF	; 255
    3fc8:	c5 30       	cpi	r28, 0x05	; 5
    3fca:	c1 f7       	brne	.-16     	; 0x3fbc <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3fcc:	80 e0       	ldi	r24, 0x00	; 0
    3fce:	01 c0       	rjmp	.+2      	; 0x3fd2 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3fd2:	cf 91       	pop	r28
    3fd4:	08 95       	ret

00003fd6 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3fd6:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <clear_keyboard>

00003fda <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3fda:	1f 92       	push	r1
    3fdc:	0f 92       	push	r0
    3fde:	0f b6       	in	r0, 0x3f	; 63
    3fe0:	0f 92       	push	r0
    3fe2:	11 24       	eor	r1, r1
    3fe4:	8f 93       	push	r24
    3fe6:	9f 93       	push	r25
    3fe8:	af 93       	push	r26
    3fea:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3fec:	80 91 c4 01 	lds	r24, 0x01C4
    3ff0:	81 11       	cpse	r24, r1
    3ff2:	13 c0       	rjmp	.+38     	; 0x401a <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3ff4:	80 91 c7 01 	lds	r24, 0x01C7
    3ff8:	90 91 c8 01 	lds	r25, 0x01C8
    3ffc:	a0 91 c9 01 	lds	r26, 0x01C9
    4000:	b0 91 ca 01 	lds	r27, 0x01CA
    4004:	41 96       	adiw	r24, 0x11	; 17
    4006:	a1 1d       	adc	r26, r1
    4008:	b1 1d       	adc	r27, r1
    400a:	80 93 c7 01 	sts	0x01C7, r24
    400e:	90 93 c8 01 	sts	0x01C8, r25
    4012:	a0 93 c9 01 	sts	0x01C9, r26
    4016:	b0 93 ca 01 	sts	0x01CA, r27
            break;
        default:
            ;
    }
}
    401a:	bf 91       	pop	r27
    401c:	af 91       	pop	r26
    401e:	9f 91       	pop	r25
    4020:	8f 91       	pop	r24
    4022:	0f 90       	pop	r0
    4024:	0f be       	out	0x3f, r0	; 63
    4026:	0f 90       	pop	r0
    4028:	1f 90       	pop	r1
    402a:	18 95       	reti

0000402c <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    402c:	82 e0       	ldi	r24, 0x02	; 2
    402e:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    4030:	93 e0       	ldi	r25, 0x03	; 3
    4032:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    4034:	9a ef       	ldi	r25, 0xFA	; 250
    4036:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    4038:	80 93 6e 00 	sts	0x006E, r24
    403c:	08 95       	ret

0000403e <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    403e:	2f b7       	in	r18, 0x3f	; 63
    cli();
    4040:	f8 94       	cli
    t = timer_count;
    4042:	80 91 c7 01 	lds	r24, 0x01C7
    4046:	90 91 c8 01 	lds	r25, 0x01C8
    404a:	a0 91 c9 01 	lds	r26, 0x01C9
    404e:	b0 91 ca 01 	lds	r27, 0x01CA
    SREG = sreg;
    4052:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    4054:	08 95       	ret

00004056 <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    4056:	cf 92       	push	r12
    4058:	df 92       	push	r13
    405a:	ef 92       	push	r14
    405c:	ff 92       	push	r15
    405e:	0f 93       	push	r16
    4060:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    4062:	2f b7       	in	r18, 0x3f	; 63
    cli();
    4064:	f8 94       	cli
    t = timer_count;
    4066:	40 91 c7 01 	lds	r20, 0x01C7
    406a:	50 91 c8 01 	lds	r21, 0x01C8
    406e:	60 91 c9 01 	lds	r22, 0x01C9
    4072:	70 91 ca 01 	lds	r23, 0x01CA
    SREG = sreg;
    4076:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    4078:	6a 01       	movw	r12, r20
    407a:	7b 01       	movw	r14, r22
    407c:	ee 24       	eor	r14, r14
    407e:	ff 24       	eor	r15, r15
    4080:	8c 01       	movw	r16, r24
    4082:	20 e0       	ldi	r18, 0x00	; 0
    4084:	30 e0       	ldi	r19, 0x00	; 0
    4086:	c0 16       	cp	r12, r16
    4088:	d1 06       	cpc	r13, r17
    408a:	e2 06       	cpc	r14, r18
    408c:	f3 06       	cpc	r15, r19
    408e:	10 f4       	brcc	.+4      	; 0x4094 <timer_elapsed+0x3e>
    4090:	41 50       	subi	r20, 0x01	; 1
    4092:	51 09       	sbc	r21, r1
    4094:	48 1b       	sub	r20, r24
    4096:	59 0b       	sbc	r21, r25
}
    4098:	ca 01       	movw	r24, r20
    409a:	1f 91       	pop	r17
    409c:	0f 91       	pop	r16
    409e:	ff 90       	pop	r15
    40a0:	ef 90       	pop	r14
    40a2:	df 90       	pop	r13
    40a4:	cf 90       	pop	r12
    40a6:	08 95       	ret

000040a8 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    40a8:	1f 92       	push	r1
    40aa:	0f 92       	push	r0
    40ac:	0f b6       	in	r0, 0x3f	; 63
    40ae:	0f 92       	push	r0
    40b0:	11 24       	eor	r1, r1
    40b2:	8f 93       	push	r24
    40b4:	9f 93       	push	r25
    40b6:	af 93       	push	r26
    40b8:	bf 93       	push	r27
    timer_count++;
    40ba:	80 91 c7 01 	lds	r24, 0x01C7
    40be:	90 91 c8 01 	lds	r25, 0x01C8
    40c2:	a0 91 c9 01 	lds	r26, 0x01C9
    40c6:	b0 91 ca 01 	lds	r27, 0x01CA
    40ca:	01 96       	adiw	r24, 0x01	; 1
    40cc:	a1 1d       	adc	r26, r1
    40ce:	b1 1d       	adc	r27, r1
    40d0:	80 93 c7 01 	sts	0x01C7, r24
    40d4:	90 93 c8 01 	sts	0x01C8, r25
    40d8:	a0 93 c9 01 	sts	0x01C9, r26
    40dc:	b0 93 ca 01 	sts	0x01CA, r27
}
    40e0:	bf 91       	pop	r27
    40e2:	af 91       	pop	r26
    40e4:	9f 91       	pop	r25
    40e6:	8f 91       	pop	r24
    40e8:	0f 90       	pop	r0
    40ea:	0f be       	out	0x3f, r0	; 63
    40ec:	0f 90       	pop	r0
    40ee:	1f 90       	pop	r1
    40f0:	18 95       	reti

000040f2 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    40f2:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <USB_Disable>
    cli();
    40f6:	f8 94       	cli
    40f8:	2f ef       	ldi	r18, 0xFF	; 255
    40fa:	87 ea       	ldi	r24, 0xA7	; 167
    40fc:	91 e6       	ldi	r25, 0x61	; 97
    40fe:	21 50       	subi	r18, 0x01	; 1
    4100:	80 40       	sbci	r24, 0x00	; 0
    4102:	90 40       	sbci	r25, 0x00	; 0
    4104:	e1 f7       	brne	.-8      	; 0x40fe <bootloader_jump+0xc>
    4106:	00 c0       	rjmp	.+0      	; 0x4108 <bootloader_jump+0x16>
    4108:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    410a:	87 e0       	ldi	r24, 0x07	; 7
    410c:	90 eb       	ldi	r25, 0xB0	; 176
    410e:	dc 01       	movw	r26, r24
    4110:	80 93 e6 01 	sts	0x01E6, r24
    4114:	90 93 e7 01 	sts	0x01E7, r25
    4118:	a0 93 e8 01 	sts	0x01E8, r26
    411c:	b0 93 e9 01 	sts	0x01E9, r27
    wdt_enable(WDTO_250MS);
    4120:	2c e0       	ldi	r18, 0x0C	; 12
    4122:	88 e1       	ldi	r24, 0x18	; 24
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	0f b6       	in	r0, 0x3f	; 63
    4128:	f8 94       	cli
    412a:	a8 95       	wdr
    412c:	80 93 60 00 	sts	0x0060, r24
    4130:	0f be       	out	0x3f, r0	; 63
    4132:	20 93 60 00 	sts	0x0060, r18
    4136:	ff cf       	rjmp	.-2      	; 0x4136 <bootloader_jump+0x44>

00004138 <scan_keycode>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_keycode(uint8_t keycode)
{
    4138:	cf 92       	push	r12
    413a:	df 92       	push	r13
    413c:	ef 92       	push	r14
    413e:	ff 92       	push	r15
    4140:	0f 93       	push	r16
    4142:	1f 93       	push	r17
    4144:	cf 93       	push	r28
    4146:	df 93       	push	r29
    4148:	c8 2e       	mov	r12, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    414a:	d1 2c       	mov	r13, r1
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    414c:	01 e0       	ldi	r16, 0x01	; 1
    414e:	10 e0       	ldi	r17, 0x00	; 0
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    4150:	8d 2d       	mov	r24, r13
    4152:	0e 94 13 0a 	call	0x1426	; 0x1426 <matrix_get_row>
    4156:	7c 01       	movw	r14, r24
    4158:	c0 e0       	ldi	r28, 0x00	; 0
    415a:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    415c:	98 01       	movw	r18, r16
    415e:	0c 2e       	mov	r0, r28
    4160:	02 c0       	rjmp	.+4      	; 0x4166 <scan_keycode+0x2e>
    4162:	22 0f       	add	r18, r18
    4164:	33 1f       	adc	r19, r19
    4166:	0a 94       	dec	r0
    4168:	e2 f7       	brpl	.-8      	; 0x4162 <scan_keycode+0x2a>
    416a:	2e 21       	and	r18, r14
    416c:	3f 21       	and	r19, r15
    416e:	23 2b       	or	r18, r19
    4170:	29 f4       	brne	.+10     	; 0x417c <scan_keycode+0x44>
    4172:	21 96       	adiw	r28, 0x01	; 1

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    4174:	cf 30       	cpi	r28, 0x0F	; 15
    4176:	d1 05       	cpc	r29, r1
    4178:	89 f7       	brne	.-30     	; 0x415c <scan_keycode+0x24>
    417a:	09 c0       	rjmp	.+18     	; 0x418e <scan_keycode+0x56>
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    417c:	6c 2f       	mov	r22, r28
    417e:	7d 2d       	mov	r23, r13
    4180:	80 e0       	ldi	r24, 0x00	; 0
    4182:	0e 94 b5 08 	call	0x116a	; 0x116a <keymap_key_to_keycode>
    4186:	c8 12       	cpse	r12, r24
    4188:	f4 cf       	rjmp	.-24     	; 0x4172 <scan_keycode+0x3a>
                    return true;
    418a:	81 e0       	ldi	r24, 0x01	; 1
    418c:	05 c0       	rjmp	.+10     	; 0x4198 <scan_keycode+0x60>
    }
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    418e:	d3 94       	inc	r13
    4190:	85 e0       	ldi	r24, 0x05	; 5
    4192:	d8 12       	cpse	r13, r24
    4194:	dd cf       	rjmp	.-70     	; 0x4150 <scan_keycode+0x18>
                    return true;
                }
            }
        }
    }
    return false;
    4196:	80 e0       	ldi	r24, 0x00	; 0
}
    4198:	df 91       	pop	r29
    419a:	cf 91       	pop	r28
    419c:	1f 91       	pop	r17
    419e:	0f 91       	pop	r16
    41a0:	ff 90       	pop	r15
    41a2:	ef 90       	pop	r14
    41a4:	df 90       	pop	r13
    41a6:	cf 90       	pop	r12
    41a8:	08 95       	ret

000041aa <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    41aa:	cf 93       	push	r28
    41ac:	c8 2f       	mov	r28, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    41ae:	8c e2       	ldi	r24, 0x2C	; 44
    41b0:	0e 94 9c 20 	call	0x4138	; 0x4138 <scan_keycode>
    41b4:	88 23       	and	r24, r24
    41b6:	21 f0       	breq	.+8      	; 0x41c0 <bootmagic_scan_keycode+0x16>

    return scan_keycode(keycode);
    41b8:	8c 2f       	mov	r24, r28
}
    41ba:	cf 91       	pop	r28

bool bootmagic_scan_keycode(uint8_t keycode)
{
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;

    return scan_keycode(keycode);
    41bc:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <scan_keycode>
}
    41c0:	80 e0       	ldi	r24, 0x00	; 0
    41c2:	cf 91       	pop	r28
    41c4:	08 95       	ret

000041c6 <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    41c6:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    41c8:	0e 94 30 22 	call	0x4460	; 0x4460 <eeconfig_is_enabled>
    41cc:	81 11       	cpse	r24, r1
    41ce:	02 c0       	rjmp	.+4      	; 0x41d4 <bootmagic+0xe>
        eeconfig_init();
    41d0:	0e 94 16 22 	call	0x442c	; 0x442c <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    41d4:	8a e7       	ldi	r24, 0x7A	; 122
    41d6:	94 e0       	ldi	r25, 0x04	; 4
    41d8:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    41dc:	c5 e6       	ldi	r28, 0x65	; 101
    41de:	c1 50       	subi	r28, 0x01	; 1
    41e0:	49 f0       	breq	.+18     	; 0x41f4 <bootmagic+0x2e>
    41e2:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <matrix_scan>
    41e6:	8f e3       	ldi	r24, 0x3F	; 63
    41e8:	9c e9       	ldi	r25, 0x9C	; 156
    41ea:	01 97       	sbiw	r24, 0x01	; 1
    41ec:	f1 f7       	brne	.-4      	; 0x41ea <bootmagic+0x24>
    41ee:	00 c0       	rjmp	.+0      	; 0x41f0 <bootmagic+0x2a>
    41f0:	00 00       	nop
    41f2:	f5 cf       	rjmp	.-22     	; 0x41de <bootmagic+0x18>
    print("done.\n");
    41f4:	83 e7       	ldi	r24, 0x73	; 115
    41f6:	94 e0       	ldi	r25, 0x04	; 4
    41f8:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    41fc:	89 e2       	ldi	r24, 0x29	; 41
    41fe:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    4202:	81 11       	cpse	r24, r1
    4204:	11 c1       	rjmp	.+546    	; 0x4428 <bootmagic+0x262>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    4206:	8a e2       	ldi	r24, 0x2A	; 42
    4208:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    420c:	81 11       	cpse	r24, r1
        eeconfig_init();
    420e:	0e 94 16 22 	call	0x442c	; 0x442c <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    4212:	85 e0       	ldi	r24, 0x05	; 5
    4214:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    4218:	81 11       	cpse	r24, r1
        bootloader_jump();
    421a:	0e 94 79 20 	call	0x40f2	; 0x40f2 <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    421e:	0e 94 3b 22 	call	0x4476	; 0x4476 <eeconfig_read_debug>
    4222:	80 93 c3 01 	sts	0x01C3, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    4226:	87 e0       	ldi	r24, 0x07	; 7
    4228:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    422c:	88 23       	and	r24, r24
    422e:	99 f1       	breq	.+102    	; 0x4296 <bootmagic+0xd0>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    4230:	8b e1       	ldi	r24, 0x1B	; 27
    4232:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    4236:	88 23       	and	r24, r24
    4238:	51 f0       	breq	.+20     	; 0x424e <bootmagic+0x88>
            debug_config.matrix = !debug_config.matrix;
    423a:	90 91 c3 01 	lds	r25, 0x01C3
    423e:	91 fb       	bst	r25, 1
    4240:	88 27       	eor	r24, r24
    4242:	80 f9       	bld	r24, 0
    4244:	21 e0       	ldi	r18, 0x01	; 1
    4246:	82 27       	eor	r24, r18
    4248:	80 fb       	bst	r24, 0
    424a:	91 f9       	bld	r25, 1
    424c:	22 c0       	rjmp	.+68     	; 0x4292 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    424e:	8e e0       	ldi	r24, 0x0E	; 14
    4250:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    4254:	88 23       	and	r24, r24
    4256:	51 f0       	breq	.+20     	; 0x426c <bootmagic+0xa6>
            debug_config.keyboard = !debug_config.keyboard;
    4258:	90 91 c3 01 	lds	r25, 0x01C3
    425c:	92 fb       	bst	r25, 2
    425e:	88 27       	eor	r24, r24
    4260:	80 f9       	bld	r24, 0
    4262:	21 e0       	ldi	r18, 0x01	; 1
    4264:	82 27       	eor	r24, r18
    4266:	80 fb       	bst	r24, 0
    4268:	92 f9       	bld	r25, 2
    426a:	13 c0       	rjmp	.+38     	; 0x4292 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    426c:	80 e1       	ldi	r24, 0x10	; 16
    426e:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    4272:	90 91 c3 01 	lds	r25, 0x01C3
    4276:	88 23       	and	r24, r24
    4278:	41 f0       	breq	.+16     	; 0x428a <bootmagic+0xc4>
            debug_config.mouse = !debug_config.mouse;
    427a:	93 fb       	bst	r25, 3
    427c:	88 27       	eor	r24, r24
    427e:	80 f9       	bld	r24, 0
    4280:	21 e0       	ldi	r18, 0x01	; 1
    4282:	82 27       	eor	r24, r18
    4284:	80 fb       	bst	r24, 0
    4286:	93 f9       	bld	r25, 3
    4288:	04 c0       	rjmp	.+8      	; 0x4292 <bootmagic+0xcc>
        } else {
            debug_config.enable = !debug_config.enable;
    428a:	89 2f       	mov	r24, r25
    428c:	80 95       	com	r24
    428e:	80 fb       	bst	r24, 0
    4290:	90 f9       	bld	r25, 0
    4292:	90 93 c3 01 	sts	0x01C3, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    4296:	80 91 c3 01 	lds	r24, 0x01C3
    429a:	0e 94 3f 22 	call	0x447e	; 0x447e <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    429e:	0e 94 4d 22 	call	0x449a	; 0x449a <eeconfig_read_keymap>
    42a2:	80 93 d8 01 	sts	0x01D8, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    42a6:	80 ee       	ldi	r24, 0xE0	; 224
    42a8:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    42ac:	88 23       	and	r24, r24
    42ae:	41 f0       	breq	.+16     	; 0x42c0 <bootmagic+0xfa>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    42b0:	80 91 d8 01 	lds	r24, 0x01D8
    42b4:	98 2f       	mov	r25, r24
    42b6:	90 95       	com	r25
    42b8:	90 fb       	bst	r25, 0
    42ba:	80 f9       	bld	r24, 0
    42bc:	80 93 d8 01 	sts	0x01D8, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    42c0:	89 e3       	ldi	r24, 0x39	; 57
    42c2:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    42c6:	88 23       	and	r24, r24
    42c8:	59 f0       	breq	.+22     	; 0x42e0 <bootmagic+0x11a>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    42ca:	90 91 d8 01 	lds	r25, 0x01D8
    42ce:	91 fb       	bst	r25, 1
    42d0:	88 27       	eor	r24, r24
    42d2:	80 f9       	bld	r24, 0
    42d4:	21 e0       	ldi	r18, 0x01	; 1
    42d6:	82 27       	eor	r24, r18
    42d8:	80 fb       	bst	r24, 0
    42da:	91 f9       	bld	r25, 1
    42dc:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    42e0:	82 ee       	ldi	r24, 0xE2	; 226
    42e2:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    42e6:	88 23       	and	r24, r24
    42e8:	59 f0       	breq	.+22     	; 0x4300 <bootmagic+0x13a>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    42ea:	90 91 d8 01 	lds	r25, 0x01D8
    42ee:	92 fb       	bst	r25, 2
    42f0:	88 27       	eor	r24, r24
    42f2:	80 f9       	bld	r24, 0
    42f4:	21 e0       	ldi	r18, 0x01	; 1
    42f6:	82 27       	eor	r24, r18
    42f8:	80 fb       	bst	r24, 0
    42fa:	92 f9       	bld	r25, 2
    42fc:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    4300:	86 ee       	ldi	r24, 0xE6	; 230
    4302:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    4306:	88 23       	and	r24, r24
    4308:	59 f0       	breq	.+22     	; 0x4320 <bootmagic+0x15a>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    430a:	90 91 d8 01 	lds	r25, 0x01D8
    430e:	93 fb       	bst	r25, 3
    4310:	88 27       	eor	r24, r24
    4312:	80 f9       	bld	r24, 0
    4314:	21 e0       	ldi	r18, 0x01	; 1
    4316:	82 27       	eor	r24, r18
    4318:	80 fb       	bst	r24, 0
    431a:	93 f9       	bld	r25, 3
    431c:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    4320:	83 ee       	ldi	r24, 0xE3	; 227
    4322:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    4326:	88 23       	and	r24, r24
    4328:	59 f0       	breq	.+22     	; 0x4340 <bootmagic+0x17a>
        keymap_config.no_gui = !keymap_config.no_gui;
    432a:	90 91 d8 01 	lds	r25, 0x01D8
    432e:	94 fb       	bst	r25, 4
    4330:	88 27       	eor	r24, r24
    4332:	80 f9       	bld	r24, 0
    4334:	21 e0       	ldi	r18, 0x01	; 1
    4336:	82 27       	eor	r24, r18
    4338:	80 fb       	bst	r24, 0
    433a:	94 f9       	bld	r25, 4
    433c:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    4340:	85 e3       	ldi	r24, 0x35	; 53
    4342:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    4346:	88 23       	and	r24, r24
    4348:	59 f0       	breq	.+22     	; 0x4360 <bootmagic+0x19a>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    434a:	90 91 d8 01 	lds	r25, 0x01D8
    434e:	95 fb       	bst	r25, 5
    4350:	88 27       	eor	r24, r24
    4352:	80 f9       	bld	r24, 0
    4354:	21 e0       	ldi	r18, 0x01	; 1
    4356:	82 27       	eor	r24, r18
    4358:	80 fb       	bst	r24, 0
    435a:	95 f9       	bld	r25, 5
    435c:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    4360:	81 e3       	ldi	r24, 0x31	; 49
    4362:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    4366:	88 23       	and	r24, r24
    4368:	59 f0       	breq	.+22     	; 0x4380 <bootmagic+0x1ba>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    436a:	90 91 d8 01 	lds	r25, 0x01D8
    436e:	96 fb       	bst	r25, 6
    4370:	88 27       	eor	r24, r24
    4372:	80 f9       	bld	r24, 0
    4374:	21 e0       	ldi	r18, 0x01	; 1
    4376:	82 27       	eor	r24, r18
    4378:	80 fb       	bst	r24, 0
    437a:	96 f9       	bld	r25, 6
    437c:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    4380:	81 e1       	ldi	r24, 0x11	; 17
    4382:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    4386:	88 23       	and	r24, r24
    4388:	59 f0       	breq	.+22     	; 0x43a0 <bootmagic+0x1da>
        keymap_config.nkro = !keymap_config.nkro;
    438a:	90 91 d8 01 	lds	r25, 0x01D8
    438e:	97 fb       	bst	r25, 7
    4390:	88 27       	eor	r24, r24
    4392:	80 f9       	bld	r24, 0
    4394:	21 e0       	ldi	r18, 0x01	; 1
    4396:	82 27       	eor	r24, r18
    4398:	80 fb       	bst	r24, 0
    439a:	97 f9       	bld	r25, 7
    439c:	90 93 d8 01 	sts	0x01D8, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    43a0:	80 91 d8 01 	lds	r24, 0x01D8
    43a4:	0e 94 51 22 	call	0x44a2	; 0x44a2 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    43a8:	80 91 d8 01 	lds	r24, 0x01D8
    43ac:	87 fb       	bst	r24, 7
    43ae:	88 27       	eor	r24, r24
    43b0:	80 f9       	bld	r24, 0
    43b2:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    43b6:	87 e2       	ldi	r24, 0x27	; 39
    43b8:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    43bc:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    43be:	8e e1       	ldi	r24, 0x1E	; 30
    43c0:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    43c4:	81 11       	cpse	r24, r1
    43c6:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    43c8:	8f e1       	ldi	r24, 0x1F	; 31
    43ca:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    43ce:	81 11       	cpse	r24, r1
    43d0:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    43d2:	80 e2       	ldi	r24, 0x20	; 32
    43d4:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    43d8:	81 11       	cpse	r24, r1
    43da:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    43dc:	81 e2       	ldi	r24, 0x21	; 33
    43de:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    43e2:	81 11       	cpse	r24, r1
    43e4:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    43e6:	82 e2       	ldi	r24, 0x22	; 34
    43e8:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    43ec:	81 11       	cpse	r24, r1
    43ee:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    43f0:	83 e2       	ldi	r24, 0x23	; 35
    43f2:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    43f6:	81 11       	cpse	r24, r1
    43f8:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    43fa:	84 e2       	ldi	r24, 0x24	; 36
    43fc:	0e 94 d5 20 	call	0x41aa	; 0x41aa <bootmagic_scan_keycode>
    4400:	88 23       	and	r24, r24
    4402:	11 f0       	breq	.+4      	; 0x4408 <bootmagic+0x242>
    4404:	c0 68       	ori	r28, 0x80	; 128
    4406:	02 c0       	rjmp	.+4      	; 0x440c <bootmagic+0x246>
    if (default_layer) {
    4408:	cc 23       	and	r28, r28
    440a:	29 f0       	breq	.+10     	; 0x4416 <bootmagic+0x250>
        eeconfig_write_default_layer(default_layer);
    440c:	8c 2f       	mov	r24, r28
    440e:	0e 94 48 22 	call	0x4490	; 0x4490 <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    4412:	6c 2f       	mov	r22, r28
    4414:	03 c0       	rjmp	.+6      	; 0x441c <bootmagic+0x256>
    } else {
        default_layer = eeconfig_read_default_layer();
    4416:	0e 94 44 22 	call	0x4488	; 0x4488 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    441a:	68 2f       	mov	r22, r24
    441c:	70 e0       	ldi	r23, 0x00	; 0
    441e:	80 e0       	ldi	r24, 0x00	; 0
    4420:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    4422:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    4424:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <default_layer_set>
    }
}
    4428:	cf 91       	pop	r28
    442a:	08 95       	ret

0000442c <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    442c:	6d ee       	ldi	r22, 0xED	; 237
    442e:	7e ef       	ldi	r23, 0xFE	; 254
    4430:	80 e0       	ldi	r24, 0x00	; 0
    4432:	90 e0       	ldi	r25, 0x00	; 0
    4434:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4438:	60 e0       	ldi	r22, 0x00	; 0
    443a:	82 e0       	ldi	r24, 0x02	; 2
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    4442:	60 e0       	ldi	r22, 0x00	; 0
    4444:	83 e0       	ldi	r24, 0x03	; 3
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    444c:	60 e0       	ldi	r22, 0x00	; 0
    444e:	84 e0       	ldi	r24, 0x04	; 4
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    4456:	60 e0       	ldi	r22, 0x00	; 0
    4458:	85 e0       	ldi	r24, 0x05	; 5
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	0c 94 ff 2c 	jmp	0x59fe	; 0x59fe <__eewr_byte_m32u4>

00004460 <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    4460:	80 e0       	ldi	r24, 0x00	; 0
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <__eerd_word_m32u4>
    4468:	21 e0       	ldi	r18, 0x01	; 1
    446a:	8d 3e       	cpi	r24, 0xED	; 237
    446c:	9e 4f       	sbci	r25, 0xFE	; 254
    446e:	09 f0       	breq	.+2      	; 0x4472 <eeconfig_is_enabled+0x12>
    4470:	20 e0       	ldi	r18, 0x00	; 0
}
    4472:	82 2f       	mov	r24, r18
    4474:	08 95       	ret

00004476 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4476:	82 e0       	ldi	r24, 0x02	; 2
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	0c 94 f1 2c 	jmp	0x59e2	; 0x59e2 <__eerd_byte_m32u4>

0000447e <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    447e:	68 2f       	mov	r22, r24
    4480:	82 e0       	ldi	r24, 0x02	; 2
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	0c 94 ff 2c 	jmp	0x59fe	; 0x59fe <__eewr_byte_m32u4>

00004488 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    4488:	83 e0       	ldi	r24, 0x03	; 3
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	0c 94 f1 2c 	jmp	0x59e2	; 0x59e2 <__eerd_byte_m32u4>

00004490 <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    4490:	68 2f       	mov	r22, r24
    4492:	83 e0       	ldi	r24, 0x03	; 3
    4494:	90 e0       	ldi	r25, 0x00	; 0
    4496:	0c 94 ff 2c 	jmp	0x59fe	; 0x59fe <__eewr_byte_m32u4>

0000449a <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    449a:	84 e0       	ldi	r24, 0x04	; 4
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	0c 94 f1 2c 	jmp	0x59e2	; 0x59e2 <__eerd_byte_m32u4>

000044a2 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    44a2:	68 2f       	mov	r22, r24
    44a4:	84 e0       	ldi	r24, 0x04	; 4
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	0c 94 ff 2c 	jmp	0x59fe	; 0x59fe <__eewr_byte_m32u4>

000044ac <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    44ac:	80 91 cd 01 	lds	r24, 0x01CD
    44b0:	80 ff       	sbrs	r24, 0
    44b2:	0b c0       	rjmp	.+22     	; 0x44ca <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    44b4:	60 91 12 01 	lds	r22, 0x0112
    44b8:	85 e0       	ldi	r24, 0x05	; 5
    44ba:	68 9f       	mul	r22, r24
    44bc:	b0 01       	movw	r22, r0
    44be:	11 24       	eor	r1, r1
    44c0:	75 95       	asr	r23
    44c2:	67 95       	ror	r22
    44c4:	75 95       	asr	r23
    44c6:	67 95       	ror	r22
    44c8:	2a c0       	rjmp	.+84     	; 0x451e <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    44ca:	81 ff       	sbrs	r24, 1
    44cc:	09 c0       	rjmp	.+18     	; 0x44e0 <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    44ce:	60 91 12 01 	lds	r22, 0x0112
    44d2:	85 e0       	ldi	r24, 0x05	; 5
    44d4:	68 9f       	mul	r22, r24
    44d6:	b0 01       	movw	r22, r0
    44d8:	11 24       	eor	r1, r1
    44da:	75 95       	asr	r23
    44dc:	67 95       	ror	r22
    44de:	1f c0       	rjmp	.+62     	; 0x451e <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    44e0:	82 ff       	sbrs	r24, 2
    44e2:	07 c0       	rjmp	.+14     	; 0x44f2 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    44e4:	60 91 12 01 	lds	r22, 0x0112
    44e8:	85 e0       	ldi	r24, 0x05	; 5
    44ea:	68 9f       	mul	r22, r24
    44ec:	b0 01       	movw	r22, r0
    44ee:	11 24       	eor	r1, r1
    44f0:	16 c0       	rjmp	.+44     	; 0x451e <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    44f2:	40 91 ce 01 	lds	r20, 0x01CE
    44f6:	44 23       	and	r20, r20
    44f8:	c9 f0       	breq	.+50     	; 0x452c <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    44fa:	60 91 11 01 	lds	r22, 0x0111
    44fe:	46 17       	cp	r20, r22
    4500:	88 f7       	brcc	.-30     	; 0x44e4 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    4502:	20 91 12 01 	lds	r18, 0x0112
    4506:	85 e0       	ldi	r24, 0x05	; 5
    4508:	28 9f       	mul	r18, r24
    450a:	90 01       	movw	r18, r0
    450c:	11 24       	eor	r1, r1
    450e:	42 9f       	mul	r20, r18
    4510:	c0 01       	movw	r24, r0
    4512:	43 9f       	mul	r20, r19
    4514:	90 0d       	add	r25, r0
    4516:	11 24       	eor	r1, r1
    4518:	70 e0       	ldi	r23, 0x00	; 0
    451a:	0e 94 c3 2c 	call	0x5986	; 0x5986 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    451e:	60 38       	cpi	r22, 0x80	; 128
    4520:	71 05       	cpc	r23, r1
    4522:	40 f4       	brcc	.+16     	; 0x4534 <move_unit+0x88>
    4524:	61 15       	cp	r22, r1
    4526:	71 05       	cpc	r23, r1
    4528:	39 f0       	breq	.+14     	; 0x4538 <move_unit+0x8c>
    452a:	02 c0       	rjmp	.+4      	; 0x4530 <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    452c:	65 e0       	ldi	r22, 0x05	; 5
    452e:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4530:	86 2f       	mov	r24, r22
    4532:	08 95       	ret
    4534:	8f e7       	ldi	r24, 0x7F	; 127
    4536:	08 95       	ret
    4538:	81 e0       	ldi	r24, 0x01	; 1
}
    453a:	08 95       	ret

0000453c <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    453c:	80 91 cd 01 	lds	r24, 0x01CD
    4540:	80 ff       	sbrs	r24, 0
    4542:	08 c0       	rjmp	.+16     	; 0x4554 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4544:	60 91 10 01 	lds	r22, 0x0110
    4548:	70 e0       	ldi	r23, 0x00	; 0
    454a:	75 95       	asr	r23
    454c:	67 95       	ror	r22
    454e:	75 95       	asr	r23
    4550:	67 95       	ror	r22
    4552:	21 c0       	rjmp	.+66     	; 0x4596 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    4554:	81 ff       	sbrs	r24, 1
    4556:	06 c0       	rjmp	.+12     	; 0x4564 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4558:	60 91 10 01 	lds	r22, 0x0110
    455c:	70 e0       	ldi	r23, 0x00	; 0
    455e:	75 95       	asr	r23
    4560:	67 95       	ror	r22
    4562:	19 c0       	rjmp	.+50     	; 0x4596 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    4564:	82 ff       	sbrs	r24, 2
    4566:	04 c0       	rjmp	.+8      	; 0x4570 <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4568:	60 91 10 01 	lds	r22, 0x0110
    456c:	70 e0       	ldi	r23, 0x00	; 0
    456e:	10 c0       	rjmp	.+32     	; 0x4590 <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    4570:	80 91 ce 01 	lds	r24, 0x01CE
    4574:	88 23       	and	r24, r24
    4576:	c1 f0       	breq	.+48     	; 0x45a8 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4578:	60 91 0f 01 	lds	r22, 0x010F
    457c:	86 17       	cp	r24, r22
    457e:	a0 f7       	brcc	.-24     	; 0x4568 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    4580:	90 91 10 01 	lds	r25, 0x0110
    4584:	98 9f       	mul	r25, r24
    4586:	c0 01       	movw	r24, r0
    4588:	11 24       	eor	r1, r1
    458a:	70 e0       	ldi	r23, 0x00	; 0
    458c:	0e 94 c3 2c 	call	0x5986	; 0x5986 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    4590:	60 38       	cpi	r22, 0x80	; 128
    4592:	71 05       	cpc	r23, r1
    4594:	28 f4       	brcc	.+10     	; 0x45a0 <wheel_unit+0x64>
    4596:	61 15       	cp	r22, r1
    4598:	71 05       	cpc	r23, r1
    459a:	21 f0       	breq	.+8      	; 0x45a4 <wheel_unit+0x68>
    459c:	86 2f       	mov	r24, r22
    459e:	08 95       	ret
    45a0:	8f e7       	ldi	r24, 0x7F	; 127
    45a2:	08 95       	ret
    45a4:	81 e0       	ldi	r24, 0x01	; 1
    45a6:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    45a8:	61 e0       	ldi	r22, 0x01	; 1
    45aa:	70 e0       	ldi	r23, 0x00	; 0
    45ac:	f4 cf       	rjmp	.-24     	; 0x4596 <wheel_unit+0x5a>

000045ae <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    45ae:	80 3f       	cpi	r24, 0xF0	; 240
    45b0:	21 f4       	brne	.+8      	; 0x45ba <mousekey_on+0xc>
    45b2:	0e 94 56 22 	call	0x44ac	; 0x44ac <move_unit>
    45b6:	81 95       	neg	r24
    45b8:	04 c0       	rjmp	.+8      	; 0x45c2 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    45ba:	81 3f       	cpi	r24, 0xF1	; 241
    45bc:	29 f4       	brne	.+10     	; 0x45c8 <mousekey_on+0x1a>
    45be:	0e 94 56 22 	call	0x44ac	; 0x44ac <move_unit>
    45c2:	80 93 d1 01 	sts	0x01D1, r24
    45c6:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    45c8:	82 3f       	cpi	r24, 0xF2	; 242
    45ca:	21 f4       	brne	.+8      	; 0x45d4 <mousekey_on+0x26>
    45cc:	0e 94 56 22 	call	0x44ac	; 0x44ac <move_unit>
    45d0:	81 95       	neg	r24
    45d2:	04 c0       	rjmp	.+8      	; 0x45dc <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    45d4:	83 3f       	cpi	r24, 0xF3	; 243
    45d6:	29 f4       	brne	.+10     	; 0x45e2 <mousekey_on+0x34>
    45d8:	0e 94 56 22 	call	0x44ac	; 0x44ac <move_unit>
    45dc:	80 93 d0 01 	sts	0x01D0, r24
    45e0:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    45e2:	89 3f       	cpi	r24, 0xF9	; 249
    45e4:	19 f4       	brne	.+6      	; 0x45ec <mousekey_on+0x3e>
    45e6:	0e 94 9e 22 	call	0x453c	; 0x453c <wheel_unit>
    45ea:	05 c0       	rjmp	.+10     	; 0x45f6 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    45ec:	8a 3f       	cpi	r24, 0xFA	; 250
    45ee:	31 f4       	brne	.+12     	; 0x45fc <mousekey_on+0x4e>
    45f0:	0e 94 9e 22 	call	0x453c	; 0x453c <wheel_unit>
    45f4:	81 95       	neg	r24
    45f6:	80 93 d2 01 	sts	0x01D2, r24
    45fa:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    45fc:	8b 3f       	cpi	r24, 0xFB	; 251
    45fe:	21 f4       	brne	.+8      	; 0x4608 <mousekey_on+0x5a>
    4600:	0e 94 9e 22 	call	0x453c	; 0x453c <wheel_unit>
    4604:	81 95       	neg	r24
    4606:	04 c0       	rjmp	.+8      	; 0x4610 <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    4608:	8c 3f       	cpi	r24, 0xFC	; 252
    460a:	29 f4       	brne	.+10     	; 0x4616 <mousekey_on+0x68>
    460c:	0e 94 9e 22 	call	0x453c	; 0x453c <wheel_unit>
    4610:	80 93 d3 01 	sts	0x01D3, r24
    4614:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4616:	84 3f       	cpi	r24, 0xF4	; 244
    4618:	21 f4       	brne	.+8      	; 0x4622 <mousekey_on+0x74>
    461a:	80 91 cf 01 	lds	r24, 0x01CF
    461e:	81 60       	ori	r24, 0x01	; 1
    4620:	17 c0       	rjmp	.+46     	; 0x4650 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    4622:	85 3f       	cpi	r24, 0xF5	; 245
    4624:	21 f4       	brne	.+8      	; 0x462e <mousekey_on+0x80>
    4626:	80 91 cf 01 	lds	r24, 0x01CF
    462a:	82 60       	ori	r24, 0x02	; 2
    462c:	11 c0       	rjmp	.+34     	; 0x4650 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    462e:	86 3f       	cpi	r24, 0xF6	; 246
    4630:	21 f4       	brne	.+8      	; 0x463a <mousekey_on+0x8c>
    4632:	80 91 cf 01 	lds	r24, 0x01CF
    4636:	84 60       	ori	r24, 0x04	; 4
    4638:	0b c0       	rjmp	.+22     	; 0x4650 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    463a:	87 3f       	cpi	r24, 0xF7	; 247
    463c:	21 f4       	brne	.+8      	; 0x4646 <mousekey_on+0x98>
    463e:	80 91 cf 01 	lds	r24, 0x01CF
    4642:	88 60       	ori	r24, 0x08	; 8
    4644:	05 c0       	rjmp	.+10     	; 0x4650 <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4646:	88 3f       	cpi	r24, 0xF8	; 248
    4648:	31 f4       	brne	.+12     	; 0x4656 <mousekey_on+0xa8>
    464a:	80 91 cf 01 	lds	r24, 0x01CF
    464e:	80 61       	ori	r24, 0x10	; 16
    4650:	80 93 cf 01 	sts	0x01CF, r24
    4654:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4656:	8d 3f       	cpi	r24, 0xFD	; 253
    4658:	21 f4       	brne	.+8      	; 0x4662 <mousekey_on+0xb4>
    465a:	80 91 cd 01 	lds	r24, 0x01CD
    465e:	81 60       	ori	r24, 0x01	; 1
    4660:	0b c0       	rjmp	.+22     	; 0x4678 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4662:	8e 3f       	cpi	r24, 0xFE	; 254
    4664:	21 f4       	brne	.+8      	; 0x466e <mousekey_on+0xc0>
    4666:	80 91 cd 01 	lds	r24, 0x01CD
    466a:	82 60       	ori	r24, 0x02	; 2
    466c:	05 c0       	rjmp	.+10     	; 0x4678 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    466e:	8f 3f       	cpi	r24, 0xFF	; 255
    4670:	29 f4       	brne	.+10     	; 0x467c <mousekey_on+0xce>
    4672:	80 91 cd 01 	lds	r24, 0x01CD
    4676:	84 60       	ori	r24, 0x04	; 4
    4678:	80 93 cd 01 	sts	0x01CD, r24
    467c:	08 95       	ret

0000467e <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    467e:	80 3f       	cpi	r24, 0xF0	; 240
    4680:	39 f4       	brne	.+14     	; 0x4690 <mousekey_off+0x12>
    4682:	80 91 d1 01 	lds	r24, 0x01D1
    4686:	87 ff       	sbrs	r24, 7
    4688:	6c c0       	rjmp	.+216    	; 0x4762 <mousekey_off+0xe4>
    468a:	10 92 d1 01 	sts	0x01D1, r1
    468e:	69 c0       	rjmp	.+210    	; 0x4762 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    4690:	81 3f       	cpi	r24, 0xF1	; 241
    4692:	29 f4       	brne	.+10     	; 0x469e <mousekey_off+0x20>
    4694:	80 91 d1 01 	lds	r24, 0x01D1
    4698:	18 16       	cp	r1, r24
    469a:	bc f3       	brlt	.-18     	; 0x468a <mousekey_off+0xc>
    469c:	62 c0       	rjmp	.+196    	; 0x4762 <mousekey_off+0xe4>
    469e:	90 91 d0 01 	lds	r25, 0x01D0
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    46a2:	82 3f       	cpi	r24, 0xF2	; 242
    46a4:	29 f4       	brne	.+10     	; 0x46b0 <mousekey_off+0x32>
    46a6:	97 ff       	sbrs	r25, 7
    46a8:	5c c0       	rjmp	.+184    	; 0x4762 <mousekey_off+0xe4>
    46aa:	10 92 d0 01 	sts	0x01D0, r1
    46ae:	59 c0       	rjmp	.+178    	; 0x4762 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    46b0:	83 3f       	cpi	r24, 0xF3	; 243
    46b2:	19 f4       	brne	.+6      	; 0x46ba <mousekey_off+0x3c>
    46b4:	19 16       	cp	r1, r25
    46b6:	cc f3       	brlt	.-14     	; 0x46aa <mousekey_off+0x2c>
    46b8:	54 c0       	rjmp	.+168    	; 0x4762 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    46ba:	89 3f       	cpi	r24, 0xF9	; 249
    46bc:	41 f4       	brne	.+16     	; 0x46ce <mousekey_off+0x50>
    46be:	80 91 d2 01 	lds	r24, 0x01D2
    46c2:	18 16       	cp	r1, r24
    46c4:	0c f0       	brlt	.+2      	; 0x46c8 <mousekey_off+0x4a>
    46c6:	4d c0       	rjmp	.+154    	; 0x4762 <mousekey_off+0xe4>
    46c8:	10 92 d2 01 	sts	0x01D2, r1
    46cc:	4a c0       	rjmp	.+148    	; 0x4762 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    46ce:	8a 3f       	cpi	r24, 0xFA	; 250
    46d0:	29 f4       	brne	.+10     	; 0x46dc <mousekey_off+0x5e>
    46d2:	80 91 d2 01 	lds	r24, 0x01D2
    46d6:	87 ff       	sbrs	r24, 7
    46d8:	44 c0       	rjmp	.+136    	; 0x4762 <mousekey_off+0xe4>
    46da:	f6 cf       	rjmp	.-20     	; 0x46c8 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    46dc:	8b 3f       	cpi	r24, 0xFB	; 251
    46de:	39 f4       	brne	.+14     	; 0x46ee <mousekey_off+0x70>
    46e0:	80 91 d3 01 	lds	r24, 0x01D3
    46e4:	87 ff       	sbrs	r24, 7
    46e6:	3d c0       	rjmp	.+122    	; 0x4762 <mousekey_off+0xe4>
    46e8:	10 92 d3 01 	sts	0x01D3, r1
    46ec:	3a c0       	rjmp	.+116    	; 0x4762 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    46ee:	8c 3f       	cpi	r24, 0xFC	; 252
    46f0:	29 f4       	brne	.+10     	; 0x46fc <mousekey_off+0x7e>
    46f2:	80 91 d3 01 	lds	r24, 0x01D3
    46f6:	18 16       	cp	r1, r24
    46f8:	bc f3       	brlt	.-18     	; 0x46e8 <mousekey_off+0x6a>
    46fa:	33 c0       	rjmp	.+102    	; 0x4762 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    46fc:	84 3f       	cpi	r24, 0xF4	; 244
    46fe:	21 f4       	brne	.+8      	; 0x4708 <mousekey_off+0x8a>
    4700:	80 91 cf 01 	lds	r24, 0x01CF
    4704:	8e 7f       	andi	r24, 0xFE	; 254
    4706:	17 c0       	rjmp	.+46     	; 0x4736 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4708:	85 3f       	cpi	r24, 0xF5	; 245
    470a:	21 f4       	brne	.+8      	; 0x4714 <mousekey_off+0x96>
    470c:	80 91 cf 01 	lds	r24, 0x01CF
    4710:	8d 7f       	andi	r24, 0xFD	; 253
    4712:	11 c0       	rjmp	.+34     	; 0x4736 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4714:	86 3f       	cpi	r24, 0xF6	; 246
    4716:	21 f4       	brne	.+8      	; 0x4720 <mousekey_off+0xa2>
    4718:	80 91 cf 01 	lds	r24, 0x01CF
    471c:	8b 7f       	andi	r24, 0xFB	; 251
    471e:	0b c0       	rjmp	.+22     	; 0x4736 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    4720:	87 3f       	cpi	r24, 0xF7	; 247
    4722:	21 f4       	brne	.+8      	; 0x472c <mousekey_off+0xae>
    4724:	80 91 cf 01 	lds	r24, 0x01CF
    4728:	87 7f       	andi	r24, 0xF7	; 247
    472a:	05 c0       	rjmp	.+10     	; 0x4736 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    472c:	88 3f       	cpi	r24, 0xF8	; 248
    472e:	31 f4       	brne	.+12     	; 0x473c <mousekey_off+0xbe>
    4730:	80 91 cf 01 	lds	r24, 0x01CF
    4734:	8f 7e       	andi	r24, 0xEF	; 239
    4736:	80 93 cf 01 	sts	0x01CF, r24
    473a:	13 c0       	rjmp	.+38     	; 0x4762 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    473c:	8d 3f       	cpi	r24, 0xFD	; 253
    473e:	21 f4       	brne	.+8      	; 0x4748 <mousekey_off+0xca>
    4740:	80 91 cd 01 	lds	r24, 0x01CD
    4744:	8e 7f       	andi	r24, 0xFE	; 254
    4746:	0b c0       	rjmp	.+22     	; 0x475e <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4748:	8e 3f       	cpi	r24, 0xFE	; 254
    474a:	21 f4       	brne	.+8      	; 0x4754 <mousekey_off+0xd6>
    474c:	80 91 cd 01 	lds	r24, 0x01CD
    4750:	8d 7f       	andi	r24, 0xFD	; 253
    4752:	05 c0       	rjmp	.+10     	; 0x475e <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4754:	8f 3f       	cpi	r24, 0xFF	; 255
    4756:	29 f4       	brne	.+10     	; 0x4762 <mousekey_off+0xe4>
    4758:	80 91 cd 01 	lds	r24, 0x01CD
    475c:	8b 7f       	andi	r24, 0xFB	; 251
    475e:	80 93 cd 01 	sts	0x01CD, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4762:	80 91 d0 01 	lds	r24, 0x01D0
    4766:	81 11       	cpse	r24, r1
    4768:	0e c0       	rjmp	.+28     	; 0x4786 <mousekey_off+0x108>
    476a:	80 91 d1 01 	lds	r24, 0x01D1
    476e:	81 11       	cpse	r24, r1
    4770:	0a c0       	rjmp	.+20     	; 0x4786 <mousekey_off+0x108>
    4772:	80 91 d2 01 	lds	r24, 0x01D2
    4776:	81 11       	cpse	r24, r1
    4778:	06 c0       	rjmp	.+12     	; 0x4786 <mousekey_off+0x108>
    477a:	80 91 d3 01 	lds	r24, 0x01D3
    477e:	81 11       	cpse	r24, r1
    4780:	02 c0       	rjmp	.+4      	; 0x4786 <mousekey_off+0x108>
        mousekey_repeat = 0;
    4782:	10 92 ce 01 	sts	0x01CE, r1
    4786:	08 95       	ret

00004788 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4788:	80 91 c3 01 	lds	r24, 0x01C3
    478c:	83 ff       	sbrs	r24, 3
    478e:	7e c0       	rjmp	.+252    	; 0x488c <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    4790:	86 eb       	ldi	r24, 0xB6	; 182
    4792:	94 e0       	ldi	r25, 0x04	; 4
    4794:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    phex(mouse_report.buttons); print("|");
    4798:	80 91 cf 01 	lds	r24, 0x01CF
    479c:	1f 92       	push	r1
    479e:	8f 93       	push	r24
    47a0:	81 eb       	ldi	r24, 0xB1	; 177
    47a2:	94 e0       	ldi	r25, 0x04	; 4
    47a4:	9f 93       	push	r25
    47a6:	8f 93       	push	r24
    47a8:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    47ac:	8f ea       	ldi	r24, 0xAF	; 175
    47ae:	94 e0       	ldi	r25, 0x04	; 4
    47b0:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print_decs(mouse_report.x); print(" ");
    47b4:	20 91 d0 01 	lds	r18, 0x01D0
    47b8:	82 2f       	mov	r24, r18
    47ba:	99 27       	eor	r25, r25
    47bc:	87 fd       	sbrc	r24, 7
    47be:	90 95       	com	r25
    47c0:	9f 93       	push	r25
    47c2:	2f 93       	push	r18
    47c4:	8c ea       	ldi	r24, 0xAC	; 172
    47c6:	94 e0       	ldi	r25, 0x04	; 4
    47c8:	9f 93       	push	r25
    47ca:	8f 93       	push	r24
    47cc:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    47d0:	8a ea       	ldi	r24, 0xAA	; 170
    47d2:	94 e0       	ldi	r25, 0x04	; 4
    47d4:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print_decs(mouse_report.y); print(" ");
    47d8:	20 91 d1 01 	lds	r18, 0x01D1
    47dc:	82 2f       	mov	r24, r18
    47de:	99 27       	eor	r25, r25
    47e0:	87 fd       	sbrc	r24, 7
    47e2:	90 95       	com	r25
    47e4:	9f 93       	push	r25
    47e6:	2f 93       	push	r18
    47e8:	87 ea       	ldi	r24, 0xA7	; 167
    47ea:	94 e0       	ldi	r25, 0x04	; 4
    47ec:	9f 93       	push	r25
    47ee:	8f 93       	push	r24
    47f0:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    47f4:	85 ea       	ldi	r24, 0xA5	; 165
    47f6:	94 e0       	ldi	r25, 0x04	; 4
    47f8:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print_decs(mouse_report.v); print(" ");
    47fc:	20 91 d2 01 	lds	r18, 0x01D2
    4800:	82 2f       	mov	r24, r18
    4802:	99 27       	eor	r25, r25
    4804:	87 fd       	sbrc	r24, 7
    4806:	90 95       	com	r25
    4808:	9f 93       	push	r25
    480a:	2f 93       	push	r18
    480c:	82 ea       	ldi	r24, 0xA2	; 162
    480e:	94 e0       	ldi	r25, 0x04	; 4
    4810:	9f 93       	push	r25
    4812:	8f 93       	push	r24
    4814:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4818:	80 ea       	ldi	r24, 0xA0	; 160
    481a:	94 e0       	ldi	r25, 0x04	; 4
    481c:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print_decs(mouse_report.h); print("](");
    4820:	20 91 d3 01 	lds	r18, 0x01D3
    4824:	82 2f       	mov	r24, r18
    4826:	99 27       	eor	r25, r25
    4828:	87 fd       	sbrc	r24, 7
    482a:	90 95       	com	r25
    482c:	9f 93       	push	r25
    482e:	2f 93       	push	r18
    4830:	8d e9       	ldi	r24, 0x9D	; 157
    4832:	94 e0       	ldi	r25, 0x04	; 4
    4834:	9f 93       	push	r25
    4836:	8f 93       	push	r24
    4838:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    483c:	8a e9       	ldi	r24, 0x9A	; 154
    483e:	94 e0       	ldi	r25, 0x04	; 4
    4840:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print_dec(mousekey_repeat); print("/");
    4844:	80 91 ce 01 	lds	r24, 0x01CE
    4848:	1f 92       	push	r1
    484a:	8f 93       	push	r24
    484c:	87 e9       	ldi	r24, 0x97	; 151
    484e:	94 e0       	ldi	r25, 0x04	; 4
    4850:	9f 93       	push	r25
    4852:	8f 93       	push	r24
    4854:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4858:	85 e9       	ldi	r24, 0x95	; 149
    485a:	94 e0       	ldi	r25, 0x04	; 4
    485c:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print_dec(mousekey_accel); print(")\n");
    4860:	80 91 cd 01 	lds	r24, 0x01CD
    4864:	1f 92       	push	r1
    4866:	8f 93       	push	r24
    4868:	82 e9       	ldi	r24, 0x92	; 146
    486a:	94 e0       	ldi	r25, 0x04	; 4
    486c:	9f 93       	push	r25
    486e:	8f 93       	push	r24
    4870:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4874:	8f e8       	ldi	r24, 0x8F	; 143
    4876:	94 e0       	ldi	r25, 0x04	; 4
    4878:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    487c:	8d b7       	in	r24, 0x3d	; 61
    487e:	9e b7       	in	r25, 0x3e	; 62
    4880:	4c 96       	adiw	r24, 0x1c	; 28
    4882:	0f b6       	in	r0, 0x3f	; 63
    4884:	f8 94       	cli
    4886:	9e bf       	out	0x3e, r25	; 62
    4888:	0f be       	out	0x3f, r0	; 63
    488a:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    488c:	8f ec       	ldi	r24, 0xCF	; 207
    488e:	91 e0       	ldi	r25, 0x01	; 1
    4890:	0e 94 2d 12 	call	0x245a	; 0x245a <host_mouse_send>
    last_timer = timer_read();
    4894:	0e 94 1f 20 	call	0x403e	; 0x403e <timer_read>
    4898:	90 93 cc 01 	sts	0x01CC, r25
    489c:	80 93 cb 01 	sts	0x01CB, r24
    48a0:	08 95       	ret

000048a2 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    48a2:	1f 93       	push	r17
    48a4:	cf 93       	push	r28
    48a6:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    48a8:	80 91 cb 01 	lds	r24, 0x01CB
    48ac:	90 91 cc 01 	lds	r25, 0x01CC
    48b0:	0e 94 2b 20 	call	0x4056	; 0x4056 <timer_elapsed>
    48b4:	40 91 ce 01 	lds	r20, 0x01CE
    48b8:	44 23       	and	r20, r20
    48ba:	21 f0       	breq	.+8      	; 0x48c4 <mousekey_task+0x22>
    48bc:	20 91 13 01 	lds	r18, 0x0113
    48c0:	30 e0       	ldi	r19, 0x00	; 0
    48c2:	06 c0       	rjmp	.+12     	; 0x48d0 <mousekey_task+0x2e>
    48c4:	20 91 14 01 	lds	r18, 0x0114
    48c8:	5a e0       	ldi	r21, 0x0A	; 10
    48ca:	25 9f       	mul	r18, r21
    48cc:	90 01       	movw	r18, r0
    48ce:	11 24       	eor	r1, r1
    48d0:	82 17       	cp	r24, r18
    48d2:	93 07       	cpc	r25, r19
    48d4:	08 f4       	brcc	.+2      	; 0x48d8 <mousekey_task+0x36>
    48d6:	82 c0       	rjmp	.+260    	; 0x49dc <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    48d8:	80 91 d0 01 	lds	r24, 0x01D0
    48dc:	10 91 d1 01 	lds	r17, 0x01D1
    48e0:	d0 91 d2 01 	lds	r29, 0x01D2
    48e4:	c0 91 d3 01 	lds	r28, 0x01D3
    48e8:	81 11       	cpse	r24, r1
    48ea:	07 c0       	rjmp	.+14     	; 0x48fa <mousekey_task+0x58>
    48ec:	11 11       	cpse	r17, r1
    48ee:	05 c0       	rjmp	.+10     	; 0x48fa <mousekey_task+0x58>
    48f0:	d1 11       	cpse	r29, r1
    48f2:	03 c0       	rjmp	.+6      	; 0x48fa <mousekey_task+0x58>
    48f4:	cc 23       	and	r28, r28
    48f6:	09 f4       	brne	.+2      	; 0x48fa <mousekey_task+0x58>
    48f8:	71 c0       	rjmp	.+226    	; 0x49dc <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    48fa:	4f 3f       	cpi	r20, 0xFF	; 255
    48fc:	19 f0       	breq	.+6      	; 0x4904 <mousekey_task+0x62>
        mousekey_repeat++;
    48fe:	4f 5f       	subi	r20, 0xFF	; 255
    4900:	40 93 ce 01 	sts	0x01CE, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4904:	18 16       	cp	r1, r24
    4906:	24 f4       	brge	.+8      	; 0x4910 <mousekey_task+0x6e>
    4908:	0e 94 56 22 	call	0x44ac	; 0x44ac <move_unit>
    490c:	80 93 d0 01 	sts	0x01D0, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    4910:	80 91 d0 01 	lds	r24, 0x01D0
    4914:	87 ff       	sbrs	r24, 7
    4916:	05 c0       	rjmp	.+10     	; 0x4922 <mousekey_task+0x80>
    4918:	0e 94 56 22 	call	0x44ac	; 0x44ac <move_unit>
    491c:	81 95       	neg	r24
    491e:	80 93 d0 01 	sts	0x01D0, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4922:	11 16       	cp	r1, r17
    4924:	24 f4       	brge	.+8      	; 0x492e <mousekey_task+0x8c>
    4926:	0e 94 56 22 	call	0x44ac	; 0x44ac <move_unit>
    492a:	80 93 d1 01 	sts	0x01D1, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    492e:	80 91 d1 01 	lds	r24, 0x01D1
    4932:	87 ff       	sbrs	r24, 7
    4934:	05 c0       	rjmp	.+10     	; 0x4940 <mousekey_task+0x9e>
    4936:	0e 94 56 22 	call	0x44ac	; 0x44ac <move_unit>
    493a:	81 95       	neg	r24
    493c:	80 93 d1 01 	sts	0x01D1, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    4940:	60 91 d0 01 	lds	r22, 0x01D0
    4944:	66 23       	and	r22, r22
    4946:	39 f1       	breq	.+78     	; 0x4996 <mousekey_task+0xf4>
    4948:	10 91 d1 01 	lds	r17, 0x01D1
    494c:	11 23       	and	r17, r17
    494e:	19 f1       	breq	.+70     	; 0x4996 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    4950:	77 27       	eor	r23, r23
    4952:	67 fd       	sbrc	r22, 7
    4954:	70 95       	com	r23
    4956:	87 2f       	mov	r24, r23
    4958:	97 2f       	mov	r25, r23
    495a:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <__floatsisf>
    495e:	23 e3       	ldi	r18, 0x33	; 51
    4960:	33 e3       	ldi	r19, 0x33	; 51
    4962:	43 e3       	ldi	r20, 0x33	; 51
    4964:	5f e3       	ldi	r21, 0x3F	; 63
    4966:	0e 94 38 2c 	call	0x5870	; 0x5870 <__mulsf3>
    496a:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__fixsfsi>
    496e:	60 93 d0 01 	sts	0x01D0, r22
        mouse_report.y *= 0.7;
    4972:	61 2f       	mov	r22, r17
    4974:	77 27       	eor	r23, r23
    4976:	67 fd       	sbrc	r22, 7
    4978:	70 95       	com	r23
    497a:	87 2f       	mov	r24, r23
    497c:	97 2f       	mov	r25, r23
    497e:	0e 94 d4 2b 	call	0x57a8	; 0x57a8 <__floatsisf>
    4982:	23 e3       	ldi	r18, 0x33	; 51
    4984:	33 e3       	ldi	r19, 0x33	; 51
    4986:	43 e3       	ldi	r20, 0x33	; 51
    4988:	5f e3       	ldi	r21, 0x3F	; 63
    498a:	0e 94 38 2c 	call	0x5870	; 0x5870 <__mulsf3>
    498e:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__fixsfsi>
    4992:	60 93 d1 01 	sts	0x01D1, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4996:	1d 16       	cp	r1, r29
    4998:	24 f4       	brge	.+8      	; 0x49a2 <mousekey_task+0x100>
    499a:	0e 94 9e 22 	call	0x453c	; 0x453c <wheel_unit>
    499e:	80 93 d2 01 	sts	0x01D2, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    49a2:	80 91 d2 01 	lds	r24, 0x01D2
    49a6:	87 ff       	sbrs	r24, 7
    49a8:	05 c0       	rjmp	.+10     	; 0x49b4 <mousekey_task+0x112>
    49aa:	0e 94 9e 22 	call	0x453c	; 0x453c <wheel_unit>
    49ae:	81 95       	neg	r24
    49b0:	80 93 d2 01 	sts	0x01D2, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    49b4:	1c 16       	cp	r1, r28
    49b6:	24 f4       	brge	.+8      	; 0x49c0 <mousekey_task+0x11e>
    49b8:	0e 94 9e 22 	call	0x453c	; 0x453c <wheel_unit>
    49bc:	80 93 d3 01 	sts	0x01D3, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    49c0:	80 91 d3 01 	lds	r24, 0x01D3
    49c4:	87 ff       	sbrs	r24, 7
    49c6:	05 c0       	rjmp	.+10     	; 0x49d2 <mousekey_task+0x130>
    49c8:	0e 94 9e 22 	call	0x453c	; 0x453c <wheel_unit>
    49cc:	81 95       	neg	r24
    49ce:	80 93 d3 01 	sts	0x01D3, r24

    mousekey_send();
}
    49d2:	df 91       	pop	r29
    49d4:	cf 91       	pop	r28
    49d6:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    49d8:	0c 94 c4 23 	jmp	0x4788	; 0x4788 <mousekey_send>
}
    49dc:	df 91       	pop	r29
    49de:	cf 91       	pop	r28
    49e0:	1f 91       	pop	r17
    49e2:	08 95       	ret

000049e4 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    49e4:	ef ec       	ldi	r30, 0xCF	; 207
    49e6:	f1 e0       	ldi	r31, 0x01	; 1
    49e8:	85 e0       	ldi	r24, 0x05	; 5
    49ea:	df 01       	movw	r26, r30
    49ec:	1d 92       	st	X+, r1
    49ee:	8a 95       	dec	r24
    49f0:	e9 f7       	brne	.-6      	; 0x49ec <mousekey_clear+0x8>
    mousekey_repeat = 0;
    49f2:	10 92 ce 01 	sts	0x01CE, r1
    mousekey_accel = 0;
    49f6:	10 92 cd 01 	sts	0x01CD, r1
    49fa:	08 95       	ret

000049fc <command_console_help>:
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\n----- Console Help -----\n");
    49fc:	85 e8       	ldi	r24, 0x85	; 133
    49fe:	99 e0       	ldi	r25, 0x09	; 9
    4a00:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("ESC/q:	quit\n");
    4a04:	88 e7       	ldi	r24, 0x78	; 120
    4a06:	99 e0       	ldi	r25, 0x09	; 9
    4a08:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
#ifdef MOUSEKEY_ENABLE
    print("m:	mousekey\n");
    4a0c:	8b e6       	ldi	r24, 0x6B	; 107
    4a0e:	99 e0       	ldi	r25, 0x09	; 9
    4a10:	0c 94 11 08 	jmp	0x1022	; 0x1022 <xputs>

00004a14 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\n----- Mousekey Parameters Help -----\n");
    4a14:	88 ee       	ldi	r24, 0xE8	; 232
    4a16:	98 e0       	ldi	r25, 0x08	; 8
    4a18:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("ESC/q:	quit\n");
    4a1c:	8b ed       	ldi	r24, 0xDB	; 219
    4a1e:	98 e0       	ldi	r25, 0x08	; 8
    4a20:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("1:	select mk_delay(*10ms)\n");
    4a24:	80 ec       	ldi	r24, 0xC0	; 192
    4a26:	98 e0       	ldi	r25, 0x08	; 8
    4a28:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("2:	select mk_interval(ms)\n");
    4a2c:	85 ea       	ldi	r24, 0xA5	; 165
    4a2e:	98 e0       	ldi	r25, 0x08	; 8
    4a30:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("3:	select mk_max_speed\n");
    4a34:	8d e8       	ldi	r24, 0x8D	; 141
    4a36:	98 e0       	ldi	r25, 0x08	; 8
    4a38:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("4:	select mk_time_to_max\n");
    4a3c:	83 e7       	ldi	r24, 0x73	; 115
    4a3e:	98 e0       	ldi	r25, 0x08	; 8
    4a40:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("5:	select mk_wheel_max_speed\n");
    4a44:	85 e5       	ldi	r24, 0x55	; 85
    4a46:	98 e0       	ldi	r25, 0x08	; 8
    4a48:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("6:	select mk_wheel_time_to_max\n");
    4a4c:	85 e3       	ldi	r24, 0x35	; 53
    4a4e:	98 e0       	ldi	r25, 0x08	; 8
    4a50:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("p:	print parameters\n");
    4a54:	80 e2       	ldi	r24, 0x20	; 32
    4a56:	98 e0       	ldi	r25, 0x08	; 8
    4a58:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("d:	set default values\n");
    4a5c:	89 e0       	ldi	r24, 0x09	; 9
    4a5e:	98 e0       	ldi	r25, 0x08	; 8
    4a60:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("up:	increase parameters(+1)\n");
    4a64:	8c ee       	ldi	r24, 0xEC	; 236
    4a66:	97 e0       	ldi	r25, 0x07	; 7
    4a68:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("down:	decrease parameters(-1)\n");
    4a6c:	8d ec       	ldi	r24, 0xCD	; 205
    4a6e:	97 e0       	ldi	r25, 0x07	; 7
    4a70:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("pgup:	increase parameters(+10)\n");
    4a74:	8d ea       	ldi	r24, 0xAD	; 173
    4a76:	97 e0       	ldi	r25, 0x07	; 7
    4a78:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("pgdown:	decrease parameters(-10)\n");
    4a7c:	8b e8       	ldi	r24, 0x8B	; 139
    4a7e:	97 e0       	ldi	r25, 0x07	; 7
    4a80:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("\nspeed = delta * max_speed * (repeat / time_to_max)\n");
    4a84:	86 e5       	ldi	r24, 0x56	; 86
    4a86:	97 e0       	ldi	r25, 0x07	; 7
    4a88:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("where delta: cursor="); pdec(MOUSEKEY_MOVE_DELTA);
    4a8c:	81 e4       	ldi	r24, 0x41	; 65
    4a8e:	97 e0       	ldi	r25, 0x07	; 7
    4a90:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4a94:	1f 92       	push	r1
    4a96:	85 e0       	ldi	r24, 0x05	; 5
    4a98:	8f 93       	push	r24
    4a9a:	8e e3       	ldi	r24, 0x3E	; 62
    4a9c:	97 e0       	ldi	r25, 0x07	; 7
    4a9e:	9f 93       	push	r25
    4aa0:	8f 93       	push	r24
    4aa2:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    print(", wheel="); pdec(MOUSEKEY_WHEEL_DELTA); print("\n");
    4aa6:	85 e3       	ldi	r24, 0x35	; 53
    4aa8:	97 e0       	ldi	r25, 0x07	; 7
    4aaa:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4aae:	1f 92       	push	r1
    4ab0:	81 e0       	ldi	r24, 0x01	; 1
    4ab2:	8f 93       	push	r24
    4ab4:	82 e3       	ldi	r24, 0x32	; 50
    4ab6:	97 e0       	ldi	r25, 0x07	; 7
    4ab8:	9f 93       	push	r25
    4aba:	8f 93       	push	r24
    4abc:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4ac0:	80 e3       	ldi	r24, 0x30	; 48
    4ac2:	97 e0       	ldi	r25, 0x07	; 7
    4ac4:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
    4ac8:	8d b7       	in	r24, 0x3d	; 61
    4aca:	9e b7       	in	r25, 0x3e	; 62
    4acc:	08 96       	adiw	r24, 0x08	; 8
    4ace:	0f b6       	in	r0, 0x3f	; 63
    4ad0:	f8 94       	cli
    4ad2:	9e bf       	out	0x3e, r25	; 62
    4ad4:	0f be       	out	0x3f, r0	; 63
    4ad6:	8d bf       	out	0x3d, r24	; 61
    4ad8:	83 e0       	ldi	r24, 0x03	; 3
    4ada:	97 e0       	ldi	r25, 0x07	; 7
    4adc:	0c 94 11 08 	jmp	0x1022	; 0x1022 <xputs>

00004ae0 <mousekey_param_inc>:
}

#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4ae0:	83 30       	cpi	r24, 0x03	; 3
    4ae2:	09 f4       	brne	.+2      	; 0x4ae6 <mousekey_param_inc+0x6>
    4ae4:	59 c0       	rjmp	.+178    	; 0x4b98 <mousekey_param_inc+0xb8>
    4ae6:	28 f4       	brcc	.+10     	; 0x4af2 <mousekey_param_inc+0x12>
    4ae8:	81 30       	cpi	r24, 0x01	; 1
    4aea:	61 f0       	breq	.+24     	; 0x4b04 <mousekey_param_inc+0x24>
    4aec:	82 30       	cpi	r24, 0x02	; 2
    4aee:	79 f1       	breq	.+94     	; 0x4b4e <mousekey_param_inc+0x6e>
    4af0:	08 95       	ret
    4af2:	85 30       	cpi	r24, 0x05	; 5
    4af4:	09 f4       	brne	.+2      	; 0x4af8 <mousekey_param_inc+0x18>
    4af6:	9a c0       	rjmp	.+308    	; 0x4c2c <mousekey_param_inc+0x14c>
    4af8:	08 f4       	brcc	.+2      	; 0x4afc <mousekey_param_inc+0x1c>
    4afa:	73 c0       	rjmp	.+230    	; 0x4be2 <mousekey_param_inc+0x102>
    4afc:	86 30       	cpi	r24, 0x06	; 6
    4afe:	09 f4       	brne	.+2      	; 0x4b02 <mousekey_param_inc+0x22>
    4b00:	ba c0       	rjmp	.+372    	; 0x4c76 <mousekey_param_inc+0x196>
    4b02:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4b04:	20 91 14 01 	lds	r18, 0x0114
    4b08:	86 2f       	mov	r24, r22
    4b0a:	90 e0       	ldi	r25, 0x00	; 0
    4b0c:	82 0f       	add	r24, r18
    4b0e:	91 1d       	adc	r25, r1
    4b10:	8f 3f       	cpi	r24, 0xFF	; 255
    4b12:	91 05       	cpc	r25, r1
    4b14:	20 f4       	brcc	.+8      	; 0x4b1e <mousekey_param_inc+0x3e>
                mk_delay += inc;
    4b16:	62 0f       	add	r22, r18
    4b18:	60 93 14 01 	sts	0x0114, r22
    4b1c:	03 c0       	rjmp	.+6      	; 0x4b24 <mousekey_param_inc+0x44>
            else
                mk_delay = UINT8_MAX;
    4b1e:	8f ef       	ldi	r24, 0xFF	; 255
    4b20:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_delay);
    4b24:	8f ed       	ldi	r24, 0xDF	; 223
    4b26:	95 e0       	ldi	r25, 0x05	; 5
    4b28:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4b2c:	80 91 14 01 	lds	r24, 0x0114
    4b30:	1f 92       	push	r1
    4b32:	8f 93       	push	r24
    4b34:	8c ed       	ldi	r24, 0xDC	; 220
    4b36:	95 e0       	ldi	r25, 0x05	; 5
    4b38:	9f 93       	push	r25
    4b3a:	8f 93       	push	r24
    4b3c:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4b40:	0f 90       	pop	r0
    4b42:	0f 90       	pop	r0
    4b44:	0f 90       	pop	r0
    4b46:	0f 90       	pop	r0
    4b48:	8a ed       	ldi	r24, 0xDA	; 218
    4b4a:	95 e0       	ldi	r25, 0x05	; 5
    4b4c:	b8 c0       	rjmp	.+368    	; 0x4cbe <mousekey_param_inc+0x1de>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4b4e:	20 91 13 01 	lds	r18, 0x0113
    4b52:	86 2f       	mov	r24, r22
    4b54:	90 e0       	ldi	r25, 0x00	; 0
    4b56:	82 0f       	add	r24, r18
    4b58:	91 1d       	adc	r25, r1
    4b5a:	8f 3f       	cpi	r24, 0xFF	; 255
    4b5c:	91 05       	cpc	r25, r1
    4b5e:	20 f4       	brcc	.+8      	; 0x4b68 <mousekey_param_inc+0x88>
                mk_interval += inc;
    4b60:	62 0f       	add	r22, r18
    4b62:	60 93 13 01 	sts	0x0113, r22
    4b66:	03 c0       	rjmp	.+6      	; 0x4b6e <mousekey_param_inc+0x8e>
            else
                mk_interval = UINT8_MAX;
    4b68:	8f ef       	ldi	r24, 0xFF	; 255
    4b6a:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_interval);
    4b6e:	8b ec       	ldi	r24, 0xCB	; 203
    4b70:	95 e0       	ldi	r25, 0x05	; 5
    4b72:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4b76:	80 91 13 01 	lds	r24, 0x0113
    4b7a:	1f 92       	push	r1
    4b7c:	8f 93       	push	r24
    4b7e:	88 ec       	ldi	r24, 0xC8	; 200
    4b80:	95 e0       	ldi	r25, 0x05	; 5
    4b82:	9f 93       	push	r25
    4b84:	8f 93       	push	r24
    4b86:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4b8a:	0f 90       	pop	r0
    4b8c:	0f 90       	pop	r0
    4b8e:	0f 90       	pop	r0
    4b90:	0f 90       	pop	r0
    4b92:	86 ec       	ldi	r24, 0xC6	; 198
    4b94:	95 e0       	ldi	r25, 0x05	; 5
    4b96:	93 c0       	rjmp	.+294    	; 0x4cbe <mousekey_param_inc+0x1de>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4b98:	20 91 12 01 	lds	r18, 0x0112
    4b9c:	86 2f       	mov	r24, r22
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	82 0f       	add	r24, r18
    4ba2:	91 1d       	adc	r25, r1
    4ba4:	8f 3f       	cpi	r24, 0xFF	; 255
    4ba6:	91 05       	cpc	r25, r1
    4ba8:	20 f4       	brcc	.+8      	; 0x4bb2 <mousekey_param_inc+0xd2>
                mk_max_speed += inc;
    4baa:	62 0f       	add	r22, r18
    4bac:	60 93 12 01 	sts	0x0112, r22
    4bb0:	03 c0       	rjmp	.+6      	; 0x4bb8 <mousekey_param_inc+0xd8>
            else
                mk_max_speed = UINT8_MAX;
    4bb2:	8f ef       	ldi	r24, 0xFF	; 255
    4bb4:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_max_speed);
    4bb8:	86 eb       	ldi	r24, 0xB6	; 182
    4bba:	95 e0       	ldi	r25, 0x05	; 5
    4bbc:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4bc0:	80 91 12 01 	lds	r24, 0x0112
    4bc4:	1f 92       	push	r1
    4bc6:	8f 93       	push	r24
    4bc8:	83 eb       	ldi	r24, 0xB3	; 179
    4bca:	95 e0       	ldi	r25, 0x05	; 5
    4bcc:	9f 93       	push	r25
    4bce:	8f 93       	push	r24
    4bd0:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4bd4:	0f 90       	pop	r0
    4bd6:	0f 90       	pop	r0
    4bd8:	0f 90       	pop	r0
    4bda:	0f 90       	pop	r0
    4bdc:	81 eb       	ldi	r24, 0xB1	; 177
    4bde:	95 e0       	ldi	r25, 0x05	; 5
    4be0:	6e c0       	rjmp	.+220    	; 0x4cbe <mousekey_param_inc+0x1de>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4be2:	20 91 11 01 	lds	r18, 0x0111
    4be6:	86 2f       	mov	r24, r22
    4be8:	90 e0       	ldi	r25, 0x00	; 0
    4bea:	82 0f       	add	r24, r18
    4bec:	91 1d       	adc	r25, r1
    4bee:	8f 3f       	cpi	r24, 0xFF	; 255
    4bf0:	91 05       	cpc	r25, r1
    4bf2:	20 f4       	brcc	.+8      	; 0x4bfc <mousekey_param_inc+0x11c>
                mk_time_to_max += inc;
    4bf4:	62 0f       	add	r22, r18
    4bf6:	60 93 11 01 	sts	0x0111, r22
    4bfa:	03 c0       	rjmp	.+6      	; 0x4c02 <mousekey_param_inc+0x122>
            else
                mk_time_to_max = UINT8_MAX;
    4bfc:	8f ef       	ldi	r24, 0xFF	; 255
    4bfe:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_time_to_max);
    4c02:	8f e9       	ldi	r24, 0x9F	; 159
    4c04:	95 e0       	ldi	r25, 0x05	; 5
    4c06:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4c0a:	80 91 11 01 	lds	r24, 0x0111
    4c0e:	1f 92       	push	r1
    4c10:	8f 93       	push	r24
    4c12:	8c e9       	ldi	r24, 0x9C	; 156
    4c14:	95 e0       	ldi	r25, 0x05	; 5
    4c16:	9f 93       	push	r25
    4c18:	8f 93       	push	r24
    4c1a:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4c1e:	0f 90       	pop	r0
    4c20:	0f 90       	pop	r0
    4c22:	0f 90       	pop	r0
    4c24:	0f 90       	pop	r0
    4c26:	8a e9       	ldi	r24, 0x9A	; 154
    4c28:	95 e0       	ldi	r25, 0x05	; 5
    4c2a:	49 c0       	rjmp	.+146    	; 0x4cbe <mousekey_param_inc+0x1de>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4c2c:	20 91 10 01 	lds	r18, 0x0110
    4c30:	86 2f       	mov	r24, r22
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	82 0f       	add	r24, r18
    4c36:	91 1d       	adc	r25, r1
    4c38:	8f 3f       	cpi	r24, 0xFF	; 255
    4c3a:	91 05       	cpc	r25, r1
    4c3c:	20 f4       	brcc	.+8      	; 0x4c46 <mousekey_param_inc+0x166>
                mk_wheel_max_speed += inc;
    4c3e:	62 0f       	add	r22, r18
    4c40:	60 93 10 01 	sts	0x0110, r22
    4c44:	03 c0       	rjmp	.+6      	; 0x4c4c <mousekey_param_inc+0x16c>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4c46:	8f ef       	ldi	r24, 0xFF	; 255
    4c48:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4c4c:	84 e8       	ldi	r24, 0x84	; 132
    4c4e:	95 e0       	ldi	r25, 0x05	; 5
    4c50:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4c54:	80 91 10 01 	lds	r24, 0x0110
    4c58:	1f 92       	push	r1
    4c5a:	8f 93       	push	r24
    4c5c:	81 e8       	ldi	r24, 0x81	; 129
    4c5e:	95 e0       	ldi	r25, 0x05	; 5
    4c60:	9f 93       	push	r25
    4c62:	8f 93       	push	r24
    4c64:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4c68:	0f 90       	pop	r0
    4c6a:	0f 90       	pop	r0
    4c6c:	0f 90       	pop	r0
    4c6e:	0f 90       	pop	r0
    4c70:	8f e7       	ldi	r24, 0x7F	; 127
    4c72:	95 e0       	ldi	r25, 0x05	; 5
    4c74:	24 c0       	rjmp	.+72     	; 0x4cbe <mousekey_param_inc+0x1de>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4c76:	20 91 0f 01 	lds	r18, 0x010F
    4c7a:	86 2f       	mov	r24, r22
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	82 0f       	add	r24, r18
    4c80:	91 1d       	adc	r25, r1
    4c82:	8f 3f       	cpi	r24, 0xFF	; 255
    4c84:	91 05       	cpc	r25, r1
    4c86:	20 f4       	brcc	.+8      	; 0x4c90 <mousekey_param_inc+0x1b0>
                mk_wheel_time_to_max += inc;
    4c88:	62 0f       	add	r22, r18
    4c8a:	60 93 0f 01 	sts	0x010F, r22
    4c8e:	03 c0       	rjmp	.+6      	; 0x4c96 <mousekey_param_inc+0x1b6>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4c90:	8f ef       	ldi	r24, 0xFF	; 255
    4c92:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4c96:	87 e6       	ldi	r24, 0x67	; 103
    4c98:	95 e0       	ldi	r25, 0x05	; 5
    4c9a:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4c9e:	80 91 0f 01 	lds	r24, 0x010F
    4ca2:	1f 92       	push	r1
    4ca4:	8f 93       	push	r24
    4ca6:	84 e6       	ldi	r24, 0x64	; 100
    4ca8:	95 e0       	ldi	r25, 0x05	; 5
    4caa:	9f 93       	push	r25
    4cac:	8f 93       	push	r24
    4cae:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4cb2:	0f 90       	pop	r0
    4cb4:	0f 90       	pop	r0
    4cb6:	0f 90       	pop	r0
    4cb8:	0f 90       	pop	r0
    4cba:	82 e6       	ldi	r24, 0x62	; 98
    4cbc:	95 e0       	ldi	r25, 0x05	; 5
    4cbe:	0c 94 11 08 	jmp	0x1022	; 0x1022 <xputs>

00004cc2 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4cc2:	83 30       	cpi	r24, 0x03	; 3
    4cc4:	09 f4       	brne	.+2      	; 0x4cc8 <mousekey_param_dec+0x6>
    4cc6:	4d c0       	rjmp	.+154    	; 0x4d62 <mousekey_param_dec+0xa0>
    4cc8:	28 f4       	brcc	.+10     	; 0x4cd4 <mousekey_param_dec+0x12>
    4cca:	81 30       	cpi	r24, 0x01	; 1
    4ccc:	61 f0       	breq	.+24     	; 0x4ce6 <mousekey_param_dec+0x24>
    4cce:	82 30       	cpi	r24, 0x02	; 2
    4cd0:	49 f1       	breq	.+82     	; 0x4d24 <mousekey_param_dec+0x62>
    4cd2:	08 95       	ret
    4cd4:	85 30       	cpi	r24, 0x05	; 5
    4cd6:	09 f4       	brne	.+2      	; 0x4cda <mousekey_param_dec+0x18>
    4cd8:	82 c0       	rjmp	.+260    	; 0x4dde <mousekey_param_dec+0x11c>
    4cda:	08 f4       	brcc	.+2      	; 0x4cde <mousekey_param_dec+0x1c>
    4cdc:	61 c0       	rjmp	.+194    	; 0x4da0 <mousekey_param_dec+0xde>
    4cde:	86 30       	cpi	r24, 0x06	; 6
    4ce0:	09 f4       	brne	.+2      	; 0x4ce4 <mousekey_param_dec+0x22>
    4ce2:	9c c0       	rjmp	.+312    	; 0x4e1c <mousekey_param_dec+0x15a>
    4ce4:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4ce6:	80 91 14 01 	lds	r24, 0x0114
    4cea:	68 17       	cp	r22, r24
    4cec:	20 f4       	brcc	.+8      	; 0x4cf6 <mousekey_param_dec+0x34>
                mk_delay -= dec;
    4cee:	86 1b       	sub	r24, r22
    4cf0:	80 93 14 01 	sts	0x0114, r24
    4cf4:	02 c0       	rjmp	.+4      	; 0x4cfa <mousekey_param_dec+0x38>
            else
                mk_delay = 0;
    4cf6:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_delay);
    4cfa:	86 e5       	ldi	r24, 0x56	; 86
    4cfc:	95 e0       	ldi	r25, 0x05	; 5
    4cfe:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4d02:	80 91 14 01 	lds	r24, 0x0114
    4d06:	1f 92       	push	r1
    4d08:	8f 93       	push	r24
    4d0a:	83 e5       	ldi	r24, 0x53	; 83
    4d0c:	95 e0       	ldi	r25, 0x05	; 5
    4d0e:	9f 93       	push	r25
    4d10:	8f 93       	push	r24
    4d12:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4d16:	0f 90       	pop	r0
    4d18:	0f 90       	pop	r0
    4d1a:	0f 90       	pop	r0
    4d1c:	0f 90       	pop	r0
    4d1e:	81 e5       	ldi	r24, 0x51	; 81
    4d20:	95 e0       	ldi	r25, 0x05	; 5
    4d22:	9a c0       	rjmp	.+308    	; 0x4e58 <mousekey_param_dec+0x196>
            break;
        case 2:
            if (mk_interval > dec)
    4d24:	80 91 13 01 	lds	r24, 0x0113
    4d28:	68 17       	cp	r22, r24
    4d2a:	20 f4       	brcc	.+8      	; 0x4d34 <mousekey_param_dec+0x72>
                mk_interval -= dec;
    4d2c:	86 1b       	sub	r24, r22
    4d2e:	80 93 13 01 	sts	0x0113, r24
    4d32:	02 c0       	rjmp	.+4      	; 0x4d38 <mousekey_param_dec+0x76>
            else
                mk_interval = 0;
    4d34:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_interval);
    4d38:	82 e4       	ldi	r24, 0x42	; 66
    4d3a:	95 e0       	ldi	r25, 0x05	; 5
    4d3c:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4d40:	80 91 13 01 	lds	r24, 0x0113
    4d44:	1f 92       	push	r1
    4d46:	8f 93       	push	r24
    4d48:	8f e3       	ldi	r24, 0x3F	; 63
    4d4a:	95 e0       	ldi	r25, 0x05	; 5
    4d4c:	9f 93       	push	r25
    4d4e:	8f 93       	push	r24
    4d50:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4d54:	0f 90       	pop	r0
    4d56:	0f 90       	pop	r0
    4d58:	0f 90       	pop	r0
    4d5a:	0f 90       	pop	r0
    4d5c:	8d e3       	ldi	r24, 0x3D	; 61
    4d5e:	95 e0       	ldi	r25, 0x05	; 5
    4d60:	7b c0       	rjmp	.+246    	; 0x4e58 <mousekey_param_dec+0x196>
            break;
        case 3:
            if (mk_max_speed > dec)
    4d62:	80 91 12 01 	lds	r24, 0x0112
    4d66:	68 17       	cp	r22, r24
    4d68:	20 f4       	brcc	.+8      	; 0x4d72 <mousekey_param_dec+0xb0>
                mk_max_speed -= dec;
    4d6a:	86 1b       	sub	r24, r22
    4d6c:	80 93 12 01 	sts	0x0112, r24
    4d70:	02 c0       	rjmp	.+4      	; 0x4d76 <mousekey_param_dec+0xb4>
            else
                mk_max_speed = 0;
    4d72:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_max_speed);
    4d76:	8d e2       	ldi	r24, 0x2D	; 45
    4d78:	95 e0       	ldi	r25, 0x05	; 5
    4d7a:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4d7e:	80 91 12 01 	lds	r24, 0x0112
    4d82:	1f 92       	push	r1
    4d84:	8f 93       	push	r24
    4d86:	8a e2       	ldi	r24, 0x2A	; 42
    4d88:	95 e0       	ldi	r25, 0x05	; 5
    4d8a:	9f 93       	push	r25
    4d8c:	8f 93       	push	r24
    4d8e:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4d92:	0f 90       	pop	r0
    4d94:	0f 90       	pop	r0
    4d96:	0f 90       	pop	r0
    4d98:	0f 90       	pop	r0
    4d9a:	88 e2       	ldi	r24, 0x28	; 40
    4d9c:	95 e0       	ldi	r25, 0x05	; 5
    4d9e:	5c c0       	rjmp	.+184    	; 0x4e58 <mousekey_param_dec+0x196>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4da0:	80 91 11 01 	lds	r24, 0x0111
    4da4:	68 17       	cp	r22, r24
    4da6:	20 f4       	brcc	.+8      	; 0x4db0 <mousekey_param_dec+0xee>
                mk_time_to_max -= dec;
    4da8:	86 1b       	sub	r24, r22
    4daa:	80 93 11 01 	sts	0x0111, r24
    4dae:	02 c0       	rjmp	.+4      	; 0x4db4 <mousekey_param_dec+0xf2>
            else
                mk_time_to_max = 0;
    4db0:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_time_to_max);
    4db4:	86 e1       	ldi	r24, 0x16	; 22
    4db6:	95 e0       	ldi	r25, 0x05	; 5
    4db8:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4dbc:	80 91 11 01 	lds	r24, 0x0111
    4dc0:	1f 92       	push	r1
    4dc2:	8f 93       	push	r24
    4dc4:	83 e1       	ldi	r24, 0x13	; 19
    4dc6:	95 e0       	ldi	r25, 0x05	; 5
    4dc8:	9f 93       	push	r25
    4dca:	8f 93       	push	r24
    4dcc:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4dd0:	0f 90       	pop	r0
    4dd2:	0f 90       	pop	r0
    4dd4:	0f 90       	pop	r0
    4dd6:	0f 90       	pop	r0
    4dd8:	81 e1       	ldi	r24, 0x11	; 17
    4dda:	95 e0       	ldi	r25, 0x05	; 5
    4ddc:	3d c0       	rjmp	.+122    	; 0x4e58 <mousekey_param_dec+0x196>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4dde:	80 91 10 01 	lds	r24, 0x0110
    4de2:	68 17       	cp	r22, r24
    4de4:	20 f4       	brcc	.+8      	; 0x4dee <mousekey_param_dec+0x12c>
                mk_wheel_max_speed -= dec;
    4de6:	86 1b       	sub	r24, r22
    4de8:	80 93 10 01 	sts	0x0110, r24
    4dec:	02 c0       	rjmp	.+4      	; 0x4df2 <mousekey_param_dec+0x130>
            else
                mk_wheel_max_speed = 0;
    4dee:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4df2:	8b ef       	ldi	r24, 0xFB	; 251
    4df4:	94 e0       	ldi	r25, 0x04	; 4
    4df6:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4dfa:	80 91 10 01 	lds	r24, 0x0110
    4dfe:	1f 92       	push	r1
    4e00:	8f 93       	push	r24
    4e02:	88 ef       	ldi	r24, 0xF8	; 248
    4e04:	94 e0       	ldi	r25, 0x04	; 4
    4e06:	9f 93       	push	r25
    4e08:	8f 93       	push	r24
    4e0a:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4e0e:	0f 90       	pop	r0
    4e10:	0f 90       	pop	r0
    4e12:	0f 90       	pop	r0
    4e14:	0f 90       	pop	r0
    4e16:	86 ef       	ldi	r24, 0xF6	; 246
    4e18:	94 e0       	ldi	r25, 0x04	; 4
    4e1a:	1e c0       	rjmp	.+60     	; 0x4e58 <mousekey_param_dec+0x196>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4e1c:	80 91 0f 01 	lds	r24, 0x010F
    4e20:	68 17       	cp	r22, r24
    4e22:	20 f4       	brcc	.+8      	; 0x4e2c <mousekey_param_dec+0x16a>
                mk_wheel_time_to_max -= dec;
    4e24:	86 1b       	sub	r24, r22
    4e26:	80 93 0f 01 	sts	0x010F, r24
    4e2a:	02 c0       	rjmp	.+4      	; 0x4e30 <mousekey_param_dec+0x16e>
            else
                mk_wheel_time_to_max = 0;
    4e2c:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4e30:	8e ed       	ldi	r24, 0xDE	; 222
    4e32:	94 e0       	ldi	r25, 0x04	; 4
    4e34:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4e38:	80 91 0f 01 	lds	r24, 0x010F
    4e3c:	1f 92       	push	r1
    4e3e:	8f 93       	push	r24
    4e40:	8b ed       	ldi	r24, 0xDB	; 219
    4e42:	94 e0       	ldi	r25, 0x04	; 4
    4e44:	9f 93       	push	r25
    4e46:	8f 93       	push	r24
    4e48:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4e4c:	0f 90       	pop	r0
    4e4e:	0f 90       	pop	r0
    4e50:	0f 90       	pop	r0
    4e52:	0f 90       	pop	r0
    4e54:	89 ed       	ldi	r24, 0xD9	; 217
    4e56:	94 e0       	ldi	r25, 0x04	; 4
    4e58:	0c 94 11 08 	jmp	0x1022	; 0x1022 <xputs>

00004e5c <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4e5c:	cf 93       	push	r28
    4e5e:	c8 2f       	mov	r28, r24
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    4e60:	84 e5       	ldi	r24, 0x54	; 84
    4e62:	99 e0       	ldi	r25, 0x09	; 9
    4e64:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4e68:	60 91 ac 01 	lds	r22, 0x01AC
    4e6c:	70 91 ad 01 	lds	r23, 0x01AD
    4e70:	80 91 ae 01 	lds	r24, 0x01AE
    4e74:	90 91 af 01 	lds	r25, 0x01AF
    4e78:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <biton32>
    4e7c:	1f 92       	push	r1
    4e7e:	8f 93       	push	r24
    4e80:	21 e5       	ldi	r18, 0x51	; 81
    4e82:	39 e0       	ldi	r19, 0x09	; 9
    4e84:	3f 93       	push	r19
    4e86:	2f 93       	push	r18
    4e88:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    print(" to "); print_dec(layer); print("\n");
    4e8c:	8c e4       	ldi	r24, 0x4C	; 76
    4e8e:	99 e0       	ldi	r25, 0x09	; 9
    4e90:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4e94:	1f 92       	push	r1
    4e96:	cf 93       	push	r28
    4e98:	29 e4       	ldi	r18, 0x49	; 73
    4e9a:	39 e0       	ldi	r19, 0x09	; 9
    4e9c:	3f 93       	push	r19
    4e9e:	2f 93       	push	r18
    4ea0:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4ea4:	87 e4       	ldi	r24, 0x47	; 71
    4ea6:	99 e0       	ldi	r25, 0x09	; 9
    4ea8:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    default_layer_set(1UL<<layer);
    4eac:	61 e0       	ldi	r22, 0x01	; 1
    4eae:	70 e0       	ldi	r23, 0x00	; 0
    4eb0:	80 e0       	ldi	r24, 0x00	; 0
    4eb2:	90 e0       	ldi	r25, 0x00	; 0
    4eb4:	04 c0       	rjmp	.+8      	; 0x4ebe <switch_default_layer+0x62>
    4eb6:	66 0f       	add	r22, r22
    4eb8:	77 1f       	adc	r23, r23
    4eba:	88 1f       	adc	r24, r24
    4ebc:	99 1f       	adc	r25, r25
    4ebe:	ca 95       	dec	r28
    4ec0:	d2 f7       	brpl	.-12     	; 0x4eb6 <switch_default_layer+0x5a>
    4ec2:	0e 94 aa 1b 	call	0x3754	; 0x3754 <default_layer_set>
    clear_keyboard();
    4ec6:	8d b7       	in	r24, 0x3d	; 61
    4ec8:	9e b7       	in	r25, 0x3e	; 62
    4eca:	08 96       	adiw	r24, 0x08	; 8
    4ecc:	0f b6       	in	r0, 0x3f	; 63
    4ece:	f8 94       	cli
    4ed0:	9e bf       	out	0x3e, r25	; 62
    4ed2:	0f be       	out	0x3f, r0	; 63
    4ed4:	8d bf       	out	0x3d, r24	; 61
}
    4ed6:	cf 91       	pop	r28
static void switch_default_layer(uint8_t layer)
{
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    print(" to "); print_dec(layer); print("\n");
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4ed8:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <clear_keyboard>

00004edc <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4edc:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    4ede:	48 2f       	mov	r20, r24
    4ee0:	50 e0       	ldi	r21, 0x00	; 0
    4ee2:	fa 01       	movw	r30, r20
    4ee4:	36 97       	sbiw	r30, 0x06	; 6
    4ee6:	e3 34       	cpi	r30, 0x43	; 67
    4ee8:	f1 05       	cpc	r31, r1
    4eea:	08 f0       	brcs	.+2      	; 0x4eee <command_common+0x12>
    4eec:	ae c2       	rjmp	.+1372   	; 0x544a <command_common+0x56e>
    4eee:	e0 59       	subi	r30, 0x90	; 144
    4ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef2:	0c 94 d7 2c 	jmp	0x59ae	; 0x59ae <__tablejump2__>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4ef6:	82 e7       	ldi	r24, 0x72	; 114
    4ef8:	9f e0       	ldi	r25, 0x0F	; 15
    4efa:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4efe:	82 eb       	ldi	r24, 0xB2	; 178
    4f00:	9c e0       	ldi	r25, 0x0C	; 12
    4f02:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4f06:	0e 94 44 22 	call	0x4488	; 0x4488 <eeconfig_read_default_layer>
    4f0a:	1f 92       	push	r1
    4f0c:	8f 93       	push	r24
    4f0e:	8f ea       	ldi	r24, 0xAF	; 175
    4f10:	9c e0       	ldi	r25, 0x0C	; 12
    4f12:	9f 93       	push	r25
    4f14:	8f 93       	push	r24
    4f16:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4f1a:	8d ea       	ldi	r24, 0xAD	; 173
    4f1c:	9c e0       	ldi	r25, 0x0C	; 12
    4f1e:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4f22:	0e 94 3b 22 	call	0x4476	; 0x4476 <eeconfig_read_debug>
    4f26:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4f28:	8a e9       	ldi	r24, 0x9A	; 154
    4f2a:	9c e0       	ldi	r25, 0x0C	; 12
    4f2c:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4f30:	1f 92       	push	r1
    4f32:	cf 93       	push	r28
    4f34:	25 e9       	ldi	r18, 0x95	; 149
    4f36:	3c e0       	ldi	r19, 0x0C	; 12
    4f38:	3f 93       	push	r19
    4f3a:	2f 93       	push	r18
    4f3c:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4f40:	83 e9       	ldi	r24, 0x93	; 147
    4f42:	9c e0       	ldi	r25, 0x0C	; 12
    4f44:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4f48:	89 e8       	ldi	r24, 0x89	; 137
    4f4a:	9c e0       	ldi	r25, 0x0C	; 12
    4f4c:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4f50:	8c 2f       	mov	r24, r28
    4f52:	81 70       	andi	r24, 0x01	; 1
    4f54:	1f 92       	push	r1
    4f56:	8f 93       	push	r24
    4f58:	26 e8       	ldi	r18, 0x86	; 134
    4f5a:	3c e0       	ldi	r19, 0x0C	; 12
    4f5c:	3f 93       	push	r19
    4f5e:	2f 93       	push	r18
    4f60:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4f64:	84 e8       	ldi	r24, 0x84	; 132
    4f66:	9c e0       	ldi	r25, 0x0C	; 12
    4f68:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4f6c:	8a e7       	ldi	r24, 0x7A	; 122
    4f6e:	9c e0       	ldi	r25, 0x0C	; 12
    4f70:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4f74:	c1 fb       	bst	r28, 1
    4f76:	88 27       	eor	r24, r24
    4f78:	80 f9       	bld	r24, 0
    4f7a:	1f 92       	push	r1
    4f7c:	8f 93       	push	r24
    4f7e:	27 e7       	ldi	r18, 0x77	; 119
    4f80:	3c e0       	ldi	r19, 0x0C	; 12
    4f82:	3f 93       	push	r19
    4f84:	2f 93       	push	r18
    4f86:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4f8a:	85 e7       	ldi	r24, 0x75	; 117
    4f8c:	9c e0       	ldi	r25, 0x0C	; 12
    4f8e:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4f92:	89 e6       	ldi	r24, 0x69	; 105
    4f94:	9c e0       	ldi	r25, 0x0C	; 12
    4f96:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4f9a:	c2 fb       	bst	r28, 2
    4f9c:	88 27       	eor	r24, r24
    4f9e:	80 f9       	bld	r24, 0
    4fa0:	1f 92       	push	r1
    4fa2:	8f 93       	push	r24
    4fa4:	26 e6       	ldi	r18, 0x66	; 102
    4fa6:	3c e0       	ldi	r19, 0x0C	; 12
    4fa8:	3f 93       	push	r19
    4faa:	2f 93       	push	r18
    4fac:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4fb0:	84 e6       	ldi	r24, 0x64	; 100
    4fb2:	9c e0       	ldi	r25, 0x0C	; 12
    4fb4:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4fb8:	8b e5       	ldi	r24, 0x5B	; 91
    4fba:	9c e0       	ldi	r25, 0x0C	; 12
    4fbc:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4fc0:	c3 fb       	bst	r28, 3
    4fc2:	cc 27       	eor	r28, r28
    4fc4:	c0 f9       	bld	r28, 0
    4fc6:	1f 92       	push	r1
    4fc8:	cf 93       	push	r28
    4fca:	88 e5       	ldi	r24, 0x58	; 88
    4fcc:	9c e0       	ldi	r25, 0x0C	; 12
    4fce:	9f 93       	push	r25
    4fd0:	8f 93       	push	r24
    4fd2:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4fd6:	86 e5       	ldi	r24, 0x56	; 86
    4fd8:	9c e0       	ldi	r25, 0x0C	; 12
    4fda:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4fde:	0e 94 4d 22 	call	0x449a	; 0x449a <eeconfig_read_keymap>
    4fe2:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4fe4:	82 e4       	ldi	r24, 0x42	; 66
    4fe6:	9c e0       	ldi	r25, 0x0C	; 12
    4fe8:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    4fec:	1f 92       	push	r1
    4fee:	cf 93       	push	r28
    4ff0:	2d e3       	ldi	r18, 0x3D	; 61
    4ff2:	3c e0       	ldi	r19, 0x0C	; 12
    4ff4:	3f 93       	push	r19
    4ff6:	2f 93       	push	r18
    4ff8:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    4ffc:	8b e3       	ldi	r24, 0x3B	; 59
    4ffe:	9c e0       	ldi	r25, 0x0C	; 12
    5000:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    5004:	82 e2       	ldi	r24, 0x22	; 34
    5006:	9c e0       	ldi	r25, 0x0C	; 12
    5008:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    500c:	8c 2f       	mov	r24, r28
    500e:	81 70       	andi	r24, 0x01	; 1
    5010:	1f 92       	push	r1
    5012:	8f 93       	push	r24
    5014:	2f e1       	ldi	r18, 0x1F	; 31
    5016:	3c e0       	ldi	r19, 0x0C	; 12
    5018:	3f 93       	push	r19
    501a:	2f 93       	push	r18
    501c:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    5020:	8d b7       	in	r24, 0x3d	; 61
    5022:	9e b7       	in	r25, 0x3e	; 62
    5024:	80 96       	adiw	r24, 0x20	; 32
    5026:	0f b6       	in	r0, 0x3f	; 63
    5028:	f8 94       	cli
    502a:	9e bf       	out	0x3e, r25	; 62
    502c:	0f be       	out	0x3f, r0	; 63
    502e:	8d bf       	out	0x3d, r24	; 61
    5030:	8d e1       	ldi	r24, 0x1D	; 29
    5032:	9c e0       	ldi	r25, 0x0C	; 12
    5034:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    5038:	86 e0       	ldi	r24, 0x06	; 6
    503a:	9c e0       	ldi	r25, 0x0C	; 12
    503c:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    5040:	c1 fb       	bst	r28, 1
    5042:	88 27       	eor	r24, r24
    5044:	80 f9       	bld	r24, 0
    5046:	1f 92       	push	r1
    5048:	8f 93       	push	r24
    504a:	23 e0       	ldi	r18, 0x03	; 3
    504c:	3c e0       	ldi	r19, 0x0C	; 12
    504e:	3f 93       	push	r19
    5050:	2f 93       	push	r18
    5052:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    5056:	81 e0       	ldi	r24, 0x01	; 1
    5058:	9c e0       	ldi	r25, 0x0C	; 12
    505a:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    505e:	8f ee       	ldi	r24, 0xEF	; 239
    5060:	9b e0       	ldi	r25, 0x0B	; 11
    5062:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    5066:	c2 fb       	bst	r28, 2
    5068:	88 27       	eor	r24, r24
    506a:	80 f9       	bld	r24, 0
    506c:	1f 92       	push	r1
    506e:	8f 93       	push	r24
    5070:	2c ee       	ldi	r18, 0xEC	; 236
    5072:	3b e0       	ldi	r19, 0x0B	; 11
    5074:	3f 93       	push	r19
    5076:	2f 93       	push	r18
    5078:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    507c:	8a ee       	ldi	r24, 0xEA	; 234
    507e:	9b e0       	ldi	r25, 0x0B	; 11
    5080:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    5084:	88 ed       	ldi	r24, 0xD8	; 216
    5086:	9b e0       	ldi	r25, 0x0B	; 11
    5088:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    508c:	c3 fb       	bst	r28, 3
    508e:	88 27       	eor	r24, r24
    5090:	80 f9       	bld	r24, 0
    5092:	1f 92       	push	r1
    5094:	8f 93       	push	r24
    5096:	25 ed       	ldi	r18, 0xD5	; 213
    5098:	3b e0       	ldi	r19, 0x0B	; 11
    509a:	3f 93       	push	r19
    509c:	2f 93       	push	r18
    509e:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    50a2:	83 ed       	ldi	r24, 0xD3	; 211
    50a4:	9b e0       	ldi	r25, 0x0B	; 11
    50a6:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    50aa:	89 ec       	ldi	r24, 0xC9	; 201
    50ac:	9b e0       	ldi	r25, 0x0B	; 11
    50ae:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    50b2:	c4 fb       	bst	r28, 4
    50b4:	88 27       	eor	r24, r24
    50b6:	80 f9       	bld	r24, 0
    50b8:	1f 92       	push	r1
    50ba:	8f 93       	push	r24
    50bc:	26 ec       	ldi	r18, 0xC6	; 198
    50be:	3b e0       	ldi	r19, 0x0B	; 11
    50c0:	3f 93       	push	r19
    50c2:	2f 93       	push	r18
    50c4:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    50c8:	84 ec       	ldi	r24, 0xC4	; 196
    50ca:	9b e0       	ldi	r25, 0x0B	; 11
    50cc:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    50d0:	82 eb       	ldi	r24, 0xB2	; 178
    50d2:	9b e0       	ldi	r25, 0x0B	; 11
    50d4:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    50d8:	c5 fb       	bst	r28, 5
    50da:	88 27       	eor	r24, r24
    50dc:	80 f9       	bld	r24, 0
    50de:	1f 92       	push	r1
    50e0:	8f 93       	push	r24
    50e2:	2f ea       	ldi	r18, 0xAF	; 175
    50e4:	3b e0       	ldi	r19, 0x0B	; 11
    50e6:	3f 93       	push	r19
    50e8:	2f 93       	push	r18
    50ea:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    50ee:	8d ea       	ldi	r24, 0xAD	; 173
    50f0:	9b e0       	ldi	r25, 0x0B	; 11
    50f2:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    50f6:	81 e9       	ldi	r24, 0x91	; 145
    50f8:	9b e0       	ldi	r25, 0x0B	; 11
    50fa:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    50fe:	c6 fb       	bst	r28, 6
    5100:	88 27       	eor	r24, r24
    5102:	80 f9       	bld	r24, 0
    5104:	1f 92       	push	r1
    5106:	8f 93       	push	r24
    5108:	2e e8       	ldi	r18, 0x8E	; 142
    510a:	3b e0       	ldi	r19, 0x0B	; 11
    510c:	3f 93       	push	r19
    510e:	2f 93       	push	r18
    5110:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    5114:	8c e8       	ldi	r24, 0x8C	; 140
    5116:	9b e0       	ldi	r25, 0x0B	; 11
    5118:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    511c:	84 e8       	ldi	r24, 0x84	; 132
    511e:	9b e0       	ldi	r25, 0x0B	; 11
    5120:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    5124:	c7 fb       	bst	r28, 7
    5126:	cc 27       	eor	r28, r28
    5128:	c0 f9       	bld	r28, 0
    512a:	1f 92       	push	r1
    512c:	cf 93       	push	r28
    512e:	81 e8       	ldi	r24, 0x81	; 129
    5130:	9b e0       	ldi	r25, 0x0B	; 11
    5132:	9f 93       	push	r25
    5134:	8f 93       	push	r24
    5136:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    513a:	8f e7       	ldi	r24, 0x7F	; 127
    513c:	9b e0       	ldi	r25, 0x0B	; 11
    513e:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    5142:	8d b7       	in	r24, 0x3d	; 61
    5144:	9e b7       	in	r25, 0x3e	; 62
    5146:	4c 96       	adiw	r24, 0x1c	; 28
    5148:	0f b6       	in	r0, 0x3f	; 63
    514a:	f8 94       	cli
    514c:	9e bf       	out	0x3e, r25	; 62
    514e:	0f be       	out	0x3f, r0	; 63
    5150:	8d bf       	out	0x3d, r24	; 61
    5152:	1d c0       	rjmp	.+58     	; 0x518e <command_common+0x2b2>
            print("eeconfig:\n");
            print_eeconfig();
            break;
#endif
        case KC_CAPSLOCK:
            if (host_get_driver()) {
    5154:	0e 94 d7 11 	call	0x23ae	; 0x23ae <host_get_driver>
    5158:	89 2b       	or	r24, r25
    515a:	79 f0       	breq	.+30     	; 0x517a <command_common+0x29e>
                host_driver = host_get_driver();
    515c:	0e 94 d7 11 	call	0x23ae	; 0x23ae <host_get_driver>
    5160:	90 93 d6 01 	sts	0x01D6, r25
    5164:	80 93 d5 01 	sts	0x01D5, r24
                clear_keyboard();
    5168:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <clear_keyboard>
                host_set_driver(0);
    516c:	80 e0       	ldi	r24, 0x00	; 0
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <host_set_driver>
                print("Locked.\n");
    5174:	89 e6       	ldi	r24, 0x69	; 105
    5176:	9f e0       	ldi	r25, 0x0F	; 15
    5178:	08 c0       	rjmp	.+16     	; 0x518a <command_common+0x2ae>
            } else {
                host_set_driver(host_driver);
    517a:	80 91 d5 01 	lds	r24, 0x01D5
    517e:	90 91 d6 01 	lds	r25, 0x01D6
    5182:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <host_set_driver>
                print("Unlocked.\n");
    5186:	8e e5       	ldi	r24, 0x5E	; 94
    5188:	9f e0       	ldi	r25, 0x0F	; 15
    518a:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    518e:	c1 e0       	ldi	r28, 0x01	; 1
    5190:	61 c1       	rjmp	.+706    	; 0x5454 <command_common+0x578>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\n----- Command Help -----\n");
    5192:	83 e6       	ldi	r24, 0x63	; 99
    5194:	9b e0       	ldi	r25, 0x0B	; 11
    5196:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("c:	enter console mode\n");
    519a:	8c e4       	ldi	r24, 0x4C	; 76
    519c:	9b e0       	ldi	r25, 0x0B	; 11
    519e:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("d:	toggle debug enable\n");
    51a2:	84 e3       	ldi	r24, 0x34	; 52
    51a4:	9b e0       	ldi	r25, 0x0B	; 11
    51a6:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("x:	toggle matrix debug\n");
    51aa:	8c e1       	ldi	r24, 0x1C	; 28
    51ac:	9b e0       	ldi	r25, 0x0B	; 11
    51ae:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("k:	toggle keyboard debug\n");
    51b2:	82 e0       	ldi	r24, 0x02	; 2
    51b4:	9b e0       	ldi	r25, 0x0B	; 11
    51b6:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("m:	toggle mouse debug\n");
    51ba:	8b ee       	ldi	r24, 0xEB	; 235
    51bc:	9a e0       	ldi	r25, 0x0A	; 10
    51be:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
#ifdef SLEEP_LED_ENABLE
    print("z:	toggle sleep LED test\n");
#endif
    print("v:	print device version & info\n");
    51c2:	8b ec       	ldi	r24, 0xCB	; 203
    51c4:	9a e0       	ldi	r25, 0x0A	; 10
    51c6:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("t:	print timer count\n");
    51ca:	85 eb       	ldi	r24, 0xB5	; 181
    51cc:	9a e0       	ldi	r25, 0x0A	; 10
    51ce:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("s:	print status\n");
    51d2:	84 ea       	ldi	r24, 0xA4	; 164
    51d4:	9a e0       	ldi	r25, 0x0A	; 10
    51d6:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("e:	print eeprom config\n");
    51da:	8c e8       	ldi	r24, 0x8C	; 140
    51dc:	9a e0       	ldi	r25, 0x0A	; 10
    51de:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
#ifdef NKRO_ENABLE
    print("n:	toggle NKRO\n");
    51e2:	8c e7       	ldi	r24, 0x7C	; 124
    51e4:	9a e0       	ldi	r25, 0x0A	; 10
    51e6:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
#endif
    print("0/F10:	switch to Layer0 \n");
    51ea:	82 e6       	ldi	r24, 0x62	; 98
    51ec:	9a e0       	ldi	r25, 0x0A	; 10
    51ee:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("1/F1:	switch to Layer1 \n");
    51f2:	89 e4       	ldi	r24, 0x49	; 73
    51f4:	9a e0       	ldi	r25, 0x0A	; 10
    51f6:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("2/F2:	switch to Layer2 \n");
    51fa:	80 e3       	ldi	r24, 0x30	; 48
    51fc:	9a e0       	ldi	r25, 0x0A	; 10
    51fe:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("3/F3:	switch to Layer3 \n");
    5202:	87 e1       	ldi	r24, 0x17	; 23
    5204:	9a e0       	ldi	r25, 0x0A	; 10
    5206:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("4/F4:	switch to Layer4 \n");
    520a:	8e ef       	ldi	r24, 0xFE	; 254
    520c:	99 e0       	ldi	r25, 0x09	; 9
    520e:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("PScr:	power down/remote wake-up\n");
    5212:	8d ed       	ldi	r24, 0xDD	; 221
    5214:	99 e0       	ldi	r25, 0x09	; 9
    5216:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("Caps:	Lock Keyboard(Child Proof)\n");
    521a:	8b eb       	ldi	r24, 0xBB	; 187
    521c:	99 e0       	ldi	r25, 0x09	; 9
    521e:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("Paus:	jump to bootloader\n");
    5222:	81 ea       	ldi	r24, 0xA1	; 161
    5224:	99 e0       	ldi	r25, 0x09	; 9
    5226:	b1 cf       	rjmp	.-158    	; 0x518a <command_common+0x2ae>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    5228:	80 91 c3 01 	lds	r24, 0x01C3
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    522c:	81 7f       	andi	r24, 0xF1	; 241
    522e:	8e 7f       	andi	r24, 0xFE	; 254
    5230:	80 93 c3 01 	sts	0x01C3, r24
            command_console_help();
    5234:	0e 94 fe 24 	call	0x49fc	; 0x49fc <command_console_help>
            print("\nEnter Console Mode\n");
    5238:	89 e4       	ldi	r24, 0x49	; 73
    523a:	9f e0       	ldi	r25, 0x0F	; 15
    523c:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
            print("C> ");
    5240:	85 e4       	ldi	r24, 0x45	; 69
    5242:	9f e0       	ldi	r25, 0x0F	; 15
    5244:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
            command_state = CONSOLE;
    5248:	81 e0       	ldi	r24, 0x01	; 1
    524a:	80 93 d4 01 	sts	0x01D4, r24
    524e:	9f cf       	rjmp	.-194    	; 0x518e <command_common+0x2b2>
            break;
        case KC_PAUSE:
            clear_keyboard();
    5250:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <clear_keyboard>
            print("\n\nJump to bootloader... ");
    5254:	8c e2       	ldi	r24, 0x2C	; 44
    5256:	9f e0       	ldi	r25, 0x0F	; 15
    5258:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    525c:	9f ef       	ldi	r25, 0xFF	; 255
    525e:	23 ed       	ldi	r18, 0xD3	; 211
    5260:	80 e3       	ldi	r24, 0x30	; 48
    5262:	91 50       	subi	r25, 0x01	; 1
    5264:	20 40       	sbci	r18, 0x00	; 0
    5266:	80 40       	sbci	r24, 0x00	; 0
    5268:	e1 f7       	brne	.-8      	; 0x5262 <command_common+0x386>
    526a:	00 c0       	rjmp	.+0      	; 0x526c <command_common+0x390>
    526c:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    526e:	0e 94 79 20 	call	0x40f2	; 0x40f2 <bootloader_jump>
            print("not supported.\n");
    5272:	8c e1       	ldi	r24, 0x1C	; 28
    5274:	9f e0       	ldi	r25, 0x0F	; 15
    5276:	89 cf       	rjmp	.-238    	; 0x518a <command_common+0x2ae>
            break;
        case KC_D:
            if (debug_enable) {
    5278:	80 91 c3 01 	lds	r24, 0x01C3
    527c:	c8 2f       	mov	r28, r24
    527e:	c1 70       	andi	r28, 0x01	; 1
    5280:	80 ff       	sbrs	r24, 0
    5282:	09 c0       	rjmp	.+18     	; 0x5296 <command_common+0x3ba>
                print("\nDEBUG: disabled.\n");
    5284:	89 e0       	ldi	r24, 0x09	; 9
    5286:	9f e0       	ldi	r25, 0x0F	; 15
    5288:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
                debug_matrix   = false;
    528c:	80 91 c3 01 	lds	r24, 0x01C3
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    5290:	81 7f       	andi	r24, 0xF1	; 241
    5292:	8e 7f       	andi	r24, 0xFE	; 254
    5294:	44 c0       	rjmp	.+136    	; 0x531e <command_common+0x442>
            } else {
                print("\nDEBUG: enabled.\n");
    5296:	87 ef       	ldi	r24, 0xF7	; 247
    5298:	9e e0       	ldi	r25, 0x0E	; 14
    529a:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
                debug_enable   = true;
    529e:	80 91 c3 01 	lds	r24, 0x01C3
    52a2:	81 60       	ori	r24, 0x01	; 1
    52a4:	80 93 c3 01 	sts	0x01C3, r24
    52a8:	72 cf       	rjmp	.-284    	; 0x518e <command_common+0x2b2>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    52aa:	80 91 c3 01 	lds	r24, 0x01C3
    52ae:	81 fb       	bst	r24, 1
    52b0:	cc 27       	eor	r28, r28
    52b2:	c0 f9       	bld	r28, 0
    52b4:	91 e0       	ldi	r25, 0x01	; 1
    52b6:	c9 27       	eor	r28, r25
    52b8:	c0 fb       	bst	r28, 0
    52ba:	81 f9       	bld	r24, 1
    52bc:	80 93 c3 01 	sts	0x01C3, r24
            if (debug_matrix) {
    52c0:	cc 23       	and	r28, r28
    52c2:	19 f0       	breq	.+6      	; 0x52ca <command_common+0x3ee>
                print("\nDEBUG: matrix enabled.\n");
    52c4:	8e ed       	ldi	r24, 0xDE	; 222
    52c6:	9e e0       	ldi	r25, 0x0E	; 14
    52c8:	25 c0       	rjmp	.+74     	; 0x5314 <command_common+0x438>
                debug_enable = true;
            } else {
                print("\nDEBUG: matrix disabled.\n");
    52ca:	84 ec       	ldi	r24, 0xC4	; 196
    52cc:	9e e0       	ldi	r25, 0x0E	; 14
    52ce:	5d cf       	rjmp	.-326    	; 0x518a <command_common+0x2ae>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    52d0:	80 91 c3 01 	lds	r24, 0x01C3
    52d4:	82 fb       	bst	r24, 2
    52d6:	cc 27       	eor	r28, r28
    52d8:	c0 f9       	bld	r28, 0
    52da:	91 e0       	ldi	r25, 0x01	; 1
    52dc:	c9 27       	eor	r28, r25
    52de:	c0 fb       	bst	r28, 0
    52e0:	82 f9       	bld	r24, 2
    52e2:	80 93 c3 01 	sts	0x01C3, r24
            if (debug_keyboard) {
    52e6:	cc 23       	and	r28, r28
    52e8:	19 f0       	breq	.+6      	; 0x52f0 <command_common+0x414>
                print("\nDEBUG: keyboard enabled.\n");
    52ea:	89 ea       	ldi	r24, 0xA9	; 169
    52ec:	9e e0       	ldi	r25, 0x0E	; 14
    52ee:	12 c0       	rjmp	.+36     	; 0x5314 <command_common+0x438>
                debug_enable = true;
            } else {
                print("\nDEBUG: keyboard disabled.\n");
    52f0:	8d e8       	ldi	r24, 0x8D	; 141
    52f2:	9e e0       	ldi	r25, 0x0E	; 14
    52f4:	4a cf       	rjmp	.-364    	; 0x518a <command_common+0x2ae>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    52f6:	80 91 c3 01 	lds	r24, 0x01C3
    52fa:	83 fb       	bst	r24, 3
    52fc:	cc 27       	eor	r28, r28
    52fe:	c0 f9       	bld	r28, 0
    5300:	91 e0       	ldi	r25, 0x01	; 1
    5302:	c9 27       	eor	r28, r25
    5304:	c0 fb       	bst	r28, 0
    5306:	83 f9       	bld	r24, 3
    5308:	80 93 c3 01 	sts	0x01C3, r24
            if (debug_mouse) {
    530c:	cc 23       	and	r28, r28
    530e:	51 f0       	breq	.+20     	; 0x5324 <command_common+0x448>
                print("\nDEBUG: mouse enabled.\n");
    5310:	85 e7       	ldi	r24, 0x75	; 117
    5312:	9e e0       	ldi	r25, 0x0E	; 14
    5314:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
                debug_enable = true;
    5318:	80 91 c3 01 	lds	r24, 0x01C3
    531c:	81 60       	ori	r24, 0x01	; 1
    531e:	80 93 c3 01 	sts	0x01C3, r24
    5322:	98 c0       	rjmp	.+304    	; 0x5454 <command_common+0x578>
            } else {
                print("\nDEBUG: mouse disabled.\n");
    5324:	8c e5       	ldi	r24, 0x5C	; 92
    5326:	9e e0       	ldi	r25, 0x0E	; 14
    5328:	30 cf       	rjmp	.-416    	; 0x518a <command_common+0x2ae>
            }
            break;
        case KC_V: // print version & information
            print("\n\n----- Version -----\n");
    532a:	85 e4       	ldi	r24, 0x45	; 69
    532c:	9e e0       	ldi	r25, 0x0E	; 14
    532e:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    5332:	86 e2       	ldi	r24, 0x26	; 38
    5334:	9e e0       	ldi	r25, 0x0E	; 14
    5336:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    533a:	81 ef       	ldi	r24, 0xF1	; 241
    533c:	9d e0       	ldi	r25, 0x0D	; 13
    533e:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    5342:	84 ec       	ldi	r24, 0xC4	; 196
    5344:	9d e0       	ldi	r25, 0x0D	; 13
    5346:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
            /* build options */
            print("OPTIONS:"
    534a:	8f e7       	ldi	r24, 0x7F	; 127
    534c:	9d e0       	ldi	r25, 0x0D	; 13
    534e:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    5352:	81 e5       	ldi	r24, 0x51	; 81
    5354:	9d e0       	ldi	r25, 0x0D	; 13
    5356:	19 cf       	rjmp	.-462    	; 0x518a <command_common+0x2ae>
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_T: // print timer
            print_val_hex32(timer_count);
    5358:	80 91 c7 01 	lds	r24, 0x01C7
    535c:	90 91 c8 01 	lds	r25, 0x01C8
    5360:	a0 91 c9 01 	lds	r26, 0x01C9
    5364:	b0 91 ca 01 	lds	r27, 0x01CA
    5368:	bf 93       	push	r27
    536a:	af 93       	push	r26
    536c:	9f 93       	push	r25
    536e:	8f 93       	push	r24
    5370:	8d e3       	ldi	r24, 0x3D	; 61
    5372:	9d e0       	ldi	r25, 0x0D	; 13
    5374:	9f 93       	push	r25
    5376:	8f 93       	push	r24
    5378:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
            break;
    537c:	0f 90       	pop	r0
    537e:	0f 90       	pop	r0
    5380:	0f 90       	pop	r0
    5382:	0f 90       	pop	r0
    5384:	0f 90       	pop	r0
    5386:	0f 90       	pop	r0
    5388:	02 cf       	rjmp	.-508    	; 0x518e <command_common+0x2b2>
        case KC_S:
            print("\n\n----- Status -----\n");
    538a:	87 e2       	ldi	r24, 0x27	; 39
    538c:	9d e0       	ldi	r25, 0x0D	; 13
    538e:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
            print_val_hex8(host_keyboard_leds());
    5392:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <host_keyboard_leds>
    5396:	1f 92       	push	r1
    5398:	8f 93       	push	r24
    539a:	8d e0       	ldi	r24, 0x0D	; 13
    539c:	9d e0       	ldi	r25, 0x0D	; 13
    539e:	9f 93       	push	r25
    53a0:	8f 93       	push	r24
    53a2:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
            print_val_hex8(keyboard_protocol);
    53a6:	80 91 0b 01 	lds	r24, 0x010B
    53aa:	1f 92       	push	r1
    53ac:	8f 93       	push	r24
    53ae:	86 ef       	ldi	r24, 0xF6	; 246
    53b0:	9c e0       	ldi	r25, 0x0C	; 12
    53b2:	9f 93       	push	r25
    53b4:	8f 93       	push	r24
    53b6:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
            print_val_hex8(keyboard_idle);
    53ba:	80 91 4c 01 	lds	r24, 0x014C
    53be:	1f 92       	push	r1
    53c0:	8f 93       	push	r24
    53c2:	83 ee       	ldi	r24, 0xE3	; 227
    53c4:	9c e0       	ldi	r25, 0x0C	; 12
    53c6:	9f 93       	push	r25
    53c8:	8f 93       	push	r24
    53ca:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    53ce:	8d b7       	in	r24, 0x3d	; 61
    53d0:	9e b7       	in	r25, 0x3e	; 62
    53d2:	0c 96       	adiw	r24, 0x0c	; 12
    53d4:	0f b6       	in	r0, 0x3f	; 63
    53d6:	f8 94       	cli
    53d8:	9e bf       	out	0x3e, r25	; 62
    53da:	0f be       	out	0x3f, r0	; 63
    53dc:	8d bf       	out	0x3d, r24	; 61
    53de:	d7 ce       	rjmp	.-594    	; 0x518e <command_common+0x2b2>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    53e0:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    53e4:	c0 91 0c 01 	lds	r28, 0x010C
    53e8:	81 e0       	ldi	r24, 0x01	; 1
    53ea:	c8 27       	eor	r28, r24
    53ec:	c0 93 0c 01 	sts	0x010C, r28
            if (keyboard_nkro)
    53f0:	cc 23       	and	r28, r28
    53f2:	29 f0       	breq	.+10     	; 0x53fe <command_common+0x522>
                print("NKRO: enabled\n");
    53f4:	84 ed       	ldi	r24, 0xD4	; 212
    53f6:	9c e0       	ldi	r25, 0x0C	; 12
    53f8:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    53fc:	2b c0       	rjmp	.+86     	; 0x5454 <command_common+0x578>
            else
                print("NKRO: disabled\n");
    53fe:	84 ec       	ldi	r24, 0xC4	; 196
    5400:	9c e0       	ldi	r25, 0x0C	; 12
    5402:	c3 ce       	rjmp	.-634    	; 0x518a <command_common+0x2ae>
                host_system_send(SYSTEM_POWER_DOWN);
                host_system_send(0);
                _delay_ms(500);
            }
#else
            host_system_send(SYSTEM_POWER_DOWN);
    5404:	81 e8       	ldi	r24, 0x81	; 129
    5406:	90 e0       	ldi	r25, 0x00	; 0
    5408:	0e 94 38 12 	call	0x2470	; 0x2470 <host_system_send>
    540c:	9f ef       	ldi	r25, 0xFF	; 255
    540e:	21 ee       	ldi	r18, 0xE1	; 225
    5410:	84 e0       	ldi	r24, 0x04	; 4
    5412:	91 50       	subi	r25, 0x01	; 1
    5414:	20 40       	sbci	r18, 0x00	; 0
    5416:	80 40       	sbci	r24, 0x00	; 0
    5418:	e1 f7       	brne	.-8      	; 0x5412 <command_common+0x536>
    541a:	00 c0       	rjmp	.+0      	; 0x541c <command_common+0x540>
    541c:	00 00       	nop
            _delay_ms(100);
            host_system_send(0);
    541e:	80 e0       	ldi	r24, 0x00	; 0
    5420:	90 e0       	ldi	r25, 0x00	; 0
    5422:	0e 94 38 12 	call	0x2470	; 0x2470 <host_system_send>
    5426:	9f ef       	ldi	r25, 0xFF	; 255
    5428:	29 e6       	ldi	r18, 0x69	; 105
    542a:	88 e1       	ldi	r24, 0x18	; 24
    542c:	91 50       	subi	r25, 0x01	; 1
    542e:	20 40       	sbci	r18, 0x00	; 0
    5430:	80 40       	sbci	r24, 0x00	; 0
    5432:	e1 f7       	brne	.-8      	; 0x542c <command_common+0x550>
    5434:	00 c0       	rjmp	.+0      	; 0x5436 <command_common+0x55a>
    5436:	00 00       	nop
    5438:	aa ce       	rjmp	.-684    	; 0x518e <command_common+0x2b2>
            break;
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
            switch_default_layer(0);
    543a:	80 e0       	ldi	r24, 0x00	; 0
    543c:	03 c0       	rjmp	.+6      	; 0x5444 <command_common+0x568>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    543e:	8d 51       	subi	r24, 0x1D	; 29
    5440:	01 c0       	rjmp	.+2      	; 0x5444 <command_common+0x568>
            break;
        case KC_F1 ... KC_F12:
            switch_default_layer((code - KC_F1) + 1);
    5442:	89 53       	subi	r24, 0x39	; 57
    5444:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <switch_default_layer>
    5448:	a2 ce       	rjmp	.-700    	; 0x518e <command_common+0x2b2>
            break;
        default:
            print("?");
    544a:	82 ec       	ldi	r24, 0xC2	; 194
    544c:	9c e0       	ldi	r25, 0x0C	; 12
    544e:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
            return false;
    5452:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    5454:	8c 2f       	mov	r24, r28
    5456:	cf 91       	pop	r28
    5458:	08 95       	ret

0000545a <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    545a:	80 e0       	ldi	r24, 0x00	; 0
    545c:	08 95       	ret

0000545e <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    545e:	80 e0       	ldi	r24, 0x00	; 0
    5460:	08 95       	ret

00005462 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    5462:	cf 93       	push	r28
    5464:	c8 2f       	mov	r28, r24
    switch (command_state) {
    5466:	80 91 d4 01 	lds	r24, 0x01D4
    546a:	81 30       	cpi	r24, 0x01	; 1
    546c:	71 f0       	breq	.+28     	; 0x548a <command_proc+0x28>
    546e:	20 f0       	brcs	.+8      	; 0x5478 <command_proc+0x16>
    5470:	82 30       	cpi	r24, 0x02	; 2
    5472:	09 f4       	brne	.+2      	; 0x5476 <command_proc+0x14>
    5474:	4e c0       	rjmp	.+156    	; 0x5512 <command_proc+0xb0>
    5476:	5d c1       	rjmp	.+698    	; 0x5732 <command_proc+0x2d0>
        case ONESHOT:
            if (!IS_COMMAND())
    5478:	a0 91 0d 01 	lds	r26, 0x010D
    547c:	b0 91 0e 01 	lds	r27, 0x010E
    5480:	8c 91       	ld	r24, X
    5482:	82 32       	cpi	r24, 0x22	; 34
    5484:	09 f0       	breq	.+2      	; 0x5488 <command_proc+0x26>
    5486:	57 c1       	rjmp	.+686    	; 0x5736 <command_proc+0x2d4>
    5488:	07 c0       	rjmp	.+14     	; 0x5498 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    548a:	a0 91 0d 01 	lds	r26, 0x010D
    548e:	b0 91 0e 01 	lds	r27, 0x010E
    5492:	8c 91       	ld	r24, X
    5494:	82 32       	cpi	r24, 0x22	; 34
    5496:	49 f4       	brne	.+18     	; 0x54aa <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    5498:	8c 2f       	mov	r24, r28
    549a:	0e 94 2d 2a 	call	0x545a	; 0x545a <command_extra>
    549e:	81 11       	cpse	r24, r1
    54a0:	35 c0       	rjmp	.+106    	; 0x550c <command_proc+0xaa>
    54a2:	8c 2f       	mov	r24, r28
    54a4:	0e 94 6e 27 	call	0x4edc	; 0x4edc <command_common>
    54a8:	32 c0       	rjmp	.+100    	; 0x550e <command_proc+0xac>
            else
                return (command_console_extra(code) || command_console(code));
    54aa:	8c 2f       	mov	r24, r28
    54ac:	0e 94 2f 2a 	call	0x545e	; 0x545e <command_console_extra>
    54b0:	81 11       	cpse	r24, r1
    54b2:	2c c0       	rjmp	.+88     	; 0x550c <command_proc+0xaa>
#endif
}

static bool command_console(uint8_t code)
{
    switch (code) {
    54b4:	c4 31       	cpi	r28, 0x14	; 20
    54b6:	f1 f0       	breq	.+60     	; 0x54f4 <command_proc+0x92>
    54b8:	90 f4       	brcc	.+36     	; 0x54de <command_proc+0x7c>
    54ba:	cb 30       	cpi	r28, 0x0B	; 11
    54bc:	a1 f0       	breq	.+40     	; 0x54e6 <command_proc+0x84>
    54be:	c0 31       	cpi	r28, 0x10	; 16
    54c0:	01 f5       	brne	.+64     	; 0x5502 <command_proc+0xa0>
            print("\nQuit Console Mode\n");
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    54c2:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <mousekey_console_help>
            print("\nEnter Mousekey Console\n");
    54c6:	86 e1       	ldi	r24, 0x16	; 22
    54c8:	99 e0       	ldi	r25, 0x09	; 9
    54ca:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
            print("M0>");
    54ce:	82 e1       	ldi	r24, 0x12	; 18
    54d0:	99 e0       	ldi	r25, 0x09	; 9
    54d2:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
            command_state = MOUSEKEY;
    54d6:	82 e0       	ldi	r24, 0x02	; 2
    54d8:	80 93 d4 01 	sts	0x01D4, r24
    54dc:	17 c0       	rjmp	.+46     	; 0x550c <command_proc+0xaa>
#endif
}

static bool command_console(uint8_t code)
{
    switch (code) {
    54de:	c9 32       	cpi	r28, 0x29	; 41
    54e0:	49 f0       	breq	.+18     	; 0x54f4 <command_proc+0x92>
    54e2:	c8 33       	cpi	r28, 0x38	; 56
    54e4:	71 f4       	brne	.+28     	; 0x5502 <command_proc+0xa0>
        case KC_H:
        case KC_SLASH: /* ? */
            command_console_help();
    54e6:	0e 94 fe 24 	call	0x49fc	; 0x49fc <command_console_help>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    54ea:	83 e4       	ldi	r24, 0x43	; 67
    54ec:	99 e0       	ldi	r25, 0x09	; 9
    54ee:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    54f2:	0c c0       	rjmp	.+24     	; 0x550c <command_proc+0xaa>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            print("\nQuit Console Mode\n");
    54f4:	8f e2       	ldi	r24, 0x2F	; 47
    54f6:	99 e0       	ldi	r25, 0x09	; 9
    54f8:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
            command_state = ONESHOT;
    54fc:	10 92 d4 01 	sts	0x01D4, r1
    5500:	1c c1       	rjmp	.+568    	; 0x573a <command_proc+0x2d8>
            print("M0>");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    5502:	80 e1       	ldi	r24, 0x10	; 16
    5504:	99 e0       	ldi	r25, 0x09	; 9
    5506:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    550a:	17 c1       	rjmp	.+558    	; 0x573a <command_proc+0x2d8>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    550c:	81 e0       	ldi	r24, 0x01	; 1
    550e:	81 70       	andi	r24, 0x01	; 1
    5510:	16 c1       	rjmp	.+556    	; 0x573e <command_proc+0x2dc>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5512:	c8 32       	cpi	r28, 0x28	; 40
    5514:	28 f5       	brcc	.+74     	; 0x5560 <command_proc+0xfe>
    5516:	ce 31       	cpi	r28, 0x1E	; 30
    5518:	08 f0       	brcs	.+2      	; 0x551c <command_proc+0xba>
    551a:	c0 c0       	rjmp	.+384    	; 0x569c <command_proc+0x23a>
    551c:	cb 30       	cpi	r28, 0x0B	; 11
    551e:	a1 f1       	breq	.+104    	; 0x5588 <command_proc+0x126>
    5520:	d0 f4       	brcc	.+52     	; 0x5556 <command_proc+0xf4>
    5522:	c7 30       	cpi	r28, 0x07	; 7
    5524:	09 f0       	breq	.+2      	; 0x5528 <command_proc+0xc6>
    5526:	e8 c0       	rjmp	.+464    	; 0x56f8 <command_proc+0x296>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    5528:	8e e1       	ldi	r24, 0x1E	; 30
    552a:	80 93 14 01 	sts	0x0114, r24
            mk_interval = MOUSEKEY_INTERVAL;
    552e:	82 e3       	ldi	r24, 0x32	; 50
    5530:	80 93 13 01 	sts	0x0113, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    5534:	8a e0       	ldi	r24, 0x0A	; 10
    5536:	80 93 12 01 	sts	0x0112, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    553a:	84 e1       	ldi	r24, 0x14	; 20
    553c:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    5540:	88 e0       	ldi	r24, 0x08	; 8
    5542:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    5546:	88 e2       	ldi	r24, 0x28	; 40
    5548:	80 93 0f 01 	sts	0x010F, r24
            print("set default values.\n");
    554c:	88 eb       	ldi	r24, 0xB8	; 184
    554e:	96 e0       	ldi	r25, 0x06	; 6
    5550:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    5554:	d6 c0       	rjmp	.+428    	; 0x5702 <command_proc+0x2a0>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5556:	c3 31       	cpi	r28, 0x13	; 19
    5558:	41 f1       	breq	.+80     	; 0x55aa <command_proc+0x148>
    555a:	c4 31       	cpi	r28, 0x14	; 20
    555c:	c1 f0       	breq	.+48     	; 0x558e <command_proc+0x12c>
    555e:	cc c0       	rjmp	.+408    	; 0x56f8 <command_proc+0x296>
    5560:	cb 34       	cpi	r28, 0x4B	; 75
    5562:	09 f4       	brne	.+2      	; 0x5566 <command_proc+0x104>
    5564:	be c0       	rjmp	.+380    	; 0x56e2 <command_proc+0x280>
    5566:	28 f4       	brcc	.+10     	; 0x5572 <command_proc+0x110>
    5568:	c9 32       	cpi	r28, 0x29	; 41
    556a:	89 f0       	breq	.+34     	; 0x558e <command_proc+0x12c>
    556c:	c8 33       	cpi	r28, 0x38	; 56
    556e:	61 f0       	breq	.+24     	; 0x5588 <command_proc+0x126>
    5570:	c3 c0       	rjmp	.+390    	; 0x56f8 <command_proc+0x296>
    5572:	c1 35       	cpi	r28, 0x51	; 81
    5574:	09 f4       	brne	.+2      	; 0x5578 <command_proc+0x116>
    5576:	b3 c0       	rjmp	.+358    	; 0x56de <command_proc+0x27c>
    5578:	c2 35       	cpi	r28, 0x52	; 82
    557a:	09 f4       	brne	.+2      	; 0x557e <command_proc+0x11c>
    557c:	ae c0       	rjmp	.+348    	; 0x56da <command_proc+0x278>
    557e:	ce 34       	cpi	r28, 0x4E	; 78
    5580:	09 f0       	breq	.+2      	; 0x5584 <command_proc+0x122>
    5582:	ba c0       	rjmp	.+372    	; 0x56f8 <command_proc+0x296>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5584:	6a e0       	ldi	r22, 0x0A	; 10
    5586:	b3 c0       	rjmp	.+358    	; 0x56ee <command_proc+0x28c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    5588:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <mousekey_console_help>
    558c:	ba c0       	rjmp	.+372    	; 0x5702 <command_proc+0x2a0>
            break;
        case KC_Q:
        case KC_ESC:
            mousekey_param = 0;
    558e:	10 92 d7 01 	sts	0x01D7, r1
            print("\nQuit Mousekey Console\n");
    5592:	8b ee       	ldi	r24, 0xEB	; 235
    5594:	96 e0       	ldi	r25, 0x06	; 6
    5596:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
            print("C> ");
    559a:	87 ee       	ldi	r24, 0xE7	; 231
    559c:	96 e0       	ldi	r25, 0x06	; 6
    559e:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
            command_state = CONSOLE;
    55a2:	81 e0       	ldi	r24, 0x01	; 1
    55a4:	80 93 d4 01 	sts	0x01D4, r24
    55a8:	ca c0       	rjmp	.+404    	; 0x573e <command_proc+0x2dc>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\n----- Mousekey Parameters -----\n");
    55aa:	8b e8       	ldi	r24, 0x8B	; 139
    55ac:	96 e0       	ldi	r25, 0x06	; 6
    55ae:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("1: mk_delay(*10ms): "); pdec(mk_delay); print("\n");
    55b2:	86 e7       	ldi	r24, 0x76	; 118
    55b4:	96 e0       	ldi	r25, 0x06	; 6
    55b6:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    55ba:	80 91 14 01 	lds	r24, 0x0114
    55be:	1f 92       	push	r1
    55c0:	8f 93       	push	r24
    55c2:	83 e7       	ldi	r24, 0x73	; 115
    55c4:	96 e0       	ldi	r25, 0x06	; 6
    55c6:	9f 93       	push	r25
    55c8:	8f 93       	push	r24
    55ca:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    55ce:	81 e7       	ldi	r24, 0x71	; 113
    55d0:	96 e0       	ldi	r25, 0x06	; 6
    55d2:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("2: mk_interval(ms): "); pdec(mk_interval); print("\n");
    55d6:	8c e5       	ldi	r24, 0x5C	; 92
    55d8:	96 e0       	ldi	r25, 0x06	; 6
    55da:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    55de:	80 91 13 01 	lds	r24, 0x0113
    55e2:	1f 92       	push	r1
    55e4:	8f 93       	push	r24
    55e6:	89 e5       	ldi	r24, 0x59	; 89
    55e8:	96 e0       	ldi	r25, 0x06	; 6
    55ea:	9f 93       	push	r25
    55ec:	8f 93       	push	r24
    55ee:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    55f2:	87 e5       	ldi	r24, 0x57	; 87
    55f4:	96 e0       	ldi	r25, 0x06	; 6
    55f6:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("3: mk_max_speed: "); pdec(mk_max_speed); print("\n");
    55fa:	85 e4       	ldi	r24, 0x45	; 69
    55fc:	96 e0       	ldi	r25, 0x06	; 6
    55fe:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    5602:	80 91 12 01 	lds	r24, 0x0112
    5606:	1f 92       	push	r1
    5608:	8f 93       	push	r24
    560a:	82 e4       	ldi	r24, 0x42	; 66
    560c:	96 e0       	ldi	r25, 0x06	; 6
    560e:	9f 93       	push	r25
    5610:	8f 93       	push	r24
    5612:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    5616:	80 e4       	ldi	r24, 0x40	; 64
    5618:	96 e0       	ldi	r25, 0x06	; 6
    561a:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("4: mk_time_to_max: "); pdec(mk_time_to_max); print("\n");
    561e:	8c e2       	ldi	r24, 0x2C	; 44
    5620:	96 e0       	ldi	r25, 0x06	; 6
    5622:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    5626:	80 91 11 01 	lds	r24, 0x0111
    562a:	1f 92       	push	r1
    562c:	8f 93       	push	r24
    562e:	89 e2       	ldi	r24, 0x29	; 41
    5630:	96 e0       	ldi	r25, 0x06	; 6
    5632:	9f 93       	push	r25
    5634:	8f 93       	push	r24
    5636:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    563a:	87 e2       	ldi	r24, 0x27	; 39
    563c:	96 e0       	ldi	r25, 0x06	; 6
    563e:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("5: mk_wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5642:	8f e0       	ldi	r24, 0x0F	; 15
    5644:	96 e0       	ldi	r25, 0x06	; 6
    5646:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    564a:	80 91 10 01 	lds	r24, 0x0110
    564e:	1f 92       	push	r1
    5650:	8f 93       	push	r24
    5652:	8c e0       	ldi	r24, 0x0C	; 12
    5654:	96 e0       	ldi	r25, 0x06	; 6
    5656:	9f 93       	push	r25
    5658:	8f 93       	push	r24
    565a:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    565e:	8a e0       	ldi	r24, 0x0A	; 10
    5660:	96 e0       	ldi	r25, 0x06	; 6
    5662:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    print("6: mk_wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5666:	80 ef       	ldi	r24, 0xF0	; 240
    5668:	95 e0       	ldi	r25, 0x05	; 5
    566a:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    566e:	80 91 0f 01 	lds	r24, 0x010F
    5672:	1f 92       	push	r1
    5674:	8f 93       	push	r24
    5676:	8d ee       	ldi	r24, 0xED	; 237
    5678:	95 e0       	ldi	r25, 0x05	; 5
    567a:	9f 93       	push	r25
    567c:	8f 93       	push	r24
    567e:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    5682:	8b ee       	ldi	r24, 0xEB	; 235
    5684:	95 e0       	ldi	r25, 0x05	; 5
    5686:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    568a:	8d b7       	in	r24, 0x3d	; 61
    568c:	9e b7       	in	r25, 0x3e	; 62
    568e:	48 96       	adiw	r24, 0x18	; 24
    5690:	0f b6       	in	r0, 0x3f	; 63
    5692:	f8 94       	cli
    5694:	9e bf       	out	0x3e, r25	; 62
    5696:	0f be       	out	0x3f, r0	; 63
    5698:	8d bf       	out	0x3d, r24	; 61
    569a:	33 c0       	rjmp	.+102    	; 0x5702 <command_proc+0x2a0>
    569c:	ce 51       	subi	r28, 0x1E	; 30
    569e:	ec 2f       	mov	r30, r28
    56a0:	f0 e0       	ldi	r31, 0x00	; 0
    56a2:	e2 5d       	subi	r30, 0xD2	; 210
    56a4:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_6:
        case KC_7:
        case KC_8:
        case KC_9:
        case KC_0:
            mousekey_param = numkey2num(code);
    56a6:	80 81       	ld	r24, Z
    56a8:	80 93 d7 01 	sts	0x01D7, r24
            print("selected parameter: "); pdec(mousekey_param); print("\n");
    56ac:	82 ed       	ldi	r24, 0xD2	; 210
    56ae:	96 e0       	ldi	r25, 0x06	; 6
    56b0:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    56b4:	80 91 d7 01 	lds	r24, 0x01D7
    56b8:	1f 92       	push	r1
    56ba:	8f 93       	push	r24
    56bc:	8f ec       	ldi	r24, 0xCF	; 207
    56be:	96 e0       	ldi	r25, 0x06	; 6
    56c0:	9f 93       	push	r25
    56c2:	8f 93       	push	r24
    56c4:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    56c8:	8d ec       	ldi	r24, 0xCD	; 205
    56ca:	96 e0       	ldi	r25, 0x06	; 6
    56cc:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    56d0:	0f 90       	pop	r0
    56d2:	0f 90       	pop	r0
    56d4:	0f 90       	pop	r0
    56d6:	0f 90       	pop	r0
    56d8:	14 c0       	rjmp	.+40     	; 0x5702 <command_proc+0x2a0>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    56da:	61 e0       	ldi	r22, 0x01	; 1
    56dc:	03 c0       	rjmp	.+6      	; 0x56e4 <command_proc+0x282>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    56de:	61 e0       	ldi	r22, 0x01	; 1
    56e0:	06 c0       	rjmp	.+12     	; 0x56ee <command_proc+0x28c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    56e2:	6a e0       	ldi	r22, 0x0A	; 10
    56e4:	80 91 d7 01 	lds	r24, 0x01D7
    56e8:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <mousekey_param_inc>
    56ec:	0a c0       	rjmp	.+20     	; 0x5702 <command_proc+0x2a0>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    56ee:	80 91 d7 01 	lds	r24, 0x01D7
    56f2:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <mousekey_param_dec>
    56f6:	05 c0       	rjmp	.+10     	; 0x5702 <command_proc+0x2a0>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default values.\n");
            break;
        default:
            print("?");
    56f8:	86 eb       	ldi	r24, 0xB6	; 182
    56fa:	96 e0       	ldi	r25, 0x06	; 6
    56fc:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    5700:	16 c0       	rjmp	.+44     	; 0x572e <command_proc+0x2cc>
            return false;
    }
    print("M"); pdec(mousekey_param); print("> ");
    5702:	84 eb       	ldi	r24, 0xB4	; 180
    5704:	96 e0       	ldi	r25, 0x06	; 6
    5706:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    570a:	80 91 d7 01 	lds	r24, 0x01D7
    570e:	1f 92       	push	r1
    5710:	8f 93       	push	r24
    5712:	81 eb       	ldi	r24, 0xB1	; 177
    5714:	96 e0       	ldi	r25, 0x06	; 6
    5716:	9f 93       	push	r25
    5718:	8f 93       	push	r24
    571a:	0e 94 aa 08 	call	0x1154	; 0x1154 <__xprintf>
    571e:	8e ea       	ldi	r24, 0xAE	; 174
    5720:	96 e0       	ldi	r25, 0x06	; 6
    5722:	0e 94 11 08 	call	0x1022	; 0x1022 <xputs>
    5726:	0f 90       	pop	r0
    5728:	0f 90       	pop	r0
    572a:	0f 90       	pop	r0
    572c:	0f 90       	pop	r0
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    572e:	81 e0       	ldi	r24, 0x01	; 1
    5730:	06 c0       	rjmp	.+12     	; 0x573e <command_proc+0x2dc>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    5732:	10 92 d4 01 	sts	0x01D4, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    5736:	80 e0       	ldi	r24, 0x00	; 0
    5738:	02 c0       	rjmp	.+4      	; 0x573e <command_proc+0x2dc>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    573a:	80 e0       	ldi	r24, 0x00	; 0
    573c:	e8 ce       	rjmp	.-560    	; 0x550e <command_proc+0xac>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    573e:	cf 91       	pop	r28
    5740:	08 95       	ret

00005742 <__fixsfsi>:
    5742:	04 d0       	rcall	.+8      	; 0x574c <__fixunssfsi>
    5744:	68 94       	set
    5746:	b1 11       	cpse	r27, r1
    5748:	8d c0       	rjmp	.+282    	; 0x5864 <__fp_szero>
    574a:	08 95       	ret

0000574c <__fixunssfsi>:
    574c:	70 d0       	rcall	.+224    	; 0x582e <__fp_splitA>
    574e:	88 f0       	brcs	.+34     	; 0x5772 <__fixunssfsi+0x26>
    5750:	9f 57       	subi	r25, 0x7F	; 127
    5752:	90 f0       	brcs	.+36     	; 0x5778 <__fixunssfsi+0x2c>
    5754:	b9 2f       	mov	r27, r25
    5756:	99 27       	eor	r25, r25
    5758:	b7 51       	subi	r27, 0x17	; 23
    575a:	a0 f0       	brcs	.+40     	; 0x5784 <__fixunssfsi+0x38>
    575c:	d1 f0       	breq	.+52     	; 0x5792 <__fixunssfsi+0x46>
    575e:	66 0f       	add	r22, r22
    5760:	77 1f       	adc	r23, r23
    5762:	88 1f       	adc	r24, r24
    5764:	99 1f       	adc	r25, r25
    5766:	1a f0       	brmi	.+6      	; 0x576e <__fixunssfsi+0x22>
    5768:	ba 95       	dec	r27
    576a:	c9 f7       	brne	.-14     	; 0x575e <__fixunssfsi+0x12>
    576c:	12 c0       	rjmp	.+36     	; 0x5792 <__fixunssfsi+0x46>
    576e:	b1 30       	cpi	r27, 0x01	; 1
    5770:	81 f0       	breq	.+32     	; 0x5792 <__fixunssfsi+0x46>
    5772:	77 d0       	rcall	.+238    	; 0x5862 <__fp_zero>
    5774:	b1 e0       	ldi	r27, 0x01	; 1
    5776:	08 95       	ret
    5778:	74 c0       	rjmp	.+232    	; 0x5862 <__fp_zero>
    577a:	67 2f       	mov	r22, r23
    577c:	78 2f       	mov	r23, r24
    577e:	88 27       	eor	r24, r24
    5780:	b8 5f       	subi	r27, 0xF8	; 248
    5782:	39 f0       	breq	.+14     	; 0x5792 <__fixunssfsi+0x46>
    5784:	b9 3f       	cpi	r27, 0xF9	; 249
    5786:	cc f3       	brlt	.-14     	; 0x577a <__fixunssfsi+0x2e>
    5788:	86 95       	lsr	r24
    578a:	77 95       	ror	r23
    578c:	67 95       	ror	r22
    578e:	b3 95       	inc	r27
    5790:	d9 f7       	brne	.-10     	; 0x5788 <__fixunssfsi+0x3c>
    5792:	3e f4       	brtc	.+14     	; 0x57a2 <__fixunssfsi+0x56>
    5794:	90 95       	com	r25
    5796:	80 95       	com	r24
    5798:	70 95       	com	r23
    579a:	61 95       	neg	r22
    579c:	7f 4f       	sbci	r23, 0xFF	; 255
    579e:	8f 4f       	sbci	r24, 0xFF	; 255
    57a0:	9f 4f       	sbci	r25, 0xFF	; 255
    57a2:	08 95       	ret

000057a4 <__floatunsisf>:
    57a4:	e8 94       	clt
    57a6:	09 c0       	rjmp	.+18     	; 0x57ba <__floatsisf+0x12>

000057a8 <__floatsisf>:
    57a8:	97 fb       	bst	r25, 7
    57aa:	3e f4       	brtc	.+14     	; 0x57ba <__floatsisf+0x12>
    57ac:	90 95       	com	r25
    57ae:	80 95       	com	r24
    57b0:	70 95       	com	r23
    57b2:	61 95       	neg	r22
    57b4:	7f 4f       	sbci	r23, 0xFF	; 255
    57b6:	8f 4f       	sbci	r24, 0xFF	; 255
    57b8:	9f 4f       	sbci	r25, 0xFF	; 255
    57ba:	99 23       	and	r25, r25
    57bc:	a9 f0       	breq	.+42     	; 0x57e8 <__floatsisf+0x40>
    57be:	f9 2f       	mov	r31, r25
    57c0:	96 e9       	ldi	r25, 0x96	; 150
    57c2:	bb 27       	eor	r27, r27
    57c4:	93 95       	inc	r25
    57c6:	f6 95       	lsr	r31
    57c8:	87 95       	ror	r24
    57ca:	77 95       	ror	r23
    57cc:	67 95       	ror	r22
    57ce:	b7 95       	ror	r27
    57d0:	f1 11       	cpse	r31, r1
    57d2:	f8 cf       	rjmp	.-16     	; 0x57c4 <__floatsisf+0x1c>
    57d4:	fa f4       	brpl	.+62     	; 0x5814 <__floatsisf+0x6c>
    57d6:	bb 0f       	add	r27, r27
    57d8:	11 f4       	brne	.+4      	; 0x57de <__floatsisf+0x36>
    57da:	60 ff       	sbrs	r22, 0
    57dc:	1b c0       	rjmp	.+54     	; 0x5814 <__floatsisf+0x6c>
    57de:	6f 5f       	subi	r22, 0xFF	; 255
    57e0:	7f 4f       	sbci	r23, 0xFF	; 255
    57e2:	8f 4f       	sbci	r24, 0xFF	; 255
    57e4:	9f 4f       	sbci	r25, 0xFF	; 255
    57e6:	16 c0       	rjmp	.+44     	; 0x5814 <__floatsisf+0x6c>
    57e8:	88 23       	and	r24, r24
    57ea:	11 f0       	breq	.+4      	; 0x57f0 <__floatsisf+0x48>
    57ec:	96 e9       	ldi	r25, 0x96	; 150
    57ee:	11 c0       	rjmp	.+34     	; 0x5812 <__floatsisf+0x6a>
    57f0:	77 23       	and	r23, r23
    57f2:	21 f0       	breq	.+8      	; 0x57fc <__floatsisf+0x54>
    57f4:	9e e8       	ldi	r25, 0x8E	; 142
    57f6:	87 2f       	mov	r24, r23
    57f8:	76 2f       	mov	r23, r22
    57fa:	05 c0       	rjmp	.+10     	; 0x5806 <__floatsisf+0x5e>
    57fc:	66 23       	and	r22, r22
    57fe:	71 f0       	breq	.+28     	; 0x581c <__floatsisf+0x74>
    5800:	96 e8       	ldi	r25, 0x86	; 134
    5802:	86 2f       	mov	r24, r22
    5804:	70 e0       	ldi	r23, 0x00	; 0
    5806:	60 e0       	ldi	r22, 0x00	; 0
    5808:	2a f0       	brmi	.+10     	; 0x5814 <__floatsisf+0x6c>
    580a:	9a 95       	dec	r25
    580c:	66 0f       	add	r22, r22
    580e:	77 1f       	adc	r23, r23
    5810:	88 1f       	adc	r24, r24
    5812:	da f7       	brpl	.-10     	; 0x580a <__floatsisf+0x62>
    5814:	88 0f       	add	r24, r24
    5816:	96 95       	lsr	r25
    5818:	87 95       	ror	r24
    581a:	97 f9       	bld	r25, 7
    581c:	08 95       	ret

0000581e <__fp_split3>:
    581e:	57 fd       	sbrc	r21, 7
    5820:	90 58       	subi	r25, 0x80	; 128
    5822:	44 0f       	add	r20, r20
    5824:	55 1f       	adc	r21, r21
    5826:	59 f0       	breq	.+22     	; 0x583e <__fp_splitA+0x10>
    5828:	5f 3f       	cpi	r21, 0xFF	; 255
    582a:	71 f0       	breq	.+28     	; 0x5848 <__fp_splitA+0x1a>
    582c:	47 95       	ror	r20

0000582e <__fp_splitA>:
    582e:	88 0f       	add	r24, r24
    5830:	97 fb       	bst	r25, 7
    5832:	99 1f       	adc	r25, r25
    5834:	61 f0       	breq	.+24     	; 0x584e <__fp_splitA+0x20>
    5836:	9f 3f       	cpi	r25, 0xFF	; 255
    5838:	79 f0       	breq	.+30     	; 0x5858 <__fp_splitA+0x2a>
    583a:	87 95       	ror	r24
    583c:	08 95       	ret
    583e:	12 16       	cp	r1, r18
    5840:	13 06       	cpc	r1, r19
    5842:	14 06       	cpc	r1, r20
    5844:	55 1f       	adc	r21, r21
    5846:	f2 cf       	rjmp	.-28     	; 0x582c <__fp_split3+0xe>
    5848:	46 95       	lsr	r20
    584a:	f1 df       	rcall	.-30     	; 0x582e <__fp_splitA>
    584c:	08 c0       	rjmp	.+16     	; 0x585e <__fp_splitA+0x30>
    584e:	16 16       	cp	r1, r22
    5850:	17 06       	cpc	r1, r23
    5852:	18 06       	cpc	r1, r24
    5854:	99 1f       	adc	r25, r25
    5856:	f1 cf       	rjmp	.-30     	; 0x583a <__fp_splitA+0xc>
    5858:	86 95       	lsr	r24
    585a:	71 05       	cpc	r23, r1
    585c:	61 05       	cpc	r22, r1
    585e:	08 94       	sec
    5860:	08 95       	ret

00005862 <__fp_zero>:
    5862:	e8 94       	clt

00005864 <__fp_szero>:
    5864:	bb 27       	eor	r27, r27
    5866:	66 27       	eor	r22, r22
    5868:	77 27       	eor	r23, r23
    586a:	cb 01       	movw	r24, r22
    586c:	97 f9       	bld	r25, 7
    586e:	08 95       	ret

00005870 <__mulsf3>:
    5870:	0b d0       	rcall	.+22     	; 0x5888 <__mulsf3x>
    5872:	78 c0       	rjmp	.+240    	; 0x5964 <__fp_round>
    5874:	69 d0       	rcall	.+210    	; 0x5948 <__fp_pscA>
    5876:	28 f0       	brcs	.+10     	; 0x5882 <__mulsf3+0x12>
    5878:	6e d0       	rcall	.+220    	; 0x5956 <__fp_pscB>
    587a:	18 f0       	brcs	.+6      	; 0x5882 <__mulsf3+0x12>
    587c:	95 23       	and	r25, r21
    587e:	09 f0       	breq	.+2      	; 0x5882 <__mulsf3+0x12>
    5880:	5a c0       	rjmp	.+180    	; 0x5936 <__fp_inf>
    5882:	5f c0       	rjmp	.+190    	; 0x5942 <__fp_nan>
    5884:	11 24       	eor	r1, r1
    5886:	ee cf       	rjmp	.-36     	; 0x5864 <__fp_szero>

00005888 <__mulsf3x>:
    5888:	ca df       	rcall	.-108    	; 0x581e <__fp_split3>
    588a:	a0 f3       	brcs	.-24     	; 0x5874 <__mulsf3+0x4>

0000588c <__mulsf3_pse>:
    588c:	95 9f       	mul	r25, r21
    588e:	d1 f3       	breq	.-12     	; 0x5884 <__mulsf3+0x14>
    5890:	95 0f       	add	r25, r21
    5892:	50 e0       	ldi	r21, 0x00	; 0
    5894:	55 1f       	adc	r21, r21
    5896:	62 9f       	mul	r22, r18
    5898:	f0 01       	movw	r30, r0
    589a:	72 9f       	mul	r23, r18
    589c:	bb 27       	eor	r27, r27
    589e:	f0 0d       	add	r31, r0
    58a0:	b1 1d       	adc	r27, r1
    58a2:	63 9f       	mul	r22, r19
    58a4:	aa 27       	eor	r26, r26
    58a6:	f0 0d       	add	r31, r0
    58a8:	b1 1d       	adc	r27, r1
    58aa:	aa 1f       	adc	r26, r26
    58ac:	64 9f       	mul	r22, r20
    58ae:	66 27       	eor	r22, r22
    58b0:	b0 0d       	add	r27, r0
    58b2:	a1 1d       	adc	r26, r1
    58b4:	66 1f       	adc	r22, r22
    58b6:	82 9f       	mul	r24, r18
    58b8:	22 27       	eor	r18, r18
    58ba:	b0 0d       	add	r27, r0
    58bc:	a1 1d       	adc	r26, r1
    58be:	62 1f       	adc	r22, r18
    58c0:	73 9f       	mul	r23, r19
    58c2:	b0 0d       	add	r27, r0
    58c4:	a1 1d       	adc	r26, r1
    58c6:	62 1f       	adc	r22, r18
    58c8:	83 9f       	mul	r24, r19
    58ca:	a0 0d       	add	r26, r0
    58cc:	61 1d       	adc	r22, r1
    58ce:	22 1f       	adc	r18, r18
    58d0:	74 9f       	mul	r23, r20
    58d2:	33 27       	eor	r19, r19
    58d4:	a0 0d       	add	r26, r0
    58d6:	61 1d       	adc	r22, r1
    58d8:	23 1f       	adc	r18, r19
    58da:	84 9f       	mul	r24, r20
    58dc:	60 0d       	add	r22, r0
    58de:	21 1d       	adc	r18, r1
    58e0:	82 2f       	mov	r24, r18
    58e2:	76 2f       	mov	r23, r22
    58e4:	6a 2f       	mov	r22, r26
    58e6:	11 24       	eor	r1, r1
    58e8:	9f 57       	subi	r25, 0x7F	; 127
    58ea:	50 40       	sbci	r21, 0x00	; 0
    58ec:	8a f0       	brmi	.+34     	; 0x5910 <__mulsf3_pse+0x84>
    58ee:	e1 f0       	breq	.+56     	; 0x5928 <__mulsf3_pse+0x9c>
    58f0:	88 23       	and	r24, r24
    58f2:	4a f0       	brmi	.+18     	; 0x5906 <__mulsf3_pse+0x7a>
    58f4:	ee 0f       	add	r30, r30
    58f6:	ff 1f       	adc	r31, r31
    58f8:	bb 1f       	adc	r27, r27
    58fa:	66 1f       	adc	r22, r22
    58fc:	77 1f       	adc	r23, r23
    58fe:	88 1f       	adc	r24, r24
    5900:	91 50       	subi	r25, 0x01	; 1
    5902:	50 40       	sbci	r21, 0x00	; 0
    5904:	a9 f7       	brne	.-22     	; 0x58f0 <__mulsf3_pse+0x64>
    5906:	9e 3f       	cpi	r25, 0xFE	; 254
    5908:	51 05       	cpc	r21, r1
    590a:	70 f0       	brcs	.+28     	; 0x5928 <__mulsf3_pse+0x9c>
    590c:	14 c0       	rjmp	.+40     	; 0x5936 <__fp_inf>
    590e:	aa cf       	rjmp	.-172    	; 0x5864 <__fp_szero>
    5910:	5f 3f       	cpi	r21, 0xFF	; 255
    5912:	ec f3       	brlt	.-6      	; 0x590e <__mulsf3_pse+0x82>
    5914:	98 3e       	cpi	r25, 0xE8	; 232
    5916:	dc f3       	brlt	.-10     	; 0x590e <__mulsf3_pse+0x82>
    5918:	86 95       	lsr	r24
    591a:	77 95       	ror	r23
    591c:	67 95       	ror	r22
    591e:	b7 95       	ror	r27
    5920:	f7 95       	ror	r31
    5922:	e7 95       	ror	r30
    5924:	9f 5f       	subi	r25, 0xFF	; 255
    5926:	c1 f7       	brne	.-16     	; 0x5918 <__mulsf3_pse+0x8c>
    5928:	fe 2b       	or	r31, r30
    592a:	88 0f       	add	r24, r24
    592c:	91 1d       	adc	r25, r1
    592e:	96 95       	lsr	r25
    5930:	87 95       	ror	r24
    5932:	97 f9       	bld	r25, 7
    5934:	08 95       	ret

00005936 <__fp_inf>:
    5936:	97 f9       	bld	r25, 7
    5938:	9f 67       	ori	r25, 0x7F	; 127
    593a:	80 e8       	ldi	r24, 0x80	; 128
    593c:	70 e0       	ldi	r23, 0x00	; 0
    593e:	60 e0       	ldi	r22, 0x00	; 0
    5940:	08 95       	ret

00005942 <__fp_nan>:
    5942:	9f ef       	ldi	r25, 0xFF	; 255
    5944:	80 ec       	ldi	r24, 0xC0	; 192
    5946:	08 95       	ret

00005948 <__fp_pscA>:
    5948:	00 24       	eor	r0, r0
    594a:	0a 94       	dec	r0
    594c:	16 16       	cp	r1, r22
    594e:	17 06       	cpc	r1, r23
    5950:	18 06       	cpc	r1, r24
    5952:	09 06       	cpc	r0, r25
    5954:	08 95       	ret

00005956 <__fp_pscB>:
    5956:	00 24       	eor	r0, r0
    5958:	0a 94       	dec	r0
    595a:	12 16       	cp	r1, r18
    595c:	13 06       	cpc	r1, r19
    595e:	14 06       	cpc	r1, r20
    5960:	05 06       	cpc	r0, r21
    5962:	08 95       	ret

00005964 <__fp_round>:
    5964:	09 2e       	mov	r0, r25
    5966:	03 94       	inc	r0
    5968:	00 0c       	add	r0, r0
    596a:	11 f4       	brne	.+4      	; 0x5970 <__fp_round+0xc>
    596c:	88 23       	and	r24, r24
    596e:	52 f0       	brmi	.+20     	; 0x5984 <__fp_round+0x20>
    5970:	bb 0f       	add	r27, r27
    5972:	40 f4       	brcc	.+16     	; 0x5984 <__fp_round+0x20>
    5974:	bf 2b       	or	r27, r31
    5976:	11 f4       	brne	.+4      	; 0x597c <__fp_round+0x18>
    5978:	60 ff       	sbrs	r22, 0
    597a:	04 c0       	rjmp	.+8      	; 0x5984 <__fp_round+0x20>
    597c:	6f 5f       	subi	r22, 0xFF	; 255
    597e:	7f 4f       	sbci	r23, 0xFF	; 255
    5980:	8f 4f       	sbci	r24, 0xFF	; 255
    5982:	9f 4f       	sbci	r25, 0xFF	; 255
    5984:	08 95       	ret

00005986 <__divmodhi4>:
    5986:	97 fb       	bst	r25, 7
    5988:	07 2e       	mov	r0, r23
    598a:	16 f4       	brtc	.+4      	; 0x5990 <__divmodhi4+0xa>
    598c:	00 94       	com	r0
    598e:	07 d0       	rcall	.+14     	; 0x599e <__divmodhi4_neg1>
    5990:	77 fd       	sbrc	r23, 7
    5992:	09 d0       	rcall	.+18     	; 0x59a6 <__divmodhi4_neg2>
    5994:	0e 94 dd 2c 	call	0x59ba	; 0x59ba <__udivmodhi4>
    5998:	07 fc       	sbrc	r0, 7
    599a:	05 d0       	rcall	.+10     	; 0x59a6 <__divmodhi4_neg2>
    599c:	3e f4       	brtc	.+14     	; 0x59ac <__divmodhi4_exit>

0000599e <__divmodhi4_neg1>:
    599e:	90 95       	com	r25
    59a0:	81 95       	neg	r24
    59a2:	9f 4f       	sbci	r25, 0xFF	; 255
    59a4:	08 95       	ret

000059a6 <__divmodhi4_neg2>:
    59a6:	70 95       	com	r23
    59a8:	61 95       	neg	r22
    59aa:	7f 4f       	sbci	r23, 0xFF	; 255

000059ac <__divmodhi4_exit>:
    59ac:	08 95       	ret

000059ae <__tablejump2__>:
    59ae:	ee 0f       	add	r30, r30
    59b0:	ff 1f       	adc	r31, r31

000059b2 <__tablejump__>:
    59b2:	05 90       	lpm	r0, Z+
    59b4:	f4 91       	lpm	r31, Z
    59b6:	e0 2d       	mov	r30, r0
    59b8:	09 94       	ijmp

000059ba <__udivmodhi4>:
    59ba:	aa 1b       	sub	r26, r26
    59bc:	bb 1b       	sub	r27, r27
    59be:	51 e1       	ldi	r21, 0x11	; 17
    59c0:	07 c0       	rjmp	.+14     	; 0x59d0 <__udivmodhi4_ep>

000059c2 <__udivmodhi4_loop>:
    59c2:	aa 1f       	adc	r26, r26
    59c4:	bb 1f       	adc	r27, r27
    59c6:	a6 17       	cp	r26, r22
    59c8:	b7 07       	cpc	r27, r23
    59ca:	10 f0       	brcs	.+4      	; 0x59d0 <__udivmodhi4_ep>
    59cc:	a6 1b       	sub	r26, r22
    59ce:	b7 0b       	sbc	r27, r23

000059d0 <__udivmodhi4_ep>:
    59d0:	88 1f       	adc	r24, r24
    59d2:	99 1f       	adc	r25, r25
    59d4:	5a 95       	dec	r21
    59d6:	a9 f7       	brne	.-22     	; 0x59c2 <__udivmodhi4_loop>
    59d8:	80 95       	com	r24
    59da:	90 95       	com	r25
    59dc:	bc 01       	movw	r22, r24
    59de:	cd 01       	movw	r24, r26
    59e0:	08 95       	ret

000059e2 <__eerd_byte_m32u4>:
    59e2:	f9 99       	sbic	0x1f, 1	; 31
    59e4:	fe cf       	rjmp	.-4      	; 0x59e2 <__eerd_byte_m32u4>
    59e6:	92 bd       	out	0x22, r25	; 34
    59e8:	81 bd       	out	0x21, r24	; 33
    59ea:	f8 9a       	sbi	0x1f, 0	; 31
    59ec:	99 27       	eor	r25, r25
    59ee:	80 b5       	in	r24, 0x20	; 32
    59f0:	08 95       	ret

000059f2 <__eerd_word_m32u4>:
    59f2:	a8 e1       	ldi	r26, 0x18	; 24
    59f4:	b0 e0       	ldi	r27, 0x00	; 0
    59f6:	42 e0       	ldi	r20, 0x02	; 2
    59f8:	50 e0       	ldi	r21, 0x00	; 0
    59fa:	0c 94 14 2d 	jmp	0x5a28	; 0x5a28 <__eerd_blraw_m32u4>

000059fe <__eewr_byte_m32u4>:
    59fe:	26 2f       	mov	r18, r22

00005a00 <__eewr_r18_m32u4>:
    5a00:	f9 99       	sbic	0x1f, 1	; 31
    5a02:	fe cf       	rjmp	.-4      	; 0x5a00 <__eewr_r18_m32u4>
    5a04:	1f ba       	out	0x1f, r1	; 31
    5a06:	92 bd       	out	0x22, r25	; 34
    5a08:	81 bd       	out	0x21, r24	; 33
    5a0a:	20 bd       	out	0x20, r18	; 32
    5a0c:	0f b6       	in	r0, 0x3f	; 63
    5a0e:	f8 94       	cli
    5a10:	fa 9a       	sbi	0x1f, 2	; 31
    5a12:	f9 9a       	sbi	0x1f, 1	; 31
    5a14:	0f be       	out	0x3f, r0	; 63
    5a16:	01 96       	adiw	r24, 0x01	; 1
    5a18:	08 95       	ret

00005a1a <__eewr_word_m32u4>:
    5a1a:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <__eewr_byte_m32u4>
    5a1e:	27 2f       	mov	r18, r23
    5a20:	0c 94 00 2d 	jmp	0x5a00	; 0x5a00 <__eewr_r18_m32u4>

00005a24 <__eerd_block_m32u4>:
    5a24:	dc 01       	movw	r26, r24
    5a26:	cb 01       	movw	r24, r22

00005a28 <__eerd_blraw_m32u4>:
    5a28:	fc 01       	movw	r30, r24
    5a2a:	f9 99       	sbic	0x1f, 1	; 31
    5a2c:	fe cf       	rjmp	.-4      	; 0x5a2a <__eerd_blraw_m32u4+0x2>
    5a2e:	06 c0       	rjmp	.+12     	; 0x5a3c <__eerd_blraw_m32u4+0x14>
    5a30:	f2 bd       	out	0x22, r31	; 34
    5a32:	e1 bd       	out	0x21, r30	; 33
    5a34:	f8 9a       	sbi	0x1f, 0	; 31
    5a36:	31 96       	adiw	r30, 0x01	; 1
    5a38:	00 b4       	in	r0, 0x20	; 32
    5a3a:	0d 92       	st	X+, r0
    5a3c:	41 50       	subi	r20, 0x01	; 1
    5a3e:	50 40       	sbci	r21, 0x00	; 0
    5a40:	b8 f7       	brcc	.-18     	; 0x5a30 <__eerd_blraw_m32u4+0x8>
    5a42:	08 95       	ret

00005a44 <_exit>:
    5a44:	f8 94       	cli

00005a46 <__stop_program>:
    5a46:	ff cf       	rjmp	.-2      	; 0x5a46 <__stop_program>

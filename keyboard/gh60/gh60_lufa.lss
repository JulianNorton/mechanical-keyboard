
gh60_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00005a06  00005a9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005a06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ae  00800138  00800138  00005ad2  2**0
                  ALLOC
  3 .noinit       00000004  008001e6  008001e6  00005ad2  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000097  00000000  00000000  0000638c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00006423  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000b08  00000000  00000000  00006438  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00010403  00000000  00000000  00006f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003e84  00000000  00000000  00017343  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005727  00000000  00000000  0001b1c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001cd0  00000000  00000000  000208f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000045b9  00000000  00000000  000225c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008e25  00000000  00000000  00026b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c98  00000000  00000000  0002f99e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
       0:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__ctors_end>
       4:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
       8:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
       c:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      10:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      14:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      18:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
	uint8_t ErrorCode;

	while (*BytesRem)
      1c:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      20:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      24:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
      28:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <__vector_10>
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
      2c:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__vector_11>
      30:	0c 94 cc 1f 	jmp	0x3f98	; 0x3f98 <__vector_12>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
      34:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      38:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      3c:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
      40:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
			{
				*CurrConfigLoc = PrevDescLoc;
      44:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
				*BytesRem      = PrevBytesRem;
      48:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      4c:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
      50:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      54:	0c 94 33 20 	jmp	0x4066	; 0x4066 <__vector_21>
      58:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      5c:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      60:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      64:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      68:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      70:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      74:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      78:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      7c:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
      80:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      84:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      88:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
      8c:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      90:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      94:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
      98:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      a0:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      a4:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a8:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__bad_interrupt>
      ac:	8a 10       	cpse	r8, r10
      ae:	ac 10       	cpse	r10, r12
      b0:	98 11       	cpse	r25, r8
      b2:	ac 10       	cpse	r10, r12
      b4:	98 11       	cpse	r25, r8
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	ee 10       	cpse	r14, r14
      b8:	12 11       	cpse	r17, r2
      ba:	98 11       	cpse	r25, r8
      bc:	67 11       	cpse	r22, r7
      be:	7a 11       	cpse	r23, r10
      c0:	c4 14       	cp	r12, r4
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	c4 14       	cp	r12, r4
      c4:	f2 14       	cp	r15, r2
      c6:	f2 14       	cp	r15, r2
      c8:	47 15       	cp	r20, r7
      ca:	83 15       	cp	r24, r3
      cc:	74 17       	cp	r23, r20
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	74 17       	cp	r23, r20
      d0:	9b 15       	cp	r25, r11
      d2:	74 17       	cp	r23, r20
      d4:	92 16       	cp	r9, r18
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	92 16       	cp	r9, r18
      d8:	4e 17       	cp	r20, r30
      da:	74 17       	cp	r23, r20
      dc:	74 17       	cp	r23, r20
      de:	62 17       	cp	r22, r18
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	f3 28       	or	r15, r3
      e2:	1b 29       	or	r17, r11
      e4:	5a 27       	eor	r21, r26
      e6:	04 2a       	or	r0, r20
      e8:	04 2a       	or	r0, r20
      ea:	a8 28       	or	r10, r8
      ec:	04 2a       	or	r0, r20
      ee:	04 2a       	or	r0, r20
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
      f0:	47 29       	or	r20, r7
      f2:	04 2a       	or	r0, r20
      f4:	5a 29       	or	r21, r10
		ReportSize--;
      f6:	cf 29       	or	r28, r15
      f8:	04 2a       	or	r0, r20
	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;
      fa:	04 2a       	or	r0, r20
      fc:	04 2a       	or	r0, r20
      fe:	04 2a       	or	r0, r20
     100:	a4 29       	or	r26, r4
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     102:	8b 29       	or	r24, r11
     104:	04 2a       	or	r0, r20
     106:	74 29       	or	r23, r4
     108:	04 2a       	or	r0, r20
     10a:	34 29       	or	r19, r4
     10c:	04 2a       	or	r0, r20
     10e:	04 2a       	or	r0, r20
     110:	fe 29       	or	r31, r14
     112:	fe 29       	or	r31, r14
     114:	fe 29       	or	r31, r14
     116:	fe 29       	or	r31, r14
     118:	fe 29       	or	r31, r14
     11a:	fe 29       	or	r31, r14
     11c:	fe 29       	or	r31, r14
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     11e:	fe 29       	or	r31, r14
     120:	fe 29       	or	r31, r14
     122:	fc 29       	or	r31, r12
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     124:	04 2a       	or	r0, r20
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	fc 29       	or	r31, r12
     128:	04 2a       	or	r0, r20
     12a:	04 2a       	or	r0, r20
     12c:	04 2a       	or	r0, r20
     12e:	04 2a       	or	r0, r20
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     130:	04 2a       	or	r0, r20
     132:	04 2a       	or	r0, r20
     134:	04 2a       	or	r0, r20
     136:	04 2a       	or	r0, r20
     138:	04 2a       	or	r0, r20
     13a:	04 2a       	or	r0, r20
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     13c:	04 2a       	or	r0, r20
     13e:	fc 29       	or	r31, r12
				ReportData     += 4;
     140:	04 2a       	or	r0, r20
     142:	04 2a       	or	r0, r20
     144:	a8 28       	or	r10, r8
				break;
     146:	89 28       	or	r8, r9
			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     148:	00 2a       	or	r0, r16
     14a:	00 2a       	or	r0, r16
     14c:	00 2a       	or	r0, r16
     14e:	00 2a       	or	r0, r16
     150:	00 2a       	or	r0, r16
     152:	00 2a       	or	r0, r16
     154:	00 2a       	or	r0, r16
     156:	00 2a       	or	r0, r16
     158:	00 2a       	or	r0, r16
				ReportSize     -= 2;
     15a:	00 2a       	or	r0, r16
     15c:	00 2a       	or	r0, r16
				ReportData     += 2;
     15e:	00 2a       	or	r0, r16
     160:	e1 29       	or	r30, r1
     162:	04 2a       	or	r0, r20
				break;
     164:	07 29       	or	r16, r7

00000166 <__trampolines_end>:
			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     166:	0a 00       	.word	0x000a	; ????

00000168 <__c.2365>:
     168:	25 30 31 36 62 00                                   %016b.

0000016e <__c.2363>:
     16e:	3a 20 00                                            : .

00000171 <__c.2361>:
     171:	25 30 32 58 00                                      %02X.

00000176 <__c.2358>:
				ReportSize     -= 1;
				ReportData     += 1;
     176:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     186:	42 43 44 45 46 0a 00                                BCDEF..

0000018d <__c.2331>:
     18d:	0a 00                                               ..

0000018f <__c.2329>:
     18f:	25 30 32 58 00                                      %02X.

00000194 <__c.2327>:
     194:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

0000019e <__c.4678>:
     19e:	5b 73 5d 00                                         [s].

000001a2 <__c.4676>:
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1a2:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1b2:	00                                                  .

000001b3 <__c.4674>:
     1b3:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     1c3:	00                                                  .

000001c4 <__c.4582>:
     1c4:	5b 57 5d 00                                         [W].

000001c8 <__c.4578>:
     1c8:	5b 53 5d 00                                         [S].

000001cc <__c.4574>:
     1cc:	5b 52 5d 00                                         [R].

000001d0 <__c.4569>:
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1d0:	5b 44 5d 00                                         [D].

000001d4 <__c.4564>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1d4:	5b 43 5d 00                                         [C].

000001d8 <ProductString>:
     1d8:	0a 03 47 00 48 00 36 00 30 00 00 00                 ..G.H.6.0...

000001e4 <ManufacturerString>:
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
     1e4:	0e 03 6a 00 75 00 6c 00 69 00 61 00 6e 00 00 00     ..j.u.l.i.a.n...

000001f4 <LanguageString>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1f4:	04 03 09 04                                         ....

000001f8 <ConfigurationDescriptor>:
     1f8:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
     208:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     218:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     228:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     238:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     248:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     258:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     268:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     278:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

00000285 <DeviceDescriptor>:
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     285:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
				break;
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     295:	00 01                                               ..

00000297 <NKROReport>:
     297:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				break;
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2a7:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     2b7:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2c7:	25 01 95 78 75 01 81 02 c0                          %..xu....

000002d0 <ConsoleReport>:
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d0:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u

				if (ParserData->UsingReportIDs)
     2e0:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

000002f0 <ExtrakeyReport>:
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f0:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     300:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     310:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     320:	10 95 01 81 00 c0                                   ......

00000326 <MouseReport>:
     326:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     336:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     346:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     356:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
					}
				}

				ParserData->UsingReportIDs = true;
     366:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

00000373 <KeyboardReport>:

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     373:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     383:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     393:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     3a3:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

000003b2 <__c.4335>:
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	0a 00                                               ..

000003b4 <__c.4330>:
     3b4:	25 30 32 58 20 00                                   %02X .

000003ba <__c.4327>:
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3ba:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ca:	20 00                                                .

000003cc <__c.4668>:

					while (CurrCollectionPath->Parent != NULL)
     3cc:	0a 00                                               ..

000003ce <__c.4666>:
     3ce:	25 30 32 58 00                                      %02X.

000003d3 <__c.4664>:
     3d3:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3e3:	3a 20 00                                            : .

000003e6 <__c.4475>:
     3e6:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3f6:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000404 <__c.4470>:
				}

				CurrCollectionPath->Type       = ReportItemData;
     404:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     414:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

00000422 <__c.4614>:

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     422:	64 6f 6e 65 2e 0a 00                                done...

00000429 <__c.4608>:
     429:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 

					for (uint8_t i = 0; i < UsageListSize; i++)
     439:	2e 2e 2e 20 00                                      ... .

0000043e <__c.4407>:
					  UsageList[i] = UsageList[i + 1];
     43e:	29 0a 00                                            )..

00000441 <__c.4405>:
     441:	25 75 00                                            %u.

00000444 <__c.4403>:

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     444:	2f 00                                               /.

00000446 <__c.4401>:
     446:	25 75 00                                            %u.

00000449 <__c.4399>:
     449:	5d 28 00                                            ](.

0000044c <__c.4397>:
     44c:	25 64 00                                            %d.

0000044f <__c.4395>:
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     44f:	20 00                                                .

00000451 <__c.4393>:
     451:	25 64 00                                            %d.

00000454 <__c.4391>:
     454:	20 00                                                .

00000456 <__c.4389>:
     456:	25 64 00                                            %d.

00000459 <__c.4387>:
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     459:	20 00                                                .

0000045b <__c.4385>:
     45b:	25 64 00                                            %d.

0000045e <__c.4383>:
     45e:	7c 00                                               |.

00000460 <__c.4381>:
     460:	25 30 32 58 00                                      %02X.

00000465 <__c.4379>:
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     465:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     475:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     485:	20 5b 00                                             [.

00000488 <__c.5107>:
     488:	0a 00                                               ..

0000048a <__c.5105>:
     48a:	25 75 00                                            %u.

0000048d <__c.5103>:
     48d:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     49d:	5f 6d 61 78 20 3d 20 00                             _max = .

000004a5 <__c.5100>:
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4a5:	0a 00                                               ..

000004a7 <__c.5098>:
     4a7:	25 75 00                                            %u.

000004aa <__c.5096>:
     4aa:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     4ba:	65 64 20 3d 20 00                                   ed = .

000004c0 <__c.5093>:
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4c0:	0a 00                                               ..

000004c2 <__c.5091>:
     4c2:	25 75 00                                            %u.

000004c5 <__c.5089>:
     4c5:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     4d5:	20 00                                                .

000004d7 <__c.5086>:
     4d7:	0a 00                                               ..

000004d9 <__c.5084>:
     4d9:	25 75 00                                            %u.

000004dc <__c.5082>:
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     4dc:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 00     mk_max_speed = .

000004ec <__c.5079>:
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4ec:	0a 00                                               ..

000004ee <__c.5077>:
     4ee:	25 75 00                                            %u.

000004f1 <__c.5075>:
     4f1:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 00        mk_interval = .

00000500 <__c.5071>:
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
     500:	0a 00                                               ..

00000502 <__c.5069>:
     502:	25 75 00                                            %u.

00000505 <__c.5067>:
     505:	6d 6b 5f 64 65 6c 61 79 20 3d 20 00                 mk_delay = .

00000511 <__c.5060>:
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     511:	0a 00                                               ..

00000513 <__c.5058>:
     513:	25 75 00                                            %u.

00000516 <__c.5056>:

					if (UsageListSize)
     516:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     526:	5f 6d 61 78 20 3d 20 00                             _max = .

0000052e <__c.5053>:
     52e:	0a 00                                               ..

00000530 <__c.5051>:
     530:	25 75 00                                            %u.

00000533 <__c.5049>:
     533:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe

						for (uint8_t i = 0; i < UsageListSize; i++)
     543:	65 64 20 3d 20 00                                   ed = .

00000549 <__c.5046>:
     549:	0a 00                                               ..

0000054b <__c.5044>:
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     54b:	25 75 00                                            %u.

0000054e <__c.5042>:
     54e:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55e:	20 00                                                .

00000560 <__c.5039>:
     560:	0a 00                                               ..

00000562 <__c.5037>:
     562:	25 75 00                                            %u.

00000565 <__c.5035>:
     565:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 00     mk_max_speed = .

00000575 <__c.5032>:
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     575:	0a 00                                               ..

00000577 <__c.5030>:
     577:	25 75 00                                            %u.

0000057a <__c.5028>:
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     57a:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 00        mk_interval = .

00000589 <__c.5024>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     589:	0a 00                                               ..

0000058b <__c.5022>:
     58b:	25 75 00                                            %u.

0000058e <__c.5020>:
     58e:	6d 6b 5f 64 65 6c 61 79 20 3d 20 00                 mk_delay = .

0000059a <__c.5013>:
     59a:	0a 00                                               ..

0000059c <__c.5011>:
     59c:	25 75 00                                            %u.

0000059f <__c.5009>:
     59f:	36 3a 20 6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65     6: mk_wheel_time

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5af:	5f 74 6f 5f 6d 61 78 3a 20 00                       _to_max: .

000005b9 <__c.5007>:

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b9:	0a 00                                               ..

000005bb <__c.5005>:
     5bb:	25 75 00                                            %u.

000005be <__c.5003>:
     5be:	35 3a 20 6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f     5: mk_wheel_max_
     5ce:	73 70 65 65 64 3a 20 00                             speed: .

000005d6 <__c.5001>:
     5d6:	0a 00                                               ..

000005d8 <__c.4999>:
     5d8:	25 75 00                                            %u.

000005db <__c.4997>:
     5db:	34 3a 20 6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61     4: mk_time_to_ma

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5eb:	78 3a 20 00                                         x: .

000005ef <__c.4995>:
     5ef:	0a 00                                               ..

000005f1 <__c.4993>:
     5f1:	25 75 00                                            %u.

000005f4 <__c.4991>:
					  return HID_PARSE_InsufficientReportItems;
     5f4:	33 3a 20 6d 6b 5f 6d 61 78 5f 73 70 65 65 64 3a     3: mk_max_speed:

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     604:	20 00                                                .

00000606 <__c.4989>:
     606:	0a 00                                               ..

00000608 <__c.4987>:
     608:	25 75 00                                            %u.

0000060b <__c.4985>:
     60b:	32 3a 20 6d 6b 5f 69 6e 74 65 72 76 61 6c 28 6d     2: mk_interval(m
     61b:	73 29 3a 20 00                                      s): .

00000620 <__c.4983>:
     620:	0a 00                                               ..

00000622 <__c.4981>:
     622:	25 75 00                                            %u.

00000625 <__c.4979>:
     625:	31 3a 20 6d 6b 5f 64 65 6c 61 79 28 2a 31 30 6d     1: mk_delay(*10m
     635:	73 29 3a 20 00                                      s): .

0000063a <__c.4977>:
     63a:	0a 0a 2d 2d 2d 2d 2d 20 4d 6f 75 73 65 6b 65 79     ..----- Mousekey
     64a:	20 50 61 72 61 6d 65 74 65 72 73 20 2d 2d 2d 2d      Parameters ----
     65a:	2d 0a 00                                            -..

0000065d <__c.5197>:
     65d:	3e 20 00                                            > .

00000660 <__c.5195>:
     660:	25 75 00                                            %u.

00000663 <__c.5193>:
     663:	4d 00                                               M.

00000665 <__c.5191>:
     665:	3f 00                                               ?.

00000667 <__c.5188>:
     667:	73 65 74 20 64 65 66 61 75 6c 74 20 76 61 6c 75     set default valu
     677:	65 73 2e 0a 00                                      es...

0000067c <__c.5181>:
					  ParserData->TotalReportItems++;
     67c:	0a 00                                               ..

0000067e <__c.5179>:
     67e:	25 75 00                                            %u.

00000681 <__c.5177>:
     681:	73 65 6c 65 63 74 65 64 20 70 61 72 61 6d 65 74     selected paramet
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     691:	65 72 3a 20 00                                      er: .

00000696 <__c.5164>:
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     696:	43 3e 20 00                                         C> .

0000069a <__c.5162>:
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     69a:	0a 51 75 69 74 20 4d 6f 75 73 65 6b 65 79 20 43     .Quit Mousekey C
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6aa:	6f 6e 73 6f 6c 65 0a 00                             onsole..

000006b2 <__c.5152>:

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6b2:	53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77 69     See http://en.wi
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6c2:	6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b 69     kipedia.org/wiki

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6d2:	2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00              /Mouse_keys..

000006df <__c.5150>:
     6df:	0a 00                                               ..

000006e1 <__c.5148>:
     6e1:	25 75 00                                            %u.

000006e4 <__c.5146>:
     6e4:	2c 20 77 68 65 65 6c 3d 00                          , wheel=.

000006ed <__c.5144>:
     6ed:	25 75 00                                            %u.

000006f0 <__c.5142>:
     6f0:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     700:	73 6f 72 3d 00                                      sor=.

00000705 <__c.5140>:
     705:	0a 73 70 65 65 64 20 3d 20 64 65 6c 74 61 20 2a     .speed = delta *
     715:	20 6d 61 78 5f 73 70 65 65 64 20 2a 20 28 72 65      max_speed * (re
     725:	70 65 61 74 20 2f 20 74 69 6d 65 5f 74 6f 5f 6d     peat / time_to_m
     735:	61 78 29 0a 00                                      ax)..

0000073a <__c.5138>:
     73a:	70 67 64 6f 77 6e 3a 09 64 65 63 72 65 61 73 65     pgdown:.decrease
     74a:	20 70 61 72 61 6d 65 74 65 72 73 28 2d 31 30 29      parameters(-10)
     75a:	0a 00                                               ..

0000075c <__c.5136>:
     75c:	70 67 75 70 3a 09 69 6e 63 72 65 61 73 65 20 70     pgup:.increase p
     76c:	61 72 61 6d 65 74 65 72 73 28 2b 31 30 29 0a 00     arameters(+10)..

0000077c <__c.5134>:
     77c:	64 6f 77 6e 3a 09 64 65 63 72 65 61 73 65 20 70     down:.decrease p
     78c:	61 72 61 6d 65 74 65 72 73 28 2d 31 29 0a 00        arameters(-1)..

0000079b <__c.5132>:
     79b:	75 70 3a 09 69 6e 63 72 65 61 73 65 20 70 61 72     up:.increase par
     7ab:	61 6d 65 74 65 72 73 28 2b 31 29 0a 00              ameters(+1)..

000007b8 <__c.5130>:
     7b8:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 20 76     d:.set default v
     7c8:	61 6c 75 65 73 0a 00                                alues..

000007cf <__c.5128>:
     7cf:	70 3a 09 70 72 69 6e 74 20 70 61 72 61 6d 65 74     p:.print paramet
     7df:	65 72 73 0a 00                                      ers..

000007e4 <__c.5126>:
     7e4:	36 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 77 68 65     6:.select mk_whe
     7f4:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 00     el_time_to_max..

00000804 <__c.5124>:
     804:	35 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 77 68 65     5:.select mk_whe
     814:	65 6c 5f 6d 61 78 5f 73 70 65 65 64 0a 00           el_max_speed..

00000822 <__c.5122>:
     822:	34 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 74 69 6d     4:.select mk_tim
     832:	65 5f 74 6f 5f 6d 61 78 0a 00                       e_to_max..

0000083c <__c.5120>:
     83c:	33 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 6d 61 78     3:.select mk_max
     84c:	5f 73 70 65 65 64 0a 00                             _speed..

00000854 <__c.5118>:
     854:	32 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 69 6e 74     2:.select mk_int
     864:	65 72 76 61 6c 28 6d 73 29 0a 00                    erval(ms)..

0000086f <__c.5116>:
     86f:	31 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 64 65 6c     1:.select mk_del
     87f:	61 79 28 2a 31 30 6d 73 29 0a 00                    ay(*10ms)..

0000088a <__c.5114>:
     88a:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

00000897 <__c.5112>:
     897:	0a 0a 2d 2d 2d 2d 2d 20 4d 6f 75 73 65 6b 65 79     ..----- Mousekey
     8a7:	20 50 61 72 61 6d 65 74 65 72 73 20 48 65 6c 70      Parameters Help
     8b7:	20 2d 2d 2d 2d 2d 0a 00                              -----..

000008bf <__c.4969>:
     8bf:	3f 00                                               ?.

000008c1 <__c.4966>:
     8c1:	4d 30 3e 00                                         M0>.

000008c5 <__c.4964>:
     8c5:	0a 45 6e 74 65 72 20 4d 6f 75 73 65 6b 65 79 20     .Enter Mousekey 
     8d5:	43 6f 6e 73 6f 6c 65 0a 00                          Console..

000008de <__c.4961>:
     8de:	0a 51 75 69 74 20 43 6f 6e 73 6f 6c 65 20 4d 6f     .Quit Console Mo
     8ee:	64 65 0a 00                                         de..

000008f2 <__c.4971>:
     8f2:	43 3e 20 00                                         C> .

000008f6 <__c.5223>:
     8f6:	0a 00                                               ..

000008f8 <__c.5221>:
     8f8:	25 75 00                                            %u.

000008fb <__c.5219>:
     8fb:	20 74 6f 20 00                                       to .

00000900 <__c.5217>:
     900:	25 75 00                                            %u.

00000903 <__c.5215>:
     903:	73 77 69 74 63 68 5f 64 65 66 61 75 6c 74 5f 6c     switch_default_l
     913:	61 79 65 72 3a 20 00                                ayer: .

0000091a <__c.4951>:
     91a:	6d 3a 09 6d 6f 75 73 65 6b 65 79 0a 00              m:.mousekey..

00000927 <__c.4949>:
     927:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

00000934 <__c.4947>:
     934:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6e 73 6f 6c 65 20     ..----- Console 
     944:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

00000950 <__c.4763>:
     950:	50 61 75 73 3a 09 6a 75 6d 70 20 74 6f 20 62 6f     Paus:.jump to bo
     960:	6f 74 6c 6f 61 64 65 72 0a 00                       otloader..

0000096a <__c.4761>:
     96a:	43 61 70 73 3a 09 4c 6f 63 6b 20 4b 65 79 62 6f     Caps:.Lock Keybo
     97a:	61 72 64 28 43 68 69 6c 64 20 50 72 6f 6f 66 29     ard(Child Proof)
     98a:	0a 00                                               ..

0000098c <__c.4759>:
     98c:	50 53 63 72 3a 09 70 6f 77 65 72 20 64 6f 77 6e     PScr:.power down
     99c:	2f 72 65 6d 6f 74 65 20 77 61 6b 65 2d 75 70 0a     /remote wake-up.
     9ac:	00                                                  .

000009ad <__c.4757>:
     9ad:	34 2f 46 34 3a 09 73 77 69 74 63 68 20 74 6f 20     4/F4:.switch to 
     9bd:	4c 61 79 65 72 34 20 0a 00                          Layer4 ..

000009c6 <__c.4755>:
     9c6:	33 2f 46 33 3a 09 73 77 69 74 63 68 20 74 6f 20     3/F3:.switch to 
     9d6:	4c 61 79 65 72 33 20 0a 00                          Layer3 ..

000009df <__c.4753>:
     9df:	32 2f 46 32 3a 09 73 77 69 74 63 68 20 74 6f 20     2/F2:.switch to 
     9ef:	4c 61 79 65 72 32 20 0a 00                          Layer2 ..

000009f8 <__c.4751>:
     9f8:	31 2f 46 31 3a 09 73 77 69 74 63 68 20 74 6f 20     1/F1:.switch to 
     a08:	4c 61 79 65 72 31 20 0a 00                          Layer1 ..

00000a11 <__c.4749>:
     a11:	30 2f 46 31 30 3a 09 73 77 69 74 63 68 20 74 6f     0/F10:.switch to
     a21:	20 4c 61 79 65 72 30 20 0a 00                        Layer0 ..

00000a2b <__c.4747>:
     a2b:	6e 3a 09 74 6f 67 67 6c 65 20 4e 4b 52 4f 0a 00     n:.toggle NKRO..

00000a3b <__c.4745>:
     a3b:	65 3a 09 70 72 69 6e 74 20 65 65 70 72 6f 6d 20     e:.print eeprom 
     a4b:	63 6f 6e 66 69 67 0a 00                             config..

00000a53 <__c.4743>:
     a53:	73 3a 09 70 72 69 6e 74 20 73 74 61 74 75 73 0a     s:.print status.
     a63:	00                                                  .

00000a64 <__c.4741>:
     a64:	74 3a 09 70 72 69 6e 74 20 74 69 6d 65 72 20 63     t:.print timer c
     a74:	6f 75 6e 74 0a 00                                   ount..

00000a7a <__c.4739>:
     a7a:	76 3a 09 70 72 69 6e 74 20 64 65 76 69 63 65 20     v:.print device 
     a8a:	76 65 72 73 69 6f 6e 20 26 20 69 6e 66 6f 0a 00     version & info..

00000a9a <__c.4737>:
     a9a:	6d 3a 09 74 6f 67 67 6c 65 20 6d 6f 75 73 65 20     m:.toggle mouse 
     aaa:	64 65 62 75 67 0a 00                                debug..

00000ab1 <__c.4735>:
     ab1:	6b 3a 09 74 6f 67 67 6c 65 20 6b 65 79 62 6f 61     k:.toggle keyboa
     ac1:	72 64 20 64 65 62 75 67 0a 00                       rd debug..

00000acb <__c.4733>:
     acb:	78 3a 09 74 6f 67 67 6c 65 20 6d 61 74 72 69 78     x:.toggle matrix
     adb:	20 64 65 62 75 67 0a 00                              debug..

00000ae3 <__c.4731>:
     ae3:	64 3a 09 74 6f 67 67 6c 65 20 64 65 62 75 67 20     d:.toggle debug 
     af3:	65 6e 61 62 6c 65 0a 00                             enable..

00000afb <__c.4729>:
     afb:	63 3a 09 65 6e 74 65 72 20 63 6f 6e 73 6f 6c 65     c:.enter console
     b0b:	20 6d 6f 64 65 0a 00                                 mode..

00000b12 <__c.4727>:
     b12:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6d 6d 61 6e 64 20     ..----- Command 
     b22:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

00000b2e <__c.4858>:
     b2e:	0a 00                                               ..

00000b30 <__c.4856>:
     b30:	25 75 00                                            %u.

00000b33 <__c.4854>:
     b33:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000b3b <__c.4852>:
     b3b:	0a 00                                               ..

00000b3d <__c.4850>:
     b3d:	25 75 00                                            %u.

00000b40 <__c.4848>:
     b40:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     b50:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000b5c <__c.4846>:
     b5c:	0a 00                                               ..

00000b5e <__c.4844>:
     b5e:	25 75 00                                            %u.

00000b61 <__c.4842>:
     b61:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     b71:	20 00                                                .

00000b73 <__c.4840>:
     b73:	0a 00                                               ..

00000b75 <__c.4838>:
     b75:	25 75 00                                            %u.

00000b78 <__c.4836>:
     b78:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000b82 <__c.4834>:
     b82:	0a 00                                               ..

00000b84 <__c.4832>:
     b84:	25 75 00                                            %u.

00000b87 <__c.4830>:
     b87:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     b97:	20 00                                                .

00000b99 <__c.4828>:
     b99:	0a 00                                               ..

00000b9b <__c.4826>:
     b9b:	25 75 00                                            %u.

00000b9e <__c.4824>:
     b9e:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     bae:	20 00                                                .

00000bb0 <__c.4822>:
     bb0:	0a 00                                               ..

00000bb2 <__c.4820>:
     bb2:	25 75 00                                            %u.

00000bb5 <__c.4818>:
     bb5:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     bc5:	74 72 6f 6c 3a 20 00                                trol: .

00000bcc <__c.4816>:
     bcc:	0a 00                                               ..

00000bce <__c.4814>:
     bce:	25 75 00                                            %u.

00000bd1 <__c.4812>:
     bd1:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     be1:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000bea <__c.4810>:
     bea:	0a 00                                               ..

00000bec <__c.4808>:
     bec:	25 30 32 58 00                                      %02X.

00000bf1 <__c.4806>:
     bf1:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     c01:	77 3a 20 00                                         w: .

00000c05 <__c.4803>:
     c05:	0a 00                                               ..

00000c07 <__c.4801>:
     c07:	25 75 00                                            %u.

00000c0a <__c.4799>:
     c0a:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000c13 <__c.4797>:
     c13:	0a 00                                               ..

00000c15 <__c.4795>:
     c15:	25 75 00                                            %u.

00000c18 <__c.4793>:
     c18:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000c24 <__c.4791>:
     c24:	0a 00                                               ..

00000c26 <__c.4789>:
     c26:	25 75 00                                            %u.

00000c29 <__c.4787>:
     c29:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000c33 <__c.4785>:
     c33:	0a 00                                               ..

00000c35 <__c.4783>:
     c35:	25 75 00                                            %u.

00000c38 <__c.4781>:
     c38:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000c42 <__c.4779>:
     c42:	0a 00                                               ..

00000c44 <__c.4777>:
     c44:	25 30 32 58 00                                      %02X.

00000c49 <__c.4775>:
     c49:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     c59:	3a 20 00                                            : .

00000c5c <__c.4772>:
     c5c:	0a 00                                               ..

00000c5e <__c.4770>:
     c5e:	25 75 00                                            %u.

00000c61 <__c.4768>:
     c61:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000c71 <__c.4942>:
     c71:	3f 00                                               ?.

00000c73 <__c.4933>:
     c73:	4e 4b 52 4f 3a 20 64 69 73 61 62 6c 65 64 0a 00     NKRO: disabled..

00000c83 <__c.4931>:
     c83:	4e 4b 52 4f 3a 20 65 6e 61 62 6c 65 64 0a 00        NKRO: enabled..

00000c92 <__c.4928>:
     c92:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     ca2:	58 0a 00                                            X..

00000ca5 <__c.4926>:
     ca5:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     cb5:	6c 3a 20 25 58 0a 00                                l: %X..

00000cbc <__c.4924>:
     cbc:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     ccc:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000cd6 <__c.4922>:
     cd6:	0a 0a 2d 2d 2d 2d 2d 20 53 74 61 74 75 73 20 2d     ..----- Status -
     ce6:	2d 2d 2d 2d 0a 00                                   ----..

00000cec <__c.4919>:
     cec:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     cfc:	6c 58 0a 00                                         lX..

00000d00 <__c.4916>:
     d00:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     d10:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     d20:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000d2e <__c.4914>:
     d2e:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     d3e:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     d4e:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     d5e:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     d6e:	30 39 36 0a 00                                      096..

00000d73 <__c.4912>:
     d73:	42 55 49 4c 44 3a 20 30 61 61 30 66 37 35 2d 64     BUILD: 0aa0f75-d
     d83:	69 72 74 79 20 28 31 34 3a 31 34 3a 33 39 20 4a     irty (14:14:39 J
     d93:	75 6c 20 32 36 20 32 30 31 35 29 0a 00              ul 26 2015)..

00000da0 <__c.4910>:
     da0:	56 49 44 3a 20 30 78 46 45 45 44 28 6a 75 6c 69     VID: 0xFEED(juli
     db0:	61 6e 29 20 50 49 44 3a 20 30 78 36 30 36 30 28     an) PID: 0x6060(
     dc0:	47 48 36 30 29 20 56 45 52 3a 20 30 78 30 30 30     GH60) VER: 0x000
     dd0:	31 0a 00                                            1..

00000dd3 <__c.4908>:
     dd3:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     de3:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     df3:	6f 72 20 47 48 36 30 0a 00                          or GH60..

00000dfc <__c.4906>:
     dfc:	0a 0a 2d 2d 2d 2d 2d 20 56 65 72 73 69 6f 6e 20     ..----- Version 
     e0c:	2d 2d 2d 2d 2d 0a 00                                -----..

00000e13 <__c.4903>:
     e13:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 64 69     .DEBUG: mouse di
     e23:	73 61 62 6c 65 64 2e 0a 00                          sabled...

00000e2c <__c.4901>:
     e2c:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 65 6e     .DEBUG: mouse en
     e3c:	61 62 6c 65 64 2e 0a 00                             abled...

00000e44 <__c.4898>:
     e44:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     e54:	20 64 69 73 61 62 6c 65 64 2e 0a 00                  disabled...

00000e60 <__c.4896>:
     e60:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     e70:	20 65 6e 61 62 6c 65 64 2e 0a 00                     enabled...

00000e7b <__c.4893>:
     e7b:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 64     .DEBUG: matrix d
     e8b:	69 73 61 62 6c 65 64 2e 0a 00                       isabled...

00000e95 <__c.4891>:
     e95:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 65     .DEBUG: matrix e
     ea5:	6e 61 62 6c 65 64 2e 0a 00                          nabled...

00000eae <__c.4888>:
     eae:	0a 44 45 42 55 47 3a 20 65 6e 61 62 6c 65 64 2e     .DEBUG: enabled.
     ebe:	0a 00                                               ..

00000ec0 <__c.4886>:
     ec0:	0a 44 45 42 55 47 3a 20 64 69 73 61 62 6c 65 64     .DEBUG: disabled
     ed0:	2e 0a 00                                            ...

00000ed3 <__c.4883>:
     ed3:	6e 6f 74 20 73 75 70 70 6f 72 74 65 64 2e 0a 00     not supported...

00000ee3 <__c.4881>:
     ee3:	0a 0a 4a 75 6d 70 20 74 6f 20 62 6f 6f 74 6c 6f     ..Jump to bootlo
     ef3:	61 64 65 72 2e 2e 2e 20 00                          ader... .

00000efc <__c.4878>:
     efc:	43 3e 20 00                                         C> .

00000f00 <__c.4876>:
     f00:	0a 45 6e 74 65 72 20 43 6f 6e 73 6f 6c 65 20 4d     .Enter Console M
     f10:	6f 64 65 0a 00                                      ode..

00000f15 <__c.4871>:
     f15:	55 6e 6c 6f 63 6b 65 64 2e 0a 00                    Unlocked...

00000f20 <__c.4869>:
     f20:	4c 6f 63 6b 65 64 2e 0a 00                          Locked...

00000f29 <__c.4865>:
     f29:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000f34 <__ctors_end>:
     f34:	11 24       	eor	r1, r1
     f36:	1f be       	out	0x3f, r1	; 63
     f38:	cf ef       	ldi	r28, 0xFF	; 255
     f3a:	da e0       	ldi	r29, 0x0A	; 10
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	cd bf       	out	0x3d, r28	; 61

00000f40 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     f40:	04 b6       	in	r0, 0x34	; 52
     f42:	03 fe       	sbrs	r0, 3
     f44:	24 c0       	rjmp	.+72     	; 0xf8e <__do_copy_data>
     f46:	80 91 e6 01 	lds	r24, 0x01E6
     f4a:	90 91 e7 01 	lds	r25, 0x01E7
     f4e:	a0 91 e8 01 	lds	r26, 0x01E8
     f52:	b0 91 e9 01 	lds	r27, 0x01E9
     f56:	87 30       	cpi	r24, 0x07	; 7
     f58:	90 4b       	sbci	r25, 0xB0	; 176
     f5a:	a7 40       	sbci	r26, 0x07	; 7
     f5c:	b0 4b       	sbci	r27, 0xB0	; 176
     f5e:	b9 f4       	brne	.+46     	; 0xf8e <__do_copy_data>
        reset_key = 0;
     f60:	10 92 e6 01 	sts	0x01E6, r1
     f64:	10 92 e7 01 	sts	0x01E7, r1
     f68:	10 92 e8 01 	sts	0x01E8, r1
     f6c:	10 92 e9 01 	sts	0x01E9, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     f70:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     f72:	84 b7       	in	r24, 0x34	; 52
     f74:	87 7f       	andi	r24, 0xF7	; 247
     f76:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     f78:	88 e1       	ldi	r24, 0x18	; 24
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	80 93 60 00 	sts	0x0060, r24
     f82:	10 92 60 00 	sts	0x0060, r1
     f86:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     f88:	e0 e0       	ldi	r30, 0x00	; 0
     f8a:	f8 e3       	ldi	r31, 0x38	; 56
     f8c:	09 95       	icall

00000f8e <__do_copy_data>:
     f8e:	11 e0       	ldi	r17, 0x01	; 1
     f90:	a0 e0       	ldi	r26, 0x00	; 0
     f92:	b1 e0       	ldi	r27, 0x01	; 1
     f94:	e6 e0       	ldi	r30, 0x06	; 6
     f96:	fa e5       	ldi	r31, 0x5A	; 90
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <__do_copy_data+0x10>
     f9a:	05 90       	lpm	r0, Z+
     f9c:	0d 92       	st	X+, r0
     f9e:	a8 33       	cpi	r26, 0x38	; 56
     fa0:	b1 07       	cpc	r27, r17
     fa2:	d9 f7       	brne	.-10     	; 0xf9a <__do_copy_data+0xc>

00000fa4 <__do_clear_bss>:
     fa4:	21 e0       	ldi	r18, 0x01	; 1
     fa6:	a8 e3       	ldi	r26, 0x38	; 56
     fa8:	b1 e0       	ldi	r27, 0x01	; 1
     faa:	01 c0       	rjmp	.+2      	; 0xfae <.do_clear_bss_start>

00000fac <.do_clear_bss_loop>:
     fac:	1d 92       	st	X+, r1

00000fae <.do_clear_bss_start>:
     fae:	a6 3e       	cpi	r26, 0xE6	; 230
     fb0:	b2 07       	cpc	r27, r18
     fb2:	e1 f7       	brne	.-8      	; 0xfac <.do_clear_bss_loop>
     fb4:	0e 94 9b 0c 	call	0x1936	; 0x1936 <main>
     fb8:	0c 94 01 2d 	jmp	0x5a02	; 0x5a02 <_exit>

00000fbc <__bad_interrupt>:
     fbc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000fc0 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     fc0:	ff 93       	push	r31
	push	ZL
     fc2:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     fc4:	e0 91 c5 01 	lds	r30, 0x01C5
	lds	ZH, xfunc_out+1	;/
     fc8:	f0 91 c6 01 	lds	r31, 0x01C6
	sbiw	ZL, 0		;Skip if null
     fcc:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     fce:	09 f0       	breq	.+2      	; 0xfd2 <xputc+0x12>
	icall
     fd0:	09 95       	icall
2:	pop	ZL
     fd2:	ef 91       	pop	r30
	pop	ZH
     fd4:	ff 91       	pop	r31
	ret
     fd6:	08 95       	ret

00000fd8 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     fd8:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     fda:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     fdc:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     fde:	11 f0       	breq	.+4      	; 0xfe4 <xputs+0xc>
	rcall	xputc
     fe0:	ef df       	rcall	.-34     	; 0xfc0 <xputc>
	rjmp	1b
     fe2:	fb cf       	rjmp	.-10     	; 0xfda <xputs+0x2>
2:	ret
     fe4:	08 95       	ret

00000fe6 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     fe6:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     fe8:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     fea:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     fec:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     fee:	0c c0       	rjmp	.+24     	; 0x1008 <xitoa+0x22>
	neg	r20		;
     ff0:	41 95       	neg	r20
	sbrs	r25, 7		;
     ff2:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     ff4:	09 c0       	rjmp	.+18     	; 0x1008 <xitoa+0x22>
	ldi	r30, '-'	;
     ff6:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     ff8:	60 95       	com	r22
	com	r23		;
     ffa:	70 95       	com	r23
	com	r24		;
     ffc:	80 95       	com	r24
	com	r25		;
     ffe:	90 95       	com	r25
	adc	r22, r1		;
    1000:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    1002:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    1004:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    1006:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    1008:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <xitoa+0x2a>
	neg	r18		;
    100c:	21 95       	neg	r18
	ldi	r19, '0'	;/
    100e:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    1010:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    1012:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    1014:	66 0f       	add	r22, r22
	rol	r23		;
    1016:	77 1f       	adc	r23, r23
	rol	r24		;
    1018:	88 1f       	adc	r24, r24
	rol	r25		;
    101a:	99 1f       	adc	r25, r25
	rol	r26		;
    101c:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    101e:	a4 17       	cp	r26, r20
	brcs	3f		;
    1020:	10 f0       	brcs	.+4      	; 0x1026 <xitoa+0x40>
	sub	r26, r20	;
    1022:	a4 1b       	sub	r26, r20
	inc	r22		;
    1024:	63 95       	inc	r22
3:	dec	r21		;
    1026:	5a 95       	dec	r21
	brne	2b		;/
    1028:	a9 f7       	brne	.-22     	; 0x1014 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    102a:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    102c:	08 f0       	brcs	.+2      	; 0x1030 <xitoa+0x4a>
	subi	r26, -7		;
    102e:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    1030:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    1032:	af 93       	push	r26
	inc	r31		;/
    1034:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    1036:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    1038:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    103a:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    103c:	91 05       	cpc	r25, r1
	brne	1b		;/
    103e:	41 f7       	brne	.-48     	; 0x1010 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    1040:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    1042:	11 f4       	brne	.+4      	; 0x1048 <xitoa+0x62>
	push	r30		;
    1044:	ef 93       	push	r30
	inc	r31		;/
    1046:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    1048:	f2 17       	cp	r31, r18
	brcc	6f		;
    104a:	18 f4       	brcc	.+6      	; 0x1052 <xitoa+0x6c>
	push	r19		;
    104c:	3f 93       	push	r19
	inc	r31		;
    104e:	f3 95       	inc	r31
	rjmp	5b		;/
    1050:	fb cf       	rjmp	.-10     	; 0x1048 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    1052:	8f 91       	pop	r24
	rcall	xputc		;
    1054:	b5 df       	rcall	.-150    	; 0xfc0 <xputc>
	dec	r31		;
    1056:	fa 95       	dec	r31
	brne	6b		;/
    1058:	e1 f7       	brne	.-8      	; 0x1052 <xitoa+0x6c>

	ret
    105a:	08 95       	ret

0000105c <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
    105c:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    105e:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    1060:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    1062:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    1064:	21 f0       	breq	.+8      	; 0x106e <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
    1066:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    1068:	19 f0       	breq	.+6      	; 0x1070 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
    106a:	aa df       	rcall	.-172    	; 0xfc0 <xputc>
	rjmp	0b		;/
    106c:	f9 cf       	rjmp	.-14     	; 0x1060 <xvprintf+0x4>
90:	ret
    106e:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    1070:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    1072:	e8 94       	clt
	_LPMI	r21		;Get flags
    1074:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    1076:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    1078:	c1 f3       	breq	.-16     	; 0x106a <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
    107a:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    107c:	11 f4       	brne	.+4      	; 0x1082 <xvprintf+0x26>
	set			;/
    107e:	68 94       	set
22:	_LPMI	r21		;Get width
    1080:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    1082:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    1084:	48 f4       	brcc	.+18     	; 0x1098 <xvprintf+0x3c>
	subi	r21, '0'	;
    1086:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    1088:	90 f3       	brcs	.-28     	; 0x106e <xvprintf+0x12>
	lsl	r18		;
    108a:	22 0f       	add	r18, r18
	mov	r0, r18		;
    108c:	02 2e       	mov	r0, r18
	lsl	r18		;
    108e:	22 0f       	add	r18, r18
	lsl	r18		;
    1090:	22 0f       	add	r18, r18
	add	r18, r0		;
    1092:	20 0d       	add	r18, r0
	add	r18, r21	;
    1094:	25 0f       	add	r18, r21
	rjmp	22b		;/
    1096:	f4 cf       	rjmp	.-24     	; 0x1080 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
    1098:	0e f4       	brtc	.+2      	; 0x109c <xvprintf+0x40>
	neg	r18		;
    109a:	21 95       	neg	r18
25:	ld	r24, Y+		;
    109c:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    109e:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    10a0:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    10a2:	19 f3       	breq	.-58     	; 0x106a <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
    10a4:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    10a6:	29 f1       	breq	.+74     	; 0x10f2 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
    10a8:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    10aa:	59 f1       	breq	.+86     	; 0x1102 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    10ac:	bc 01       	movw	r22, r24
	clr	r24		;
    10ae:	88 27       	eor	r24, r24
	clr	r25		;
    10b0:	99 27       	eor	r25, r25
	clt			;/
    10b2:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    10b4:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    10b6:	21 f4       	brne	.+8      	; 0x10c0 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
    10b8:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    10ba:	99 91       	ld	r25, Y+
	set			;
    10bc:	68 94       	set
	_LPMI	r21		;/
    10be:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    10c0:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    10c2:	39 f4       	brne	.+14     	; 0x10d2 <xvprintf+0x76>
	ldi	r20, -10	;
    10c4:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    10c6:	7e f0       	brts	.+30     	; 0x10e6 <xvprintf+0x8a>
	sbrs	r23, 7		;
    10c8:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    10ca:	0d c0       	rjmp	.+26     	; 0x10e6 <xvprintf+0x8a>
	ldi	r24, -1		;
    10cc:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    10ce:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    10d0:	0a c0       	rjmp	.+20     	; 0x10e6 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    10d2:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    10d4:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    10d6:	39 f0       	breq	.+14     	; 0x10e6 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
    10d8:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    10da:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    10dc:	21 f0       	breq	.+8      	; 0x10e6 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
    10de:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    10e0:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <xvprintf+0x8a>
	ret			;abort
    10e4:	08 95       	ret
40:	push	ZH		;Output the value
    10e6:	ff 93       	push	r31
	push	ZL		;
    10e8:	ef 93       	push	r30
	rcall	xitoa		;
    10ea:	7d df       	rcall	.-262    	; 0xfe6 <xitoa>
42:	pop	ZL		;
    10ec:	ef 91       	pop	r30
	pop	ZH		;
    10ee:	ff 91       	pop	r31
	rjmp	0b		;/
    10f0:	b7 cf       	rjmp	.-146    	; 0x1060 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
    10f2:	ff 93       	push	r31
	push	ZL
    10f4:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    10f6:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    10f8:	81 91       	ld	r24, Z+
	cpi	r24, 0
    10fa:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    10fc:	b9 f3       	breq	.-18     	; 0x10ec <xvprintf+0x90>
	rcall	xputc
    10fe:	60 df       	rcall	.-320    	; 0xfc0 <xputc>
	rjmp	51b
    1100:	fb cf       	rjmp	.-10     	; 0x10f8 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
    1102:	ff 93       	push	r31
	push	ZL
    1104:	ef 93       	push	r30
	rcall	xputs
    1106:	68 df       	rcall	.-304    	; 0xfd8 <xputs>
	rjmp	42b
    1108:	f1 cf       	rjmp	.-30     	; 0x10ec <xvprintf+0x90>

0000110a <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
    110a:	df 93       	push	r29
	push	YL
    110c:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    110e:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    1110:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
    1112:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
    1114:	a3 df       	rcall	.-186    	; 0x105c <xvprintf>
	pop	YL
    1116:	cf 91       	pop	r28
	pop	YH
    1118:	df 91       	pop	r29
	ret
    111a:	08 95       	ret

0000111c <matrix_power_up>:

void keyboard_init(void);
void keyboard_task(void);
void keyboard_set_leds(uint8_t leds);

__attribute__ ((weak)) void matrix_power_up(void) {}
    111c:	08 95       	ret

0000111e <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    111e:	08 95       	ret

00001120 <keymap_key_to_keycode>:

/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    // return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
}
    1120:	08 95       	ret

00001122 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    // return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
}
    1122:	08 95       	ret

00001124 <unselect_rows>:
 * pin: B0 B1 B2 B3
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRB  &= ~0b01110000;
    1124:	84 b1       	in	r24, 0x04	; 4
    1126:	8f 78       	andi	r24, 0x8F	; 143
    1128:	84 b9       	out	0x04, r24	; 4
    PORTB &= ~0b01110000;
    112a:	85 b1       	in	r24, 0x05	; 5
    112c:	8f 78       	andi	r24, 0x8F	; 143
    112e:	85 b9       	out	0x05, r24	; 5
    DDRD  &= ~0b10000000;
    1130:	57 98       	cbi	0x0a, 7	; 10
    PORTD &= ~0b10000000;
    1132:	5f 98       	cbi	0x0b, 7	; 11
    1134:	08 95       	ret

00001136 <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
    1136:	0e 94 92 08 	call	0x1124	; 0x1124 <unselect_rows>
 */

static void init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRF  &= ~(1<<7);
    113a:	87 98       	cbi	0x10, 7	; 16
    PORTF |=  (1<<7);
    113c:	8f 9a       	sbi	0x11, 7	; 17
    DDRB  &= ~(1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1);
    113e:	84 b1       	in	r24, 0x04	; 4
    1140:	81 70       	andi	r24, 0x01	; 1
    1142:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<7 | 1<<6 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1);
    1144:	85 b1       	in	r24, 0x05	; 5
    1146:	8e 6f       	ori	r24, 0xFE	; 254
    1148:	85 b9       	out	0x05, r24	; 5
    DDRD  &= ~(1<<7 | 1<<3 | 1<<2 | 1<<1 | 1<<0 );
    114a:	8a b1       	in	r24, 0x0a	; 10
    114c:	80 77       	andi	r24, 0x70	; 112
    114e:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<7 | 1<<3 | 1<<2 | 1<<1 | 1<<0 );
    1150:	8b b1       	in	r24, 0x0b	; 11
    1152:	8f 68       	ori	r24, 0x8F	; 143
    1154:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<7 | 1<<6);
    1156:	87 b1       	in	r24, 0x07	; 7
    1158:	8f 73       	andi	r24, 0x3F	; 63
    115a:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<7 | 1<<6);
    115c:	88 b1       	in	r24, 0x08	; 8
    115e:	80 6c       	ori	r24, 0xC0	; 192
    1160:	88 b9       	out	0x08, r24	; 8
    1162:	e2 e4       	ldi	r30, 0x42	; 66
    1164:	f1 e0       	ldi	r31, 0x01	; 1
    1166:	a8 e3       	ldi	r26, 0x38	; 56
    1168:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    116a:	11 92       	st	Z+, r1
    116c:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
    116e:	1d 92       	st	X+, r1
    1170:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	ec 34       	cpi	r30, 0x4C	; 76
    1176:	f8 07       	cpc	r31, r24
    1178:	c1 f7       	brne	.-16     	; 0x116a <matrix_init+0x34>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
    117a:	08 95       	ret

0000117c <matrix_scan>:

uint8_t matrix_scan(void)
{
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
    1188:	c8 e3       	ldi	r28, 0x38	; 56
    118a:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    118c:	10 e0       	ldi	r17, 0x00	; 0
    118e:	01 e0       	ldi	r16, 0x01	; 1
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1190:	af e8       	ldi	r26, 0x8F	; 143
    1192:	ea 2e       	mov	r14, r26
    1194:	a1 e0       	ldi	r26, 0x01	; 1
    1196:	fa 2e       	mov	r15, r26
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
       switch (row) {
    1198:	12 30       	cpi	r17, 0x02	; 2
    119a:	71 f0       	breq	.+28     	; 0x11b8 <matrix_scan+0x3c>
    119c:	18 f4       	brcc	.+6      	; 0x11a4 <matrix_scan+0x28>
    119e:	11 30       	cpi	r17, 0x01	; 1
    11a0:	41 f0       	breq	.+16     	; 0x11b2 <matrix_scan+0x36>
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <matrix_scan+0x30>
    11a4:	13 30       	cpi	r17, 0x03	; 3
    11a6:	59 f0       	breq	.+22     	; 0x11be <matrix_scan+0x42>
    11a8:	14 30       	cpi	r17, 0x04	; 4
    11aa:	61 f0       	breq	.+24     	; 0x11c4 <matrix_scan+0x48>
           case 0:
               DDRD  |= (1<<0);
    11ac:	50 9a       	sbi	0x0a, 0	; 10
               PORTD &= ~(1<<0);
    11ae:	58 98       	cbi	0x0b, 0	; 11
    11b0:	0b c0       	rjmp	.+22     	; 0x11c8 <matrix_scan+0x4c>
               break;
           case 1:
               DDRD  |= (1<<1);
    11b2:	51 9a       	sbi	0x0a, 1	; 10
               PORTD &= ~(1<<1);
    11b4:	59 98       	cbi	0x0b, 1	; 11
    11b6:	08 c0       	rjmp	.+16     	; 0x11c8 <matrix_scan+0x4c>
               break;
           case 2:
               DDRD  |= (1<<2);
    11b8:	52 9a       	sbi	0x0a, 2	; 10
               PORTD &= ~(1<<2);
    11ba:	5a 98       	cbi	0x0b, 2	; 11
    11bc:	05 c0       	rjmp	.+10     	; 0x11c8 <matrix_scan+0x4c>
               break;
           case 3:
               DDRD  |= (1<<3);
    11be:	53 9a       	sbi	0x0a, 3	; 10
               PORTD &= ~(1<<3);
    11c0:	5b 98       	cbi	0x0b, 3	; 11
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <matrix_scan+0x4c>
               break;
           case 4:
               DDRC  |= (1<<6);
    11c4:	3e 9a       	sbi	0x07, 6	; 7
               PORTC &= ~(1<<6);
    11c6:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11c8:	80 ea       	ldi	r24, 0xA0	; 160
    11ca:	8a 95       	dec	r24
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <matrix_scan+0x4e>
}

static matrix_row_t read_cols(void)
{
    return 
           (PINF&(1<<0) ? 0 : (1<< 0)) |
    11ce:	2f b1       	in	r18, 0x0f	; 15
    11d0:	21 70       	andi	r18, 0x01	; 1
    11d2:	20 27       	eor	r18, r16
    11d4:	30 e0       	ldi	r19, 0x00	; 0
           (PINF&(1<<1) ? 0 : (1<< 1)) |
    11d6:	79 9b       	sbis	0x0f, 1	; 15
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <matrix_scan+0x64>
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <matrix_scan+0x68>
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	90 e0       	ldi	r25, 0x00	; 0
}

static matrix_row_t read_cols(void)
{
    return 
           (PINF&(1<<0) ? 0 : (1<< 0)) |
    11e4:	28 2b       	or	r18, r24
    11e6:	39 2b       	or	r19, r25
           (PINF&(1<<1) ? 0 : (1<< 1)) |
           (PINF&(1<<4) ? 0 : (1<< 2)) |
    11e8:	7c 9b       	sbis	0x0f, 4	; 15
    11ea:	03 c0       	rjmp	.+6      	; 0x11f2 <matrix_scan+0x76>
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <matrix_scan+0x7a>
    11f2:	44 e0       	ldi	r20, 0x04	; 4
    11f4:	50 e0       	ldi	r21, 0x00	; 0

static matrix_row_t read_cols(void)
{
    return 
           (PINF&(1<<0) ? 0 : (1<< 0)) |
           (PINF&(1<<1) ? 0 : (1<< 1)) |
    11f6:	24 2b       	or	r18, r20
    11f8:	35 2b       	or	r19, r21
           (PINF&(1<<4) ? 0 : (1<< 2)) |
           (PINF&(1<<5) ? 0 : (1<< 3)) |
    11fa:	7d 9b       	sbis	0x0f, 5	; 15
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <matrix_scan+0x88>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <matrix_scan+0x8c>
    1204:	88 e0       	ldi	r24, 0x08	; 8
    1206:	90 e0       	ldi	r25, 0x00	; 0
static matrix_row_t read_cols(void)
{
    return 
           (PINF&(1<<0) ? 0 : (1<< 0)) |
           (PINF&(1<<1) ? 0 : (1<< 1)) |
           (PINF&(1<<4) ? 0 : (1<< 2)) |
    1208:	28 2b       	or	r18, r24
    120a:	39 2b       	or	r19, r25
           (PINF&(1<<5) ? 0 : (1<< 3)) |
           (PINF&(1<<6) ? 0 : (1<< 4)) |
    120c:	7e 9b       	sbis	0x0f, 6	; 15
    120e:	03 c0       	rjmp	.+6      	; 0x1216 <matrix_scan+0x9a>
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 c0       	rjmp	.+4      	; 0x121a <matrix_scan+0x9e>
    1216:	80 e1       	ldi	r24, 0x10	; 16
    1218:	90 e0       	ldi	r25, 0x00	; 0
{
    return 
           (PINF&(1<<0) ? 0 : (1<< 0)) |
           (PINF&(1<<1) ? 0 : (1<< 1)) |
           (PINF&(1<<4) ? 0 : (1<< 2)) |
           (PINF&(1<<5) ? 0 : (1<< 3)) |
    121a:	28 2b       	or	r18, r24
    121c:	39 2b       	or	r19, r25
           (PINF&(1<<6) ? 0 : (1<< 4)) |
           (PINF&(1<<7) ? 0 : (1<< 5)) |
    121e:	8f b1       	in	r24, 0x0f	; 15
    1220:	99 27       	eor	r25, r25
    1222:	87 fd       	sbrc	r24, 7
    1224:	90 95       	com	r25
    1226:	80 95       	com	r24
    1228:	90 95       	com	r25
    122a:	88 27       	eor	r24, r24
    122c:	99 0f       	add	r25, r25
    122e:	88 1f       	adc	r24, r24
    1230:	99 27       	eor	r25, r25
    1232:	f5 e0       	ldi	r31, 0x05	; 5
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	fa 95       	dec	r31
    123a:	e1 f7       	brne	.-8      	; 0x1234 <matrix_scan+0xb8>
    return 
           (PINF&(1<<0) ? 0 : (1<< 0)) |
           (PINF&(1<<1) ? 0 : (1<< 1)) |
           (PINF&(1<<4) ? 0 : (1<< 2)) |
           (PINF&(1<<5) ? 0 : (1<< 3)) |
           (PINF&(1<<6) ? 0 : (1<< 4)) |
    123c:	28 2b       	or	r18, r24
    123e:	39 2b       	or	r19, r25
           (PINF&(1<<7) ? 0 : (1<< 5)) |
           (PINB&(1<<6) ? 0 : (1<< 6)) |
    1240:	1e 9b       	sbis	0x03, 6	; 3
    1242:	03 c0       	rjmp	.+6      	; 0x124a <matrix_scan+0xce>
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 c0       	rjmp	.+4      	; 0x124e <matrix_scan+0xd2>
    124a:	80 e4       	ldi	r24, 0x40	; 64
    124c:	90 e0       	ldi	r25, 0x00	; 0
           (PINF&(1<<0) ? 0 : (1<< 0)) |
           (PINF&(1<<1) ? 0 : (1<< 1)) |
           (PINF&(1<<4) ? 0 : (1<< 2)) |
           (PINF&(1<<5) ? 0 : (1<< 3)) |
           (PINF&(1<<6) ? 0 : (1<< 4)) |
           (PINF&(1<<7) ? 0 : (1<< 5)) |
    124e:	28 2b       	or	r18, r24
    1250:	39 2b       	or	r19, r25
           (PINB&(1<<6) ? 0 : (1<< 6)) |
           (PINB&(1<<5) ? 0 : (1<< 7)) |
    1252:	1d 9b       	sbis	0x03, 5	; 3
    1254:	03 c0       	rjmp	.+6      	; 0x125c <matrix_scan+0xe0>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <matrix_scan+0xe4>
    125c:	80 e8       	ldi	r24, 0x80	; 128
    125e:	90 e0       	ldi	r25, 0x00	; 0
           (PINF&(1<<1) ? 0 : (1<< 1)) |
           (PINF&(1<<4) ? 0 : (1<< 2)) |
           (PINF&(1<<5) ? 0 : (1<< 3)) |
           (PINF&(1<<6) ? 0 : (1<< 4)) |
           (PINF&(1<<7) ? 0 : (1<< 5)) |
           (PINB&(1<<6) ? 0 : (1<< 6)) |
    1260:	28 2b       	or	r18, r24
    1262:	39 2b       	or	r19, r25
           (PINB&(1<<5) ? 0 : (1<< 7)) |
           (PINB&(1<<4) ? 0 : (1<< 8)) |
    1264:	1c 9b       	sbis	0x03, 4	; 3
    1266:	03 c0       	rjmp	.+6      	; 0x126e <matrix_scan+0xf2>
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <matrix_scan+0xf6>
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	91 e0       	ldi	r25, 0x01	; 1
           (PINF&(1<<4) ? 0 : (1<< 2)) |
           (PINF&(1<<5) ? 0 : (1<< 3)) |
           (PINF&(1<<6) ? 0 : (1<< 4)) |
           (PINF&(1<<7) ? 0 : (1<< 5)) |
           (PINB&(1<<6) ? 0 : (1<< 6)) |
           (PINB&(1<<5) ? 0 : (1<< 7)) |
    1272:	28 2b       	or	r18, r24
    1274:	39 2b       	or	r19, r25
           (PINB&(1<<4) ? 0 : (1<< 8)) |
           (PIND&(1<<7) ? 0 : (1<< 9)) |
    1276:	89 b1       	in	r24, 0x09	; 9
    1278:	99 27       	eor	r25, r25
    127a:	87 fd       	sbrc	r24, 7
    127c:	90 95       	com	r25
    127e:	80 95       	com	r24
    1280:	90 95       	com	r25
    1282:	88 27       	eor	r24, r24
    1284:	99 0f       	add	r25, r25
    1286:	88 1f       	adc	r24, r24
    1288:	99 27       	eor	r25, r25
    128a:	98 2f       	mov	r25, r24
    128c:	88 27       	eor	r24, r24
    128e:	99 0f       	add	r25, r25
           (PINF&(1<<5) ? 0 : (1<< 3)) |
           (PINF&(1<<6) ? 0 : (1<< 4)) |
           (PINF&(1<<7) ? 0 : (1<< 5)) |
           (PINB&(1<<6) ? 0 : (1<< 6)) |
           (PINB&(1<<5) ? 0 : (1<< 7)) |
           (PINB&(1<<4) ? 0 : (1<< 8)) |
    1290:	28 2b       	or	r18, r24
    1292:	39 2b       	or	r19, r25
           (PIND&(1<<7) ? 0 : (1<< 9)) |
           (PINB&(1<<0) ? 0 : (1<<10)) |
    1294:	18 9b       	sbis	0x03, 0	; 3
    1296:	03 c0       	rjmp	.+6      	; 0x129e <matrix_scan+0x122>
    1298:	40 e0       	ldi	r20, 0x00	; 0
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <matrix_scan+0x126>
    129e:	40 e0       	ldi	r20, 0x00	; 0
    12a0:	54 e0       	ldi	r21, 0x04	; 4
           (PINF&(1<<6) ? 0 : (1<< 4)) |
           (PINF&(1<<7) ? 0 : (1<< 5)) |
           (PINB&(1<<6) ? 0 : (1<< 6)) |
           (PINB&(1<<5) ? 0 : (1<< 7)) |
           (PINB&(1<<4) ? 0 : (1<< 8)) |
           (PIND&(1<<7) ? 0 : (1<< 9)) |
    12a2:	24 2b       	or	r18, r20
    12a4:	35 2b       	or	r19, r21
           (PINB&(1<<0) ? 0 : (1<<10)) |
           (PINB&(1<<1) ? 0 : (1<<11)) |
    12a6:	19 9b       	sbis	0x03, 1	; 3
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <matrix_scan+0x134>
    12aa:	40 e0       	ldi	r20, 0x00	; 0
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <matrix_scan+0x138>
    12b0:	40 e0       	ldi	r20, 0x00	; 0
    12b2:	58 e0       	ldi	r21, 0x08	; 8
           (PINF&(1<<7) ? 0 : (1<< 5)) |
           (PINB&(1<<6) ? 0 : (1<< 6)) |
           (PINB&(1<<5) ? 0 : (1<< 7)) |
           (PINB&(1<<4) ? 0 : (1<< 8)) |
           (PIND&(1<<7) ? 0 : (1<< 9)) |
           (PINB&(1<<0) ? 0 : (1<<10)) |
    12b4:	24 2b       	or	r18, r20
    12b6:	35 2b       	or	r19, r21
           (PINB&(1<<1) ? 0 : (1<<11)) |
           (PINB&(1<<2) ? 0 : (1<<12)) |
    12b8:	1a 9b       	sbis	0x03, 2	; 3
    12ba:	03 c0       	rjmp	.+6      	; 0x12c2 <matrix_scan+0x146>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <matrix_scan+0x14a>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e1       	ldi	r25, 0x10	; 16
           (PINB&(1<<6) ? 0 : (1<< 6)) |
           (PINB&(1<<5) ? 0 : (1<< 7)) |
           (PINB&(1<<4) ? 0 : (1<< 8)) |
           (PIND&(1<<7) ? 0 : (1<< 9)) |
           (PINB&(1<<0) ? 0 : (1<<10)) |
           (PINB&(1<<1) ? 0 : (1<<11)) |
    12c6:	28 2b       	or	r18, r24
    12c8:	39 2b       	or	r19, r25
           (PINB&(1<<2) ? 0 : (1<<12)) |
           (PINB&(1<<3) ? 0 : (1<<13)) |
    12ca:	1b 9b       	sbis	0x03, 3	; 3
    12cc:	03 c0       	rjmp	.+6      	; 0x12d4 <matrix_scan+0x158>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <matrix_scan+0x15c>
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e2       	ldi	r25, 0x20	; 32
           (PINB&(1<<5) ? 0 : (1<< 7)) |
           (PINB&(1<<4) ? 0 : (1<< 8)) |
           (PIND&(1<<7) ? 0 : (1<< 9)) |
           (PINB&(1<<0) ? 0 : (1<<10)) |
           (PINB&(1<<1) ? 0 : (1<<11)) |
           (PINB&(1<<2) ? 0 : (1<<12)) |
    12d8:	28 2b       	or	r18, r24
    12da:	39 2b       	or	r19, r25
           (PINB&(1<<3) ? 0 : (1<<13)) |
           (PINB&(1<<7) ? 0 : (1<<14));
    12dc:	83 b1       	in	r24, 0x03	; 3
    12de:	99 27       	eor	r25, r25
    12e0:	87 fd       	sbrc	r24, 7
    12e2:	90 95       	com	r25
    12e4:	80 95       	com	r24
    12e6:	90 95       	com	r25
    12e8:	88 27       	eor	r24, r24
    12ea:	99 0f       	add	r25, r25
    12ec:	88 1f       	adc	r24, r24
    12ee:	99 27       	eor	r25, r25
    12f0:	90 e4       	ldi	r25, 0x40	; 64
    12f2:	89 9f       	mul	r24, r25
    12f4:	90 2d       	mov	r25, r0
    12f6:	88 27       	eor	r24, r24
    12f8:	11 24       	eor	r1, r1
           (PINB&(1<<4) ? 0 : (1<< 8)) |
           (PIND&(1<<7) ? 0 : (1<< 9)) |
           (PINB&(1<<0) ? 0 : (1<<10)) |
           (PINB&(1<<1) ? 0 : (1<<11)) |
           (PINB&(1<<2) ? 0 : (1<<12)) |
           (PINB&(1<<3) ? 0 : (1<<13)) |
    12fa:	28 2b       	or	r18, r24
    12fc:	39 2b       	or	r19, r25
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    12fe:	88 81       	ld	r24, Y
    1300:	99 81       	ldd	r25, Y+1	; 0x01
    1302:	82 17       	cp	r24, r18
    1304:	93 07       	cpc	r25, r19
    1306:	49 f1       	breq	.+82     	; 0x135a <matrix_scan+0x1de>
            matrix_debouncing[i] = cols;
    1308:	39 83       	std	Y+1, r19	; 0x01
    130a:	28 83       	st	Y, r18
            if (debouncing) {
    130c:	80 91 00 01 	lds	r24, 0x0100
    1310:	88 23       	and	r24, r24
    1312:	01 f1       	breq	.+64     	; 0x1354 <matrix_scan+0x1d8>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1314:	80 91 c3 01 	lds	r24, 0x01C3
    1318:	80 ff       	sbrs	r24, 0
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <matrix_scan+0x1a8>
    131c:	84 e9       	ldi	r24, 0x94	; 148
    131e:	91 e0       	ldi	r25, 0x01	; 1
    1320:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    1324:	80 91 c3 01 	lds	r24, 0x01C3
    1328:	80 ff       	sbrs	r24, 0
    132a:	0c c0       	rjmp	.+24     	; 0x1344 <matrix_scan+0x1c8>
    132c:	80 91 00 01 	lds	r24, 0x0100
    1330:	1f 92       	push	r1
    1332:	8f 93       	push	r24
    1334:	ff 92       	push	r15
    1336:	ef 92       	push	r14
    1338:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	80 91 c3 01 	lds	r24, 0x01C3
    1348:	80 ff       	sbrs	r24, 0
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <matrix_scan+0x1d8>
    134c:	8d e8       	ldi	r24, 0x8D	; 141
    134e:	91 e0       	ldi	r25, 0x01	; 1
    1350:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
            }
            debouncing = DEBOUNCE;
    1354:	85 e0       	ldi	r24, 0x05	; 5
    1356:	80 93 00 01 	sts	0x0100, r24
        }
        unselect_rows();
    135a:	0e 94 92 08 	call	0x1124	; 0x1124 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    135e:	1f 5f       	subi	r17, 0xFF	; 255
    1360:	22 96       	adiw	r28, 0x02	; 2
    1362:	15 30       	cpi	r17, 0x05	; 5
    1364:	09 f0       	breq	.+2      	; 0x1368 <matrix_scan+0x1ec>
    1366:	18 cf       	rjmp	.-464    	; 0x1198 <matrix_scan+0x1c>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    1368:	80 91 00 01 	lds	r24, 0x0100
    136c:	88 23       	and	r24, r24
    136e:	c1 f0       	breq	.+48     	; 0x13a0 <matrix_scan+0x224>
        if (--debouncing) {
    1370:	81 50       	subi	r24, 0x01	; 1
    1372:	80 93 00 01 	sts	0x0100, r24
    1376:	88 23       	and	r24, r24
    1378:	39 f0       	breq	.+14     	; 0x1388 <matrix_scan+0x20c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    137a:	8f e9       	ldi	r24, 0x9F	; 159
    137c:	9f e0       	ldi	r25, 0x0F	; 15
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <matrix_scan+0x202>
    1382:	00 c0       	rjmp	.+0      	; 0x1384 <matrix_scan+0x208>
    1384:	00 00       	nop
    1386:	0c c0       	rjmp	.+24     	; 0x13a0 <matrix_scan+0x224>
    1388:	a2 e4       	ldi	r26, 0x42	; 66
    138a:	b1 e0       	ldi	r27, 0x01	; 1
    138c:	e8 e3       	ldi	r30, 0x38	; 56
    138e:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    1390:	81 91       	ld	r24, Z+
    1392:	91 91       	ld	r25, Z+
    1394:	8d 93       	st	X+, r24
    1396:	9d 93       	st	X+, r25

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	e2 34       	cpi	r30, 0x42	; 66
    139c:	f9 07       	cpc	r31, r25
    139e:	c1 f7       	brne	.-16     	; 0x1390 <matrix_scan+0x214>
                matrix[i] = matrix_debouncing[i];
            }
        }
    }

    uint8_t layer = biton32(layer_state);
    13a0:	60 91 a8 01 	lds	r22, 0x01A8
    13a4:	70 91 a9 01 	lds	r23, 0x01A9
    13a8:	80 91 aa 01 	lds	r24, 0x01AA
    13ac:	90 91 ab 01 	lds	r25, 0x01AB
    13b0:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <biton32>
    switch (layer) {
    13b4:	88 23       	and	r24, r24
    13b6:	29 f0       	breq	.+10     	; 0x13c2 <matrix_scan+0x246>
    13b8:	83 30       	cpi	r24, 0x03	; 3
    13ba:	28 f4       	brcc	.+10     	; 0x13c6 <matrix_scan+0x24a>
        case 1:
        case 2:
            DDRC |= (1<<7);
    13bc:	3f 9a       	sbi	0x07, 7	; 7
            PORTC |= (1<<7);
    13be:	47 9a       	sbi	0x08, 7	; 8
            break;
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <matrix_scan+0x24a>
        case 0:
            DDRC &= ~(1<<7);
    13c2:	3f 98       	cbi	0x07, 7	; 7
            PORTC &= ~(1<<7);
    13c4:	47 98       	cbi	0x08, 7	; 8
            break;
    }

    return 1;
}
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	08 95       	ret

000013d6 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    13d6:	e8 2f       	mov	r30, r24
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	ee 0f       	add	r30, r30
    13dc:	ff 1f       	adc	r31, r31
    13de:	ee 5b       	subi	r30, 0xBE	; 190
    13e0:	fe 4f       	sbci	r31, 0xFE	; 254
}
    13e2:	80 81       	ld	r24, Z
    13e4:	91 81       	ldd	r25, Z+1	; 0x01
    13e6:	08 95       	ret

000013e8 <matrix_print>:

void matrix_print(void)
{
    13e8:	cf 92       	push	r12
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    13f8:	86 e7       	ldi	r24, 0x76	; 118
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    1400:	92 e4       	ldi	r25, 0x42	; 66
    1402:	e9 2e       	mov	r14, r25
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	f9 2e       	mov	r15, r25
    1408:	c0 e0       	ldi	r28, 0x00	; 0
    140a:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    140c:	21 e7       	ldi	r18, 0x71	; 113
    140e:	c2 2e       	mov	r12, r18
    1410:	21 e0       	ldi	r18, 0x01	; 1
    1412:	d2 2e       	mov	r13, r18
        pbin_reverse16(matrix_get_row(row));
    1414:	08 e6       	ldi	r16, 0x68	; 104
    1416:	11 e0       	ldi	r17, 0x01	; 1

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	df 92       	push	r13
    141e:	cf 92       	push	r12
    1420:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    1424:	8e e6       	ldi	r24, 0x6E	; 110
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
        pbin_reverse16(matrix_get_row(row));
    142c:	f7 01       	movw	r30, r14
    142e:	81 91       	ld	r24, Z+
    1430:	91 91       	ld	r25, Z+
    1432:	7f 01       	movw	r14, r30
    1434:	0e 94 75 1f 	call	0x3eea	; 0x3eea <bitrev16>
    1438:	9f 93       	push	r25
    143a:	8f 93       	push	r24
    143c:	1f 93       	push	r17
    143e:	0f 93       	push	r16
    1440:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
        print("\n");
    1444:	86 e6       	ldi	r24, 0x66	; 102
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    144c:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    144e:	8d b7       	in	r24, 0x3d	; 61
    1450:	9e b7       	in	r25, 0x3e	; 62
    1452:	08 96       	adiw	r24, 0x08	; 8
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	9e bf       	out	0x3e, r25	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	8d bf       	out	0x3d, r24	; 61
    145e:	c5 30       	cpi	r28, 0x05	; 5
    1460:	d1 05       	cpc	r29, r1
    1462:	d1 f6       	brne	.-76     	; 0x1418 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	ff 90       	pop	r15
    146e:	ef 90       	pop	r14
    1470:	df 90       	pop	r13
    1472:	cf 90       	pop	r12
    1474:	08 95       	ret

00001476 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_FUNCTION)) {
    1476:	85 ff       	sbrs	r24, 5
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <led_set+0xa>
        // Output high.
        DDRF |= (1<<0);
    147a:	80 9a       	sbi	0x10, 0	; 16
        PORTF |= (1<<0);
    147c:	88 9a       	sbi	0x11, 0	; 17
    147e:	08 95       	ret
    } else {
        // Output low.
        DDRF &= ~(1<<0);
    1480:	80 98       	cbi	0x10, 0	; 16
        PORTF &= ~(1<<0);
    1482:	88 98       	cbi	0x11, 0	; 17
    1484:	08 95       	ret

00001486 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1486:	80 91 5e 01 	lds	r24, 0x015E
    148a:	08 95       	ret

0000148c <sendchar>:
{
    // Not wait once timeouted.
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    148c:	90 91 dd 01 	lds	r25, 0x01DD
    1490:	94 30       	cpi	r25, 0x04	; 4
    1492:	09 f0       	breq	.+2      	; 0x1496 <sendchar+0xa>
    1494:	4d c0       	rjmp	.+154    	; 0x1530 <sendchar+0xa4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1496:	90 91 e9 00 	lds	r25, 0x00E9
    149a:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    149c:	20 91 ec 00 	lds	r18, 0x00EC
    14a0:	20 ff       	sbrs	r18, 0
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <sendchar+0x1c>
    14a4:	20 e8       	ldi	r18, 0x80	; 128
    14a6:	01 c0       	rjmp	.+2      	; 0x14aa <sendchar+0x1e>
    14a8:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14aa:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14ac:	94 e0       	ldi	r25, 0x04	; 4
    14ae:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    14b2:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    14b6:	90 ff       	sbrs	r25, 0
    14b8:	38 c0       	rjmp	.+112    	; 0x152a <sendchar+0x9e>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    14ba:	90 91 ee 00 	lds	r25, 0x00EE
    14be:	97 ff       	sbrs	r25, 7
    14c0:	34 c0       	rjmp	.+104    	; 0x152a <sendchar+0x9e>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    14c2:	90 91 4d 01 	lds	r25, 0x014D
    14c6:	99 23       	and	r25, r25
    14c8:	21 f0       	breq	.+8      	; 0x14d2 <sendchar+0x46>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14ca:	90 91 e8 00 	lds	r25, 0x00E8
    14ce:	95 ff       	sbrs	r25, 5
    14d0:	2c c0       	rjmp	.+88     	; 0x152a <sendchar+0x9e>
        goto ERROR_EXIT;
    }

    timeouted = false;
    14d2:	10 92 4d 01 	sts	0x014D, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    14d6:	96 e0       	ldi	r25, 0x06	; 6
    14d8:	30 91 e8 00 	lds	r19, 0x00E8
    14dc:	35 fd       	sbrc	r19, 5
    14de:	15 c0       	rjmp	.+42     	; 0x150a <sendchar+0x7e>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    14e0:	30 91 dd 01 	lds	r19, 0x01DD
    14e4:	34 30       	cpi	r19, 0x04	; 4
    14e6:	09 f5       	brne	.+66     	; 0x152a <sendchar+0x9e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    14e8:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    14ec:	35 fd       	sbrc	r19, 5
    14ee:	1d c0       	rjmp	.+58     	; 0x152a <sendchar+0x9e>
    14f0:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    14f2:	21 f4       	brne	.+8      	; 0x14fc <sendchar+0x70>
            timeouted = true;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	80 93 4d 01 	sts	0x014D, r24
            goto ERROR_EXIT;
    14fa:	17 c0       	rjmp	.+46     	; 0x152a <sendchar+0x9e>
    14fc:	ef e9       	ldi	r30, 0x9F	; 159
    14fe:	ff e0       	ldi	r31, 0x0F	; 15
    1500:	31 97       	sbiw	r30, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <sendchar+0x74>
    1504:	00 c0       	rjmp	.+0      	; 0x1506 <sendchar+0x7a>
    1506:	00 00       	nop
    1508:	e7 cf       	rjmp	.-50     	; 0x14d8 <sendchar+0x4c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    150a:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    150e:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed())
    1512:	85 fd       	sbrc	r24, 5
    1514:	05 c0       	rjmp	.+10     	; 0x1520 <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1516:	80 91 e8 00 	lds	r24, 0x00E8
    151a:	8e 77       	andi	r24, 0x7E	; 126
    151c:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1520:	2f 70       	andi	r18, 0x0F	; 15
    1522:	20 93 e9 00 	sts	0x00E9, r18
        Endpoint_ClearIN();

    Endpoint_SelectEndpoint(ep);
    return 0;
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	08 95       	ret
    152a:	2f 70       	andi	r18, 0x0F	; 15
    152c:	20 93 e9 00 	sts	0x00E9, r18
    // Not wait once timeouted.
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    1530:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    1532:	08 95       	ret

00001534 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	00 d0       	rcall	.+0      	; 0x153a <send_consumer+0x6>
    153a:	1f 92       	push	r1
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1540:	20 91 dd 01 	lds	r18, 0x01DD
    1544:	24 30       	cpi	r18, 0x04	; 4
    1546:	19 f5       	brne	.+70     	; 0x158e <send_consumer+0x5a>
        return;

    report_extra_t r = {
    1548:	23 e0       	ldi	r18, 0x03	; 3
    154a:	29 83       	std	Y+1, r18	; 0x01
    154c:	9b 83       	std	Y+3, r25	; 0x03
    154e:	8a 83       	std	Y+2, r24	; 0x02
    1550:	20 93 e9 00 	sts	0x00E9, r18
    1554:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1556:	90 91 e8 00 	lds	r25, 0x00E8
    155a:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    155c:	95 fd       	sbrc	r25, 5
    155e:	06 c0       	rjmp	.+12     	; 0x156c <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1560:	95 ed       	ldi	r25, 0xD5	; 213
    1562:	9a 95       	dec	r25
    1564:	f1 f7       	brne	.-4      	; 0x1562 <send_consumer+0x2e>
    1566:	00 00       	nop
    1568:	81 11       	cpse	r24, r1
    156a:	f5 cf       	rjmp	.-22     	; 0x1556 <send_consumer+0x22>
    156c:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1570:	85 ff       	sbrs	r24, 5
    1572:	0d c0       	rjmp	.+26     	; 0x158e <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	63 e0       	ldi	r22, 0x03	; 3
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	ce 01       	movw	r24, r28
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1584:	80 91 e8 00 	lds	r24, 0x00E8
    1588:	8e 77       	andi	r24, 0x7E	; 126
    158a:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <send_system+0x6>
    15a0:	1f 92       	push	r1
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    15a6:	20 91 dd 01 	lds	r18, 0x01DD
    15aa:	24 30       	cpi	r18, 0x04	; 4
    15ac:	21 f5       	brne	.+72     	; 0x15f6 <send_system+0x5c>
        return;

    report_extra_t r = {
    15ae:	22 e0       	ldi	r18, 0x02	; 2
    15b0:	29 83       	std	Y+1, r18	; 0x01
    15b2:	9b 83       	std	Y+3, r25	; 0x03
    15b4:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15b6:	83 e0       	ldi	r24, 0x03	; 3
    15b8:	80 93 e9 00 	sts	0x00E9, r24
    15bc:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15be:	90 91 e8 00 	lds	r25, 0x00E8
    15c2:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    15c4:	95 fd       	sbrc	r25, 5
    15c6:	06 c0       	rjmp	.+12     	; 0x15d4 <send_system+0x3a>
    15c8:	95 ed       	ldi	r25, 0xD5	; 213
    15ca:	9a 95       	dec	r25
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <send_system+0x30>
    15ce:	00 00       	nop
    15d0:	81 11       	cpse	r24, r1
    15d2:	f5 cf       	rjmp	.-22     	; 0x15be <send_system+0x24>
    15d4:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    15d8:	85 ff       	sbrs	r24, 5
    15da:	0d c0       	rjmp	.+26     	; 0x15f6 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	63 e0       	ldi	r22, 0x03	; 3
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	ce 01       	movw	r24, r28
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15ec:	80 91 e8 00 	lds	r24, 0x00E8
    15f0:	8e 77       	andi	r24, 0x7E	; 126
    15f2:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	08 95       	ret

00001602 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1602:	20 91 dd 01 	lds	r18, 0x01DD
    1606:	24 30       	cpi	r18, 0x04	; 4
    1608:	f1 f4       	brne	.+60     	; 0x1646 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    160a:	22 e0       	ldi	r18, 0x02	; 2
    160c:	20 93 e9 00 	sts	0x00E9, r18
    1610:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1612:	30 91 e8 00 	lds	r19, 0x00E8
    1616:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1618:	35 fd       	sbrc	r19, 5
    161a:	06 c0       	rjmp	.+12     	; 0x1628 <send_mouse+0x26>
    161c:	35 ed       	ldi	r19, 0xD5	; 213
    161e:	3a 95       	dec	r19
    1620:	f1 f7       	brne	.-4      	; 0x161e <send_mouse+0x1c>
    1622:	00 00       	nop
    1624:	21 11       	cpse	r18, r1
    1626:	f5 cf       	rjmp	.-22     	; 0x1612 <send_mouse+0x10>
    1628:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    162c:	25 ff       	sbrs	r18, 5
    162e:	0b c0       	rjmp	.+22     	; 0x1646 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	65 e0       	ldi	r22, 0x05	; 5
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    163c:	80 91 e8 00 	lds	r24, 0x00E8
    1640:	8e 77       	andi	r24, 0x7E	; 126
    1642:	80 93 e8 00 	sts	0x00E8, r24
    1646:	08 95       	ret

00001648 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    164e:	80 91 dd 01 	lds	r24, 0x01DD
    1652:	84 30       	cpi	r24, 0x04	; 4
    1654:	09 f0       	breq	.+2      	; 0x1658 <send_keyboard+0x10>
    1656:	43 c0       	rjmp	.+134    	; 0x16de <send_keyboard+0x96>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    1658:	80 91 0c 01 	lds	r24, 0x010C
    165c:	88 23       	and	r24, r24
    165e:	c1 f0       	breq	.+48     	; 0x1690 <send_keyboard+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1660:	85 e0       	ldi	r24, 0x05	; 5
    1662:	80 93 e9 00 	sts	0x00E9, r24
    1666:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1668:	90 91 e8 00 	lds	r25, 0x00E8
    166c:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    166e:	95 fd       	sbrc	r25, 5
    1670:	06 c0       	rjmp	.+12     	; 0x167e <send_keyboard+0x36>
    1672:	95 e1       	ldi	r25, 0x15	; 21
    1674:	9a 95       	dec	r25
    1676:	f1 f7       	brne	.-4      	; 0x1674 <send_keyboard+0x2c>
    1678:	00 00       	nop
    167a:	81 11       	cpse	r24, r1
    167c:	f5 cf       	rjmp	.-22     	; 0x1668 <send_keyboard+0x20>
    167e:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    1682:	85 ff       	sbrs	r24, 5
    1684:	2c c0       	rjmp	.+88     	; 0x16de <send_keyboard+0x96>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    1686:	40 e0       	ldi	r20, 0x00	; 0
    1688:	50 e0       	ldi	r21, 0x00	; 0
    168a:	60 e1       	ldi	r22, 0x10	; 16
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	17 c0       	rjmp	.+46     	; 0x16be <send_keyboard+0x76>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	80 93 e9 00 	sts	0x00E9, r24
    1696:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1698:	90 91 e8 00 	lds	r25, 0x00E8
    169c:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    169e:	95 fd       	sbrc	r25, 5
    16a0:	06 c0       	rjmp	.+12     	; 0x16ae <send_keyboard+0x66>
    16a2:	95 ed       	ldi	r25, 0xD5	; 213
    16a4:	9a 95       	dec	r25
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <send_keyboard+0x5c>
    16a8:	00 00       	nop
    16aa:	81 11       	cpse	r24, r1
    16ac:	f5 cf       	rjmp	.-22     	; 0x1698 <send_keyboard+0x50>
    16ae:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    16b2:	85 ff       	sbrs	r24, 5
    16b4:	14 c0       	rjmp	.+40     	; 0x16de <send_keyboard+0x96>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    16b6:	40 e0       	ldi	r20, 0x00	; 0
    16b8:	50 e0       	ldi	r21, 0x00	; 0
    16ba:	68 e0       	ldi	r22, 0x08	; 8
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	ce 01       	movw	r24, r28
    16c0:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16c4:	80 91 e8 00 	lds	r24, 0x00E8
    16c8:	8e 77       	andi	r24, 0x7E	; 126
    16ca:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    16ce:	80 e1       	ldi	r24, 0x10	; 16
    16d0:	fe 01       	movw	r30, r28
    16d2:	ae e4       	ldi	r26, 0x4E	; 78
    16d4:	b1 e0       	ldi	r27, 0x01	; 1
    16d6:	01 90       	ld	r0, Z+
    16d8:	0d 92       	st	X+, r0
    16da:	8a 95       	dec	r24
    16dc:	e1 f7       	brne	.-8      	; 0x16d6 <send_keyboard+0x8e>
}
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	08 95       	ret

000016e4 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    16e4:	84 ed       	ldi	r24, 0xD4	; 212
    16e6:	91 e0       	ldi	r25, 0x01	; 1
    16e8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    16ec:	80 91 dc 01 	lds	r24, 0x01DC
    16f0:	81 11       	cpse	r24, r1
    16f2:	09 c0       	rjmp	.+18     	; 0x1706 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    16f4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USB_Disable>
        USB_Init();
    16f8:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    16fc:	80 91 e2 00 	lds	r24, 0x00E2
    1700:	84 60       	ori	r24, 0x04	; 4
    1702:	80 93 e2 00 	sts	0x00E2, r24
    1706:	08 95       	ret

00001708 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    1708:	80 ed       	ldi	r24, 0xD0	; 208
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    1710:	10 92 dc 01 	sts	0x01DC, r1
    1714:	08 95       	ret

00001716 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    1716:	8c ec       	ldi	r24, 0xCC	; 204
    1718:	91 e0       	ldi	r25, 0x01	; 1
    171a:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <xputs>

0000171e <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    171e:	88 ec       	ldi	r24, 0xC8	; 200
    1720:	91 e0       	ldi	r25, 0x01	; 1
    1722:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    matrix_power_down();
    1726:	0c 94 8f 08 	jmp	0x111e	; 0x111e <matrix_power_down>

0000172a <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    172a:	84 ec       	ldi	r24, 0xC4	; 196
    172c:	91 e0       	ldi	r25, 0x01	; 1
    172e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    suspend_wakeup_init();
    1732:	0c 94 ca 1f 	jmp	0x3f94	; 0x3f94 <suspend_wakeup_init>

00001736 <EVENT_USB_Device_StartOfFrame>:
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1736:	80 91 dd 01 	lds	r24, 0x01DD
    173a:	84 30       	cpi	r24, 0x04	; 4
    173c:	49 f5       	brne	.+82     	; 0x1790 <EVENT_USB_Device_StartOfFrame+0x5a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    173e:	80 91 e9 00 	lds	r24, 0x00E9
    1742:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1744:	90 91 ec 00 	lds	r25, 0x00EC
    1748:	90 ff       	sbrs	r25, 0
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <EVENT_USB_Device_StartOfFrame+0x1a>
    174c:	90 e8       	ldi	r25, 0x80	; 128
    174e:	01 c0       	rjmp	.+2      	; 0x1752 <EVENT_USB_Device_StartOfFrame+0x1c>
    1750:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1752:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1754:	84 e0       	ldi	r24, 0x04	; 4
    1756:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    175a:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    175e:	80 ff       	sbrs	r24, 0
    1760:	14 c0       	rjmp	.+40     	; 0x178a <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1762:	80 91 ee 00 	lds	r24, 0x00EE
    1766:	87 ff       	sbrs	r24, 7
    1768:	10 c0       	rjmp	.+32     	; 0x178a <EVENT_USB_Device_StartOfFrame+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    176a:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    176e:	85 ff       	sbrs	r24, 5
    1770:	03 c0       	rjmp	.+6      	; 0x1778 <EVENT_USB_Device_StartOfFrame+0x42>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1772:	10 92 f1 00 	sts	0x00F1, r1
    1776:	f9 cf       	rjmp	.-14     	; 0x176a <EVENT_USB_Device_StartOfFrame+0x34>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1778:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    177c:	80 ff       	sbrs	r24, 0
    177e:	05 c0       	rjmp	.+10     	; 0x178a <EVENT_USB_Device_StartOfFrame+0x54>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1780:	80 91 e8 00 	lds	r24, 0x00E8
    1784:	8e 77       	andi	r24, 0x7E	; 126
    1786:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    178a:	9f 70       	andi	r25, 0x0F	; 15
    178c:	90 93 e9 00 	sts	0x00E9, r25
    1790:	08 95       	ret

00001792 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1792:	42 e0       	ldi	r20, 0x02	; 2
    1794:	61 ec       	ldi	r22, 0xC1	; 193
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	0e 94 56 0d 	call	0x1aac	; 0x1aac <Endpoint_ConfigureEndpoint_Prv>
    179c:	42 e0       	ldi	r20, 0x02	; 2
    179e:	61 ec       	ldi	r22, 0xC1	; 193
    17a0:	82 e0       	ldi	r24, 0x02	; 2
    17a2:	0e 94 56 0d 	call	0x1aac	; 0x1aac <Endpoint_ConfigureEndpoint_Prv>
    17a6:	42 e0       	ldi	r20, 0x02	; 2
    17a8:	61 ec       	ldi	r22, 0xC1	; 193
    17aa:	83 e0       	ldi	r24, 0x03	; 3
    17ac:	0e 94 56 0d 	call	0x1aac	; 0x1aac <Endpoint_ConfigureEndpoint_Prv>
    17b0:	46 e2       	ldi	r20, 0x26	; 38
    17b2:	61 ec       	ldi	r22, 0xC1	; 193
    17b4:	84 e0       	ldi	r24, 0x04	; 4
    17b6:	0e 94 56 0d 	call	0x1aac	; 0x1aac <Endpoint_ConfigureEndpoint_Prv>
    17ba:	42 e1       	ldi	r20, 0x12	; 18
    17bc:	61 ec       	ldi	r22, 0xC1	; 193
    17be:	85 e0       	ldi	r24, 0x05	; 5
    17c0:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <Endpoint_ConfigureEndpoint_Prv>

000017c4 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    17c4:	80 91 df 01 	lds	r24, 0x01DF
    17c8:	83 30       	cpi	r24, 0x03	; 3
    17ca:	09 f4       	brne	.+2      	; 0x17ce <EVENT_USB_Device_ControlRequest+0xa>
    17cc:	55 c0       	rjmp	.+170    	; 0x1878 <EVENT_USB_Device_ControlRequest+0xb4>
    17ce:	30 f4       	brcc	.+12     	; 0x17dc <EVENT_USB_Device_ControlRequest+0x18>
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	71 f0       	breq	.+28     	; 0x17f0 <EVENT_USB_Device_ControlRequest+0x2c>
    17d4:	82 30       	cpi	r24, 0x02	; 2
    17d6:	09 f4       	brne	.+2      	; 0x17da <EVENT_USB_Device_ControlRequest+0x16>
    17d8:	95 c0       	rjmp	.+298    	; 0x1904 <EVENT_USB_Device_ControlRequest+0x140>
    17da:	08 95       	ret
    17dc:	8a 30       	cpi	r24, 0x0A	; 10
    17de:	09 f4       	brne	.+2      	; 0x17e2 <EVENT_USB_Device_ControlRequest+0x1e>
    17e0:	81 c0       	rjmp	.+258    	; 0x18e4 <EVENT_USB_Device_ControlRequest+0x120>
    17e2:	8b 30       	cpi	r24, 0x0B	; 11
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <EVENT_USB_Device_ControlRequest+0x24>
    17e6:	60 c0       	rjmp	.+192    	; 0x18a8 <EVENT_USB_Device_ControlRequest+0xe4>
    17e8:	89 30       	cpi	r24, 0x09	; 9
    17ea:	09 f0       	breq	.+2      	; 0x17ee <EVENT_USB_Device_ControlRequest+0x2a>
    17ec:	a3 c0       	rjmp	.+326    	; 0x1934 <EVENT_USB_Device_ControlRequest+0x170>
    17ee:	20 c0       	rjmp	.+64     	; 0x1830 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    17f0:	80 91 de 01 	lds	r24, 0x01DE
    17f4:	81 3a       	cpi	r24, 0xA1	; 161
    17f6:	09 f0       	breq	.+2      	; 0x17fa <EVENT_USB_Device_ControlRequest+0x36>
    17f8:	9d c0       	rjmp	.+314    	; 0x1934 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    17fa:	80 91 e8 00 	lds	r24, 0x00E8
    17fe:	87 7f       	andi	r24, 0xF7	; 247
    1800:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1804:	80 91 e2 01 	lds	r24, 0x01E2
    1808:	90 91 e3 01 	lds	r25, 0x01E3
    180c:	89 2b       	or	r24, r25
    180e:	21 f0       	breq	.+8      	; 0x1818 <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    1810:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	03 c0       	rjmp	.+6      	; 0x181e <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    1818:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    181a:	8e e4       	ldi	r24, 0x4E	; 78
    181c:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1824:	80 91 e8 00 	lds	r24, 0x00E8
    1828:	8b 77       	andi	r24, 0x7B	; 123
    182a:	80 93 e8 00 	sts	0x00E8, r24
    182e:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1830:	80 91 de 01 	lds	r24, 0x01DE
    1834:	81 32       	cpi	r24, 0x21	; 33
    1836:	09 f0       	breq	.+2      	; 0x183a <EVENT_USB_Device_ControlRequest+0x76>
    1838:	7d c0       	rjmp	.+250    	; 0x1934 <EVENT_USB_Device_ControlRequest+0x170>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    183a:	80 91 e2 01 	lds	r24, 0x01E2
    183e:	90 91 e3 01 	lds	r25, 0x01E3
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	19 f0       	breq	.+6      	; 0x184c <EVENT_USB_Device_ControlRequest+0x88>
    1846:	04 97       	sbiw	r24, 0x04	; 4
    1848:	09 f0       	breq	.+2      	; 0x184c <EVENT_USB_Device_ControlRequest+0x88>
    184a:	74 c0       	rjmp	.+232    	; 0x1934 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    184c:	80 91 e8 00 	lds	r24, 0x00E8
    1850:	87 7f       	andi	r24, 0xF7	; 247
    1852:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1856:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    185a:	82 fd       	sbrc	r24, 2
    185c:	05 c0       	rjmp	.+10     	; 0x1868 <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    185e:	80 91 dd 01 	lds	r24, 0x01DD
    1862:	81 11       	cpse	r24, r1
    1864:	f8 cf       	rjmp	.-16     	; 0x1856 <EVENT_USB_Device_ControlRequest+0x92>
    1866:	66 c0       	rjmp	.+204    	; 0x1934 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1868:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    186c:	80 93 5e 01 	sts	0x015E, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1870:	80 91 e8 00 	lds	r24, 0x00E8
    1874:	8b 77       	andi	r24, 0x7B	; 123
    1876:	5a c0       	rjmp	.+180    	; 0x192c <EVENT_USB_Device_ControlRequest+0x168>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1878:	80 91 de 01 	lds	r24, 0x01DE
    187c:	81 3a       	cpi	r24, 0xA1	; 161
    187e:	09 f0       	breq	.+2      	; 0x1882 <EVENT_USB_Device_ControlRequest+0xbe>
    1880:	59 c0       	rjmp	.+178    	; 0x1934 <EVENT_USB_Device_ControlRequest+0x170>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1882:	80 91 e2 01 	lds	r24, 0x01E2
    1886:	90 91 e3 01 	lds	r25, 0x01E3
    188a:	89 2b       	or	r24, r25
    188c:	09 f0       	breq	.+2      	; 0x1890 <EVENT_USB_Device_ControlRequest+0xcc>
    188e:	52 c0       	rjmp	.+164    	; 0x1934 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1890:	80 91 e8 00 	lds	r24, 0x00E8
    1894:	87 7f       	andi	r24, 0xF7	; 247
    1896:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    189a:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    189e:	80 ff       	sbrs	r24, 0
    18a0:	fc cf       	rjmp	.-8      	; 0x189a <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    18a2:	80 91 0b 01 	lds	r24, 0x010B
    18a6:	3d c0       	rjmp	.+122    	; 0x1922 <EVENT_USB_Device_ControlRequest+0x15e>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    18a8:	80 91 de 01 	lds	r24, 0x01DE
    18ac:	81 32       	cpi	r24, 0x21	; 33
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <EVENT_USB_Device_ControlRequest+0xee>
    18b0:	41 c0       	rjmp	.+130    	; 0x1934 <EVENT_USB_Device_ControlRequest+0x170>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    18b2:	80 91 e2 01 	lds	r24, 0x01E2
    18b6:	90 91 e3 01 	lds	r25, 0x01E3
    18ba:	89 2b       	or	r24, r25
    18bc:	d9 f5       	brne	.+118    	; 0x1934 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18be:	80 91 e8 00 	lds	r24, 0x00E8
    18c2:	87 7f       	andi	r24, 0xF7	; 247
    18c4:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    18c8:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <Endpoint_ClearStatusStage>

                    keyboard_protocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    18cc:	90 91 e0 01 	lds	r25, 0x01E0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	91 11       	cpse	r25, r1
    18d4:	01 c0       	rjmp	.+2      	; 0x18d8 <EVENT_USB_Device_ControlRequest+0x114>
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	80 93 0b 01 	sts	0x010B, r24
#ifdef NKRO_ENABLE
                    keyboard_nkro = !!keyboard_protocol;
    18dc:	80 93 0c 01 	sts	0x010C, r24
#endif
                    clear_keyboard();
    18e0:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    18e4:	80 91 de 01 	lds	r24, 0x01DE
    18e8:	81 32       	cpi	r24, 0x21	; 33
    18ea:	21 f5       	brne	.+72     	; 0x1934 <EVENT_USB_Device_ControlRequest+0x170>
    18ec:	80 91 e8 00 	lds	r24, 0x00E8
    18f0:	87 7f       	andi	r24, 0xF7	; 247
    18f2:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    18f6:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    18fa:	80 91 e1 01 	lds	r24, 0x01E1
    18fe:	80 93 4c 01 	sts	0x014C, r24
    1902:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1904:	80 91 de 01 	lds	r24, 0x01DE
    1908:	81 3a       	cpi	r24, 0xA1	; 161
    190a:	a1 f4       	brne	.+40     	; 0x1934 <EVENT_USB_Device_ControlRequest+0x170>
    190c:	80 91 e8 00 	lds	r24, 0x00E8
    1910:	87 7f       	andi	r24, 0xF7	; 247
    1912:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1916:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    191a:	80 ff       	sbrs	r24, 0
    191c:	fc cf       	rjmp	.-8      	; 0x1916 <EVENT_USB_Device_ControlRequest+0x152>
                Endpoint_Write_8(keyboard_idle);
    191e:	80 91 4c 01 	lds	r24, 0x014C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1922:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1926:	80 91 e8 00 	lds	r24, 0x00E8
    192a:	8e 77       	andi	r24, 0x7E	; 126
    192c:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1930:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <Endpoint_ClearStatusStage>
    1934:	08 95       	ret

00001936 <main>:
 * main
 ******************************************************************************/
static void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1936:	84 b7       	in	r24, 0x34	; 52
    1938:	87 7f       	andi	r24, 0xF7	; 247
    193a:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    193c:	88 e1       	ldi	r24, 0x18	; 24
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	80 93 60 00 	sts	0x0060, r24
    1946:	10 92 60 00 	sts	0x0060, r1
    194a:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	80 e8       	ldi	r24, 0x80	; 128
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	80 93 61 00 	sts	0x0061, r24
    1958:	90 93 61 00 	sts	0x0061, r25
    195c:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    195e:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USB_Disable>

    USB_Init();
    1962:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <USB_Init>
    1966:	80 91 e2 00 	lds	r24, 0x00E2
    196a:	84 60       	ori	r24, 0x04	; 4
    196c:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    1970:	86 e4       	ldi	r24, 0x46	; 70
    1972:	9a e0       	ldi	r25, 0x0A	; 10
    1974:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <print_set_sendchar>

int main(void)  __attribute__ ((weak));
int main(void)
{
    SetupHardware();
    sei();
    1978:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    197a:	80 91 dd 01 	lds	r24, 0x01DD
    197e:	84 30       	cpi	r24, 0x04	; 4
    1980:	e1 f7       	brne	.-8      	; 0x197a <main+0x44>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    1982:	83 eb       	ldi	r24, 0xB3	; 179
    1984:	91 e0       	ldi	r25, 0x01	; 1
    1986:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>

    /* init modules */
    keyboard_init();
    198a:	0e 94 43 12 	call	0x2486	; 0x2486 <keyboard_init>
    host_set_driver(&lufa_driver);
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	91 e0       	ldi	r25, 0x01	; 1
    1992:	0e 94 b1 11 	call	0x2362	; 0x2362 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    1996:	82 ea       	ldi	r24, 0xA2	; 162
    1998:	91 e0       	ldi	r25, 0x01	; 1
    199a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    199e:	80 91 dd 01 	lds	r24, 0x01DD
    19a2:	85 30       	cpi	r24, 0x05	; 5
    19a4:	89 f4       	brne	.+34     	; 0x19c8 <main+0x92>
            print("[s]");
    19a6:	8e e9       	ldi	r24, 0x9E	; 158
    19a8:	91 e0       	ldi	r25, 0x01	; 1
    19aa:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
            suspend_power_down();
    19ae:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    19b2:	80 91 db 01 	lds	r24, 0x01DB
    19b6:	88 23       	and	r24, r24
    19b8:	91 f3       	breq	.-28     	; 0x199e <main+0x68>
    19ba:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <suspend_wakeup_condition>
    19be:	88 23       	and	r24, r24
    19c0:	71 f3       	breq	.-36     	; 0x199e <main+0x68>
                    USB_Device_SendRemoteWakeup();
    19c2:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <USB_Device_SendRemoteWakeup>
    19c6:	eb cf       	rjmp	.-42     	; 0x199e <main+0x68>
            }
        }

        keyboard_task();
    19c8:	0e 94 71 12 	call	0x24e2	; 0x24e2 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    19cc:	e8 cf       	rjmp	.-48     	; 0x199e <main+0x68>

000019ce <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    19ce:	29 2f       	mov	r18, r25
    19d0:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    19d2:	23 30       	cpi	r18, 0x03	; 3
    19d4:	31 05       	cpc	r19, r1
    19d6:	a9 f0       	breq	.+42     	; 0x1a02 <CALLBACK_USB_GetDescriptor+0x34>
    19d8:	6c f4       	brge	.+26     	; 0x19f4 <CALLBACK_USB_GetDescriptor+0x26>
    19da:	21 30       	cpi	r18, 0x01	; 1
    19dc:	31 05       	cpc	r19, r1
    19de:	09 f4       	brne	.+2      	; 0x19e2 <CALLBACK_USB_GetDescriptor+0x14>
    19e0:	42 c0       	rjmp	.+132    	; 0x1a66 <CALLBACK_USB_GetDescriptor+0x98>
    19e2:	22 30       	cpi	r18, 0x02	; 2
    19e4:	31 05       	cpc	r19, r1
    19e6:	09 f0       	breq	.+2      	; 0x19ea <CALLBACK_USB_GetDescriptor+0x1c>
    19e8:	43 c0       	rjmp	.+134    	; 0x1a70 <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    19ea:	8d e8       	ldi	r24, 0x8D	; 141
    19ec:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    19ee:	28 ef       	ldi	r18, 0xF8	; 248
    19f0:	31 e0       	ldi	r19, 0x01	; 1
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    19f2:	42 c0       	rjmp	.+132    	; 0x1a78 <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    19f4:	21 32       	cpi	r18, 0x21	; 33
    19f6:	31 05       	cpc	r19, r1
    19f8:	c9 f0       	breq	.+50     	; 0x1a2c <CALLBACK_USB_GetDescriptor+0x5e>
    19fa:	22 32       	cpi	r18, 0x22	; 34
    19fc:	31 05       	cpc	r19, r1
    19fe:	19 f1       	breq	.+70     	; 0x1a46 <CALLBACK_USB_GetDescriptor+0x78>
    1a00:	37 c0       	rjmp	.+110    	; 0x1a70 <CALLBACK_USB_GetDescriptor+0xa2>
    1a02:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1a04:	81 30       	cpi	r24, 0x01	; 1
    1a06:	91 05       	cpc	r25, r1
    1a08:	41 f0       	breq	.+16     	; 0x1a1a <CALLBACK_USB_GetDescriptor+0x4c>
    1a0a:	82 30       	cpi	r24, 0x02	; 2
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	41 f0       	breq	.+16     	; 0x1a20 <CALLBACK_USB_GetDescriptor+0x52>
    1a10:	89 2b       	or	r24, r25
    1a12:	71 f5       	brne	.+92     	; 0x1a70 <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1a14:	e4 ef       	ldi	r30, 0xF4	; 244
    1a16:	f1 e0       	ldi	r31, 0x01	; 1
    1a18:	05 c0       	rjmp	.+10     	; 0x1a24 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1a1a:	e4 ee       	ldi	r30, 0xE4	; 228
    1a1c:	f1 e0       	ldi	r31, 0x01	; 1
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1a20:	e8 ed       	ldi	r30, 0xD8	; 216
    1a22:	f1 e0       	ldi	r31, 0x01	; 1
    1a24:	84 91       	lpm	r24, Z
    1a26:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1a28:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    1a2a:	26 c0       	rjmp	.+76     	; 0x1a78 <CALLBACK_USB_GetDescriptor+0xaa>
    1a2c:	65 30       	cpi	r22, 0x05	; 5
    1a2e:	00 f5       	brcc	.+64     	; 0x1a70 <CALLBACK_USB_GetDescriptor+0xa2>
    1a30:	e6 2f       	mov	r30, r22
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	ec 5d       	subi	r30, 0xDC	; 220
    1a3a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3c:	20 81       	ld	r18, Z
    1a3e:	31 81       	ldd	r19, Z+1	; 0x01
    1a40:	89 e0       	ldi	r24, 0x09	; 9
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	19 c0       	rjmp	.+50     	; 0x1a78 <CALLBACK_USB_GetDescriptor+0xaa>
    1a46:	65 30       	cpi	r22, 0x05	; 5
    1a48:	98 f4       	brcc	.+38     	; 0x1a70 <CALLBACK_USB_GetDescriptor+0xa2>
    1a4a:	e6 2f       	mov	r30, r22
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	df 01       	movw	r26, r30
    1a50:	aa 0f       	add	r26, r26
    1a52:	bb 1f       	adc	r27, r27
    1a54:	a6 5e       	subi	r26, 0xE6	; 230
    1a56:	be 4f       	sbci	r27, 0xFE	; 254
    1a58:	2d 91       	ld	r18, X+
    1a5a:	3c 91       	ld	r19, X
    1a5c:	eb 5e       	subi	r30, 0xEB	; 235
    1a5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a60:	80 81       	ld	r24, Z
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	09 c0       	rjmp	.+18     	; 0x1a78 <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1a66:	82 e1       	ldi	r24, 0x12	; 18
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1a6a:	25 e8       	ldi	r18, 0x85	; 133
    1a6c:	32 e0       	ldi	r19, 0x02	; 2
    1a6e:	04 c0       	rjmp	.+8      	; 0x1a78 <CALLBACK_USB_GetDescriptor+0xaa>
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1a78:	fa 01       	movw	r30, r20
    1a7a:	31 83       	std	Z+1, r19	; 0x01
    1a7c:	20 83       	st	Z, r18
    return Size;
}
    1a7e:	08 95       	ret

00001a80 <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1a80:	80 e1       	ldi	r24, 0x10	; 16
    1a82:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1a84:	82 e1       	ldi	r24, 0x12	; 18
    1a86:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1a88:	09 b4       	in	r0, 0x29	; 41
    1a8a:	00 fe       	sbrs	r0, 0
    1a8c:	fd cf       	rjmp	.-6      	; 0x1a88 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1a8e:	80 91 d8 00 	lds	r24, 0x00D8
    1a92:	8f 7d       	andi	r24, 0xDF	; 223
    1a94:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1a98:	80 91 e0 00 	lds	r24, 0x00E0
    1a9c:	82 60       	ori	r24, 0x02	; 2
    1a9e:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1aa2:	80 91 e0 00 	lds	r24, 0x00E0
    1aa6:	81 fd       	sbrc	r24, 1
    1aa8:	fc cf       	rjmp	.-8      	; 0x1aa2 <USB_Device_SendRemoteWakeup+0x22>
}
    1aaa:	08 95       	ret

00001aac <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1aac:	98 2f       	mov	r25, r24
    1aae:	97 30       	cpi	r25, 0x07	; 7
    1ab0:	58 f5       	brcc	.+86     	; 0x1b08 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ab2:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1ab6:	98 17       	cp	r25, r24
    1ab8:	39 f0       	breq	.+14     	; 0x1ac8 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1aba:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1abe:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1ac2:	50 91 f0 00 	lds	r21, 0x00F0
    1ac6:	03 c0       	rjmp	.+6      	; 0x1ace <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1ac8:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1aca:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1acc:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1ace:	21 ff       	sbrs	r18, 1
    1ad0:	19 c0       	rjmp	.+50     	; 0x1b04 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1ad2:	30 91 eb 00 	lds	r19, 0x00EB
    1ad6:	3e 7f       	andi	r19, 0xFE	; 254
    1ad8:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1adc:	30 91 ed 00 	lds	r19, 0x00ED
    1ae0:	3d 7f       	andi	r19, 0xFD	; 253
    1ae2:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1ae6:	30 91 eb 00 	lds	r19, 0x00EB
    1aea:	31 60       	ori	r19, 0x01	; 1
    1aec:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1af0:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1af4:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1af8:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1afc:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1b00:	27 ff       	sbrs	r18, 7
    1b02:	07 c0       	rjmp	.+14     	; 0x1b12 <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1b04:	9f 5f       	subi	r25, 0xFF	; 255
    1b06:	d3 cf       	rjmp	.-90     	; 0x1aae <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b08:	8f 70       	andi	r24, 0x0F	; 15
    1b0a:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1b12:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1b14:	08 95       	ret

00001b16 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1b16:	80 91 de 01 	lds	r24, 0x01DE
    1b1a:	87 fd       	sbrc	r24, 7
    1b1c:	05 c0       	rjmp	.+10     	; 0x1b28 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b1e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1b22:	80 ff       	sbrs	r24, 0
    1b24:	0e c0       	rjmp	.+28     	; 0x1b42 <Endpoint_ClearStatusStage+0x2c>
    1b26:	12 c0       	rjmp	.+36     	; 0x1b4c <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b28:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1b2c:	82 fd       	sbrc	r24, 2
    1b2e:	05 c0       	rjmp	.+10     	; 0x1b3a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b30:	80 91 dd 01 	lds	r24, 0x01DD
    1b34:	81 11       	cpse	r24, r1
    1b36:	f8 cf       	rjmp	.-16     	; 0x1b28 <Endpoint_ClearStatusStage+0x12>
    1b38:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b3a:	80 91 e8 00 	lds	r24, 0x00E8
    1b3e:	8b 77       	andi	r24, 0x7B	; 123
    1b40:	08 c0       	rjmp	.+16     	; 0x1b52 <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b42:	80 91 dd 01 	lds	r24, 0x01DD
    1b46:	81 11       	cpse	r24, r1
    1b48:	ea cf       	rjmp	.-44     	; 0x1b1e <Endpoint_ClearStatusStage+0x8>
    1b4a:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b4c:	80 91 e8 00 	lds	r24, 0x00E8
    1b50:	8e 77       	andi	r24, 0x7E	; 126
    1b52:	80 93 e8 00 	sts	0x00E8, r24
    1b56:	08 95       	ret

00001b58 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1b58:	80 91 e4 00 	lds	r24, 0x00E4
    1b5c:	90 91 e5 00 	lds	r25, 0x00E5
    1b60:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1b62:	20 91 ec 00 	lds	r18, 0x00EC
    1b66:	20 ff       	sbrs	r18, 0
    1b68:	21 c0       	rjmp	.+66     	; 0x1bac <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b6a:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1b6e:	20 fd       	sbrc	r18, 0
    1b70:	21 c0       	rjmp	.+66     	; 0x1bb4 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b72:	20 91 dd 01 	lds	r18, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b76:	22 23       	and	r18, r18
    1b78:	89 f0       	breq	.+34     	; 0x1b9c <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b7a:	25 30       	cpi	r18, 0x05	; 5
    1b7c:	89 f0       	breq	.+34     	; 0x1ba0 <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b7e:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1b82:	25 fd       	sbrc	r18, 5
    1b84:	0f c0       	rjmp	.+30     	; 0x1ba4 <Endpoint_WaitUntilReady+0x4c>
    1b86:	20 91 e4 00 	lds	r18, 0x00E4
    1b8a:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1b8e:	28 17       	cp	r18, r24
    1b90:	39 07       	cpc	r19, r25
    1b92:	39 f3       	breq	.-50     	; 0x1b62 <Endpoint_WaitUntilReady+0xa>
    1b94:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1b96:	41 f0       	breq	.+16     	; 0x1ba8 <Endpoint_WaitUntilReady+0x50>
    1b98:	c9 01       	movw	r24, r18
    1b9a:	e3 cf       	rjmp	.-58     	; 0x1b62 <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1ba0:	83 e0       	ldi	r24, 0x03	; 3
    1ba2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1ba8:	84 e0       	ldi	r24, 0x04	; 4
    1baa:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1bac:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1bb0:	22 ff       	sbrs	r18, 2
    1bb2:	df cf       	rjmp	.-66     	; 0x1b72 <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	08 95       	ret

00001bb8 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1bb8:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1bbc:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1bc0:	e0 ee       	ldi	r30, 0xE0	; 224
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	81 60       	ori	r24, 0x01	; 1
    1bc8:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1bca:	e8 ed       	ldi	r30, 0xD8	; 216
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	8f 77       	andi	r24, 0x7F	; 127
    1bd2:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1bd4:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1bd6:	a7 ed       	ldi	r26, 0xD7	; 215
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	8c 91       	ld	r24, X
    1bdc:	8e 7f       	andi	r24, 0xFE	; 254
    1bde:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1be0:	80 81       	ld	r24, Z
    1be2:	8f 7e       	andi	r24, 0xEF	; 239
    1be4:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1be6:	10 92 dc 01 	sts	0x01DC, r1
    1bea:	08 95       	ret

00001bec <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1bec:	0f 93       	push	r16
    1bee:	1f 93       	push	r17
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1bf4:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1bf8:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1bfc:	c8 ed       	ldi	r28, 0xD8	; 216
    1bfe:	d0 e0       	ldi	r29, 0x00	; 0
    1c00:	88 81       	ld	r24, Y
    1c02:	8f 77       	andi	r24, 0x7F	; 127
    1c04:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1c06:	88 81       	ld	r24, Y
    1c08:	80 68       	ori	r24, 0x80	; 128
    1c0a:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c0c:	88 81       	ld	r24, Y
    1c0e:	8f 7d       	andi	r24, 0xDF	; 223
    1c10:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c12:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1c14:	10 92 dd 01 	sts	0x01DD, r1
	USB_Device_ConfigurationNumber  = 0;
    1c18:	10 92 d9 01 	sts	0x01D9, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1c1c:	10 92 db 01 	sts	0x01DB, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1c20:	10 92 da 01 	sts	0x01DA, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1c24:	00 ee       	ldi	r16, 0xE0	; 224
    1c26:	10 e0       	ldi	r17, 0x00	; 0
    1c28:	f8 01       	movw	r30, r16
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8b 7f       	andi	r24, 0xFB	; 251
    1c2e:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1c30:	88 81       	ld	r24, Y
    1c32:	81 60       	ori	r24, 0x01	; 1
    1c34:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c36:	42 e0       	ldi	r20, 0x02	; 2
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	0e 94 56 0d 	call	0x1aac	; 0x1aac <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c40:	e1 ee       	ldi	r30, 0xE1	; 225
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	8e 7f       	andi	r24, 0xFE	; 254
    1c48:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c4a:	e2 ee       	ldi	r30, 0xE2	; 226
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	81 60       	ori	r24, 0x01	; 1
    1c52:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1c54:	80 81       	ld	r24, Z
    1c56:	88 60       	ori	r24, 0x08	; 8
    1c58:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8e 7f       	andi	r24, 0xFE	; 254
    1c60:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1c62:	88 81       	ld	r24, Y
    1c64:	80 61       	ori	r24, 0x10	; 16
    1c66:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	08 95       	ret

00001c72 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1c72:	e7 ed       	ldi	r30, 0xD7	; 215
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	81 60       	ori	r24, 0x01	; 1
    1c7a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1c7c:	84 e0       	ldi	r24, 0x04	; 4
    1c7e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	80 93 dc 01 	sts	0x01DC, r24

	USB_ResetInterface();
    1c86:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <USB_ResetInterface>

00001c8a <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1c8a:	e8 ed       	ldi	r30, 0xD8	; 216
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	8e 7f       	andi	r24, 0xFE	; 254
    1c92:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1c94:	10 92 e2 00 	sts	0x00E2, r1
    1c98:	08 95       	ret

00001c9a <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1c9a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1c9e:	10 92 e1 00 	sts	0x00E1, r1
    1ca2:	08 95       	ret

00001ca4 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1ca4:	1f 92       	push	r1
    1ca6:	0f 92       	push	r0
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	0f 92       	push	r0
    1cac:	11 24       	eor	r1, r1
    1cae:	2f 93       	push	r18
    1cb0:	3f 93       	push	r19
    1cb2:	4f 93       	push	r20
    1cb4:	5f 93       	push	r21
    1cb6:	6f 93       	push	r22
    1cb8:	7f 93       	push	r23
    1cba:	8f 93       	push	r24
    1cbc:	9f 93       	push	r25
    1cbe:	af 93       	push	r26
    1cc0:	bf 93       	push	r27
    1cc2:	ef 93       	push	r30
    1cc4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1cc6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1cca:	82 ff       	sbrs	r24, 2
    1ccc:	0b c0       	rjmp	.+22     	; 0x1ce4 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1cce:	80 91 e2 00 	lds	r24, 0x00E2
    1cd2:	82 ff       	sbrs	r24, 2
    1cd4:	07 c0       	rjmp	.+14     	; 0x1ce4 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1cd6:	80 91 e1 00 	lds	r24, 0x00E1
    1cda:	8b 7f       	andi	r24, 0xFB	; 251
    1cdc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1ce0:	0e 94 9b 0b 	call	0x1736	; 0x1736 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1ce4:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1ce8:	80 ff       	sbrs	r24, 0
    1cea:	1f c0       	rjmp	.+62     	; 0x1d2a <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1cec:	80 91 d8 00 	lds	r24, 0x00D8
    1cf0:	80 ff       	sbrs	r24, 0
    1cf2:	1b c0       	rjmp	.+54     	; 0x1d2a <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1cf4:	80 91 da 00 	lds	r24, 0x00DA
    1cf8:	8e 7f       	andi	r24, 0xFE	; 254
    1cfa:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1cfe:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1d02:	80 ff       	sbrs	r24, 0
    1d04:	0d c0       	rjmp	.+26     	; 0x1d20 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d06:	80 e1       	ldi	r24, 0x10	; 16
    1d08:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d0a:	82 e1       	ldi	r24, 0x12	; 18
    1d0c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1d0e:	09 b4       	in	r0, 0x29	; 41
    1d10:	00 fe       	sbrs	r0, 0
    1d12:	fd cf       	rjmp	.-6      	; 0x1d0e <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	80 93 dd 01 	sts	0x01DD, r24
			EVENT_USB_Device_Connect();
    1d1a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <EVENT_USB_Device_Connect>
    1d1e:	05 c0       	rjmp	.+10     	; 0x1d2a <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d20:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1d22:	10 92 dd 01 	sts	0x01DD, r1
			EVENT_USB_Device_Disconnect();
    1d26:	0e 94 84 0b 	call	0x1708	; 0x1708 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1d2a:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1d2e:	80 ff       	sbrs	r24, 0
    1d30:	19 c0       	rjmp	.+50     	; 0x1d64 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1d32:	80 91 e2 00 	lds	r24, 0x00E2
    1d36:	80 ff       	sbrs	r24, 0
    1d38:	15 c0       	rjmp	.+42     	; 0x1d64 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d3a:	80 91 e2 00 	lds	r24, 0x00E2
    1d3e:	8e 7f       	andi	r24, 0xFE	; 254
    1d40:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d44:	80 91 e2 00 	lds	r24, 0x00E2
    1d48:	80 61       	ori	r24, 0x10	; 16
    1d4a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1d4e:	80 91 d8 00 	lds	r24, 0x00D8
    1d52:	80 62       	ori	r24, 0x20	; 32
    1d54:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d58:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1d5a:	85 e0       	ldi	r24, 0x05	; 5
    1d5c:	80 93 dd 01 	sts	0x01DD, r24
		EVENT_USB_Device_Suspend();
    1d60:	0e 94 8f 0b 	call	0x171e	; 0x171e <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1d64:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1d68:	84 ff       	sbrs	r24, 4
    1d6a:	2e c0       	rjmp	.+92     	; 0x1dc8 <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1d6c:	80 91 e2 00 	lds	r24, 0x00E2
    1d70:	84 ff       	sbrs	r24, 4
    1d72:	2a c0       	rjmp	.+84     	; 0x1dc8 <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d74:	80 e1       	ldi	r24, 0x10	; 16
    1d76:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d78:	82 e1       	ldi	r24, 0x12	; 18
    1d7a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1d7c:	09 b4       	in	r0, 0x29	; 41
    1d7e:	00 fe       	sbrs	r0, 0
    1d80:	fd cf       	rjmp	.-6      	; 0x1d7c <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1d82:	80 91 d8 00 	lds	r24, 0x00D8
    1d86:	8f 7d       	andi	r24, 0xDF	; 223
    1d88:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1d8c:	80 91 e1 00 	lds	r24, 0x00E1
    1d90:	8f 7e       	andi	r24, 0xEF	; 239
    1d92:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1d96:	80 91 e2 00 	lds	r24, 0x00E2
    1d9a:	8f 7e       	andi	r24, 0xEF	; 239
    1d9c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1da0:	80 91 e2 00 	lds	r24, 0x00E2
    1da4:	81 60       	ori	r24, 0x01	; 1
    1da6:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1daa:	80 91 d9 01 	lds	r24, 0x01D9
    1dae:	81 11       	cpse	r24, r1
    1db0:	04 c0       	rjmp	.+8      	; 0x1dba <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1db2:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1db6:	87 ff       	sbrs	r24, 7
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <__vector_10+0x11a>
    1dba:	84 e0       	ldi	r24, 0x04	; 4
    1dbc:	01 c0       	rjmp	.+2      	; 0x1dc0 <__vector_10+0x11c>
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	80 93 dd 01 	sts	0x01DD, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1dc4:	0e 94 95 0b 	call	0x172a	; 0x172a <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1dc8:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1dcc:	83 ff       	sbrs	r24, 3
    1dce:	29 c0       	rjmp	.+82     	; 0x1e22 <__vector_10+0x17e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1dd0:	80 91 e2 00 	lds	r24, 0x00E2
    1dd4:	83 ff       	sbrs	r24, 3
    1dd6:	25 c0       	rjmp	.+74     	; 0x1e22 <__vector_10+0x17e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1dd8:	80 91 e1 00 	lds	r24, 0x00E1
    1ddc:	87 7f       	andi	r24, 0xF7	; 247
    1dde:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	80 93 dd 01 	sts	0x01DD, r24
		USB_Device_ConfigurationNumber = 0;
    1de8:	10 92 d9 01 	sts	0x01D9, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1dec:	80 91 e1 00 	lds	r24, 0x00E1
    1df0:	8e 7f       	andi	r24, 0xFE	; 254
    1df2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1df6:	80 91 e2 00 	lds	r24, 0x00E2
    1dfa:	8e 7f       	andi	r24, 0xFE	; 254
    1dfc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1e00:	80 91 e2 00 	lds	r24, 0x00E2
    1e04:	80 61       	ori	r24, 0x10	; 16
    1e06:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1e0a:	42 e0       	ldi	r20, 0x02	; 2
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	0e 94 56 0d 	call	0x1aac	; 0x1aac <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1e14:	80 91 f0 00 	lds	r24, 0x00F0
    1e18:	88 60       	ori	r24, 0x08	; 8
    1e1a:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1e1e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1e22:	ff 91       	pop	r31
    1e24:	ef 91       	pop	r30
    1e26:	bf 91       	pop	r27
    1e28:	af 91       	pop	r26
    1e2a:	9f 91       	pop	r25
    1e2c:	8f 91       	pop	r24
    1e2e:	7f 91       	pop	r23
    1e30:	6f 91       	pop	r22
    1e32:	5f 91       	pop	r21
    1e34:	4f 91       	pop	r20
    1e36:	3f 91       	pop	r19
    1e38:	2f 91       	pop	r18
    1e3a:	0f 90       	pop	r0
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	0f 90       	pop	r0
    1e40:	1f 90       	pop	r1
    1e42:	18 95       	reti

00001e44 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1e44:	1f 92       	push	r1
    1e46:	0f 92       	push	r0
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	0f 92       	push	r0
    1e4c:	11 24       	eor	r1, r1
    1e4e:	2f 93       	push	r18
    1e50:	3f 93       	push	r19
    1e52:	4f 93       	push	r20
    1e54:	5f 93       	push	r21
    1e56:	6f 93       	push	r22
    1e58:	7f 93       	push	r23
    1e5a:	8f 93       	push	r24
    1e5c:	9f 93       	push	r25
    1e5e:	af 93       	push	r26
    1e60:	bf 93       	push	r27
    1e62:	cf 93       	push	r28
    1e64:	ef 93       	push	r30
    1e66:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1e68:	c0 91 e9 00 	lds	r28, 0x00E9
    1e6c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1e6e:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e72:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1e76:	80 91 f0 00 	lds	r24, 0x00F0
    1e7a:	87 7f       	andi	r24, 0xF7	; 247
    1e7c:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1e80:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1e82:	0e 94 60 10 	call	0x20c0	; 0x20c0 <USB_Device_ProcessControlRequest>
    1e86:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1e8a:	80 91 f0 00 	lds	r24, 0x00F0
    1e8e:	88 60       	ori	r24, 0x08	; 8
    1e90:	80 93 f0 00 	sts	0x00F0, r24
    1e94:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1e98:	ff 91       	pop	r31
    1e9a:	ef 91       	pop	r30
    1e9c:	cf 91       	pop	r28
    1e9e:	bf 91       	pop	r27
    1ea0:	af 91       	pop	r26
    1ea2:	9f 91       	pop	r25
    1ea4:	8f 91       	pop	r24
    1ea6:	7f 91       	pop	r23
    1ea8:	6f 91       	pop	r22
    1eaa:	5f 91       	pop	r21
    1eac:	4f 91       	pop	r20
    1eae:	3f 91       	pop	r19
    1eb0:	2f 91       	pop	r18
    1eb2:	0f 90       	pop	r0
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	0f 90       	pop	r0
    1eb8:	1f 90       	pop	r1
    1eba:	18 95       	reti

00001ebc <Endpoint_Write_Stream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1ebc:	cf 92       	push	r12
    1ebe:	df 92       	push	r13
    1ec0:	ef 92       	push	r14
    1ec2:	ff 92       	push	r15
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	7c 01       	movw	r14, r24
    1ece:	8b 01       	movw	r16, r22
    1ed0:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1ed2:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <Endpoint_WaitUntilReady>
    1ed6:	81 11       	cpse	r24, r1
    1ed8:	31 c0       	rjmp	.+98     	; 0x1f3c <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1eda:	20 97       	sbiw	r28, 0x00	; 0
    1edc:	31 f0       	breq	.+12     	; 0x1eea <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    1ede:	88 81       	ld	r24, Y
    1ee0:	99 81       	ldd	r25, Y+1	; 0x01
    1ee2:	08 1b       	sub	r16, r24
    1ee4:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1ee6:	e8 0e       	add	r14, r24
    1ee8:	f9 1e       	adc	r15, r25
// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1eea:	c1 2c       	mov	r12, r1
    1eec:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1eee:	01 15       	cp	r16, r1
    1ef0:	11 05       	cpc	r17, r1
    1ef2:	19 f1       	breq	.+70     	; 0x1f3a <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1ef4:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1ef8:	85 fd       	sbrc	r24, 5
    1efa:	14 c0       	rjmp	.+40     	; 0x1f24 <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1efc:	80 91 e8 00 	lds	r24, 0x00E8
    1f00:	8e 77       	andi	r24, 0x7E	; 126
    1f02:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1f06:	20 97       	sbiw	r28, 0x00	; 0
    1f08:	41 f0       	breq	.+16     	; 0x1f1a <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    1f0a:	88 81       	ld	r24, Y
    1f0c:	99 81       	ldd	r25, Y+1	; 0x01
    1f0e:	8c 0d       	add	r24, r12
    1f10:	9d 1d       	adc	r25, r13
    1f12:	99 83       	std	Y+1, r25	; 0x01
    1f14:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1f16:	85 e0       	ldi	r24, 0x05	; 5
    1f18:	11 c0       	rjmp	.+34     	; 0x1f3c <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1f1a:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <Endpoint_WaitUntilReady>
    1f1e:	88 23       	and	r24, r24
    1f20:	31 f3       	breq	.-52     	; 0x1eee <Endpoint_Write_Stream_LE+0x32>
    1f22:	0c c0       	rjmp	.+24     	; 0x1f3c <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1f24:	f7 01       	movw	r30, r14
    1f26:	81 91       	ld	r24, Z+
    1f28:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f2a:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1f2e:	01 50       	subi	r16, 0x01	; 1
    1f30:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1f32:	ff ef       	ldi	r31, 0xFF	; 255
    1f34:	cf 1a       	sub	r12, r31
    1f36:	df 0a       	sbc	r13, r31
    1f38:	da cf       	rjmp	.-76     	; 0x1eee <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
}
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	ff 90       	pop	r15
    1f46:	ef 90       	pop	r14
    1f48:	df 90       	pop	r13
    1f4a:	cf 90       	pop	r12
    1f4c:	08 95       	ret

00001f4e <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1f4e:	20 91 e4 01 	lds	r18, 0x01E4
    1f52:	30 91 e5 01 	lds	r19, 0x01E5
    1f56:	26 17       	cp	r18, r22
    1f58:	37 07       	cpc	r19, r23
    1f5a:	48 f0       	brcs	.+18     	; 0x1f6e <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1f5c:	61 15       	cp	r22, r1
    1f5e:	71 05       	cpc	r23, r1
    1f60:	39 f4       	brne	.+14     	; 0x1f70 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f62:	20 91 e8 00 	lds	r18, 0x00E8
    1f66:	2e 77       	andi	r18, 0x7E	; 126
    1f68:	20 93 e8 00 	sts	0x00E8, r18
    1f6c:	01 c0       	rjmp	.+2      	; 0x1f70 <Endpoint_Write_Control_Stream_LE+0x22>
    1f6e:	b9 01       	movw	r22, r18
    1f70:	fc 01       	movw	r30, r24
    1f72:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1f74:	61 15       	cp	r22, r1
    1f76:	71 05       	cpc	r23, r1
    1f78:	a9 f1       	breq	.+106    	; 0x1fe4 <Endpoint_Write_Control_Stream_LE+0x96>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1f7a:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1f7e:	88 23       	and	r24, r24
    1f80:	e9 f1       	breq	.+122    	; 0x1ffc <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1f82:	85 30       	cpi	r24, 0x05	; 5
    1f84:	e9 f1       	breq	.+122    	; 0x2000 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f86:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1f8a:	83 fd       	sbrc	r24, 3
    1f8c:	35 c0       	rjmp	.+106    	; 0x1ff8 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1f8e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1f92:	82 ff       	sbrs	r24, 2
    1f94:	06 c0       	rjmp	.+12     	; 0x1fa2 <Endpoint_Write_Control_Stream_LE+0x54>
    1f96:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1f9a:	82 ff       	sbrs	r24, 2
    1f9c:	26 c0       	rjmp	.+76     	; 0x1fea <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1fa2:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    1fa6:	80 ff       	sbrs	r24, 0
    1fa8:	e5 cf       	rjmp	.-54     	; 0x1f74 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1faa:	20 91 f3 00 	lds	r18, 0x00F3
    1fae:	80 91 f2 00 	lds	r24, 0x00F2
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1fb6:	61 15       	cp	r22, r1
    1fb8:	71 05       	cpc	r23, r1
    1fba:	51 f0       	breq	.+20     	; 0x1fd0 <Endpoint_Write_Control_Stream_LE+0x82>
    1fbc:	88 30       	cpi	r24, 0x08	; 8
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	38 f4       	brcc	.+14     	; 0x1fd0 <Endpoint_Write_Control_Stream_LE+0x82>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1fc2:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1fc4:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1fc8:	61 50       	subi	r22, 0x01	; 1
    1fca:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1fcc:	01 96       	adiw	r24, 0x01	; 1
    1fce:	f3 cf       	rjmp	.-26     	; 0x1fb6 <Endpoint_Write_Control_Stream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1fd0:	21 e0       	ldi	r18, 0x01	; 1
    1fd2:	08 97       	sbiw	r24, 0x08	; 8
    1fd4:	09 f0       	breq	.+2      	; 0x1fd8 <Endpoint_Write_Control_Stream_LE+0x8a>
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fd8:	80 91 e8 00 	lds	r24, 0x00E8
    1fdc:	8e 77       	andi	r24, 0x7E	; 126
    1fde:	80 93 e8 00 	sts	0x00E8, r24
    1fe2:	c8 cf       	rjmp	.-112    	; 0x1f74 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1fe4:	21 11       	cpse	r18, r1
    1fe6:	c9 cf       	rjmp	.-110    	; 0x1f7a <Endpoint_Write_Control_Stream_LE+0x2c>
    1fe8:	d6 cf       	rjmp	.-84     	; 0x1f96 <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1fea:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1fee:	88 23       	and	r24, r24
    1ff0:	29 f0       	breq	.+10     	; 0x1ffc <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ff2:	85 30       	cpi	r24, 0x05	; 5
    1ff4:	81 f6       	brne	.-96     	; 0x1f96 <Endpoint_Write_Control_Stream_LE+0x48>
    1ff6:	04 c0       	rjmp	.+8      	; 0x2000 <Endpoint_Write_Control_Stream_LE+0xb2>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1ffc:	82 e0       	ldi	r24, 0x02	; 2
    1ffe:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2000:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2002:	08 95       	ret

00002004 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2004:	20 91 e4 01 	lds	r18, 0x01E4
    2008:	30 91 e5 01 	lds	r19, 0x01E5
    200c:	26 17       	cp	r18, r22
    200e:	37 07       	cpc	r19, r23
    2010:	48 f0       	brcs	.+18     	; 0x2024 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    2012:	61 15       	cp	r22, r1
    2014:	71 05       	cpc	r23, r1
    2016:	39 f4       	brne	.+14     	; 0x2026 <Endpoint_Write_Control_PStream_LE+0x22>
    2018:	20 91 e8 00 	lds	r18, 0x00E8
    201c:	2e 77       	andi	r18, 0x7E	; 126
    201e:	20 93 e8 00 	sts	0x00E8, r18
    2022:	01 c0       	rjmp	.+2      	; 0x2026 <Endpoint_Write_Control_PStream_LE+0x22>
    2024:	b9 01       	movw	r22, r18
    2026:	fc 01       	movw	r30, r24
    2028:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    202a:	61 15       	cp	r22, r1
    202c:	71 05       	cpc	r23, r1
    202e:	c1 f1       	breq	.+112    	; 0x20a0 <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2030:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2034:	88 23       	and	r24, r24
    2036:	09 f4       	brne	.+2      	; 0x203a <Endpoint_Write_Control_PStream_LE+0x36>
    2038:	3f c0       	rjmp	.+126    	; 0x20b8 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    203a:	85 30       	cpi	r24, 0x05	; 5
    203c:	09 f4       	brne	.+2      	; 0x2040 <Endpoint_Write_Control_PStream_LE+0x3c>
    203e:	3e c0       	rjmp	.+124    	; 0x20bc <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2040:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2044:	83 fd       	sbrc	r24, 3
    2046:	36 c0       	rjmp	.+108    	; 0x20b4 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2048:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    204c:	82 ff       	sbrs	r24, 2
    204e:	06 c0       	rjmp	.+12     	; 0x205c <Endpoint_Write_Control_PStream_LE+0x58>
    2050:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2054:	82 ff       	sbrs	r24, 2
    2056:	27 c0       	rjmp	.+78     	; 0x20a6 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    205c:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    2060:	80 ff       	sbrs	r24, 0
    2062:	e3 cf       	rjmp	.-58     	; 0x202a <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2064:	20 91 f3 00 	lds	r18, 0x00F3
    2068:	80 91 f2 00 	lds	r24, 0x00F2
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2070:	61 15       	cp	r22, r1
    2072:	71 05       	cpc	r23, r1
    2074:	59 f0       	breq	.+22     	; 0x208c <Endpoint_Write_Control_PStream_LE+0x88>
    2076:	88 30       	cpi	r24, 0x08	; 8
    2078:	91 05       	cpc	r25, r1
    207a:	40 f4       	brcc	.+16     	; 0x208c <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    207c:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    207e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2082:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2084:	61 50       	subi	r22, 0x01	; 1
    2086:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	f2 cf       	rjmp	.-28     	; 0x2070 <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    208c:	21 e0       	ldi	r18, 0x01	; 1
    208e:	08 97       	sbiw	r24, 0x08	; 8
    2090:	09 f0       	breq	.+2      	; 0x2094 <Endpoint_Write_Control_PStream_LE+0x90>
    2092:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2094:	80 91 e8 00 	lds	r24, 0x00E8
    2098:	8e 77       	andi	r24, 0x7E	; 126
    209a:	80 93 e8 00 	sts	0x00E8, r24
    209e:	c5 cf       	rjmp	.-118    	; 0x202a <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    20a0:	21 11       	cpse	r18, r1
    20a2:	c6 cf       	rjmp	.-116    	; 0x2030 <Endpoint_Write_Control_PStream_LE+0x2c>
    20a4:	d5 cf       	rjmp	.-86     	; 0x2050 <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    20a6:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    20aa:	88 23       	and	r24, r24
    20ac:	29 f0       	breq	.+10     	; 0x20b8 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    20ae:	85 30       	cpi	r24, 0x05	; 5
    20b0:	79 f6       	brne	.-98     	; 0x2050 <Endpoint_Write_Control_PStream_LE+0x4c>
    20b2:	04 c0       	rjmp	.+8      	; 0x20bc <Endpoint_Write_Control_PStream_LE+0xb8>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    20b8:	82 e0       	ldi	r24, 0x02	; 2
    20ba:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    20bc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    20be:	08 95       	ret

000020c0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    20c0:	0f 93       	push	r16
    20c2:	1f 93       	push	r17
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	cd b7       	in	r28, 0x3d	; 61
    20ca:	de b7       	in	r29, 0x3e	; 62
    20cc:	aa 97       	sbiw	r28, 0x2a	; 42
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	ee ed       	ldi	r30, 0xDE	; 222
    20da:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    20dc:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    20e0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    20e2:	21 e0       	ldi	r18, 0x01	; 1
    20e4:	e6 3e       	cpi	r30, 0xE6	; 230
    20e6:	f2 07       	cpc	r31, r18
    20e8:	c9 f7       	brne	.-14     	; 0x20dc <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    20ea:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20ee:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    20f2:	83 ff       	sbrs	r24, 3
    20f4:	1d c1       	rjmp	.+570    	; 0x2330 <USB_Device_ProcessControlRequest+0x270>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    20f6:	20 91 de 01 	lds	r18, 0x01DE

		switch (USB_ControlRequest.bRequest)
    20fa:	30 91 df 01 	lds	r19, 0x01DF
    20fe:	83 2f       	mov	r24, r19
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	8a 30       	cpi	r24, 0x0A	; 10
    2104:	91 05       	cpc	r25, r1
    2106:	08 f0       	brcs	.+2      	; 0x210a <USB_Device_ProcessControlRequest+0x4a>
    2108:	13 c1       	rjmp	.+550    	; 0x2330 <USB_Device_ProcessControlRequest+0x270>
    210a:	fc 01       	movw	r30, r24
    210c:	ea 5a       	subi	r30, 0xAA	; 170
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	0c 94 b6 2c 	jmp	0x596c	; 0x596c <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2114:	20 38       	cpi	r18, 0x80	; 128
    2116:	81 f0       	breq	.+32     	; 0x2138 <USB_Device_ProcessControlRequest+0x78>
    2118:	22 38       	cpi	r18, 0x82	; 130
    211a:	09 f0       	breq	.+2      	; 0x211e <USB_Device_ProcessControlRequest+0x5e>
    211c:	09 c1       	rjmp	.+530    	; 0x2330 <USB_Device_ProcessControlRequest+0x270>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    211e:	80 91 e2 01 	lds	r24, 0x01E2
    2122:	8f 70       	andi	r24, 0x0F	; 15
    2124:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2128:	80 91 eb 00 	lds	r24, 0x00EB
    212c:	85 fb       	bst	r24, 5
    212e:	88 27       	eor	r24, r24
    2130:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2132:	10 92 e9 00 	sts	0x00E9, r1
    2136:	06 c0       	rjmp	.+12     	; 0x2144 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2138:	80 91 da 01 	lds	r24, 0x01DA
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    213c:	90 91 db 01 	lds	r25, 0x01DB
    2140:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2142:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2144:	90 91 e8 00 	lds	r25, 0x00E8
    2148:	97 7f       	andi	r25, 0xF7	; 247
    214a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    214e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    2152:	10 92 f1 00 	sts	0x00F1, r1
    2156:	c6 c0       	rjmp	.+396    	; 0x22e4 <USB_Device_ProcessControlRequest+0x224>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2158:	82 2f       	mov	r24, r18
    215a:	8d 7f       	andi	r24, 0xFD	; 253
    215c:	09 f0       	breq	.+2      	; 0x2160 <USB_Device_ProcessControlRequest+0xa0>
    215e:	e8 c0       	rjmp	.+464    	; 0x2330 <USB_Device_ProcessControlRequest+0x270>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2160:	22 23       	and	r18, r18
    2162:	19 f0       	breq	.+6      	; 0x216a <USB_Device_ProcessControlRequest+0xaa>
    2164:	22 30       	cpi	r18, 0x02	; 2
    2166:	61 f0       	breq	.+24     	; 0x2180 <USB_Device_ProcessControlRequest+0xc0>
    2168:	e3 c0       	rjmp	.+454    	; 0x2330 <USB_Device_ProcessControlRequest+0x270>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    216a:	80 91 e0 01 	lds	r24, 0x01E0
    216e:	81 30       	cpi	r24, 0x01	; 1
    2170:	09 f0       	breq	.+2      	; 0x2174 <USB_Device_ProcessControlRequest+0xb4>
    2172:	de c0       	rjmp	.+444    	; 0x2330 <USB_Device_ProcessControlRequest+0x270>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2174:	33 30       	cpi	r19, 0x03	; 3
    2176:	09 f0       	breq	.+2      	; 0x217a <USB_Device_ProcessControlRequest+0xba>
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	80 93 db 01 	sts	0x01DB, r24
    217e:	28 c0       	rjmp	.+80     	; 0x21d0 <USB_Device_ProcessControlRequest+0x110>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2180:	80 91 e0 01 	lds	r24, 0x01E0
    2184:	81 11       	cpse	r24, r1
    2186:	24 c0       	rjmp	.+72     	; 0x21d0 <USB_Device_ProcessControlRequest+0x110>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2188:	20 91 e2 01 	lds	r18, 0x01E2
    218c:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    218e:	09 f4       	brne	.+2      	; 0x2192 <USB_Device_ProcessControlRequest+0xd2>
    2190:	cf c0       	rjmp	.+414    	; 0x2330 <USB_Device_ProcessControlRequest+0x270>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2192:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2196:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    219a:	80 ff       	sbrs	r24, 0
    219c:	19 c0       	rjmp	.+50     	; 0x21d0 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    219e:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    21a2:	33 30       	cpi	r19, 0x03	; 3
    21a4:	11 f4       	brne	.+4      	; 0x21aa <USB_Device_ProcessControlRequest+0xea>
    21a6:	80 62       	ori	r24, 0x20	; 32
    21a8:	11 c0       	rjmp	.+34     	; 0x21cc <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    21aa:	80 61       	ori	r24, 0x10	; 16
    21ac:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	02 2e       	mov	r0, r18
    21b6:	01 c0       	rjmp	.+2      	; 0x21ba <USB_Device_ProcessControlRequest+0xfa>
    21b8:	88 0f       	add	r24, r24
    21ba:	0a 94       	dec	r0
    21bc:	ea f7       	brpl	.-6      	; 0x21b8 <USB_Device_ProcessControlRequest+0xf8>
    21be:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    21c2:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    21c6:	80 91 eb 00 	lds	r24, 0x00EB
    21ca:	88 60       	ori	r24, 0x08	; 8
    21cc:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21d0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21d4:	80 91 e8 00 	lds	r24, 0x00E8
    21d8:	87 7f       	andi	r24, 0xF7	; 247
    21da:	87 c0       	rjmp	.+270    	; 0x22ea <USB_Device_ProcessControlRequest+0x22a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    21dc:	21 11       	cpse	r18, r1
    21de:	a8 c0       	rjmp	.+336    	; 0x2330 <USB_Device_ProcessControlRequest+0x270>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    21e0:	10 91 e0 01 	lds	r17, 0x01E0
    21e4:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    21e6:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    21e8:	f8 94       	cli
    21ea:	80 91 e8 00 	lds	r24, 0x00E8
    21ee:	87 7f       	andi	r24, 0xF7	; 247
    21f0:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    21f4:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    21f8:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    21fc:	80 ff       	sbrs	r24, 0
    21fe:	fc cf       	rjmp	.-8      	; 0x21f8 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2200:	80 91 e3 00 	lds	r24, 0x00E3
    2204:	80 78       	andi	r24, 0x80	; 128
    2206:	81 2b       	or	r24, r17

				UDADDR = Temp;
    2208:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    220c:	80 68       	ori	r24, 0x80	; 128
    220e:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2212:	11 23       	and	r17, r17
    2214:	11 f0       	breq	.+4      	; 0x221a <USB_Device_ProcessControlRequest+0x15a>
    2216:	83 e0       	ldi	r24, 0x03	; 3
    2218:	01 c0       	rjmp	.+2      	; 0x221c <USB_Device_ProcessControlRequest+0x15c>
    221a:	82 e0       	ldi	r24, 0x02	; 2
    221c:	80 93 dd 01 	sts	0x01DD, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2220:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    2222:	86 c0       	rjmp	.+268    	; 0x2330 <USB_Device_ProcessControlRequest+0x270>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2224:	20 58       	subi	r18, 0x80	; 128
    2226:	22 30       	cpi	r18, 0x02	; 2
    2228:	08 f0       	brcs	.+2      	; 0x222c <USB_Device_ProcessControlRequest+0x16c>
    222a:	82 c0       	rjmp	.+260    	; 0x2330 <USB_Device_ProcessControlRequest+0x270>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    222c:	80 91 e0 01 	lds	r24, 0x01E0
    2230:	90 91 e1 01 	lds	r25, 0x01E1
    2234:	8c 3d       	cpi	r24, 0xDC	; 220
    2236:	23 e0       	ldi	r18, 0x03	; 3
    2238:	92 07       	cpc	r25, r18
    223a:	79 f5       	brne	.+94     	; 0x229a <USB_Device_ProcessControlRequest+0x1da>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    223c:	83 e0       	ldi	r24, 0x03	; 3
    223e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2240:	8a e2       	ldi	r24, 0x2A	; 42
    2242:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2244:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2246:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2248:	de 01       	movw	r26, r28
    224a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    224c:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    224e:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2250:	51 e2       	ldi	r21, 0x21	; 33
    2252:	e3 2f       	mov	r30, r19
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	50 93 57 00 	sts	0x0057, r21
    225a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    225c:	20 ff       	sbrs	r18, 0
    225e:	03 c0       	rjmp	.+6      	; 0x2266 <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
    2260:	e2 95       	swap	r30
    2262:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    2264:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2266:	ef 70       	andi	r30, 0x0F	; 15
    2268:	8e 2f       	mov	r24, r30
    226a:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    226c:	ea 30       	cpi	r30, 0x0A	; 10
    226e:	10 f0       	brcs	.+4      	; 0x2274 <USB_Device_ProcessControlRequest+0x1b4>
    2270:	c7 96       	adiw	r24, 0x37	; 55
    2272:	01 c0       	rjmp	.+2      	; 0x2276 <USB_Device_ProcessControlRequest+0x1b6>
    2274:	c0 96       	adiw	r24, 0x30	; 48
    2276:	8d 93       	st	X+, r24
    2278:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    227a:	2f 5f       	subi	r18, 0xFF	; 255
    227c:	24 31       	cpi	r18, 0x14	; 20
    227e:	49 f7       	brne	.-46     	; 0x2252 <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2280:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2282:	80 91 e8 00 	lds	r24, 0x00E8
    2286:	87 7f       	andi	r24, 0xF7	; 247
    2288:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    228c:	6a e2       	ldi	r22, 0x2A	; 42
    228e:	70 e0       	ldi	r23, 0x00	; 0
    2290:	ce 01       	movw	r24, r28
    2292:	01 96       	adiw	r24, 0x01	; 1
    2294:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <Endpoint_Write_Control_Stream_LE>
    2298:	14 c0       	rjmp	.+40     	; 0x22c2 <USB_Device_ProcessControlRequest+0x202>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    229a:	ae 01       	movw	r20, r28
    229c:	4f 5f       	subi	r20, 0xFF	; 255
    229e:	5f 4f       	sbci	r21, 0xFF	; 255
    22a0:	60 91 e2 01 	lds	r22, 0x01E2
    22a4:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <CALLBACK_USB_GetDescriptor>
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	09 f4       	brne	.+2      	; 0x22ae <USB_Device_ProcessControlRequest+0x1ee>
    22ac:	41 c0       	rjmp	.+130    	; 0x2330 <USB_Device_ProcessControlRequest+0x270>
    22ae:	20 91 e8 00 	lds	r18, 0x00E8
    22b2:	27 7f       	andi	r18, 0xF7	; 247
    22b4:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    22b8:	bc 01       	movw	r22, r24
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
    22bc:	9a 81       	ldd	r25, Y+2	; 0x02
    22be:	0e 94 02 10 	call	0x2004	; 0x2004 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    22c2:	80 91 e8 00 	lds	r24, 0x00E8
    22c6:	8b 77       	andi	r24, 0x7B	; 123
    22c8:	80 93 e8 00 	sts	0x00E8, r24
    22cc:	31 c0       	rjmp	.+98     	; 0x2330 <USB_Device_ProcessControlRequest+0x270>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    22ce:	20 38       	cpi	r18, 0x80	; 128
    22d0:	79 f5       	brne	.+94     	; 0x2330 <USB_Device_ProcessControlRequest+0x270>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22d2:	80 91 e8 00 	lds	r24, 0x00E8
    22d6:	87 7f       	andi	r24, 0xF7	; 247
    22d8:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    22dc:	80 91 d9 01 	lds	r24, 0x01D9
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    22e0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    22e4:	80 91 e8 00 	lds	r24, 0x00E8
    22e8:	8e 77       	andi	r24, 0x7E	; 126
    22ea:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    22ee:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <Endpoint_ClearStatusStage>
    22f2:	1e c0       	rjmp	.+60     	; 0x2330 <USB_Device_ProcessControlRequest+0x270>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    22f4:	21 11       	cpse	r18, r1
    22f6:	1c c0       	rjmp	.+56     	; 0x2330 <USB_Device_ProcessControlRequest+0x270>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    22f8:	90 91 e0 01 	lds	r25, 0x01E0
    22fc:	92 30       	cpi	r25, 0x02	; 2
    22fe:	c0 f4       	brcc	.+48     	; 0x2330 <USB_Device_ProcessControlRequest+0x270>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2300:	80 91 e8 00 	lds	r24, 0x00E8
    2304:	87 7f       	andi	r24, 0xF7	; 247
    2306:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    230a:	90 93 d9 01 	sts	0x01D9, r25

	Endpoint_ClearStatusStage();
    230e:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2312:	80 91 d9 01 	lds	r24, 0x01D9
    2316:	81 11       	cpse	r24, r1
    2318:	04 c0       	rjmp	.+8      	; 0x2322 <USB_Device_ProcessControlRequest+0x262>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    231a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    231e:	87 ff       	sbrs	r24, 7
    2320:	02 c0       	rjmp	.+4      	; 0x2326 <USB_Device_ProcessControlRequest+0x266>
    2322:	84 e0       	ldi	r24, 0x04	; 4
    2324:	01 c0       	rjmp	.+2      	; 0x2328 <USB_Device_ProcessControlRequest+0x268>
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	80 93 dd 01 	sts	0x01DD, r24

	EVENT_USB_Device_ConfigurationChanged();
    232c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2330:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2334:	83 ff       	sbrs	r24, 3
    2336:	0a c0       	rjmp	.+20     	; 0x234c <USB_Device_ProcessControlRequest+0x28c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2338:	80 91 eb 00 	lds	r24, 0x00EB
    233c:	80 62       	ori	r24, 0x20	; 32
    233e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2342:	80 91 e8 00 	lds	r24, 0x00E8
    2346:	87 7f       	andi	r24, 0xF7	; 247
    2348:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    234c:	aa 96       	adiw	r28, 0x2a	; 42
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	f8 94       	cli
    2352:	de bf       	out	0x3e, r29	; 62
    2354:	0f be       	out	0x3f, r0	; 63
    2356:	cd bf       	out	0x3d, r28	; 61
    2358:	df 91       	pop	r29
    235a:	cf 91       	pop	r28
    235c:	1f 91       	pop	r17
    235e:	0f 91       	pop	r16
    2360:	08 95       	ret

00002362 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    2362:	90 93 64 01 	sts	0x0164, r25
    2366:	80 93 63 01 	sts	0x0163, r24
    236a:	08 95       	ret

0000236c <host_get_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    236c:	80 91 63 01 	lds	r24, 0x0163
    2370:	90 91 64 01 	lds	r25, 0x0164
    2374:	08 95       	ret

00002376 <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    2376:	e0 91 63 01 	lds	r30, 0x0163
    237a:	f0 91 64 01 	lds	r31, 0x0164
    237e:	30 97       	sbiw	r30, 0x00	; 0
    2380:	21 f0       	breq	.+8      	; 0x238a <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    2382:	01 90       	ld	r0, Z+
    2384:	f0 81       	ld	r31, Z
    2386:	e0 2d       	mov	r30, r0
    2388:	09 94       	ijmp
}
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	08 95       	ret

0000238e <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    238e:	ff 92       	push	r15
    2390:	0f 93       	push	r16
    2392:	1f 93       	push	r17
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	8c 01       	movw	r16, r24
    if (!driver) return;
    239a:	e0 91 63 01 	lds	r30, 0x0163
    239e:	f0 91 64 01 	lds	r31, 0x0164
    23a2:	30 97       	sbiw	r30, 0x00	; 0
    23a4:	99 f1       	breq	.+102    	; 0x240c <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    23a6:	02 80       	ldd	r0, Z+2	; 0x02
    23a8:	f3 81       	ldd	r31, Z+3	; 0x03
    23aa:	e0 2d       	mov	r30, r0
    23ac:	09 95       	icall

    if (debug_keyboard) {
    23ae:	80 91 c3 01 	lds	r24, 0x01C3
    23b2:	82 ff       	sbrs	r24, 2
    23b4:	2b c0       	rjmp	.+86     	; 0x240c <host_keyboard_send+0x7e>
        dprint("keyboard_report: ");
    23b6:	80 ff       	sbrs	r24, 0
    23b8:	04 c0       	rjmp	.+8      	; 0x23c2 <host_keyboard_send+0x34>
    23ba:	8a eb       	ldi	r24, 0xBA	; 186
    23bc:	93 e0       	ldi	r25, 0x03	; 3
    23be:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    23c2:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    23c4:	80 e1       	ldi	r24, 0x10	; 16
    23c6:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    23c8:	04 eb       	ldi	r16, 0xB4	; 180
    23ca:	13 e0       	ldi	r17, 0x03	; 3
    23cc:	80 91 c3 01 	lds	r24, 0x01C3
    23d0:	80 ff       	sbrs	r24, 0
    23d2:	0b c0       	rjmp	.+22     	; 0x23ea <host_keyboard_send+0x5c>
    23d4:	88 81       	ld	r24, Y
    23d6:	1f 92       	push	r1
    23d8:	8f 93       	push	r24
    23da:	1f 93       	push	r17
    23dc:	0f 93       	push	r16
    23de:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	fa 94       	dec	r15
    23ec:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    23ee:	f1 10       	cpse	r15, r1
    23f0:	ed cf       	rjmp	.-38     	; 0x23cc <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    23f2:	80 91 c3 01 	lds	r24, 0x01C3
    23f6:	80 ff       	sbrs	r24, 0
    23f8:	09 c0       	rjmp	.+18     	; 0x240c <host_keyboard_send+0x7e>
    23fa:	82 eb       	ldi	r24, 0xB2	; 178
    23fc:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	1f 91       	pop	r17
    2404:	0f 91       	pop	r16
    2406:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2408:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <xputs>
    }
}
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	1f 91       	pop	r17
    2412:	0f 91       	pop	r16
    2414:	ff 90       	pop	r15
    2416:	08 95       	ret

00002418 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2418:	e0 91 63 01 	lds	r30, 0x0163
    241c:	f0 91 64 01 	lds	r31, 0x0164
    2420:	30 97       	sbiw	r30, 0x00	; 0
    2422:	21 f0       	breq	.+8      	; 0x242c <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2424:	04 80       	ldd	r0, Z+4	; 0x04
    2426:	f5 81       	ldd	r31, Z+5	; 0x05
    2428:	e0 2d       	mov	r30, r0
    242a:	09 94       	ijmp
    242c:	08 95       	ret

0000242e <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    242e:	20 91 61 01 	lds	r18, 0x0161
    2432:	30 91 62 01 	lds	r19, 0x0162
    2436:	82 17       	cp	r24, r18
    2438:	93 07       	cpc	r25, r19
    243a:	71 f0       	breq	.+28     	; 0x2458 <host_system_send+0x2a>
    last_system_report = report;
    243c:	90 93 62 01 	sts	0x0162, r25
    2440:	80 93 61 01 	sts	0x0161, r24

    if (!driver) return;
    2444:	e0 91 63 01 	lds	r30, 0x0163
    2448:	f0 91 64 01 	lds	r31, 0x0164
    244c:	30 97       	sbiw	r30, 0x00	; 0
    244e:	21 f0       	breq	.+8      	; 0x2458 <host_system_send+0x2a>
    (*driver->send_system)(report);
    2450:	06 80       	ldd	r0, Z+6	; 0x06
    2452:	f7 81       	ldd	r31, Z+7	; 0x07
    2454:	e0 2d       	mov	r30, r0
    2456:	09 94       	ijmp
    2458:	08 95       	ret

0000245a <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    245a:	20 91 5f 01 	lds	r18, 0x015F
    245e:	30 91 60 01 	lds	r19, 0x0160
    2462:	82 17       	cp	r24, r18
    2464:	93 07       	cpc	r25, r19
    2466:	71 f0       	breq	.+28     	; 0x2484 <host_consumer_send+0x2a>
    last_consumer_report = report;
    2468:	90 93 60 01 	sts	0x0160, r25
    246c:	80 93 5f 01 	sts	0x015F, r24

    if (!driver) return;
    2470:	e0 91 63 01 	lds	r30, 0x0163
    2474:	f0 91 64 01 	lds	r31, 0x0164
    2478:	30 97       	sbiw	r30, 0x00	; 0
    247a:	21 f0       	breq	.+8      	; 0x2484 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    247c:	00 84       	ldd	r0, Z+8	; 0x08
    247e:	f1 85       	ldd	r31, Z+9	; 0x09
    2480:	e0 2d       	mov	r30, r0
    2482:	09 94       	ijmp
    2484:	08 95       	ret

00002486 <keyboard_init>:
#endif


void keyboard_init(void)
{
    timer_init();
    2486:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <timer_init>
    matrix_init();
    248a:	0e 94 9b 08 	call	0x1136	; 0x1136 <matrix_init>
    serial_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    248e:	0c 94 c2 20 	jmp	0x4184	; 0x4184 <bootmagic>

00002492 <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    2492:	cf 93       	push	r28
    2494:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    2496:	80 91 c3 01 	lds	r24, 0x01C3
    249a:	82 ff       	sbrs	r24, 2
    249c:	1e c0       	rjmp	.+60     	; 0x24da <keyboard_set_leds+0x48>
    249e:	80 ff       	sbrs	r24, 0
    24a0:	04 c0       	rjmp	.+8      	; 0x24aa <keyboard_set_leds+0x18>
    24a2:	83 ed       	ldi	r24, 0xD3	; 211
    24a4:	93 e0       	ldi	r25, 0x03	; 3
    24a6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    24aa:	80 91 c3 01 	lds	r24, 0x01C3
    24ae:	80 ff       	sbrs	r24, 0
    24b0:	0c c0       	rjmp	.+24     	; 0x24ca <keyboard_set_leds+0x38>
    24b2:	1f 92       	push	r1
    24b4:	cf 93       	push	r28
    24b6:	2e ec       	ldi	r18, 0xCE	; 206
    24b8:	33 e0       	ldi	r19, 0x03	; 3
    24ba:	3f 93       	push	r19
    24bc:	2f 93       	push	r18
    24be:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	80 91 c3 01 	lds	r24, 0x01C3
    24ce:	80 ff       	sbrs	r24, 0
    24d0:	04 c0       	rjmp	.+8      	; 0x24da <keyboard_set_leds+0x48>
    24d2:	8c ec       	ldi	r24, 0xCC	; 204
    24d4:	93 e0       	ldi	r25, 0x03	; 3
    24d6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    led_set(leds);
    24da:	8c 2f       	mov	r24, r28
}
    24dc:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    24de:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <led_set>

000024e2 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    24e2:	5f 92       	push	r5
    24e4:	6f 92       	push	r6
    24e6:	7f 92       	push	r7
    24e8:	8f 92       	push	r8
    24ea:	9f 92       	push	r9
    24ec:	af 92       	push	r10
    24ee:	bf 92       	push	r11
    24f0:	cf 92       	push	r12
    24f2:	df 92       	push	r13
    24f4:	ef 92       	push	r14
    24f6:	ff 92       	push	r15
    24f8:	0f 93       	push	r16
    24fa:	1f 93       	push	r17
    24fc:	cf 93       	push	r28
    24fe:	df 93       	push	r29
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	2a 97       	sbiw	r28, 0x0a	; 10
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    static matrix_row_t matrix_prev[MATRIX_ROWS];
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2510:	0e 94 be 08 	call	0x117c	; 0x117c <matrix_scan>
    2514:	96 e6       	ldi	r25, 0x66	; 102
    2516:	c9 2e       	mov	r12, r25
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	d9 2e       	mov	r13, r25
    251c:	00 e0       	ldi	r16, 0x00	; 0
    251e:	10 e0       	ldi	r17, 0x00	; 0
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2520:	aa 24       	eor	r10, r10
    2522:	a3 94       	inc	r10
    2524:	b1 2c       	mov	r11, r1
    2526:	50 2e       	mov	r5, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2528:	80 2f       	mov	r24, r16
    252a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <matrix_get_row>
    252e:	3c 01       	movw	r6, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2530:	f6 01       	movw	r30, r12
    2532:	e1 90       	ld	r14, Z+
    2534:	f1 90       	ld	r15, Z+
    2536:	6f 01       	movw	r12, r30
    2538:	e8 26       	eor	r14, r24
    253a:	f9 26       	eor	r15, r25
        if (matrix_change) {
    253c:	e1 14       	cp	r14, r1
    253e:	f1 04       	cpc	r15, r1
    2540:	b1 f4       	brne	.+44     	; 0x256e <keyboard_task+0x8c>
    2542:	0f 5f       	subi	r16, 0xFF	; 255
    2544:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2546:	05 30       	cpi	r16, 0x05	; 5
    2548:	11 05       	cpc	r17, r1
    254a:	69 f7       	brne	.-38     	; 0x2526 <keyboard_task+0x44>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    254c:	8f ef       	ldi	r24, 0xFF	; 255
    254e:	89 83       	std	Y+1, r24	; 0x01
    2550:	8a 83       	std	Y+2, r24	; 0x02
    2552:	1b 82       	std	Y+3, r1	; 0x03
    2554:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <timer_read>
    2558:	81 60       	ori	r24, 0x01	; 1
    255a:	78 2f       	mov	r23, r24
    255c:	9d 83       	std	Y+5, r25	; 0x05
    255e:	8c 83       	std	Y+4, r24	; 0x04
    2560:	49 81       	ldd	r20, Y+1	; 0x01
    2562:	5a 81       	ldd	r21, Y+2	; 0x02
    2564:	6b 81       	ldd	r22, Y+3	; 0x03
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	0e 94 2a 13 	call	0x2654	; 0x2654 <action_exec>
    256c:	3a c0       	rjmp	.+116    	; 0x25e2 <keyboard_task+0x100>
    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
        matrix_change = matrix_row ^ matrix_prev[r];
        if (matrix_change) {
            if (debug_matrix) matrix_print();
    256e:	80 91 c3 01 	lds	r24, 0x01C3
    2572:	81 fd       	sbrc	r24, 1
    2574:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <matrix_print>
    static matrix_row_t matrix_prev[MATRIX_ROWS];
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    257c:	45 01       	movw	r8, r10
    257e:	02 2e       	mov	r0, r18
    2580:	02 c0       	rjmp	.+4      	; 0x2586 <keyboard_task+0xa4>
    2582:	88 0c       	add	r8, r8
    2584:	99 1c       	adc	r9, r9
    2586:	0a 94       	dec	r0
    2588:	e2 f7       	brpl	.-8      	; 0x2582 <keyboard_task+0xa0>
    258a:	c4 01       	movw	r24, r8
    258c:	8e 21       	and	r24, r14
    258e:	9f 21       	and	r25, r15
    2590:	89 2b       	or	r24, r25
    2592:	09 f1       	breq	.+66     	; 0x25d6 <keyboard_task+0xf4>
                    action_exec((keyevent_t){
    2594:	2e 83       	std	Y+6, r18	; 0x06
    2596:	5f 82       	std	Y+7, r5	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    2598:	68 20       	and	r6, r8
    259a:	79 20       	and	r7, r9
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	67 28       	or	r6, r7
    25a0:	09 f4       	brne	.+2      	; 0x25a4 <keyboard_task+0xc2>
    25a2:	80 e0       	ldi	r24, 0x00	; 0
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    25a4:	88 87       	std	Y+8, r24	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    25a6:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <timer_read>
    25aa:	81 60       	ori	r24, 0x01	; 1
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    25ac:	78 2f       	mov	r23, r24
    25ae:	9a 87       	std	Y+10, r25	; 0x0a
    25b0:	89 87       	std	Y+9, r24	; 0x09
    25b2:	4e 81       	ldd	r20, Y+6	; 0x06
    25b4:	5f 81       	ldd	r21, Y+7	; 0x07
    25b6:	68 85       	ldd	r22, Y+8	; 0x08
    25b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ba:	0e 94 2a 13 	call	0x2654	; 0x2654 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    25be:	f8 01       	movw	r30, r16
    25c0:	ee 0f       	add	r30, r30
    25c2:	ff 1f       	adc	r31, r31
    25c4:	ea 59       	subi	r30, 0x9A	; 154
    25c6:	fe 4f       	sbci	r31, 0xFE	; 254
    25c8:	80 81       	ld	r24, Z
    25ca:	91 81       	ldd	r25, Z+1	; 0x01
    25cc:	88 25       	eor	r24, r8
    25ce:	99 25       	eor	r25, r9
    25d0:	91 83       	std	Z+1, r25	; 0x01
    25d2:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    25d4:	06 c0       	rjmp	.+12     	; 0x25e2 <keyboard_task+0x100>
    25d6:	2f 5f       	subi	r18, 0xFF	; 255
    25d8:	3f 4f       	sbci	r19, 0xFF	; 255
            if (has_ghost_in_row(r)) {
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    25da:	2e 30       	cpi	r18, 0x0E	; 14
    25dc:	31 05       	cpc	r19, r1
    25de:	71 f6       	brne	.-100    	; 0x257c <keyboard_task+0x9a>
    25e0:	b0 cf       	rjmp	.-160    	; 0x2542 <keyboard_task+0x60>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    25e2:	0e 94 30 24 	call	0x4860	; 0x4860 <mousekey_task>
#ifdef SERIAL_MOUSE_ENABLE
        serial_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    25e6:	10 91 65 01 	lds	r17, 0x0165
    25ea:	0e 94 bb 11 	call	0x2376	; 0x2376 <host_keyboard_leds>
    25ee:	18 17       	cp	r17, r24
    25f0:	d9 f0       	breq	.+54     	; 0x2628 <keyboard_task+0x146>
        led_status = host_keyboard_leds();
    25f2:	0e 94 bb 11 	call	0x2376	; 0x2376 <host_keyboard_leds>
    25f6:	80 93 65 01 	sts	0x0165, r24
        keyboard_set_leds(led_status);
    }
}
    25fa:	2a 96       	adiw	r28, 0x0a	; 10
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	1f 91       	pop	r17
    260c:	0f 91       	pop	r16
    260e:	ff 90       	pop	r15
    2610:	ef 90       	pop	r14
    2612:	df 90       	pop	r13
    2614:	cf 90       	pop	r12
    2616:	bf 90       	pop	r11
    2618:	af 90       	pop	r10
    261a:	9f 90       	pop	r9
    261c:	8f 90       	pop	r8
    261e:	7f 90       	pop	r7
    2620:	6f 90       	pop	r6
    2622:	5f 90       	pop	r5
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    2624:	0c 94 49 12 	jmp	0x2492	; 0x2492 <keyboard_set_leds>
    }
}
    2628:	2a 96       	adiw	r28, 0x0a	; 10
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	f8 94       	cli
    262e:	de bf       	out	0x3e, r29	; 62
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	cd bf       	out	0x3d, r28	; 61
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	1f 91       	pop	r17
    263a:	0f 91       	pop	r16
    263c:	ff 90       	pop	r15
    263e:	ef 90       	pop	r14
    2640:	df 90       	pop	r13
    2642:	cf 90       	pop	r12
    2644:	bf 90       	pop	r11
    2646:	af 90       	pop	r10
    2648:	9f 90       	pop	r9
    264a:	8f 90       	pop	r8
    264c:	7f 90       	pop	r7
    264e:	6f 90       	pop	r6
    2650:	5f 90       	pop	r5
    2652:	08 95       	ret

00002654 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	2b 97       	sbiw	r28, 0x0b	; 11
    265e:	0f b6       	in	r0, 0x3f	; 63
    2660:	f8 94       	cli
    2662:	de bf       	out	0x3e, r29	; 62
    2664:	0f be       	out	0x3f, r0	; 63
    2666:	cd bf       	out	0x3d, r28	; 61
    2668:	4f 83       	std	Y+7, r20	; 0x07
    266a:	58 87       	std	Y+8, r21	; 0x08
    266c:	69 87       	std	Y+9, r22	; 0x09
    266e:	7a 87       	std	Y+10, r23	; 0x0a
    2670:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    2672:	de 01       	movw	r26, r28
    2674:	11 96       	adiw	r26, 0x01	; 1
    2676:	86 e0       	ldi	r24, 0x06	; 6
    2678:	fd 01       	movw	r30, r26
    267a:	11 92       	st	Z+, r1
    267c:	8a 95       	dec	r24
    267e:	e9 f7       	brne	.-6      	; 0x267a <action_exec+0x26>
    2680:	85 e0       	ldi	r24, 0x05	; 5
    2682:	fe 01       	movw	r30, r28
    2684:	37 96       	adiw	r30, 0x07	; 7
    2686:	01 90       	ld	r0, Z+
    2688:	0d 92       	st	X+, r0
    268a:	8a 95       	dec	r24
    268c:	e1 f7       	brne	.-8      	; 0x2686 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    268e:	49 81       	ldd	r20, Y+1	; 0x01
    2690:	5a 81       	ldd	r21, Y+2	; 0x02
    2692:	6b 81       	ldd	r22, Y+3	; 0x03
    2694:	7c 81       	ldd	r23, Y+4	; 0x04
    2696:	8d 81       	ldd	r24, Y+5	; 0x05
    2698:	9e 81       	ldd	r25, Y+6	; 0x06
    269a:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    269e:	2b 96       	adiw	r28, 0x0b	; 11
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	08 95       	ret

000026b0 <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    26b0:	cf 93       	push	r28
    26b2:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    26b4:	88 23       	and	r24, r24
    26b6:	09 f4       	brne	.+2      	; 0x26ba <register_code+0xa>
    26b8:	c1 c0       	rjmp	.+386    	; 0x283c <register_code+0x18c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE    
    else if (KC_LOCKING_CAPS == code) {
    26ba:	82 38       	cpi	r24, 0x82	; 130
    26bc:	59 f4       	brne	.+22     	; 0x26d4 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    26be:	0e 94 bb 11 	call	0x2376	; 0x2376 <host_keyboard_leds>
    26c2:	81 fd       	sbrc	r24, 1
    26c4:	bb c0       	rjmp	.+374    	; 0x283c <register_code+0x18c>
#endif
        add_key(KC_CAPSLOCK);
    26c6:	89 e3       	ldi	r24, 0x39	; 57
    26c8:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <add_key>
        send_keyboard_report();
    26cc:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    26d0:	89 e3       	ldi	r24, 0x39	; 57
    26d2:	0c c0       	rjmp	.+24     	; 0x26ec <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    26d4:	83 38       	cpi	r24, 0x83	; 131
    26d6:	79 f4       	brne	.+30     	; 0x26f6 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    26d8:	0e 94 bb 11 	call	0x2376	; 0x2376 <host_keyboard_leds>
    26dc:	80 fd       	sbrc	r24, 0
    26de:	ae c0       	rjmp	.+348    	; 0x283c <register_code+0x18c>
#endif
        add_key(KC_NUMLOCK);
    26e0:	83 e5       	ldi	r24, 0x53	; 83
    26e2:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <add_key>
        send_keyboard_report();
    26e6:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    26ea:	83 e5       	ldi	r24, 0x53	; 83
    26ec:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    26f0:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    26f2:	0c 94 cc 1d 	jmp	0x3b98	; 0x3b98 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    26f6:	84 38       	cpi	r24, 0x84	; 132
    26f8:	59 f4       	brne	.+22     	; 0x2710 <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    26fa:	0e 94 bb 11 	call	0x2376	; 0x2376 <host_keyboard_leds>
    26fe:	82 fd       	sbrc	r24, 2
    2700:	9d c0       	rjmp	.+314    	; 0x283c <register_code+0x18c>
#endif
        add_key(KC_SCROLLLOCK);
    2702:	87 e4       	ldi	r24, 0x47	; 71
    2704:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <add_key>
        send_keyboard_report();
    2708:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    270c:	87 e4       	ldi	r24, 0x47	; 71
    270e:	ee cf       	rjmp	.-36     	; 0x26ec <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    2710:	8c ef       	ldi	r24, 0xFC	; 252
    2712:	8c 0f       	add	r24, r28
    2714:	81 3a       	cpi	r24, 0xA1	; 161
    2716:	48 f4       	brcc	.+18     	; 0x272a <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2718:	8c 2f       	mov	r24, r28
    271a:	0e 94 10 2a 	call	0x5420	; 0x5420 <command_proc>
    271e:	81 11       	cpse	r24, r1
    2720:	8d c0       	rjmp	.+282    	; 0x283c <register_code+0x18c>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2722:	8c 2f       	mov	r24, r28
    2724:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <add_key>
    2728:	e3 cf       	rjmp	.-58     	; 0x26f0 <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    272a:	80 e2       	ldi	r24, 0x20	; 32
    272c:	8c 0f       	add	r24, r28
    272e:	88 30       	cpi	r24, 0x08	; 8
    2730:	48 f4       	brcc	.+18     	; 0x2744 <register_code+0x94>
        add_mods(MOD_BIT(code));
    2732:	c7 70       	andi	r28, 0x07	; 7
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	01 c0       	rjmp	.+2      	; 0x273a <register_code+0x8a>
    2738:	88 0f       	add	r24, r24
    273a:	ca 95       	dec	r28
    273c:	ea f7       	brpl	.-6      	; 0x2738 <register_code+0x88>
    273e:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <add_mods>
    2742:	d6 cf       	rjmp	.-84     	; 0x26f0 <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2744:	8b e5       	ldi	r24, 0x5B	; 91
    2746:	8c 0f       	add	r24, r28
    2748:	83 30       	cpi	r24, 0x03	; 3
    274a:	78 f4       	brcc	.+30     	; 0x276a <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    274c:	c5 3a       	cpi	r28, 0xA5	; 165
    274e:	29 f0       	breq	.+10     	; 0x275a <register_code+0xaa>
    2750:	c6 3a       	cpi	r28, 0xA6	; 166
    2752:	31 f4       	brne	.+12     	; 0x2760 <register_code+0xb0>
    2754:	82 e8       	ldi	r24, 0x82	; 130
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	05 c0       	rjmp	.+10     	; 0x2764 <register_code+0xb4>
    275a:	81 e8       	ldi	r24, 0x81	; 129
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	02 c0       	rjmp	.+4      	; 0x2764 <register_code+0xb4>
    2760:	83 e8       	ldi	r24, 0x83	; 131
    2762:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    2764:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    2766:	0c 94 17 12 	jmp	0x242e	; 0x242e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    276a:	88 e5       	ldi	r24, 0x58	; 88
    276c:	8c 0f       	add	r24, r28
    276e:	83 31       	cpi	r24, 0x13	; 19
    2770:	08 f0       	brcs	.+2      	; 0x2774 <register_code+0xc4>
    2772:	64 c0       	rjmp	.+200    	; 0x283c <register_code+0x18c>
        host_consumer_send(KEYCODE2CONSUMER(code));
    2774:	c8 3a       	cpi	r28, 0xA8	; 168
    2776:	39 f1       	breq	.+78     	; 0x27c6 <register_code+0x116>
    2778:	c9 3a       	cpi	r28, 0xA9	; 169
    277a:	41 f1       	breq	.+80     	; 0x27cc <register_code+0x11c>
    277c:	ca 3a       	cpi	r28, 0xAA	; 170
    277e:	49 f1       	breq	.+82     	; 0x27d2 <register_code+0x122>
    2780:	cb 3a       	cpi	r28, 0xAB	; 171
    2782:	51 f1       	breq	.+84     	; 0x27d8 <register_code+0x128>
    2784:	cc 3a       	cpi	r28, 0xAC	; 172
    2786:	59 f1       	breq	.+86     	; 0x27de <register_code+0x12e>
    2788:	cd 3a       	cpi	r28, 0xAD	; 173
    278a:	61 f1       	breq	.+88     	; 0x27e4 <register_code+0x134>
    278c:	c0 3b       	cpi	r28, 0xB0	; 176
    278e:	69 f1       	breq	.+90     	; 0x27ea <register_code+0x13a>
    2790:	ce 3a       	cpi	r28, 0xAE	; 174
    2792:	71 f1       	breq	.+92     	; 0x27f0 <register_code+0x140>
    2794:	cf 3a       	cpi	r28, 0xAF	; 175
    2796:	79 f1       	breq	.+94     	; 0x27f6 <register_code+0x146>
    2798:	c1 3b       	cpi	r28, 0xB1	; 177
    279a:	81 f1       	breq	.+96     	; 0x27fc <register_code+0x14c>
    279c:	c2 3b       	cpi	r28, 0xB2	; 178
    279e:	89 f1       	breq	.+98     	; 0x2802 <register_code+0x152>
    27a0:	c3 3b       	cpi	r28, 0xB3	; 179
    27a2:	91 f1       	breq	.+100    	; 0x2808 <register_code+0x158>
    27a4:	c4 3b       	cpi	r28, 0xB4	; 180
    27a6:	99 f1       	breq	.+102    	; 0x280e <register_code+0x15e>
    27a8:	c5 3b       	cpi	r28, 0xB5	; 181
    27aa:	a1 f1       	breq	.+104    	; 0x2814 <register_code+0x164>
    27ac:	c6 3b       	cpi	r28, 0xB6	; 182
    27ae:	a9 f1       	breq	.+106    	; 0x281a <register_code+0x16a>
    27b0:	c7 3b       	cpi	r28, 0xB7	; 183
    27b2:	b1 f1       	breq	.+108    	; 0x2820 <register_code+0x170>
    27b4:	c8 3b       	cpi	r28, 0xB8	; 184
    27b6:	b9 f1       	breq	.+110    	; 0x2826 <register_code+0x176>
    27b8:	c9 3b       	cpi	r28, 0xB9	; 185
    27ba:	c1 f1       	breq	.+112    	; 0x282c <register_code+0x17c>
    27bc:	ca 3b       	cpi	r28, 0xBA	; 186
    27be:	c9 f5       	brne	.+114    	; 0x2832 <register_code+0x182>
    27c0:	8a e2       	ldi	r24, 0x2A	; 42
    27c2:	92 e0       	ldi	r25, 0x02	; 2
    27c4:	38 c0       	rjmp	.+112    	; 0x2836 <register_code+0x186>
    27c6:	82 ee       	ldi	r24, 0xE2	; 226
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	35 c0       	rjmp	.+106    	; 0x2836 <register_code+0x186>
    27cc:	89 ee       	ldi	r24, 0xE9	; 233
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	32 c0       	rjmp	.+100    	; 0x2836 <register_code+0x186>
    27d2:	8a ee       	ldi	r24, 0xEA	; 234
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	2f c0       	rjmp	.+94     	; 0x2836 <register_code+0x186>
    27d8:	85 eb       	ldi	r24, 0xB5	; 181
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	2c c0       	rjmp	.+88     	; 0x2836 <register_code+0x186>
    27de:	86 eb       	ldi	r24, 0xB6	; 182
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	29 c0       	rjmp	.+82     	; 0x2836 <register_code+0x186>
    27e4:	87 eb       	ldi	r24, 0xB7	; 183
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	26 c0       	rjmp	.+76     	; 0x2836 <register_code+0x186>
    27ea:	8c ec       	ldi	r24, 0xCC	; 204
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	23 c0       	rjmp	.+70     	; 0x2836 <register_code+0x186>
    27f0:	8d ec       	ldi	r24, 0xCD	; 205
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	20 c0       	rjmp	.+64     	; 0x2836 <register_code+0x186>
    27f6:	83 e8       	ldi	r24, 0x83	; 131
    27f8:	91 e0       	ldi	r25, 0x01	; 1
    27fa:	1d c0       	rjmp	.+58     	; 0x2836 <register_code+0x186>
    27fc:	8a e8       	ldi	r24, 0x8A	; 138
    27fe:	91 e0       	ldi	r25, 0x01	; 1
    2800:	1a c0       	rjmp	.+52     	; 0x2836 <register_code+0x186>
    2802:	82 e9       	ldi	r24, 0x92	; 146
    2804:	91 e0       	ldi	r25, 0x01	; 1
    2806:	17 c0       	rjmp	.+46     	; 0x2836 <register_code+0x186>
    2808:	84 e9       	ldi	r24, 0x94	; 148
    280a:	91 e0       	ldi	r25, 0x01	; 1
    280c:	14 c0       	rjmp	.+40     	; 0x2836 <register_code+0x186>
    280e:	81 e2       	ldi	r24, 0x21	; 33
    2810:	92 e0       	ldi	r25, 0x02	; 2
    2812:	11 c0       	rjmp	.+34     	; 0x2836 <register_code+0x186>
    2814:	83 e2       	ldi	r24, 0x23	; 35
    2816:	92 e0       	ldi	r25, 0x02	; 2
    2818:	0e c0       	rjmp	.+28     	; 0x2836 <register_code+0x186>
    281a:	84 e2       	ldi	r24, 0x24	; 36
    281c:	92 e0       	ldi	r25, 0x02	; 2
    281e:	0b c0       	rjmp	.+22     	; 0x2836 <register_code+0x186>
    2820:	85 e2       	ldi	r24, 0x25	; 37
    2822:	92 e0       	ldi	r25, 0x02	; 2
    2824:	08 c0       	rjmp	.+16     	; 0x2836 <register_code+0x186>
    2826:	86 e2       	ldi	r24, 0x26	; 38
    2828:	92 e0       	ldi	r25, 0x02	; 2
    282a:	05 c0       	rjmp	.+10     	; 0x2836 <register_code+0x186>
    282c:	87 e2       	ldi	r24, 0x27	; 39
    282e:	92 e0       	ldi	r25, 0x02	; 2
    2830:	02 c0       	rjmp	.+4      	; 0x2836 <register_code+0x186>
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    2836:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2838:	0c 94 2d 12 	jmp	0x245a	; 0x245a <host_consumer_send>
    }
}
    283c:	cf 91       	pop	r28
    283e:	08 95       	ret

00002840 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    2840:	88 23       	and	r24, r24
    2842:	09 f4       	brne	.+2      	; 0x2846 <unregister_code+0x6>
    2844:	4b c0       	rjmp	.+150    	; 0x28dc <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2846:	82 38       	cpi	r24, 0x82	; 130
    2848:	59 f4       	brne	.+22     	; 0x2860 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    284a:	0e 94 bb 11 	call	0x2376	; 0x2376 <host_keyboard_leds>
    284e:	81 ff       	sbrs	r24, 1
    2850:	45 c0       	rjmp	.+138    	; 0x28dc <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    2852:	89 e3       	ldi	r24, 0x39	; 57
    2854:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <add_key>
        send_keyboard_report();
    2858:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    285c:	89 e3       	ldi	r24, 0x39	; 57
    285e:	0c c0       	rjmp	.+24     	; 0x2878 <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2860:	83 38       	cpi	r24, 0x83	; 131
    2862:	71 f4       	brne	.+28     	; 0x2880 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    2864:	0e 94 bb 11 	call	0x2376	; 0x2376 <host_keyboard_leds>
    2868:	80 ff       	sbrs	r24, 0
    286a:	38 c0       	rjmp	.+112    	; 0x28dc <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    286c:	83 e5       	ldi	r24, 0x53	; 83
    286e:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <add_key>
        send_keyboard_report();
    2872:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2876:	83 e5       	ldi	r24, 0x53	; 83
    2878:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <del_key>
        send_keyboard_report();
    287c:	0c 94 cc 1d 	jmp	0x3b98	; 0x3b98 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2880:	84 38       	cpi	r24, 0x84	; 132
    2882:	59 f4       	brne	.+22     	; 0x289a <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    2884:	0e 94 bb 11 	call	0x2376	; 0x2376 <host_keyboard_leds>
    2888:	82 ff       	sbrs	r24, 2
    288a:	28 c0       	rjmp	.+80     	; 0x28dc <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    288c:	87 e4       	ldi	r24, 0x47	; 71
    288e:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <add_key>
        send_keyboard_report();
    2892:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2896:	87 e4       	ldi	r24, 0x47	; 71
    2898:	ef cf       	rjmp	.-34     	; 0x2878 <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    289a:	9c ef       	ldi	r25, 0xFC	; 252
    289c:	98 0f       	add	r25, r24
    289e:	91 3a       	cpi	r25, 0xA1	; 161
    28a0:	58 f3       	brcs	.-42     	; 0x2878 <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    28a2:	90 e2       	ldi	r25, 0x20	; 32
    28a4:	98 0f       	add	r25, r24
    28a6:	98 30       	cpi	r25, 0x08	; 8
    28a8:	50 f4       	brcc	.+20     	; 0x28be <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    28aa:	87 70       	andi	r24, 0x07	; 7
    28ac:	91 e0       	ldi	r25, 0x01	; 1
    28ae:	01 c0       	rjmp	.+2      	; 0x28b2 <unregister_code+0x72>
    28b0:	99 0f       	add	r25, r25
    28b2:	8a 95       	dec	r24
    28b4:	ea f7       	brpl	.-6      	; 0x28b0 <unregister_code+0x70>
    28b6:	89 2f       	mov	r24, r25
    28b8:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <del_mods>
    28bc:	df cf       	rjmp	.-66     	; 0x287c <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    28be:	9b e5       	ldi	r25, 0x5B	; 91
    28c0:	98 0f       	add	r25, r24
    28c2:	93 30       	cpi	r25, 0x03	; 3
    28c4:	20 f4       	brcc	.+8      	; 0x28ce <unregister_code+0x8e>
        host_system_send(0);
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	0c 94 17 12 	jmp	0x242e	; 0x242e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    28ce:	88 5a       	subi	r24, 0xA8	; 168
    28d0:	83 31       	cpi	r24, 0x13	; 19
    28d2:	20 f4       	brcc	.+8      	; 0x28dc <unregister_code+0x9c>
        host_consumer_send(0);
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	0c 94 2d 12 	jmp	0x245a	; 0x245a <host_consumer_send>
    28dc:	08 95       	ret

000028de <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    28de:	88 23       	and	r24, r24
    28e0:	21 f0       	breq	.+8      	; 0x28ea <register_mods+0xc>
        add_mods(mods);
    28e2:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <add_mods>
        send_keyboard_report();
    28e6:	0c 94 cc 1d 	jmp	0x3b98	; 0x3b98 <send_keyboard_report>
    28ea:	08 95       	ret

000028ec <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    28ec:	88 23       	and	r24, r24
    28ee:	21 f0       	breq	.+8      	; 0x28f8 <unregister_mods+0xc>
        del_mods(mods);
    28f0:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <del_mods>
        send_keyboard_report();
    28f4:	0c 94 cc 1d 	jmp	0x3b98	; 0x3b98 <send_keyboard_report>
    28f8:	08 95       	ret

000028fa <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    28fa:	cf 92       	push	r12
    28fc:	df 92       	push	r13
    28fe:	ef 92       	push	r14
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	28 97       	sbiw	r28, 0x08	; 8
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    291c:	85 e0       	ldi	r24, 0x05	; 5
    291e:	f8 01       	movw	r30, r16
    2920:	de 01       	movw	r26, r28
    2922:	11 96       	adiw	r26, 0x01	; 1
    2924:	01 90       	ld	r0, Z+
    2926:	0d 92       	st	X+, r0
    2928:	8a 95       	dec	r24
    292a:	e1 f7       	brne	.-8      	; 0x2924 <process_action+0x2a>
    292c:	f8 01       	movw	r30, r16
    292e:	40 81       	ld	r20, Z
    2930:	31 81       	ldd	r19, Z+1	; 0x01
    2932:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2934:	25 81       	ldd	r18, Z+5	; 0x05
    2936:	22 95       	swap	r18
    2938:	2f 70       	andi	r18, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    293a:	83 81       	ldd	r24, Z+3	; 0x03
    293c:	94 81       	ldd	r25, Z+4	; 0x04
    293e:	89 2b       	or	r24, r25
    2940:	31 f0       	breq	.+12     	; 0x294e <process_action+0x54>
    2942:	3f 3f       	cpi	r19, 0xFF	; 255
    2944:	31 f4       	brne	.+12     	; 0x2952 <process_action+0x58>
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	4f 3f       	cpi	r20, 0xFF	; 255
    294a:	19 f4       	brne	.+6      	; 0x2952 <process_action+0x58>
    294c:	03 c0       	rjmp	.+6      	; 0x2954 <process_action+0x5a>
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	01 c0       	rjmp	.+2      	; 0x2954 <process_action+0x5a>
    2952:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    2954:	80 fd       	sbrc	r24, 0
    2956:	c8 c2       	rjmp	.+1424   	; 0x2ee8 <process_action+0x5ee>

    action_t action = layer_switch_get_action(event.key);
    2958:	49 83       	std	Y+1, r20	; 0x01
    295a:	3a 83       	std	Y+2, r19	; 0x02
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	9a 81       	ldd	r25, Y+2	; 0x02
    2960:	2f 83       	std	Y+7, r18	; 0x07
    2962:	0e 94 b6 1c 	call	0x396c	; 0x396c <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    2966:	9e 83       	std	Y+6, r25	; 0x06
    2968:	88 87       	std	Y+8, r24	; 0x08
    296a:	0e 94 b5 1c 	call	0x396a	; 0x396a <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    296e:	0e 94 88 1b 	call	0x3710	; 0x3710 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    2972:	4e 81       	ldd	r20, Y+6	; 0x06
    2974:	e4 2f       	mov	r30, r20
    2976:	e2 95       	swap	r30
    2978:	ef 70       	andi	r30, 0x0F	; 15
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	e0 5a       	subi	r30, 0xA0	; 160
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	2f 81       	ldd	r18, Y+7	; 0x07
    2982:	68 85       	ldd	r22, Y+8	; 0x08
    2984:	0c 94 b6 2c 	jmp	0x596c	; 0x596c <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    2988:	84 2f       	mov	r24, r20
    298a:	80 7f       	andi	r24, 0xF0	; 240
    298c:	14 2f       	mov	r17, r20
    298e:	1f 70       	andi	r17, 0x0F	; 15
    2990:	88 23       	and	r24, r24
    2992:	11 f0       	breq	.+4      	; 0x2998 <process_action+0x9e>
    2994:	12 95       	swap	r17
    2996:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    2998:	ff 20       	and	r15, r15
    299a:	59 f0       	breq	.+22     	; 0x29b2 <process_action+0xb8>
                    if (mods) {
    299c:	11 23       	and	r17, r17
    299e:	09 f4       	brne	.+2      	; 0x29a2 <process_action+0xa8>
    29a0:	58 c2       	rjmp	.+1200   	; 0x2e52 <process_action+0x558>
                        add_weak_mods(mods);
    29a2:	81 2f       	mov	r24, r17
    29a4:	68 87       	std	Y+8, r22	; 0x08
    29a6:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <add_weak_mods>
                        send_keyboard_report();
    29aa:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <send_keyboard_report>
    29ae:	68 85       	ldd	r22, Y+8	; 0x08
    29b0:	50 c2       	rjmp	.+1184   	; 0x2e52 <process_action+0x558>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    29b2:	86 2f       	mov	r24, r22
    29b4:	0e 94 20 14 	call	0x2840	; 0x2840 <unregister_code>
                    if (mods) {
    29b8:	11 23       	and	r17, r17
    29ba:	09 f4       	brne	.+2      	; 0x29be <process_action+0xc4>
    29bc:	95 c2       	rjmp	.+1322   	; 0x2ee8 <process_action+0x5ee>
                        del_weak_mods(mods);
    29be:	81 2f       	mov	r24, r17
    29c0:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    29c4:	28 96       	adiw	r28, 0x08	; 8
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	df 91       	pop	r29
    29d2:	cf 91       	pop	r28
    29d4:	1f 91       	pop	r17
    29d6:	0f 91       	pop	r16
    29d8:	ff 90       	pop	r15
    29da:	ef 90       	pop	r14
    29dc:	df 90       	pop	r13
    29de:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    29e0:	0c 94 cc 1d 	jmp	0x3b98	; 0x3b98 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    29e4:	34 2f       	mov	r19, r20
    29e6:	30 7f       	andi	r19, 0xF0	; 240
    29e8:	84 2f       	mov	r24, r20
    29ea:	8f 70       	andi	r24, 0x0F	; 15
    29ec:	30 32       	cpi	r19, 0x20	; 32
    29ee:	11 f0       	breq	.+4      	; 0x29f4 <process_action+0xfa>
    29f0:	82 95       	swap	r24
    29f2:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    29f4:	66 23       	and	r22, r22
    29f6:	19 f0       	breq	.+6      	; 0x29fe <process_action+0x104>
    29f8:	61 30       	cpi	r22, 0x01	; 1
    29fa:	09 f1       	breq	.+66     	; 0x2a3e <process_action+0x144>
    29fc:	2a c0       	rjmp	.+84     	; 0x2a52 <process_action+0x158>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    29fe:	ff 20       	and	r15, r15
    2a00:	a1 f0       	breq	.+40     	; 0x2a2a <process_action+0x130>
                            if (tap_count == 0) {
    2a02:	22 23       	and	r18, r18
    2a04:	81 f1       	breq	.+96     	; 0x2a66 <process_action+0x16c>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2a06:	21 30       	cpi	r18, 0x01	; 1
    2a08:	71 f5       	brne	.+92     	; 0x2a66 <process_action+0x16c>
            break;
#endif
        default:
            break;
    }
}
    2a0a:	28 96       	adiw	r28, 0x08	; 8
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	df 91       	pop	r29
    2a18:	cf 91       	pop	r28
    2a1a:	1f 91       	pop	r17
    2a1c:	0f 91       	pop	r16
    2a1e:	ff 90       	pop	r15
    2a20:	ef 90       	pop	r14
    2a22:	df 90       	pop	r13
    2a24:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2a26:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2a2a:	22 23       	and	r18, r18
    2a2c:	19 f0       	breq	.+6      	; 0x2a34 <process_action+0x13a>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2a2e:	21 30       	cpi	r18, 0x01	; 1
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <process_action+0x13a>
    2a32:	5a c2       	rjmp	.+1204   	; 0x2ee8 <process_action+0x5ee>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2a34:	8e 83       	std	Y+6, r24	; 0x06
    2a36:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <clear_oneshot_mods>
                                unregister_mods(mods);
    2a3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a3c:	8e c1       	rjmp	.+796    	; 0x2d5a <process_action+0x460>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2a3e:	ff 20       	and	r15, r15
    2a40:	21 f0       	breq	.+8      	; 0x2a4a <process_action+0x150>
                            if (tap_count <= TAPPING_TOGGLE) {
    2a42:	26 30       	cpi	r18, 0x06	; 6
    2a44:	08 f0       	brcs	.+2      	; 0x2a48 <process_action+0x14e>
    2a46:	50 c2       	rjmp	.+1184   	; 0x2ee8 <process_action+0x5ee>
    2a48:	0e c0       	rjmp	.+28     	; 0x2a66 <process_action+0x16c>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2a4a:	25 30       	cpi	r18, 0x05	; 5
    2a4c:	08 f0       	brcs	.+2      	; 0x2a50 <process_action+0x156>
    2a4e:	4c c2       	rjmp	.+1176   	; 0x2ee8 <process_action+0x5ee>
    2a50:	84 c1       	rjmp	.+776    	; 0x2d5a <process_action+0x460>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2a52:	ff 20       	and	r15, r15
    2a54:	c1 f0       	breq	.+48     	; 0x2a86 <process_action+0x18c>
                            if (tap_count > 0) {
    2a56:	22 23       	and	r18, r18
    2a58:	31 f0       	breq	.+12     	; 0x2a66 <process_action+0x16c>
                                if (record->tap.interrupted) {
    2a5a:	f8 01       	movw	r30, r16
    2a5c:	95 81       	ldd	r25, Z+5	; 0x05
    2a5e:	90 ff       	sbrs	r25, 0
    2a60:	f8 c1       	rjmp	.+1008   	; 0x2e52 <process_action+0x558>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2a62:	9f 70       	andi	r25, 0x0F	; 15
    2a64:	95 83       	std	Z+5, r25	; 0x05
            break;
#endif
        default:
            break;
    }
}
    2a66:	28 96       	adiw	r28, 0x08	; 8
    2a68:	0f b6       	in	r0, 0x3f	; 63
    2a6a:	f8 94       	cli
    2a6c:	de bf       	out	0x3e, r29	; 62
    2a6e:	0f be       	out	0x3f, r0	; 63
    2a70:	cd bf       	out	0x3d, r28	; 61
    2a72:	df 91       	pop	r29
    2a74:	cf 91       	pop	r28
    2a76:	1f 91       	pop	r17
    2a78:	0f 91       	pop	r16
    2a7a:	ff 90       	pop	r15
    2a7c:	ef 90       	pop	r14
    2a7e:	df 90       	pop	r13
    2a80:	cf 90       	pop	r12
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
                                    register_mods(mods);
    2a82:	0c 94 6f 14 	jmp	0x28de	; 0x28de <register_mods>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2a86:	22 23       	and	r18, r18
    2a88:	09 f4       	brne	.+2      	; 0x2a8c <process_action+0x192>
    2a8a:	67 c1       	rjmp	.+718    	; 0x2d5a <process_action+0x460>
    2a8c:	f6 c1       	rjmp	.+1004   	; 0x2e7a <process_action+0x580>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2a8e:	24 2f       	mov	r18, r20
    2a90:	26 95       	lsr	r18
    2a92:	26 95       	lsr	r18
    2a94:	23 70       	andi	r18, 0x03	; 3
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	21 15       	cp	r18, r1
    2a9a:	31 05       	cpc	r19, r1
    2a9c:	21 f0       	breq	.+8      	; 0x2aa6 <process_action+0x1ac>
    2a9e:	21 30       	cpi	r18, 0x01	; 1
    2aa0:	31 05       	cpc	r19, r1
    2aa2:	c9 f0       	breq	.+50     	; 0x2ad6 <process_action+0x1dc>
    2aa4:	21 c2       	rjmp	.+1090   	; 0x2ee8 <process_action+0x5ee>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2aa6:	ff 20       	and	r15, r15
    2aa8:	21 f0       	breq	.+8      	; 0x2ab2 <process_action+0x1b8>
                        host_system_send(action.usage.code);
    2aaa:	86 2f       	mov	r24, r22
    2aac:	94 2f       	mov	r25, r20
    2aae:	93 70       	andi	r25, 0x03	; 3
    2ab0:	02 c0       	rjmp	.+4      	; 0x2ab6 <process_action+0x1bc>
                    } else {
                        host_system_send(0);
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2ab6:	28 96       	adiw	r28, 0x08	; 8
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	df 91       	pop	r29
    2ac4:	cf 91       	pop	r28
    2ac6:	1f 91       	pop	r17
    2ac8:	0f 91       	pop	r16
    2aca:	ff 90       	pop	r15
    2acc:	ef 90       	pop	r14
    2ace:	df 90       	pop	r13
    2ad0:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2ad2:	0c 94 17 12 	jmp	0x242e	; 0x242e <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2ad6:	ff 20       	and	r15, r15
    2ad8:	21 f0       	breq	.+8      	; 0x2ae2 <process_action+0x1e8>
                        host_consumer_send(action.usage.code);
    2ada:	86 2f       	mov	r24, r22
    2adc:	94 2f       	mov	r25, r20
    2ade:	93 70       	andi	r25, 0x03	; 3
    2ae0:	02 c0       	rjmp	.+4      	; 0x2ae6 <process_action+0x1ec>
                    } else {
                        host_consumer_send(0);
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2ae6:	28 96       	adiw	r28, 0x08	; 8
    2ae8:	0f b6       	in	r0, 0x3f	; 63
    2aea:	f8 94       	cli
    2aec:	de bf       	out	0x3e, r29	; 62
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	cd bf       	out	0x3d, r28	; 61
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	1f 91       	pop	r17
    2af8:	0f 91       	pop	r16
    2afa:	ff 90       	pop	r15
    2afc:	ef 90       	pop	r14
    2afe:	df 90       	pop	r13
    2b00:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    2b02:	0c 94 2d 12 	jmp	0x245a	; 0x245a <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2b06:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2b08:	ff 20       	and	r15, r15
    2b0a:	19 f0       	breq	.+6      	; 0x2b12 <process_action+0x218>
                mousekey_on(action.key.code);
    2b0c:	0e 94 b6 22 	call	0x456c	; 0x456c <mousekey_on>
    2b10:	02 c0       	rjmp	.+4      	; 0x2b16 <process_action+0x21c>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2b12:	0e 94 1e 23 	call	0x463c	; 0x463c <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    2b16:	28 96       	adiw	r28, 0x08	; 8
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	1f 91       	pop	r17
    2b28:	0f 91       	pop	r16
    2b2a:	ff 90       	pop	r15
    2b2c:	ef 90       	pop	r14
    2b2e:	df 90       	pop	r13
    2b30:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    2b32:	0c 94 a3 23 	jmp	0x4746	; 0x4746 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2b36:	84 2f       	mov	r24, r20
    2b38:	83 70       	andi	r24, 0x03	; 3
    2b3a:	09 f0       	breq	.+2      	; 0x2b3e <process_action+0x244>
    2b3c:	76 c0       	rjmp	.+236    	; 0x2c2a <process_action+0x330>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2b3e:	f1 10       	cpse	r15, r1
    2b40:	d3 c1       	rjmp	.+934    	; 0x2ee8 <process_action+0x5ee>
                    uint8_t shift = action.layer_bitop.part*4;
    2b42:	26 2f       	mov	r18, r22
    2b44:	22 95       	swap	r18
    2b46:	26 95       	lsr	r18
    2b48:	27 70       	andi	r18, 0x07	; 7
    2b4a:	22 0f       	add	r18, r18
    2b4c:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2b4e:	86 2f       	mov	r24, r22
    2b50:	8f 70       	andi	r24, 0x0F	; 15
    2b52:	c8 2e       	mov	r12, r24
    2b54:	d1 2c       	mov	r13, r1
    2b56:	e1 2c       	mov	r14, r1
    2b58:	f1 2c       	mov	r15, r1
    2b5a:	02 2e       	mov	r0, r18
    2b5c:	04 c0       	rjmp	.+8      	; 0x2b66 <process_action+0x26c>
    2b5e:	cc 0c       	add	r12, r12
    2b60:	dd 1c       	adc	r13, r13
    2b62:	ee 1c       	adc	r14, r14
    2b64:	ff 1c       	adc	r15, r15
    2b66:	0a 94       	dec	r0
    2b68:	d2 f7       	brpl	.-12     	; 0x2b5e <process_action+0x264>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2b6a:	64 ff       	sbrs	r22, 4
    2b6c:	10 c0       	rjmp	.+32     	; 0x2b8e <process_action+0x294>
    2b6e:	6f e0       	ldi	r22, 0x0F	; 15
    2b70:	70 e0       	ldi	r23, 0x00	; 0
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	04 c0       	rjmp	.+8      	; 0x2b80 <process_action+0x286>
    2b78:	66 0f       	add	r22, r22
    2b7a:	77 1f       	adc	r23, r23
    2b7c:	88 1f       	adc	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	2a 95       	dec	r18
    2b82:	d2 f7       	brpl	.-12     	; 0x2b78 <process_action+0x27e>
    2b84:	60 95       	com	r22
    2b86:	70 95       	com	r23
    2b88:	80 95       	com	r24
    2b8a:	90 95       	com	r25
    2b8c:	03 c0       	rjmp	.+6      	; 0x2b94 <process_action+0x29a>
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	70 e0       	ldi	r23, 0x00	; 0
    2b92:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2b94:	24 2f       	mov	r18, r20
    2b96:	26 95       	lsr	r18
    2b98:	26 95       	lsr	r18
    2b9a:	23 70       	andi	r18, 0x03	; 3
    2b9c:	42 2f       	mov	r20, r18
    2b9e:	50 e0       	ldi	r21, 0x00	; 0
    2ba0:	42 30       	cpi	r20, 0x02	; 2
    2ba2:	51 05       	cpc	r21, r1
    2ba4:	d1 f0       	breq	.+52     	; 0x2bda <process_action+0x2e0>
    2ba6:	43 30       	cpi	r20, 0x03	; 3
    2ba8:	51 05       	cpc	r21, r1
    2baa:	59 f1       	breq	.+86     	; 0x2c02 <process_action+0x308>
    2bac:	6c 29       	or	r22, r12
    2bae:	7d 29       	or	r23, r13
    2bb0:	8e 29       	or	r24, r14
    2bb2:	9f 29       	or	r25, r15
    2bb4:	41 30       	cpi	r20, 0x01	; 1
    2bb6:	51 05       	cpc	r21, r1
    2bb8:	41 f1       	breq	.+80     	; 0x2c0a <process_action+0x310>
            break;
#endif
        default:
            break;
    }
}
    2bba:	28 96       	adiw	r28, 0x08	; 8
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	cd bf       	out	0x3d, r28	; 61
    2bc6:	df 91       	pop	r29
    2bc8:	cf 91       	pop	r28
    2bca:	1f 91       	pop	r17
    2bcc:	0f 91       	pop	r16
    2bce:	ff 90       	pop	r15
    2bd0:	ef 90       	pop	r14
    2bd2:	df 90       	pop	r13
    2bd4:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2bd6:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2bda:	6c 29       	or	r22, r12
    2bdc:	7d 29       	or	r23, r13
    2bde:	8e 29       	or	r24, r14
    2be0:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2be2:	28 96       	adiw	r28, 0x08	; 8
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	de bf       	out	0x3e, r29	; 62
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	cd bf       	out	0x3d, r28	; 61
    2bee:	df 91       	pop	r29
    2bf0:	cf 91       	pop	r28
    2bf2:	1f 91       	pop	r17
    2bf4:	0f 91       	pop	r16
    2bf6:	ff 90       	pop	r15
    2bf8:	ef 90       	pop	r14
    2bfa:	df 90       	pop	r13
    2bfc:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2bfe:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2c02:	0e 94 ad 1b 	call	0x375a	; 0x375a <default_layer_and>
    2c06:	c7 01       	movw	r24, r14
    2c08:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2c0a:	28 96       	adiw	r28, 0x08	; 8
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	f8 94       	cli
    2c10:	de bf       	out	0x3e, r29	; 62
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	cd bf       	out	0x3d, r28	; 61
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	1f 91       	pop	r17
    2c1c:	0f 91       	pop	r16
    2c1e:	ff 90       	pop	r15
    2c20:	ef 90       	pop	r14
    2c22:	df 90       	pop	r13
    2c24:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2c26:	0c 94 93 1b 	jmp	0x3726	; 0x3726 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2c2a:	ff 20       	and	r15, r15
    2c2c:	19 f0       	breq	.+6      	; 0x2c34 <process_action+0x33a>
    2c2e:	84 2f       	mov	r24, r20
    2c30:	81 70       	andi	r24, 0x01	; 1
    2c32:	01 c0       	rjmp	.+2      	; 0x2c36 <process_action+0x33c>
    2c34:	86 95       	lsr	r24
    2c36:	88 23       	and	r24, r24
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <process_action+0x342>
    2c3a:	56 c1       	rjmp	.+684    	; 0x2ee8 <process_action+0x5ee>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2c3c:	26 2f       	mov	r18, r22
    2c3e:	22 95       	swap	r18
    2c40:	26 95       	lsr	r18
    2c42:	27 70       	andi	r18, 0x07	; 7
    2c44:	22 0f       	add	r18, r18
    2c46:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2c48:	86 2f       	mov	r24, r22
    2c4a:	8f 70       	andi	r24, 0x0F	; 15
    2c4c:	c8 2e       	mov	r12, r24
    2c4e:	d1 2c       	mov	r13, r1
    2c50:	e1 2c       	mov	r14, r1
    2c52:	f1 2c       	mov	r15, r1
    2c54:	02 2e       	mov	r0, r18
    2c56:	04 c0       	rjmp	.+8      	; 0x2c60 <process_action+0x366>
    2c58:	cc 0c       	add	r12, r12
    2c5a:	dd 1c       	adc	r13, r13
    2c5c:	ee 1c       	adc	r14, r14
    2c5e:	ff 1c       	adc	r15, r15
    2c60:	0a 94       	dec	r0
    2c62:	d2 f7       	brpl	.-12     	; 0x2c58 <process_action+0x35e>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2c64:	64 ff       	sbrs	r22, 4
    2c66:	10 c0       	rjmp	.+32     	; 0x2c88 <process_action+0x38e>
    2c68:	6f e0       	ldi	r22, 0x0F	; 15
    2c6a:	70 e0       	ldi	r23, 0x00	; 0
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	04 c0       	rjmp	.+8      	; 0x2c7a <process_action+0x380>
    2c72:	66 0f       	add	r22, r22
    2c74:	77 1f       	adc	r23, r23
    2c76:	88 1f       	adc	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	2a 95       	dec	r18
    2c7c:	d2 f7       	brpl	.-12     	; 0x2c72 <process_action+0x378>
    2c7e:	60 95       	com	r22
    2c80:	70 95       	com	r23
    2c82:	80 95       	com	r24
    2c84:	90 95       	com	r25
    2c86:	03 c0       	rjmp	.+6      	; 0x2c8e <process_action+0x394>
    2c88:	60 e0       	ldi	r22, 0x00	; 0
    2c8a:	70 e0       	ldi	r23, 0x00	; 0
    2c8c:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2c8e:	24 2f       	mov	r18, r20
    2c90:	26 95       	lsr	r18
    2c92:	26 95       	lsr	r18
    2c94:	23 70       	andi	r18, 0x03	; 3
    2c96:	42 2f       	mov	r20, r18
    2c98:	50 e0       	ldi	r21, 0x00	; 0
    2c9a:	42 30       	cpi	r20, 0x02	; 2
    2c9c:	51 05       	cpc	r21, r1
    2c9e:	d1 f0       	breq	.+52     	; 0x2cd4 <process_action+0x3da>
    2ca0:	43 30       	cpi	r20, 0x03	; 3
    2ca2:	51 05       	cpc	r21, r1
    2ca4:	59 f1       	breq	.+86     	; 0x2cfc <process_action+0x402>
    2ca6:	6c 29       	or	r22, r12
    2ca8:	7d 29       	or	r23, r13
    2caa:	8e 29       	or	r24, r14
    2cac:	9f 29       	or	r25, r15
    2cae:	41 30       	cpi	r20, 0x01	; 1
    2cb0:	51 05       	cpc	r21, r1
    2cb2:	41 f1       	breq	.+80     	; 0x2d04 <process_action+0x40a>
            break;
#endif
        default:
            break;
    }
}
    2cb4:	28 96       	adiw	r28, 0x08	; 8
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
    2cc0:	df 91       	pop	r29
    2cc2:	cf 91       	pop	r28
    2cc4:	1f 91       	pop	r17
    2cc6:	0f 91       	pop	r16
    2cc8:	ff 90       	pop	r15
    2cca:	ef 90       	pop	r14
    2ccc:	df 90       	pop	r13
    2cce:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2cd0:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2cd4:	6c 29       	or	r22, r12
    2cd6:	7d 29       	or	r23, r13
    2cd8:	8e 29       	or	r24, r14
    2cda:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2cdc:	28 96       	adiw	r28, 0x08	; 8
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	cd bf       	out	0x3d, r28	; 61
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	1f 91       	pop	r17
    2cee:	0f 91       	pop	r16
    2cf0:	ff 90       	pop	r15
    2cf2:	ef 90       	pop	r14
    2cf4:	df 90       	pop	r13
    2cf6:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2cf8:	0c 94 9b 1c 	jmp	0x3936	; 0x3936 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2cfc:	0e 94 81 1c 	call	0x3902	; 0x3902 <layer_and>
    2d00:	c7 01       	movw	r24, r14
    2d02:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2d04:	28 96       	adiw	r28, 0x08	; 8
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	cd bf       	out	0x3d, r28	; 61
    2d10:	df 91       	pop	r29
    2d12:	cf 91       	pop	r28
    2d14:	1f 91       	pop	r17
    2d16:	0f 91       	pop	r16
    2d18:	ff 90       	pop	r15
    2d1a:	ef 90       	pop	r14
    2d1c:	df 90       	pop	r13
    2d1e:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2d20:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2d24:	60 3f       	cpi	r22, 0xF0	; 240
    2d26:	49 f1       	breq	.+82     	; 0x2d7a <process_action+0x480>
    2d28:	18 f4       	brcc	.+6      	; 0x2d30 <process_action+0x436>
    2d2a:	60 3e       	cpi	r22, 0xE0	; 224
    2d2c:	48 f4       	brcc	.+18     	; 0x2d40 <process_action+0x446>
    2d2e:	8c c0       	rjmp	.+280    	; 0x2e48 <process_action+0x54e>
    2d30:	62 3f       	cpi	r22, 0xF2	; 242
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <process_action+0x43c>
    2d34:	51 c0       	rjmp	.+162    	; 0x2dd8 <process_action+0x4de>
    2d36:	e0 f1       	brcs	.+120    	; 0x2db0 <process_action+0x4b6>
    2d38:	63 3f       	cpi	r22, 0xF3	; 243
    2d3a:	09 f4       	brne	.+2      	; 0x2d3e <process_action+0x444>
    2d3c:	61 c0       	rjmp	.+194    	; 0x2e00 <process_action+0x506>
    2d3e:	84 c0       	rjmp	.+264    	; 0x2e48 <process_action+0x54e>
    2d40:	16 2f       	mov	r17, r22
    2d42:	1f 70       	andi	r17, 0x0F	; 15
    2d44:	84 2f       	mov	r24, r20
    2d46:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2d48:	ff 20       	and	r15, r15
    2d4a:	21 f0       	breq	.+8      	; 0x2d54 <process_action+0x45a>
                        layer_on(action.layer_tap.val);
    2d4c:	0e 94 00 1c 	call	0x3800	; 0x3800 <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2d50:	81 2f       	mov	r24, r17
    2d52:	89 ce       	rjmp	.-750    	; 0x2a66 <process_action+0x16c>
                    } else {
                        layer_off(action.layer_tap.val);
    2d54:	0e 94 21 1c 	call	0x3842	; 0x3842 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2d58:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2d5a:	28 96       	adiw	r28, 0x08	; 8
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	cd bf       	out	0x3d, r28	; 61
    2d66:	df 91       	pop	r29
    2d68:	cf 91       	pop	r28
    2d6a:	1f 91       	pop	r17
    2d6c:	0f 91       	pop	r16
    2d6e:	ff 90       	pop	r15
    2d70:	ef 90       	pop	r14
    2d72:	df 90       	pop	r13
    2d74:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2d76:	0c 94 76 14 	jmp	0x28ec	; 0x28ec <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2d7a:	ff 20       	and	r15, r15
    2d7c:	a9 f0       	breq	.+42     	; 0x2da8 <process_action+0x4ae>
                        if (tap_count < TAPPING_TOGGLE) {
    2d7e:	25 30       	cpi	r18, 0x05	; 5
    2d80:	08 f0       	brcs	.+2      	; 0x2d84 <process_action+0x48a>
    2d82:	b2 c0       	rjmp	.+356    	; 0x2ee8 <process_action+0x5ee>
                            layer_invert(action.layer_tap.val);
    2d84:	84 2f       	mov	r24, r20
    2d86:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2d88:	28 96       	adiw	r28, 0x08	; 8
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	f8 94       	cli
    2d8e:	de bf       	out	0x3e, r29	; 62
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	cd bf       	out	0x3d, r28	; 61
    2d94:	df 91       	pop	r29
    2d96:	cf 91       	pop	r28
    2d98:	1f 91       	pop	r17
    2d9a:	0f 91       	pop	r16
    2d9c:	ff 90       	pop	r15
    2d9e:	ef 90       	pop	r14
    2da0:	df 90       	pop	r13
    2da2:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2da4:	0c 94 46 1c 	jmp	0x388c	; 0x388c <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2da8:	26 30       	cpi	r18, 0x06	; 6
    2daa:	08 f0       	brcs	.+2      	; 0x2dae <process_action+0x4b4>
    2dac:	9d c0       	rjmp	.+314    	; 0x2ee8 <process_action+0x5ee>
    2dae:	ea cf       	rjmp	.-44     	; 0x2d84 <process_action+0x48a>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2db0:	ff 20       	and	r15, r15
    2db2:	a1 f0       	breq	.+40     	; 0x2ddc <process_action+0x4e2>
    2db4:	84 2f       	mov	r24, r20
    2db6:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2db8:	28 96       	adiw	r28, 0x08	; 8
    2dba:	0f b6       	in	r0, 0x3f	; 63
    2dbc:	f8 94       	cli
    2dbe:	de bf       	out	0x3e, r29	; 62
    2dc0:	0f be       	out	0x3f, r0	; 63
    2dc2:	cd bf       	out	0x3d, r28	; 61
    2dc4:	df 91       	pop	r29
    2dc6:	cf 91       	pop	r28
    2dc8:	1f 91       	pop	r17
    2dca:	0f 91       	pop	r16
    2dcc:	ff 90       	pop	r15
    2dce:	ef 90       	pop	r14
    2dd0:	df 90       	pop	r13
    2dd2:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2dd4:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2dd8:	ff 20       	and	r15, r15
    2dda:	61 f3       	breq	.-40     	; 0x2db4 <process_action+0x4ba>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2ddc:	84 2f       	mov	r24, r20
    2dde:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2de0:	28 96       	adiw	r28, 0x08	; 8
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	1f 91       	pop	r17
    2df2:	0f 91       	pop	r16
    2df4:	ff 90       	pop	r15
    2df6:	ef 90       	pop	r14
    2df8:	df 90       	pop	r13
    2dfa:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2dfc:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2e00:	ff 20       	and	r15, r15
    2e02:	91 f0       	breq	.+36     	; 0x2e28 <process_action+0x52e>
    2e04:	84 2f       	mov	r24, r20
    2e06:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2e08:	28 96       	adiw	r28, 0x08	; 8
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	df 91       	pop	r29
    2e16:	cf 91       	pop	r28
    2e18:	1f 91       	pop	r17
    2e1a:	0f 91       	pop	r16
    2e1c:	ff 90       	pop	r15
    2e1e:	ef 90       	pop	r14
    2e20:	df 90       	pop	r13
    2e22:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2e24:	0c 94 eb 1b 	jmp	0x37d6	; 0x37d6 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2e28:	28 96       	adiw	r28, 0x08	; 8
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	df 91       	pop	r29
    2e36:	cf 91       	pop	r28
    2e38:	1f 91       	pop	r17
    2e3a:	0f 91       	pop	r16
    2e3c:	ff 90       	pop	r15
    2e3e:	ef 90       	pop	r14
    2e40:	df 90       	pop	r13
    2e42:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2e44:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2e48:	ff 20       	and	r15, r15
    2e4a:	a1 f0       	breq	.+40     	; 0x2e74 <process_action+0x57a>
                        if (tap_count > 0) {
    2e4c:	22 23       	and	r18, r18
    2e4e:	09 f4       	brne	.+2      	; 0x2e52 <process_action+0x558>
    2e50:	b1 cf       	rjmp	.-158    	; 0x2db4 <process_action+0x4ba>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2e52:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2e54:	28 96       	adiw	r28, 0x08	; 8
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	0f be       	out	0x3f, r0	; 63
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	df 91       	pop	r29
    2e62:	cf 91       	pop	r28
    2e64:	1f 91       	pop	r17
    2e66:	0f 91       	pop	r16
    2e68:	ff 90       	pop	r15
    2e6a:	ef 90       	pop	r14
    2e6c:	df 90       	pop	r13
    2e6e:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2e70:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2e74:	22 23       	and	r18, r18
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <process_action+0x580>
    2e78:	b1 cf       	rjmp	.-158    	; 0x2ddc <process_action+0x4e2>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2e7a:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2e7c:	28 96       	adiw	r28, 0x08	; 8
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	f8 94       	cli
    2e82:	de bf       	out	0x3e, r29	; 62
    2e84:	0f be       	out	0x3f, r0	; 63
    2e86:	cd bf       	out	0x3d, r28	; 61
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	1f 91       	pop	r17
    2e8e:	0f 91       	pop	r16
    2e90:	ff 90       	pop	r15
    2e92:	ef 90       	pop	r14
    2e94:	df 90       	pop	r13
    2e96:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2e98:	0c 94 20 14 	jmp	0x2840	; 0x2840 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2e9c:	4f 70       	andi	r20, 0x0F	; 15
    2e9e:	c8 01       	movw	r24, r16
    2ea0:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2ea4:	28 96       	adiw	r28, 0x08	; 8
    2ea6:	0f b6       	in	r0, 0x3f	; 63
    2ea8:	f8 94       	cli
    2eaa:	de bf       	out	0x3e, r29	; 62
    2eac:	0f be       	out	0x3f, r0	; 63
    2eae:	cd bf       	out	0x3d, r28	; 61
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	1f 91       	pop	r17
    2eb6:	0f 91       	pop	r16
    2eb8:	ff 90       	pop	r15
    2eba:	ef 90       	pop	r14
    2ebc:	df 90       	pop	r13
    2ebe:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2ec0:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2ec4:	4f 70       	andi	r20, 0x0F	; 15
    2ec6:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2ec8:	28 96       	adiw	r28, 0x08	; 8
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	f8 94       	cli
    2ece:	de bf       	out	0x3e, r29	; 62
    2ed0:	0f be       	out	0x3f, r0	; 63
    2ed2:	cd bf       	out	0x3d, r28	; 61
    2ed4:	df 91       	pop	r29
    2ed6:	cf 91       	pop	r28
    2ed8:	1f 91       	pop	r17
    2eda:	0f 91       	pop	r16
    2edc:	ff 90       	pop	r15
    2ede:	ef 90       	pop	r14
    2ee0:	df 90       	pop	r13
    2ee2:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2ee4:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2ee8:	28 96       	adiw	r28, 0x08	; 8
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	f8 94       	cli
    2eee:	de bf       	out	0x3e, r29	; 62
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	cd bf       	out	0x3d, r28	; 61
    2ef4:	df 91       	pop	r29
    2ef6:	cf 91       	pop	r28
    2ef8:	1f 91       	pop	r17
    2efa:	0f 91       	pop	r16
    2efc:	ff 90       	pop	r15
    2efe:	ef 90       	pop	r14
    2f00:	df 90       	pop	r13
    2f02:	cf 90       	pop	r12
    2f04:	08 95       	ret

00002f06 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2f06:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <clear_weak_mods>
    clear_keys();
    2f0a:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <clear_keys>
    send_keyboard_report();
    2f0e:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2f12:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <mousekey_clear>
    mousekey_send();
    2f16:	0e 94 a3 23 	call	0x4746	; 0x4746 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	0e 94 17 12 	call	0x242e	; 0x242e <host_system_send>
    host_consumer_send(0);
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	0c 94 2d 12 	jmp	0x245a	; 0x245a <host_consumer_send>

00002f2a <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2f2a:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <clear_mods>
    clear_keyboard_but_mods();
    2f2e:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <clear_keyboard_but_mods>

00002f32 <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2f32:	0e 94 b6 1c 	call	0x396c	; 0x396c <layer_switch_get_action>

    switch (action.kind.id) {
    2f36:	29 2f       	mov	r18, r25
    2f38:	22 95       	swap	r18
    2f3a:	2f 70       	andi	r18, 0x0F	; 15
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	2c 30       	cpi	r18, 0x0C	; 12
    2f40:	31 05       	cpc	r19, r1
    2f42:	4c f4       	brge	.+18     	; 0x2f56 <is_tap_key+0x24>
    2f44:	2a 30       	cpi	r18, 0x0A	; 10
    2f46:	31 05       	cpc	r19, r1
    2f48:	6c f4       	brge	.+26     	; 0x2f64 <is_tap_key+0x32>
    2f4a:	22 50       	subi	r18, 0x02	; 2
    2f4c:	31 09       	sbc	r19, r1
    2f4e:	22 30       	cpi	r18, 0x02	; 2
    2f50:	31 05       	cpc	r19, r1
    2f52:	70 f4       	brcc	.+28     	; 0x2f70 <is_tap_key+0x3e>
    2f54:	07 c0       	rjmp	.+14     	; 0x2f64 <is_tap_key+0x32>
    2f56:	2c 30       	cpi	r18, 0x0C	; 12
    2f58:	31 05       	cpc	r19, r1
    2f5a:	31 f0       	breq	.+12     	; 0x2f68 <is_tap_key+0x36>
    2f5c:	2f 30       	cpi	r18, 0x0F	; 15
    2f5e:	31 05       	cpc	r19, r1
    2f60:	19 f0       	breq	.+6      	; 0x2f68 <is_tap_key+0x36>
    2f62:	06 c0       	rjmp	.+12     	; 0x2f70 <is_tap_key+0x3e>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            return true;
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	08 95       	ret
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2f68:	93 fb       	bst	r25, 3
    2f6a:	88 27       	eor	r24, r24
    2f6c:	80 f9       	bld	r24, 0
    2f6e:	08 95       	ret
            return false;
    }
    return false;
    2f70:	80 e0       	ldi	r24, 0x00	; 0
}
    2f72:	08 95       	ret

00002f74 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2f74:	cf 93       	push	r28
    2f76:	df 93       	push	r29
    2f78:	00 d0       	rcall	.+0      	; 0x2f7a <debug_event+0x6>
    2f7a:	00 d0       	rcall	.+0      	; 0x2f7c <debug_event+0x8>
    2f7c:	1f 92       	push	r1
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2f82:	0f 90       	pop	r0
    2f84:	0f 90       	pop	r0
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	df 91       	pop	r29
    2f8e:	cf 91       	pop	r28
    2f90:	08 95       	ret

00002f92 <debug_record>:

void debug_record(keyrecord_t record)
{
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29
    2f96:	00 d0       	rcall	.+0      	; 0x2f98 <debug_record+0x6>
    2f98:	00 d0       	rcall	.+0      	; 0x2f9a <debug_record+0x8>
    2f9a:	00 d0       	rcall	.+0      	; 0x2f9c <debug_record+0xa>
    2f9c:	cd b7       	in	r28, 0x3d	; 61
    2f9e:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2fa0:	26 96       	adiw	r28, 0x06	; 6
    2fa2:	0f b6       	in	r0, 0x3f	; 63
    2fa4:	f8 94       	cli
    2fa6:	de bf       	out	0x3e, r29	; 62
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	cd bf       	out	0x3d, r28	; 61
    2fac:	df 91       	pop	r29
    2fae:	cf 91       	pop	r28
    2fb0:	08 95       	ret

00002fb2 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2fb2:	1f 93       	push	r17
    2fb4:	cf 93       	push	r28
    2fb6:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fb8:	c0 91 70 01 	lds	r28, 0x0170
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2fbc:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fbe:	80 91 71 01 	lds	r24, 0x0171
    2fc2:	c8 17       	cp	r28, r24
    2fc4:	99 f0       	breq	.+38     	; 0x2fec <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2fc6:	d0 e0       	ldi	r29, 0x00	; 0
    2fc8:	1c 9f       	mul	r17, r28
    2fca:	f0 01       	movw	r30, r0
    2fcc:	1d 9f       	mul	r17, r29
    2fce:	f0 0d       	add	r31, r0
    2fd0:	11 24       	eor	r1, r1
    2fd2:	ee 58       	subi	r30, 0x8E	; 142
    2fd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd6:	40 81       	ld	r20, Z
    2fd8:	51 81       	ldd	r21, Z+1	; 0x01
    2fda:	62 81       	ldd	r22, Z+2	; 0x02
    2fdc:	73 81       	ldd	r23, Z+3	; 0x03
    2fde:	84 81       	ldd	r24, Z+4	; 0x04
    2fe0:	95 81       	ldd	r25, Z+5	; 0x05
    2fe2:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2fe6:	21 96       	adiw	r28, 0x01	; 1
    2fe8:	c7 70       	andi	r28, 0x07	; 7
    2fea:	e9 cf       	rjmp	.-46     	; 0x2fbe <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2fec:	df 91       	pop	r29
    2fee:	cf 91       	pop	r28
    2ff0:	1f 91       	pop	r17
    2ff2:	08 95       	ret

00002ff4 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2ff4:	40 91 a2 01 	lds	r20, 0x01A2
    2ff8:	50 91 a3 01 	lds	r21, 0x01A3
    2ffc:	60 91 a4 01 	lds	r22, 0x01A4
    3000:	70 91 a5 01 	lds	r23, 0x01A5
    3004:	80 91 a6 01 	lds	r24, 0x01A6
    3008:	90 91 a7 01 	lds	r25, 0x01A7
    300c:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <debug_record>

00003010 <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    3010:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    3012:	80 91 a7 01 	lds	r24, 0x01A7
    3016:	82 95       	swap	r24
    3018:	8f 70       	andi	r24, 0x0F	; 15
    301a:	09 f0       	breq	.+2      	; 0x301e <waiting_buffer_scan_tap+0xe>
    301c:	5f c0       	rjmp	.+190    	; 0x30dc <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    301e:	80 91 a4 01 	lds	r24, 0x01A4
    3022:	88 23       	and	r24, r24
    3024:	09 f4       	brne	.+2      	; 0x3028 <waiting_buffer_scan_tap+0x18>
    3026:	5a c0       	rjmp	.+180    	; 0x30dc <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3028:	20 91 70 01 	lds	r18, 0x0170
    302c:	a0 91 71 01 	lds	r26, 0x0171
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3030:	60 91 a2 01 	lds	r22, 0x01A2
    3034:	70 91 a3 01 	lds	r23, 0x01A3
    3038:	80 91 a5 01 	lds	r24, 0x01A5
    303c:	90 91 a6 01 	lds	r25, 0x01A6
    3040:	31 e0       	ldi	r19, 0x01	; 1
    3042:	6f 3f       	cpi	r22, 0xFF	; 255
    3044:	09 f0       	breq	.+2      	; 0x3048 <waiting_buffer_scan_tap+0x38>
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	b3 2f       	mov	r27, r19
    304a:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    304c:	2a 17       	cp	r18, r26
    304e:	09 f4       	brne	.+2      	; 0x3052 <waiting_buffer_scan_tap+0x42>
    3050:	45 c0       	rjmp	.+138    	; 0x30dc <waiting_buffer_scan_tap+0xcc>
    3052:	00 97       	sbiw	r24, 0x00	; 0
    3054:	21 f0       	breq	.+8      	; 0x305e <waiting_buffer_scan_tap+0x4e>
    3056:	7f 3f       	cpi	r23, 0xFF	; 255
    3058:	21 f4       	brne	.+8      	; 0x3062 <waiting_buffer_scan_tap+0x52>
    305a:	4b 2f       	mov	r20, r27
    305c:	03 c0       	rjmp	.+6      	; 0x3064 <waiting_buffer_scan_tap+0x54>
    305e:	41 e0       	ldi	r20, 0x01	; 1
    3060:	01 c0       	rjmp	.+2      	; 0x3064 <waiting_buffer_scan_tap+0x54>
    3062:	40 e0       	ldi	r20, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    3066:	40 fd       	sbrc	r20, 0
    3068:	35 c0       	rjmp	.+106    	; 0x30d4 <waiting_buffer_scan_tap+0xc4>
    306a:	c2 9f       	mul	r28, r18
    306c:	f0 01       	movw	r30, r0
    306e:	c3 9f       	mul	r28, r19
    3070:	f0 0d       	add	r31, r0
    3072:	11 24       	eor	r1, r1
    3074:	ee 58       	subi	r30, 0x8E	; 142
    3076:	fe 4f       	sbci	r31, 0xFE	; 254
    3078:	41 81       	ldd	r20, Z+1	; 0x01
    307a:	74 13       	cpse	r23, r20
    307c:	2b c0       	rjmp	.+86     	; 0x30d4 <waiting_buffer_scan_tap+0xc4>
    307e:	40 81       	ld	r20, Z
    3080:	64 13       	cpse	r22, r20
    3082:	28 c0       	rjmp	.+80     	; 0x30d4 <waiting_buffer_scan_tap+0xc4>
    3084:	42 81       	ldd	r20, Z+2	; 0x02
    3086:	41 11       	cpse	r20, r1
    3088:	25 c0       	rjmp	.+74     	; 0x30d4 <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    308a:	43 81       	ldd	r20, Z+3	; 0x03
    308c:	54 81       	ldd	r21, Z+4	; 0x04
    308e:	48 17       	cp	r20, r24
    3090:	59 07       	cpc	r21, r25
    3092:	10 f4       	brcc	.+4      	; 0x3098 <waiting_buffer_scan_tap+0x88>
    3094:	41 50       	subi	r20, 0x01	; 1
    3096:	51 09       	sbc	r21, r1
    3098:	48 1b       	sub	r20, r24
    309a:	59 0b       	sbc	r21, r25
    309c:	48 3c       	cpi	r20, 0xC8	; 200
    309e:	51 05       	cpc	r21, r1
    30a0:	c8 f4       	brcc	.+50     	; 0x30d4 <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    30a2:	80 91 a7 01 	lds	r24, 0x01A7
    30a6:	8f 70       	andi	r24, 0x0F	; 15
    30a8:	80 61       	ori	r24, 0x10	; 16
    30aa:	80 93 a7 01 	sts	0x01A7, r24
            waiting_buffer[i].tap.count = 1;
    30ae:	86 e0       	ldi	r24, 0x06	; 6
    30b0:	82 9f       	mul	r24, r18
    30b2:	f0 01       	movw	r30, r0
    30b4:	83 9f       	mul	r24, r19
    30b6:	f0 0d       	add	r31, r0
    30b8:	11 24       	eor	r1, r1
    30ba:	e9 58       	subi	r30, 0x89	; 137
    30bc:	fe 4f       	sbci	r31, 0xFE	; 254
    30be:	80 81       	ld	r24, Z
    30c0:	8f 70       	andi	r24, 0x0F	; 15
    30c2:	80 61       	ori	r24, 0x10	; 16
    30c4:	80 83       	st	Z, r24
            process_action(&tapping_key);
    30c6:	82 ea       	ldi	r24, 0xA2	; 162
    30c8:	91 e0       	ldi	r25, 0x01	; 1
    30ca:	0e 94 7d 14 	call	0x28fa	; 0x28fa <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    30ce:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    30d0:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30d4:	2f 5f       	subi	r18, 0xFF	; 255
    30d6:	3f 4f       	sbci	r19, 0xFF	; 255
    30d8:	27 70       	andi	r18, 0x07	; 7
    30da:	b8 cf       	rjmp	.-144    	; 0x304c <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    30dc:	cf 91       	pop	r28
    30de:	08 95       	ret

000030e0 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    30e0:	cf 92       	push	r12
    30e2:	df 92       	push	r13
    30e4:	ef 92       	push	r14
    30e6:	ff 92       	push	r15
    30e8:	0f 93       	push	r16
    30ea:	1f 93       	push	r17
    30ec:	cf 93       	push	r28
    30ee:	df 93       	push	r29
    30f0:	cd b7       	in	r28, 0x3d	; 61
    30f2:	de b7       	in	r29, 0x3e	; 62
    30f4:	62 97       	sbiw	r28, 0x12	; 18
    30f6:	0f b6       	in	r0, 0x3f	; 63
    30f8:	f8 94       	cli
    30fa:	de bf       	out	0x3e, r29	; 62
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	cd bf       	out	0x3d, r28	; 61
    3100:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    3102:	85 e0       	ldi	r24, 0x05	; 5
    3104:	f8 01       	movw	r30, r16
    3106:	de 01       	movw	r26, r28
    3108:	1d 96       	adiw	r26, 0x0d	; 13
    310a:	01 90       	ld	r0, Z+
    310c:	0d 92       	st	X+, r0
    310e:	8a 95       	dec	r24
    3110:	e1 f7       	brne	.-8      	; 0x310a <process_tapping+0x2a>
    3112:	d8 01       	movw	r26, r16
    3114:	4c 91       	ld	r20, X
    3116:	11 96       	adiw	r26, 0x01	; 1
    3118:	5c 91       	ld	r21, X
    311a:	11 97       	sbiw	r26, 0x01	; 1
    311c:	12 96       	adiw	r26, 0x02	; 2
    311e:	6c 91       	ld	r22, X
    3120:	12 97       	sbiw	r26, 0x02	; 2
    3122:	13 96       	adiw	r26, 0x03	; 3
    3124:	ed 90       	ld	r14, X+
    3126:	fc 90       	ld	r15, X
    3128:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    312a:	70 91 a2 01 	lds	r23, 0x01A2
    312e:	e0 91 a3 01 	lds	r30, 0x01A3
    3132:	20 91 a5 01 	lds	r18, 0x01A5
    3136:	30 91 a6 01 	lds	r19, 0x01A6
    313a:	21 15       	cp	r18, r1
    313c:	31 05       	cpc	r19, r1
    313e:	31 f0       	breq	.+12     	; 0x314c <process_tapping+0x6c>
    3140:	ef 3f       	cpi	r30, 0xFF	; 255
    3142:	31 f4       	brne	.+12     	; 0x3150 <process_tapping+0x70>
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	7f 3f       	cpi	r23, 0xFF	; 255
    3148:	19 f4       	brne	.+6      	; 0x3150 <process_tapping+0x70>
    314a:	03 c0       	rjmp	.+6      	; 0x3152 <process_tapping+0x72>
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	01 c0       	rjmp	.+2      	; 0x3152 <process_tapping+0x72>
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	b8 2f       	mov	r27, r24
    3154:	b1 70       	andi	r27, 0x01	; 1
    3156:	cb 2e       	mov	r12, r27
    3158:	80 fd       	sbrc	r24, 0
    315a:	6c c1       	rjmp	.+728    	; 0x3434 <process_tapping+0x354>
    315c:	d0 90 a4 01 	lds	r13, 0x01A4
    3160:	dd 20       	and	r13, r13
    3162:	09 f4       	brne	.+2      	; 0x3166 <process_tapping+0x86>
    3164:	f5 c0       	rjmp	.+490    	; 0x3350 <process_tapping+0x270>
    3166:	f0 91 a7 01 	lds	r31, 0x01A7
        if (WITHIN_TAPPING_TERM(event)) {
    316a:	e2 16       	cp	r14, r18
    316c:	f3 06       	cpc	r15, r19
    316e:	38 f0       	brcs	.+14     	; 0x317e <process_tapping+0x9e>
    3170:	c7 01       	movw	r24, r14
    3172:	82 1b       	sub	r24, r18
    3174:	93 0b       	sbc	r25, r19
    3176:	88 3c       	cpi	r24, 0xC8	; 200
    3178:	91 05       	cpc	r25, r1
    317a:	48 f0       	brcs	.+18     	; 0x318e <process_tapping+0xae>
    317c:	9b c0       	rjmp	.+310    	; 0x32b4 <process_tapping+0x1d4>
    317e:	20 95       	com	r18
    3180:	30 95       	com	r19
    3182:	2e 0d       	add	r18, r14
    3184:	3f 1d       	adc	r19, r15
    3186:	28 3c       	cpi	r18, 0xC8	; 200
    3188:	31 05       	cpc	r19, r1
    318a:	08 f0       	brcs	.+2      	; 0x318e <process_tapping+0xae>
    318c:	93 c0       	rjmp	.+294    	; 0x32b4 <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    318e:	8f 2f       	mov	r24, r31
    3190:	80 7f       	andi	r24, 0xF0	; 240
    3192:	09 f0       	breq	.+2      	; 0x3196 <process_tapping+0xb6>
    3194:	52 c0       	rjmp	.+164    	; 0x323a <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3196:	e5 13       	cpse	r30, r21
    3198:	14 c0       	rjmp	.+40     	; 0x31c2 <process_tapping+0xe2>
    319a:	74 13       	cpse	r23, r20
    319c:	12 c0       	rjmp	.+36     	; 0x31c2 <process_tapping+0xe2>
    319e:	d6 2e       	mov	r13, r22
    31a0:	61 11       	cpse	r22, r1
    31a2:	0f c0       	rjmp	.+30     	; 0x31c2 <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    31a4:	ff 70       	andi	r31, 0x0F	; 15
    31a6:	f0 61       	ori	r31, 0x10	; 16
    31a8:	f0 93 a7 01 	sts	0x01A7, r31
                    debug_tapping_key();
    31ac:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <debug_tapping_key>
                    process_action(&tapping_key);
    31b0:	82 ea       	ldi	r24, 0xA2	; 162
    31b2:	91 e0       	ldi	r25, 0x01	; 1
    31b4:	0e 94 7d 14 	call	0x28fa	; 0x28fa <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    31b8:	80 91 a7 01 	lds	r24, 0x01A7
    31bc:	f8 01       	movw	r30, r16
    31be:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    31c0:	6c c1       	rjmp	.+728    	; 0x349a <process_tapping+0x3ba>
    31c2:	ef 28       	or	r14, r15
    31c4:	31 f0       	breq	.+12     	; 0x31d2 <process_tapping+0xf2>
    31c6:	5f 3f       	cpi	r21, 0xFF	; 255
    31c8:	31 f4       	brne	.+12     	; 0x31d6 <process_tapping+0xf6>
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	4f 3f       	cpi	r20, 0xFF	; 255
    31ce:	19 f4       	brne	.+6      	; 0x31d6 <process_tapping+0xf6>
    31d0:	03 c0       	rjmp	.+6      	; 0x31d8 <process_tapping+0xf8>
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	01 c0       	rjmp	.+2      	; 0x31d8 <process_tapping+0xf8>
    31d6:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    31d8:	80 fd       	sbrc	r24, 0
    31da:	03 c0       	rjmp	.+6      	; 0x31e2 <process_tapping+0x102>
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	86 27       	eor	r24, r22
    31e0:	01 c0       	rjmp	.+2      	; 0x31e4 <process_tapping+0x104>
    31e2:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    31e4:	f8 2f       	mov	r31, r24
    31e6:	f1 70       	andi	r31, 0x01	; 1
    31e8:	ff 2e       	mov	r15, r31
    31ea:	80 ff       	sbrs	r24, 0
    31ec:	1c c0       	rjmp	.+56     	; 0x3226 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    31ee:	80 91 70 01 	lds	r24, 0x0170
    31f2:	20 91 71 01 	lds	r18, 0x0171
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    31f6:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    31f8:	82 17       	cp	r24, r18
    31fa:	09 f4       	brne	.+2      	; 0x31fe <process_tapping+0x11e>
    31fc:	28 c1       	rjmp	.+592    	; 0x344e <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	38 9f       	mul	r19, r24
    3202:	f0 01       	movw	r30, r0
    3204:	39 9f       	mul	r19, r25
    3206:	f0 0d       	add	r31, r0
    3208:	11 24       	eor	r1, r1
    320a:	ee 58       	subi	r30, 0x8E	; 142
    320c:	fe 4f       	sbci	r31, 0xFE	; 254
    320e:	71 81       	ldd	r23, Z+1	; 0x01
    3210:	57 13       	cpse	r21, r23
    3212:	06 c0       	rjmp	.+12     	; 0x3220 <process_tapping+0x140>
    3214:	70 81       	ld	r23, Z
    3216:	47 13       	cpse	r20, r23
    3218:	03 c0       	rjmp	.+6      	; 0x3220 <process_tapping+0x140>
    321a:	72 81       	ldd	r23, Z+2	; 0x02
    321c:	67 13       	cpse	r22, r23
    321e:	03 c0       	rjmp	.+6      	; 0x3226 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3220:	01 96       	adiw	r24, 0x01	; 1
    3222:	87 70       	andi	r24, 0x07	; 7
    3224:	e9 cf       	rjmp	.-46     	; 0x31f8 <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    3226:	d6 2e       	mov	r13, r22
    3228:	66 23       	and	r22, r22
    322a:	09 f4       	brne	.+2      	; 0x322e <process_tapping+0x14e>
    322c:	36 c1       	rjmp	.+620    	; 0x349a <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    322e:	80 91 a7 01 	lds	r24, 0x01A7
    3232:	81 60       	ori	r24, 0x01	; 1
    3234:	80 93 a7 01 	sts	0x01A7, r24
    3238:	53 c0       	rjmp	.+166    	; 0x32e0 <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    323a:	e5 13       	cpse	r30, r21
    323c:	08 c0       	rjmp	.+16     	; 0x324e <process_tapping+0x16e>
    323e:	74 13       	cpse	r23, r20
    3240:	06 c0       	rjmp	.+12     	; 0x324e <process_tapping+0x16e>
    3242:	61 11       	cpse	r22, r1
    3244:	04 c0       	rjmp	.+8      	; 0x324e <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    3246:	d8 01       	movw	r26, r16
    3248:	15 96       	adiw	r26, 0x05	; 5
    324a:	fc 93       	st	X, r31
    324c:	ae c0       	rjmp	.+348    	; 0x33aa <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    324e:	4d 87       	std	Y+13, r20	; 0x0d
    3250:	5e 87       	std	Y+14, r21	; 0x0e
    3252:	8d 85       	ldd	r24, Y+13	; 0x0d
    3254:	9e 85       	ldd	r25, Y+14	; 0x0e
    3256:	6a 8b       	std	Y+18, r22	; 0x12
    3258:	0e 94 99 17 	call	0x2f32	; 0x2f32 <is_tap_key>
    325c:	6a 89       	ldd	r22, Y+18	; 0x12
    325e:	88 23       	and	r24, r24
    3260:	29 f1       	breq	.+74     	; 0x32ac <process_tapping+0x1cc>
    3262:	d6 2e       	mov	r13, r22
    3264:	66 23       	and	r22, r22
    3266:	11 f1       	breq	.+68     	; 0x32ac <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    3268:	20 91 a7 01 	lds	r18, 0x01A7
    326c:	82 2f       	mov	r24, r18
    326e:	82 95       	swap	r24
    3270:	8f 70       	andi	r24, 0x0F	; 15
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	02 97       	sbiw	r24, 0x02	; 2
    3276:	0c f4       	brge	.+2      	; 0x327a <process_tapping+0x19a>
    3278:	60 c0       	rjmp	.+192    	; 0x333a <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    327a:	80 91 a2 01 	lds	r24, 0x01A2
    327e:	90 91 a3 01 	lds	r25, 0x01A3
    3282:	98 87       	std	Y+8, r25	; 0x08
    3284:	8f 83       	std	Y+7, r24	; 0x07
    3286:	19 86       	std	Y+9, r1	; 0x09
    3288:	fb 86       	std	Y+11, r15	; 0x0b
    328a:	ea 86       	std	Y+10, r14	; 0x0a
    328c:	2c 87       	std	Y+12, r18	; 0x0c
    328e:	ce 01       	movw	r24, r28
    3290:	07 96       	adiw	r24, 0x07	; 7
    3292:	51 c0       	rjmp	.+162    	; 0x3336 <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3294:	e5 17       	cp	r30, r21
    3296:	31 f1       	breq	.+76     	; 0x32e4 <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3298:	4d 87       	std	Y+13, r20	; 0x0d
    329a:	5e 87       	std	Y+14, r21	; 0x0e
    329c:	8d 85       	ldd	r24, Y+13	; 0x0d
    329e:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a0:	6a 8b       	std	Y+18, r22	; 0x12
    32a2:	0e 94 99 17 	call	0x2f32	; 0x2f32 <is_tap_key>
    32a6:	6a 89       	ldd	r22, Y+18	; 0x12
    32a8:	81 11       	cpse	r24, r1
    32aa:	2e c0       	rjmp	.+92     	; 0x3308 <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    32ac:	c8 01       	movw	r24, r16
    32ae:	0e 94 7d 14 	call	0x28fa	; 0x28fa <process_action>
    32b2:	a4 c0       	rjmp	.+328    	; 0x33fc <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    32b4:	8f 2f       	mov	r24, r31
    32b6:	80 7f       	andi	r24, 0xF0	; 240
    32b8:	69 f7       	brne	.-38     	; 0x3294 <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    32ba:	7e 2d       	mov	r23, r14
    32bc:	f9 8a       	std	Y+17, r15	; 0x11
    32be:	e8 8a       	std	Y+16, r14	; 0x10
    32c0:	89 89       	ldd	r24, Y+17	; 0x11
    32c2:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <debug_event>
                process_action(&tapping_key);
    32c6:	82 ea       	ldi	r24, 0xA2	; 162
    32c8:	91 e0       	ldi	r25, 0x01	; 1
    32ca:	0e 94 7d 14 	call	0x28fa	; 0x28fa <process_action>
                tapping_key = (keyrecord_t){};
    32ce:	e2 ea       	ldi	r30, 0xA2	; 162
    32d0:	f1 e0       	ldi	r31, 0x01	; 1
    32d2:	86 e0       	ldi	r24, 0x06	; 6
    32d4:	df 01       	movw	r26, r30
    32d6:	1d 92       	st	X+, r1
    32d8:	8a 95       	dec	r24
    32da:	e9 f7       	brne	.-6      	; 0x32d6 <process_tapping+0x1f6>
                debug_tapping_key();
    32dc:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <debug_tapping_key>
                return false;
    32e0:	d1 2c       	mov	r13, r1
    32e2:	db c0       	rjmp	.+438    	; 0x349a <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    32e4:	74 13       	cpse	r23, r20
    32e6:	d8 cf       	rjmp	.-80     	; 0x3298 <process_tapping+0x1b8>
    32e8:	61 11       	cpse	r22, r1
    32ea:	d6 cf       	rjmp	.-84     	; 0x3298 <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    32ec:	d8 01       	movw	r26, r16
    32ee:	15 96       	adiw	r26, 0x05	; 5
    32f0:	fc 93       	st	X, r31
                    process_action(keyp);
    32f2:	c8 01       	movw	r24, r16
    32f4:	0e 94 7d 14 	call	0x28fa	; 0x28fa <process_action>
                    tapping_key = (keyrecord_t){};
    32f8:	e2 ea       	ldi	r30, 0xA2	; 162
    32fa:	f1 e0       	ldi	r31, 0x01	; 1
    32fc:	86 e0       	ldi	r24, 0x06	; 6
    32fe:	df 01       	movw	r26, r30
    3300:	1d 92       	st	X+, r1
    3302:	8a 95       	dec	r24
    3304:	e9 f7       	brne	.-6      	; 0x3300 <process_tapping+0x220>
                    return true;
    3306:	c9 c0       	rjmp	.+402    	; 0x349a <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3308:	d6 2e       	mov	r13, r22
    330a:	66 23       	and	r22, r22
    330c:	79 f2       	breq	.-98     	; 0x32ac <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    330e:	20 91 a7 01 	lds	r18, 0x01A7
    3312:	82 2f       	mov	r24, r18
    3314:	82 95       	swap	r24
    3316:	8f 70       	andi	r24, 0x0F	; 15
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	02 97       	sbiw	r24, 0x02	; 2
    331c:	74 f0       	brlt	.+28     	; 0x333a <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    331e:	80 91 a2 01 	lds	r24, 0x01A2
    3322:	90 91 a3 01 	lds	r25, 0x01A3
    3326:	9a 83       	std	Y+2, r25	; 0x02
    3328:	89 83       	std	Y+1, r24	; 0x01
    332a:	1b 82       	std	Y+3, r1	; 0x03
    332c:	fd 82       	std	Y+5, r15	; 0x05
    332e:	ec 82       	std	Y+4, r14	; 0x04
    3330:	2e 83       	std	Y+6, r18	; 0x06
    3332:	ce 01       	movw	r24, r28
    3334:	01 96       	adiw	r24, 0x01	; 1
    3336:	0e 94 7d 14 	call	0x28fa	; 0x28fa <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    333a:	86 e0       	ldi	r24, 0x06	; 6
    333c:	f8 01       	movw	r30, r16
    333e:	a2 ea       	ldi	r26, 0xA2	; 162
    3340:	b1 e0       	ldi	r27, 0x01	; 1
    3342:	01 90       	ld	r0, Z+
    3344:	0d 92       	st	X+, r0
    3346:	8a 95       	dec	r24
    3348:	e1 f7       	brne	.-8      	; 0x3342 <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    334a:	0e 94 08 18 	call	0x3010	; 0x3010 <waiting_buffer_scan_tap>
    334e:	6f c0       	rjmp	.+222    	; 0x342e <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    3350:	e2 16       	cp	r14, r18
    3352:	f3 06       	cpc	r15, r19
    3354:	28 f0       	brcs	.+10     	; 0x3360 <process_tapping+0x280>
    3356:	c7 01       	movw	r24, r14
    3358:	82 1b       	sub	r24, r18
    335a:	93 0b       	sbc	r25, r19
    335c:	9c 01       	movw	r18, r24
    335e:	04 c0       	rjmp	.+8      	; 0x3368 <process_tapping+0x288>
    3360:	20 95       	com	r18
    3362:	30 95       	com	r19
    3364:	2e 0d       	add	r18, r14
    3366:	3f 1d       	adc	r19, r15
    3368:	28 3c       	cpi	r18, 0xC8	; 200
    336a:	31 05       	cpc	r19, r1
    336c:	08 f0       	brcs	.+2      	; 0x3370 <process_tapping+0x290>
    336e:	52 c0       	rjmp	.+164    	; 0x3414 <process_tapping+0x334>
            if (event.pressed) {
    3370:	d6 2e       	mov	r13, r22
    3372:	66 23       	and	r22, r22
    3374:	09 f4       	brne	.+2      	; 0x3378 <process_tapping+0x298>
    3376:	9a cf       	rjmp	.-204    	; 0x32ac <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    3378:	e5 13       	cpse	r30, r21
    337a:	2c c0       	rjmp	.+88     	; 0x33d4 <process_tapping+0x2f4>
    337c:	74 13       	cpse	r23, r20
    337e:	2a c0       	rjmp	.+84     	; 0x33d4 <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    3380:	80 91 a7 01 	lds	r24, 0x01A7
    3384:	80 fd       	sbrc	r24, 0
    3386:	1d c0       	rjmp	.+58     	; 0x33c2 <process_tapping+0x2e2>
    3388:	98 2f       	mov	r25, r24
    338a:	92 95       	swap	r25
    338c:	9f 70       	andi	r25, 0x0F	; 15
    338e:	c9 f0       	breq	.+50     	; 0x33c2 <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    3390:	d8 01       	movw	r26, r16
    3392:	15 96       	adiw	r26, 0x05	; 5
    3394:	8c 93       	st	X, r24
    3396:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    3398:	9f 30       	cpi	r25, 0x0F	; 15
    339a:	39 f0       	breq	.+14     	; 0x33aa <process_tapping+0x2ca>
    339c:	9f 5f       	subi	r25, 0xFF	; 255
    339e:	92 95       	swap	r25
    33a0:	90 7f       	andi	r25, 0xF0	; 240
    33a2:	8f 70       	andi	r24, 0x0F	; 15
    33a4:	89 2b       	or	r24, r25
    33a6:	15 96       	adiw	r26, 0x05	; 5
    33a8:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    33aa:	c8 01       	movw	r24, r16
    33ac:	0e 94 7d 14 	call	0x28fa	; 0x28fa <process_action>
                        tapping_key = *keyp;
    33b0:	86 e0       	ldi	r24, 0x06	; 6
    33b2:	f8 01       	movw	r30, r16
    33b4:	a2 ea       	ldi	r26, 0xA2	; 162
    33b6:	b1 e0       	ldi	r27, 0x01	; 1
    33b8:	01 90       	ld	r0, Z+
    33ba:	0d 92       	st	X+, r0
    33bc:	8a 95       	dec	r24
    33be:	e1 f7       	brne	.-8      	; 0x33b8 <process_tapping+0x2d8>
    33c0:	36 c0       	rjmp	.+108    	; 0x342e <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    33c2:	86 e0       	ldi	r24, 0x06	; 6
    33c4:	f8 01       	movw	r30, r16
    33c6:	a2 ea       	ldi	r26, 0xA2	; 162
    33c8:	b1 e0       	ldi	r27, 0x01	; 1
    33ca:	01 90       	ld	r0, Z+
    33cc:	0d 92       	st	X+, r0
    33ce:	8a 95       	dec	r24
    33d0:	e1 f7       	brne	.-8      	; 0x33ca <process_tapping+0x2ea>
                        return true;
    33d2:	63 c0       	rjmp	.+198    	; 0x349a <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    33d4:	4d 87       	std	Y+13, r20	; 0x0d
    33d6:	5e 87       	std	Y+14, r21	; 0x0e
    33d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33da:	9e 85       	ldd	r25, Y+14	; 0x0e
    33dc:	0e 94 99 17 	call	0x2f32	; 0x2f32 <is_tap_key>
    33e0:	88 23       	and	r24, r24
    33e2:	79 f0       	breq	.+30     	; 0x3402 <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    33e4:	86 e0       	ldi	r24, 0x06	; 6
    33e6:	f8 01       	movw	r30, r16
    33e8:	a2 ea       	ldi	r26, 0xA2	; 162
    33ea:	b1 e0       	ldi	r27, 0x01	; 1
    33ec:	01 90       	ld	r0, Z+
    33ee:	0d 92       	st	X+, r0
    33f0:	8a 95       	dec	r24
    33f2:	e1 f7       	brne	.-8      	; 0x33ec <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    33f4:	0e 94 08 18 	call	0x3010	; 0x3010 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    33f8:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <debug_tapping_key>
                    return true;
    33fc:	dd 24       	eor	r13, r13
    33fe:	d3 94       	inc	r13
    3400:	4c c0       	rjmp	.+152    	; 0x349a <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    3402:	80 91 a7 01 	lds	r24, 0x01A7
    3406:	81 60       	ori	r24, 0x01	; 1
    3408:	80 93 a7 01 	sts	0x01A7, r24
                    process_action(keyp);
    340c:	c8 01       	movw	r24, r16
    340e:	0e 94 7d 14 	call	0x28fa	; 0x28fa <process_action>
                    return true;
    3412:	43 c0       	rjmp	.+134    	; 0x349a <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    3414:	7e 2d       	mov	r23, r14
    3416:	f9 8a       	std	Y+17, r15	; 0x11
    3418:	e8 8a       	std	Y+16, r14	; 0x10
    341a:	89 89       	ldd	r24, Y+17	; 0x11
    341c:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <debug_event>
            tapping_key = (keyrecord_t){};
    3420:	e2 ea       	ldi	r30, 0xA2	; 162
    3422:	f1 e0       	ldi	r31, 0x01	; 1
    3424:	86 e0       	ldi	r24, 0x06	; 6
    3426:	df 01       	movw	r26, r30
    3428:	1d 92       	st	X+, r1
    342a:	8a 95       	dec	r24
    342c:	e9 f7       	brne	.-6      	; 0x3428 <process_tapping+0x348>
            debug_tapping_key();
    342e:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <debug_tapping_key>
            return false;
    3432:	33 c0       	rjmp	.+102    	; 0x349a <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    3434:	66 23       	and	r22, r22
    3436:	09 f4       	brne	.+2      	; 0x343a <process_tapping+0x35a>
    3438:	39 cf       	rjmp	.-398    	; 0x32ac <process_tapping+0x1cc>
    343a:	4d 87       	std	Y+13, r20	; 0x0d
    343c:	5e 87       	std	Y+14, r21	; 0x0e
    343e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3440:	9e 85       	ldd	r25, Y+14	; 0x0e
    3442:	0e 94 99 17 	call	0x2f32	; 0x2f32 <is_tap_key>
    3446:	88 23       	and	r24, r24
    3448:	09 f4       	brne	.+2      	; 0x344c <process_tapping+0x36c>
    344a:	30 cf       	rjmp	.-416    	; 0x32ac <process_tapping+0x1cc>
    344c:	cb cf       	rjmp	.-106    	; 0x33e4 <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    344e:	4d 87       	std	Y+13, r20	; 0x0d
    3450:	5e 87       	std	Y+14, r21	; 0x0e
    3452:	8d 85       	ldd	r24, Y+13	; 0x0d
    3454:	9e 85       	ldd	r25, Y+14	; 0x0e
    3456:	0e 94 b6 1c 	call	0x396c	; 0x396c <layer_switch_get_action>
                    switch (action.kind.id) {
    345a:	29 2f       	mov	r18, r25
    345c:	22 95       	swap	r18
    345e:	2f 70       	andi	r18, 0x0F	; 15
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	22 30       	cpi	r18, 0x02	; 2
    3464:	31 05       	cpc	r19, r1
    3466:	2c f4       	brge	.+10     	; 0x3472 <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3468:	9f 70       	andi	r25, 0x0F	; 15
    346a:	41 f0       	breq	.+16     	; 0x347c <process_tapping+0x39c>
    346c:	81 11       	cpse	r24, r1
    346e:	06 c0       	rjmp	.+12     	; 0x347c <process_tapping+0x39c>
    3470:	0c c0       	rjmp	.+24     	; 0x348a <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    3472:	24 30       	cpi	r18, 0x04	; 4
    3474:	31 05       	cpc	r19, r1
    3476:	2c f4       	brge	.+10     	; 0x3482 <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    3478:	9f 70       	andi	r25, 0x0F	; 15
    347a:	49 f4       	brne	.+18     	; 0x348e <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    347c:	80 5e       	subi	r24, 0xE0	; 224
    347e:	88 30       	cpi	r24, 0x08	; 8
    3480:	20 f0       	brcs	.+8      	; 0x348a <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    3482:	c8 01       	movw	r24, r16
    3484:	0e 94 7d 14 	call	0x28fa	; 0x28fa <process_action>
                    return true;
    3488:	cf 2c       	mov	r12, r15
    348a:	dc 2c       	mov	r13, r12
    348c:	06 c0       	rjmp	.+12     	; 0x349a <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    348e:	d8 01       	movw	r26, r16
    3490:	15 96       	adiw	r26, 0x05	; 5
    3492:	9c 91       	ld	r25, X
    3494:	90 7f       	andi	r25, 0xF0	; 240
    3496:	91 f7       	brne	.-28     	; 0x347c <process_tapping+0x39c>
    3498:	f8 cf       	rjmp	.-16     	; 0x348a <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    349a:	8d 2d       	mov	r24, r13
    349c:	62 96       	adiw	r28, 0x12	; 18
    349e:	0f b6       	in	r0, 0x3f	; 63
    34a0:	f8 94       	cli
    34a2:	de bf       	out	0x3e, r29	; 62
    34a4:	0f be       	out	0x3f, r0	; 63
    34a6:	cd bf       	out	0x3d, r28	; 61
    34a8:	df 91       	pop	r29
    34aa:	cf 91       	pop	r28
    34ac:	1f 91       	pop	r17
    34ae:	0f 91       	pop	r16
    34b0:	ff 90       	pop	r15
    34b2:	ef 90       	pop	r14
    34b4:	df 90       	pop	r13
    34b6:	cf 90       	pop	r12
    34b8:	08 95       	ret

000034ba <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    34ba:	1f 93       	push	r17
    34bc:	cf 93       	push	r28
    34be:	df 93       	push	r29
    34c0:	cd b7       	in	r28, 0x3d	; 61
    34c2:	de b7       	in	r29, 0x3e	; 62
    34c4:	2c 97       	sbiw	r28, 0x0c	; 12
    34c6:	0f b6       	in	r0, 0x3f	; 63
    34c8:	f8 94       	cli
    34ca:	de bf       	out	0x3e, r29	; 62
    34cc:	0f be       	out	0x3f, r0	; 63
    34ce:	cd bf       	out	0x3d, r28	; 61
    34d0:	4f 83       	std	Y+7, r20	; 0x07
    34d2:	58 87       	std	Y+8, r21	; 0x08
    34d4:	69 87       	std	Y+9, r22	; 0x09
    34d6:	7a 87       	std	Y+10, r23	; 0x0a
    34d8:	8b 87       	std	Y+11, r24	; 0x0b
    34da:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    34dc:	ce 01       	movw	r24, r28
    34de:	07 96       	adiw	r24, 0x07	; 7
    34e0:	0e 94 70 18 	call	0x30e0	; 0x30e0 <process_tapping>
    34e4:	88 23       	and	r24, r24
    34e6:	c1 f0       	breq	.+48     	; 0x3518 <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    34e8:	2f 81       	ldd	r18, Y+7	; 0x07
    34ea:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    34ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    34ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    34f0:	89 2b       	or	r24, r25
    34f2:	31 f0       	breq	.+12     	; 0x3500 <action_tapping_process+0x46>
    34f4:	3f 3f       	cpi	r19, 0xFF	; 255
    34f6:	11 f0       	breq	.+4      	; 0x34fc <action_tapping_process+0x42>
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	03 c0       	rjmp	.+6      	; 0x3502 <action_tapping_process+0x48>
    34fc:	2f 3f       	cpi	r18, 0xFF	; 255
    34fe:	e1 f7       	brne	.-8      	; 0x34f8 <action_tapping_process+0x3e>
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	81 11       	cpse	r24, r1
    3504:	47 c0       	rjmp	.+142    	; 0x3594 <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    3506:	4f 81       	ldd	r20, Y+7	; 0x07
    3508:	58 85       	ldd	r21, Y+8	; 0x08
    350a:	69 85       	ldd	r22, Y+9	; 0x09
    350c:	7a 85       	ldd	r23, Y+10	; 0x0a
    350e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3510:	9c 85       	ldd	r25, Y+12	; 0x0c
    3512:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <debug_record>
    3516:	3e c0       	rjmp	.+124    	; 0x3594 <action_tapping_process+0xda>
    3518:	86 e0       	ldi	r24, 0x06	; 6
    351a:	fe 01       	movw	r30, r28
    351c:	37 96       	adiw	r30, 0x07	; 7
    351e:	de 01       	movw	r26, r28
    3520:	11 96       	adiw	r26, 0x01	; 1
    3522:	01 90       	ld	r0, Z+
    3524:	0d 92       	st	X+, r0
    3526:	8a 95       	dec	r24
    3528:	e1 f7       	brne	.-8      	; 0x3522 <action_tapping_process+0x68>
    352a:	ff 81       	ldd	r31, Y+7	; 0x07
    352c:	e8 85       	ldd	r30, Y+8	; 0x08
    352e:	4a 85       	ldd	r20, Y+10	; 0x0a
    3530:	5b 85       	ldd	r21, Y+11	; 0x0b
    3532:	41 15       	cp	r20, r1
    3534:	51 05       	cpc	r21, r1
    3536:	31 f0       	breq	.+12     	; 0x3544 <action_tapping_process+0x8a>
    3538:	ef 3f       	cpi	r30, 0xFF	; 255
    353a:	31 f4       	brne	.+12     	; 0x3548 <action_tapping_process+0x8e>
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	ff 3f       	cpi	r31, 0xFF	; 255
    3540:	19 f4       	brne	.+6      	; 0x3548 <action_tapping_process+0x8e>
    3542:	03 c0       	rjmp	.+6      	; 0x354a <action_tapping_process+0x90>
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	01 c0       	rjmp	.+2      	; 0x354a <action_tapping_process+0x90>
    3548:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    354a:	80 fd       	sbrc	r24, 0
    354c:	23 c0       	rjmp	.+70     	; 0x3594 <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    354e:	20 91 71 01 	lds	r18, 0x0171
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	c9 01       	movw	r24, r18
    3556:	01 96       	adiw	r24, 0x01	; 1
    3558:	87 70       	andi	r24, 0x07	; 7
    355a:	99 27       	eor	r25, r25
    355c:	60 91 70 01 	lds	r22, 0x0170
    3560:	70 e0       	ldi	r23, 0x00	; 0
    3562:	86 17       	cp	r24, r22
    3564:	97 07       	cpc	r25, r23
    3566:	f1 f1       	breq	.+124    	; 0x35e4 <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3568:	f9 83       	std	Y+1, r31	; 0x01
    356a:	ea 83       	std	Y+2, r30	; 0x02
    356c:	5d 83       	std	Y+5, r21	; 0x05
    356e:	4c 83       	std	Y+4, r20	; 0x04
    3570:	96 e0       	ldi	r25, 0x06	; 6
    3572:	92 9f       	mul	r25, r18
    3574:	d0 01       	movw	r26, r0
    3576:	93 9f       	mul	r25, r19
    3578:	b0 0d       	add	r27, r0
    357a:	11 24       	eor	r1, r1
    357c:	ae 58       	subi	r26, 0x8E	; 142
    357e:	be 4f       	sbci	r27, 0xFE	; 254
    3580:	fe 01       	movw	r30, r28
    3582:	31 96       	adiw	r30, 0x01	; 1
    3584:	01 90       	ld	r0, Z+
    3586:	0d 92       	st	X+, r0
    3588:	9a 95       	dec	r25
    358a:	e1 f7       	brne	.-8      	; 0x3584 <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    358c:	80 93 71 01 	sts	0x0171, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3590:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    3594:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    3596:	80 91 70 01 	lds	r24, 0x0170
    359a:	90 91 71 01 	lds	r25, 0x0171
    359e:	89 17       	cp	r24, r25
    35a0:	79 f1       	breq	.+94     	; 0x3600 <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    35a2:	18 9f       	mul	r17, r24
    35a4:	c0 01       	movw	r24, r0
    35a6:	11 24       	eor	r1, r1
    35a8:	8e 58       	subi	r24, 0x8E	; 142
    35aa:	9e 4f       	sbci	r25, 0xFE	; 254
    35ac:	0e 94 70 18 	call	0x30e0	; 0x30e0 <process_tapping>
    35b0:	88 23       	and	r24, r24
    35b2:	31 f1       	breq	.+76     	; 0x3600 <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    35b4:	e0 91 70 01 	lds	r30, 0x0170
    35b8:	1e 9f       	mul	r17, r30
    35ba:	f0 01       	movw	r30, r0
    35bc:	11 24       	eor	r1, r1
    35be:	ee 58       	subi	r30, 0x8E	; 142
    35c0:	fe 4f       	sbci	r31, 0xFE	; 254
    35c2:	40 81       	ld	r20, Z
    35c4:	51 81       	ldd	r21, Z+1	; 0x01
    35c6:	62 81       	ldd	r22, Z+2	; 0x02
    35c8:	73 81       	ldd	r23, Z+3	; 0x03
    35ca:	84 81       	ldd	r24, Z+4	; 0x04
    35cc:	95 81       	ldd	r25, Z+5	; 0x05
    35ce:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    35d2:	80 91 70 01 	lds	r24, 0x0170
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	01 96       	adiw	r24, 0x01	; 1
    35da:	87 70       	andi	r24, 0x07	; 7
    35dc:	99 27       	eor	r25, r25
    35de:	80 93 70 01 	sts	0x0170, r24
    35e2:	d9 cf       	rjmp	.-78     	; 0x3596 <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    35e4:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    35e8:	10 92 71 01 	sts	0x0171, r1
    waiting_buffer_tail = 0;
    35ec:	10 92 70 01 	sts	0x0170, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    35f0:	e2 ea       	ldi	r30, 0xA2	; 162
    35f2:	f1 e0       	ldi	r31, 0x01	; 1
    35f4:	86 e0       	ldi	r24, 0x06	; 6
    35f6:	df 01       	movw	r26, r30
    35f8:	1d 92       	st	X+, r1
    35fa:	8a 95       	dec	r24
    35fc:	e9 f7       	brne	.-6      	; 0x35f8 <action_tapping_process+0x13e>
    35fe:	ca cf       	rjmp	.-108    	; 0x3594 <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    3600:	2c 96       	adiw	r28, 0x0c	; 12
    3602:	0f b6       	in	r0, 0x3f	; 63
    3604:	f8 94       	cli
    3606:	de bf       	out	0x3e, r29	; 62
    3608:	0f be       	out	0x3f, r0	; 63
    360a:	cd bf       	out	0x3d, r28	; 61
    360c:	df 91       	pop	r29
    360e:	cf 91       	pop	r28
    3610:	1f 91       	pop	r17
    3612:	08 95       	ret

00003614 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3614:	ef 92       	push	r14
    3616:	ff 92       	push	r15
    3618:	0f 93       	push	r16
    361a:	1f 93       	push	r17
    361c:	cf 93       	push	r28
    361e:	df 93       	push	r29
    3620:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    3622:	00 97       	sbiw	r24, 0x00	; 0
    3624:	09 f4       	brne	.+2      	; 0x3628 <action_macro_play+0x14>
    3626:	6d c0       	rjmp	.+218    	; 0x3702 <action_macro_play+0xee>
    3628:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    362a:	ee 24       	eor	r14, r14
    362c:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    362e:	ef 01       	movw	r28, r30
    3630:	21 96       	adiw	r28, 0x01	; 1
    3632:	84 91       	lpm	r24, Z
    3634:	84 37       	cpi	r24, 0x74	; 116
    3636:	40 f4       	brcc	.+16     	; 0x3648 <action_macro_play+0x34>
    3638:	84 30       	cpi	r24, 0x04	; 4
    363a:	08 f0       	brcs	.+2      	; 0x363e <action_macro_play+0x2a>
    363c:	53 c0       	rjmp	.+166    	; 0x36e4 <action_macro_play+0xd0>
    363e:	81 30       	cpi	r24, 0x01	; 1
    3640:	81 f0       	breq	.+32     	; 0x3662 <action_macro_play+0x4e>
    3642:	82 30       	cpi	r24, 0x02	; 2
    3644:	21 f1       	breq	.+72     	; 0x368e <action_macro_play+0x7a>
    3646:	5d c0       	rjmp	.+186    	; 0x3702 <action_macro_play+0xee>
    3648:	85 37       	cpi	r24, 0x75	; 117
    364a:	09 f4       	brne	.+2      	; 0x364e <action_macro_play+0x3a>
    364c:	45 c0       	rjmp	.+138    	; 0x36d8 <action_macro_play+0xc4>
    364e:	b0 f1       	brcs	.+108    	; 0x36bc <action_macro_play+0xa8>
    3650:	9c e7       	ldi	r25, 0x7C	; 124
    3652:	98 0f       	add	r25, r24
    3654:	90 37       	cpi	r25, 0x70	; 112
    3656:	08 f0       	brcs	.+2      	; 0x365a <action_macro_play+0x46>
    3658:	54 c0       	rjmp	.+168    	; 0x3702 <action_macro_play+0xee>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    365a:	8f 77       	andi	r24, 0x7F	; 127
    365c:	0e 94 20 14 	call	0x2840	; 0x2840 <unregister_code>
                break;
    3660:	43 c0       	rjmp	.+134    	; 0x36e8 <action_macro_play+0xd4>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    3662:	8f 01       	movw	r16, r30
    3664:	0e 5f       	subi	r16, 0xFE	; 254
    3666:	1f 4f       	sbci	r17, 0xFF	; 255
    3668:	fe 01       	movw	r30, r28
    366a:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    366c:	90 e2       	ldi	r25, 0x20	; 32
    366e:	98 0f       	add	r25, r24
    3670:	98 30       	cpi	r25, 0x08	; 8
    3672:	50 f4       	brcc	.+20     	; 0x3688 <action_macro_play+0x74>
                    add_weak_mods(MOD_BIT(macro));
    3674:	87 70       	andi	r24, 0x07	; 7
    3676:	fe 2d       	mov	r31, r14
    3678:	01 c0       	rjmp	.+2      	; 0x367c <action_macro_play+0x68>
    367a:	ff 0f       	add	r31, r31
    367c:	8a 95       	dec	r24
    367e:	ea f7       	brpl	.-6      	; 0x367a <action_macro_play+0x66>
    3680:	8f 2f       	mov	r24, r31
    3682:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <add_weak_mods>
    3686:	15 c0       	rjmp	.+42     	; 0x36b2 <action_macro_play+0x9e>
                } else {
                    register_code(macro);
    3688:	0e 94 58 13 	call	0x26b0	; 0x26b0 <register_code>
    368c:	12 c0       	rjmp	.+36     	; 0x36b2 <action_macro_play+0x9e>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    368e:	8f 01       	movw	r16, r30
    3690:	0e 5f       	subi	r16, 0xFE	; 254
    3692:	1f 4f       	sbci	r17, 0xFF	; 255
    3694:	fe 01       	movw	r30, r28
    3696:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3698:	90 e2       	ldi	r25, 0x20	; 32
    369a:	98 0f       	add	r25, r24
    369c:	98 30       	cpi	r25, 0x08	; 8
    369e:	58 f4       	brcc	.+22     	; 0x36b6 <action_macro_play+0xa2>
                    del_weak_mods(MOD_BIT(macro));
    36a0:	87 70       	andi	r24, 0x07	; 7
    36a2:	fe 2d       	mov	r31, r14
    36a4:	01 c0       	rjmp	.+2      	; 0x36a8 <action_macro_play+0x94>
    36a6:	ff 0f       	add	r31, r31
    36a8:	8a 95       	dec	r24
    36aa:	ea f7       	brpl	.-6      	; 0x36a6 <action_macro_play+0x92>
    36ac:	8f 2f       	mov	r24, r31
    36ae:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <del_weak_mods>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    36b2:	e8 01       	movw	r28, r16
    36b4:	19 c0       	rjmp	.+50     	; 0x36e8 <action_macro_play+0xd4>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                } else {
                    unregister_code(macro);
    36b6:	0e 94 20 14 	call	0x2840	; 0x2840 <unregister_code>
    36ba:	fb cf       	rjmp	.-10     	; 0x36b2 <action_macro_play+0x9e>
                }
                break;
            case WAIT:
                MACRO_READ();
    36bc:	cf 01       	movw	r24, r30
    36be:	02 96       	adiw	r24, 0x02	; 2
    36c0:	fe 01       	movw	r30, r28
    36c2:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    36c4:	cc 23       	and	r28, r28
    36c6:	61 f0       	breq	.+24     	; 0x36e0 <action_macro_play+0xcc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    36c8:	ef e9       	ldi	r30, 0x9F	; 159
    36ca:	ff e0       	ldi	r31, 0x0F	; 15
    36cc:	31 97       	sbiw	r30, 0x01	; 1
    36ce:	f1 f7       	brne	.-4      	; 0x36cc <action_macro_play+0xb8>
    36d0:	00 c0       	rjmp	.+0      	; 0x36d2 <action_macro_play+0xbe>
    36d2:	00 00       	nop
    36d4:	c1 50       	subi	r28, 0x01	; 1
    36d6:	f6 cf       	rjmp	.-20     	; 0x36c4 <action_macro_play+0xb0>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    36d8:	cf 01       	movw	r24, r30
    36da:	02 96       	adiw	r24, 0x02	; 2
    36dc:	fe 01       	movw	r30, r28
    36de:	f4 90       	lpm	r15, Z
    36e0:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    36e2:	02 c0       	rjmp	.+4      	; 0x36e8 <action_macro_play+0xd4>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    36e4:	0e 94 58 13 	call	0x26b0	; 0x26b0 <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    36e8:	8f 2d       	mov	r24, r15
    36ea:	88 23       	and	r24, r24
    36ec:	41 f0       	breq	.+16     	; 0x36fe <action_macro_play+0xea>
    36ee:	ef e9       	ldi	r30, 0x9F	; 159
    36f0:	ff e0       	ldi	r31, 0x0F	; 15
    36f2:	31 97       	sbiw	r30, 0x01	; 1
    36f4:	f1 f7       	brne	.-4      	; 0x36f2 <action_macro_play+0xde>
    36f6:	00 c0       	rjmp	.+0      	; 0x36f8 <action_macro_play+0xe4>
    36f8:	00 00       	nop
    36fa:	81 50       	subi	r24, 0x01	; 1
    36fc:	f6 cf       	rjmp	.-20     	; 0x36ea <action_macro_play+0xd6>
    36fe:	fe 01       	movw	r30, r28
    3700:	96 cf       	rjmp	.-212    	; 0x362e <action_macro_play+0x1a>
    }
}
    3702:	df 91       	pop	r29
    3704:	cf 91       	pop	r28
    3706:	1f 91       	pop	r17
    3708:	0f 91       	pop	r16
    370a:	ff 90       	pop	r15
    370c:	ef 90       	pop	r14
    370e:	08 95       	ret

00003710 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    3710:	08 95       	ret

00003712 <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3712:	60 93 ac 01 	sts	0x01AC, r22
    3716:	70 93 ad 01 	sts	0x01AD, r23
    371a:	80 93 ae 01 	sts	0x01AE, r24
    371e:	90 93 af 01 	sts	0x01AF, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3722:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <clear_keyboard_but_mods>

00003726 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3726:	0f 93       	push	r16
    3728:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    372a:	00 91 ac 01 	lds	r16, 0x01AC
    372e:	10 91 ad 01 	lds	r17, 0x01AD
    3732:	20 91 ae 01 	lds	r18, 0x01AE
    3736:	30 91 af 01 	lds	r19, 0x01AF
    373a:	06 2b       	or	r16, r22
    373c:	17 2b       	or	r17, r23
    373e:	28 2b       	or	r18, r24
    3740:	39 2b       	or	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3742:	00 93 ac 01 	sts	0x01AC, r16
    3746:	10 93 ad 01 	sts	0x01AD, r17
    374a:	20 93 ae 01 	sts	0x01AE, r18
    374e:	30 93 af 01 	sts	0x01AF, r19

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    3752:	1f 91       	pop	r17
    3754:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    3756:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <clear_keyboard_but_mods>

0000375a <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    375a:	0f 93       	push	r16
    375c:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    375e:	00 91 ac 01 	lds	r16, 0x01AC
    3762:	10 91 ad 01 	lds	r17, 0x01AD
    3766:	20 91 ae 01 	lds	r18, 0x01AE
    376a:	30 91 af 01 	lds	r19, 0x01AF
    376e:	06 23       	and	r16, r22
    3770:	17 23       	and	r17, r23
    3772:	28 23       	and	r18, r24
    3774:	39 23       	and	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3776:	00 93 ac 01 	sts	0x01AC, r16
    377a:	10 93 ad 01 	sts	0x01AD, r17
    377e:	20 93 ae 01 	sts	0x01AE, r18
    3782:	30 93 af 01 	sts	0x01AF, r19
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    3786:	1f 91       	pop	r17
    3788:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    378a:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <clear_keyboard_but_mods>

0000378e <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    378e:	0f 93       	push	r16
    3790:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    3792:	00 91 ac 01 	lds	r16, 0x01AC
    3796:	10 91 ad 01 	lds	r17, 0x01AD
    379a:	20 91 ae 01 	lds	r18, 0x01AE
    379e:	30 91 af 01 	lds	r19, 0x01AF
    37a2:	06 27       	eor	r16, r22
    37a4:	17 27       	eor	r17, r23
    37a6:	28 27       	eor	r18, r24
    37a8:	39 27       	eor	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    37aa:	00 93 ac 01 	sts	0x01AC, r16
    37ae:	10 93 ad 01 	sts	0x01AD, r17
    37b2:	20 93 ae 01 	sts	0x01AE, r18
    37b6:	30 93 af 01 	sts	0x01AF, r19
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    37ba:	1f 91       	pop	r17
    37bc:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    37be:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <clear_keyboard_but_mods>

000037c2 <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    37c2:	10 92 a8 01 	sts	0x01A8, r1
    37c6:	10 92 a9 01 	sts	0x01A9, r1
    37ca:	10 92 aa 01 	sts	0x01AA, r1
    37ce:	10 92 ab 01 	sts	0x01AB, r1
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    37d2:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <clear_keyboard_but_mods>

000037d6 <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    37d6:	41 e0       	ldi	r20, 0x01	; 1
    37d8:	50 e0       	ldi	r21, 0x00	; 0
    37da:	60 e0       	ldi	r22, 0x00	; 0
    37dc:	70 e0       	ldi	r23, 0x00	; 0
    37de:	04 c0       	rjmp	.+8      	; 0x37e8 <layer_move+0x12>
    37e0:	44 0f       	add	r20, r20
    37e2:	55 1f       	adc	r21, r21
    37e4:	66 1f       	adc	r22, r22
    37e6:	77 1f       	adc	r23, r23
    37e8:	8a 95       	dec	r24
    37ea:	d2 f7       	brpl	.-12     	; 0x37e0 <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    37ec:	40 93 a8 01 	sts	0x01A8, r20
    37f0:	50 93 a9 01 	sts	0x01A9, r21
    37f4:	60 93 aa 01 	sts	0x01AA, r22
    37f8:	70 93 ab 01 	sts	0x01AB, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    37fc:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <clear_keyboard_but_mods>

00003800 <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    3800:	41 e0       	ldi	r20, 0x01	; 1
    3802:	50 e0       	ldi	r21, 0x00	; 0
    3804:	60 e0       	ldi	r22, 0x00	; 0
    3806:	70 e0       	ldi	r23, 0x00	; 0
    3808:	04 c0       	rjmp	.+8      	; 0x3812 <layer_on+0x12>
    380a:	44 0f       	add	r20, r20
    380c:	55 1f       	adc	r21, r21
    380e:	66 1f       	adc	r22, r22
    3810:	77 1f       	adc	r23, r23
    3812:	8a 95       	dec	r24
    3814:	d2 f7       	brpl	.-12     	; 0x380a <layer_on+0xa>
    3816:	80 91 a8 01 	lds	r24, 0x01A8
    381a:	90 91 a9 01 	lds	r25, 0x01A9
    381e:	a0 91 aa 01 	lds	r26, 0x01AA
    3822:	b0 91 ab 01 	lds	r27, 0x01AB
    3826:	84 2b       	or	r24, r20
    3828:	95 2b       	or	r25, r21
    382a:	a6 2b       	or	r26, r22
    382c:	b7 2b       	or	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    382e:	80 93 a8 01 	sts	0x01A8, r24
    3832:	90 93 a9 01 	sts	0x01A9, r25
    3836:	a0 93 aa 01 	sts	0x01AA, r26
    383a:	b0 93 ab 01 	sts	0x01AB, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    383e:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <clear_keyboard_but_mods>

00003842 <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    3842:	41 e0       	ldi	r20, 0x01	; 1
    3844:	50 e0       	ldi	r21, 0x00	; 0
    3846:	60 e0       	ldi	r22, 0x00	; 0
    3848:	70 e0       	ldi	r23, 0x00	; 0
    384a:	04 c0       	rjmp	.+8      	; 0x3854 <layer_off+0x12>
    384c:	44 0f       	add	r20, r20
    384e:	55 1f       	adc	r21, r21
    3850:	66 1f       	adc	r22, r22
    3852:	77 1f       	adc	r23, r23
    3854:	8a 95       	dec	r24
    3856:	d2 f7       	brpl	.-12     	; 0x384c <layer_off+0xa>
    3858:	40 95       	com	r20
    385a:	50 95       	com	r21
    385c:	60 95       	com	r22
    385e:	70 95       	com	r23
    3860:	80 91 a8 01 	lds	r24, 0x01A8
    3864:	90 91 a9 01 	lds	r25, 0x01A9
    3868:	a0 91 aa 01 	lds	r26, 0x01AA
    386c:	b0 91 ab 01 	lds	r27, 0x01AB
    3870:	84 23       	and	r24, r20
    3872:	95 23       	and	r25, r21
    3874:	a6 23       	and	r26, r22
    3876:	b7 23       	and	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3878:	80 93 a8 01 	sts	0x01A8, r24
    387c:	90 93 a9 01 	sts	0x01A9, r25
    3880:	a0 93 aa 01 	sts	0x01AA, r26
    3884:	b0 93 ab 01 	sts	0x01AB, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3888:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <clear_keyboard_but_mods>

0000388c <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    388c:	41 e0       	ldi	r20, 0x01	; 1
    388e:	50 e0       	ldi	r21, 0x00	; 0
    3890:	60 e0       	ldi	r22, 0x00	; 0
    3892:	70 e0       	ldi	r23, 0x00	; 0
    3894:	04 c0       	rjmp	.+8      	; 0x389e <layer_invert+0x12>
    3896:	44 0f       	add	r20, r20
    3898:	55 1f       	adc	r21, r21
    389a:	66 1f       	adc	r22, r22
    389c:	77 1f       	adc	r23, r23
    389e:	8a 95       	dec	r24
    38a0:	d2 f7       	brpl	.-12     	; 0x3896 <layer_invert+0xa>
    38a2:	80 91 a8 01 	lds	r24, 0x01A8
    38a6:	90 91 a9 01 	lds	r25, 0x01A9
    38aa:	a0 91 aa 01 	lds	r26, 0x01AA
    38ae:	b0 91 ab 01 	lds	r27, 0x01AB
    38b2:	84 27       	eor	r24, r20
    38b4:	95 27       	eor	r25, r21
    38b6:	a6 27       	eor	r26, r22
    38b8:	b7 27       	eor	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    38ba:	80 93 a8 01 	sts	0x01A8, r24
    38be:	90 93 a9 01 	sts	0x01A9, r25
    38c2:	a0 93 aa 01 	sts	0x01AA, r26
    38c6:	b0 93 ab 01 	sts	0x01AB, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    38ca:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <clear_keyboard_but_mods>

000038ce <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    38ce:	0f 93       	push	r16
    38d0:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    38d2:	00 91 a8 01 	lds	r16, 0x01A8
    38d6:	10 91 a9 01 	lds	r17, 0x01A9
    38da:	20 91 aa 01 	lds	r18, 0x01AA
    38de:	30 91 ab 01 	lds	r19, 0x01AB
    38e2:	06 2b       	or	r16, r22
    38e4:	17 2b       	or	r17, r23
    38e6:	28 2b       	or	r18, r24
    38e8:	39 2b       	or	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    38ea:	00 93 a8 01 	sts	0x01A8, r16
    38ee:	10 93 a9 01 	sts	0x01A9, r17
    38f2:	20 93 aa 01 	sts	0x01AA, r18
    38f6:	30 93 ab 01 	sts	0x01AB, r19
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    38fa:	1f 91       	pop	r17
    38fc:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    38fe:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <clear_keyboard_but_mods>

00003902 <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    3902:	0f 93       	push	r16
    3904:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3906:	00 91 a8 01 	lds	r16, 0x01A8
    390a:	10 91 a9 01 	lds	r17, 0x01A9
    390e:	20 91 aa 01 	lds	r18, 0x01AA
    3912:	30 91 ab 01 	lds	r19, 0x01AB
    3916:	06 23       	and	r16, r22
    3918:	17 23       	and	r17, r23
    391a:	28 23       	and	r18, r24
    391c:	39 23       	and	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    391e:	00 93 a8 01 	sts	0x01A8, r16
    3922:	10 93 a9 01 	sts	0x01A9, r17
    3926:	20 93 aa 01 	sts	0x01AA, r18
    392a:	30 93 ab 01 	sts	0x01AB, r19
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    392e:	1f 91       	pop	r17
    3930:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3932:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <clear_keyboard_but_mods>

00003936 <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    3936:	0f 93       	push	r16
    3938:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    393a:	00 91 a8 01 	lds	r16, 0x01A8
    393e:	10 91 a9 01 	lds	r17, 0x01A9
    3942:	20 91 aa 01 	lds	r18, 0x01AA
    3946:	30 91 ab 01 	lds	r19, 0x01AB
    394a:	06 27       	eor	r16, r22
    394c:	17 27       	eor	r17, r23
    394e:	28 27       	eor	r18, r24
    3950:	39 27       	eor	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3952:	00 93 a8 01 	sts	0x01A8, r16
    3956:	10 93 a9 01 	sts	0x01A9, r17
    395a:	20 93 aa 01 	sts	0x01AA, r18
    395e:	30 93 ab 01 	sts	0x01AB, r19
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    3962:	1f 91       	pop	r17
    3964:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3966:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <clear_keyboard_but_mods>

0000396a <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    396a:	08 95       	ret

0000396c <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    396c:	cf 92       	push	r12
    396e:	df 92       	push	r13
    3970:	ef 92       	push	r14
    3972:	ff 92       	push	r15
    3974:	0f 93       	push	r16
    3976:	1f 93       	push	r17
    3978:	cf 93       	push	r28
    397a:	df 93       	push	r29
    397c:	ec 01       	movw	r28, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    397e:	c0 90 ac 01 	lds	r12, 0x01AC
    3982:	d0 90 ad 01 	lds	r13, 0x01AD
    3986:	e0 90 ae 01 	lds	r14, 0x01AE
    398a:	f0 90 af 01 	lds	r15, 0x01AF
    398e:	80 91 a8 01 	lds	r24, 0x01A8
    3992:	90 91 a9 01 	lds	r25, 0x01A9
    3996:	a0 91 aa 01 	lds	r26, 0x01AA
    399a:	b0 91 ab 01 	lds	r27, 0x01AB
    399e:	c8 2a       	or	r12, r24
    39a0:	d9 2a       	or	r13, r25
    39a2:	ea 2a       	or	r14, r26
    39a4:	fb 2a       	or	r15, r27
    39a6:	0f e1       	ldi	r16, 0x1F	; 31
    39a8:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    39aa:	b7 01       	movw	r22, r14
    39ac:	a6 01       	movw	r20, r12
    39ae:	00 2e       	mov	r0, r16
    39b0:	04 c0       	rjmp	.+8      	; 0x39ba <layer_switch_get_action+0x4e>
    39b2:	76 95       	lsr	r23
    39b4:	67 95       	ror	r22
    39b6:	57 95       	ror	r21
    39b8:	47 95       	ror	r20
    39ba:	0a 94       	dec	r0
    39bc:	d2 f7       	brpl	.-12     	; 0x39b2 <layer_switch_get_action+0x46>
    39be:	40 ff       	sbrs	r20, 0
    39c0:	07 c0       	rjmp	.+14     	; 0x39d0 <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    39c2:	be 01       	movw	r22, r28
    39c4:	80 2f       	mov	r24, r16
    39c6:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    39ca:	81 30       	cpi	r24, 0x01	; 1
    39cc:	91 05       	cpc	r25, r1
    39ce:	39 f4       	brne	.+14     	; 0x39de <layer_switch_get_action+0x72>
    39d0:	01 50       	subi	r16, 0x01	; 1
    39d2:	11 09       	sbc	r17, r1
    39d4:	50 f7       	brcc	.-44     	; 0x39aa <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    39d6:	be 01       	movw	r22, r28
    39d8:	80 e0       	ldi	r24, 0x00	; 0
    39da:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    39de:	df 91       	pop	r29
    39e0:	cf 91       	pop	r28
    39e2:	1f 91       	pop	r17
    39e4:	0f 91       	pop	r16
    39e6:	ff 90       	pop	r15
    39e8:	ef 90       	pop	r14
    39ea:	df 90       	pop	r13
    39ec:	cf 90       	pop	r12
    39ee:	08 95       	ret

000039f0 <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    39f0:	90 91 0c 01 	lds	r25, 0x010C
    39f4:	99 23       	and	r25, r25
    39f6:	41 f1       	breq	.+80     	; 0x3a48 <add_key+0x58>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    39f8:	98 2f       	mov	r25, r24
    39fa:	96 95       	lsr	r25
    39fc:	96 95       	lsr	r25
    39fe:	96 95       	lsr	r25
    3a00:	9f 30       	cpi	r25, 0x0F	; 15
    3a02:	88 f4       	brcc	.+34     	; 0x3a26 <add_key+0x36>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3a04:	e0 91 0d 01 	lds	r30, 0x010D
    3a08:	f0 91 0e 01 	lds	r31, 0x010E
    3a0c:	e9 0f       	add	r30, r25
    3a0e:	f1 1d       	adc	r31, r1
    3a10:	87 70       	andi	r24, 0x07	; 7
    3a12:	21 e0       	ldi	r18, 0x01	; 1
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	01 c0       	rjmp	.+2      	; 0x3a1a <add_key+0x2a>
    3a18:	22 0f       	add	r18, r18
    3a1a:	8a 95       	dec	r24
    3a1c:	ea f7       	brpl	.-6      	; 0x3a18 <add_key+0x28>
    3a1e:	81 81       	ldd	r24, Z+1	; 0x01
    3a20:	82 2b       	or	r24, r18
    3a22:	81 83       	std	Z+1, r24	; 0x01
    3a24:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3a26:	90 91 c3 01 	lds	r25, 0x01C3
    3a2a:	90 ff       	sbrs	r25, 0
    3a2c:	2d c0       	rjmp	.+90     	; 0x3a88 <add_key+0x98>
    3a2e:	1f 92       	push	r1
    3a30:	8f 93       	push	r24
    3a32:	84 e0       	ldi	r24, 0x04	; 4
    3a34:	94 e0       	ldi	r25, 0x04	; 4
    3a36:	9f 93       	push	r25
    3a38:	8f 93       	push	r24
    3a3a:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    3a3e:	0f 90       	pop	r0
    3a40:	0f 90       	pop	r0
    3a42:	0f 90       	pop	r0
    3a44:	0f 90       	pop	r0
    3a46:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3a48:	40 91 0d 01 	lds	r20, 0x010D
    3a4c:	50 91 0e 01 	lds	r21, 0x010E
    3a50:	20 e0       	ldi	r18, 0x00	; 0
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	9f ef       	ldi	r25, 0xFF	; 255
    3a56:	fa 01       	movw	r30, r20
    3a58:	e2 0f       	add	r30, r18
    3a5a:	f3 1f       	adc	r31, r19
    3a5c:	62 81       	ldd	r22, Z+2	; 0x02
    3a5e:	68 17       	cp	r22, r24
    3a60:	99 f0       	breq	.+38     	; 0x3a88 <add_key+0x98>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3a62:	9f 3f       	cpi	r25, 0xFF	; 255
    3a64:	19 f4       	brne	.+6      	; 0x3a6c <add_key+0x7c>
    3a66:	61 11       	cpse	r22, r1
    3a68:	01 c0       	rjmp	.+2      	; 0x3a6c <add_key+0x7c>
    3a6a:	92 2f       	mov	r25, r18
    3a6c:	2f 5f       	subi	r18, 0xFF	; 255
    3a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3a70:	2e 30       	cpi	r18, 0x0E	; 14
    3a72:	31 05       	cpc	r19, r1
    3a74:	81 f7       	brne	.-32     	; 0x3a56 <add_key+0x66>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3a76:	9f 3f       	cpi	r25, 0xFF	; 255
    3a78:	39 f0       	breq	.+14     	; 0x3a88 <add_key+0x98>
            keyboard_report->keys[empty] = code;
    3a7a:	fa 01       	movw	r30, r20
    3a7c:	e9 0f       	add	r30, r25
    3a7e:	f1 1d       	adc	r31, r1
    3a80:	97 fd       	sbrc	r25, 7
    3a82:	fa 95       	dec	r31
    3a84:	82 83       	std	Z+2, r24	; 0x02
    3a86:	08 95       	ret
    3a88:	08 95       	ret

00003a8a <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    3a8a:	90 91 0c 01 	lds	r25, 0x010C
    3a8e:	99 23       	and	r25, r25
    3a90:	49 f1       	breq	.+82     	; 0x3ae4 <del_key+0x5a>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3a92:	98 2f       	mov	r25, r24
    3a94:	96 95       	lsr	r25
    3a96:	96 95       	lsr	r25
    3a98:	96 95       	lsr	r25
    3a9a:	9f 30       	cpi	r25, 0x0F	; 15
    3a9c:	90 f4       	brcc	.+36     	; 0x3ac2 <del_key+0x38>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3a9e:	e0 91 0d 01 	lds	r30, 0x010D
    3aa2:	f0 91 0e 01 	lds	r31, 0x010E
    3aa6:	e9 0f       	add	r30, r25
    3aa8:	f1 1d       	adc	r31, r1
    3aaa:	87 70       	andi	r24, 0x07	; 7
    3aac:	21 e0       	ldi	r18, 0x01	; 1
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	01 c0       	rjmp	.+2      	; 0x3ab4 <del_key+0x2a>
    3ab2:	22 0f       	add	r18, r18
    3ab4:	8a 95       	dec	r24
    3ab6:	ea f7       	brpl	.-6      	; 0x3ab2 <del_key+0x28>
    3ab8:	20 95       	com	r18
    3aba:	81 81       	ldd	r24, Z+1	; 0x01
    3abc:	28 23       	and	r18, r24
    3abe:	21 83       	std	Z+1, r18	; 0x01
    3ac0:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3ac2:	90 91 c3 01 	lds	r25, 0x01C3
    3ac6:	90 ff       	sbrs	r25, 0
    3ac8:	1f c0       	rjmp	.+62     	; 0x3b08 <del_key+0x7e>
    3aca:	1f 92       	push	r1
    3acc:	8f 93       	push	r24
    3ace:	86 ee       	ldi	r24, 0xE6	; 230
    3ad0:	93 e0       	ldi	r25, 0x03	; 3
    3ad2:	9f 93       	push	r25
    3ad4:	8f 93       	push	r24
    3ad6:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    3ada:	0f 90       	pop	r0
    3adc:	0f 90       	pop	r0
    3ade:	0f 90       	pop	r0
    3ae0:	0f 90       	pop	r0
    3ae2:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3ae4:	40 91 0d 01 	lds	r20, 0x010D
    3ae8:	50 91 0e 01 	lds	r21, 0x010E
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	fa 01       	movw	r30, r20
    3af2:	e2 0f       	add	r30, r18
    3af4:	f3 1f       	adc	r31, r19
    3af6:	92 81       	ldd	r25, Z+2	; 0x02
    3af8:	98 13       	cpse	r25, r24
    3afa:	01 c0       	rjmp	.+2      	; 0x3afe <del_key+0x74>
            keyboard_report->keys[i] = 0;
    3afc:	12 82       	std	Z+2, r1	; 0x02
    3afe:	2f 5f       	subi	r18, 0xFF	; 255
    3b00:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3b02:	2e 30       	cpi	r18, 0x0E	; 14
    3b04:	31 05       	cpc	r19, r1
    3b06:	a1 f7       	brne	.-24     	; 0x3af0 <del_key+0x66>
    3b08:	08 95       	ret

00003b0a <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3b0e:	e0 91 0d 01 	lds	r30, 0x010D
    3b12:	f0 91 0e 01 	lds	r31, 0x010E
    3b16:	e8 0f       	add	r30, r24
    3b18:	f9 1f       	adc	r31, r25
    3b1a:	10 82       	st	Z, r1
    3b1c:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3b1e:	80 31       	cpi	r24, 0x10	; 16
    3b20:	91 05       	cpc	r25, r1
    3b22:	a9 f7       	brne	.-22     	; 0x3b0e <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3b24:	08 95       	ret

00003b26 <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    3b26:	90 91 c2 01 	lds	r25, 0x01C2
    3b2a:	98 2b       	or	r25, r24
    3b2c:	90 93 c2 01 	sts	0x01C2, r25
    3b30:	08 95       	ret

00003b32 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3b32:	80 95       	com	r24
    3b34:	90 91 c2 01 	lds	r25, 0x01C2
    3b38:	98 23       	and	r25, r24
    3b3a:	90 93 c2 01 	sts	0x01C2, r25
    3b3e:	08 95       	ret

00003b40 <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    3b40:	10 92 c2 01 	sts	0x01C2, r1
    3b44:	08 95       	ret

00003b46 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3b46:	90 91 c1 01 	lds	r25, 0x01C1
    3b4a:	98 2b       	or	r25, r24
    3b4c:	90 93 c1 01 	sts	0x01C1, r25
    3b50:	08 95       	ret

00003b52 <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3b52:	80 95       	com	r24
    3b54:	90 91 c1 01 	lds	r25, 0x01C1
    3b58:	98 23       	and	r25, r24
    3b5a:	90 93 c1 01 	sts	0x01C1, r25
    3b5e:	08 95       	ret

00003b60 <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3b60:	10 92 c1 01 	sts	0x01C1, r1
    3b64:	08 95       	ret

00003b66 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3b66:	80 93 b0 01 	sts	0x01B0, r24
    3b6a:	08 95       	ret

00003b6c <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3b6c:	10 92 b0 01 	sts	0x01B0, r1
    3b70:	08 95       	ret

00003b72 <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3b72:	40 91 0d 01 	lds	r20, 0x010D
    3b76:	50 91 0e 01 	lds	r21, 0x010E
    3b7a:	20 e0       	ldi	r18, 0x00	; 0
    3b7c:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	fa 01       	movw	r30, r20
    3b82:	e2 0f       	add	r30, r18
    3b84:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3b86:	91 81       	ldd	r25, Z+1	; 0x01
    3b88:	91 11       	cpse	r25, r1
            cnt++;
    3b8a:	8f 5f       	subi	r24, 0xFF	; 255
    3b8c:	2f 5f       	subi	r18, 0xFF	; 255
    3b8e:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3b90:	2f 30       	cpi	r18, 0x0F	; 15
    3b92:	31 05       	cpc	r19, r1
    3b94:	a9 f7       	brne	.-22     	; 0x3b80 <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3b96:	08 95       	ret

00003b98 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3b98:	e0 91 0d 01 	lds	r30, 0x010D
    3b9c:	f0 91 0e 01 	lds	r31, 0x010E
    3ba0:	80 91 c2 01 	lds	r24, 0x01C2
    3ba4:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3ba6:	e0 91 0d 01 	lds	r30, 0x010D
    3baa:	f0 91 0e 01 	lds	r31, 0x010E
    3bae:	80 81       	ld	r24, Z
    3bb0:	90 91 c1 01 	lds	r25, 0x01C1
    3bb4:	89 2b       	or	r24, r25
    3bb6:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3bb8:	90 91 b0 01 	lds	r25, 0x01B0
    3bbc:	99 23       	and	r25, r25
    3bbe:	61 f0       	breq	.+24     	; 0x3bd8 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3bc0:	e0 91 0d 01 	lds	r30, 0x010D
    3bc4:	f0 91 0e 01 	lds	r31, 0x010E
    3bc8:	80 81       	ld	r24, Z
    3bca:	89 2b       	or	r24, r25
    3bcc:	80 83       	st	Z, r24
        if (has_anykey()) {
    3bce:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <has_anykey>
    3bd2:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3bd4:	10 92 b0 01 	sts	0x01B0, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3bd8:	80 91 0d 01 	lds	r24, 0x010D
    3bdc:	90 91 0e 01 	lds	r25, 0x010E
    3be0:	0c 94 c7 11 	jmp	0x238e	; 0x238e <host_keyboard_send>

00003be4 <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    3be4:	8b 3b       	cpi	r24, 0xBB	; 187
    3be6:	60 f4       	brcc	.+24     	; 0x3c00 <keycode_to_action+0x1c>
    3be8:	88 3a       	cpi	r24, 0xA8	; 168
    3bea:	00 f5       	brcc	.+64     	; 0x3c2c <keycode_to_action+0x48>
    3bec:	85 3a       	cpi	r24, 0xA5	; 165
    3bee:	a8 f4       	brcc	.+42     	; 0x3c1a <keycode_to_action+0x36>
    3bf0:	84 30       	cpi	r24, 0x04	; 4
    3bf2:	88 f4       	brcc	.+34     	; 0x3c16 <keycode_to_action+0x32>
    3bf4:	81 30       	cpi	r24, 0x01	; 1
    3bf6:	09 f0       	breq	.+2      	; 0x3bfa <keycode_to_action+0x16>
    3bf8:	55 c0       	rjmp	.+170    	; 0x3ca4 <keycode_to_action+0xc0>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    3c00:	80 3e       	cpi	r24, 0xE0	; 224
    3c02:	08 f4       	brcc	.+2      	; 0x3c06 <keycode_to_action+0x22>
    3c04:	4f c0       	rjmp	.+158    	; 0x3ca4 <keycode_to_action+0xc0>
    3c06:	88 3e       	cpi	r24, 0xE8	; 232
    3c08:	30 f0       	brcs	.+12     	; 0x3c16 <keycode_to_action+0x32>
    3c0a:	80 3f       	cpi	r24, 0xF0	; 240
    3c0c:	08 f4       	brcc	.+2      	; 0x3c10 <keycode_to_action+0x2c>
    3c0e:	4a c0       	rjmp	.+148    	; 0x3ca4 <keycode_to_action+0xc0>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	90 65       	ori	r25, 0x50	; 80
            break;
    3c14:	08 95       	ret
{
    action_t action;
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3c16:	90 e0       	ldi	r25, 0x00	; 0
            break;
    3c18:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3c1a:	85 3a       	cpi	r24, 0xA5	; 165
    3c1c:	09 f4       	brne	.+2      	; 0x3c20 <keycode_to_action+0x3c>
    3c1e:	45 c0       	rjmp	.+138    	; 0x3caa <keycode_to_action+0xc6>
    3c20:	86 3a       	cpi	r24, 0xA6	; 166
    3c22:	09 f0       	breq	.+2      	; 0x3c26 <keycode_to_action+0x42>
    3c24:	45 c0       	rjmp	.+138    	; 0x3cb0 <keycode_to_action+0xcc>
    3c26:	82 e8       	ldi	r24, 0x82	; 130
    3c28:	90 e4       	ldi	r25, 0x40	; 64
    3c2a:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3c2c:	88 3a       	cpi	r24, 0xA8	; 168
    3c2e:	09 f4       	brne	.+2      	; 0x3c32 <keycode_to_action+0x4e>
    3c30:	42 c0       	rjmp	.+132    	; 0x3cb6 <keycode_to_action+0xd2>
    3c32:	89 3a       	cpi	r24, 0xA9	; 169
    3c34:	09 f4       	brne	.+2      	; 0x3c38 <keycode_to_action+0x54>
    3c36:	42 c0       	rjmp	.+132    	; 0x3cbc <keycode_to_action+0xd8>
    3c38:	8a 3a       	cpi	r24, 0xAA	; 170
    3c3a:	09 f4       	brne	.+2      	; 0x3c3e <keycode_to_action+0x5a>
    3c3c:	42 c0       	rjmp	.+132    	; 0x3cc2 <keycode_to_action+0xde>
    3c3e:	8b 3a       	cpi	r24, 0xAB	; 171
    3c40:	09 f4       	brne	.+2      	; 0x3c44 <keycode_to_action+0x60>
    3c42:	42 c0       	rjmp	.+132    	; 0x3cc8 <keycode_to_action+0xe4>
    3c44:	8c 3a       	cpi	r24, 0xAC	; 172
    3c46:	09 f4       	brne	.+2      	; 0x3c4a <keycode_to_action+0x66>
    3c48:	42 c0       	rjmp	.+132    	; 0x3cce <keycode_to_action+0xea>
    3c4a:	8d 3a       	cpi	r24, 0xAD	; 173
    3c4c:	09 f4       	brne	.+2      	; 0x3c50 <keycode_to_action+0x6c>
    3c4e:	42 c0       	rjmp	.+132    	; 0x3cd4 <keycode_to_action+0xf0>
    3c50:	80 3b       	cpi	r24, 0xB0	; 176
    3c52:	09 f4       	brne	.+2      	; 0x3c56 <keycode_to_action+0x72>
    3c54:	42 c0       	rjmp	.+132    	; 0x3cda <keycode_to_action+0xf6>
    3c56:	8e 3a       	cpi	r24, 0xAE	; 174
    3c58:	09 f4       	brne	.+2      	; 0x3c5c <keycode_to_action+0x78>
    3c5a:	42 c0       	rjmp	.+132    	; 0x3ce0 <keycode_to_action+0xfc>
    3c5c:	8f 3a       	cpi	r24, 0xAF	; 175
    3c5e:	09 f4       	brne	.+2      	; 0x3c62 <keycode_to_action+0x7e>
    3c60:	42 c0       	rjmp	.+132    	; 0x3ce6 <keycode_to_action+0x102>
    3c62:	81 3b       	cpi	r24, 0xB1	; 177
    3c64:	09 f4       	brne	.+2      	; 0x3c68 <keycode_to_action+0x84>
    3c66:	42 c0       	rjmp	.+132    	; 0x3cec <keycode_to_action+0x108>
    3c68:	82 3b       	cpi	r24, 0xB2	; 178
    3c6a:	09 f4       	brne	.+2      	; 0x3c6e <keycode_to_action+0x8a>
    3c6c:	42 c0       	rjmp	.+132    	; 0x3cf2 <keycode_to_action+0x10e>
    3c6e:	83 3b       	cpi	r24, 0xB3	; 179
    3c70:	09 f4       	brne	.+2      	; 0x3c74 <keycode_to_action+0x90>
    3c72:	42 c0       	rjmp	.+132    	; 0x3cf8 <keycode_to_action+0x114>
    3c74:	84 3b       	cpi	r24, 0xB4	; 180
    3c76:	09 f4       	brne	.+2      	; 0x3c7a <keycode_to_action+0x96>
    3c78:	42 c0       	rjmp	.+132    	; 0x3cfe <keycode_to_action+0x11a>
    3c7a:	85 3b       	cpi	r24, 0xB5	; 181
    3c7c:	09 f4       	brne	.+2      	; 0x3c80 <keycode_to_action+0x9c>
    3c7e:	42 c0       	rjmp	.+132    	; 0x3d04 <keycode_to_action+0x120>
    3c80:	86 3b       	cpi	r24, 0xB6	; 182
    3c82:	09 f4       	brne	.+2      	; 0x3c86 <keycode_to_action+0xa2>
    3c84:	42 c0       	rjmp	.+132    	; 0x3d0a <keycode_to_action+0x126>
    3c86:	87 3b       	cpi	r24, 0xB7	; 183
    3c88:	09 f4       	brne	.+2      	; 0x3c8c <keycode_to_action+0xa8>
    3c8a:	42 c0       	rjmp	.+132    	; 0x3d10 <keycode_to_action+0x12c>
    3c8c:	88 3b       	cpi	r24, 0xB8	; 184
    3c8e:	09 f4       	brne	.+2      	; 0x3c92 <keycode_to_action+0xae>
    3c90:	42 c0       	rjmp	.+132    	; 0x3d16 <keycode_to_action+0x132>
    3c92:	89 3b       	cpi	r24, 0xB9	; 185
    3c94:	09 f4       	brne	.+2      	; 0x3c98 <keycode_to_action+0xb4>
    3c96:	42 c0       	rjmp	.+132    	; 0x3d1c <keycode_to_action+0x138>
    3c98:	8a 3b       	cpi	r24, 0xBA	; 186
    3c9a:	09 f0       	breq	.+2      	; 0x3c9e <keycode_to_action+0xba>
    3c9c:	42 c0       	rjmp	.+132    	; 0x3d22 <keycode_to_action+0x13e>
    3c9e:	8a e2       	ldi	r24, 0x2A	; 42
    3ca0:	96 e4       	ldi	r25, 0x46	; 70
    3ca2:	08 95       	ret
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        default:
            action.code = ACTION_NO;
    3ca4:	80 e0       	ldi	r24, 0x00	; 0
    3ca6:	90 e0       	ldi	r25, 0x00	; 0
    3ca8:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3caa:	81 e8       	ldi	r24, 0x81	; 129
    3cac:	90 e4       	ldi	r25, 0x40	; 64
    3cae:	08 95       	ret
    3cb0:	83 e8       	ldi	r24, 0x83	; 131
    3cb2:	90 e4       	ldi	r25, 0x40	; 64
    3cb4:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3cb6:	82 ee       	ldi	r24, 0xE2	; 226
    3cb8:	94 e4       	ldi	r25, 0x44	; 68
    3cba:	08 95       	ret
    3cbc:	89 ee       	ldi	r24, 0xE9	; 233
    3cbe:	94 e4       	ldi	r25, 0x44	; 68
    3cc0:	08 95       	ret
    3cc2:	8a ee       	ldi	r24, 0xEA	; 234
    3cc4:	94 e4       	ldi	r25, 0x44	; 68
    3cc6:	08 95       	ret
    3cc8:	85 eb       	ldi	r24, 0xB5	; 181
    3cca:	94 e4       	ldi	r25, 0x44	; 68
    3ccc:	08 95       	ret
    3cce:	86 eb       	ldi	r24, 0xB6	; 182
    3cd0:	94 e4       	ldi	r25, 0x44	; 68
    3cd2:	08 95       	ret
    3cd4:	87 eb       	ldi	r24, 0xB7	; 183
    3cd6:	94 e4       	ldi	r25, 0x44	; 68
    3cd8:	08 95       	ret
    3cda:	8c ec       	ldi	r24, 0xCC	; 204
    3cdc:	94 e4       	ldi	r25, 0x44	; 68
    3cde:	08 95       	ret
    3ce0:	8d ec       	ldi	r24, 0xCD	; 205
    3ce2:	94 e4       	ldi	r25, 0x44	; 68
    3ce4:	08 95       	ret
    3ce6:	83 e8       	ldi	r24, 0x83	; 131
    3ce8:	95 e4       	ldi	r25, 0x45	; 69
    3cea:	08 95       	ret
    3cec:	8a e8       	ldi	r24, 0x8A	; 138
    3cee:	95 e4       	ldi	r25, 0x45	; 69
    3cf0:	08 95       	ret
    3cf2:	82 e9       	ldi	r24, 0x92	; 146
    3cf4:	95 e4       	ldi	r25, 0x45	; 69
    3cf6:	08 95       	ret
    3cf8:	84 e9       	ldi	r24, 0x94	; 148
    3cfa:	95 e4       	ldi	r25, 0x45	; 69
    3cfc:	08 95       	ret
    3cfe:	81 e2       	ldi	r24, 0x21	; 33
    3d00:	96 e4       	ldi	r25, 0x46	; 70
    3d02:	08 95       	ret
    3d04:	83 e2       	ldi	r24, 0x23	; 35
    3d06:	96 e4       	ldi	r25, 0x46	; 70
    3d08:	08 95       	ret
    3d0a:	84 e2       	ldi	r24, 0x24	; 36
    3d0c:	96 e4       	ldi	r25, 0x46	; 70
    3d0e:	08 95       	ret
    3d10:	85 e2       	ldi	r24, 0x25	; 37
    3d12:	96 e4       	ldi	r25, 0x46	; 70
    3d14:	08 95       	ret
    3d16:	86 e2       	ldi	r24, 0x26	; 38
    3d18:	96 e4       	ldi	r25, 0x46	; 70
    3d1a:	08 95       	ret
    3d1c:	87 e2       	ldi	r24, 0x27	; 39
    3d1e:	96 e4       	ldi	r25, 0x46	; 70
    3d20:	08 95       	ret
    3d22:	80 e0       	ldi	r24, 0x00	; 0
    3d24:	94 e4       	ldi	r25, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    3d26:	08 95       	ret

00003d28 <action_for_key>:

/* converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3d28:	0e 94 90 08 	call	0x1120	; 0x1120 <keymap_key_to_keycode>
    switch (keycode) {
    3d2c:	80 3e       	cpi	r24, 0xE0	; 224
    3d2e:	a8 f4       	brcc	.+42     	; 0x3d5a <action_for_key+0x32>
    3d30:	80 3c       	cpi	r24, 0xC0	; 192
    3d32:	00 f5       	brcc	.+64     	; 0x3d74 <action_for_key+0x4c>
    3d34:	81 33       	cpi	r24, 0x31	; 49
    3d36:	09 f4       	brne	.+2      	; 0x3d3a <action_for_key+0x12>
    3d38:	5c c0       	rjmp	.+184    	; 0x3df2 <action_for_key+0xca>
    3d3a:	38 f4       	brcc	.+14     	; 0x3d4a <action_for_key+0x22>
    3d3c:	89 32       	cpi	r24, 0x29	; 41
    3d3e:	09 f4       	brne	.+2      	; 0x3d42 <action_for_key+0x1a>
    3d40:	52 c0       	rjmp	.+164    	; 0x3de6 <action_for_key+0xbe>
    3d42:	8a 32       	cpi	r24, 0x2A	; 42
    3d44:	09 f4       	brne	.+2      	; 0x3d48 <action_for_key+0x20>
    3d46:	5b c0       	rjmp	.+182    	; 0x3dfe <action_for_key+0xd6>
    3d48:	5f c0       	rjmp	.+190    	; 0x3e08 <action_for_key+0xe0>
    3d4a:	89 33       	cpi	r24, 0x39	; 57
    3d4c:	b1 f0       	breq	.+44     	; 0x3d7a <action_for_key+0x52>
    3d4e:	82 38       	cpi	r24, 0x82	; 130
    3d50:	a1 f0       	breq	.+40     	; 0x3d7a <action_for_key+0x52>
    3d52:	85 33       	cpi	r24, 0x35	; 53
    3d54:	09 f4       	brne	.+2      	; 0x3d58 <action_for_key+0x30>
    3d56:	41 c0       	rjmp	.+130    	; 0x3dda <action_for_key+0xb2>
    3d58:	57 c0       	rjmp	.+174    	; 0x3e08 <action_for_key+0xe0>
    3d5a:	83 3e       	cpi	r24, 0xE3	; 227
    3d5c:	41 f1       	breq	.+80     	; 0x3dae <action_for_key+0x86>
    3d5e:	28 f4       	brcc	.+10     	; 0x3d6a <action_for_key+0x42>
    3d60:	80 3e       	cpi	r24, 0xE0	; 224
    3d62:	99 f0       	breq	.+38     	; 0x3d8a <action_for_key+0x62>
    3d64:	82 3e       	cpi	r24, 0xE2	; 226
    3d66:	b9 f0       	breq	.+46     	; 0x3d96 <action_for_key+0x6e>
    3d68:	4f c0       	rjmp	.+158    	; 0x3e08 <action_for_key+0xe0>
    3d6a:	86 3e       	cpi	r24, 0xE6	; 230
    3d6c:	31 f1       	breq	.+76     	; 0x3dba <action_for_key+0x92>
    3d6e:	87 3e       	cpi	r24, 0xE7	; 231
    3d70:	71 f1       	breq	.+92     	; 0x3dce <action_for_key+0xa6>
    3d72:	4a c0       	rjmp	.+148    	; 0x3e08 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3d74:	0e 94 91 08 	call	0x1122	; 0x1122 <keymap_fn_to_action>
    3d78:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3d7a:	90 91 d8 01 	lds	r25, 0x01D8
    3d7e:	90 fd       	sbrc	r25, 0
    3d80:	02 c0       	rjmp	.+4      	; 0x3d86 <action_for_key+0x5e>
    3d82:	91 ff       	sbrs	r25, 1
    3d84:	41 c0       	rjmp	.+130    	; 0x3e08 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3d86:	80 ee       	ldi	r24, 0xE0	; 224
    3d88:	3f c0       	rjmp	.+126    	; 0x3e08 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3d8a:	80 91 d8 01 	lds	r24, 0x01D8
    3d8e:	80 ff       	sbrs	r24, 0
    3d90:	fa cf       	rjmp	.-12     	; 0x3d86 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3d92:	89 e3       	ldi	r24, 0x39	; 57
    3d94:	39 c0       	rjmp	.+114    	; 0x3e08 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3d96:	80 91 d8 01 	lds	r24, 0x01D8
    3d9a:	82 ff       	sbrs	r24, 2
    3d9c:	0c c0       	rjmp	.+24     	; 0x3db6 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3d9e:	80 91 d8 01 	lds	r24, 0x01D8
    3da2:	84 ff       	sbrs	r24, 4
    3da4:	02 c0       	rjmp	.+4      	; 0x3daa <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3da6:	80 e0       	ldi	r24, 0x00	; 0
    3da8:	2f c0       	rjmp	.+94     	; 0x3e08 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3daa:	83 ee       	ldi	r24, 0xE3	; 227
    3dac:	2d c0       	rjmp	.+90     	; 0x3e08 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3dae:	80 91 d8 01 	lds	r24, 0x01D8
    3db2:	82 ff       	sbrs	r24, 2
    3db4:	f4 cf       	rjmp	.-24     	; 0x3d9e <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3db6:	82 ee       	ldi	r24, 0xE2	; 226
    3db8:	27 c0       	rjmp	.+78     	; 0x3e08 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3dba:	80 91 d8 01 	lds	r24, 0x01D8
    3dbe:	83 ff       	sbrs	r24, 3
    3dc0:	0a c0       	rjmp	.+20     	; 0x3dd6 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3dc2:	80 91 d8 01 	lds	r24, 0x01D8
    3dc6:	84 fd       	sbrc	r24, 4
    3dc8:	ee cf       	rjmp	.-36     	; 0x3da6 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3dca:	87 ee       	ldi	r24, 0xE7	; 231
    3dcc:	1d c0       	rjmp	.+58     	; 0x3e08 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3dce:	80 91 d8 01 	lds	r24, 0x01D8
    3dd2:	83 ff       	sbrs	r24, 3
    3dd4:	f6 cf       	rjmp	.-20     	; 0x3dc2 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3dd6:	86 ee       	ldi	r24, 0xE6	; 230
    3dd8:	17 c0       	rjmp	.+46     	; 0x3e08 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3dda:	80 91 d8 01 	lds	r24, 0x01D8
    3dde:	85 ff       	sbrs	r24, 5
    3de0:	06 c0       	rjmp	.+12     	; 0x3dee <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3de2:	89 e2       	ldi	r24, 0x29	; 41
    3de4:	11 c0       	rjmp	.+34     	; 0x3e08 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3de6:	80 91 d8 01 	lds	r24, 0x01D8
    3dea:	85 ff       	sbrs	r24, 5
    3dec:	fa cf       	rjmp	.-12     	; 0x3de2 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3dee:	85 e3       	ldi	r24, 0x35	; 53
    3df0:	0b c0       	rjmp	.+22     	; 0x3e08 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3df2:	80 91 d8 01 	lds	r24, 0x01D8
    3df6:	86 ff       	sbrs	r24, 6
    3df8:	06 c0       	rjmp	.+12     	; 0x3e06 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3dfa:	8a e2       	ldi	r24, 0x2A	; 42
    3dfc:	05 c0       	rjmp	.+10     	; 0x3e08 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3dfe:	80 91 d8 01 	lds	r24, 0x01D8
    3e02:	86 ff       	sbrs	r24, 6
    3e04:	fa cf       	rjmp	.-12     	; 0x3dfa <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3e06:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3e08:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <keycode_to_action>
    }
}
    3e0c:	08 95       	ret

00003e0e <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    3e0e:	80 e0       	ldi	r24, 0x00	; 0
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	08 95       	ret

00003e14 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3e14:	08 95       	ret

00003e16 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3e16:	90 93 c6 01 	sts	0x01C6, r25
    3e1a:	80 93 c5 01 	sts	0x01C5, r24
    3e1e:	08 95       	ret

00003e20 <biton32>:
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}

uint8_t biton32(uint32_t bits)
{
    3e20:	cf 92       	push	r12
    3e22:	df 92       	push	r13
    3e24:	ef 92       	push	r14
    3e26:	ff 92       	push	r15
    3e28:	0f 93       	push	r16
    3e2a:	1f 93       	push	r17
    uint8_t n = 0;
    if (bits >>16) { bits >>=16; n +=16;}
    3e2c:	6c 01       	movw	r12, r24
    3e2e:	ee 24       	eor	r14, r14
    3e30:	ff 24       	eor	r15, r15
    3e32:	c1 14       	cp	r12, r1
    3e34:	d1 04       	cpc	r13, r1
    3e36:	e1 04       	cpc	r14, r1
    3e38:	f1 04       	cpc	r15, r1
    3e3a:	21 f4       	brne	.+8      	; 0x3e44 <biton32+0x24>
    3e3c:	6b 01       	movw	r12, r22
    3e3e:	7c 01       	movw	r14, r24
    return n;
}

uint8_t biton32(uint32_t bits)
{
    uint8_t n = 0;
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	01 c0       	rjmp	.+2      	; 0x3e46 <biton32+0x26>
    if (bits >>16) { bits >>=16; n +=16;}
    3e44:	80 e1       	ldi	r24, 0x10	; 16
    if (bits >> 8) { bits >>= 8; n += 8;}
    3e46:	33 27       	eor	r19, r19
    3e48:	2f 2d       	mov	r18, r15
    3e4a:	1e 2d       	mov	r17, r14
    3e4c:	0d 2d       	mov	r16, r13
    3e4e:	01 15       	cp	r16, r1
    3e50:	11 05       	cpc	r17, r1
    3e52:	21 05       	cpc	r18, r1
    3e54:	31 05       	cpc	r19, r1
    3e56:	19 f0       	breq	.+6      	; 0x3e5e <biton32+0x3e>
    3e58:	88 5f       	subi	r24, 0xF8	; 248
    3e5a:	68 01       	movw	r12, r16
    3e5c:	79 01       	movw	r14, r18
    if (bits >> 4) { bits >>= 4; n += 4;}
    3e5e:	97 01       	movw	r18, r14
    3e60:	86 01       	movw	r16, r12
    3e62:	a4 e0       	ldi	r26, 0x04	; 4
    3e64:	36 95       	lsr	r19
    3e66:	27 95       	ror	r18
    3e68:	17 95       	ror	r17
    3e6a:	07 95       	ror	r16
    3e6c:	aa 95       	dec	r26
    3e6e:	d1 f7       	brne	.-12     	; 0x3e64 <biton32+0x44>
    3e70:	01 15       	cp	r16, r1
    3e72:	11 05       	cpc	r17, r1
    3e74:	21 05       	cpc	r18, r1
    3e76:	31 05       	cpc	r19, r1
    3e78:	19 f0       	breq	.+6      	; 0x3e80 <biton32+0x60>
    3e7a:	8c 5f       	subi	r24, 0xFC	; 252
    3e7c:	68 01       	movw	r12, r16
    3e7e:	79 01       	movw	r14, r18
    if (bits >> 2) { bits >>= 2; n += 2;}
    3e80:	97 01       	movw	r18, r14
    3e82:	86 01       	movw	r16, r12
    3e84:	f2 e0       	ldi	r31, 0x02	; 2
    3e86:	36 95       	lsr	r19
    3e88:	27 95       	ror	r18
    3e8a:	17 95       	ror	r17
    3e8c:	07 95       	ror	r16
    3e8e:	fa 95       	dec	r31
    3e90:	d1 f7       	brne	.-12     	; 0x3e86 <biton32+0x66>
    3e92:	01 15       	cp	r16, r1
    3e94:	11 05       	cpc	r17, r1
    3e96:	21 05       	cpc	r18, r1
    3e98:	31 05       	cpc	r19, r1
    3e9a:	19 f0       	breq	.+6      	; 0x3ea2 <biton32+0x82>
    3e9c:	8e 5f       	subi	r24, 0xFE	; 254
    3e9e:	68 01       	movw	r12, r16
    3ea0:	79 01       	movw	r14, r18
    if (bits >> 1) { bits >>= 1; n += 1;}
    3ea2:	b7 01       	movw	r22, r14
    3ea4:	a6 01       	movw	r20, r12
    3ea6:	76 95       	lsr	r23
    3ea8:	67 95       	ror	r22
    3eaa:	57 95       	ror	r21
    3eac:	47 95       	ror	r20
    3eae:	45 2b       	or	r20, r21
    3eb0:	46 2b       	or	r20, r22
    3eb2:	47 2b       	or	r20, r23
    3eb4:	09 f0       	breq	.+2      	; 0x3eb8 <biton32+0x98>
    3eb6:	8f 5f       	subi	r24, 0xFF	; 255
    return n;
}
    3eb8:	1f 91       	pop	r17
    3eba:	0f 91       	pop	r16
    3ebc:	ff 90       	pop	r15
    3ebe:	ef 90       	pop	r14
    3ec0:	df 90       	pop	r13
    3ec2:	cf 90       	pop	r12
    3ec4:	08 95       	ret

00003ec6 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3ec6:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3ec8:	98 2f       	mov	r25, r24
    3eca:	9c 7c       	andi	r25, 0xCC	; 204
    3ecc:	96 95       	lsr	r25
    3ece:	96 95       	lsr	r25
    3ed0:	83 73       	andi	r24, 0x33	; 51
    3ed2:	44 e0       	ldi	r20, 0x04	; 4
    3ed4:	84 9f       	mul	r24, r20
    3ed6:	90 01       	movw	r18, r0
    3ed8:	11 24       	eor	r1, r1
    3eda:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3edc:	89 2f       	mov	r24, r25
    3ede:	8a 7a       	andi	r24, 0xAA	; 170
    3ee0:	86 95       	lsr	r24
    3ee2:	95 75       	andi	r25, 0x55	; 85
    3ee4:	99 0f       	add	r25, r25
    return bits;
}
    3ee6:	89 2b       	or	r24, r25
    3ee8:	08 95       	ret

00003eea <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3eea:	1f 93       	push	r17
    3eec:	cf 93       	push	r28
    3eee:	df 93       	push	r29
    3ef0:	1f 92       	push	r1
    3ef2:	cd b7       	in	r28, 0x3d	; 61
    3ef4:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3ef6:	99 83       	std	Y+1, r25	; 0x01
    3ef8:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <bitrev>
    3efc:	18 2f       	mov	r17, r24
    3efe:	99 81       	ldd	r25, Y+1	; 0x01
    3f00:	89 2f       	mov	r24, r25
    3f02:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <bitrev>
    3f06:	21 2f       	mov	r18, r17
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	32 2f       	mov	r19, r18
    3f0c:	22 27       	eor	r18, r18
    return bits;
}
    3f0e:	a9 01       	movw	r20, r18
    3f10:	48 2b       	or	r20, r24
    3f12:	ca 01       	movw	r24, r20
    3f14:	0f 90       	pop	r0
    3f16:	df 91       	pop	r29
    3f18:	cf 91       	pop	r28
    3f1a:	1f 91       	pop	r17
    3f1c:	08 95       	ret

00003f1e <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3f1e:	80 91 dd 01 	lds	r24, 0x01DD
    3f22:	84 30       	cpi	r24, 0x04	; 4
    3f24:	09 f1       	breq	.+66     	; 0x3f68 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3f26:	10 92 c4 01 	sts	0x01C4, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3f2a:	20 e4       	ldi	r18, 0x40	; 64
    3f2c:	88 e1       	ldi	r24, 0x18	; 24
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	0f b6       	in	r0, 0x3f	; 63
    3f32:	f8 94       	cli
    3f34:	a8 95       	wdr
    3f36:	80 93 60 00 	sts	0x0060, r24
    3f3a:	0f be       	out	0x3f, r0	; 63
    3f3c:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3f40:	83 b7       	in	r24, 0x33	; 51
    3f42:	81 7f       	andi	r24, 0xF1	; 241
    3f44:	84 60       	ori	r24, 0x04	; 4
    3f46:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3f48:	83 b7       	in	r24, 0x33	; 51
    3f4a:	81 60       	ori	r24, 0x01	; 1
    3f4c:	83 bf       	out	0x33, r24	; 51
    sei();
    3f4e:	78 94       	sei
    sleep_cpu();
    3f50:	88 95       	sleep
    sleep_disable();
    3f52:	83 b7       	in	r24, 0x33	; 51
    3f54:	8e 7f       	andi	r24, 0xFE	; 254
    3f56:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3f58:	88 e1       	ldi	r24, 0x18	; 24
    3f5a:	0f b6       	in	r0, 0x3f	; 63
    3f5c:	f8 94       	cli
    3f5e:	80 93 60 00 	sts	0x0060, r24
    3f62:	10 92 60 00 	sts	0x0060, r1
    3f66:	0f be       	out	0x3f, r0	; 63
    3f68:	08 95       	ret

00003f6a <suspend_wakeup_condition>:
{
    power_down(WDTO_15MS);
}

bool suspend_wakeup_condition(void)
{
    3f6a:	cf 93       	push	r28
    matrix_power_up();
    3f6c:	0e 94 8e 08 	call	0x111c	; 0x111c <matrix_power_up>
    matrix_scan();
    3f70:	0e 94 be 08 	call	0x117c	; 0x117c <matrix_scan>
    matrix_power_down();
    3f74:	0e 94 8f 08 	call	0x111e	; 0x111e <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3f78:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3f7a:	8c 2f       	mov	r24, r28
    3f7c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <matrix_get_row>
    3f80:	89 2b       	or	r24, r25
    3f82:	29 f4       	brne	.+10     	; 0x3f8e <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3f84:	cf 5f       	subi	r28, 0xFF	; 255
    3f86:	c5 30       	cpi	r28, 0x05	; 5
    3f88:	c1 f7       	brne	.-16     	; 0x3f7a <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3f8a:	80 e0       	ldi	r24, 0x00	; 0
    3f8c:	01 c0       	rjmp	.+2      	; 0x3f90 <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3f8e:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3f90:	cf 91       	pop	r28
    3f92:	08 95       	ret

00003f94 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3f94:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <clear_keyboard>

00003f98 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3f98:	1f 92       	push	r1
    3f9a:	0f 92       	push	r0
    3f9c:	0f b6       	in	r0, 0x3f	; 63
    3f9e:	0f 92       	push	r0
    3fa0:	11 24       	eor	r1, r1
    3fa2:	8f 93       	push	r24
    3fa4:	9f 93       	push	r25
    3fa6:	af 93       	push	r26
    3fa8:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3faa:	80 91 c4 01 	lds	r24, 0x01C4
    3fae:	81 11       	cpse	r24, r1
    3fb0:	13 c0       	rjmp	.+38     	; 0x3fd8 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    3fb2:	80 91 c7 01 	lds	r24, 0x01C7
    3fb6:	90 91 c8 01 	lds	r25, 0x01C8
    3fba:	a0 91 c9 01 	lds	r26, 0x01C9
    3fbe:	b0 91 ca 01 	lds	r27, 0x01CA
    3fc2:	41 96       	adiw	r24, 0x11	; 17
    3fc4:	a1 1d       	adc	r26, r1
    3fc6:	b1 1d       	adc	r27, r1
    3fc8:	80 93 c7 01 	sts	0x01C7, r24
    3fcc:	90 93 c8 01 	sts	0x01C8, r25
    3fd0:	a0 93 c9 01 	sts	0x01C9, r26
    3fd4:	b0 93 ca 01 	sts	0x01CA, r27
            break;
        default:
            ;
    }
}
    3fd8:	bf 91       	pop	r27
    3fda:	af 91       	pop	r26
    3fdc:	9f 91       	pop	r25
    3fde:	8f 91       	pop	r24
    3fe0:	0f 90       	pop	r0
    3fe2:	0f be       	out	0x3f, r0	; 63
    3fe4:	0f 90       	pop	r0
    3fe6:	1f 90       	pop	r1
    3fe8:	18 95       	reti

00003fea <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3fea:	82 e0       	ldi	r24, 0x02	; 2
    3fec:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3fee:	93 e0       	ldi	r25, 0x03	; 3
    3ff0:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    3ff2:	9a ef       	ldi	r25, 0xFA	; 250
    3ff4:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    3ff6:	80 93 6e 00 	sts	0x006E, r24
    3ffa:	08 95       	ret

00003ffc <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    3ffc:	2f b7       	in	r18, 0x3f	; 63
    cli();
    3ffe:	f8 94       	cli
    t = timer_count;
    4000:	80 91 c7 01 	lds	r24, 0x01C7
    4004:	90 91 c8 01 	lds	r25, 0x01C8
    4008:	a0 91 c9 01 	lds	r26, 0x01C9
    400c:	b0 91 ca 01 	lds	r27, 0x01CA
    SREG = sreg;
    4010:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    4012:	08 95       	ret

00004014 <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    4014:	cf 92       	push	r12
    4016:	df 92       	push	r13
    4018:	ef 92       	push	r14
    401a:	ff 92       	push	r15
    401c:	0f 93       	push	r16
    401e:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    4020:	2f b7       	in	r18, 0x3f	; 63
    cli();
    4022:	f8 94       	cli
    t = timer_count;
    4024:	40 91 c7 01 	lds	r20, 0x01C7
    4028:	50 91 c8 01 	lds	r21, 0x01C8
    402c:	60 91 c9 01 	lds	r22, 0x01C9
    4030:	70 91 ca 01 	lds	r23, 0x01CA
    SREG = sreg;
    4034:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    4036:	6a 01       	movw	r12, r20
    4038:	7b 01       	movw	r14, r22
    403a:	ee 24       	eor	r14, r14
    403c:	ff 24       	eor	r15, r15
    403e:	8c 01       	movw	r16, r24
    4040:	20 e0       	ldi	r18, 0x00	; 0
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	c0 16       	cp	r12, r16
    4046:	d1 06       	cpc	r13, r17
    4048:	e2 06       	cpc	r14, r18
    404a:	f3 06       	cpc	r15, r19
    404c:	10 f4       	brcc	.+4      	; 0x4052 <timer_elapsed+0x3e>
    404e:	41 50       	subi	r20, 0x01	; 1
    4050:	51 09       	sbc	r21, r1
    4052:	48 1b       	sub	r20, r24
    4054:	59 0b       	sbc	r21, r25
}
    4056:	ca 01       	movw	r24, r20
    4058:	1f 91       	pop	r17
    405a:	0f 91       	pop	r16
    405c:	ff 90       	pop	r15
    405e:	ef 90       	pop	r14
    4060:	df 90       	pop	r13
    4062:	cf 90       	pop	r12
    4064:	08 95       	ret

00004066 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    4066:	1f 92       	push	r1
    4068:	0f 92       	push	r0
    406a:	0f b6       	in	r0, 0x3f	; 63
    406c:	0f 92       	push	r0
    406e:	11 24       	eor	r1, r1
    4070:	8f 93       	push	r24
    4072:	9f 93       	push	r25
    4074:	af 93       	push	r26
    4076:	bf 93       	push	r27
    timer_count++;
    4078:	80 91 c7 01 	lds	r24, 0x01C7
    407c:	90 91 c8 01 	lds	r25, 0x01C8
    4080:	a0 91 c9 01 	lds	r26, 0x01C9
    4084:	b0 91 ca 01 	lds	r27, 0x01CA
    4088:	01 96       	adiw	r24, 0x01	; 1
    408a:	a1 1d       	adc	r26, r1
    408c:	b1 1d       	adc	r27, r1
    408e:	80 93 c7 01 	sts	0x01C7, r24
    4092:	90 93 c8 01 	sts	0x01C8, r25
    4096:	a0 93 c9 01 	sts	0x01C9, r26
    409a:	b0 93 ca 01 	sts	0x01CA, r27
}
    409e:	bf 91       	pop	r27
    40a0:	af 91       	pop	r26
    40a2:	9f 91       	pop	r25
    40a4:	8f 91       	pop	r24
    40a6:	0f 90       	pop	r0
    40a8:	0f be       	out	0x3f, r0	; 63
    40aa:	0f 90       	pop	r0
    40ac:	1f 90       	pop	r1
    40ae:	18 95       	reti

000040b0 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    40b0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <USB_Disable>
    cli();
    40b4:	f8 94       	cli
    40b6:	2f ef       	ldi	r18, 0xFF	; 255
    40b8:	87 ea       	ldi	r24, 0xA7	; 167
    40ba:	91 e6       	ldi	r25, 0x61	; 97
    40bc:	21 50       	subi	r18, 0x01	; 1
    40be:	80 40       	sbci	r24, 0x00	; 0
    40c0:	90 40       	sbci	r25, 0x00	; 0
    40c2:	e1 f7       	brne	.-8      	; 0x40bc <bootloader_jump+0xc>
    40c4:	00 c0       	rjmp	.+0      	; 0x40c6 <bootloader_jump+0x16>
    40c6:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    40c8:	87 e0       	ldi	r24, 0x07	; 7
    40ca:	90 eb       	ldi	r25, 0xB0	; 176
    40cc:	dc 01       	movw	r26, r24
    40ce:	80 93 e6 01 	sts	0x01E6, r24
    40d2:	90 93 e7 01 	sts	0x01E7, r25
    40d6:	a0 93 e8 01 	sts	0x01E8, r26
    40da:	b0 93 e9 01 	sts	0x01E9, r27
    wdt_enable(WDTO_250MS);
    40de:	2c e0       	ldi	r18, 0x0C	; 12
    40e0:	88 e1       	ldi	r24, 0x18	; 24
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	0f b6       	in	r0, 0x3f	; 63
    40e6:	f8 94       	cli
    40e8:	a8 95       	wdr
    40ea:	80 93 60 00 	sts	0x0060, r24
    40ee:	0f be       	out	0x3f, r0	; 63
    40f0:	20 93 60 00 	sts	0x0060, r18
    40f4:	ff cf       	rjmp	.-2      	; 0x40f4 <bootloader_jump+0x44>

000040f6 <scan_keycode>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_keycode(uint8_t keycode)
{
    40f6:	cf 92       	push	r12
    40f8:	df 92       	push	r13
    40fa:	ef 92       	push	r14
    40fc:	ff 92       	push	r15
    40fe:	0f 93       	push	r16
    4100:	1f 93       	push	r17
    4102:	cf 93       	push	r28
    4104:	df 93       	push	r29
    4106:	c8 2e       	mov	r12, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4108:	d1 2c       	mov	r13, r1
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    410a:	01 e0       	ldi	r16, 0x01	; 1
    410c:	10 e0       	ldi	r17, 0x00	; 0
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    410e:	8d 2d       	mov	r24, r13
    4110:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <matrix_get_row>
    4114:	7c 01       	movw	r14, r24
    4116:	c0 e0       	ldi	r28, 0x00	; 0
    4118:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    411a:	98 01       	movw	r18, r16
    411c:	0c 2e       	mov	r0, r28
    411e:	02 c0       	rjmp	.+4      	; 0x4124 <scan_keycode+0x2e>
    4120:	22 0f       	add	r18, r18
    4122:	33 1f       	adc	r19, r19
    4124:	0a 94       	dec	r0
    4126:	e2 f7       	brpl	.-8      	; 0x4120 <scan_keycode+0x2a>
    4128:	2e 21       	and	r18, r14
    412a:	3f 21       	and	r19, r15
    412c:	23 2b       	or	r18, r19
    412e:	29 f4       	brne	.+10     	; 0x413a <scan_keycode+0x44>
    4130:	21 96       	adiw	r28, 0x01	; 1

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    4132:	ce 30       	cpi	r28, 0x0E	; 14
    4134:	d1 05       	cpc	r29, r1
    4136:	89 f7       	brne	.-30     	; 0x411a <scan_keycode+0x24>
    4138:	09 c0       	rjmp	.+18     	; 0x414c <scan_keycode+0x56>
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    413a:	6c 2f       	mov	r22, r28
    413c:	7d 2d       	mov	r23, r13
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	0e 94 90 08 	call	0x1120	; 0x1120 <keymap_key_to_keycode>
    4144:	c8 12       	cpse	r12, r24
    4146:	f4 cf       	rjmp	.-24     	; 0x4130 <scan_keycode+0x3a>
                    return true;
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	05 c0       	rjmp	.+10     	; 0x4156 <scan_keycode+0x60>
    }
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    414c:	d3 94       	inc	r13
    414e:	85 e0       	ldi	r24, 0x05	; 5
    4150:	d8 12       	cpse	r13, r24
    4152:	dd cf       	rjmp	.-70     	; 0x410e <scan_keycode+0x18>
                    return true;
                }
            }
        }
    }
    return false;
    4154:	80 e0       	ldi	r24, 0x00	; 0
}
    4156:	df 91       	pop	r29
    4158:	cf 91       	pop	r28
    415a:	1f 91       	pop	r17
    415c:	0f 91       	pop	r16
    415e:	ff 90       	pop	r15
    4160:	ef 90       	pop	r14
    4162:	df 90       	pop	r13
    4164:	cf 90       	pop	r12
    4166:	08 95       	ret

00004168 <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    4168:	cf 93       	push	r28
    416a:	c8 2f       	mov	r28, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    416c:	8c e2       	ldi	r24, 0x2C	; 44
    416e:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <scan_keycode>
    4172:	88 23       	and	r24, r24
    4174:	21 f0       	breq	.+8      	; 0x417e <bootmagic_scan_keycode+0x16>

    return scan_keycode(keycode);
    4176:	8c 2f       	mov	r24, r28
}
    4178:	cf 91       	pop	r28

bool bootmagic_scan_keycode(uint8_t keycode)
{
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;

    return scan_keycode(keycode);
    417a:	0c 94 7b 20 	jmp	0x40f6	; 0x40f6 <scan_keycode>
}
    417e:	80 e0       	ldi	r24, 0x00	; 0
    4180:	cf 91       	pop	r28
    4182:	08 95       	ret

00004184 <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    4184:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    4186:	0e 94 0f 22 	call	0x441e	; 0x441e <eeconfig_is_enabled>
    418a:	81 11       	cpse	r24, r1
    418c:	02 c0       	rjmp	.+4      	; 0x4192 <bootmagic+0xe>
        eeconfig_init();
    418e:	0e 94 f5 21 	call	0x43ea	; 0x43ea <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    4192:	89 e2       	ldi	r24, 0x29	; 41
    4194:	94 e0       	ldi	r25, 0x04	; 4
    4196:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    419a:	c5 e6       	ldi	r28, 0x65	; 101
    419c:	c1 50       	subi	r28, 0x01	; 1
    419e:	49 f0       	breq	.+18     	; 0x41b2 <bootmagic+0x2e>
    41a0:	0e 94 be 08 	call	0x117c	; 0x117c <matrix_scan>
    41a4:	8f e3       	ldi	r24, 0x3F	; 63
    41a6:	9c e9       	ldi	r25, 0x9C	; 156
    41a8:	01 97       	sbiw	r24, 0x01	; 1
    41aa:	f1 f7       	brne	.-4      	; 0x41a8 <bootmagic+0x24>
    41ac:	00 c0       	rjmp	.+0      	; 0x41ae <bootmagic+0x2a>
    41ae:	00 00       	nop
    41b0:	f5 cf       	rjmp	.-22     	; 0x419c <bootmagic+0x18>
    print("done.\n");
    41b2:	82 e2       	ldi	r24, 0x22	; 34
    41b4:	94 e0       	ldi	r25, 0x04	; 4
    41b6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    41ba:	89 e2       	ldi	r24, 0x29	; 41
    41bc:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    41c0:	81 11       	cpse	r24, r1
    41c2:	11 c1       	rjmp	.+546    	; 0x43e6 <bootmagic+0x262>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    41c4:	8a e2       	ldi	r24, 0x2A	; 42
    41c6:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    41ca:	81 11       	cpse	r24, r1
        eeconfig_init();
    41cc:	0e 94 f5 21 	call	0x43ea	; 0x43ea <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    41d0:	85 e0       	ldi	r24, 0x05	; 5
    41d2:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    41d6:	81 11       	cpse	r24, r1
        bootloader_jump();
    41d8:	0e 94 58 20 	call	0x40b0	; 0x40b0 <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    41dc:	0e 94 1a 22 	call	0x4434	; 0x4434 <eeconfig_read_debug>
    41e0:	80 93 c3 01 	sts	0x01C3, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    41e4:	87 e0       	ldi	r24, 0x07	; 7
    41e6:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    41ea:	88 23       	and	r24, r24
    41ec:	99 f1       	breq	.+102    	; 0x4254 <bootmagic+0xd0>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    41ee:	8b e1       	ldi	r24, 0x1B	; 27
    41f0:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    41f4:	88 23       	and	r24, r24
    41f6:	51 f0       	breq	.+20     	; 0x420c <bootmagic+0x88>
            debug_config.matrix = !debug_config.matrix;
    41f8:	90 91 c3 01 	lds	r25, 0x01C3
    41fc:	91 fb       	bst	r25, 1
    41fe:	88 27       	eor	r24, r24
    4200:	80 f9       	bld	r24, 0
    4202:	21 e0       	ldi	r18, 0x01	; 1
    4204:	82 27       	eor	r24, r18
    4206:	80 fb       	bst	r24, 0
    4208:	91 f9       	bld	r25, 1
    420a:	22 c0       	rjmp	.+68     	; 0x4250 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    420c:	8e e0       	ldi	r24, 0x0E	; 14
    420e:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    4212:	88 23       	and	r24, r24
    4214:	51 f0       	breq	.+20     	; 0x422a <bootmagic+0xa6>
            debug_config.keyboard = !debug_config.keyboard;
    4216:	90 91 c3 01 	lds	r25, 0x01C3
    421a:	92 fb       	bst	r25, 2
    421c:	88 27       	eor	r24, r24
    421e:	80 f9       	bld	r24, 0
    4220:	21 e0       	ldi	r18, 0x01	; 1
    4222:	82 27       	eor	r24, r18
    4224:	80 fb       	bst	r24, 0
    4226:	92 f9       	bld	r25, 2
    4228:	13 c0       	rjmp	.+38     	; 0x4250 <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    422a:	80 e1       	ldi	r24, 0x10	; 16
    422c:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    4230:	90 91 c3 01 	lds	r25, 0x01C3
    4234:	88 23       	and	r24, r24
    4236:	41 f0       	breq	.+16     	; 0x4248 <bootmagic+0xc4>
            debug_config.mouse = !debug_config.mouse;
    4238:	93 fb       	bst	r25, 3
    423a:	88 27       	eor	r24, r24
    423c:	80 f9       	bld	r24, 0
    423e:	21 e0       	ldi	r18, 0x01	; 1
    4240:	82 27       	eor	r24, r18
    4242:	80 fb       	bst	r24, 0
    4244:	93 f9       	bld	r25, 3
    4246:	04 c0       	rjmp	.+8      	; 0x4250 <bootmagic+0xcc>
        } else {
            debug_config.enable = !debug_config.enable;
    4248:	89 2f       	mov	r24, r25
    424a:	80 95       	com	r24
    424c:	80 fb       	bst	r24, 0
    424e:	90 f9       	bld	r25, 0
    4250:	90 93 c3 01 	sts	0x01C3, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    4254:	80 91 c3 01 	lds	r24, 0x01C3
    4258:	0e 94 1e 22 	call	0x443c	; 0x443c <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    425c:	0e 94 2c 22 	call	0x4458	; 0x4458 <eeconfig_read_keymap>
    4260:	80 93 d8 01 	sts	0x01D8, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    4264:	80 ee       	ldi	r24, 0xE0	; 224
    4266:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    426a:	88 23       	and	r24, r24
    426c:	41 f0       	breq	.+16     	; 0x427e <bootmagic+0xfa>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    426e:	80 91 d8 01 	lds	r24, 0x01D8
    4272:	98 2f       	mov	r25, r24
    4274:	90 95       	com	r25
    4276:	90 fb       	bst	r25, 0
    4278:	80 f9       	bld	r24, 0
    427a:	80 93 d8 01 	sts	0x01D8, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    427e:	89 e3       	ldi	r24, 0x39	; 57
    4280:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    4284:	88 23       	and	r24, r24
    4286:	59 f0       	breq	.+22     	; 0x429e <bootmagic+0x11a>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    4288:	90 91 d8 01 	lds	r25, 0x01D8
    428c:	91 fb       	bst	r25, 1
    428e:	88 27       	eor	r24, r24
    4290:	80 f9       	bld	r24, 0
    4292:	21 e0       	ldi	r18, 0x01	; 1
    4294:	82 27       	eor	r24, r18
    4296:	80 fb       	bst	r24, 0
    4298:	91 f9       	bld	r25, 1
    429a:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    429e:	82 ee       	ldi	r24, 0xE2	; 226
    42a0:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    42a4:	88 23       	and	r24, r24
    42a6:	59 f0       	breq	.+22     	; 0x42be <bootmagic+0x13a>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    42a8:	90 91 d8 01 	lds	r25, 0x01D8
    42ac:	92 fb       	bst	r25, 2
    42ae:	88 27       	eor	r24, r24
    42b0:	80 f9       	bld	r24, 0
    42b2:	21 e0       	ldi	r18, 0x01	; 1
    42b4:	82 27       	eor	r24, r18
    42b6:	80 fb       	bst	r24, 0
    42b8:	92 f9       	bld	r25, 2
    42ba:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    42be:	86 ee       	ldi	r24, 0xE6	; 230
    42c0:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    42c4:	88 23       	and	r24, r24
    42c6:	59 f0       	breq	.+22     	; 0x42de <bootmagic+0x15a>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    42c8:	90 91 d8 01 	lds	r25, 0x01D8
    42cc:	93 fb       	bst	r25, 3
    42ce:	88 27       	eor	r24, r24
    42d0:	80 f9       	bld	r24, 0
    42d2:	21 e0       	ldi	r18, 0x01	; 1
    42d4:	82 27       	eor	r24, r18
    42d6:	80 fb       	bst	r24, 0
    42d8:	93 f9       	bld	r25, 3
    42da:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    42de:	83 ee       	ldi	r24, 0xE3	; 227
    42e0:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    42e4:	88 23       	and	r24, r24
    42e6:	59 f0       	breq	.+22     	; 0x42fe <bootmagic+0x17a>
        keymap_config.no_gui = !keymap_config.no_gui;
    42e8:	90 91 d8 01 	lds	r25, 0x01D8
    42ec:	94 fb       	bst	r25, 4
    42ee:	88 27       	eor	r24, r24
    42f0:	80 f9       	bld	r24, 0
    42f2:	21 e0       	ldi	r18, 0x01	; 1
    42f4:	82 27       	eor	r24, r18
    42f6:	80 fb       	bst	r24, 0
    42f8:	94 f9       	bld	r25, 4
    42fa:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    42fe:	85 e3       	ldi	r24, 0x35	; 53
    4300:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    4304:	88 23       	and	r24, r24
    4306:	59 f0       	breq	.+22     	; 0x431e <bootmagic+0x19a>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    4308:	90 91 d8 01 	lds	r25, 0x01D8
    430c:	95 fb       	bst	r25, 5
    430e:	88 27       	eor	r24, r24
    4310:	80 f9       	bld	r24, 0
    4312:	21 e0       	ldi	r18, 0x01	; 1
    4314:	82 27       	eor	r24, r18
    4316:	80 fb       	bst	r24, 0
    4318:	95 f9       	bld	r25, 5
    431a:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    431e:	81 e3       	ldi	r24, 0x31	; 49
    4320:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    4324:	88 23       	and	r24, r24
    4326:	59 f0       	breq	.+22     	; 0x433e <bootmagic+0x1ba>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    4328:	90 91 d8 01 	lds	r25, 0x01D8
    432c:	96 fb       	bst	r25, 6
    432e:	88 27       	eor	r24, r24
    4330:	80 f9       	bld	r24, 0
    4332:	21 e0       	ldi	r18, 0x01	; 1
    4334:	82 27       	eor	r24, r18
    4336:	80 fb       	bst	r24, 0
    4338:	96 f9       	bld	r25, 6
    433a:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    433e:	81 e1       	ldi	r24, 0x11	; 17
    4340:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    4344:	88 23       	and	r24, r24
    4346:	59 f0       	breq	.+22     	; 0x435e <bootmagic+0x1da>
        keymap_config.nkro = !keymap_config.nkro;
    4348:	90 91 d8 01 	lds	r25, 0x01D8
    434c:	97 fb       	bst	r25, 7
    434e:	88 27       	eor	r24, r24
    4350:	80 f9       	bld	r24, 0
    4352:	21 e0       	ldi	r18, 0x01	; 1
    4354:	82 27       	eor	r24, r18
    4356:	80 fb       	bst	r24, 0
    4358:	97 f9       	bld	r25, 7
    435a:	90 93 d8 01 	sts	0x01D8, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    435e:	80 91 d8 01 	lds	r24, 0x01D8
    4362:	0e 94 30 22 	call	0x4460	; 0x4460 <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    4366:	80 91 d8 01 	lds	r24, 0x01D8
    436a:	87 fb       	bst	r24, 7
    436c:	88 27       	eor	r24, r24
    436e:	80 f9       	bld	r24, 0
    4370:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    4374:	87 e2       	ldi	r24, 0x27	; 39
    4376:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    437a:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    437c:	8e e1       	ldi	r24, 0x1E	; 30
    437e:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    4382:	81 11       	cpse	r24, r1
    4384:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    4386:	8f e1       	ldi	r24, 0x1F	; 31
    4388:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    438c:	81 11       	cpse	r24, r1
    438e:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    4390:	80 e2       	ldi	r24, 0x20	; 32
    4392:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    4396:	81 11       	cpse	r24, r1
    4398:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    439a:	81 e2       	ldi	r24, 0x21	; 33
    439c:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    43a0:	81 11       	cpse	r24, r1
    43a2:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    43a4:	82 e2       	ldi	r24, 0x22	; 34
    43a6:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    43aa:	81 11       	cpse	r24, r1
    43ac:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    43ae:	83 e2       	ldi	r24, 0x23	; 35
    43b0:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    43b4:	81 11       	cpse	r24, r1
    43b6:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    43b8:	84 e2       	ldi	r24, 0x24	; 36
    43ba:	0e 94 b4 20 	call	0x4168	; 0x4168 <bootmagic_scan_keycode>
    43be:	88 23       	and	r24, r24
    43c0:	11 f0       	breq	.+4      	; 0x43c6 <bootmagic+0x242>
    43c2:	c0 68       	ori	r28, 0x80	; 128
    43c4:	02 c0       	rjmp	.+4      	; 0x43ca <bootmagic+0x246>
    if (default_layer) {
    43c6:	cc 23       	and	r28, r28
    43c8:	29 f0       	breq	.+10     	; 0x43d4 <bootmagic+0x250>
        eeconfig_write_default_layer(default_layer);
    43ca:	8c 2f       	mov	r24, r28
    43cc:	0e 94 27 22 	call	0x444e	; 0x444e <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    43d0:	6c 2f       	mov	r22, r28
    43d2:	03 c0       	rjmp	.+6      	; 0x43da <bootmagic+0x256>
    } else {
        default_layer = eeconfig_read_default_layer();
    43d4:	0e 94 23 22 	call	0x4446	; 0x4446 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    43d8:	68 2f       	mov	r22, r24
    43da:	70 e0       	ldi	r23, 0x00	; 0
    43dc:	80 e0       	ldi	r24, 0x00	; 0
    43de:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    43e0:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    43e2:	0c 94 89 1b 	jmp	0x3712	; 0x3712 <default_layer_set>
    }
}
    43e6:	cf 91       	pop	r28
    43e8:	08 95       	ret

000043ea <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    43ea:	6d ee       	ldi	r22, 0xED	; 237
    43ec:	7e ef       	ldi	r23, 0xFE	; 254
    43ee:	80 e0       	ldi	r24, 0x00	; 0
    43f0:	90 e0       	ldi	r25, 0x00	; 0
    43f2:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    43f6:	60 e0       	ldi	r22, 0x00	; 0
    43f8:	82 e0       	ldi	r24, 0x02	; 2
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	0e 94 de 2c 	call	0x59bc	; 0x59bc <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    4400:	60 e0       	ldi	r22, 0x00	; 0
    4402:	83 e0       	ldi	r24, 0x03	; 3
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	0e 94 de 2c 	call	0x59bc	; 0x59bc <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    440a:	60 e0       	ldi	r22, 0x00	; 0
    440c:	84 e0       	ldi	r24, 0x04	; 4
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	0e 94 de 2c 	call	0x59bc	; 0x59bc <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    4414:	60 e0       	ldi	r22, 0x00	; 0
    4416:	85 e0       	ldi	r24, 0x05	; 5
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	0c 94 de 2c 	jmp	0x59bc	; 0x59bc <__eewr_byte_m32u4>

0000441e <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    441e:	80 e0       	ldi	r24, 0x00	; 0
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	0e 94 d8 2c 	call	0x59b0	; 0x59b0 <__eerd_word_m32u4>
    4426:	21 e0       	ldi	r18, 0x01	; 1
    4428:	8d 3e       	cpi	r24, 0xED	; 237
    442a:	9e 4f       	sbci	r25, 0xFE	; 254
    442c:	09 f0       	breq	.+2      	; 0x4430 <eeconfig_is_enabled+0x12>
    442e:	20 e0       	ldi	r18, 0x00	; 0
}
    4430:	82 2f       	mov	r24, r18
    4432:	08 95       	ret

00004434 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4434:	82 e0       	ldi	r24, 0x02	; 2
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	0c 94 d0 2c 	jmp	0x59a0	; 0x59a0 <__eerd_byte_m32u4>

0000443c <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    443c:	68 2f       	mov	r22, r24
    443e:	82 e0       	ldi	r24, 0x02	; 2
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	0c 94 de 2c 	jmp	0x59bc	; 0x59bc <__eewr_byte_m32u4>

00004446 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    4446:	83 e0       	ldi	r24, 0x03	; 3
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	0c 94 d0 2c 	jmp	0x59a0	; 0x59a0 <__eerd_byte_m32u4>

0000444e <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    444e:	68 2f       	mov	r22, r24
    4450:	83 e0       	ldi	r24, 0x03	; 3
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	0c 94 de 2c 	jmp	0x59bc	; 0x59bc <__eewr_byte_m32u4>

00004458 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    4458:	84 e0       	ldi	r24, 0x04	; 4
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	0c 94 d0 2c 	jmp	0x59a0	; 0x59a0 <__eerd_byte_m32u4>

00004460 <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    4460:	68 2f       	mov	r22, r24
    4462:	84 e0       	ldi	r24, 0x04	; 4
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	0c 94 de 2c 	jmp	0x59bc	; 0x59bc <__eewr_byte_m32u4>

0000446a <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    446a:	80 91 cd 01 	lds	r24, 0x01CD
    446e:	80 ff       	sbrs	r24, 0
    4470:	0b c0       	rjmp	.+22     	; 0x4488 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    4472:	60 91 12 01 	lds	r22, 0x0112
    4476:	85 e0       	ldi	r24, 0x05	; 5
    4478:	68 9f       	mul	r22, r24
    447a:	b0 01       	movw	r22, r0
    447c:	11 24       	eor	r1, r1
    447e:	75 95       	asr	r23
    4480:	67 95       	ror	r22
    4482:	75 95       	asr	r23
    4484:	67 95       	ror	r22
    4486:	2a c0       	rjmp	.+84     	; 0x44dc <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    4488:	81 ff       	sbrs	r24, 1
    448a:	09 c0       	rjmp	.+18     	; 0x449e <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    448c:	60 91 12 01 	lds	r22, 0x0112
    4490:	85 e0       	ldi	r24, 0x05	; 5
    4492:	68 9f       	mul	r22, r24
    4494:	b0 01       	movw	r22, r0
    4496:	11 24       	eor	r1, r1
    4498:	75 95       	asr	r23
    449a:	67 95       	ror	r22
    449c:	1f c0       	rjmp	.+62     	; 0x44dc <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    449e:	82 ff       	sbrs	r24, 2
    44a0:	07 c0       	rjmp	.+14     	; 0x44b0 <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    44a2:	60 91 12 01 	lds	r22, 0x0112
    44a6:	85 e0       	ldi	r24, 0x05	; 5
    44a8:	68 9f       	mul	r22, r24
    44aa:	b0 01       	movw	r22, r0
    44ac:	11 24       	eor	r1, r1
    44ae:	16 c0       	rjmp	.+44     	; 0x44dc <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    44b0:	40 91 ce 01 	lds	r20, 0x01CE
    44b4:	44 23       	and	r20, r20
    44b6:	c9 f0       	breq	.+50     	; 0x44ea <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    44b8:	60 91 11 01 	lds	r22, 0x0111
    44bc:	46 17       	cp	r20, r22
    44be:	88 f7       	brcc	.-30     	; 0x44a2 <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    44c0:	20 91 12 01 	lds	r18, 0x0112
    44c4:	85 e0       	ldi	r24, 0x05	; 5
    44c6:	28 9f       	mul	r18, r24
    44c8:	90 01       	movw	r18, r0
    44ca:	11 24       	eor	r1, r1
    44cc:	42 9f       	mul	r20, r18
    44ce:	c0 01       	movw	r24, r0
    44d0:	43 9f       	mul	r20, r19
    44d2:	90 0d       	add	r25, r0
    44d4:	11 24       	eor	r1, r1
    44d6:	70 e0       	ldi	r23, 0x00	; 0
    44d8:	0e 94 a2 2c 	call	0x5944	; 0x5944 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    44dc:	60 38       	cpi	r22, 0x80	; 128
    44de:	71 05       	cpc	r23, r1
    44e0:	40 f4       	brcc	.+16     	; 0x44f2 <move_unit+0x88>
    44e2:	61 15       	cp	r22, r1
    44e4:	71 05       	cpc	r23, r1
    44e6:	39 f0       	breq	.+14     	; 0x44f6 <move_unit+0x8c>
    44e8:	02 c0       	rjmp	.+4      	; 0x44ee <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    44ea:	65 e0       	ldi	r22, 0x05	; 5
    44ec:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    44ee:	86 2f       	mov	r24, r22
    44f0:	08 95       	ret
    44f2:	8f e7       	ldi	r24, 0x7F	; 127
    44f4:	08 95       	ret
    44f6:	81 e0       	ldi	r24, 0x01	; 1
}
    44f8:	08 95       	ret

000044fa <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    44fa:	80 91 cd 01 	lds	r24, 0x01CD
    44fe:	80 ff       	sbrs	r24, 0
    4500:	08 c0       	rjmp	.+16     	; 0x4512 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4502:	60 91 10 01 	lds	r22, 0x0110
    4506:	70 e0       	ldi	r23, 0x00	; 0
    4508:	75 95       	asr	r23
    450a:	67 95       	ror	r22
    450c:	75 95       	asr	r23
    450e:	67 95       	ror	r22
    4510:	21 c0       	rjmp	.+66     	; 0x4554 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    4512:	81 ff       	sbrs	r24, 1
    4514:	06 c0       	rjmp	.+12     	; 0x4522 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4516:	60 91 10 01 	lds	r22, 0x0110
    451a:	70 e0       	ldi	r23, 0x00	; 0
    451c:	75 95       	asr	r23
    451e:	67 95       	ror	r22
    4520:	19 c0       	rjmp	.+50     	; 0x4554 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    4522:	82 ff       	sbrs	r24, 2
    4524:	04 c0       	rjmp	.+8      	; 0x452e <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4526:	60 91 10 01 	lds	r22, 0x0110
    452a:	70 e0       	ldi	r23, 0x00	; 0
    452c:	10 c0       	rjmp	.+32     	; 0x454e <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    452e:	80 91 ce 01 	lds	r24, 0x01CE
    4532:	88 23       	and	r24, r24
    4534:	c1 f0       	breq	.+48     	; 0x4566 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4536:	60 91 0f 01 	lds	r22, 0x010F
    453a:	86 17       	cp	r24, r22
    453c:	a0 f7       	brcc	.-24     	; 0x4526 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    453e:	90 91 10 01 	lds	r25, 0x0110
    4542:	98 9f       	mul	r25, r24
    4544:	c0 01       	movw	r24, r0
    4546:	11 24       	eor	r1, r1
    4548:	70 e0       	ldi	r23, 0x00	; 0
    454a:	0e 94 a2 2c 	call	0x5944	; 0x5944 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    454e:	60 38       	cpi	r22, 0x80	; 128
    4550:	71 05       	cpc	r23, r1
    4552:	28 f4       	brcc	.+10     	; 0x455e <wheel_unit+0x64>
    4554:	61 15       	cp	r22, r1
    4556:	71 05       	cpc	r23, r1
    4558:	21 f0       	breq	.+8      	; 0x4562 <wheel_unit+0x68>
    455a:	86 2f       	mov	r24, r22
    455c:	08 95       	ret
    455e:	8f e7       	ldi	r24, 0x7F	; 127
    4560:	08 95       	ret
    4562:	81 e0       	ldi	r24, 0x01	; 1
    4564:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    4566:	61 e0       	ldi	r22, 0x01	; 1
    4568:	70 e0       	ldi	r23, 0x00	; 0
    456a:	f4 cf       	rjmp	.-24     	; 0x4554 <wheel_unit+0x5a>

0000456c <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    456c:	80 3f       	cpi	r24, 0xF0	; 240
    456e:	21 f4       	brne	.+8      	; 0x4578 <mousekey_on+0xc>
    4570:	0e 94 35 22 	call	0x446a	; 0x446a <move_unit>
    4574:	81 95       	neg	r24
    4576:	04 c0       	rjmp	.+8      	; 0x4580 <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    4578:	81 3f       	cpi	r24, 0xF1	; 241
    457a:	29 f4       	brne	.+10     	; 0x4586 <mousekey_on+0x1a>
    457c:	0e 94 35 22 	call	0x446a	; 0x446a <move_unit>
    4580:	80 93 d1 01 	sts	0x01D1, r24
    4584:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4586:	82 3f       	cpi	r24, 0xF2	; 242
    4588:	21 f4       	brne	.+8      	; 0x4592 <mousekey_on+0x26>
    458a:	0e 94 35 22 	call	0x446a	; 0x446a <move_unit>
    458e:	81 95       	neg	r24
    4590:	04 c0       	rjmp	.+8      	; 0x459a <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4592:	83 3f       	cpi	r24, 0xF3	; 243
    4594:	29 f4       	brne	.+10     	; 0x45a0 <mousekey_on+0x34>
    4596:	0e 94 35 22 	call	0x446a	; 0x446a <move_unit>
    459a:	80 93 d0 01 	sts	0x01D0, r24
    459e:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    45a0:	89 3f       	cpi	r24, 0xF9	; 249
    45a2:	19 f4       	brne	.+6      	; 0x45aa <mousekey_on+0x3e>
    45a4:	0e 94 7d 22 	call	0x44fa	; 0x44fa <wheel_unit>
    45a8:	05 c0       	rjmp	.+10     	; 0x45b4 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    45aa:	8a 3f       	cpi	r24, 0xFA	; 250
    45ac:	31 f4       	brne	.+12     	; 0x45ba <mousekey_on+0x4e>
    45ae:	0e 94 7d 22 	call	0x44fa	; 0x44fa <wheel_unit>
    45b2:	81 95       	neg	r24
    45b4:	80 93 d2 01 	sts	0x01D2, r24
    45b8:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    45ba:	8b 3f       	cpi	r24, 0xFB	; 251
    45bc:	21 f4       	brne	.+8      	; 0x45c6 <mousekey_on+0x5a>
    45be:	0e 94 7d 22 	call	0x44fa	; 0x44fa <wheel_unit>
    45c2:	81 95       	neg	r24
    45c4:	04 c0       	rjmp	.+8      	; 0x45ce <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    45c6:	8c 3f       	cpi	r24, 0xFC	; 252
    45c8:	29 f4       	brne	.+10     	; 0x45d4 <mousekey_on+0x68>
    45ca:	0e 94 7d 22 	call	0x44fa	; 0x44fa <wheel_unit>
    45ce:	80 93 d3 01 	sts	0x01D3, r24
    45d2:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    45d4:	84 3f       	cpi	r24, 0xF4	; 244
    45d6:	21 f4       	brne	.+8      	; 0x45e0 <mousekey_on+0x74>
    45d8:	80 91 cf 01 	lds	r24, 0x01CF
    45dc:	81 60       	ori	r24, 0x01	; 1
    45de:	17 c0       	rjmp	.+46     	; 0x460e <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    45e0:	85 3f       	cpi	r24, 0xF5	; 245
    45e2:	21 f4       	brne	.+8      	; 0x45ec <mousekey_on+0x80>
    45e4:	80 91 cf 01 	lds	r24, 0x01CF
    45e8:	82 60       	ori	r24, 0x02	; 2
    45ea:	11 c0       	rjmp	.+34     	; 0x460e <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    45ec:	86 3f       	cpi	r24, 0xF6	; 246
    45ee:	21 f4       	brne	.+8      	; 0x45f8 <mousekey_on+0x8c>
    45f0:	80 91 cf 01 	lds	r24, 0x01CF
    45f4:	84 60       	ori	r24, 0x04	; 4
    45f6:	0b c0       	rjmp	.+22     	; 0x460e <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    45f8:	87 3f       	cpi	r24, 0xF7	; 247
    45fa:	21 f4       	brne	.+8      	; 0x4604 <mousekey_on+0x98>
    45fc:	80 91 cf 01 	lds	r24, 0x01CF
    4600:	88 60       	ori	r24, 0x08	; 8
    4602:	05 c0       	rjmp	.+10     	; 0x460e <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4604:	88 3f       	cpi	r24, 0xF8	; 248
    4606:	31 f4       	brne	.+12     	; 0x4614 <mousekey_on+0xa8>
    4608:	80 91 cf 01 	lds	r24, 0x01CF
    460c:	80 61       	ori	r24, 0x10	; 16
    460e:	80 93 cf 01 	sts	0x01CF, r24
    4612:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4614:	8d 3f       	cpi	r24, 0xFD	; 253
    4616:	21 f4       	brne	.+8      	; 0x4620 <mousekey_on+0xb4>
    4618:	80 91 cd 01 	lds	r24, 0x01CD
    461c:	81 60       	ori	r24, 0x01	; 1
    461e:	0b c0       	rjmp	.+22     	; 0x4636 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    4620:	8e 3f       	cpi	r24, 0xFE	; 254
    4622:	21 f4       	brne	.+8      	; 0x462c <mousekey_on+0xc0>
    4624:	80 91 cd 01 	lds	r24, 0x01CD
    4628:	82 60       	ori	r24, 0x02	; 2
    462a:	05 c0       	rjmp	.+10     	; 0x4636 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    462c:	8f 3f       	cpi	r24, 0xFF	; 255
    462e:	29 f4       	brne	.+10     	; 0x463a <mousekey_on+0xce>
    4630:	80 91 cd 01 	lds	r24, 0x01CD
    4634:	84 60       	ori	r24, 0x04	; 4
    4636:	80 93 cd 01 	sts	0x01CD, r24
    463a:	08 95       	ret

0000463c <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    463c:	80 3f       	cpi	r24, 0xF0	; 240
    463e:	39 f4       	brne	.+14     	; 0x464e <mousekey_off+0x12>
    4640:	80 91 d1 01 	lds	r24, 0x01D1
    4644:	87 ff       	sbrs	r24, 7
    4646:	6c c0       	rjmp	.+216    	; 0x4720 <mousekey_off+0xe4>
    4648:	10 92 d1 01 	sts	0x01D1, r1
    464c:	69 c0       	rjmp	.+210    	; 0x4720 <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    464e:	81 3f       	cpi	r24, 0xF1	; 241
    4650:	29 f4       	brne	.+10     	; 0x465c <mousekey_off+0x20>
    4652:	80 91 d1 01 	lds	r24, 0x01D1
    4656:	18 16       	cp	r1, r24
    4658:	bc f3       	brlt	.-18     	; 0x4648 <mousekey_off+0xc>
    465a:	62 c0       	rjmp	.+196    	; 0x4720 <mousekey_off+0xe4>
    465c:	90 91 d0 01 	lds	r25, 0x01D0
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    4660:	82 3f       	cpi	r24, 0xF2	; 242
    4662:	29 f4       	brne	.+10     	; 0x466e <mousekey_off+0x32>
    4664:	97 ff       	sbrs	r25, 7
    4666:	5c c0       	rjmp	.+184    	; 0x4720 <mousekey_off+0xe4>
    4668:	10 92 d0 01 	sts	0x01D0, r1
    466c:	59 c0       	rjmp	.+178    	; 0x4720 <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    466e:	83 3f       	cpi	r24, 0xF3	; 243
    4670:	19 f4       	brne	.+6      	; 0x4678 <mousekey_off+0x3c>
    4672:	19 16       	cp	r1, r25
    4674:	cc f3       	brlt	.-14     	; 0x4668 <mousekey_off+0x2c>
    4676:	54 c0       	rjmp	.+168    	; 0x4720 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    4678:	89 3f       	cpi	r24, 0xF9	; 249
    467a:	41 f4       	brne	.+16     	; 0x468c <mousekey_off+0x50>
    467c:	80 91 d2 01 	lds	r24, 0x01D2
    4680:	18 16       	cp	r1, r24
    4682:	0c f0       	brlt	.+2      	; 0x4686 <mousekey_off+0x4a>
    4684:	4d c0       	rjmp	.+154    	; 0x4720 <mousekey_off+0xe4>
    4686:	10 92 d2 01 	sts	0x01D2, r1
    468a:	4a c0       	rjmp	.+148    	; 0x4720 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    468c:	8a 3f       	cpi	r24, 0xFA	; 250
    468e:	29 f4       	brne	.+10     	; 0x469a <mousekey_off+0x5e>
    4690:	80 91 d2 01 	lds	r24, 0x01D2
    4694:	87 ff       	sbrs	r24, 7
    4696:	44 c0       	rjmp	.+136    	; 0x4720 <mousekey_off+0xe4>
    4698:	f6 cf       	rjmp	.-20     	; 0x4686 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    469a:	8b 3f       	cpi	r24, 0xFB	; 251
    469c:	39 f4       	brne	.+14     	; 0x46ac <mousekey_off+0x70>
    469e:	80 91 d3 01 	lds	r24, 0x01D3
    46a2:	87 ff       	sbrs	r24, 7
    46a4:	3d c0       	rjmp	.+122    	; 0x4720 <mousekey_off+0xe4>
    46a6:	10 92 d3 01 	sts	0x01D3, r1
    46aa:	3a c0       	rjmp	.+116    	; 0x4720 <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    46ac:	8c 3f       	cpi	r24, 0xFC	; 252
    46ae:	29 f4       	brne	.+10     	; 0x46ba <mousekey_off+0x7e>
    46b0:	80 91 d3 01 	lds	r24, 0x01D3
    46b4:	18 16       	cp	r1, r24
    46b6:	bc f3       	brlt	.-18     	; 0x46a6 <mousekey_off+0x6a>
    46b8:	33 c0       	rjmp	.+102    	; 0x4720 <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    46ba:	84 3f       	cpi	r24, 0xF4	; 244
    46bc:	21 f4       	brne	.+8      	; 0x46c6 <mousekey_off+0x8a>
    46be:	80 91 cf 01 	lds	r24, 0x01CF
    46c2:	8e 7f       	andi	r24, 0xFE	; 254
    46c4:	17 c0       	rjmp	.+46     	; 0x46f4 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    46c6:	85 3f       	cpi	r24, 0xF5	; 245
    46c8:	21 f4       	brne	.+8      	; 0x46d2 <mousekey_off+0x96>
    46ca:	80 91 cf 01 	lds	r24, 0x01CF
    46ce:	8d 7f       	andi	r24, 0xFD	; 253
    46d0:	11 c0       	rjmp	.+34     	; 0x46f4 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    46d2:	86 3f       	cpi	r24, 0xF6	; 246
    46d4:	21 f4       	brne	.+8      	; 0x46de <mousekey_off+0xa2>
    46d6:	80 91 cf 01 	lds	r24, 0x01CF
    46da:	8b 7f       	andi	r24, 0xFB	; 251
    46dc:	0b c0       	rjmp	.+22     	; 0x46f4 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    46de:	87 3f       	cpi	r24, 0xF7	; 247
    46e0:	21 f4       	brne	.+8      	; 0x46ea <mousekey_off+0xae>
    46e2:	80 91 cf 01 	lds	r24, 0x01CF
    46e6:	87 7f       	andi	r24, 0xF7	; 247
    46e8:	05 c0       	rjmp	.+10     	; 0x46f4 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    46ea:	88 3f       	cpi	r24, 0xF8	; 248
    46ec:	31 f4       	brne	.+12     	; 0x46fa <mousekey_off+0xbe>
    46ee:	80 91 cf 01 	lds	r24, 0x01CF
    46f2:	8f 7e       	andi	r24, 0xEF	; 239
    46f4:	80 93 cf 01 	sts	0x01CF, r24
    46f8:	13 c0       	rjmp	.+38     	; 0x4720 <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    46fa:	8d 3f       	cpi	r24, 0xFD	; 253
    46fc:	21 f4       	brne	.+8      	; 0x4706 <mousekey_off+0xca>
    46fe:	80 91 cd 01 	lds	r24, 0x01CD
    4702:	8e 7f       	andi	r24, 0xFE	; 254
    4704:	0b c0       	rjmp	.+22     	; 0x471c <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4706:	8e 3f       	cpi	r24, 0xFE	; 254
    4708:	21 f4       	brne	.+8      	; 0x4712 <mousekey_off+0xd6>
    470a:	80 91 cd 01 	lds	r24, 0x01CD
    470e:	8d 7f       	andi	r24, 0xFD	; 253
    4710:	05 c0       	rjmp	.+10     	; 0x471c <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4712:	8f 3f       	cpi	r24, 0xFF	; 255
    4714:	29 f4       	brne	.+10     	; 0x4720 <mousekey_off+0xe4>
    4716:	80 91 cd 01 	lds	r24, 0x01CD
    471a:	8b 7f       	andi	r24, 0xFB	; 251
    471c:	80 93 cd 01 	sts	0x01CD, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4720:	80 91 d0 01 	lds	r24, 0x01D0
    4724:	81 11       	cpse	r24, r1
    4726:	0e c0       	rjmp	.+28     	; 0x4744 <mousekey_off+0x108>
    4728:	80 91 d1 01 	lds	r24, 0x01D1
    472c:	81 11       	cpse	r24, r1
    472e:	0a c0       	rjmp	.+20     	; 0x4744 <mousekey_off+0x108>
    4730:	80 91 d2 01 	lds	r24, 0x01D2
    4734:	81 11       	cpse	r24, r1
    4736:	06 c0       	rjmp	.+12     	; 0x4744 <mousekey_off+0x108>
    4738:	80 91 d3 01 	lds	r24, 0x01D3
    473c:	81 11       	cpse	r24, r1
    473e:	02 c0       	rjmp	.+4      	; 0x4744 <mousekey_off+0x108>
        mousekey_repeat = 0;
    4740:	10 92 ce 01 	sts	0x01CE, r1
    4744:	08 95       	ret

00004746 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    4746:	80 91 c3 01 	lds	r24, 0x01C3
    474a:	83 ff       	sbrs	r24, 3
    474c:	7e c0       	rjmp	.+252    	; 0x484a <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    474e:	85 e6       	ldi	r24, 0x65	; 101
    4750:	94 e0       	ldi	r25, 0x04	; 4
    4752:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    phex(mouse_report.buttons); print("|");
    4756:	80 91 cf 01 	lds	r24, 0x01CF
    475a:	1f 92       	push	r1
    475c:	8f 93       	push	r24
    475e:	80 e6       	ldi	r24, 0x60	; 96
    4760:	94 e0       	ldi	r25, 0x04	; 4
    4762:	9f 93       	push	r25
    4764:	8f 93       	push	r24
    4766:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    476a:	8e e5       	ldi	r24, 0x5E	; 94
    476c:	94 e0       	ldi	r25, 0x04	; 4
    476e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print_decs(mouse_report.x); print(" ");
    4772:	20 91 d0 01 	lds	r18, 0x01D0
    4776:	82 2f       	mov	r24, r18
    4778:	99 27       	eor	r25, r25
    477a:	87 fd       	sbrc	r24, 7
    477c:	90 95       	com	r25
    477e:	9f 93       	push	r25
    4780:	2f 93       	push	r18
    4782:	8b e5       	ldi	r24, 0x5B	; 91
    4784:	94 e0       	ldi	r25, 0x04	; 4
    4786:	9f 93       	push	r25
    4788:	8f 93       	push	r24
    478a:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    478e:	89 e5       	ldi	r24, 0x59	; 89
    4790:	94 e0       	ldi	r25, 0x04	; 4
    4792:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print_decs(mouse_report.y); print(" ");
    4796:	20 91 d1 01 	lds	r18, 0x01D1
    479a:	82 2f       	mov	r24, r18
    479c:	99 27       	eor	r25, r25
    479e:	87 fd       	sbrc	r24, 7
    47a0:	90 95       	com	r25
    47a2:	9f 93       	push	r25
    47a4:	2f 93       	push	r18
    47a6:	86 e5       	ldi	r24, 0x56	; 86
    47a8:	94 e0       	ldi	r25, 0x04	; 4
    47aa:	9f 93       	push	r25
    47ac:	8f 93       	push	r24
    47ae:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    47b2:	84 e5       	ldi	r24, 0x54	; 84
    47b4:	94 e0       	ldi	r25, 0x04	; 4
    47b6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print_decs(mouse_report.v); print(" ");
    47ba:	20 91 d2 01 	lds	r18, 0x01D2
    47be:	82 2f       	mov	r24, r18
    47c0:	99 27       	eor	r25, r25
    47c2:	87 fd       	sbrc	r24, 7
    47c4:	90 95       	com	r25
    47c6:	9f 93       	push	r25
    47c8:	2f 93       	push	r18
    47ca:	81 e5       	ldi	r24, 0x51	; 81
    47cc:	94 e0       	ldi	r25, 0x04	; 4
    47ce:	9f 93       	push	r25
    47d0:	8f 93       	push	r24
    47d2:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    47d6:	8f e4       	ldi	r24, 0x4F	; 79
    47d8:	94 e0       	ldi	r25, 0x04	; 4
    47da:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print_decs(mouse_report.h); print("](");
    47de:	20 91 d3 01 	lds	r18, 0x01D3
    47e2:	82 2f       	mov	r24, r18
    47e4:	99 27       	eor	r25, r25
    47e6:	87 fd       	sbrc	r24, 7
    47e8:	90 95       	com	r25
    47ea:	9f 93       	push	r25
    47ec:	2f 93       	push	r18
    47ee:	8c e4       	ldi	r24, 0x4C	; 76
    47f0:	94 e0       	ldi	r25, 0x04	; 4
    47f2:	9f 93       	push	r25
    47f4:	8f 93       	push	r24
    47f6:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    47fa:	89 e4       	ldi	r24, 0x49	; 73
    47fc:	94 e0       	ldi	r25, 0x04	; 4
    47fe:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print_dec(mousekey_repeat); print("/");
    4802:	80 91 ce 01 	lds	r24, 0x01CE
    4806:	1f 92       	push	r1
    4808:	8f 93       	push	r24
    480a:	86 e4       	ldi	r24, 0x46	; 70
    480c:	94 e0       	ldi	r25, 0x04	; 4
    480e:	9f 93       	push	r25
    4810:	8f 93       	push	r24
    4812:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4816:	84 e4       	ldi	r24, 0x44	; 68
    4818:	94 e0       	ldi	r25, 0x04	; 4
    481a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print_dec(mousekey_accel); print(")\n");
    481e:	80 91 cd 01 	lds	r24, 0x01CD
    4822:	1f 92       	push	r1
    4824:	8f 93       	push	r24
    4826:	81 e4       	ldi	r24, 0x41	; 65
    4828:	94 e0       	ldi	r25, 0x04	; 4
    482a:	9f 93       	push	r25
    482c:	8f 93       	push	r24
    482e:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4832:	8e e3       	ldi	r24, 0x3E	; 62
    4834:	94 e0       	ldi	r25, 0x04	; 4
    4836:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    483a:	8d b7       	in	r24, 0x3d	; 61
    483c:	9e b7       	in	r25, 0x3e	; 62
    483e:	4c 96       	adiw	r24, 0x1c	; 28
    4840:	0f b6       	in	r0, 0x3f	; 63
    4842:	f8 94       	cli
    4844:	9e bf       	out	0x3e, r25	; 62
    4846:	0f be       	out	0x3f, r0	; 63
    4848:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    484a:	8f ec       	ldi	r24, 0xCF	; 207
    484c:	91 e0       	ldi	r25, 0x01	; 1
    484e:	0e 94 0c 12 	call	0x2418	; 0x2418 <host_mouse_send>
    last_timer = timer_read();
    4852:	0e 94 fe 1f 	call	0x3ffc	; 0x3ffc <timer_read>
    4856:	90 93 cc 01 	sts	0x01CC, r25
    485a:	80 93 cb 01 	sts	0x01CB, r24
    485e:	08 95       	ret

00004860 <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    4860:	1f 93       	push	r17
    4862:	cf 93       	push	r28
    4864:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    4866:	80 91 cb 01 	lds	r24, 0x01CB
    486a:	90 91 cc 01 	lds	r25, 0x01CC
    486e:	0e 94 0a 20 	call	0x4014	; 0x4014 <timer_elapsed>
    4872:	40 91 ce 01 	lds	r20, 0x01CE
    4876:	44 23       	and	r20, r20
    4878:	21 f0       	breq	.+8      	; 0x4882 <mousekey_task+0x22>
    487a:	20 91 13 01 	lds	r18, 0x0113
    487e:	30 e0       	ldi	r19, 0x00	; 0
    4880:	06 c0       	rjmp	.+12     	; 0x488e <mousekey_task+0x2e>
    4882:	20 91 14 01 	lds	r18, 0x0114
    4886:	5a e0       	ldi	r21, 0x0A	; 10
    4888:	25 9f       	mul	r18, r21
    488a:	90 01       	movw	r18, r0
    488c:	11 24       	eor	r1, r1
    488e:	82 17       	cp	r24, r18
    4890:	93 07       	cpc	r25, r19
    4892:	08 f4       	brcc	.+2      	; 0x4896 <mousekey_task+0x36>
    4894:	82 c0       	rjmp	.+260    	; 0x499a <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4896:	80 91 d0 01 	lds	r24, 0x01D0
    489a:	10 91 d1 01 	lds	r17, 0x01D1
    489e:	d0 91 d2 01 	lds	r29, 0x01D2
    48a2:	c0 91 d3 01 	lds	r28, 0x01D3
    48a6:	81 11       	cpse	r24, r1
    48a8:	07 c0       	rjmp	.+14     	; 0x48b8 <mousekey_task+0x58>
    48aa:	11 11       	cpse	r17, r1
    48ac:	05 c0       	rjmp	.+10     	; 0x48b8 <mousekey_task+0x58>
    48ae:	d1 11       	cpse	r29, r1
    48b0:	03 c0       	rjmp	.+6      	; 0x48b8 <mousekey_task+0x58>
    48b2:	cc 23       	and	r28, r28
    48b4:	09 f4       	brne	.+2      	; 0x48b8 <mousekey_task+0x58>
    48b6:	71 c0       	rjmp	.+226    	; 0x499a <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    48b8:	4f 3f       	cpi	r20, 0xFF	; 255
    48ba:	19 f0       	breq	.+6      	; 0x48c2 <mousekey_task+0x62>
        mousekey_repeat++;
    48bc:	4f 5f       	subi	r20, 0xFF	; 255
    48be:	40 93 ce 01 	sts	0x01CE, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    48c2:	18 16       	cp	r1, r24
    48c4:	24 f4       	brge	.+8      	; 0x48ce <mousekey_task+0x6e>
    48c6:	0e 94 35 22 	call	0x446a	; 0x446a <move_unit>
    48ca:	80 93 d0 01 	sts	0x01D0, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    48ce:	80 91 d0 01 	lds	r24, 0x01D0
    48d2:	87 ff       	sbrs	r24, 7
    48d4:	05 c0       	rjmp	.+10     	; 0x48e0 <mousekey_task+0x80>
    48d6:	0e 94 35 22 	call	0x446a	; 0x446a <move_unit>
    48da:	81 95       	neg	r24
    48dc:	80 93 d0 01 	sts	0x01D0, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    48e0:	11 16       	cp	r1, r17
    48e2:	24 f4       	brge	.+8      	; 0x48ec <mousekey_task+0x8c>
    48e4:	0e 94 35 22 	call	0x446a	; 0x446a <move_unit>
    48e8:	80 93 d1 01 	sts	0x01D1, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    48ec:	80 91 d1 01 	lds	r24, 0x01D1
    48f0:	87 ff       	sbrs	r24, 7
    48f2:	05 c0       	rjmp	.+10     	; 0x48fe <mousekey_task+0x9e>
    48f4:	0e 94 35 22 	call	0x446a	; 0x446a <move_unit>
    48f8:	81 95       	neg	r24
    48fa:	80 93 d1 01 	sts	0x01D1, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    48fe:	60 91 d0 01 	lds	r22, 0x01D0
    4902:	66 23       	and	r22, r22
    4904:	39 f1       	breq	.+78     	; 0x4954 <mousekey_task+0xf4>
    4906:	10 91 d1 01 	lds	r17, 0x01D1
    490a:	11 23       	and	r17, r17
    490c:	19 f1       	breq	.+70     	; 0x4954 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    490e:	77 27       	eor	r23, r23
    4910:	67 fd       	sbrc	r22, 7
    4912:	70 95       	com	r23
    4914:	87 2f       	mov	r24, r23
    4916:	97 2f       	mov	r25, r23
    4918:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__floatsisf>
    491c:	23 e3       	ldi	r18, 0x33	; 51
    491e:	33 e3       	ldi	r19, 0x33	; 51
    4920:	43 e3       	ldi	r20, 0x33	; 51
    4922:	5f e3       	ldi	r21, 0x3F	; 63
    4924:	0e 94 17 2c 	call	0x582e	; 0x582e <__mulsf3>
    4928:	0e 94 80 2b 	call	0x5700	; 0x5700 <__fixsfsi>
    492c:	60 93 d0 01 	sts	0x01D0, r22
        mouse_report.y *= 0.7;
    4930:	61 2f       	mov	r22, r17
    4932:	77 27       	eor	r23, r23
    4934:	67 fd       	sbrc	r22, 7
    4936:	70 95       	com	r23
    4938:	87 2f       	mov	r24, r23
    493a:	97 2f       	mov	r25, r23
    493c:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__floatsisf>
    4940:	23 e3       	ldi	r18, 0x33	; 51
    4942:	33 e3       	ldi	r19, 0x33	; 51
    4944:	43 e3       	ldi	r20, 0x33	; 51
    4946:	5f e3       	ldi	r21, 0x3F	; 63
    4948:	0e 94 17 2c 	call	0x582e	; 0x582e <__mulsf3>
    494c:	0e 94 80 2b 	call	0x5700	; 0x5700 <__fixsfsi>
    4950:	60 93 d1 01 	sts	0x01D1, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    4954:	1d 16       	cp	r1, r29
    4956:	24 f4       	brge	.+8      	; 0x4960 <mousekey_task+0x100>
    4958:	0e 94 7d 22 	call	0x44fa	; 0x44fa <wheel_unit>
    495c:	80 93 d2 01 	sts	0x01D2, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    4960:	80 91 d2 01 	lds	r24, 0x01D2
    4964:	87 ff       	sbrs	r24, 7
    4966:	05 c0       	rjmp	.+10     	; 0x4972 <mousekey_task+0x112>
    4968:	0e 94 7d 22 	call	0x44fa	; 0x44fa <wheel_unit>
    496c:	81 95       	neg	r24
    496e:	80 93 d2 01 	sts	0x01D2, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    4972:	1c 16       	cp	r1, r28
    4974:	24 f4       	brge	.+8      	; 0x497e <mousekey_task+0x11e>
    4976:	0e 94 7d 22 	call	0x44fa	; 0x44fa <wheel_unit>
    497a:	80 93 d3 01 	sts	0x01D3, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    497e:	80 91 d3 01 	lds	r24, 0x01D3
    4982:	87 ff       	sbrs	r24, 7
    4984:	05 c0       	rjmp	.+10     	; 0x4990 <mousekey_task+0x130>
    4986:	0e 94 7d 22 	call	0x44fa	; 0x44fa <wheel_unit>
    498a:	81 95       	neg	r24
    498c:	80 93 d3 01 	sts	0x01D3, r24

    mousekey_send();
}
    4990:	df 91       	pop	r29
    4992:	cf 91       	pop	r28
    4994:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    4996:	0c 94 a3 23 	jmp	0x4746	; 0x4746 <mousekey_send>
}
    499a:	df 91       	pop	r29
    499c:	cf 91       	pop	r28
    499e:	1f 91       	pop	r17
    49a0:	08 95       	ret

000049a2 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    49a2:	ef ec       	ldi	r30, 0xCF	; 207
    49a4:	f1 e0       	ldi	r31, 0x01	; 1
    49a6:	85 e0       	ldi	r24, 0x05	; 5
    49a8:	df 01       	movw	r26, r30
    49aa:	1d 92       	st	X+, r1
    49ac:	8a 95       	dec	r24
    49ae:	e9 f7       	brne	.-6      	; 0x49aa <mousekey_clear+0x8>
    mousekey_repeat = 0;
    49b0:	10 92 ce 01 	sts	0x01CE, r1
    mousekey_accel = 0;
    49b4:	10 92 cd 01 	sts	0x01CD, r1
    49b8:	08 95       	ret

000049ba <command_console_help>:
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\n----- Console Help -----\n");
    49ba:	84 e3       	ldi	r24, 0x34	; 52
    49bc:	99 e0       	ldi	r25, 0x09	; 9
    49be:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("ESC/q:	quit\n");
    49c2:	87 e2       	ldi	r24, 0x27	; 39
    49c4:	99 e0       	ldi	r25, 0x09	; 9
    49c6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
#ifdef MOUSEKEY_ENABLE
    print("m:	mousekey\n");
    49ca:	8a e1       	ldi	r24, 0x1A	; 26
    49cc:	99 e0       	ldi	r25, 0x09	; 9
    49ce:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <xputs>

000049d2 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\n----- Mousekey Parameters Help -----\n");
    49d2:	87 e9       	ldi	r24, 0x97	; 151
    49d4:	98 e0       	ldi	r25, 0x08	; 8
    49d6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("ESC/q:	quit\n");
    49da:	8a e8       	ldi	r24, 0x8A	; 138
    49dc:	98 e0       	ldi	r25, 0x08	; 8
    49de:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("1:	select mk_delay(*10ms)\n");
    49e2:	8f e6       	ldi	r24, 0x6F	; 111
    49e4:	98 e0       	ldi	r25, 0x08	; 8
    49e6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("2:	select mk_interval(ms)\n");
    49ea:	84 e5       	ldi	r24, 0x54	; 84
    49ec:	98 e0       	ldi	r25, 0x08	; 8
    49ee:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("3:	select mk_max_speed\n");
    49f2:	8c e3       	ldi	r24, 0x3C	; 60
    49f4:	98 e0       	ldi	r25, 0x08	; 8
    49f6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("4:	select mk_time_to_max\n");
    49fa:	82 e2       	ldi	r24, 0x22	; 34
    49fc:	98 e0       	ldi	r25, 0x08	; 8
    49fe:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("5:	select mk_wheel_max_speed\n");
    4a02:	84 e0       	ldi	r24, 0x04	; 4
    4a04:	98 e0       	ldi	r25, 0x08	; 8
    4a06:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("6:	select mk_wheel_time_to_max\n");
    4a0a:	84 ee       	ldi	r24, 0xE4	; 228
    4a0c:	97 e0       	ldi	r25, 0x07	; 7
    4a0e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("p:	print parameters\n");
    4a12:	8f ec       	ldi	r24, 0xCF	; 207
    4a14:	97 e0       	ldi	r25, 0x07	; 7
    4a16:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("d:	set default values\n");
    4a1a:	88 eb       	ldi	r24, 0xB8	; 184
    4a1c:	97 e0       	ldi	r25, 0x07	; 7
    4a1e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("up:	increase parameters(+1)\n");
    4a22:	8b e9       	ldi	r24, 0x9B	; 155
    4a24:	97 e0       	ldi	r25, 0x07	; 7
    4a26:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("down:	decrease parameters(-1)\n");
    4a2a:	8c e7       	ldi	r24, 0x7C	; 124
    4a2c:	97 e0       	ldi	r25, 0x07	; 7
    4a2e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("pgup:	increase parameters(+10)\n");
    4a32:	8c e5       	ldi	r24, 0x5C	; 92
    4a34:	97 e0       	ldi	r25, 0x07	; 7
    4a36:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("pgdown:	decrease parameters(-10)\n");
    4a3a:	8a e3       	ldi	r24, 0x3A	; 58
    4a3c:	97 e0       	ldi	r25, 0x07	; 7
    4a3e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("\nspeed = delta * max_speed * (repeat / time_to_max)\n");
    4a42:	85 e0       	ldi	r24, 0x05	; 5
    4a44:	97 e0       	ldi	r25, 0x07	; 7
    4a46:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("where delta: cursor="); pdec(MOUSEKEY_MOVE_DELTA);
    4a4a:	80 ef       	ldi	r24, 0xF0	; 240
    4a4c:	96 e0       	ldi	r25, 0x06	; 6
    4a4e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4a52:	1f 92       	push	r1
    4a54:	85 e0       	ldi	r24, 0x05	; 5
    4a56:	8f 93       	push	r24
    4a58:	8d ee       	ldi	r24, 0xED	; 237
    4a5a:	96 e0       	ldi	r25, 0x06	; 6
    4a5c:	9f 93       	push	r25
    4a5e:	8f 93       	push	r24
    4a60:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    print(", wheel="); pdec(MOUSEKEY_WHEEL_DELTA); print("\n");
    4a64:	84 ee       	ldi	r24, 0xE4	; 228
    4a66:	96 e0       	ldi	r25, 0x06	; 6
    4a68:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4a6c:	1f 92       	push	r1
    4a6e:	81 e0       	ldi	r24, 0x01	; 1
    4a70:	8f 93       	push	r24
    4a72:	81 ee       	ldi	r24, 0xE1	; 225
    4a74:	96 e0       	ldi	r25, 0x06	; 6
    4a76:	9f 93       	push	r25
    4a78:	8f 93       	push	r24
    4a7a:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4a7e:	8f ed       	ldi	r24, 0xDF	; 223
    4a80:	96 e0       	ldi	r25, 0x06	; 6
    4a82:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
    4a86:	8d b7       	in	r24, 0x3d	; 61
    4a88:	9e b7       	in	r25, 0x3e	; 62
    4a8a:	08 96       	adiw	r24, 0x08	; 8
    4a8c:	0f b6       	in	r0, 0x3f	; 63
    4a8e:	f8 94       	cli
    4a90:	9e bf       	out	0x3e, r25	; 62
    4a92:	0f be       	out	0x3f, r0	; 63
    4a94:	8d bf       	out	0x3d, r24	; 61
    4a96:	82 eb       	ldi	r24, 0xB2	; 178
    4a98:	96 e0       	ldi	r25, 0x06	; 6
    4a9a:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <xputs>

00004a9e <mousekey_param_inc>:
}

#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4a9e:	83 30       	cpi	r24, 0x03	; 3
    4aa0:	09 f4       	brne	.+2      	; 0x4aa4 <mousekey_param_inc+0x6>
    4aa2:	59 c0       	rjmp	.+178    	; 0x4b56 <mousekey_param_inc+0xb8>
    4aa4:	28 f4       	brcc	.+10     	; 0x4ab0 <mousekey_param_inc+0x12>
    4aa6:	81 30       	cpi	r24, 0x01	; 1
    4aa8:	61 f0       	breq	.+24     	; 0x4ac2 <mousekey_param_inc+0x24>
    4aaa:	82 30       	cpi	r24, 0x02	; 2
    4aac:	79 f1       	breq	.+94     	; 0x4b0c <mousekey_param_inc+0x6e>
    4aae:	08 95       	ret
    4ab0:	85 30       	cpi	r24, 0x05	; 5
    4ab2:	09 f4       	brne	.+2      	; 0x4ab6 <mousekey_param_inc+0x18>
    4ab4:	9a c0       	rjmp	.+308    	; 0x4bea <mousekey_param_inc+0x14c>
    4ab6:	08 f4       	brcc	.+2      	; 0x4aba <mousekey_param_inc+0x1c>
    4ab8:	73 c0       	rjmp	.+230    	; 0x4ba0 <mousekey_param_inc+0x102>
    4aba:	86 30       	cpi	r24, 0x06	; 6
    4abc:	09 f4       	brne	.+2      	; 0x4ac0 <mousekey_param_inc+0x22>
    4abe:	ba c0       	rjmp	.+372    	; 0x4c34 <mousekey_param_inc+0x196>
    4ac0:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4ac2:	20 91 14 01 	lds	r18, 0x0114
    4ac6:	86 2f       	mov	r24, r22
    4ac8:	90 e0       	ldi	r25, 0x00	; 0
    4aca:	82 0f       	add	r24, r18
    4acc:	91 1d       	adc	r25, r1
    4ace:	8f 3f       	cpi	r24, 0xFF	; 255
    4ad0:	91 05       	cpc	r25, r1
    4ad2:	20 f4       	brcc	.+8      	; 0x4adc <mousekey_param_inc+0x3e>
                mk_delay += inc;
    4ad4:	62 0f       	add	r22, r18
    4ad6:	60 93 14 01 	sts	0x0114, r22
    4ada:	03 c0       	rjmp	.+6      	; 0x4ae2 <mousekey_param_inc+0x44>
            else
                mk_delay = UINT8_MAX;
    4adc:	8f ef       	ldi	r24, 0xFF	; 255
    4ade:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_delay);
    4ae2:	8e e8       	ldi	r24, 0x8E	; 142
    4ae4:	95 e0       	ldi	r25, 0x05	; 5
    4ae6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4aea:	80 91 14 01 	lds	r24, 0x0114
    4aee:	1f 92       	push	r1
    4af0:	8f 93       	push	r24
    4af2:	8b e8       	ldi	r24, 0x8B	; 139
    4af4:	95 e0       	ldi	r25, 0x05	; 5
    4af6:	9f 93       	push	r25
    4af8:	8f 93       	push	r24
    4afa:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4afe:	0f 90       	pop	r0
    4b00:	0f 90       	pop	r0
    4b02:	0f 90       	pop	r0
    4b04:	0f 90       	pop	r0
    4b06:	89 e8       	ldi	r24, 0x89	; 137
    4b08:	95 e0       	ldi	r25, 0x05	; 5
    4b0a:	b8 c0       	rjmp	.+368    	; 0x4c7c <mousekey_param_inc+0x1de>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4b0c:	20 91 13 01 	lds	r18, 0x0113
    4b10:	86 2f       	mov	r24, r22
    4b12:	90 e0       	ldi	r25, 0x00	; 0
    4b14:	82 0f       	add	r24, r18
    4b16:	91 1d       	adc	r25, r1
    4b18:	8f 3f       	cpi	r24, 0xFF	; 255
    4b1a:	91 05       	cpc	r25, r1
    4b1c:	20 f4       	brcc	.+8      	; 0x4b26 <mousekey_param_inc+0x88>
                mk_interval += inc;
    4b1e:	62 0f       	add	r22, r18
    4b20:	60 93 13 01 	sts	0x0113, r22
    4b24:	03 c0       	rjmp	.+6      	; 0x4b2c <mousekey_param_inc+0x8e>
            else
                mk_interval = UINT8_MAX;
    4b26:	8f ef       	ldi	r24, 0xFF	; 255
    4b28:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_interval);
    4b2c:	8a e7       	ldi	r24, 0x7A	; 122
    4b2e:	95 e0       	ldi	r25, 0x05	; 5
    4b30:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4b34:	80 91 13 01 	lds	r24, 0x0113
    4b38:	1f 92       	push	r1
    4b3a:	8f 93       	push	r24
    4b3c:	87 e7       	ldi	r24, 0x77	; 119
    4b3e:	95 e0       	ldi	r25, 0x05	; 5
    4b40:	9f 93       	push	r25
    4b42:	8f 93       	push	r24
    4b44:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4b48:	0f 90       	pop	r0
    4b4a:	0f 90       	pop	r0
    4b4c:	0f 90       	pop	r0
    4b4e:	0f 90       	pop	r0
    4b50:	85 e7       	ldi	r24, 0x75	; 117
    4b52:	95 e0       	ldi	r25, 0x05	; 5
    4b54:	93 c0       	rjmp	.+294    	; 0x4c7c <mousekey_param_inc+0x1de>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4b56:	20 91 12 01 	lds	r18, 0x0112
    4b5a:	86 2f       	mov	r24, r22
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	82 0f       	add	r24, r18
    4b60:	91 1d       	adc	r25, r1
    4b62:	8f 3f       	cpi	r24, 0xFF	; 255
    4b64:	91 05       	cpc	r25, r1
    4b66:	20 f4       	brcc	.+8      	; 0x4b70 <mousekey_param_inc+0xd2>
                mk_max_speed += inc;
    4b68:	62 0f       	add	r22, r18
    4b6a:	60 93 12 01 	sts	0x0112, r22
    4b6e:	03 c0       	rjmp	.+6      	; 0x4b76 <mousekey_param_inc+0xd8>
            else
                mk_max_speed = UINT8_MAX;
    4b70:	8f ef       	ldi	r24, 0xFF	; 255
    4b72:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_max_speed);
    4b76:	85 e6       	ldi	r24, 0x65	; 101
    4b78:	95 e0       	ldi	r25, 0x05	; 5
    4b7a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4b7e:	80 91 12 01 	lds	r24, 0x0112
    4b82:	1f 92       	push	r1
    4b84:	8f 93       	push	r24
    4b86:	82 e6       	ldi	r24, 0x62	; 98
    4b88:	95 e0       	ldi	r25, 0x05	; 5
    4b8a:	9f 93       	push	r25
    4b8c:	8f 93       	push	r24
    4b8e:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4b92:	0f 90       	pop	r0
    4b94:	0f 90       	pop	r0
    4b96:	0f 90       	pop	r0
    4b98:	0f 90       	pop	r0
    4b9a:	80 e6       	ldi	r24, 0x60	; 96
    4b9c:	95 e0       	ldi	r25, 0x05	; 5
    4b9e:	6e c0       	rjmp	.+220    	; 0x4c7c <mousekey_param_inc+0x1de>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4ba0:	20 91 11 01 	lds	r18, 0x0111
    4ba4:	86 2f       	mov	r24, r22
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	82 0f       	add	r24, r18
    4baa:	91 1d       	adc	r25, r1
    4bac:	8f 3f       	cpi	r24, 0xFF	; 255
    4bae:	91 05       	cpc	r25, r1
    4bb0:	20 f4       	brcc	.+8      	; 0x4bba <mousekey_param_inc+0x11c>
                mk_time_to_max += inc;
    4bb2:	62 0f       	add	r22, r18
    4bb4:	60 93 11 01 	sts	0x0111, r22
    4bb8:	03 c0       	rjmp	.+6      	; 0x4bc0 <mousekey_param_inc+0x122>
            else
                mk_time_to_max = UINT8_MAX;
    4bba:	8f ef       	ldi	r24, 0xFF	; 255
    4bbc:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_time_to_max);
    4bc0:	8e e4       	ldi	r24, 0x4E	; 78
    4bc2:	95 e0       	ldi	r25, 0x05	; 5
    4bc4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4bc8:	80 91 11 01 	lds	r24, 0x0111
    4bcc:	1f 92       	push	r1
    4bce:	8f 93       	push	r24
    4bd0:	8b e4       	ldi	r24, 0x4B	; 75
    4bd2:	95 e0       	ldi	r25, 0x05	; 5
    4bd4:	9f 93       	push	r25
    4bd6:	8f 93       	push	r24
    4bd8:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4bdc:	0f 90       	pop	r0
    4bde:	0f 90       	pop	r0
    4be0:	0f 90       	pop	r0
    4be2:	0f 90       	pop	r0
    4be4:	89 e4       	ldi	r24, 0x49	; 73
    4be6:	95 e0       	ldi	r25, 0x05	; 5
    4be8:	49 c0       	rjmp	.+146    	; 0x4c7c <mousekey_param_inc+0x1de>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4bea:	20 91 10 01 	lds	r18, 0x0110
    4bee:	86 2f       	mov	r24, r22
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	82 0f       	add	r24, r18
    4bf4:	91 1d       	adc	r25, r1
    4bf6:	8f 3f       	cpi	r24, 0xFF	; 255
    4bf8:	91 05       	cpc	r25, r1
    4bfa:	20 f4       	brcc	.+8      	; 0x4c04 <mousekey_param_inc+0x166>
                mk_wheel_max_speed += inc;
    4bfc:	62 0f       	add	r22, r18
    4bfe:	60 93 10 01 	sts	0x0110, r22
    4c02:	03 c0       	rjmp	.+6      	; 0x4c0a <mousekey_param_inc+0x16c>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4c04:	8f ef       	ldi	r24, 0xFF	; 255
    4c06:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4c0a:	83 e3       	ldi	r24, 0x33	; 51
    4c0c:	95 e0       	ldi	r25, 0x05	; 5
    4c0e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4c12:	80 91 10 01 	lds	r24, 0x0110
    4c16:	1f 92       	push	r1
    4c18:	8f 93       	push	r24
    4c1a:	80 e3       	ldi	r24, 0x30	; 48
    4c1c:	95 e0       	ldi	r25, 0x05	; 5
    4c1e:	9f 93       	push	r25
    4c20:	8f 93       	push	r24
    4c22:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4c26:	0f 90       	pop	r0
    4c28:	0f 90       	pop	r0
    4c2a:	0f 90       	pop	r0
    4c2c:	0f 90       	pop	r0
    4c2e:	8e e2       	ldi	r24, 0x2E	; 46
    4c30:	95 e0       	ldi	r25, 0x05	; 5
    4c32:	24 c0       	rjmp	.+72     	; 0x4c7c <mousekey_param_inc+0x1de>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4c34:	20 91 0f 01 	lds	r18, 0x010F
    4c38:	86 2f       	mov	r24, r22
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	82 0f       	add	r24, r18
    4c3e:	91 1d       	adc	r25, r1
    4c40:	8f 3f       	cpi	r24, 0xFF	; 255
    4c42:	91 05       	cpc	r25, r1
    4c44:	20 f4       	brcc	.+8      	; 0x4c4e <mousekey_param_inc+0x1b0>
                mk_wheel_time_to_max += inc;
    4c46:	62 0f       	add	r22, r18
    4c48:	60 93 0f 01 	sts	0x010F, r22
    4c4c:	03 c0       	rjmp	.+6      	; 0x4c54 <mousekey_param_inc+0x1b6>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4c4e:	8f ef       	ldi	r24, 0xFF	; 255
    4c50:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4c54:	86 e1       	ldi	r24, 0x16	; 22
    4c56:	95 e0       	ldi	r25, 0x05	; 5
    4c58:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4c5c:	80 91 0f 01 	lds	r24, 0x010F
    4c60:	1f 92       	push	r1
    4c62:	8f 93       	push	r24
    4c64:	83 e1       	ldi	r24, 0x13	; 19
    4c66:	95 e0       	ldi	r25, 0x05	; 5
    4c68:	9f 93       	push	r25
    4c6a:	8f 93       	push	r24
    4c6c:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4c70:	0f 90       	pop	r0
    4c72:	0f 90       	pop	r0
    4c74:	0f 90       	pop	r0
    4c76:	0f 90       	pop	r0
    4c78:	81 e1       	ldi	r24, 0x11	; 17
    4c7a:	95 e0       	ldi	r25, 0x05	; 5
    4c7c:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <xputs>

00004c80 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4c80:	83 30       	cpi	r24, 0x03	; 3
    4c82:	09 f4       	brne	.+2      	; 0x4c86 <mousekey_param_dec+0x6>
    4c84:	4d c0       	rjmp	.+154    	; 0x4d20 <mousekey_param_dec+0xa0>
    4c86:	28 f4       	brcc	.+10     	; 0x4c92 <mousekey_param_dec+0x12>
    4c88:	81 30       	cpi	r24, 0x01	; 1
    4c8a:	61 f0       	breq	.+24     	; 0x4ca4 <mousekey_param_dec+0x24>
    4c8c:	82 30       	cpi	r24, 0x02	; 2
    4c8e:	49 f1       	breq	.+82     	; 0x4ce2 <mousekey_param_dec+0x62>
    4c90:	08 95       	ret
    4c92:	85 30       	cpi	r24, 0x05	; 5
    4c94:	09 f4       	brne	.+2      	; 0x4c98 <mousekey_param_dec+0x18>
    4c96:	82 c0       	rjmp	.+260    	; 0x4d9c <mousekey_param_dec+0x11c>
    4c98:	08 f4       	brcc	.+2      	; 0x4c9c <mousekey_param_dec+0x1c>
    4c9a:	61 c0       	rjmp	.+194    	; 0x4d5e <mousekey_param_dec+0xde>
    4c9c:	86 30       	cpi	r24, 0x06	; 6
    4c9e:	09 f4       	brne	.+2      	; 0x4ca2 <mousekey_param_dec+0x22>
    4ca0:	9c c0       	rjmp	.+312    	; 0x4dda <mousekey_param_dec+0x15a>
    4ca2:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4ca4:	80 91 14 01 	lds	r24, 0x0114
    4ca8:	68 17       	cp	r22, r24
    4caa:	20 f4       	brcc	.+8      	; 0x4cb4 <mousekey_param_dec+0x34>
                mk_delay -= dec;
    4cac:	86 1b       	sub	r24, r22
    4cae:	80 93 14 01 	sts	0x0114, r24
    4cb2:	02 c0       	rjmp	.+4      	; 0x4cb8 <mousekey_param_dec+0x38>
            else
                mk_delay = 0;
    4cb4:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_delay);
    4cb8:	85 e0       	ldi	r24, 0x05	; 5
    4cba:	95 e0       	ldi	r25, 0x05	; 5
    4cbc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4cc0:	80 91 14 01 	lds	r24, 0x0114
    4cc4:	1f 92       	push	r1
    4cc6:	8f 93       	push	r24
    4cc8:	82 e0       	ldi	r24, 0x02	; 2
    4cca:	95 e0       	ldi	r25, 0x05	; 5
    4ccc:	9f 93       	push	r25
    4cce:	8f 93       	push	r24
    4cd0:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4cd4:	0f 90       	pop	r0
    4cd6:	0f 90       	pop	r0
    4cd8:	0f 90       	pop	r0
    4cda:	0f 90       	pop	r0
    4cdc:	80 e0       	ldi	r24, 0x00	; 0
    4cde:	95 e0       	ldi	r25, 0x05	; 5
    4ce0:	9a c0       	rjmp	.+308    	; 0x4e16 <mousekey_param_dec+0x196>
            break;
        case 2:
            if (mk_interval > dec)
    4ce2:	80 91 13 01 	lds	r24, 0x0113
    4ce6:	68 17       	cp	r22, r24
    4ce8:	20 f4       	brcc	.+8      	; 0x4cf2 <mousekey_param_dec+0x72>
                mk_interval -= dec;
    4cea:	86 1b       	sub	r24, r22
    4cec:	80 93 13 01 	sts	0x0113, r24
    4cf0:	02 c0       	rjmp	.+4      	; 0x4cf6 <mousekey_param_dec+0x76>
            else
                mk_interval = 0;
    4cf2:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_interval);
    4cf6:	81 ef       	ldi	r24, 0xF1	; 241
    4cf8:	94 e0       	ldi	r25, 0x04	; 4
    4cfa:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4cfe:	80 91 13 01 	lds	r24, 0x0113
    4d02:	1f 92       	push	r1
    4d04:	8f 93       	push	r24
    4d06:	8e ee       	ldi	r24, 0xEE	; 238
    4d08:	94 e0       	ldi	r25, 0x04	; 4
    4d0a:	9f 93       	push	r25
    4d0c:	8f 93       	push	r24
    4d0e:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4d12:	0f 90       	pop	r0
    4d14:	0f 90       	pop	r0
    4d16:	0f 90       	pop	r0
    4d18:	0f 90       	pop	r0
    4d1a:	8c ee       	ldi	r24, 0xEC	; 236
    4d1c:	94 e0       	ldi	r25, 0x04	; 4
    4d1e:	7b c0       	rjmp	.+246    	; 0x4e16 <mousekey_param_dec+0x196>
            break;
        case 3:
            if (mk_max_speed > dec)
    4d20:	80 91 12 01 	lds	r24, 0x0112
    4d24:	68 17       	cp	r22, r24
    4d26:	20 f4       	brcc	.+8      	; 0x4d30 <mousekey_param_dec+0xb0>
                mk_max_speed -= dec;
    4d28:	86 1b       	sub	r24, r22
    4d2a:	80 93 12 01 	sts	0x0112, r24
    4d2e:	02 c0       	rjmp	.+4      	; 0x4d34 <mousekey_param_dec+0xb4>
            else
                mk_max_speed = 0;
    4d30:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_max_speed);
    4d34:	8c ed       	ldi	r24, 0xDC	; 220
    4d36:	94 e0       	ldi	r25, 0x04	; 4
    4d38:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4d3c:	80 91 12 01 	lds	r24, 0x0112
    4d40:	1f 92       	push	r1
    4d42:	8f 93       	push	r24
    4d44:	89 ed       	ldi	r24, 0xD9	; 217
    4d46:	94 e0       	ldi	r25, 0x04	; 4
    4d48:	9f 93       	push	r25
    4d4a:	8f 93       	push	r24
    4d4c:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4d50:	0f 90       	pop	r0
    4d52:	0f 90       	pop	r0
    4d54:	0f 90       	pop	r0
    4d56:	0f 90       	pop	r0
    4d58:	87 ed       	ldi	r24, 0xD7	; 215
    4d5a:	94 e0       	ldi	r25, 0x04	; 4
    4d5c:	5c c0       	rjmp	.+184    	; 0x4e16 <mousekey_param_dec+0x196>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4d5e:	80 91 11 01 	lds	r24, 0x0111
    4d62:	68 17       	cp	r22, r24
    4d64:	20 f4       	brcc	.+8      	; 0x4d6e <mousekey_param_dec+0xee>
                mk_time_to_max -= dec;
    4d66:	86 1b       	sub	r24, r22
    4d68:	80 93 11 01 	sts	0x0111, r24
    4d6c:	02 c0       	rjmp	.+4      	; 0x4d72 <mousekey_param_dec+0xf2>
            else
                mk_time_to_max = 0;
    4d6e:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_time_to_max);
    4d72:	85 ec       	ldi	r24, 0xC5	; 197
    4d74:	94 e0       	ldi	r25, 0x04	; 4
    4d76:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4d7a:	80 91 11 01 	lds	r24, 0x0111
    4d7e:	1f 92       	push	r1
    4d80:	8f 93       	push	r24
    4d82:	82 ec       	ldi	r24, 0xC2	; 194
    4d84:	94 e0       	ldi	r25, 0x04	; 4
    4d86:	9f 93       	push	r25
    4d88:	8f 93       	push	r24
    4d8a:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4d8e:	0f 90       	pop	r0
    4d90:	0f 90       	pop	r0
    4d92:	0f 90       	pop	r0
    4d94:	0f 90       	pop	r0
    4d96:	80 ec       	ldi	r24, 0xC0	; 192
    4d98:	94 e0       	ldi	r25, 0x04	; 4
    4d9a:	3d c0       	rjmp	.+122    	; 0x4e16 <mousekey_param_dec+0x196>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4d9c:	80 91 10 01 	lds	r24, 0x0110
    4da0:	68 17       	cp	r22, r24
    4da2:	20 f4       	brcc	.+8      	; 0x4dac <mousekey_param_dec+0x12c>
                mk_wheel_max_speed -= dec;
    4da4:	86 1b       	sub	r24, r22
    4da6:	80 93 10 01 	sts	0x0110, r24
    4daa:	02 c0       	rjmp	.+4      	; 0x4db0 <mousekey_param_dec+0x130>
            else
                mk_wheel_max_speed = 0;
    4dac:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4db0:	8a ea       	ldi	r24, 0xAA	; 170
    4db2:	94 e0       	ldi	r25, 0x04	; 4
    4db4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4db8:	80 91 10 01 	lds	r24, 0x0110
    4dbc:	1f 92       	push	r1
    4dbe:	8f 93       	push	r24
    4dc0:	87 ea       	ldi	r24, 0xA7	; 167
    4dc2:	94 e0       	ldi	r25, 0x04	; 4
    4dc4:	9f 93       	push	r25
    4dc6:	8f 93       	push	r24
    4dc8:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4dcc:	0f 90       	pop	r0
    4dce:	0f 90       	pop	r0
    4dd0:	0f 90       	pop	r0
    4dd2:	0f 90       	pop	r0
    4dd4:	85 ea       	ldi	r24, 0xA5	; 165
    4dd6:	94 e0       	ldi	r25, 0x04	; 4
    4dd8:	1e c0       	rjmp	.+60     	; 0x4e16 <mousekey_param_dec+0x196>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4dda:	80 91 0f 01 	lds	r24, 0x010F
    4dde:	68 17       	cp	r22, r24
    4de0:	20 f4       	brcc	.+8      	; 0x4dea <mousekey_param_dec+0x16a>
                mk_wheel_time_to_max -= dec;
    4de2:	86 1b       	sub	r24, r22
    4de4:	80 93 0f 01 	sts	0x010F, r24
    4de8:	02 c0       	rjmp	.+4      	; 0x4dee <mousekey_param_dec+0x16e>
            else
                mk_wheel_time_to_max = 0;
    4dea:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4dee:	8d e8       	ldi	r24, 0x8D	; 141
    4df0:	94 e0       	ldi	r25, 0x04	; 4
    4df2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4df6:	80 91 0f 01 	lds	r24, 0x010F
    4dfa:	1f 92       	push	r1
    4dfc:	8f 93       	push	r24
    4dfe:	8a e8       	ldi	r24, 0x8A	; 138
    4e00:	94 e0       	ldi	r25, 0x04	; 4
    4e02:	9f 93       	push	r25
    4e04:	8f 93       	push	r24
    4e06:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4e0a:	0f 90       	pop	r0
    4e0c:	0f 90       	pop	r0
    4e0e:	0f 90       	pop	r0
    4e10:	0f 90       	pop	r0
    4e12:	88 e8       	ldi	r24, 0x88	; 136
    4e14:	94 e0       	ldi	r25, 0x04	; 4
    4e16:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <xputs>

00004e1a <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4e1a:	cf 93       	push	r28
    4e1c:	c8 2f       	mov	r28, r24
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    4e1e:	83 e0       	ldi	r24, 0x03	; 3
    4e20:	99 e0       	ldi	r25, 0x09	; 9
    4e22:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4e26:	60 91 ac 01 	lds	r22, 0x01AC
    4e2a:	70 91 ad 01 	lds	r23, 0x01AD
    4e2e:	80 91 ae 01 	lds	r24, 0x01AE
    4e32:	90 91 af 01 	lds	r25, 0x01AF
    4e36:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <biton32>
    4e3a:	1f 92       	push	r1
    4e3c:	8f 93       	push	r24
    4e3e:	20 e0       	ldi	r18, 0x00	; 0
    4e40:	39 e0       	ldi	r19, 0x09	; 9
    4e42:	3f 93       	push	r19
    4e44:	2f 93       	push	r18
    4e46:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    print(" to "); print_dec(layer); print("\n");
    4e4a:	8b ef       	ldi	r24, 0xFB	; 251
    4e4c:	98 e0       	ldi	r25, 0x08	; 8
    4e4e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4e52:	1f 92       	push	r1
    4e54:	cf 93       	push	r28
    4e56:	28 ef       	ldi	r18, 0xF8	; 248
    4e58:	38 e0       	ldi	r19, 0x08	; 8
    4e5a:	3f 93       	push	r19
    4e5c:	2f 93       	push	r18
    4e5e:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4e62:	86 ef       	ldi	r24, 0xF6	; 246
    4e64:	98 e0       	ldi	r25, 0x08	; 8
    4e66:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    default_layer_set(1UL<<layer);
    4e6a:	61 e0       	ldi	r22, 0x01	; 1
    4e6c:	70 e0       	ldi	r23, 0x00	; 0
    4e6e:	80 e0       	ldi	r24, 0x00	; 0
    4e70:	90 e0       	ldi	r25, 0x00	; 0
    4e72:	04 c0       	rjmp	.+8      	; 0x4e7c <switch_default_layer+0x62>
    4e74:	66 0f       	add	r22, r22
    4e76:	77 1f       	adc	r23, r23
    4e78:	88 1f       	adc	r24, r24
    4e7a:	99 1f       	adc	r25, r25
    4e7c:	ca 95       	dec	r28
    4e7e:	d2 f7       	brpl	.-12     	; 0x4e74 <switch_default_layer+0x5a>
    4e80:	0e 94 89 1b 	call	0x3712	; 0x3712 <default_layer_set>
    clear_keyboard();
    4e84:	8d b7       	in	r24, 0x3d	; 61
    4e86:	9e b7       	in	r25, 0x3e	; 62
    4e88:	08 96       	adiw	r24, 0x08	; 8
    4e8a:	0f b6       	in	r0, 0x3f	; 63
    4e8c:	f8 94       	cli
    4e8e:	9e bf       	out	0x3e, r25	; 62
    4e90:	0f be       	out	0x3f, r0	; 63
    4e92:	8d bf       	out	0x3d, r24	; 61
}
    4e94:	cf 91       	pop	r28
static void switch_default_layer(uint8_t layer)
{
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    print(" to "); print_dec(layer); print("\n");
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4e96:	0c 94 95 17 	jmp	0x2f2a	; 0x2f2a <clear_keyboard>

00004e9a <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4e9a:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    4e9c:	48 2f       	mov	r20, r24
    4e9e:	50 e0       	ldi	r21, 0x00	; 0
    4ea0:	fa 01       	movw	r30, r20
    4ea2:	36 97       	sbiw	r30, 0x06	; 6
    4ea4:	e3 34       	cpi	r30, 0x43	; 67
    4ea6:	f1 05       	cpc	r31, r1
    4ea8:	08 f0       	brcs	.+2      	; 0x4eac <command_common+0x12>
    4eaa:	ae c2       	rjmp	.+1372   	; 0x5408 <command_common+0x56e>
    4eac:	e0 59       	subi	r30, 0x90	; 144
    4eae:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb0:	0c 94 b6 2c 	jmp	0x596c	; 0x596c <__tablejump2__>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4eb4:	89 e2       	ldi	r24, 0x29	; 41
    4eb6:	9f e0       	ldi	r25, 0x0F	; 15
    4eb8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4ebc:	81 e6       	ldi	r24, 0x61	; 97
    4ebe:	9c e0       	ldi	r25, 0x0C	; 12
    4ec0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4ec4:	0e 94 23 22 	call	0x4446	; 0x4446 <eeconfig_read_default_layer>
    4ec8:	1f 92       	push	r1
    4eca:	8f 93       	push	r24
    4ecc:	8e e5       	ldi	r24, 0x5E	; 94
    4ece:	9c e0       	ldi	r25, 0x0C	; 12
    4ed0:	9f 93       	push	r25
    4ed2:	8f 93       	push	r24
    4ed4:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4ed8:	8c e5       	ldi	r24, 0x5C	; 92
    4eda:	9c e0       	ldi	r25, 0x0C	; 12
    4edc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4ee0:	0e 94 1a 22 	call	0x4434	; 0x4434 <eeconfig_read_debug>
    4ee4:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4ee6:	89 e4       	ldi	r24, 0x49	; 73
    4ee8:	9c e0       	ldi	r25, 0x0C	; 12
    4eea:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4eee:	1f 92       	push	r1
    4ef0:	cf 93       	push	r28
    4ef2:	24 e4       	ldi	r18, 0x44	; 68
    4ef4:	3c e0       	ldi	r19, 0x0C	; 12
    4ef6:	3f 93       	push	r19
    4ef8:	2f 93       	push	r18
    4efa:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4efe:	82 e4       	ldi	r24, 0x42	; 66
    4f00:	9c e0       	ldi	r25, 0x0C	; 12
    4f02:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4f06:	88 e3       	ldi	r24, 0x38	; 56
    4f08:	9c e0       	ldi	r25, 0x0C	; 12
    4f0a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4f0e:	8c 2f       	mov	r24, r28
    4f10:	81 70       	andi	r24, 0x01	; 1
    4f12:	1f 92       	push	r1
    4f14:	8f 93       	push	r24
    4f16:	25 e3       	ldi	r18, 0x35	; 53
    4f18:	3c e0       	ldi	r19, 0x0C	; 12
    4f1a:	3f 93       	push	r19
    4f1c:	2f 93       	push	r18
    4f1e:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4f22:	83 e3       	ldi	r24, 0x33	; 51
    4f24:	9c e0       	ldi	r25, 0x0C	; 12
    4f26:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4f2a:	89 e2       	ldi	r24, 0x29	; 41
    4f2c:	9c e0       	ldi	r25, 0x0C	; 12
    4f2e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4f32:	c1 fb       	bst	r28, 1
    4f34:	88 27       	eor	r24, r24
    4f36:	80 f9       	bld	r24, 0
    4f38:	1f 92       	push	r1
    4f3a:	8f 93       	push	r24
    4f3c:	26 e2       	ldi	r18, 0x26	; 38
    4f3e:	3c e0       	ldi	r19, 0x0C	; 12
    4f40:	3f 93       	push	r19
    4f42:	2f 93       	push	r18
    4f44:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4f48:	84 e2       	ldi	r24, 0x24	; 36
    4f4a:	9c e0       	ldi	r25, 0x0C	; 12
    4f4c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4f50:	88 e1       	ldi	r24, 0x18	; 24
    4f52:	9c e0       	ldi	r25, 0x0C	; 12
    4f54:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4f58:	c2 fb       	bst	r28, 2
    4f5a:	88 27       	eor	r24, r24
    4f5c:	80 f9       	bld	r24, 0
    4f5e:	1f 92       	push	r1
    4f60:	8f 93       	push	r24
    4f62:	25 e1       	ldi	r18, 0x15	; 21
    4f64:	3c e0       	ldi	r19, 0x0C	; 12
    4f66:	3f 93       	push	r19
    4f68:	2f 93       	push	r18
    4f6a:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4f6e:	83 e1       	ldi	r24, 0x13	; 19
    4f70:	9c e0       	ldi	r25, 0x0C	; 12
    4f72:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4f76:	8a e0       	ldi	r24, 0x0A	; 10
    4f78:	9c e0       	ldi	r25, 0x0C	; 12
    4f7a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4f7e:	c3 fb       	bst	r28, 3
    4f80:	cc 27       	eor	r28, r28
    4f82:	c0 f9       	bld	r28, 0
    4f84:	1f 92       	push	r1
    4f86:	cf 93       	push	r28
    4f88:	87 e0       	ldi	r24, 0x07	; 7
    4f8a:	9c e0       	ldi	r25, 0x0C	; 12
    4f8c:	9f 93       	push	r25
    4f8e:	8f 93       	push	r24
    4f90:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4f94:	85 e0       	ldi	r24, 0x05	; 5
    4f96:	9c e0       	ldi	r25, 0x0C	; 12
    4f98:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4f9c:	0e 94 2c 22 	call	0x4458	; 0x4458 <eeconfig_read_keymap>
    4fa0:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4fa2:	81 ef       	ldi	r24, 0xF1	; 241
    4fa4:	9b e0       	ldi	r25, 0x0B	; 11
    4fa6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4faa:	1f 92       	push	r1
    4fac:	cf 93       	push	r28
    4fae:	2c ee       	ldi	r18, 0xEC	; 236
    4fb0:	3b e0       	ldi	r19, 0x0B	; 11
    4fb2:	3f 93       	push	r19
    4fb4:	2f 93       	push	r18
    4fb6:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4fba:	8a ee       	ldi	r24, 0xEA	; 234
    4fbc:	9b e0       	ldi	r25, 0x0B	; 11
    4fbe:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4fc2:	81 ed       	ldi	r24, 0xD1	; 209
    4fc4:	9b e0       	ldi	r25, 0x0B	; 11
    4fc6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4fca:	8c 2f       	mov	r24, r28
    4fcc:	81 70       	andi	r24, 0x01	; 1
    4fce:	1f 92       	push	r1
    4fd0:	8f 93       	push	r24
    4fd2:	2e ec       	ldi	r18, 0xCE	; 206
    4fd4:	3b e0       	ldi	r19, 0x0B	; 11
    4fd6:	3f 93       	push	r19
    4fd8:	2f 93       	push	r18
    4fda:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    4fde:	8d b7       	in	r24, 0x3d	; 61
    4fe0:	9e b7       	in	r25, 0x3e	; 62
    4fe2:	80 96       	adiw	r24, 0x20	; 32
    4fe4:	0f b6       	in	r0, 0x3f	; 63
    4fe6:	f8 94       	cli
    4fe8:	9e bf       	out	0x3e, r25	; 62
    4fea:	0f be       	out	0x3f, r0	; 63
    4fec:	8d bf       	out	0x3d, r24	; 61
    4fee:	8c ec       	ldi	r24, 0xCC	; 204
    4ff0:	9b e0       	ldi	r25, 0x0B	; 11
    4ff2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4ff6:	85 eb       	ldi	r24, 0xB5	; 181
    4ff8:	9b e0       	ldi	r25, 0x0B	; 11
    4ffa:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    4ffe:	c1 fb       	bst	r28, 1
    5000:	88 27       	eor	r24, r24
    5002:	80 f9       	bld	r24, 0
    5004:	1f 92       	push	r1
    5006:	8f 93       	push	r24
    5008:	22 eb       	ldi	r18, 0xB2	; 178
    500a:	3b e0       	ldi	r19, 0x0B	; 11
    500c:	3f 93       	push	r19
    500e:	2f 93       	push	r18
    5010:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    5014:	80 eb       	ldi	r24, 0xB0	; 176
    5016:	9b e0       	ldi	r25, 0x0B	; 11
    5018:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    501c:	8e e9       	ldi	r24, 0x9E	; 158
    501e:	9b e0       	ldi	r25, 0x0B	; 11
    5020:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    5024:	c2 fb       	bst	r28, 2
    5026:	88 27       	eor	r24, r24
    5028:	80 f9       	bld	r24, 0
    502a:	1f 92       	push	r1
    502c:	8f 93       	push	r24
    502e:	2b e9       	ldi	r18, 0x9B	; 155
    5030:	3b e0       	ldi	r19, 0x0B	; 11
    5032:	3f 93       	push	r19
    5034:	2f 93       	push	r18
    5036:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    503a:	89 e9       	ldi	r24, 0x99	; 153
    503c:	9b e0       	ldi	r25, 0x0B	; 11
    503e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    5042:	87 e8       	ldi	r24, 0x87	; 135
    5044:	9b e0       	ldi	r25, 0x0B	; 11
    5046:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    504a:	c3 fb       	bst	r28, 3
    504c:	88 27       	eor	r24, r24
    504e:	80 f9       	bld	r24, 0
    5050:	1f 92       	push	r1
    5052:	8f 93       	push	r24
    5054:	24 e8       	ldi	r18, 0x84	; 132
    5056:	3b e0       	ldi	r19, 0x0B	; 11
    5058:	3f 93       	push	r19
    505a:	2f 93       	push	r18
    505c:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    5060:	82 e8       	ldi	r24, 0x82	; 130
    5062:	9b e0       	ldi	r25, 0x0B	; 11
    5064:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    5068:	88 e7       	ldi	r24, 0x78	; 120
    506a:	9b e0       	ldi	r25, 0x0B	; 11
    506c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    5070:	c4 fb       	bst	r28, 4
    5072:	88 27       	eor	r24, r24
    5074:	80 f9       	bld	r24, 0
    5076:	1f 92       	push	r1
    5078:	8f 93       	push	r24
    507a:	25 e7       	ldi	r18, 0x75	; 117
    507c:	3b e0       	ldi	r19, 0x0B	; 11
    507e:	3f 93       	push	r19
    5080:	2f 93       	push	r18
    5082:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    5086:	83 e7       	ldi	r24, 0x73	; 115
    5088:	9b e0       	ldi	r25, 0x0B	; 11
    508a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    508e:	81 e6       	ldi	r24, 0x61	; 97
    5090:	9b e0       	ldi	r25, 0x0B	; 11
    5092:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    5096:	c5 fb       	bst	r28, 5
    5098:	88 27       	eor	r24, r24
    509a:	80 f9       	bld	r24, 0
    509c:	1f 92       	push	r1
    509e:	8f 93       	push	r24
    50a0:	2e e5       	ldi	r18, 0x5E	; 94
    50a2:	3b e0       	ldi	r19, 0x0B	; 11
    50a4:	3f 93       	push	r19
    50a6:	2f 93       	push	r18
    50a8:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    50ac:	8c e5       	ldi	r24, 0x5C	; 92
    50ae:	9b e0       	ldi	r25, 0x0B	; 11
    50b0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    50b4:	80 e4       	ldi	r24, 0x40	; 64
    50b6:	9b e0       	ldi	r25, 0x0B	; 11
    50b8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    50bc:	c6 fb       	bst	r28, 6
    50be:	88 27       	eor	r24, r24
    50c0:	80 f9       	bld	r24, 0
    50c2:	1f 92       	push	r1
    50c4:	8f 93       	push	r24
    50c6:	2d e3       	ldi	r18, 0x3D	; 61
    50c8:	3b e0       	ldi	r19, 0x0B	; 11
    50ca:	3f 93       	push	r19
    50cc:	2f 93       	push	r18
    50ce:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    50d2:	8b e3       	ldi	r24, 0x3B	; 59
    50d4:	9b e0       	ldi	r25, 0x0B	; 11
    50d6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    50da:	83 e3       	ldi	r24, 0x33	; 51
    50dc:	9b e0       	ldi	r25, 0x0B	; 11
    50de:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    50e2:	c7 fb       	bst	r28, 7
    50e4:	cc 27       	eor	r28, r28
    50e6:	c0 f9       	bld	r28, 0
    50e8:	1f 92       	push	r1
    50ea:	cf 93       	push	r28
    50ec:	80 e3       	ldi	r24, 0x30	; 48
    50ee:	9b e0       	ldi	r25, 0x0B	; 11
    50f0:	9f 93       	push	r25
    50f2:	8f 93       	push	r24
    50f4:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    50f8:	8e e2       	ldi	r24, 0x2E	; 46
    50fa:	9b e0       	ldi	r25, 0x0B	; 11
    50fc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    5100:	8d b7       	in	r24, 0x3d	; 61
    5102:	9e b7       	in	r25, 0x3e	; 62
    5104:	4c 96       	adiw	r24, 0x1c	; 28
    5106:	0f b6       	in	r0, 0x3f	; 63
    5108:	f8 94       	cli
    510a:	9e bf       	out	0x3e, r25	; 62
    510c:	0f be       	out	0x3f, r0	; 63
    510e:	8d bf       	out	0x3d, r24	; 61
    5110:	1d c0       	rjmp	.+58     	; 0x514c <command_common+0x2b2>
            print("eeconfig:\n");
            print_eeconfig();
            break;
#endif
        case KC_CAPSLOCK:
            if (host_get_driver()) {
    5112:	0e 94 b6 11 	call	0x236c	; 0x236c <host_get_driver>
    5116:	89 2b       	or	r24, r25
    5118:	79 f0       	breq	.+30     	; 0x5138 <command_common+0x29e>
                host_driver = host_get_driver();
    511a:	0e 94 b6 11 	call	0x236c	; 0x236c <host_get_driver>
    511e:	90 93 d6 01 	sts	0x01D6, r25
    5122:	80 93 d5 01 	sts	0x01D5, r24
                clear_keyboard();
    5126:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <clear_keyboard>
                host_set_driver(0);
    512a:	80 e0       	ldi	r24, 0x00	; 0
    512c:	90 e0       	ldi	r25, 0x00	; 0
    512e:	0e 94 b1 11 	call	0x2362	; 0x2362 <host_set_driver>
                print("Locked.\n");
    5132:	80 e2       	ldi	r24, 0x20	; 32
    5134:	9f e0       	ldi	r25, 0x0F	; 15
    5136:	08 c0       	rjmp	.+16     	; 0x5148 <command_common+0x2ae>
            } else {
                host_set_driver(host_driver);
    5138:	80 91 d5 01 	lds	r24, 0x01D5
    513c:	90 91 d6 01 	lds	r25, 0x01D6
    5140:	0e 94 b1 11 	call	0x2362	; 0x2362 <host_set_driver>
                print("Unlocked.\n");
    5144:	85 e1       	ldi	r24, 0x15	; 21
    5146:	9f e0       	ldi	r25, 0x0F	; 15
    5148:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    514c:	c1 e0       	ldi	r28, 0x01	; 1
    514e:	61 c1       	rjmp	.+706    	; 0x5412 <command_common+0x578>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\n----- Command Help -----\n");
    5150:	82 e1       	ldi	r24, 0x12	; 18
    5152:	9b e0       	ldi	r25, 0x0B	; 11
    5154:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("c:	enter console mode\n");
    5158:	8b ef       	ldi	r24, 0xFB	; 251
    515a:	9a e0       	ldi	r25, 0x0A	; 10
    515c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("d:	toggle debug enable\n");
    5160:	83 ee       	ldi	r24, 0xE3	; 227
    5162:	9a e0       	ldi	r25, 0x0A	; 10
    5164:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("x:	toggle matrix debug\n");
    5168:	8b ec       	ldi	r24, 0xCB	; 203
    516a:	9a e0       	ldi	r25, 0x0A	; 10
    516c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("k:	toggle keyboard debug\n");
    5170:	81 eb       	ldi	r24, 0xB1	; 177
    5172:	9a e0       	ldi	r25, 0x0A	; 10
    5174:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("m:	toggle mouse debug\n");
    5178:	8a e9       	ldi	r24, 0x9A	; 154
    517a:	9a e0       	ldi	r25, 0x0A	; 10
    517c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
#ifdef SLEEP_LED_ENABLE
    print("z:	toggle sleep LED test\n");
#endif
    print("v:	print device version & info\n");
    5180:	8a e7       	ldi	r24, 0x7A	; 122
    5182:	9a e0       	ldi	r25, 0x0A	; 10
    5184:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("t:	print timer count\n");
    5188:	84 e6       	ldi	r24, 0x64	; 100
    518a:	9a e0       	ldi	r25, 0x0A	; 10
    518c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("s:	print status\n");
    5190:	83 e5       	ldi	r24, 0x53	; 83
    5192:	9a e0       	ldi	r25, 0x0A	; 10
    5194:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("e:	print eeprom config\n");
    5198:	8b e3       	ldi	r24, 0x3B	; 59
    519a:	9a e0       	ldi	r25, 0x0A	; 10
    519c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
#ifdef NKRO_ENABLE
    print("n:	toggle NKRO\n");
    51a0:	8b e2       	ldi	r24, 0x2B	; 43
    51a2:	9a e0       	ldi	r25, 0x0A	; 10
    51a4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
#endif
    print("0/F10:	switch to Layer0 \n");
    51a8:	81 e1       	ldi	r24, 0x11	; 17
    51aa:	9a e0       	ldi	r25, 0x0A	; 10
    51ac:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("1/F1:	switch to Layer1 \n");
    51b0:	88 ef       	ldi	r24, 0xF8	; 248
    51b2:	99 e0       	ldi	r25, 0x09	; 9
    51b4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("2/F2:	switch to Layer2 \n");
    51b8:	8f ed       	ldi	r24, 0xDF	; 223
    51ba:	99 e0       	ldi	r25, 0x09	; 9
    51bc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("3/F3:	switch to Layer3 \n");
    51c0:	86 ec       	ldi	r24, 0xC6	; 198
    51c2:	99 e0       	ldi	r25, 0x09	; 9
    51c4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("4/F4:	switch to Layer4 \n");
    51c8:	8d ea       	ldi	r24, 0xAD	; 173
    51ca:	99 e0       	ldi	r25, 0x09	; 9
    51cc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("PScr:	power down/remote wake-up\n");
    51d0:	8c e8       	ldi	r24, 0x8C	; 140
    51d2:	99 e0       	ldi	r25, 0x09	; 9
    51d4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("Caps:	Lock Keyboard(Child Proof)\n");
    51d8:	8a e6       	ldi	r24, 0x6A	; 106
    51da:	99 e0       	ldi	r25, 0x09	; 9
    51dc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("Paus:	jump to bootloader\n");
    51e0:	80 e5       	ldi	r24, 0x50	; 80
    51e2:	99 e0       	ldi	r25, 0x09	; 9
    51e4:	b1 cf       	rjmp	.-158    	; 0x5148 <command_common+0x2ae>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    51e6:	80 91 c3 01 	lds	r24, 0x01C3
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    51ea:	81 7f       	andi	r24, 0xF1	; 241
    51ec:	8e 7f       	andi	r24, 0xFE	; 254
    51ee:	80 93 c3 01 	sts	0x01C3, r24
            command_console_help();
    51f2:	0e 94 dd 24 	call	0x49ba	; 0x49ba <command_console_help>
            print("\nEnter Console Mode\n");
    51f6:	80 e0       	ldi	r24, 0x00	; 0
    51f8:	9f e0       	ldi	r25, 0x0F	; 15
    51fa:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
            print("C> ");
    51fe:	8c ef       	ldi	r24, 0xFC	; 252
    5200:	9e e0       	ldi	r25, 0x0E	; 14
    5202:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
            command_state = CONSOLE;
    5206:	81 e0       	ldi	r24, 0x01	; 1
    5208:	80 93 d4 01 	sts	0x01D4, r24
    520c:	9f cf       	rjmp	.-194    	; 0x514c <command_common+0x2b2>
            break;
        case KC_PAUSE:
            clear_keyboard();
    520e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <clear_keyboard>
            print("\n\nJump to bootloader... ");
    5212:	83 ee       	ldi	r24, 0xE3	; 227
    5214:	9e e0       	ldi	r25, 0x0E	; 14
    5216:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    521a:	9f ef       	ldi	r25, 0xFF	; 255
    521c:	23 ed       	ldi	r18, 0xD3	; 211
    521e:	80 e3       	ldi	r24, 0x30	; 48
    5220:	91 50       	subi	r25, 0x01	; 1
    5222:	20 40       	sbci	r18, 0x00	; 0
    5224:	80 40       	sbci	r24, 0x00	; 0
    5226:	e1 f7       	brne	.-8      	; 0x5220 <command_common+0x386>
    5228:	00 c0       	rjmp	.+0      	; 0x522a <command_common+0x390>
    522a:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    522c:	0e 94 58 20 	call	0x40b0	; 0x40b0 <bootloader_jump>
            print("not supported.\n");
    5230:	83 ed       	ldi	r24, 0xD3	; 211
    5232:	9e e0       	ldi	r25, 0x0E	; 14
    5234:	89 cf       	rjmp	.-238    	; 0x5148 <command_common+0x2ae>
            break;
        case KC_D:
            if (debug_enable) {
    5236:	80 91 c3 01 	lds	r24, 0x01C3
    523a:	c8 2f       	mov	r28, r24
    523c:	c1 70       	andi	r28, 0x01	; 1
    523e:	80 ff       	sbrs	r24, 0
    5240:	09 c0       	rjmp	.+18     	; 0x5254 <command_common+0x3ba>
                print("\nDEBUG: disabled.\n");
    5242:	80 ec       	ldi	r24, 0xC0	; 192
    5244:	9e e0       	ldi	r25, 0x0E	; 14
    5246:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
                debug_matrix   = false;
    524a:	80 91 c3 01 	lds	r24, 0x01C3
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    524e:	81 7f       	andi	r24, 0xF1	; 241
    5250:	8e 7f       	andi	r24, 0xFE	; 254
    5252:	44 c0       	rjmp	.+136    	; 0x52dc <command_common+0x442>
            } else {
                print("\nDEBUG: enabled.\n");
    5254:	8e ea       	ldi	r24, 0xAE	; 174
    5256:	9e e0       	ldi	r25, 0x0E	; 14
    5258:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
                debug_enable   = true;
    525c:	80 91 c3 01 	lds	r24, 0x01C3
    5260:	81 60       	ori	r24, 0x01	; 1
    5262:	80 93 c3 01 	sts	0x01C3, r24
    5266:	72 cf       	rjmp	.-284    	; 0x514c <command_common+0x2b2>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    5268:	80 91 c3 01 	lds	r24, 0x01C3
    526c:	81 fb       	bst	r24, 1
    526e:	cc 27       	eor	r28, r28
    5270:	c0 f9       	bld	r28, 0
    5272:	91 e0       	ldi	r25, 0x01	; 1
    5274:	c9 27       	eor	r28, r25
    5276:	c0 fb       	bst	r28, 0
    5278:	81 f9       	bld	r24, 1
    527a:	80 93 c3 01 	sts	0x01C3, r24
            if (debug_matrix) {
    527e:	cc 23       	and	r28, r28
    5280:	19 f0       	breq	.+6      	; 0x5288 <command_common+0x3ee>
                print("\nDEBUG: matrix enabled.\n");
    5282:	85 e9       	ldi	r24, 0x95	; 149
    5284:	9e e0       	ldi	r25, 0x0E	; 14
    5286:	25 c0       	rjmp	.+74     	; 0x52d2 <command_common+0x438>
                debug_enable = true;
            } else {
                print("\nDEBUG: matrix disabled.\n");
    5288:	8b e7       	ldi	r24, 0x7B	; 123
    528a:	9e e0       	ldi	r25, 0x0E	; 14
    528c:	5d cf       	rjmp	.-326    	; 0x5148 <command_common+0x2ae>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    528e:	80 91 c3 01 	lds	r24, 0x01C3
    5292:	82 fb       	bst	r24, 2
    5294:	cc 27       	eor	r28, r28
    5296:	c0 f9       	bld	r28, 0
    5298:	91 e0       	ldi	r25, 0x01	; 1
    529a:	c9 27       	eor	r28, r25
    529c:	c0 fb       	bst	r28, 0
    529e:	82 f9       	bld	r24, 2
    52a0:	80 93 c3 01 	sts	0x01C3, r24
            if (debug_keyboard) {
    52a4:	cc 23       	and	r28, r28
    52a6:	19 f0       	breq	.+6      	; 0x52ae <command_common+0x414>
                print("\nDEBUG: keyboard enabled.\n");
    52a8:	80 e6       	ldi	r24, 0x60	; 96
    52aa:	9e e0       	ldi	r25, 0x0E	; 14
    52ac:	12 c0       	rjmp	.+36     	; 0x52d2 <command_common+0x438>
                debug_enable = true;
            } else {
                print("\nDEBUG: keyboard disabled.\n");
    52ae:	84 e4       	ldi	r24, 0x44	; 68
    52b0:	9e e0       	ldi	r25, 0x0E	; 14
    52b2:	4a cf       	rjmp	.-364    	; 0x5148 <command_common+0x2ae>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    52b4:	80 91 c3 01 	lds	r24, 0x01C3
    52b8:	83 fb       	bst	r24, 3
    52ba:	cc 27       	eor	r28, r28
    52bc:	c0 f9       	bld	r28, 0
    52be:	91 e0       	ldi	r25, 0x01	; 1
    52c0:	c9 27       	eor	r28, r25
    52c2:	c0 fb       	bst	r28, 0
    52c4:	83 f9       	bld	r24, 3
    52c6:	80 93 c3 01 	sts	0x01C3, r24
            if (debug_mouse) {
    52ca:	cc 23       	and	r28, r28
    52cc:	51 f0       	breq	.+20     	; 0x52e2 <command_common+0x448>
                print("\nDEBUG: mouse enabled.\n");
    52ce:	8c e2       	ldi	r24, 0x2C	; 44
    52d0:	9e e0       	ldi	r25, 0x0E	; 14
    52d2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
                debug_enable = true;
    52d6:	80 91 c3 01 	lds	r24, 0x01C3
    52da:	81 60       	ori	r24, 0x01	; 1
    52dc:	80 93 c3 01 	sts	0x01C3, r24
    52e0:	98 c0       	rjmp	.+304    	; 0x5412 <command_common+0x578>
            } else {
                print("\nDEBUG: mouse disabled.\n");
    52e2:	83 e1       	ldi	r24, 0x13	; 19
    52e4:	9e e0       	ldi	r25, 0x0E	; 14
    52e6:	30 cf       	rjmp	.-416    	; 0x5148 <command_common+0x2ae>
            }
            break;
        case KC_V: // print version & information
            print("\n\n----- Version -----\n");
    52e8:	8c ef       	ldi	r24, 0xFC	; 252
    52ea:	9d e0       	ldi	r25, 0x0D	; 13
    52ec:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    52f0:	83 ed       	ldi	r24, 0xD3	; 211
    52f2:	9d e0       	ldi	r25, 0x0D	; 13
    52f4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    52f8:	80 ea       	ldi	r24, 0xA0	; 160
    52fa:	9d e0       	ldi	r25, 0x0D	; 13
    52fc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    5300:	83 e7       	ldi	r24, 0x73	; 115
    5302:	9d e0       	ldi	r25, 0x0D	; 13
    5304:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
            /* build options */
            print("OPTIONS:"
    5308:	8e e2       	ldi	r24, 0x2E	; 46
    530a:	9d e0       	ldi	r25, 0x0D	; 13
    530c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    5310:	80 e0       	ldi	r24, 0x00	; 0
    5312:	9d e0       	ldi	r25, 0x0D	; 13
    5314:	19 cf       	rjmp	.-462    	; 0x5148 <command_common+0x2ae>
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_T: // print timer
            print_val_hex32(timer_count);
    5316:	80 91 c7 01 	lds	r24, 0x01C7
    531a:	90 91 c8 01 	lds	r25, 0x01C8
    531e:	a0 91 c9 01 	lds	r26, 0x01C9
    5322:	b0 91 ca 01 	lds	r27, 0x01CA
    5326:	bf 93       	push	r27
    5328:	af 93       	push	r26
    532a:	9f 93       	push	r25
    532c:	8f 93       	push	r24
    532e:	8c ee       	ldi	r24, 0xEC	; 236
    5330:	9c e0       	ldi	r25, 0x0C	; 12
    5332:	9f 93       	push	r25
    5334:	8f 93       	push	r24
    5336:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
            break;
    533a:	0f 90       	pop	r0
    533c:	0f 90       	pop	r0
    533e:	0f 90       	pop	r0
    5340:	0f 90       	pop	r0
    5342:	0f 90       	pop	r0
    5344:	0f 90       	pop	r0
    5346:	02 cf       	rjmp	.-508    	; 0x514c <command_common+0x2b2>
        case KC_S:
            print("\n\n----- Status -----\n");
    5348:	86 ed       	ldi	r24, 0xD6	; 214
    534a:	9c e0       	ldi	r25, 0x0C	; 12
    534c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
            print_val_hex8(host_keyboard_leds());
    5350:	0e 94 bb 11 	call	0x2376	; 0x2376 <host_keyboard_leds>
    5354:	1f 92       	push	r1
    5356:	8f 93       	push	r24
    5358:	8c eb       	ldi	r24, 0xBC	; 188
    535a:	9c e0       	ldi	r25, 0x0C	; 12
    535c:	9f 93       	push	r25
    535e:	8f 93       	push	r24
    5360:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
            print_val_hex8(keyboard_protocol);
    5364:	80 91 0b 01 	lds	r24, 0x010B
    5368:	1f 92       	push	r1
    536a:	8f 93       	push	r24
    536c:	85 ea       	ldi	r24, 0xA5	; 165
    536e:	9c e0       	ldi	r25, 0x0C	; 12
    5370:	9f 93       	push	r25
    5372:	8f 93       	push	r24
    5374:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
            print_val_hex8(keyboard_idle);
    5378:	80 91 4c 01 	lds	r24, 0x014C
    537c:	1f 92       	push	r1
    537e:	8f 93       	push	r24
    5380:	82 e9       	ldi	r24, 0x92	; 146
    5382:	9c e0       	ldi	r25, 0x0C	; 12
    5384:	9f 93       	push	r25
    5386:	8f 93       	push	r24
    5388:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    538c:	8d b7       	in	r24, 0x3d	; 61
    538e:	9e b7       	in	r25, 0x3e	; 62
    5390:	0c 96       	adiw	r24, 0x0c	; 12
    5392:	0f b6       	in	r0, 0x3f	; 63
    5394:	f8 94       	cli
    5396:	9e bf       	out	0x3e, r25	; 62
    5398:	0f be       	out	0x3f, r0	; 63
    539a:	8d bf       	out	0x3d, r24	; 61
    539c:	d7 ce       	rjmp	.-594    	; 0x514c <command_common+0x2b2>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    539e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    53a2:	c0 91 0c 01 	lds	r28, 0x010C
    53a6:	81 e0       	ldi	r24, 0x01	; 1
    53a8:	c8 27       	eor	r28, r24
    53aa:	c0 93 0c 01 	sts	0x010C, r28
            if (keyboard_nkro)
    53ae:	cc 23       	and	r28, r28
    53b0:	29 f0       	breq	.+10     	; 0x53bc <command_common+0x522>
                print("NKRO: enabled\n");
    53b2:	83 e8       	ldi	r24, 0x83	; 131
    53b4:	9c e0       	ldi	r25, 0x0C	; 12
    53b6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    53ba:	2b c0       	rjmp	.+86     	; 0x5412 <command_common+0x578>
            else
                print("NKRO: disabled\n");
    53bc:	83 e7       	ldi	r24, 0x73	; 115
    53be:	9c e0       	ldi	r25, 0x0C	; 12
    53c0:	c3 ce       	rjmp	.-634    	; 0x5148 <command_common+0x2ae>
                host_system_send(SYSTEM_POWER_DOWN);
                host_system_send(0);
                _delay_ms(500);
            }
#else
            host_system_send(SYSTEM_POWER_DOWN);
    53c2:	81 e8       	ldi	r24, 0x81	; 129
    53c4:	90 e0       	ldi	r25, 0x00	; 0
    53c6:	0e 94 17 12 	call	0x242e	; 0x242e <host_system_send>
    53ca:	9f ef       	ldi	r25, 0xFF	; 255
    53cc:	21 ee       	ldi	r18, 0xE1	; 225
    53ce:	84 e0       	ldi	r24, 0x04	; 4
    53d0:	91 50       	subi	r25, 0x01	; 1
    53d2:	20 40       	sbci	r18, 0x00	; 0
    53d4:	80 40       	sbci	r24, 0x00	; 0
    53d6:	e1 f7       	brne	.-8      	; 0x53d0 <command_common+0x536>
    53d8:	00 c0       	rjmp	.+0      	; 0x53da <command_common+0x540>
    53da:	00 00       	nop
            _delay_ms(100);
            host_system_send(0);
    53dc:	80 e0       	ldi	r24, 0x00	; 0
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	0e 94 17 12 	call	0x242e	; 0x242e <host_system_send>
    53e4:	9f ef       	ldi	r25, 0xFF	; 255
    53e6:	29 e6       	ldi	r18, 0x69	; 105
    53e8:	88 e1       	ldi	r24, 0x18	; 24
    53ea:	91 50       	subi	r25, 0x01	; 1
    53ec:	20 40       	sbci	r18, 0x00	; 0
    53ee:	80 40       	sbci	r24, 0x00	; 0
    53f0:	e1 f7       	brne	.-8      	; 0x53ea <command_common+0x550>
    53f2:	00 c0       	rjmp	.+0      	; 0x53f4 <command_common+0x55a>
    53f4:	00 00       	nop
    53f6:	aa ce       	rjmp	.-684    	; 0x514c <command_common+0x2b2>
            break;
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
            switch_default_layer(0);
    53f8:	80 e0       	ldi	r24, 0x00	; 0
    53fa:	03 c0       	rjmp	.+6      	; 0x5402 <command_common+0x568>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    53fc:	8d 51       	subi	r24, 0x1D	; 29
    53fe:	01 c0       	rjmp	.+2      	; 0x5402 <command_common+0x568>
            break;
        case KC_F1 ... KC_F12:
            switch_default_layer((code - KC_F1) + 1);
    5400:	89 53       	subi	r24, 0x39	; 57
    5402:	0e 94 0d 27 	call	0x4e1a	; 0x4e1a <switch_default_layer>
    5406:	a2 ce       	rjmp	.-700    	; 0x514c <command_common+0x2b2>
            break;
        default:
            print("?");
    5408:	81 e7       	ldi	r24, 0x71	; 113
    540a:	9c e0       	ldi	r25, 0x0C	; 12
    540c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
            return false;
    5410:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    5412:	8c 2f       	mov	r24, r28
    5414:	cf 91       	pop	r28
    5416:	08 95       	ret

00005418 <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    5418:	80 e0       	ldi	r24, 0x00	; 0
    541a:	08 95       	ret

0000541c <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    541c:	80 e0       	ldi	r24, 0x00	; 0
    541e:	08 95       	ret

00005420 <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    5420:	cf 93       	push	r28
    5422:	c8 2f       	mov	r28, r24
    switch (command_state) {
    5424:	80 91 d4 01 	lds	r24, 0x01D4
    5428:	81 30       	cpi	r24, 0x01	; 1
    542a:	71 f0       	breq	.+28     	; 0x5448 <command_proc+0x28>
    542c:	20 f0       	brcs	.+8      	; 0x5436 <command_proc+0x16>
    542e:	82 30       	cpi	r24, 0x02	; 2
    5430:	09 f4       	brne	.+2      	; 0x5434 <command_proc+0x14>
    5432:	4e c0       	rjmp	.+156    	; 0x54d0 <command_proc+0xb0>
    5434:	5d c1       	rjmp	.+698    	; 0x56f0 <command_proc+0x2d0>
        case ONESHOT:
            if (!IS_COMMAND())
    5436:	a0 91 0d 01 	lds	r26, 0x010D
    543a:	b0 91 0e 01 	lds	r27, 0x010E
    543e:	8c 91       	ld	r24, X
    5440:	82 32       	cpi	r24, 0x22	; 34
    5442:	09 f0       	breq	.+2      	; 0x5446 <command_proc+0x26>
    5444:	57 c1       	rjmp	.+686    	; 0x56f4 <command_proc+0x2d4>
    5446:	07 c0       	rjmp	.+14     	; 0x5456 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    5448:	a0 91 0d 01 	lds	r26, 0x010D
    544c:	b0 91 0e 01 	lds	r27, 0x010E
    5450:	8c 91       	ld	r24, X
    5452:	82 32       	cpi	r24, 0x22	; 34
    5454:	49 f4       	brne	.+18     	; 0x5468 <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    5456:	8c 2f       	mov	r24, r28
    5458:	0e 94 0c 2a 	call	0x5418	; 0x5418 <command_extra>
    545c:	81 11       	cpse	r24, r1
    545e:	35 c0       	rjmp	.+106    	; 0x54ca <command_proc+0xaa>
    5460:	8c 2f       	mov	r24, r28
    5462:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <command_common>
    5466:	32 c0       	rjmp	.+100    	; 0x54cc <command_proc+0xac>
            else
                return (command_console_extra(code) || command_console(code));
    5468:	8c 2f       	mov	r24, r28
    546a:	0e 94 0e 2a 	call	0x541c	; 0x541c <command_console_extra>
    546e:	81 11       	cpse	r24, r1
    5470:	2c c0       	rjmp	.+88     	; 0x54ca <command_proc+0xaa>
#endif
}

static bool command_console(uint8_t code)
{
    switch (code) {
    5472:	c4 31       	cpi	r28, 0x14	; 20
    5474:	f1 f0       	breq	.+60     	; 0x54b2 <command_proc+0x92>
    5476:	90 f4       	brcc	.+36     	; 0x549c <command_proc+0x7c>
    5478:	cb 30       	cpi	r28, 0x0B	; 11
    547a:	a1 f0       	breq	.+40     	; 0x54a4 <command_proc+0x84>
    547c:	c0 31       	cpi	r28, 0x10	; 16
    547e:	01 f5       	brne	.+64     	; 0x54c0 <command_proc+0xa0>
            print("\nQuit Console Mode\n");
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    5480:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <mousekey_console_help>
            print("\nEnter Mousekey Console\n");
    5484:	85 ec       	ldi	r24, 0xC5	; 197
    5486:	98 e0       	ldi	r25, 0x08	; 8
    5488:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
            print("M0>");
    548c:	81 ec       	ldi	r24, 0xC1	; 193
    548e:	98 e0       	ldi	r25, 0x08	; 8
    5490:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
            command_state = MOUSEKEY;
    5494:	82 e0       	ldi	r24, 0x02	; 2
    5496:	80 93 d4 01 	sts	0x01D4, r24
    549a:	17 c0       	rjmp	.+46     	; 0x54ca <command_proc+0xaa>
#endif
}

static bool command_console(uint8_t code)
{
    switch (code) {
    549c:	c9 32       	cpi	r28, 0x29	; 41
    549e:	49 f0       	breq	.+18     	; 0x54b2 <command_proc+0x92>
    54a0:	c8 33       	cpi	r28, 0x38	; 56
    54a2:	71 f4       	brne	.+28     	; 0x54c0 <command_proc+0xa0>
        case KC_H:
        case KC_SLASH: /* ? */
            command_console_help();
    54a4:	0e 94 dd 24 	call	0x49ba	; 0x49ba <command_console_help>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    54a8:	82 ef       	ldi	r24, 0xF2	; 242
    54aa:	98 e0       	ldi	r25, 0x08	; 8
    54ac:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    54b0:	0c c0       	rjmp	.+24     	; 0x54ca <command_proc+0xaa>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            print("\nQuit Console Mode\n");
    54b2:	8e ed       	ldi	r24, 0xDE	; 222
    54b4:	98 e0       	ldi	r25, 0x08	; 8
    54b6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
            command_state = ONESHOT;
    54ba:	10 92 d4 01 	sts	0x01D4, r1
    54be:	1c c1       	rjmp	.+568    	; 0x56f8 <command_proc+0x2d8>
            print("M0>");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    54c0:	8f eb       	ldi	r24, 0xBF	; 191
    54c2:	98 e0       	ldi	r25, 0x08	; 8
    54c4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    54c8:	17 c1       	rjmp	.+558    	; 0x56f8 <command_proc+0x2d8>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    54ca:	81 e0       	ldi	r24, 0x01	; 1
    54cc:	81 70       	andi	r24, 0x01	; 1
    54ce:	16 c1       	rjmp	.+556    	; 0x56fc <command_proc+0x2dc>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    54d0:	c8 32       	cpi	r28, 0x28	; 40
    54d2:	28 f5       	brcc	.+74     	; 0x551e <command_proc+0xfe>
    54d4:	ce 31       	cpi	r28, 0x1E	; 30
    54d6:	08 f0       	brcs	.+2      	; 0x54da <command_proc+0xba>
    54d8:	c0 c0       	rjmp	.+384    	; 0x565a <command_proc+0x23a>
    54da:	cb 30       	cpi	r28, 0x0B	; 11
    54dc:	a1 f1       	breq	.+104    	; 0x5546 <command_proc+0x126>
    54de:	d0 f4       	brcc	.+52     	; 0x5514 <command_proc+0xf4>
    54e0:	c7 30       	cpi	r28, 0x07	; 7
    54e2:	09 f0       	breq	.+2      	; 0x54e6 <command_proc+0xc6>
    54e4:	e8 c0       	rjmp	.+464    	; 0x56b6 <command_proc+0x296>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    54e6:	8e e1       	ldi	r24, 0x1E	; 30
    54e8:	80 93 14 01 	sts	0x0114, r24
            mk_interval = MOUSEKEY_INTERVAL;
    54ec:	82 e3       	ldi	r24, 0x32	; 50
    54ee:	80 93 13 01 	sts	0x0113, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    54f2:	8a e0       	ldi	r24, 0x0A	; 10
    54f4:	80 93 12 01 	sts	0x0112, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    54f8:	84 e1       	ldi	r24, 0x14	; 20
    54fa:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    54fe:	88 e0       	ldi	r24, 0x08	; 8
    5500:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    5504:	88 e2       	ldi	r24, 0x28	; 40
    5506:	80 93 0f 01 	sts	0x010F, r24
            print("set default values.\n");
    550a:	87 e6       	ldi	r24, 0x67	; 103
    550c:	96 e0       	ldi	r25, 0x06	; 6
    550e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    5512:	d6 c0       	rjmp	.+428    	; 0x56c0 <command_proc+0x2a0>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5514:	c3 31       	cpi	r28, 0x13	; 19
    5516:	41 f1       	breq	.+80     	; 0x5568 <command_proc+0x148>
    5518:	c4 31       	cpi	r28, 0x14	; 20
    551a:	c1 f0       	breq	.+48     	; 0x554c <command_proc+0x12c>
    551c:	cc c0       	rjmp	.+408    	; 0x56b6 <command_proc+0x296>
    551e:	cb 34       	cpi	r28, 0x4B	; 75
    5520:	09 f4       	brne	.+2      	; 0x5524 <command_proc+0x104>
    5522:	be c0       	rjmp	.+380    	; 0x56a0 <command_proc+0x280>
    5524:	28 f4       	brcc	.+10     	; 0x5530 <command_proc+0x110>
    5526:	c9 32       	cpi	r28, 0x29	; 41
    5528:	89 f0       	breq	.+34     	; 0x554c <command_proc+0x12c>
    552a:	c8 33       	cpi	r28, 0x38	; 56
    552c:	61 f0       	breq	.+24     	; 0x5546 <command_proc+0x126>
    552e:	c3 c0       	rjmp	.+390    	; 0x56b6 <command_proc+0x296>
    5530:	c1 35       	cpi	r28, 0x51	; 81
    5532:	09 f4       	brne	.+2      	; 0x5536 <command_proc+0x116>
    5534:	b3 c0       	rjmp	.+358    	; 0x569c <command_proc+0x27c>
    5536:	c2 35       	cpi	r28, 0x52	; 82
    5538:	09 f4       	brne	.+2      	; 0x553c <command_proc+0x11c>
    553a:	ae c0       	rjmp	.+348    	; 0x5698 <command_proc+0x278>
    553c:	ce 34       	cpi	r28, 0x4E	; 78
    553e:	09 f0       	breq	.+2      	; 0x5542 <command_proc+0x122>
    5540:	ba c0       	rjmp	.+372    	; 0x56b6 <command_proc+0x296>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5542:	6a e0       	ldi	r22, 0x0A	; 10
    5544:	b3 c0       	rjmp	.+358    	; 0x56ac <command_proc+0x28c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    5546:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <mousekey_console_help>
    554a:	ba c0       	rjmp	.+372    	; 0x56c0 <command_proc+0x2a0>
            break;
        case KC_Q:
        case KC_ESC:
            mousekey_param = 0;
    554c:	10 92 d7 01 	sts	0x01D7, r1
            print("\nQuit Mousekey Console\n");
    5550:	8a e9       	ldi	r24, 0x9A	; 154
    5552:	96 e0       	ldi	r25, 0x06	; 6
    5554:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
            print("C> ");
    5558:	86 e9       	ldi	r24, 0x96	; 150
    555a:	96 e0       	ldi	r25, 0x06	; 6
    555c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
            command_state = CONSOLE;
    5560:	81 e0       	ldi	r24, 0x01	; 1
    5562:	80 93 d4 01 	sts	0x01D4, r24
    5566:	ca c0       	rjmp	.+404    	; 0x56fc <command_proc+0x2dc>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\n----- Mousekey Parameters -----\n");
    5568:	8a e3       	ldi	r24, 0x3A	; 58
    556a:	96 e0       	ldi	r25, 0x06	; 6
    556c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("1: mk_delay(*10ms): "); pdec(mk_delay); print("\n");
    5570:	85 e2       	ldi	r24, 0x25	; 37
    5572:	96 e0       	ldi	r25, 0x06	; 6
    5574:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    5578:	80 91 14 01 	lds	r24, 0x0114
    557c:	1f 92       	push	r1
    557e:	8f 93       	push	r24
    5580:	82 e2       	ldi	r24, 0x22	; 34
    5582:	96 e0       	ldi	r25, 0x06	; 6
    5584:	9f 93       	push	r25
    5586:	8f 93       	push	r24
    5588:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    558c:	80 e2       	ldi	r24, 0x20	; 32
    558e:	96 e0       	ldi	r25, 0x06	; 6
    5590:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("2: mk_interval(ms): "); pdec(mk_interval); print("\n");
    5594:	8b e0       	ldi	r24, 0x0B	; 11
    5596:	96 e0       	ldi	r25, 0x06	; 6
    5598:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    559c:	80 91 13 01 	lds	r24, 0x0113
    55a0:	1f 92       	push	r1
    55a2:	8f 93       	push	r24
    55a4:	88 e0       	ldi	r24, 0x08	; 8
    55a6:	96 e0       	ldi	r25, 0x06	; 6
    55a8:	9f 93       	push	r25
    55aa:	8f 93       	push	r24
    55ac:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    55b0:	86 e0       	ldi	r24, 0x06	; 6
    55b2:	96 e0       	ldi	r25, 0x06	; 6
    55b4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("3: mk_max_speed: "); pdec(mk_max_speed); print("\n");
    55b8:	84 ef       	ldi	r24, 0xF4	; 244
    55ba:	95 e0       	ldi	r25, 0x05	; 5
    55bc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    55c0:	80 91 12 01 	lds	r24, 0x0112
    55c4:	1f 92       	push	r1
    55c6:	8f 93       	push	r24
    55c8:	81 ef       	ldi	r24, 0xF1	; 241
    55ca:	95 e0       	ldi	r25, 0x05	; 5
    55cc:	9f 93       	push	r25
    55ce:	8f 93       	push	r24
    55d0:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    55d4:	8f ee       	ldi	r24, 0xEF	; 239
    55d6:	95 e0       	ldi	r25, 0x05	; 5
    55d8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("4: mk_time_to_max: "); pdec(mk_time_to_max); print("\n");
    55dc:	8b ed       	ldi	r24, 0xDB	; 219
    55de:	95 e0       	ldi	r25, 0x05	; 5
    55e0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    55e4:	80 91 11 01 	lds	r24, 0x0111
    55e8:	1f 92       	push	r1
    55ea:	8f 93       	push	r24
    55ec:	88 ed       	ldi	r24, 0xD8	; 216
    55ee:	95 e0       	ldi	r25, 0x05	; 5
    55f0:	9f 93       	push	r25
    55f2:	8f 93       	push	r24
    55f4:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    55f8:	86 ed       	ldi	r24, 0xD6	; 214
    55fa:	95 e0       	ldi	r25, 0x05	; 5
    55fc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("5: mk_wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    5600:	8e eb       	ldi	r24, 0xBE	; 190
    5602:	95 e0       	ldi	r25, 0x05	; 5
    5604:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    5608:	80 91 10 01 	lds	r24, 0x0110
    560c:	1f 92       	push	r1
    560e:	8f 93       	push	r24
    5610:	8b eb       	ldi	r24, 0xBB	; 187
    5612:	95 e0       	ldi	r25, 0x05	; 5
    5614:	9f 93       	push	r25
    5616:	8f 93       	push	r24
    5618:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    561c:	89 eb       	ldi	r24, 0xB9	; 185
    561e:	95 e0       	ldi	r25, 0x05	; 5
    5620:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    print("6: mk_wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5624:	8f e9       	ldi	r24, 0x9F	; 159
    5626:	95 e0       	ldi	r25, 0x05	; 5
    5628:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    562c:	80 91 0f 01 	lds	r24, 0x010F
    5630:	1f 92       	push	r1
    5632:	8f 93       	push	r24
    5634:	8c e9       	ldi	r24, 0x9C	; 156
    5636:	95 e0       	ldi	r25, 0x05	; 5
    5638:	9f 93       	push	r25
    563a:	8f 93       	push	r24
    563c:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    5640:	8a e9       	ldi	r24, 0x9A	; 154
    5642:	95 e0       	ldi	r25, 0x05	; 5
    5644:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    5648:	8d b7       	in	r24, 0x3d	; 61
    564a:	9e b7       	in	r25, 0x3e	; 62
    564c:	48 96       	adiw	r24, 0x18	; 24
    564e:	0f b6       	in	r0, 0x3f	; 63
    5650:	f8 94       	cli
    5652:	9e bf       	out	0x3e, r25	; 62
    5654:	0f be       	out	0x3f, r0	; 63
    5656:	8d bf       	out	0x3d, r24	; 61
    5658:	33 c0       	rjmp	.+102    	; 0x56c0 <command_proc+0x2a0>
    565a:	ce 51       	subi	r28, 0x1E	; 30
    565c:	ec 2f       	mov	r30, r28
    565e:	f0 e0       	ldi	r31, 0x00	; 0
    5660:	e2 5d       	subi	r30, 0xD2	; 210
    5662:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_6:
        case KC_7:
        case KC_8:
        case KC_9:
        case KC_0:
            mousekey_param = numkey2num(code);
    5664:	80 81       	ld	r24, Z
    5666:	80 93 d7 01 	sts	0x01D7, r24
            print("selected parameter: "); pdec(mousekey_param); print("\n");
    566a:	81 e8       	ldi	r24, 0x81	; 129
    566c:	96 e0       	ldi	r25, 0x06	; 6
    566e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    5672:	80 91 d7 01 	lds	r24, 0x01D7
    5676:	1f 92       	push	r1
    5678:	8f 93       	push	r24
    567a:	8e e7       	ldi	r24, 0x7E	; 126
    567c:	96 e0       	ldi	r25, 0x06	; 6
    567e:	9f 93       	push	r25
    5680:	8f 93       	push	r24
    5682:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    5686:	8c e7       	ldi	r24, 0x7C	; 124
    5688:	96 e0       	ldi	r25, 0x06	; 6
    568a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    568e:	0f 90       	pop	r0
    5690:	0f 90       	pop	r0
    5692:	0f 90       	pop	r0
    5694:	0f 90       	pop	r0
    5696:	14 c0       	rjmp	.+40     	; 0x56c0 <command_proc+0x2a0>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    5698:	61 e0       	ldi	r22, 0x01	; 1
    569a:	03 c0       	rjmp	.+6      	; 0x56a2 <command_proc+0x282>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    569c:	61 e0       	ldi	r22, 0x01	; 1
    569e:	06 c0       	rjmp	.+12     	; 0x56ac <command_proc+0x28c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    56a0:	6a e0       	ldi	r22, 0x0A	; 10
    56a2:	80 91 d7 01 	lds	r24, 0x01D7
    56a6:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <mousekey_param_inc>
    56aa:	0a c0       	rjmp	.+20     	; 0x56c0 <command_proc+0x2a0>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    56ac:	80 91 d7 01 	lds	r24, 0x01D7
    56b0:	0e 94 40 26 	call	0x4c80	; 0x4c80 <mousekey_param_dec>
    56b4:	05 c0       	rjmp	.+10     	; 0x56c0 <command_proc+0x2a0>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default values.\n");
            break;
        default:
            print("?");
    56b6:	85 e6       	ldi	r24, 0x65	; 101
    56b8:	96 e0       	ldi	r25, 0x06	; 6
    56ba:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    56be:	16 c0       	rjmp	.+44     	; 0x56ec <command_proc+0x2cc>
            return false;
    }
    print("M"); pdec(mousekey_param); print("> ");
    56c0:	83 e6       	ldi	r24, 0x63	; 99
    56c2:	96 e0       	ldi	r25, 0x06	; 6
    56c4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    56c8:	80 91 d7 01 	lds	r24, 0x01D7
    56cc:	1f 92       	push	r1
    56ce:	8f 93       	push	r24
    56d0:	80 e6       	ldi	r24, 0x60	; 96
    56d2:	96 e0       	ldi	r25, 0x06	; 6
    56d4:	9f 93       	push	r25
    56d6:	8f 93       	push	r24
    56d8:	0e 94 85 08 	call	0x110a	; 0x110a <__xprintf>
    56dc:	8d e5       	ldi	r24, 0x5D	; 93
    56de:	96 e0       	ldi	r25, 0x06	; 6
    56e0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xputs>
    56e4:	0f 90       	pop	r0
    56e6:	0f 90       	pop	r0
    56e8:	0f 90       	pop	r0
    56ea:	0f 90       	pop	r0
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    56ec:	81 e0       	ldi	r24, 0x01	; 1
    56ee:	06 c0       	rjmp	.+12     	; 0x56fc <command_proc+0x2dc>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    56f0:	10 92 d4 01 	sts	0x01D4, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    56f4:	80 e0       	ldi	r24, 0x00	; 0
    56f6:	02 c0       	rjmp	.+4      	; 0x56fc <command_proc+0x2dc>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    56f8:	80 e0       	ldi	r24, 0x00	; 0
    56fa:	e8 ce       	rjmp	.-560    	; 0x54cc <command_proc+0xac>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    56fc:	cf 91       	pop	r28
    56fe:	08 95       	ret

00005700 <__fixsfsi>:
    5700:	04 d0       	rcall	.+8      	; 0x570a <__fixunssfsi>
    5702:	68 94       	set
    5704:	b1 11       	cpse	r27, r1
    5706:	8d c0       	rjmp	.+282    	; 0x5822 <__fp_szero>
    5708:	08 95       	ret

0000570a <__fixunssfsi>:
    570a:	70 d0       	rcall	.+224    	; 0x57ec <__fp_splitA>
    570c:	88 f0       	brcs	.+34     	; 0x5730 <__fixunssfsi+0x26>
    570e:	9f 57       	subi	r25, 0x7F	; 127
    5710:	90 f0       	brcs	.+36     	; 0x5736 <__fixunssfsi+0x2c>
    5712:	b9 2f       	mov	r27, r25
    5714:	99 27       	eor	r25, r25
    5716:	b7 51       	subi	r27, 0x17	; 23
    5718:	a0 f0       	brcs	.+40     	; 0x5742 <__fixunssfsi+0x38>
    571a:	d1 f0       	breq	.+52     	; 0x5750 <__fixunssfsi+0x46>
    571c:	66 0f       	add	r22, r22
    571e:	77 1f       	adc	r23, r23
    5720:	88 1f       	adc	r24, r24
    5722:	99 1f       	adc	r25, r25
    5724:	1a f0       	brmi	.+6      	; 0x572c <__fixunssfsi+0x22>
    5726:	ba 95       	dec	r27
    5728:	c9 f7       	brne	.-14     	; 0x571c <__fixunssfsi+0x12>
    572a:	12 c0       	rjmp	.+36     	; 0x5750 <__fixunssfsi+0x46>
    572c:	b1 30       	cpi	r27, 0x01	; 1
    572e:	81 f0       	breq	.+32     	; 0x5750 <__fixunssfsi+0x46>
    5730:	77 d0       	rcall	.+238    	; 0x5820 <__fp_zero>
    5732:	b1 e0       	ldi	r27, 0x01	; 1
    5734:	08 95       	ret
    5736:	74 c0       	rjmp	.+232    	; 0x5820 <__fp_zero>
    5738:	67 2f       	mov	r22, r23
    573a:	78 2f       	mov	r23, r24
    573c:	88 27       	eor	r24, r24
    573e:	b8 5f       	subi	r27, 0xF8	; 248
    5740:	39 f0       	breq	.+14     	; 0x5750 <__fixunssfsi+0x46>
    5742:	b9 3f       	cpi	r27, 0xF9	; 249
    5744:	cc f3       	brlt	.-14     	; 0x5738 <__fixunssfsi+0x2e>
    5746:	86 95       	lsr	r24
    5748:	77 95       	ror	r23
    574a:	67 95       	ror	r22
    574c:	b3 95       	inc	r27
    574e:	d9 f7       	brne	.-10     	; 0x5746 <__fixunssfsi+0x3c>
    5750:	3e f4       	brtc	.+14     	; 0x5760 <__fixunssfsi+0x56>
    5752:	90 95       	com	r25
    5754:	80 95       	com	r24
    5756:	70 95       	com	r23
    5758:	61 95       	neg	r22
    575a:	7f 4f       	sbci	r23, 0xFF	; 255
    575c:	8f 4f       	sbci	r24, 0xFF	; 255
    575e:	9f 4f       	sbci	r25, 0xFF	; 255
    5760:	08 95       	ret

00005762 <__floatunsisf>:
    5762:	e8 94       	clt
    5764:	09 c0       	rjmp	.+18     	; 0x5778 <__floatsisf+0x12>

00005766 <__floatsisf>:
    5766:	97 fb       	bst	r25, 7
    5768:	3e f4       	brtc	.+14     	; 0x5778 <__floatsisf+0x12>
    576a:	90 95       	com	r25
    576c:	80 95       	com	r24
    576e:	70 95       	com	r23
    5770:	61 95       	neg	r22
    5772:	7f 4f       	sbci	r23, 0xFF	; 255
    5774:	8f 4f       	sbci	r24, 0xFF	; 255
    5776:	9f 4f       	sbci	r25, 0xFF	; 255
    5778:	99 23       	and	r25, r25
    577a:	a9 f0       	breq	.+42     	; 0x57a6 <__floatsisf+0x40>
    577c:	f9 2f       	mov	r31, r25
    577e:	96 e9       	ldi	r25, 0x96	; 150
    5780:	bb 27       	eor	r27, r27
    5782:	93 95       	inc	r25
    5784:	f6 95       	lsr	r31
    5786:	87 95       	ror	r24
    5788:	77 95       	ror	r23
    578a:	67 95       	ror	r22
    578c:	b7 95       	ror	r27
    578e:	f1 11       	cpse	r31, r1
    5790:	f8 cf       	rjmp	.-16     	; 0x5782 <__floatsisf+0x1c>
    5792:	fa f4       	brpl	.+62     	; 0x57d2 <__floatsisf+0x6c>
    5794:	bb 0f       	add	r27, r27
    5796:	11 f4       	brne	.+4      	; 0x579c <__floatsisf+0x36>
    5798:	60 ff       	sbrs	r22, 0
    579a:	1b c0       	rjmp	.+54     	; 0x57d2 <__floatsisf+0x6c>
    579c:	6f 5f       	subi	r22, 0xFF	; 255
    579e:	7f 4f       	sbci	r23, 0xFF	; 255
    57a0:	8f 4f       	sbci	r24, 0xFF	; 255
    57a2:	9f 4f       	sbci	r25, 0xFF	; 255
    57a4:	16 c0       	rjmp	.+44     	; 0x57d2 <__floatsisf+0x6c>
    57a6:	88 23       	and	r24, r24
    57a8:	11 f0       	breq	.+4      	; 0x57ae <__floatsisf+0x48>
    57aa:	96 e9       	ldi	r25, 0x96	; 150
    57ac:	11 c0       	rjmp	.+34     	; 0x57d0 <__floatsisf+0x6a>
    57ae:	77 23       	and	r23, r23
    57b0:	21 f0       	breq	.+8      	; 0x57ba <__floatsisf+0x54>
    57b2:	9e e8       	ldi	r25, 0x8E	; 142
    57b4:	87 2f       	mov	r24, r23
    57b6:	76 2f       	mov	r23, r22
    57b8:	05 c0       	rjmp	.+10     	; 0x57c4 <__floatsisf+0x5e>
    57ba:	66 23       	and	r22, r22
    57bc:	71 f0       	breq	.+28     	; 0x57da <__floatsisf+0x74>
    57be:	96 e8       	ldi	r25, 0x86	; 134
    57c0:	86 2f       	mov	r24, r22
    57c2:	70 e0       	ldi	r23, 0x00	; 0
    57c4:	60 e0       	ldi	r22, 0x00	; 0
    57c6:	2a f0       	brmi	.+10     	; 0x57d2 <__floatsisf+0x6c>
    57c8:	9a 95       	dec	r25
    57ca:	66 0f       	add	r22, r22
    57cc:	77 1f       	adc	r23, r23
    57ce:	88 1f       	adc	r24, r24
    57d0:	da f7       	brpl	.-10     	; 0x57c8 <__floatsisf+0x62>
    57d2:	88 0f       	add	r24, r24
    57d4:	96 95       	lsr	r25
    57d6:	87 95       	ror	r24
    57d8:	97 f9       	bld	r25, 7
    57da:	08 95       	ret

000057dc <__fp_split3>:
    57dc:	57 fd       	sbrc	r21, 7
    57de:	90 58       	subi	r25, 0x80	; 128
    57e0:	44 0f       	add	r20, r20
    57e2:	55 1f       	adc	r21, r21
    57e4:	59 f0       	breq	.+22     	; 0x57fc <__fp_splitA+0x10>
    57e6:	5f 3f       	cpi	r21, 0xFF	; 255
    57e8:	71 f0       	breq	.+28     	; 0x5806 <__fp_splitA+0x1a>
    57ea:	47 95       	ror	r20

000057ec <__fp_splitA>:
    57ec:	88 0f       	add	r24, r24
    57ee:	97 fb       	bst	r25, 7
    57f0:	99 1f       	adc	r25, r25
    57f2:	61 f0       	breq	.+24     	; 0x580c <__fp_splitA+0x20>
    57f4:	9f 3f       	cpi	r25, 0xFF	; 255
    57f6:	79 f0       	breq	.+30     	; 0x5816 <__fp_splitA+0x2a>
    57f8:	87 95       	ror	r24
    57fa:	08 95       	ret
    57fc:	12 16       	cp	r1, r18
    57fe:	13 06       	cpc	r1, r19
    5800:	14 06       	cpc	r1, r20
    5802:	55 1f       	adc	r21, r21
    5804:	f2 cf       	rjmp	.-28     	; 0x57ea <__fp_split3+0xe>
    5806:	46 95       	lsr	r20
    5808:	f1 df       	rcall	.-30     	; 0x57ec <__fp_splitA>
    580a:	08 c0       	rjmp	.+16     	; 0x581c <__fp_splitA+0x30>
    580c:	16 16       	cp	r1, r22
    580e:	17 06       	cpc	r1, r23
    5810:	18 06       	cpc	r1, r24
    5812:	99 1f       	adc	r25, r25
    5814:	f1 cf       	rjmp	.-30     	; 0x57f8 <__fp_splitA+0xc>
    5816:	86 95       	lsr	r24
    5818:	71 05       	cpc	r23, r1
    581a:	61 05       	cpc	r22, r1
    581c:	08 94       	sec
    581e:	08 95       	ret

00005820 <__fp_zero>:
    5820:	e8 94       	clt

00005822 <__fp_szero>:
    5822:	bb 27       	eor	r27, r27
    5824:	66 27       	eor	r22, r22
    5826:	77 27       	eor	r23, r23
    5828:	cb 01       	movw	r24, r22
    582a:	97 f9       	bld	r25, 7
    582c:	08 95       	ret

0000582e <__mulsf3>:
    582e:	0b d0       	rcall	.+22     	; 0x5846 <__mulsf3x>
    5830:	78 c0       	rjmp	.+240    	; 0x5922 <__fp_round>
    5832:	69 d0       	rcall	.+210    	; 0x5906 <__fp_pscA>
    5834:	28 f0       	brcs	.+10     	; 0x5840 <__mulsf3+0x12>
    5836:	6e d0       	rcall	.+220    	; 0x5914 <__fp_pscB>
    5838:	18 f0       	brcs	.+6      	; 0x5840 <__mulsf3+0x12>
    583a:	95 23       	and	r25, r21
    583c:	09 f0       	breq	.+2      	; 0x5840 <__mulsf3+0x12>
    583e:	5a c0       	rjmp	.+180    	; 0x58f4 <__fp_inf>
    5840:	5f c0       	rjmp	.+190    	; 0x5900 <__fp_nan>
    5842:	11 24       	eor	r1, r1
    5844:	ee cf       	rjmp	.-36     	; 0x5822 <__fp_szero>

00005846 <__mulsf3x>:
    5846:	ca df       	rcall	.-108    	; 0x57dc <__fp_split3>
    5848:	a0 f3       	brcs	.-24     	; 0x5832 <__mulsf3+0x4>

0000584a <__mulsf3_pse>:
    584a:	95 9f       	mul	r25, r21
    584c:	d1 f3       	breq	.-12     	; 0x5842 <__mulsf3+0x14>
    584e:	95 0f       	add	r25, r21
    5850:	50 e0       	ldi	r21, 0x00	; 0
    5852:	55 1f       	adc	r21, r21
    5854:	62 9f       	mul	r22, r18
    5856:	f0 01       	movw	r30, r0
    5858:	72 9f       	mul	r23, r18
    585a:	bb 27       	eor	r27, r27
    585c:	f0 0d       	add	r31, r0
    585e:	b1 1d       	adc	r27, r1
    5860:	63 9f       	mul	r22, r19
    5862:	aa 27       	eor	r26, r26
    5864:	f0 0d       	add	r31, r0
    5866:	b1 1d       	adc	r27, r1
    5868:	aa 1f       	adc	r26, r26
    586a:	64 9f       	mul	r22, r20
    586c:	66 27       	eor	r22, r22
    586e:	b0 0d       	add	r27, r0
    5870:	a1 1d       	adc	r26, r1
    5872:	66 1f       	adc	r22, r22
    5874:	82 9f       	mul	r24, r18
    5876:	22 27       	eor	r18, r18
    5878:	b0 0d       	add	r27, r0
    587a:	a1 1d       	adc	r26, r1
    587c:	62 1f       	adc	r22, r18
    587e:	73 9f       	mul	r23, r19
    5880:	b0 0d       	add	r27, r0
    5882:	a1 1d       	adc	r26, r1
    5884:	62 1f       	adc	r22, r18
    5886:	83 9f       	mul	r24, r19
    5888:	a0 0d       	add	r26, r0
    588a:	61 1d       	adc	r22, r1
    588c:	22 1f       	adc	r18, r18
    588e:	74 9f       	mul	r23, r20
    5890:	33 27       	eor	r19, r19
    5892:	a0 0d       	add	r26, r0
    5894:	61 1d       	adc	r22, r1
    5896:	23 1f       	adc	r18, r19
    5898:	84 9f       	mul	r24, r20
    589a:	60 0d       	add	r22, r0
    589c:	21 1d       	adc	r18, r1
    589e:	82 2f       	mov	r24, r18
    58a0:	76 2f       	mov	r23, r22
    58a2:	6a 2f       	mov	r22, r26
    58a4:	11 24       	eor	r1, r1
    58a6:	9f 57       	subi	r25, 0x7F	; 127
    58a8:	50 40       	sbci	r21, 0x00	; 0
    58aa:	8a f0       	brmi	.+34     	; 0x58ce <__mulsf3_pse+0x84>
    58ac:	e1 f0       	breq	.+56     	; 0x58e6 <__mulsf3_pse+0x9c>
    58ae:	88 23       	and	r24, r24
    58b0:	4a f0       	brmi	.+18     	; 0x58c4 <__mulsf3_pse+0x7a>
    58b2:	ee 0f       	add	r30, r30
    58b4:	ff 1f       	adc	r31, r31
    58b6:	bb 1f       	adc	r27, r27
    58b8:	66 1f       	adc	r22, r22
    58ba:	77 1f       	adc	r23, r23
    58bc:	88 1f       	adc	r24, r24
    58be:	91 50       	subi	r25, 0x01	; 1
    58c0:	50 40       	sbci	r21, 0x00	; 0
    58c2:	a9 f7       	brne	.-22     	; 0x58ae <__mulsf3_pse+0x64>
    58c4:	9e 3f       	cpi	r25, 0xFE	; 254
    58c6:	51 05       	cpc	r21, r1
    58c8:	70 f0       	brcs	.+28     	; 0x58e6 <__mulsf3_pse+0x9c>
    58ca:	14 c0       	rjmp	.+40     	; 0x58f4 <__fp_inf>
    58cc:	aa cf       	rjmp	.-172    	; 0x5822 <__fp_szero>
    58ce:	5f 3f       	cpi	r21, 0xFF	; 255
    58d0:	ec f3       	brlt	.-6      	; 0x58cc <__mulsf3_pse+0x82>
    58d2:	98 3e       	cpi	r25, 0xE8	; 232
    58d4:	dc f3       	brlt	.-10     	; 0x58cc <__mulsf3_pse+0x82>
    58d6:	86 95       	lsr	r24
    58d8:	77 95       	ror	r23
    58da:	67 95       	ror	r22
    58dc:	b7 95       	ror	r27
    58de:	f7 95       	ror	r31
    58e0:	e7 95       	ror	r30
    58e2:	9f 5f       	subi	r25, 0xFF	; 255
    58e4:	c1 f7       	brne	.-16     	; 0x58d6 <__mulsf3_pse+0x8c>
    58e6:	fe 2b       	or	r31, r30
    58e8:	88 0f       	add	r24, r24
    58ea:	91 1d       	adc	r25, r1
    58ec:	96 95       	lsr	r25
    58ee:	87 95       	ror	r24
    58f0:	97 f9       	bld	r25, 7
    58f2:	08 95       	ret

000058f4 <__fp_inf>:
    58f4:	97 f9       	bld	r25, 7
    58f6:	9f 67       	ori	r25, 0x7F	; 127
    58f8:	80 e8       	ldi	r24, 0x80	; 128
    58fa:	70 e0       	ldi	r23, 0x00	; 0
    58fc:	60 e0       	ldi	r22, 0x00	; 0
    58fe:	08 95       	ret

00005900 <__fp_nan>:
    5900:	9f ef       	ldi	r25, 0xFF	; 255
    5902:	80 ec       	ldi	r24, 0xC0	; 192
    5904:	08 95       	ret

00005906 <__fp_pscA>:
    5906:	00 24       	eor	r0, r0
    5908:	0a 94       	dec	r0
    590a:	16 16       	cp	r1, r22
    590c:	17 06       	cpc	r1, r23
    590e:	18 06       	cpc	r1, r24
    5910:	09 06       	cpc	r0, r25
    5912:	08 95       	ret

00005914 <__fp_pscB>:
    5914:	00 24       	eor	r0, r0
    5916:	0a 94       	dec	r0
    5918:	12 16       	cp	r1, r18
    591a:	13 06       	cpc	r1, r19
    591c:	14 06       	cpc	r1, r20
    591e:	05 06       	cpc	r0, r21
    5920:	08 95       	ret

00005922 <__fp_round>:
    5922:	09 2e       	mov	r0, r25
    5924:	03 94       	inc	r0
    5926:	00 0c       	add	r0, r0
    5928:	11 f4       	brne	.+4      	; 0x592e <__fp_round+0xc>
    592a:	88 23       	and	r24, r24
    592c:	52 f0       	brmi	.+20     	; 0x5942 <__fp_round+0x20>
    592e:	bb 0f       	add	r27, r27
    5930:	40 f4       	brcc	.+16     	; 0x5942 <__fp_round+0x20>
    5932:	bf 2b       	or	r27, r31
    5934:	11 f4       	brne	.+4      	; 0x593a <__fp_round+0x18>
    5936:	60 ff       	sbrs	r22, 0
    5938:	04 c0       	rjmp	.+8      	; 0x5942 <__fp_round+0x20>
    593a:	6f 5f       	subi	r22, 0xFF	; 255
    593c:	7f 4f       	sbci	r23, 0xFF	; 255
    593e:	8f 4f       	sbci	r24, 0xFF	; 255
    5940:	9f 4f       	sbci	r25, 0xFF	; 255
    5942:	08 95       	ret

00005944 <__divmodhi4>:
    5944:	97 fb       	bst	r25, 7
    5946:	07 2e       	mov	r0, r23
    5948:	16 f4       	brtc	.+4      	; 0x594e <__divmodhi4+0xa>
    594a:	00 94       	com	r0
    594c:	07 d0       	rcall	.+14     	; 0x595c <__divmodhi4_neg1>
    594e:	77 fd       	sbrc	r23, 7
    5950:	09 d0       	rcall	.+18     	; 0x5964 <__divmodhi4_neg2>
    5952:	0e 94 bc 2c 	call	0x5978	; 0x5978 <__udivmodhi4>
    5956:	07 fc       	sbrc	r0, 7
    5958:	05 d0       	rcall	.+10     	; 0x5964 <__divmodhi4_neg2>
    595a:	3e f4       	brtc	.+14     	; 0x596a <__divmodhi4_exit>

0000595c <__divmodhi4_neg1>:
    595c:	90 95       	com	r25
    595e:	81 95       	neg	r24
    5960:	9f 4f       	sbci	r25, 0xFF	; 255
    5962:	08 95       	ret

00005964 <__divmodhi4_neg2>:
    5964:	70 95       	com	r23
    5966:	61 95       	neg	r22
    5968:	7f 4f       	sbci	r23, 0xFF	; 255

0000596a <__divmodhi4_exit>:
    596a:	08 95       	ret

0000596c <__tablejump2__>:
    596c:	ee 0f       	add	r30, r30
    596e:	ff 1f       	adc	r31, r31

00005970 <__tablejump__>:
    5970:	05 90       	lpm	r0, Z+
    5972:	f4 91       	lpm	r31, Z
    5974:	e0 2d       	mov	r30, r0
    5976:	09 94       	ijmp

00005978 <__udivmodhi4>:
    5978:	aa 1b       	sub	r26, r26
    597a:	bb 1b       	sub	r27, r27
    597c:	51 e1       	ldi	r21, 0x11	; 17
    597e:	07 c0       	rjmp	.+14     	; 0x598e <__udivmodhi4_ep>

00005980 <__udivmodhi4_loop>:
    5980:	aa 1f       	adc	r26, r26
    5982:	bb 1f       	adc	r27, r27
    5984:	a6 17       	cp	r26, r22
    5986:	b7 07       	cpc	r27, r23
    5988:	10 f0       	brcs	.+4      	; 0x598e <__udivmodhi4_ep>
    598a:	a6 1b       	sub	r26, r22
    598c:	b7 0b       	sbc	r27, r23

0000598e <__udivmodhi4_ep>:
    598e:	88 1f       	adc	r24, r24
    5990:	99 1f       	adc	r25, r25
    5992:	5a 95       	dec	r21
    5994:	a9 f7       	brne	.-22     	; 0x5980 <__udivmodhi4_loop>
    5996:	80 95       	com	r24
    5998:	90 95       	com	r25
    599a:	bc 01       	movw	r22, r24
    599c:	cd 01       	movw	r24, r26
    599e:	08 95       	ret

000059a0 <__eerd_byte_m32u4>:
    59a0:	f9 99       	sbic	0x1f, 1	; 31
    59a2:	fe cf       	rjmp	.-4      	; 0x59a0 <__eerd_byte_m32u4>
    59a4:	92 bd       	out	0x22, r25	; 34
    59a6:	81 bd       	out	0x21, r24	; 33
    59a8:	f8 9a       	sbi	0x1f, 0	; 31
    59aa:	99 27       	eor	r25, r25
    59ac:	80 b5       	in	r24, 0x20	; 32
    59ae:	08 95       	ret

000059b0 <__eerd_word_m32u4>:
    59b0:	a8 e1       	ldi	r26, 0x18	; 24
    59b2:	b0 e0       	ldi	r27, 0x00	; 0
    59b4:	42 e0       	ldi	r20, 0x02	; 2
    59b6:	50 e0       	ldi	r21, 0x00	; 0
    59b8:	0c 94 f3 2c 	jmp	0x59e6	; 0x59e6 <__eerd_blraw_m32u4>

000059bc <__eewr_byte_m32u4>:
    59bc:	26 2f       	mov	r18, r22

000059be <__eewr_r18_m32u4>:
    59be:	f9 99       	sbic	0x1f, 1	; 31
    59c0:	fe cf       	rjmp	.-4      	; 0x59be <__eewr_r18_m32u4>
    59c2:	1f ba       	out	0x1f, r1	; 31
    59c4:	92 bd       	out	0x22, r25	; 34
    59c6:	81 bd       	out	0x21, r24	; 33
    59c8:	20 bd       	out	0x20, r18	; 32
    59ca:	0f b6       	in	r0, 0x3f	; 63
    59cc:	f8 94       	cli
    59ce:	fa 9a       	sbi	0x1f, 2	; 31
    59d0:	f9 9a       	sbi	0x1f, 1	; 31
    59d2:	0f be       	out	0x3f, r0	; 63
    59d4:	01 96       	adiw	r24, 0x01	; 1
    59d6:	08 95       	ret

000059d8 <__eewr_word_m32u4>:
    59d8:	0e 94 de 2c 	call	0x59bc	; 0x59bc <__eewr_byte_m32u4>
    59dc:	27 2f       	mov	r18, r23
    59de:	0c 94 df 2c 	jmp	0x59be	; 0x59be <__eewr_r18_m32u4>

000059e2 <__eerd_block_m32u4>:
    59e2:	dc 01       	movw	r26, r24
    59e4:	cb 01       	movw	r24, r22

000059e6 <__eerd_blraw_m32u4>:
    59e6:	fc 01       	movw	r30, r24
    59e8:	f9 99       	sbic	0x1f, 1	; 31
    59ea:	fe cf       	rjmp	.-4      	; 0x59e8 <__eerd_blraw_m32u4+0x2>
    59ec:	06 c0       	rjmp	.+12     	; 0x59fa <__eerd_blraw_m32u4+0x14>
    59ee:	f2 bd       	out	0x22, r31	; 34
    59f0:	e1 bd       	out	0x21, r30	; 33
    59f2:	f8 9a       	sbi	0x1f, 0	; 31
    59f4:	31 96       	adiw	r30, 0x01	; 1
    59f6:	00 b4       	in	r0, 0x20	; 32
    59f8:	0d 92       	st	X+, r0
    59fa:	41 50       	subi	r20, 0x01	; 1
    59fc:	50 40       	sbci	r21, 0x00	; 0
    59fe:	b8 f7       	brcc	.-18     	; 0x59ee <__eerd_blraw_m32u4+0x8>
    5a00:	08 95       	ret

00005a02 <_exit>:
    5a02:	f8 94       	cli

00005a04 <__stop_program>:
    5a04:	ff cf       	rjmp	.-2      	; 0x5a04 <__stop_program>

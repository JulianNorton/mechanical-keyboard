
gh60_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00005a62  00005af6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005a62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ae  00800138  00800138  00005b2e  2**0
                  ALLOC
  3 .noinit       00000004  008001e6  008001e6  00005b2e  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005b30  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000097  00000000  00000000  000063e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  0000647f  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000b30  00000000  00000000  00006490  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00010d99  00000000  00000000  00006fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003fdc  00000000  00000000  00017d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005855  00000000  00000000  0001bd35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001d00  00000000  00000000  0002158c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000045e2  00000000  00000000  0002328c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008e63  00000000  00000000  0002786e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000cb0  00000000  00000000  000306d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
       0:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__ctors_end>
       4:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
       8:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
       c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      10:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      14:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      18:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
	uint8_t ErrorCode;

	while (*BytesRem)
      1c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      20:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      24:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
      28:	0c 94 80 0e 	jmp	0x1d00	; 0x1d00 <__vector_10>
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
      2c:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__vector_11>
      30:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <__vector_12>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
      34:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      38:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      3c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
      40:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
			{
				*CurrConfigLoc = PrevDescLoc;
      44:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
				*BytesRem      = PrevBytesRem;
      48:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      4c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
      50:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      54:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <__vector_21>
      58:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      5c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      60:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      64:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      68:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      6c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      70:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      74:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      78:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      7c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
      80:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      84:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      88:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
      8c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      90:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      94:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
      98:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      9c:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      a0:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      a4:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      a8:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__bad_interrupt>
      ac:	b8 10       	cpse	r11, r8
      ae:	da 10       	cpse	r13, r10
      b0:	c6 11       	cpse	r28, r6
      b2:	da 10       	cpse	r13, r10
      b4:	c6 11       	cpse	r28, r6
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
      b6:	1c 11       	cpse	r17, r12
      b8:	40 11       	cpse	r20, r0
      ba:	c6 11       	cpse	r28, r6
      bc:	95 11       	cpse	r25, r5
      be:	a8 11       	cpse	r26, r8
      c0:	f2 14       	cp	r15, r2
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
      c2:	f2 14       	cp	r15, r2
      c4:	20 15       	cp	r18, r0
      c6:	20 15       	cp	r18, r0
      c8:	75 15       	cp	r23, r5
      ca:	b1 15       	cp	r27, r1
      cc:	a2 17       	cp	r26, r18
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
      ce:	a2 17       	cp	r26, r18
      d0:	c9 15       	cp	r28, r9
      d2:	a2 17       	cp	r26, r18
      d4:	c0 16       	cp	r12, r16
	{
		uint8_t  HIDReportItem  = *ReportData;
      d6:	c0 16       	cp	r12, r16
      d8:	7c 17       	cp	r23, r28
      da:	a2 17       	cp	r26, r18
      dc:	a2 17       	cp	r26, r18
      de:	90 17       	cp	r25, r16
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e0:	21 29       	or	r18, r1
      e2:	49 29       	or	r20, r9
      e4:	88 27       	eor	r24, r24
      e6:	32 2a       	or	r3, r18
      e8:	32 2a       	or	r3, r18
      ea:	d6 28       	or	r13, r6
      ec:	32 2a       	or	r3, r18
      ee:	32 2a       	or	r3, r18
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
      f0:	75 29       	or	r23, r5
      f2:	32 2a       	or	r3, r18
      f4:	88 29       	or	r24, r8
		ReportSize--;
      f6:	fd 29       	or	r31, r13
      f8:	32 2a       	or	r3, r18
	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;
      fa:	32 2a       	or	r3, r18
      fc:	32 2a       	or	r3, r18
      fe:	32 2a       	or	r3, r18
     100:	d2 29       	or	r29, r2
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     102:	b9 29       	or	r27, r9
     104:	32 2a       	or	r3, r18
     106:	a2 29       	or	r26, r2
     108:	32 2a       	or	r3, r18
     10a:	62 29       	or	r22, r2
     10c:	32 2a       	or	r3, r18
     10e:	32 2a       	or	r3, r18
     110:	2c 2a       	or	r2, r28
     112:	2c 2a       	or	r2, r28
     114:	2c 2a       	or	r2, r28
     116:	2c 2a       	or	r2, r28
     118:	2c 2a       	or	r2, r28
     11a:	2c 2a       	or	r2, r28
     11c:	2c 2a       	or	r2, r28
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     11e:	2c 2a       	or	r2, r28
     120:	2c 2a       	or	r2, r28
     122:	2a 2a       	or	r2, r26
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     124:	32 2a       	or	r3, r18
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     126:	2a 2a       	or	r2, r26
     128:	32 2a       	or	r3, r18
     12a:	32 2a       	or	r3, r18
     12c:	32 2a       	or	r3, r18
     12e:	32 2a       	or	r3, r18
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     130:	32 2a       	or	r3, r18
     132:	32 2a       	or	r3, r18
     134:	32 2a       	or	r3, r18
     136:	32 2a       	or	r3, r18
     138:	32 2a       	or	r3, r18
     13a:	32 2a       	or	r3, r18
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     13c:	32 2a       	or	r3, r18
     13e:	2a 2a       	or	r2, r26
				ReportData     += 4;
     140:	32 2a       	or	r3, r18
     142:	32 2a       	or	r3, r18
     144:	d6 28       	or	r13, r6
				break;
     146:	b7 28       	or	r11, r7
			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     148:	2e 2a       	or	r2, r30
     14a:	2e 2a       	or	r2, r30
     14c:	2e 2a       	or	r2, r30
     14e:	2e 2a       	or	r2, r30
     150:	2e 2a       	or	r2, r30
     152:	2e 2a       	or	r2, r30
     154:	2e 2a       	or	r2, r30
     156:	2e 2a       	or	r2, r30
     158:	2e 2a       	or	r2, r30
				ReportSize     -= 2;
     15a:	2e 2a       	or	r2, r30
     15c:	2e 2a       	or	r2, r30
				ReportData     += 2;
     15e:	2e 2a       	or	r2, r30
     160:	0f 2a       	or	r0, r31
     162:	32 2a       	or	r3, r18
				break;
     164:	35 29       	or	r19, r5

00000166 <__trampolines_end>:
			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     166:	f1 a1       	ldd	r31, Z+33	; 0x21

00000168 <keymaps>:
     168:	1e 1e 1e 1e 1e 1e 1e 1e 1e 1e 1e 1e 1e 1e 1e 1e     ................
				ReportSize     -= 1;
				ReportData     += 1;
     178:	1e 1e 1e 1e 1e 1e 1e 1e 1e 1e 1e 1e 35 04 16 07     ............5...
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     188:	09 0a 0b 0d 0e 0f 33 34 28 35 e1 1d 1b 06 19 05     ......34(5......
     198:	11 10 36 37 38 e5 52 35 e0 e2 e3 2c e7 e6 00 00     ..678.R5...,....
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     1a8:	e4 00 00 00 50 51                                   ....PQ

000001ae <__c.2367>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1ae:	0a 00                                               ..

000001b0 <__c.2365>:
     1b0:	25 30 31 36 62 00                                   %016b.

000001b6 <__c.2363>:
     1b6:	3a 20 00                                            : .

000001b9 <__c.2361>:
     1b9:	25 30 32 58 00                                      %02X.

000001be <__c.2358>:
     1be:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     1ce:	42 43 44 45 46 0a 00                                BCDEF..

000001d5 <__c.2331>:
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1d5:	0a 00                                               ..

000001d7 <__c.2329>:
     1d7:	25 30 32 58 00                                      %02X.

000001dc <__c.2327>:
     1dc:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

000001e6 <__c.4678>:
     1e6:	5b 73 5d 00                                         [s].

000001ea <__c.4676>:
     1ea:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     1fa:	00                                                  .

000001fb <__c.4674>:
     1fb:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     20b:	00                                                  .

0000020c <__c.4582>:
     20c:	5b 57 5d 00                                         [W].

00000210 <__c.4578>:
     210:	5b 53 5d 00                                         [S].

00000214 <__c.4574>:
     214:	5b 52 5d 00                                         [R].

00000218 <__c.4569>:
     218:	5b 44 5d 00                                         [D].

0000021c <__c.4564>:
     21c:	5b 43 5d 00                                         [C].

00000220 <ProductString>:
     220:	0e 03 6a 00 75 00 6c 00 69 00 61 00 6e 00 00 00     ..j.u.l.i.a.n...

00000230 <ManufacturerString>:
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     230:	0e 03 6a 00 75 00 6c 00 69 00 61 00 6e 00 00 00     ..j.u.l.i.a.n...

00000240 <LanguageString>:
     240:	04 03 09 04                                         ....

00000244 <ConfigurationDescriptor>:
     244:	09 02 8d 00 05 01 00 a0 32 09 04 00 00 01 03 01     ........2.......
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     254:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     264:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     274:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     284:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
				break;
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     294:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
				break;
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
				break;
     2a4:	01 00 01 22 20 00 07 05 84 03 20 00 01 07 05 04     ..." ..... .....
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
				break;
     2b4:	03 20 00 01 09 04 04 00 01 03 00 00 00 09 21 11     . ............!.
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
				break;
     2c4:	01 00 01 22 39 00 07 05 85 03 10 00 01              ..."9........

000002d1 <DeviceDescriptor>:
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2d1:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....

				if (ParserData->UsingReportIDs)
     2e1:	00 01                                               ..

000002e3 <NKROReport>:
     2e3:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2f3:	95 08 75 01 81 02 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     303:	91 02 95 01 75 03 91 01 05 07 19 00 29 77 15 00     ....u.......)w..
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     313:	25 01 95 78 75 01 81 02 c0                          %..xu....

0000031c <ConsoleReport>:
     31c:	06 31 ff 09 74 a1 01 09 75 15 00 25 ff 95 20 75     .1..t...u..%.. u
     32c:	08 81 02 09 76 15 00 25 ff 95 20 75 08 91 02 c0     ....v..%.. u....

0000033c <ExtrakeyReport>:
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     33c:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     34c:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     35c:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
					}
				}

				ParserData->UsingReportIDs = true;
     36c:	10 95 01 81 00 c0                                   ......

00000372 <MouseReport>:

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     372:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     382:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     392:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     3a2:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3b2:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

000003bf <KeyboardReport>:
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3bf:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3cf:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3df:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3ef:	19 00 29 ff 15 00 25 ff 95 06 75 08 81 00 c0        ..)...%...u....

000003fe <__c.4335>:
     3fe:	0a 00                                               ..

00000400 <__c.4330>:
				}

				CurrCollectionPath->Type       = ReportItemData;
     400:	25 30 32 58 20 00                                   %02X .

00000406 <__c.4327>:
     406:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     416:	20 00                                                .

00000418 <__c.4668>:

				if (UsageListSize)
     418:	0a 00                                               ..

0000041a <__c.4666>:
     41a:	25 30 32 58 00                                      %02X.

0000041f <__c.4664>:
     41f:	6b 65 79 62 6f 61 72 64 5f 73 65 74 5f 6c 65 64     keyboard_set_led
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     42f:	3a 20 00                                            : .

00000432 <__c.4475>:
     432:	64 65 6c 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     del_key_bit: can

					for (uint8_t i = 0; i < UsageListSize; i++)
     442:	27 74 20 64 65 6c 3a 20 25 30 32 58 0a 00           't del: %02X..

00000450 <__c.4470>:
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     450:	61 64 64 5f 6b 65 79 5f 62 69 74 3a 20 63 61 6e     add_key_bit: can
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     460:	27 74 20 61 64 64 3a 20 25 30 32 58 0a 00           't add: %02X..

0000046e <__c.4614>:
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     46e:	64 6f 6e 65 2e 0a 00                                done...

00000475 <__c.4608>:
     475:	62 6f 6f 67 6d 61 67 69 63 20 73 63 61 6e 3a 20     boogmagic scan: 
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     485:	2e 2e 2e 20 00                                      ... .

0000048a <__c.4407>:
     48a:	29 0a 00                                            )..

0000048d <__c.4405>:
     48d:	25 75 00                                            %u.

00000490 <__c.4403>:
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     490:	2f 00                                               /.

00000492 <__c.4401>:
     492:	25 75 00                                            %u.

00000495 <__c.4399>:
     495:	5d 28 00                                            ](.

00000498 <__c.4397>:
     498:	25 64 00                                            %d.

0000049b <__c.4395>:
     49b:	20 00                                                .

0000049d <__c.4393>:
     49d:	25 64 00                                            %d.

000004a0 <__c.4391>:
     4a0:	20 00                                                .

000004a2 <__c.4389>:
				break;
     4a2:	25 64 00                                            %d.

000004a5 <__c.4387>:
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     4a5:	20 00                                                .

000004a7 <__c.4385>:
     4a7:	25 64 00                                            %d.

000004aa <__c.4383>:
     4aa:	7c 00                                               |.

000004ac <__c.4381>:
     4ac:	25 30 32 58 00                                      %02X.

000004b1 <__c.4379>:
     4b1:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     4c1:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     4d1:	20 5b 00                                             [.

000004d4 <__c.5107>:
     4d4:	0a 00                                               ..

000004d6 <__c.5105>:
     4d6:	25 75 00                                            %u.

000004d9 <__c.5103>:
     4d9:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     4e9:	5f 6d 61 78 20 3d 20 00                             _max = .

000004f1 <__c.5100>:
     4f1:	0a 00                                               ..

000004f3 <__c.5098>:
     4f3:	25 75 00                                            %u.

000004f6 <__c.5096>:
     4f6:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
					NewReportItem.CollectionPath = CurrCollectionPath;
     506:	65 64 20 3d 20 00                                   ed = .

0000050c <__c.5093>:
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     50c:	0a 00                                               ..

0000050e <__c.5091>:
     50e:	25 75 00                                            %u.

00000511 <__c.5089>:
     511:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     521:	20 00                                                .

00000523 <__c.5086>:
     523:	0a 00                                               ..

00000525 <__c.5084>:
     525:	25 75 00                                            %u.

00000528 <__c.5082>:
     528:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 00     mk_max_speed = .

00000538 <__c.5079>:

						for (uint8_t i = 0; i < UsageListSize; i++)
						  UsageList[i] = UsageList[i + 1];
     538:	0a 00                                               ..

0000053a <__c.5077>:
     53a:	25 75 00                                            %u.

0000053d <__c.5075>:
     53d:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 00        mk_interval = .

0000054c <__c.5071>:

						UsageListSize--;
     54c:	0a 00                                               ..

0000054e <__c.5069>:
     54e:	25 75 00                                            %u.

00000551 <__c.5067>:
     551:	6d 6b 5f 64 65 6c 61 79 20 3d 20 00                 mk_delay = .

0000055d <__c.5060>:
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     55d:	0a 00                                               ..

0000055f <__c.5058>:
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     55f:	25 75 00                                            %u.

00000562 <__c.5056>:
     562:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     572:	5f 6d 61 78 20 3d 20 00                             _max = .

0000057a <__c.5053>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     57a:	0a 00                                               ..

0000057c <__c.5051>:
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     57c:	25 75 00                                            %u.

0000057f <__c.5049>:
     57f:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     58f:	65 64 20 3d 20 00                                   ed = .

00000595 <__c.5046>:
     595:	0a 00                                               ..

00000597 <__c.5044>:
     597:	25 75 00                                            %u.

0000059a <__c.5042>:
     59a:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     5aa:	20 00                                                .

000005ac <__c.5039>:
     5ac:	0a 00                                               ..

000005ae <__c.5037>:
     5ae:	25 75 00                                            %u.

000005b1 <__c.5035>:

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     5b1:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 00     mk_max_speed = .

000005c1 <__c.5032>:
     5c1:	0a 00                                               ..

000005c3 <__c.5030>:
     5c3:	25 75 00                                            %u.

000005c6 <__c.5028>:
     5c6:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 00        mk_interval = .

000005d5 <__c.5024>:
     5d5:	0a 00                                               ..

000005d7 <__c.5022>:
     5d7:	25 75 00                                            %u.

000005da <__c.5020>:
     5da:	6d 6b 5f 64 65 6c 61 79 20 3d 20 00                 mk_delay = .

000005e6 <__c.5013>:
     5e6:	0a 00                                               ..

000005e8 <__c.5011>:

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5e8:	25 75 00                                            %u.

000005eb <__c.5009>:
     5eb:	36 3a 20 6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65     6: mk_wheel_time
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     5fb:	5f 74 6f 5f 6d 61 78 3a 20 00                       _to_max: .

00000605 <__c.5007>:
     605:	0a 00                                               ..

00000607 <__c.5005>:
     607:	25 75 00                                            %u.

0000060a <__c.5003>:
     60a:	35 3a 20 6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f     5: mk_wheel_max_
     61a:	73 70 65 65 64 3a 20 00                             speed: .

00000622 <__c.5001>:
     622:	0a 00                                               ..

00000624 <__c.4999>:
     624:	25 75 00                                            %u.

00000627 <__c.4997>:
     627:	34 3a 20 6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61     4: mk_time_to_ma
     637:	78 3a 20 00                                         x: .

0000063b <__c.4995>:
     63b:	0a 00                                               ..

0000063d <__c.4993>:
     63d:	25 75 00                                            %u.

00000640 <__c.4991>:
     640:	33 3a 20 6d 6b 5f 6d 61 78 5f 73 70 65 65 64 3a     3: mk_max_speed:
     650:	20 00                                                .

00000652 <__c.4989>:
     652:	0a 00                                               ..

00000654 <__c.4987>:
     654:	25 75 00                                            %u.

00000657 <__c.4985>:
     657:	32 3a 20 6d 6b 5f 69 6e 74 65 72 76 61 6c 28 6d     2: mk_interval(m
     667:	73 29 3a 20 00                                      s): .

0000066c <__c.4983>:
     66c:	0a 00                                               ..

0000066e <__c.4981>:
     66e:	25 75 00                                            %u.

00000671 <__c.4979>:
     671:	31 3a 20 6d 6b 5f 64 65 6c 61 79 28 2a 31 30 6d     1: mk_delay(*10m
					  ParserData->TotalReportItems++;
     681:	73 29 3a 20 00                                      s): .

00000686 <__c.4977>:
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     686:	0a 0a 2d 2d 2d 2d 2d 20 4d 6f 75 73 65 6b 65 79     ..----- Mousekey
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     696:	20 50 61 72 61 6d 65 74 65 72 73 20 2d 2d 2d 2d      Parameters ----
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6a6:	2d 0a 00                                            -..

000006a9 <__c.5197>:
     6a9:	3e 20 00                                            > .

000006ac <__c.5195>:
     6ac:	25 75 00                                            %u.

000006af <__c.5193>:
	  return HID_PARSE_NoUnfilteredReportItems;
     6af:	4d 00                                               M.

000006b1 <__c.5191>:
     6b1:	3f 00                                               ?.

000006b3 <__c.5188>:

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6b3:	73 65 74 20 64 65 66 61 75 6c 74 20 76 61 6c 75     set default valu
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6c3:	65 73 2e 0a 00                                      es...

000006c8 <__c.5181>:
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6c8:	0a 00                                               ..

000006ca <__c.5179>:
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6ca:	25 75 00                                            %u.

000006cd <__c.5177>:

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6cd:	73 65 6c 65 63 74 65 64 20 70 61 72 61 6d 65 74     selected paramet
     6dd:	65 72 3a 20 00                                      er: .

000006e2 <__c.5164>:
     6e2:	43 3e 20 00                                         C> .

000006e6 <__c.5162>:
     6e6:	0a 51 75 69 74 20 4d 6f 75 73 65 6b 65 79 20 43     .Quit Mousekey C
     6f6:	6f 6e 73 6f 6c 65 0a 00                             onsole..

000006fe <__c.5152>:
     6fe:	53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77 69     See http://en.wi
     70e:	6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b 69     kipedia.org/wiki
     71e:	2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00              /Mouse_keys..

0000072b <__c.5150>:
     72b:	0a 00                                               ..

0000072d <__c.5148>:
     72d:	25 75 00                                            %u.

00000730 <__c.5146>:
     730:	2c 20 77 68 65 65 6c 3d 00                          , wheel=.

00000739 <__c.5144>:
     739:	25 75 00                                            %u.

0000073c <__c.5142>:
     73c:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     74c:	73 6f 72 3d 00                                      sor=.

00000751 <__c.5140>:
     751:	0a 73 70 65 65 64 20 3d 20 64 65 6c 74 61 20 2a     .speed = delta *
     761:	20 6d 61 78 5f 73 70 65 65 64 20 2a 20 28 72 65      max_speed * (re
     771:	70 65 61 74 20 2f 20 74 69 6d 65 5f 74 6f 5f 6d     peat / time_to_m
     781:	61 78 29 0a 00                                      ax)..

00000786 <__c.5138>:
     786:	70 67 64 6f 77 6e 3a 09 64 65 63 72 65 61 73 65     pgdown:.decrease
     796:	20 70 61 72 61 6d 65 74 65 72 73 28 2d 31 30 29      parameters(-10)
     7a6:	0a 00                                               ..

000007a8 <__c.5136>:
     7a8:	70 67 75 70 3a 09 69 6e 63 72 65 61 73 65 20 70     pgup:.increase p
     7b8:	61 72 61 6d 65 74 65 72 73 28 2b 31 30 29 0a 00     arameters(+10)..

000007c8 <__c.5134>:
     7c8:	64 6f 77 6e 3a 09 64 65 63 72 65 61 73 65 20 70     down:.decrease p
     7d8:	61 72 61 6d 65 74 65 72 73 28 2d 31 29 0a 00        arameters(-1)..

000007e7 <__c.5132>:
     7e7:	75 70 3a 09 69 6e 63 72 65 61 73 65 20 70 61 72     up:.increase par
     7f7:	61 6d 65 74 65 72 73 28 2b 31 29 0a 00              ameters(+1)..

00000804 <__c.5130>:
     804:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 20 76     d:.set default v
     814:	61 6c 75 65 73 0a 00                                alues..

0000081b <__c.5128>:
     81b:	70 3a 09 70 72 69 6e 74 20 70 61 72 61 6d 65 74     p:.print paramet
     82b:	65 72 73 0a 00                                      ers..

00000830 <__c.5126>:
     830:	36 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 77 68 65     6:.select mk_whe
     840:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 00     el_time_to_max..

00000850 <__c.5124>:
     850:	35 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 77 68 65     5:.select mk_whe
     860:	65 6c 5f 6d 61 78 5f 73 70 65 65 64 0a 00           el_max_speed..

0000086e <__c.5122>:
     86e:	34 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 74 69 6d     4:.select mk_tim
     87e:	65 5f 74 6f 5f 6d 61 78 0a 00                       e_to_max..

00000888 <__c.5120>:
     888:	33 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 6d 61 78     3:.select mk_max
     898:	5f 73 70 65 65 64 0a 00                             _speed..

000008a0 <__c.5118>:
     8a0:	32 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 69 6e 74     2:.select mk_int
     8b0:	65 72 76 61 6c 28 6d 73 29 0a 00                    erval(ms)..

000008bb <__c.5116>:
     8bb:	31 3a 09 73 65 6c 65 63 74 20 6d 6b 5f 64 65 6c     1:.select mk_del
     8cb:	61 79 28 2a 31 30 6d 73 29 0a 00                    ay(*10ms)..

000008d6 <__c.5114>:
     8d6:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

000008e3 <__c.5112>:
     8e3:	0a 0a 2d 2d 2d 2d 2d 20 4d 6f 75 73 65 6b 65 79     ..----- Mousekey
     8f3:	20 50 61 72 61 6d 65 74 65 72 73 20 48 65 6c 70      Parameters Help
     903:	20 2d 2d 2d 2d 2d 0a 00                              -----..

0000090b <__c.4969>:
     90b:	3f 00                                               ?.

0000090d <__c.4966>:
     90d:	4d 30 3e 00                                         M0>.

00000911 <__c.4964>:
     911:	0a 45 6e 74 65 72 20 4d 6f 75 73 65 6b 65 79 20     .Enter Mousekey 
     921:	43 6f 6e 73 6f 6c 65 0a 00                          Console..

0000092a <__c.4961>:
     92a:	0a 51 75 69 74 20 43 6f 6e 73 6f 6c 65 20 4d 6f     .Quit Console Mo
     93a:	64 65 0a 00                                         de..

0000093e <__c.4971>:
     93e:	43 3e 20 00                                         C> .

00000942 <__c.5223>:
     942:	0a 00                                               ..

00000944 <__c.5221>:
     944:	25 75 00                                            %u.

00000947 <__c.5219>:
     947:	20 74 6f 20 00                                       to .

0000094c <__c.5217>:
     94c:	25 75 00                                            %u.

0000094f <__c.5215>:
     94f:	73 77 69 74 63 68 5f 64 65 66 61 75 6c 74 5f 6c     switch_default_l
     95f:	61 79 65 72 3a 20 00                                ayer: .

00000966 <__c.4951>:
     966:	6d 3a 09 6d 6f 75 73 65 6b 65 79 0a 00              m:.mousekey..

00000973 <__c.4949>:
     973:	45 53 43 2f 71 3a 09 71 75 69 74 0a 00              ESC/q:.quit..

00000980 <__c.4947>:
     980:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6e 73 6f 6c 65 20     ..----- Console 
     990:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

0000099c <__c.4763>:
     99c:	50 61 75 73 3a 09 6a 75 6d 70 20 74 6f 20 62 6f     Paus:.jump to bo
     9ac:	6f 74 6c 6f 61 64 65 72 0a 00                       otloader..

000009b6 <__c.4761>:
     9b6:	43 61 70 73 3a 09 4c 6f 63 6b 20 4b 65 79 62 6f     Caps:.Lock Keybo
     9c6:	61 72 64 28 43 68 69 6c 64 20 50 72 6f 6f 66 29     ard(Child Proof)
     9d6:	0a 00                                               ..

000009d8 <__c.4759>:
     9d8:	50 53 63 72 3a 09 70 6f 77 65 72 20 64 6f 77 6e     PScr:.power down
     9e8:	2f 72 65 6d 6f 74 65 20 77 61 6b 65 2d 75 70 0a     /remote wake-up.
     9f8:	00                                                  .

000009f9 <__c.4757>:
     9f9:	34 2f 46 34 3a 09 73 77 69 74 63 68 20 74 6f 20     4/F4:.switch to 
     a09:	4c 61 79 65 72 34 20 0a 00                          Layer4 ..

00000a12 <__c.4755>:
     a12:	33 2f 46 33 3a 09 73 77 69 74 63 68 20 74 6f 20     3/F3:.switch to 
     a22:	4c 61 79 65 72 33 20 0a 00                          Layer3 ..

00000a2b <__c.4753>:
     a2b:	32 2f 46 32 3a 09 73 77 69 74 63 68 20 74 6f 20     2/F2:.switch to 
     a3b:	4c 61 79 65 72 32 20 0a 00                          Layer2 ..

00000a44 <__c.4751>:
     a44:	31 2f 46 31 3a 09 73 77 69 74 63 68 20 74 6f 20     1/F1:.switch to 
     a54:	4c 61 79 65 72 31 20 0a 00                          Layer1 ..

00000a5d <__c.4749>:
     a5d:	30 2f 46 31 30 3a 09 73 77 69 74 63 68 20 74 6f     0/F10:.switch to
     a6d:	20 4c 61 79 65 72 30 20 0a 00                        Layer0 ..

00000a77 <__c.4747>:
     a77:	6e 3a 09 74 6f 67 67 6c 65 20 4e 4b 52 4f 0a 00     n:.toggle NKRO..

00000a87 <__c.4745>:
     a87:	65 3a 09 70 72 69 6e 74 20 65 65 70 72 6f 6d 20     e:.print eeprom 
     a97:	63 6f 6e 66 69 67 0a 00                             config..

00000a9f <__c.4743>:
     a9f:	73 3a 09 70 72 69 6e 74 20 73 74 61 74 75 73 0a     s:.print status.
     aaf:	00                                                  .

00000ab0 <__c.4741>:
     ab0:	74 3a 09 70 72 69 6e 74 20 74 69 6d 65 72 20 63     t:.print timer c
     ac0:	6f 75 6e 74 0a 00                                   ount..

00000ac6 <__c.4739>:
     ac6:	76 3a 09 70 72 69 6e 74 20 64 65 76 69 63 65 20     v:.print device 
     ad6:	76 65 72 73 69 6f 6e 20 26 20 69 6e 66 6f 0a 00     version & info..

00000ae6 <__c.4737>:
     ae6:	6d 3a 09 74 6f 67 67 6c 65 20 6d 6f 75 73 65 20     m:.toggle mouse 
     af6:	64 65 62 75 67 0a 00                                debug..

00000afd <__c.4735>:
     afd:	6b 3a 09 74 6f 67 67 6c 65 20 6b 65 79 62 6f 61     k:.toggle keyboa
     b0d:	72 64 20 64 65 62 75 67 0a 00                       rd debug..

00000b17 <__c.4733>:
     b17:	78 3a 09 74 6f 67 67 6c 65 20 6d 61 74 72 69 78     x:.toggle matrix
     b27:	20 64 65 62 75 67 0a 00                              debug..

00000b2f <__c.4731>:
     b2f:	64 3a 09 74 6f 67 67 6c 65 20 64 65 62 75 67 20     d:.toggle debug 
     b3f:	65 6e 61 62 6c 65 0a 00                             enable..

00000b47 <__c.4729>:
     b47:	63 3a 09 65 6e 74 65 72 20 63 6f 6e 73 6f 6c 65     c:.enter console
     b57:	20 6d 6f 64 65 0a 00                                 mode..

00000b5e <__c.4727>:
     b5e:	0a 0a 2d 2d 2d 2d 2d 20 43 6f 6d 6d 61 6e 64 20     ..----- Command 
     b6e:	48 65 6c 70 20 2d 2d 2d 2d 2d 0a 00                 Help -----..

00000b7a <__c.4858>:
     b7a:	0a 00                                               ..

00000b7c <__c.4856>:
     b7c:	25 75 00                                            %u.

00000b7f <__c.4854>:
     b7f:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000b87 <__c.4852>:
     b87:	0a 00                                               ..

00000b89 <__c.4850>:
     b89:	25 75 00                                            %u.

00000b8c <__c.4848>:
     b8c:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     b9c:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000ba8 <__c.4846>:
     ba8:	0a 00                                               ..

00000baa <__c.4844>:
     baa:	25 75 00                                            %u.

00000bad <__c.4842>:
     bad:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     bbd:	20 00                                                .

00000bbf <__c.4840>:
     bbf:	0a 00                                               ..

00000bc1 <__c.4838>:
     bc1:	25 75 00                                            %u.

00000bc4 <__c.4836>:
     bc4:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

00000bce <__c.4834>:
     bce:	0a 00                                               ..

00000bd0 <__c.4832>:
     bd0:	25 75 00                                            %u.

00000bd3 <__c.4830>:
     bd3:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     be3:	20 00                                                .

00000be5 <__c.4828>:
     be5:	0a 00                                               ..

00000be7 <__c.4826>:
     be7:	25 75 00                                            %u.

00000bea <__c.4824>:
     bea:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     bfa:	20 00                                                .

00000bfc <__c.4822>:
     bfc:	0a 00                                               ..

00000bfe <__c.4820>:
     bfe:	25 75 00                                            %u.

00000c01 <__c.4818>:
     c01:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     c11:	74 72 6f 6c 3a 20 00                                trol: .

00000c18 <__c.4816>:
     c18:	0a 00                                               ..

00000c1a <__c.4814>:
     c1a:	25 75 00                                            %u.

00000c1d <__c.4812>:
     c1d:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     c2d:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

00000c36 <__c.4810>:
     c36:	0a 00                                               ..

00000c38 <__c.4808>:
     c38:	25 30 32 58 00                                      %02X.

00000c3d <__c.4806>:
     c3d:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     c4d:	77 3a 20 00                                         w: .

00000c51 <__c.4803>:
     c51:	0a 00                                               ..

00000c53 <__c.4801>:
     c53:	25 75 00                                            %u.

00000c56 <__c.4799>:
     c56:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

00000c5f <__c.4797>:
     c5f:	0a 00                                               ..

00000c61 <__c.4795>:
     c61:	25 75 00                                            %u.

00000c64 <__c.4793>:
     c64:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

00000c70 <__c.4791>:
     c70:	0a 00                                               ..

00000c72 <__c.4789>:
     c72:	25 75 00                                            %u.

00000c75 <__c.4787>:
     c75:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

00000c7f <__c.4785>:
     c7f:	0a 00                                               ..

00000c81 <__c.4783>:
     c81:	25 75 00                                            %u.

00000c84 <__c.4781>:
     c84:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

00000c8e <__c.4779>:
     c8e:	0a 00                                               ..

00000c90 <__c.4777>:
     c90:	25 30 32 58 00                                      %02X.

00000c95 <__c.4775>:
     c95:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     ca5:	3a 20 00                                            : .

00000ca8 <__c.4772>:
     ca8:	0a 00                                               ..

00000caa <__c.4770>:
     caa:	25 75 00                                            %u.

00000cad <__c.4768>:
     cad:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000cbd <__c.4942>:
     cbd:	3f 00                                               ?.

00000cbf <__c.4933>:
     cbf:	4e 4b 52 4f 3a 20 64 69 73 61 62 6c 65 64 0a 00     NKRO: disabled..

00000ccf <__c.4931>:
     ccf:	4e 4b 52 4f 3a 20 65 6e 61 62 6c 65 64 0a 00        NKRO: enabled..

00000cde <__c.4928>:
     cde:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     cee:	58 0a 00                                            X..

00000cf1 <__c.4926>:
     cf1:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     d01:	6c 3a 20 25 58 0a 00                                l: %X..

00000d08 <__c.4924>:
     d08:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     d18:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

00000d22 <__c.4922>:
     d22:	0a 0a 2d 2d 2d 2d 2d 20 53 74 61 74 75 73 20 2d     ..----- Status -
     d32:	2d 2d 2d 2d 0a 00                                   ----..

00000d38 <__c.4919>:
     d38:	74 69 6d 65 72 5f 63 6f 75 6e 74 3a 20 25 30 34     timer_count: %04
     d48:	6c 58 0a 00                                         lX..

00000d4c <__c.4916>:
     d4c:	47 43 43 3a 20 34 2e 38 2e 31 20 41 56 52 2d 4c     GCC: 4.8.1 AVR-L
     d5c:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     d6c:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

00000d7a <__c.4914>:
     d7a:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     d8a:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     d9a:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     daa:	45 20 43 4f 4d 4d 41 4e 44 20 4e 4b 52 4f 20 34     E COMMAND NKRO 4
     dba:	30 39 36 0a 00                                      096..

00000dbf <__c.4912>:
     dbf:	42 55 49 4c 44 3a 20 35 35 62 30 30 65 37 2d 64     BUILD: 55b00e7-d
     dcf:	69 72 74 79 20 28 32 32 3a 33 32 3a 32 32 20 4a     irty (22:32:22 J
     ddf:	75 6c 20 32 38 20 32 30 31 35 29 0a 00              ul 28 2015)..

00000dec <__c.4910>:
     dec:	56 49 44 3a 20 30 78 46 45 45 44 28 6a 75 6c 69     VID: 0xFEED(juli
     dfc:	61 6e 29 20 50 49 44 3a 20 30 78 36 30 36 30 28     an) PID: 0x6060(
     e0c:	6a 75 6c 69 61 6e 29 20 56 45 52 3a 20 30 78 30     julian) VER: 0x0
     e1c:	30 30 31 0a 00                                      001..

00000e21 <__c.4908>:
     e21:	44 45 53 43 3a 20 66 69 72 6d 77 61 72 65 20 66     DESC: firmware f
     e31:	6f 72 20 74 68 65 20 74 65 65 6e 73 79 0a 00        or the teensy..

00000e40 <__c.4906>:
     e40:	0a 0a 2d 2d 2d 2d 2d 20 56 65 72 73 69 6f 6e 20     ..----- Version 
     e50:	2d 2d 2d 2d 2d 0a 00                                -----..

00000e57 <__c.4903>:
     e57:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 64 69     .DEBUG: mouse di
     e67:	73 61 62 6c 65 64 2e 0a 00                          sabled...

00000e70 <__c.4901>:
     e70:	0a 44 45 42 55 47 3a 20 6d 6f 75 73 65 20 65 6e     .DEBUG: mouse en
     e80:	61 62 6c 65 64 2e 0a 00                             abled...

00000e88 <__c.4898>:
     e88:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     e98:	20 64 69 73 61 62 6c 65 64 2e 0a 00                  disabled...

00000ea4 <__c.4896>:
     ea4:	0a 44 45 42 55 47 3a 20 6b 65 79 62 6f 61 72 64     .DEBUG: keyboard
     eb4:	20 65 6e 61 62 6c 65 64 2e 0a 00                     enabled...

00000ebf <__c.4893>:
     ebf:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 64     .DEBUG: matrix d
     ecf:	69 73 61 62 6c 65 64 2e 0a 00                       isabled...

00000ed9 <__c.4891>:
     ed9:	0a 44 45 42 55 47 3a 20 6d 61 74 72 69 78 20 65     .DEBUG: matrix e
     ee9:	6e 61 62 6c 65 64 2e 0a 00                          nabled...

00000ef2 <__c.4888>:
     ef2:	0a 44 45 42 55 47 3a 20 65 6e 61 62 6c 65 64 2e     .DEBUG: enabled.
     f02:	0a 00                                               ..

00000f04 <__c.4886>:
     f04:	0a 44 45 42 55 47 3a 20 64 69 73 61 62 6c 65 64     .DEBUG: disabled
     f14:	2e 0a 00                                            ...

00000f17 <__c.4883>:
     f17:	6e 6f 74 20 73 75 70 70 6f 72 74 65 64 2e 0a 00     not supported...

00000f27 <__c.4881>:
     f27:	0a 0a 4a 75 6d 70 20 74 6f 20 62 6f 6f 74 6c 6f     ..Jump to bootlo
     f37:	61 64 65 72 2e 2e 2e 20 00                          ader... .

00000f40 <__c.4878>:
     f40:	43 3e 20 00                                         C> .

00000f44 <__c.4876>:
     f44:	0a 45 6e 74 65 72 20 43 6f 6e 73 6f 6c 65 20 4d     .Enter Console M
     f54:	6f 64 65 0a 00                                      ode..

00000f59 <__c.4871>:
     f59:	55 6e 6c 6f 63 6b 65 64 2e 0a 00                    Unlocked...

00000f64 <__c.4869>:
     f64:	4c 6f 63 6b 65 64 2e 0a 00                          Locked...

00000f6d <__c.4865>:
     f6d:	65 65 63 6f 6e 66 69 67 3a 0a 00                    eeconfig:..

00000f78 <__ctors_end>:
     f78:	11 24       	eor	r1, r1
     f7a:	1f be       	out	0x3f, r1	; 63
     f7c:	cf ef       	ldi	r28, 0xFF	; 255
     f7e:	da e0       	ldi	r29, 0x0A	; 10
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	cd bf       	out	0x3d, r28	; 61

00000f84 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     f84:	04 b6       	in	r0, 0x34	; 52
     f86:	03 fe       	sbrs	r0, 3
     f88:	24 c0       	rjmp	.+72     	; 0xfd2 <__do_copy_data>
     f8a:	80 91 e6 01 	lds	r24, 0x01E6
     f8e:	90 91 e7 01 	lds	r25, 0x01E7
     f92:	a0 91 e8 01 	lds	r26, 0x01E8
     f96:	b0 91 e9 01 	lds	r27, 0x01E9
     f9a:	87 30       	cpi	r24, 0x07	; 7
     f9c:	90 4b       	sbci	r25, 0xB0	; 176
     f9e:	a7 40       	sbci	r26, 0x07	; 7
     fa0:	b0 4b       	sbci	r27, 0xB0	; 176
     fa2:	b9 f4       	brne	.+46     	; 0xfd2 <__do_copy_data>
        reset_key = 0;
     fa4:	10 92 e6 01 	sts	0x01E6, r1
     fa8:	10 92 e7 01 	sts	0x01E7, r1
     fac:	10 92 e8 01 	sts	0x01E8, r1
     fb0:	10 92 e9 01 	sts	0x01E9, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     fb4:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     fb6:	84 b7       	in	r24, 0x34	; 52
     fb8:	87 7f       	andi	r24, 0xF7	; 247
     fba:	84 bf       	out	0x34, r24	; 52
        wdt_disable();
     fbc:	88 e1       	ldi	r24, 0x18	; 24
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	80 93 60 00 	sts	0x0060, r24
     fc6:	10 92 60 00 	sts	0x0060, r1
     fca:	0f be       	out	0x3f, r0	; 63

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     fcc:	e0 e0       	ldi	r30, 0x00	; 0
     fce:	f8 e3       	ldi	r31, 0x38	; 56
     fd0:	09 95       	icall

00000fd2 <__do_copy_data>:
     fd2:	11 e0       	ldi	r17, 0x01	; 1
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	b1 e0       	ldi	r27, 0x01	; 1
     fd8:	e2 e6       	ldi	r30, 0x62	; 98
     fda:	fa e5       	ldi	r31, 0x5A	; 90
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <__do_copy_data+0x10>
     fde:	05 90       	lpm	r0, Z+
     fe0:	0d 92       	st	X+, r0
     fe2:	a8 33       	cpi	r26, 0x38	; 56
     fe4:	b1 07       	cpc	r27, r17
     fe6:	d9 f7       	brne	.-10     	; 0xfde <__do_copy_data+0xc>

00000fe8 <__do_clear_bss>:
     fe8:	21 e0       	ldi	r18, 0x01	; 1
     fea:	a8 e3       	ldi	r26, 0x38	; 56
     fec:	b1 e0       	ldi	r27, 0x01	; 1
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <.do_clear_bss_start>

00000ff0 <.do_clear_bss_loop>:
     ff0:	1d 92       	st	X+, r1

00000ff2 <.do_clear_bss_start>:
     ff2:	a6 3e       	cpi	r26, 0xE6	; 230
     ff4:	b2 07       	cpc	r27, r18
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <.do_clear_bss_loop>
     ff8:	0e 94 c9 0c 	call	0x1992	; 0x1992 <main>
     ffc:	0c 94 2f 2d 	jmp	0x5a5e	; 0x5a5e <_exit>

00001000 <__bad_interrupt>:
    1000:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001004 <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
    1004:	ff 93       	push	r31
	push	ZL
    1006:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
    1008:	e0 91 c5 01 	lds	r30, 0x01C5
	lds	ZH, xfunc_out+1	;/
    100c:	f0 91 c6 01 	lds	r31, 0x01C6
	sbiw	ZL, 0		;Skip if null
    1010:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
    1012:	09 f0       	breq	.+2      	; 0x1016 <xputc+0x12>
	icall
    1014:	09 95       	icall
2:	pop	ZL
    1016:	ef 91       	pop	r30
	pop	ZH
    1018:	ff 91       	pop	r31
	ret
    101a:	08 95       	ret

0000101c <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
    101c:	fc 01       	movw	r30, r24
1:	_LPMI	r24
    101e:	85 91       	lpm	r24, Z+
	cpi	r24, 0
    1020:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
    1022:	11 f0       	breq	.+4      	; 0x1028 <xputs+0xc>
	rcall	xputc
    1024:	ef df       	rcall	.-34     	; 0x1004 <xputc>
	rjmp	1b
    1026:	fb cf       	rjmp	.-10     	; 0x101e <xputs+0x2>
2:	ret
    1028:	08 95       	ret

0000102a <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
    102a:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
    102c:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
    102e:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
    1030:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
    1032:	0c c0       	rjmp	.+24     	; 0x104c <xitoa+0x22>
	neg	r20		;
    1034:	41 95       	neg	r20
	sbrs	r25, 7		;
    1036:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
    1038:	09 c0       	rjmp	.+18     	; 0x104c <xitoa+0x22>
	ldi	r30, '-'	;
    103a:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
    103c:	60 95       	com	r22
	com	r23		;
    103e:	70 95       	com	r23
	com	r24		;
    1040:	80 95       	com	r24
	com	r25		;
    1042:	90 95       	com	r25
	adc	r22, r1		;
    1044:	61 1d       	adc	r22, r1
	adc	r23, r1		;
    1046:	71 1d       	adc	r23, r1
	adc	r24, r1		;
    1048:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
    104a:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
    104c:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <xitoa+0x2a>
	neg	r18		;
    1050:	21 95       	neg	r18
	ldi	r19, '0'	;/
    1052:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
    1054:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
    1056:	aa 27       	eor	r26, r26
2:	lsl	r22		;
    1058:	66 0f       	add	r22, r22
	rol	r23		;
    105a:	77 1f       	adc	r23, r23
	rol	r24		;
    105c:	88 1f       	adc	r24, r24
	rol	r25		;
    105e:	99 1f       	adc	r25, r25
	rol	r26		;
    1060:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
    1062:	a4 17       	cp	r26, r20
	brcs	3f		;
    1064:	10 f0       	brcs	.+4      	; 0x106a <xitoa+0x40>
	sub	r26, r20	;
    1066:	a4 1b       	sub	r26, r20
	inc	r22		;
    1068:	63 95       	inc	r22
3:	dec	r21		;
    106a:	5a 95       	dec	r21
	brne	2b		;/
    106c:	a9 f7       	brne	.-22     	; 0x1058 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
    106e:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
    1070:	08 f0       	brcs	.+2      	; 0x1074 <xitoa+0x4a>
	subi	r26, -7		;
    1072:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
    1074:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
    1076:	af 93       	push	r26
	inc	r31		;/
    1078:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
    107a:	61 15       	cp	r22, r1
	cpc	r23, r1		;
    107c:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
    107e:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
    1080:	91 05       	cpc	r25, r1
	brne	1b		;/
    1082:	41 f7       	brne	.-48     	; 0x1054 <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
    1084:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
    1086:	11 f4       	brne	.+4      	; 0x108c <xitoa+0x62>
	push	r30		;
    1088:	ef 93       	push	r30
	inc	r31		;/
    108a:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
    108c:	f2 17       	cp	r31, r18
	brcc	6f		;
    108e:	18 f4       	brcc	.+6      	; 0x1096 <xitoa+0x6c>
	push	r19		;
    1090:	3f 93       	push	r19
	inc	r31		;
    1092:	f3 95       	inc	r31
	rjmp	5b		;/
    1094:	fb cf       	rjmp	.-10     	; 0x108c <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
    1096:	8f 91       	pop	r24
	rcall	xputc		;
    1098:	b5 df       	rcall	.-150    	; 0x1004 <xputc>
	dec	r31		;
    109a:	fa 95       	dec	r31
	brne	6b		;/
    109c:	e1 f7       	brne	.-8      	; 0x1096 <xitoa+0x6c>

	ret
    109e:	08 95       	ret

000010a0 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
    10a0:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
    10a2:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
    10a4:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
    10a6:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
    10a8:	21 f0       	breq	.+8      	; 0x10b2 <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
    10aa:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
    10ac:	19 f0       	breq	.+6      	; 0x10b4 <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
    10ae:	aa df       	rcall	.-172    	; 0x1004 <xputc>
	rjmp	0b		;/
    10b0:	f9 cf       	rjmp	.-14     	; 0x10a4 <xvprintf+0x4>
90:	ret
    10b2:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
    10b4:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
    10b6:	e8 94       	clt
	_LPMI	r21		;Get flags
    10b8:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
    10ba:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
    10bc:	c1 f3       	breq	.-16     	; 0x10ae <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
    10be:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
    10c0:	11 f4       	brne	.+4      	; 0x10c6 <xvprintf+0x26>
	set			;/
    10c2:	68 94       	set
22:	_LPMI	r21		;Get width
    10c4:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
    10c6:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
    10c8:	48 f4       	brcc	.+18     	; 0x10dc <xvprintf+0x3c>
	subi	r21, '0'	;
    10ca:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
    10cc:	90 f3       	brcs	.-28     	; 0x10b2 <xvprintf+0x12>
	lsl	r18		;
    10ce:	22 0f       	add	r18, r18
	mov	r0, r18		;
    10d0:	02 2e       	mov	r0, r18
	lsl	r18		;
    10d2:	22 0f       	add	r18, r18
	lsl	r18		;
    10d4:	22 0f       	add	r18, r18
	add	r18, r0		;
    10d6:	20 0d       	add	r18, r0
	add	r18, r21	;
    10d8:	25 0f       	add	r18, r21
	rjmp	22b		;/
    10da:	f4 cf       	rjmp	.-24     	; 0x10c4 <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
    10dc:	0e f4       	brtc	.+2      	; 0x10e0 <xvprintf+0x40>
	neg	r18		;
    10de:	21 95       	neg	r18
25:	ld	r24, Y+		;
    10e0:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
    10e2:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
    10e4:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
    10e6:	19 f3       	breq	.-58     	; 0x10ae <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
    10e8:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
    10ea:	29 f1       	breq	.+74     	; 0x1136 <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
    10ec:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
    10ee:	59 f1       	breq	.+86     	; 0x1146 <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
    10f0:	bc 01       	movw	r22, r24
	clr	r24		;
    10f2:	88 27       	eor	r24, r24
	clr	r25		;
    10f4:	99 27       	eor	r25, r25
	clt			;/
    10f6:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
    10f8:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
    10fa:	21 f4       	brne	.+8      	; 0x1104 <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
    10fc:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
    10fe:	99 91       	ld	r25, Y+
	set			;
    1100:	68 94       	set
	_LPMI	r21		;/
    1102:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
    1104:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
    1106:	39 f4       	brne	.+14     	; 0x1116 <xvprintf+0x76>
	ldi	r20, -10	;
    1108:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
    110a:	7e f0       	brts	.+30     	; 0x112a <xvprintf+0x8a>
	sbrs	r23, 7		;
    110c:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
    110e:	0d c0       	rjmp	.+26     	; 0x112a <xvprintf+0x8a>
	ldi	r24, -1		;
    1110:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
    1112:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
    1114:	0a c0       	rjmp	.+20     	; 0x112a <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
    1116:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
    1118:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
    111a:	39 f0       	breq	.+14     	; 0x112a <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
    111c:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
    111e:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
    1120:	21 f0       	breq	.+8      	; 0x112a <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
    1122:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
    1124:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
    1126:	09 f0       	breq	.+2      	; 0x112a <xvprintf+0x8a>
	ret			;abort
    1128:	08 95       	ret
40:	push	ZH		;Output the value
    112a:	ff 93       	push	r31
	push	ZL		;
    112c:	ef 93       	push	r30
	rcall	xitoa		;
    112e:	7d df       	rcall	.-262    	; 0x102a <xitoa>
42:	pop	ZL		;
    1130:	ef 91       	pop	r30
	pop	ZH		;
    1132:	ff 91       	pop	r31
	rjmp	0b		;/
    1134:	b7 cf       	rjmp	.-146    	; 0x10a4 <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
    1136:	ff 93       	push	r31
	push	ZL
    1138:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
    113a:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
    113c:	81 91       	ld	r24, Z+
	cpi	r24, 0
    113e:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
    1140:	b9 f3       	breq	.-18     	; 0x1130 <xvprintf+0x90>
	rcall	xputc
    1142:	60 df       	rcall	.-320    	; 0x1004 <xputc>
	rjmp	51b
    1144:	fb cf       	rjmp	.-10     	; 0x113c <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
    1146:	ff 93       	push	r31
	push	ZL
    1148:	ef 93       	push	r30
	rcall	xputs
    114a:	68 df       	rcall	.-304    	; 0x101c <xputs>
	rjmp	42b
    114c:	f1 cf       	rjmp	.-30     	; 0x1130 <xvprintf+0x90>

0000114e <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
    114e:	df 93       	push	r29
	push	YL
    1150:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
    1152:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
    1154:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
    1156:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
    1158:	a3 df       	rcall	.-186    	; 0x10a0 <xvprintf>
	pop	YL
    115a:	cf 91       	pop	r28
	pop	YH
    115c:	df 91       	pop	r29
	ret
    115e:	08 95       	ret

00001160 <matrix_power_up>:

void keyboard_init(void);
void keyboard_task(void);
void keyboard_set_leds(uint8_t leds);

__attribute__ ((weak)) void matrix_power_up(void) {}
    1160:	08 95       	ret

00001162 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    1162:	08 95       	ret

00001164 <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
    1164:	9e e0       	ldi	r25, 0x0E	; 14
    1166:	79 9f       	mul	r23, r25
    1168:	f0 01       	movw	r30, r0
    116a:	11 24       	eor	r1, r1
    116c:	96 e4       	ldi	r25, 0x46	; 70
    116e:	89 9f       	mul	r24, r25
    1170:	e0 0d       	add	r30, r0
    1172:	f1 1d       	adc	r31, r1
    1174:	11 24       	eor	r1, r1
    1176:	e6 0f       	add	r30, r22
    1178:	f1 1d       	adc	r31, r1
    117a:	e8 59       	subi	r30, 0x98	; 152
    117c:	fe 4f       	sbci	r31, 0xFE	; 254
    117e:	84 91       	lpm	r24, Z
}
    1180:	08 95       	ret

00001182 <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
    1182:	e8 2f       	mov	r30, r24
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	ee 0f       	add	r30, r30
    1188:	ff 1f       	adc	r31, r31
    118a:	ea 51       	subi	r30, 0x1A	; 26
    118c:	f0 40       	sbci	r31, 0x00	; 0
}
    118e:	85 91       	lpm	r24, Z+
    1190:	94 91       	lpm	r25, Z
    1192:	08 95       	ret

00001194 <unselect_rows>:
 * pin: B0 B1 B2 B3
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRC  &= ~0b01000000;
    1194:	3e 98       	cbi	0x07, 6	; 7
    PORTC &= ~0b01000000;
    1196:	46 98       	cbi	0x08, 6	; 8
    DDRD  &= ~0b00001111;
    1198:	8a b1       	in	r24, 0x0a	; 10
    119a:	80 7f       	andi	r24, 0xF0	; 240
    119c:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~0b00001111;
    119e:	8b b1       	in	r24, 0x0b	; 11
    11a0:	80 7f       	andi	r24, 0xF0	; 240
    11a2:	8b b9       	out	0x0b, r24	; 11
    11a4:	08 95       	ret

000011a6 <matrix_init>:
}

void matrix_init(void)
{
    // initialize row and col
    unselect_rows();
    11a6:	0e 94 ca 08 	call	0x1194	; 0x1194 <unselect_rows>

static void init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    // 'F' port columns enabled
    DDRF  &= ~(1<<0 | 1<<1 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
    11aa:	80 b3       	in	r24, 0x10	; 16
    11ac:	8c 70       	andi	r24, 0x0C	; 12
    11ae:	80 bb       	out	0x10, r24	; 16
    PORTF |=  (1<<0 | 1<<1 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
    11b0:	81 b3       	in	r24, 0x11	; 17
    11b2:	83 6f       	ori	r24, 0xF3	; 243
    11b4:	81 bb       	out	0x11, r24	; 17
    // 'B' port columns enabled
    DDRB  &= ~(1<<0 | 1<<1 | 1<<2 | 1<<3 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
    11b6:	84 b1       	in	r24, 0x04	; 4
    11b8:	14 b8       	out	0x04, r1	; 4
    PORTB |=  (1<<0 | 1<<1 | 1<<2 | 1<<3 | 1<<4 | 1<<5 | 1<<6 | 1<<7);
    11ba:	85 b1       	in	r24, 0x05	; 5
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	85 b9       	out	0x05, r24	; 5
    // 'D' ports columns enabled
    DDRD  &= ~(1<<7);
    11c0:	57 98       	cbi	0x0a, 7	; 10
    PORTD |=  (1<<7);
    11c2:	5f 9a       	sbi	0x0b, 7	; 11
    11c4:	e2 e4       	ldi	r30, 0x42	; 66
    11c6:	f1 e0       	ldi	r31, 0x01	; 1
    11c8:	a8 e3       	ldi	r26, 0x38	; 56
    11ca:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
    11cc:	11 92       	st	Z+, r1
    11ce:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
    11d0:	1d 92       	st	X+, r1
    11d2:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	ec 34       	cpi	r30, 0x4C	; 76
    11d8:	f8 07       	cpc	r31, r24
    11da:	c1 f7       	brne	.-16     	; 0x11cc <matrix_init+0x26>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
    11dc:	08 95       	ret

000011de <matrix_scan>:

uint8_t matrix_scan(void)
{
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	c8 e3       	ldi	r28, 0x38	; 56
    11ea:	d1 e0       	ldi	r29, 0x01	; 1
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    11ec:	10 e0       	ldi	r17, 0x00	; 0
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
            matrix_debouncing[i] = cols;
            if (debouncing) {
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    11ee:	e7 ed       	ldi	r30, 0xD7	; 215
    11f0:	ee 2e       	mov	r14, r30
    11f2:	e1 e0       	ldi	r30, 0x01	; 1
    11f4:	fe 2e       	mov	r15, r30
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
       switch (row) {
    11f6:	12 30       	cpi	r17, 0x02	; 2
    11f8:	71 f0       	breq	.+28     	; 0x1216 <matrix_scan+0x38>
    11fa:	18 f4       	brcc	.+6      	; 0x1202 <matrix_scan+0x24>
    11fc:	11 30       	cpi	r17, 0x01	; 1
    11fe:	41 f0       	breq	.+16     	; 0x1210 <matrix_scan+0x32>
    1200:	04 c0       	rjmp	.+8      	; 0x120a <matrix_scan+0x2c>
    1202:	13 30       	cpi	r17, 0x03	; 3
    1204:	59 f0       	breq	.+22     	; 0x121c <matrix_scan+0x3e>
    1206:	14 30       	cpi	r17, 0x04	; 4
    1208:	61 f0       	breq	.+24     	; 0x1222 <matrix_scan+0x44>
           case 0:
               DDRD  |= (1<<0);
    120a:	50 9a       	sbi	0x0a, 0	; 10
               PORTD &= ~(1<<0);
    120c:	58 98       	cbi	0x0b, 0	; 11
    120e:	0b c0       	rjmp	.+22     	; 0x1226 <matrix_scan+0x48>
               break;
           case 1:
               DDRD  |= (1<<1);
    1210:	51 9a       	sbi	0x0a, 1	; 10
               PORTD &= ~(1<<1);
    1212:	59 98       	cbi	0x0b, 1	; 11
    1214:	08 c0       	rjmp	.+16     	; 0x1226 <matrix_scan+0x48>
               break;
           case 2:
               DDRD  |= (1<<2);
    1216:	52 9a       	sbi	0x0a, 2	; 10
               PORTD &= ~(1<<2);
    1218:	5a 98       	cbi	0x0b, 2	; 11
    121a:	05 c0       	rjmp	.+10     	; 0x1226 <matrix_scan+0x48>
               break;
           case 3:
               DDRD  |= (1<<3);
    121c:	53 9a       	sbi	0x0a, 3	; 10
               PORTD &= ~(1<<3);
    121e:	5b 98       	cbi	0x0b, 3	; 11
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <matrix_scan+0x48>
               break;
           case 4:
               DDRC  |= (1<<6);
    1222:	3e 9a       	sbi	0x07, 6	; 7
               PORTC &= ~(1<<6);
    1224:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1226:	80 ea       	ldi	r24, 0xA0	; 160
    1228:	8a 95       	dec	r24
    122a:	f1 f7       	brne	.-4      	; 0x1228 <matrix_scan+0x4a>
}

static matrix_row_t read_cols(void)
{
    return 
           (PINB&(1<<7) ? 0 : (1<<0)) |
    122c:	23 b1       	in	r18, 0x03	; 3
    122e:	33 27       	eor	r19, r19
    1230:	27 fd       	sbrc	r18, 7
    1232:	30 95       	com	r19
    1234:	20 95       	com	r18
    1236:	30 95       	com	r19
    1238:	83 2f       	mov	r24, r19
    123a:	88 1f       	adc	r24, r24
    123c:	88 27       	eor	r24, r24
    123e:	88 1f       	adc	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
           (PINB&(1<<3) ? 0 : (1<<1)) |
    1242:	1b 9b       	sbis	0x03, 3	; 3
    1244:	03 c0       	rjmp	.+6      	; 0x124c <matrix_scan+0x6e>
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <matrix_scan+0x72>
    124c:	62 e0       	ldi	r22, 0x02	; 2
    124e:	70 e0       	ldi	r23, 0x00	; 0
}

static matrix_row_t read_cols(void)
{
    return 
           (PINB&(1<<7) ? 0 : (1<<0)) |
    1250:	86 2b       	or	r24, r22
    1252:	97 2b       	or	r25, r23
           (PINB&(1<<3) ? 0 : (1<<1)) |
           (PINB&(1<<2) ? 0 : (1<<2)) |
    1254:	1a 9b       	sbis	0x03, 2	; 3
    1256:	03 c0       	rjmp	.+6      	; 0x125e <matrix_scan+0x80>
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	70 e0       	ldi	r23, 0x00	; 0
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <matrix_scan+0x84>
    125e:	64 e0       	ldi	r22, 0x04	; 4
    1260:	70 e0       	ldi	r23, 0x00	; 0

static matrix_row_t read_cols(void)
{
    return 
           (PINB&(1<<7) ? 0 : (1<<0)) |
           (PINB&(1<<3) ? 0 : (1<<1)) |
    1262:	68 2b       	or	r22, r24
    1264:	79 2b       	or	r23, r25
           (PINB&(1<<2) ? 0 : (1<<2)) |
           (PINB&(1<<1) ? 0 : (1<<3)) |
    1266:	19 9b       	sbis	0x03, 1	; 3
    1268:	03 c0       	rjmp	.+6      	; 0x1270 <matrix_scan+0x92>
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	50 e0       	ldi	r21, 0x00	; 0
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <matrix_scan+0x96>
    1270:	48 e0       	ldi	r20, 0x08	; 8
    1272:	50 e0       	ldi	r21, 0x00	; 0
static matrix_row_t read_cols(void)
{
    return 
           (PINB&(1<<7) ? 0 : (1<<0)) |
           (PINB&(1<<3) ? 0 : (1<<1)) |
           (PINB&(1<<2) ? 0 : (1<<2)) |
    1274:	9b 01       	movw	r18, r22
    1276:	24 2b       	or	r18, r20
    1278:	35 2b       	or	r19, r21
           (PINB&(1<<1) ? 0 : (1<<3)) |
           (PINB&(1<<0) ? 0 : (1<<4)) |
    127a:	18 9b       	sbis	0x03, 0	; 3
    127c:	03 c0       	rjmp	.+6      	; 0x1284 <matrix_scan+0xa6>
    127e:	40 e0       	ldi	r20, 0x00	; 0
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <matrix_scan+0xaa>
    1284:	40 e1       	ldi	r20, 0x10	; 16
    1286:	50 e0       	ldi	r21, 0x00	; 0
{
    return 
           (PINB&(1<<7) ? 0 : (1<<0)) |
           (PINB&(1<<3) ? 0 : (1<<1)) |
           (PINB&(1<<2) ? 0 : (1<<2)) |
           (PINB&(1<<1) ? 0 : (1<<3)) |
    1288:	24 2b       	or	r18, r20
    128a:	35 2b       	or	r19, r21
           (PINB&(1<<0) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
    128c:	89 b1       	in	r24, 0x09	; 9
    128e:	99 27       	eor	r25, r25
    1290:	87 fd       	sbrc	r24, 7
    1292:	90 95       	com	r25
    1294:	80 95       	com	r24
    1296:	90 95       	com	r25
    1298:	88 27       	eor	r24, r24
    129a:	99 0f       	add	r25, r25
    129c:	88 1f       	adc	r24, r24
    129e:	99 27       	eor	r25, r25
    12a0:	75 e0       	ldi	r23, 0x05	; 5
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	7a 95       	dec	r23
    12a8:	e1 f7       	brne	.-8      	; 0x12a2 <matrix_scan+0xc4>
    return 
           (PINB&(1<<7) ? 0 : (1<<0)) |
           (PINB&(1<<3) ? 0 : (1<<1)) |
           (PINB&(1<<2) ? 0 : (1<<2)) |
           (PINB&(1<<1) ? 0 : (1<<3)) |
           (PINB&(1<<0) ? 0 : (1<<4)) |
    12aa:	28 2b       	or	r18, r24
    12ac:	39 2b       	or	r19, r25
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINB&(1<<4) ? 0 : (1<<6)) |
    12ae:	1c 9b       	sbis	0x03, 4	; 3
    12b0:	03 c0       	rjmp	.+6      	; 0x12b8 <matrix_scan+0xda>
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <matrix_scan+0xde>
    12b8:	80 e4       	ldi	r24, 0x40	; 64
    12ba:	90 e0       	ldi	r25, 0x00	; 0
           (PINB&(1<<7) ? 0 : (1<<0)) |
           (PINB&(1<<3) ? 0 : (1<<1)) |
           (PINB&(1<<2) ? 0 : (1<<2)) |
           (PINB&(1<<1) ? 0 : (1<<3)) |
           (PINB&(1<<0) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
    12bc:	28 2b       	or	r18, r24
    12be:	39 2b       	or	r19, r25
           (PINB&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<5) ? 0 : (1<<7)) |
    12c0:	1d 9b       	sbis	0x03, 5	; 3
    12c2:	03 c0       	rjmp	.+6      	; 0x12ca <matrix_scan+0xec>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <matrix_scan+0xf0>
    12ca:	80 e8       	ldi	r24, 0x80	; 128
    12cc:	90 e0       	ldi	r25, 0x00	; 0
           (PINB&(1<<3) ? 0 : (1<<1)) |
           (PINB&(1<<2) ? 0 : (1<<2)) |
           (PINB&(1<<1) ? 0 : (1<<3)) |
           (PINB&(1<<0) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINB&(1<<4) ? 0 : (1<<6)) |
    12ce:	28 2b       	or	r18, r24
    12d0:	39 2b       	or	r19, r25
           (PINB&(1<<5) ? 0 : (1<<7)) |
           (PINB&(1<<6) ? 0 : (1<<8)) |
    12d2:	1e 9b       	sbis	0x03, 6	; 3
    12d4:	03 c0       	rjmp	.+6      	; 0x12dc <matrix_scan+0xfe>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <matrix_scan+0x102>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	91 e0       	ldi	r25, 0x01	; 1
           (PINB&(1<<2) ? 0 : (1<<2)) |
           (PINB&(1<<1) ? 0 : (1<<3)) |
           (PINB&(1<<0) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINB&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<5) ? 0 : (1<<7)) |
    12e0:	28 2b       	or	r18, r24
    12e2:	39 2b       	or	r19, r25
           (PINB&(1<<6) ? 0 : (1<<8)) |
           (PINF&(1<<7) ? 0 : (1<<9)) |
    12e4:	8f b1       	in	r24, 0x0f	; 15
    12e6:	99 27       	eor	r25, r25
    12e8:	87 fd       	sbrc	r24, 7
    12ea:	90 95       	com	r25
    12ec:	80 95       	com	r24
    12ee:	90 95       	com	r25
    12f0:	88 27       	eor	r24, r24
    12f2:	99 0f       	add	r25, r25
    12f4:	88 1f       	adc	r24, r24
    12f6:	99 27       	eor	r25, r25
    12f8:	98 2f       	mov	r25, r24
    12fa:	88 27       	eor	r24, r24
    12fc:	99 0f       	add	r25, r25
           (PINB&(1<<1) ? 0 : (1<<3)) |
           (PINB&(1<<0) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINB&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<5) ? 0 : (1<<7)) |
           (PINB&(1<<6) ? 0 : (1<<8)) |
    12fe:	28 2b       	or	r18, r24
    1300:	39 2b       	or	r19, r25
           (PINF&(1<<7) ? 0 : (1<<9)) |
           (PINF&(1<<6) ? 0 : (1<<10)) |
    1302:	7e 9b       	sbis	0x0f, 6	; 15
    1304:	03 c0       	rjmp	.+6      	; 0x130c <matrix_scan+0x12e>
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <matrix_scan+0x132>
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	74 e0       	ldi	r23, 0x04	; 4
           (PINB&(1<<0) ? 0 : (1<<4)) |
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINB&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<5) ? 0 : (1<<7)) |
           (PINB&(1<<6) ? 0 : (1<<8)) |
           (PINF&(1<<7) ? 0 : (1<<9)) |
    1310:	26 2b       	or	r18, r22
    1312:	37 2b       	or	r19, r23
           (PINF&(1<<6) ? 0 : (1<<10)) |
           (PINF&(1<<5) ? 0 : (1<<11)) |
    1314:	7d 9b       	sbis	0x0f, 5	; 15
    1316:	03 c0       	rjmp	.+6      	; 0x131e <matrix_scan+0x140>
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <matrix_scan+0x144>
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	78 e0       	ldi	r23, 0x08	; 8
           (PIND&(1<<7) ? 0 : (1<<5)) |
           (PINB&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<5) ? 0 : (1<<7)) |
           (PINB&(1<<6) ? 0 : (1<<8)) |
           (PINF&(1<<7) ? 0 : (1<<9)) |
           (PINF&(1<<6) ? 0 : (1<<10)) |
    1322:	26 2b       	or	r18, r22
    1324:	37 2b       	or	r19, r23
           (PINF&(1<<5) ? 0 : (1<<11)) |
           (PINF&(1<<4) ? 0 : (1<<12)) |
    1326:	7c 9b       	sbis	0x0f, 4	; 15
    1328:	03 c0       	rjmp	.+6      	; 0x1330 <matrix_scan+0x152>
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <matrix_scan+0x156>
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	50 e1       	ldi	r21, 0x10	; 16
           (PINB&(1<<4) ? 0 : (1<<6)) |
           (PINB&(1<<5) ? 0 : (1<<7)) |
           (PINB&(1<<6) ? 0 : (1<<8)) |
           (PINF&(1<<7) ? 0 : (1<<9)) |
           (PINF&(1<<6) ? 0 : (1<<10)) |
           (PINF&(1<<5) ? 0 : (1<<11)) |
    1334:	24 2b       	or	r18, r20
    1336:	35 2b       	or	r19, r21
           (PINF&(1<<4) ? 0 : (1<<12)) |
           (PINF&(1<<1) ? 0 : (1<<13)) |
    1338:	79 9b       	sbis	0x0f, 1	; 15
    133a:	03 c0       	rjmp	.+6      	; 0x1342 <matrix_scan+0x164>
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <matrix_scan+0x168>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e2       	ldi	r25, 0x20	; 32
           (PINB&(1<<5) ? 0 : (1<<7)) |
           (PINB&(1<<6) ? 0 : (1<<8)) |
           (PINF&(1<<7) ? 0 : (1<<9)) |
           (PINF&(1<<6) ? 0 : (1<<10)) |
           (PINF&(1<<5) ? 0 : (1<<11)) |
           (PINF&(1<<4) ? 0 : (1<<12)) |
    1346:	28 2b       	or	r18, r24
    1348:	39 2b       	or	r19, r25
           (PINF&(1<<1) ? 0 : (1<<13)) |
           (PINF&(1<<0) ? 0 : (1<<14)) ;
    134a:	78 9b       	sbis	0x0f, 0	; 15
    134c:	03 c0       	rjmp	.+6      	; 0x1354 <matrix_scan+0x176>
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <matrix_scan+0x17a>
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e4       	ldi	r25, 0x40	; 64
           (PINB&(1<<6) ? 0 : (1<<8)) |
           (PINF&(1<<7) ? 0 : (1<<9)) |
           (PINF&(1<<6) ? 0 : (1<<10)) |
           (PINF&(1<<5) ? 0 : (1<<11)) |
           (PINF&(1<<4) ? 0 : (1<<12)) |
           (PINF&(1<<1) ? 0 : (1<<13)) |
    1358:	28 2b       	or	r18, r24
    135a:	39 2b       	or	r19, r25
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
    135c:	88 81       	ld	r24, Y
    135e:	99 81       	ldd	r25, Y+1	; 0x01
    1360:	82 17       	cp	r24, r18
    1362:	93 07       	cpc	r25, r19
    1364:	49 f1       	breq	.+82     	; 0x13b8 <matrix_scan+0x1da>
            matrix_debouncing[i] = cols;
    1366:	39 83       	std	Y+1, r19	; 0x01
    1368:	28 83       	st	Y, r18
            if (debouncing) {
    136a:	80 91 00 01 	lds	r24, 0x0100
    136e:	88 23       	and	r24, r24
    1370:	01 f1       	breq	.+64     	; 0x13b2 <matrix_scan+0x1d4>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1372:	80 91 c3 01 	lds	r24, 0x01C3
    1376:	80 ff       	sbrs	r24, 0
    1378:	04 c0       	rjmp	.+8      	; 0x1382 <matrix_scan+0x1a4>
    137a:	8c ed       	ldi	r24, 0xDC	; 220
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    1382:	80 91 c3 01 	lds	r24, 0x01C3
    1386:	80 ff       	sbrs	r24, 0
    1388:	0c c0       	rjmp	.+24     	; 0x13a2 <matrix_scan+0x1c4>
    138a:	80 91 00 01 	lds	r24, 0x0100
    138e:	1f 92       	push	r1
    1390:	8f 93       	push	r24
    1392:	ff 92       	push	r15
    1394:	ef 92       	push	r14
    1396:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	80 91 c3 01 	lds	r24, 0x01C3
    13a6:	80 ff       	sbrs	r24, 0
    13a8:	04 c0       	rjmp	.+8      	; 0x13b2 <matrix_scan+0x1d4>
    13aa:	85 ed       	ldi	r24, 0xD5	; 213
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            }
            debouncing = DEBOUNCE;
    13b2:	85 e0       	ldi	r24, 0x05	; 5
    13b4:	80 93 00 01 	sts	0x0100, r24
        }
        unselect_rows();
    13b8:	0e 94 ca 08 	call	0x1194	; 0x1194 <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    13bc:	1f 5f       	subi	r17, 0xFF	; 255
    13be:	22 96       	adiw	r28, 0x02	; 2
    13c0:	15 30       	cpi	r17, 0x05	; 5
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <matrix_scan+0x1e8>
    13c4:	18 cf       	rjmp	.-464    	; 0x11f6 <matrix_scan+0x18>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    13c6:	80 91 00 01 	lds	r24, 0x0100
    13ca:	88 23       	and	r24, r24
    13cc:	c1 f0       	breq	.+48     	; 0x13fe <matrix_scan+0x220>
        if (--debouncing) {
    13ce:	81 50       	subi	r24, 0x01	; 1
    13d0:	80 93 00 01 	sts	0x0100, r24
    13d4:	88 23       	and	r24, r24
    13d6:	39 f0       	breq	.+14     	; 0x13e6 <matrix_scan+0x208>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13d8:	8f e9       	ldi	r24, 0x9F	; 159
    13da:	9f e0       	ldi	r25, 0x0F	; 15
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <matrix_scan+0x1fe>
    13e0:	00 c0       	rjmp	.+0      	; 0x13e2 <matrix_scan+0x204>
    13e2:	00 00       	nop
    13e4:	0c c0       	rjmp	.+24     	; 0x13fe <matrix_scan+0x220>
    13e6:	a2 e4       	ldi	r26, 0x42	; 66
    13e8:	b1 e0       	ldi	r27, 0x01	; 1
    13ea:	e8 e3       	ldi	r30, 0x38	; 56
    13ec:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    13ee:	81 91       	ld	r24, Z+
    13f0:	91 91       	ld	r25, Z+
    13f2:	8d 93       	st	X+, r24
    13f4:	9d 93       	st	X+, r25

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	e2 34       	cpi	r30, 0x42	; 66
    13fa:	f9 07       	cpc	r31, r25
    13fc:	c1 f7       	brne	.-16     	; 0x13ee <matrix_scan+0x210>
                matrix[i] = matrix_debouncing[i];
            }
        }
    }

    uint8_t layer = biton32(layer_state);
    13fe:	60 91 a8 01 	lds	r22, 0x01A8
    1402:	70 91 a9 01 	lds	r23, 0x01A9
    1406:	80 91 aa 01 	lds	r24, 0x01AA
    140a:	90 91 ab 01 	lds	r25, 0x01AB
    140e:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <biton32>
    switch (layer) {
    1412:	88 23       	and	r24, r24
    1414:	29 f0       	breq	.+10     	; 0x1420 <matrix_scan+0x242>
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	28 f4       	brcc	.+10     	; 0x1424 <matrix_scan+0x246>
        case 1:
        case 2:
            DDRC |= (1<<7);
    141a:	3f 9a       	sbi	0x07, 7	; 7
            PORTC |= (1<<7);
    141c:	47 9a       	sbi	0x08, 7	; 8
            break;
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <matrix_scan+0x246>
        case 0:
            DDRC &= ~(1<<7);
    1420:	3f 98       	cbi	0x07, 7	; 7
            PORTC &= ~(1<<7);
    1422:	47 98       	cbi	0x08, 7	; 8
            break;
    }

    return 1;
}
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	1f 91       	pop	r17
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	08 95       	ret

00001432 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    1432:	e8 2f       	mov	r30, r24
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	ee 0f       	add	r30, r30
    1438:	ff 1f       	adc	r31, r31
    143a:	ee 5b       	subi	r30, 0xBE	; 190
    143c:	fe 4f       	sbci	r31, 0xFE	; 254
}
    143e:	80 81       	ld	r24, Z
    1440:	91 81       	ldd	r25, Z+1	; 0x01
    1442:	08 95       	ret

00001444 <matrix_print>:

void matrix_print(void)
{
    1444:	cf 92       	push	r12
    1446:	df 92       	push	r13
    1448:	ef 92       	push	r14
    144a:	ff 92       	push	r15
    144c:	0f 93       	push	r16
    144e:	1f 93       	push	r17
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    1454:	8e eb       	ldi	r24, 0xBE	; 190
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    145c:	c2 e4       	ldi	r28, 0x42	; 66
    145e:	ec 2e       	mov	r14, r28
    1460:	c1 e0       	ldi	r28, 0x01	; 1
    1462:	fc 2e       	mov	r15, r28
    1464:	c0 e0       	ldi	r28, 0x00	; 0
    1466:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1468:	19 eb       	ldi	r17, 0xB9	; 185
    146a:	c1 2e       	mov	r12, r17
    146c:	11 e0       	ldi	r17, 0x01	; 1
    146e:	d1 2e       	mov	r13, r17
        pbin_reverse16(matrix_get_row(row));
    1470:	00 eb       	ldi	r16, 0xB0	; 176
    1472:	11 e0       	ldi	r17, 0x01	; 1

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	df 92       	push	r13
    147a:	cf 92       	push	r12
    147c:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    1480:	86 eb       	ldi	r24, 0xB6	; 182
    1482:	91 e0       	ldi	r25, 0x01	; 1
    1484:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
        pbin_reverse16(matrix_get_row(row));
    1488:	f7 01       	movw	r30, r14
    148a:	81 91       	ld	r24, Z+
    148c:	91 91       	ld	r25, Z+
    148e:	7f 01       	movw	r14, r30
    1490:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <bitrev16>
    1494:	9f 93       	push	r25
    1496:	8f 93       	push	r24
    1498:	1f 93       	push	r17
    149a:	0f 93       	push	r16
    149c:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
        print("\n");
    14a0:	8e ea       	ldi	r24, 0xAE	; 174
    14a2:	91 e0       	ldi	r25, 0x01	; 1
    14a4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    14a8:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    14aa:	8d b7       	in	r24, 0x3d	; 61
    14ac:	9e b7       	in	r25, 0x3e	; 62
    14ae:	08 96       	adiw	r24, 0x08	; 8
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	9e bf       	out	0x3e, r25	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	8d bf       	out	0x3d, r24	; 61
    14ba:	c5 30       	cpi	r28, 0x05	; 5
    14bc:	d1 05       	cpc	r29, r1
    14be:	d1 f6       	brne	.-76     	; 0x1474 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	ff 90       	pop	r15
    14ca:	ef 90       	pop	r14
    14cc:	df 90       	pop	r13
    14ce:	cf 90       	pop	r12
    14d0:	08 95       	ret

000014d2 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_FUNCTION)) {
    14d2:	85 ff       	sbrs	r24, 5
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <led_set+0xa>
        // Output high.
        DDRF |= (1<<0);
    14d6:	80 9a       	sbi	0x10, 0	; 16
        PORTF |= (1<<0);
    14d8:	88 9a       	sbi	0x11, 0	; 17
    14da:	08 95       	ret
    } else {
        // Output low.
        DDRF &= ~(1<<0);
    14dc:	80 98       	cbi	0x10, 0	; 16
        PORTF &= ~(1<<0);
    14de:	88 98       	cbi	0x11, 0	; 17
    14e0:	08 95       	ret

000014e2 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    14e2:	80 91 5e 01 	lds	r24, 0x015E
    14e6:	08 95       	ret

000014e8 <sendchar>:
{
    // Not wait once timeouted.
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    14e8:	90 91 dd 01 	lds	r25, 0x01DD
    14ec:	94 30       	cpi	r25, 0x04	; 4
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <sendchar+0xa>
    14f0:	4d c0       	rjmp	.+154    	; 0x158c <sendchar+0xa4>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    14f2:	90 91 e9 00 	lds	r25, 0x00E9
    14f6:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    14f8:	20 91 ec 00 	lds	r18, 0x00EC
    14fc:	20 ff       	sbrs	r18, 0
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <sendchar+0x1c>
    1500:	20 e8       	ldi	r18, 0x80	; 128
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <sendchar+0x1e>
    1504:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1506:	29 2b       	or	r18, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1508:	94 e0       	ldi	r25, 0x04	; 4
    150a:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    150e:	90 91 eb 00 	lds	r25, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    1512:	90 ff       	sbrs	r25, 0
    1514:	38 c0       	rjmp	.+112    	; 0x1586 <sendchar+0x9e>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1516:	90 91 ee 00 	lds	r25, 0x00EE
    151a:	97 ff       	sbrs	r25, 7
    151c:	34 c0       	rjmp	.+104    	; 0x1586 <sendchar+0x9e>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    151e:	90 91 4d 01 	lds	r25, 0x014D
    1522:	99 23       	and	r25, r25
    1524:	21 f0       	breq	.+8      	; 0x152e <sendchar+0x46>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1526:	90 91 e8 00 	lds	r25, 0x00E8
    152a:	95 ff       	sbrs	r25, 5
    152c:	2c c0       	rjmp	.+88     	; 0x1586 <sendchar+0x9e>
        goto ERROR_EXIT;
    }

    timeouted = false;
    152e:	10 92 4d 01 	sts	0x014D, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    1532:	96 e0       	ldi	r25, 0x06	; 6
    1534:	30 91 e8 00 	lds	r19, 0x00E8
    1538:	35 fd       	sbrc	r19, 5
    153a:	15 c0       	rjmp	.+42     	; 0x1566 <sendchar+0x7e>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    153c:	30 91 dd 01 	lds	r19, 0x01DD
    1540:	34 30       	cpi	r19, 0x04	; 4
    1542:	09 f5       	brne	.+66     	; 0x1586 <sendchar+0x9e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1544:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    1548:	35 fd       	sbrc	r19, 5
    154a:	1d c0       	rjmp	.+58     	; 0x1586 <sendchar+0x9e>
    154c:	91 50       	subi	r25, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    154e:	21 f4       	brne	.+8      	; 0x1558 <sendchar+0x70>
            timeouted = true;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	80 93 4d 01 	sts	0x014D, r24
            goto ERROR_EXIT;
    1556:	17 c0       	rjmp	.+46     	; 0x1586 <sendchar+0x9e>
    1558:	ef e9       	ldi	r30, 0x9F	; 159
    155a:	ff e0       	ldi	r31, 0x0F	; 15
    155c:	31 97       	sbiw	r30, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <sendchar+0x74>
    1560:	00 c0       	rjmp	.+0      	; 0x1562 <sendchar+0x7a>
    1562:	00 00       	nop
    1564:	e7 cf       	rjmp	.-50     	; 0x1534 <sendchar+0x4c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1566:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    156a:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed())
    156e:	85 fd       	sbrc	r24, 5
    1570:	05 c0       	rjmp	.+10     	; 0x157c <sendchar+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1572:	80 91 e8 00 	lds	r24, 0x00E8
    1576:	8e 77       	andi	r24, 0x7E	; 126
    1578:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    157c:	2f 70       	andi	r18, 0x0F	; 15
    157e:	20 93 e9 00 	sts	0x00E9, r18
        Endpoint_ClearIN();

    Endpoint_SelectEndpoint(ep);
    return 0;
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	08 95       	ret
    1586:	2f 70       	andi	r18, 0x0F	; 15
    1588:	20 93 e9 00 	sts	0x00E9, r18
    // Not wait once timeouted.
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    158e:	08 95       	ret

00001590 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	00 d0       	rcall	.+0      	; 0x1596 <send_consumer+0x6>
    1596:	1f 92       	push	r1
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    159c:	20 91 dd 01 	lds	r18, 0x01DD
    15a0:	24 30       	cpi	r18, 0x04	; 4
    15a2:	19 f5       	brne	.+70     	; 0x15ea <send_consumer+0x5a>
        return;

    report_extra_t r = {
    15a4:	23 e0       	ldi	r18, 0x03	; 3
    15a6:	29 83       	std	Y+1, r18	; 0x01
    15a8:	9b 83       	std	Y+3, r25	; 0x03
    15aa:	8a 83       	std	Y+2, r24	; 0x02
    15ac:	20 93 e9 00 	sts	0x00E9, r18
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15b2:	90 91 e8 00 	lds	r25, 0x00E8
    15b6:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    15b8:	95 fd       	sbrc	r25, 5
    15ba:	06 c0       	rjmp	.+12     	; 0x15c8 <send_consumer+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15bc:	95 ed       	ldi	r25, 0xD5	; 213
    15be:	9a 95       	dec	r25
    15c0:	f1 f7       	brne	.-4      	; 0x15be <send_consumer+0x2e>
    15c2:	00 00       	nop
    15c4:	81 11       	cpse	r24, r1
    15c6:	f5 cf       	rjmp	.-22     	; 0x15b2 <send_consumer+0x22>
    15c8:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    15cc:	85 ff       	sbrs	r24, 5
    15ce:	0d c0       	rjmp	.+26     	; 0x15ea <send_consumer+0x5a>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	63 e0       	ldi	r22, 0x03	; 3
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	ce 01       	movw	r24, r28
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15e0:	80 91 e8 00 	lds	r24, 0x00E8
    15e4:	8e 77       	andi	r24, 0x7E	; 126
    15e6:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	df 91       	pop	r29
    15f2:	cf 91       	pop	r28
    15f4:	08 95       	ret

000015f6 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <send_system+0x6>
    15fc:	1f 92       	push	r1
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1602:	20 91 dd 01 	lds	r18, 0x01DD
    1606:	24 30       	cpi	r18, 0x04	; 4
    1608:	21 f5       	brne	.+72     	; 0x1652 <send_system+0x5c>
        return;

    report_extra_t r = {
    160a:	22 e0       	ldi	r18, 0x02	; 2
    160c:	29 83       	std	Y+1, r18	; 0x01
    160e:	9b 83       	std	Y+3, r25	; 0x03
    1610:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1612:	83 e0       	ldi	r24, 0x03	; 3
    1614:	80 93 e9 00 	sts	0x00E9, r24
    1618:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    161a:	90 91 e8 00 	lds	r25, 0x00E8
    161e:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1620:	95 fd       	sbrc	r25, 5
    1622:	06 c0       	rjmp	.+12     	; 0x1630 <send_system+0x3a>
    1624:	95 ed       	ldi	r25, 0xD5	; 213
    1626:	9a 95       	dec	r25
    1628:	f1 f7       	brne	.-4      	; 0x1626 <send_system+0x30>
    162a:	00 00       	nop
    162c:	81 11       	cpse	r24, r1
    162e:	f5 cf       	rjmp	.-22     	; 0x161a <send_system+0x24>
    1630:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1634:	85 ff       	sbrs	r24, 5
    1636:	0d c0       	rjmp	.+26     	; 0x1652 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	63 e0       	ldi	r22, 0x03	; 3
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	ce 01       	movw	r24, r28
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1648:	80 91 e8 00 	lds	r24, 0x00E8
    164c:	8e 77       	andi	r24, 0x7E	; 126
    164e:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    165e:	20 91 dd 01 	lds	r18, 0x01DD
    1662:	24 30       	cpi	r18, 0x04	; 4
    1664:	f1 f4       	brne	.+60     	; 0x16a2 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1666:	22 e0       	ldi	r18, 0x02	; 2
    1668:	20 93 e9 00 	sts	0x00E9, r18
    166c:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    166e:	30 91 e8 00 	lds	r19, 0x00E8
    1672:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1674:	35 fd       	sbrc	r19, 5
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <send_mouse+0x26>
    1678:	35 ed       	ldi	r19, 0xD5	; 213
    167a:	3a 95       	dec	r19
    167c:	f1 f7       	brne	.-4      	; 0x167a <send_mouse+0x1c>
    167e:	00 00       	nop
    1680:	21 11       	cpse	r18, r1
    1682:	f5 cf       	rjmp	.-22     	; 0x166e <send_mouse+0x10>
    1684:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1688:	25 ff       	sbrs	r18, 5
    168a:	0b c0       	rjmp	.+22     	; 0x16a2 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    168c:	40 e0       	ldi	r20, 0x00	; 0
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	65 e0       	ldi	r22, 0x05	; 5
    1692:	70 e0       	ldi	r23, 0x00	; 0
    1694:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1698:	80 91 e8 00 	lds	r24, 0x00E8
    169c:	8e 77       	andi	r24, 0x7E	; 126
    169e:	80 93 e8 00 	sts	0x00E8, r24
    16a2:	08 95       	ret

000016a4 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	ec 01       	movw	r28, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    16aa:	80 91 dd 01 	lds	r24, 0x01DD
    16ae:	84 30       	cpi	r24, 0x04	; 4
    16b0:	09 f0       	breq	.+2      	; 0x16b4 <send_keyboard+0x10>
    16b2:	43 c0       	rjmp	.+134    	; 0x173a <send_keyboard+0x96>
        return;

    /* Select the Keyboard Report Endpoint */
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    16b4:	80 91 0c 01 	lds	r24, 0x010C
    16b8:	88 23       	and	r24, r24
    16ba:	c1 f0       	breq	.+48     	; 0x16ec <send_keyboard+0x48>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16bc:	85 e0       	ldi	r24, 0x05	; 5
    16be:	80 93 e9 00 	sts	0x00E9, r24
    16c2:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16c4:	90 91 e8 00 	lds	r25, 0x00E8
    16c8:	81 50       	subi	r24, 0x01	; 1
        /* Report protocol - NKRO */
        Endpoint_SelectEndpoint(NKRO_IN_EPNUM);

        /* Check if write ready for a polling interval around 1ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(4);
    16ca:	95 fd       	sbrc	r25, 5
    16cc:	06 c0       	rjmp	.+12     	; 0x16da <send_keyboard+0x36>
    16ce:	95 e1       	ldi	r25, 0x15	; 21
    16d0:	9a 95       	dec	r25
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <send_keyboard+0x2c>
    16d4:	00 00       	nop
    16d6:	81 11       	cpse	r24, r1
    16d8:	f5 cf       	rjmp	.-22     	; 0x16c4 <send_keyboard+0x20>
    16da:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    16de:	85 ff       	sbrs	r24, 5
    16e0:	2c c0       	rjmp	.+88     	; 0x173a <send_keyboard+0x96>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, NKRO_EPSIZE, NULL);
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	60 e1       	ldi	r22, 0x10	; 16
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	17 c0       	rjmp	.+46     	; 0x171a <send_keyboard+0x76>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	80 93 e9 00 	sts	0x00E9, r24
    16f2:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    16f4:	90 91 e8 00 	lds	r25, 0x00E8
    16f8:	81 50       	subi	r24, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    16fa:	95 fd       	sbrc	r25, 5
    16fc:	06 c0       	rjmp	.+12     	; 0x170a <send_keyboard+0x66>
    16fe:	95 ed       	ldi	r25, 0xD5	; 213
    1700:	9a 95       	dec	r25
    1702:	f1 f7       	brne	.-4      	; 0x1700 <send_keyboard+0x5c>
    1704:	00 00       	nop
    1706:	81 11       	cpse	r24, r1
    1708:	f5 cf       	rjmp	.-22     	; 0x16f4 <send_keyboard+0x50>
    170a:	80 91 e8 00 	lds	r24, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    170e:	85 ff       	sbrs	r24, 5
    1710:	14 c0       	rjmp	.+40     	; 0x173a <send_keyboard+0x96>

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	68 e0       	ldi	r22, 0x08	; 8
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	ce 01       	movw	r24, r28
    171c:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1720:	80 91 e8 00 	lds	r24, 0x00E8
    1724:	8e 77       	andi	r24, 0x7E	; 126
    1726:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    172a:	80 e1       	ldi	r24, 0x10	; 16
    172c:	fe 01       	movw	r30, r28
    172e:	ae e4       	ldi	r26, 0x4E	; 78
    1730:	b1 e0       	ldi	r27, 0x01	; 1
    1732:	01 90       	ld	r0, Z+
    1734:	0d 92       	st	X+, r0
    1736:	8a 95       	dec	r24
    1738:	e1 f7       	brne	.-8      	; 0x1732 <send_keyboard+0x8e>
}
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	08 95       	ret

00001740 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    1740:	8c e1       	ldi	r24, 0x1C	; 28
    1742:	92 e0       	ldi	r25, 0x02	; 2
    1744:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    1748:	80 91 dc 01 	lds	r24, 0x01DC
    174c:	81 11       	cpse	r24, r1
    174e:	09 c0       	rjmp	.+18     	; 0x1762 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    1750:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <USB_Disable>
        USB_Init();
    1754:	0e 94 67 0e 	call	0x1cce	; 0x1cce <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1758:	80 91 e2 00 	lds	r24, 0x00E2
    175c:	84 60       	ori	r24, 0x04	; 4
    175e:	80 93 e2 00 	sts	0x00E2, r24
    1762:	08 95       	ret

00001764 <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    1764:	88 e1       	ldi	r24, 0x18	; 24
    1766:	92 e0       	ldi	r25, 0x02	; 2
    1768:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    176c:	10 92 dc 01 	sts	0x01DC, r1
    1770:	08 95       	ret

00001772 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    1772:	84 e1       	ldi	r24, 0x14	; 20
    1774:	92 e0       	ldi	r25, 0x02	; 2
    1776:	0c 94 0e 08 	jmp	0x101c	; 0x101c <xputs>

0000177a <EVENT_USB_Device_Suspend>:
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    177a:	80 e1       	ldi	r24, 0x10	; 16
    177c:	92 e0       	ldi	r25, 0x02	; 2
    177e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    matrix_power_down();
    1782:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <matrix_power_down>

00001786 <EVENT_USB_Device_WakeUp>:
#endif
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    1786:	8c e0       	ldi	r24, 0x0C	; 12
    1788:	92 e0       	ldi	r25, 0x02	; 2
    178a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    suspend_wakeup_init();
    178e:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <suspend_wakeup_init>

00001792 <EVENT_USB_Device_StartOfFrame>:
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1792:	80 91 dd 01 	lds	r24, 0x01DD
    1796:	84 30       	cpi	r24, 0x04	; 4
    1798:	49 f5       	brne	.+82     	; 0x17ec <EVENT_USB_Device_StartOfFrame+0x5a>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    179a:	80 91 e9 00 	lds	r24, 0x00E9
    179e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    17a0:	90 91 ec 00 	lds	r25, 0x00EC
    17a4:	90 ff       	sbrs	r25, 0
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <EVENT_USB_Device_StartOfFrame+0x1a>
    17a8:	90 e8       	ldi	r25, 0x80	; 128
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <EVENT_USB_Device_StartOfFrame+0x1c>
    17ac:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    17ae:	98 2b       	or	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17b0:	84 e0       	ldi	r24, 0x04	; 4
    17b2:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    17b6:	80 91 eb 00 	lds	r24, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    17ba:	80 ff       	sbrs	r24, 0
    17bc:	14 c0       	rjmp	.+40     	; 0x17e6 <EVENT_USB_Device_StartOfFrame+0x54>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    17be:	80 91 ee 00 	lds	r24, 0x00EE
    17c2:	87 ff       	sbrs	r24, 7
    17c4:	10 c0       	rjmp	.+32     	; 0x17e6 <EVENT_USB_Device_StartOfFrame+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    17c6:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    17ca:	85 ff       	sbrs	r24, 5
    17cc:	03 c0       	rjmp	.+6      	; 0x17d4 <EVENT_USB_Device_StartOfFrame+0x42>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17ce:	10 92 f1 00 	sts	0x00F1, r1
    17d2:	f9 cf       	rjmp	.-14     	; 0x17c6 <EVENT_USB_Device_StartOfFrame+0x34>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    17d4:	80 91 e8 00 	lds	r24, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    17d8:	80 ff       	sbrs	r24, 0
    17da:	05 c0       	rjmp	.+10     	; 0x17e6 <EVENT_USB_Device_StartOfFrame+0x54>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17dc:	80 91 e8 00 	lds	r24, 0x00E8
    17e0:	8e 77       	andi	r24, 0x7E	; 126
    17e2:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17e6:	9f 70       	andi	r25, 0x0F	; 15
    17e8:	90 93 e9 00 	sts	0x00E9, r25
    17ec:	08 95       	ret

000017ee <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    17ee:	42 e0       	ldi	r20, 0x02	; 2
    17f0:	61 ec       	ldi	r22, 0xC1	; 193
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <Endpoint_ConfigureEndpoint_Prv>
    17f8:	42 e0       	ldi	r20, 0x02	; 2
    17fa:	61 ec       	ldi	r22, 0xC1	; 193
    17fc:	82 e0       	ldi	r24, 0x02	; 2
    17fe:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <Endpoint_ConfigureEndpoint_Prv>
    1802:	42 e0       	ldi	r20, 0x02	; 2
    1804:	61 ec       	ldi	r22, 0xC1	; 193
    1806:	83 e0       	ldi	r24, 0x03	; 3
    1808:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <Endpoint_ConfigureEndpoint_Prv>
    180c:	46 e2       	ldi	r20, 0x26	; 38
    180e:	61 ec       	ldi	r22, 0xC1	; 193
    1810:	84 e0       	ldi	r24, 0x04	; 4
    1812:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <Endpoint_ConfigureEndpoint_Prv>
    1816:	42 e1       	ldi	r20, 0x12	; 18
    1818:	61 ec       	ldi	r22, 0xC1	; 193
    181a:	85 e0       	ldi	r24, 0x05	; 5
    181c:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <Endpoint_ConfigureEndpoint_Prv>

00001820 <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    1820:	80 91 df 01 	lds	r24, 0x01DF
    1824:	83 30       	cpi	r24, 0x03	; 3
    1826:	09 f4       	brne	.+2      	; 0x182a <EVENT_USB_Device_ControlRequest+0xa>
    1828:	55 c0       	rjmp	.+170    	; 0x18d4 <EVENT_USB_Device_ControlRequest+0xb4>
    182a:	30 f4       	brcc	.+12     	; 0x1838 <EVENT_USB_Device_ControlRequest+0x18>
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	71 f0       	breq	.+28     	; 0x184c <EVENT_USB_Device_ControlRequest+0x2c>
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	09 f4       	brne	.+2      	; 0x1836 <EVENT_USB_Device_ControlRequest+0x16>
    1834:	95 c0       	rjmp	.+298    	; 0x1960 <EVENT_USB_Device_ControlRequest+0x140>
    1836:	08 95       	ret
    1838:	8a 30       	cpi	r24, 0x0A	; 10
    183a:	09 f4       	brne	.+2      	; 0x183e <EVENT_USB_Device_ControlRequest+0x1e>
    183c:	81 c0       	rjmp	.+258    	; 0x1940 <EVENT_USB_Device_ControlRequest+0x120>
    183e:	8b 30       	cpi	r24, 0x0B	; 11
    1840:	09 f4       	brne	.+2      	; 0x1844 <EVENT_USB_Device_ControlRequest+0x24>
    1842:	60 c0       	rjmp	.+192    	; 0x1904 <EVENT_USB_Device_ControlRequest+0xe4>
    1844:	89 30       	cpi	r24, 0x09	; 9
    1846:	09 f0       	breq	.+2      	; 0x184a <EVENT_USB_Device_ControlRequest+0x2a>
    1848:	a3 c0       	rjmp	.+326    	; 0x1990 <EVENT_USB_Device_ControlRequest+0x170>
    184a:	20 c0       	rjmp	.+64     	; 0x188c <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    184c:	80 91 de 01 	lds	r24, 0x01DE
    1850:	81 3a       	cpi	r24, 0xA1	; 161
    1852:	09 f0       	breq	.+2      	; 0x1856 <EVENT_USB_Device_ControlRequest+0x36>
    1854:	9d c0       	rjmp	.+314    	; 0x1990 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1856:	80 91 e8 00 	lds	r24, 0x00E8
    185a:	87 7f       	andi	r24, 0xF7	; 247
    185c:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1860:	80 91 e2 01 	lds	r24, 0x01E2
    1864:	90 91 e3 01 	lds	r25, 0x01E3
    1868:	89 2b       	or	r24, r25
    186a:	21 f0       	breq	.+8      	; 0x1874 <EVENT_USB_Device_ControlRequest+0x54>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    186c:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	03 c0       	rjmp	.+6      	; 0x187a <EVENT_USB_Device_ControlRequest+0x5a>
                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    1874:	60 e1       	ldi	r22, 0x10	; 16

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1876:	8e e4       	ldi	r24, 0x4E	; 78
    1878:	91 e0       	ldi	r25, 0x01	; 1
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1880:	80 91 e8 00 	lds	r24, 0x00E8
    1884:	8b 77       	andi	r24, 0x7B	; 123
    1886:	80 93 e8 00 	sts	0x00E8, r24
    188a:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    188c:	80 91 de 01 	lds	r24, 0x01DE
    1890:	81 32       	cpi	r24, 0x21	; 33
    1892:	09 f0       	breq	.+2      	; 0x1896 <EVENT_USB_Device_ControlRequest+0x76>
    1894:	7d c0       	rjmp	.+250    	; 0x1990 <EVENT_USB_Device_ControlRequest+0x170>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1896:	80 91 e2 01 	lds	r24, 0x01E2
    189a:	90 91 e3 01 	lds	r25, 0x01E3
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	19 f0       	breq	.+6      	; 0x18a8 <EVENT_USB_Device_ControlRequest+0x88>
    18a2:	04 97       	sbiw	r24, 0x04	; 4
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <EVENT_USB_Device_ControlRequest+0x88>
    18a6:	74 c0       	rjmp	.+232    	; 0x1990 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18a8:	80 91 e8 00 	lds	r24, 0x00E8
    18ac:	87 7f       	andi	r24, 0xF7	; 247
    18ae:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18b2:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    18b6:	82 fd       	sbrc	r24, 2
    18b8:	05 c0       	rjmp	.+10     	; 0x18c4 <EVENT_USB_Device_ControlRequest+0xa4>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    18ba:	80 91 dd 01 	lds	r24, 0x01DD
    18be:	81 11       	cpse	r24, r1
    18c0:	f8 cf       	rjmp	.-16     	; 0x18b2 <EVENT_USB_Device_ControlRequest+0x92>
    18c2:	66 c0       	rjmp	.+204    	; 0x1990 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    18c4:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    18c8:	80 93 5e 01 	sts	0x015E, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    18cc:	80 91 e8 00 	lds	r24, 0x00E8
    18d0:	8b 77       	andi	r24, 0x7B	; 123
    18d2:	5a c0       	rjmp	.+180    	; 0x1988 <EVENT_USB_Device_ControlRequest+0x168>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    18d4:	80 91 de 01 	lds	r24, 0x01DE
    18d8:	81 3a       	cpi	r24, 0xA1	; 161
    18da:	09 f0       	breq	.+2      	; 0x18de <EVENT_USB_Device_ControlRequest+0xbe>
    18dc:	59 c0       	rjmp	.+178    	; 0x1990 <EVENT_USB_Device_ControlRequest+0x170>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    18de:	80 91 e2 01 	lds	r24, 0x01E2
    18e2:	90 91 e3 01 	lds	r25, 0x01E3
    18e6:	89 2b       	or	r24, r25
    18e8:	09 f0       	breq	.+2      	; 0x18ec <EVENT_USB_Device_ControlRequest+0xcc>
    18ea:	52 c0       	rjmp	.+164    	; 0x1990 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    18ec:	80 91 e8 00 	lds	r24, 0x00E8
    18f0:	87 7f       	andi	r24, 0xF7	; 247
    18f2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18f6:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    18fa:	80 ff       	sbrs	r24, 0
    18fc:	fc cf       	rjmp	.-8      	; 0x18f6 <EVENT_USB_Device_ControlRequest+0xd6>
                    Endpoint_Write_8(keyboard_protocol);
    18fe:	80 91 0b 01 	lds	r24, 0x010B
    1902:	3d c0       	rjmp	.+122    	; 0x197e <EVENT_USB_Device_ControlRequest+0x15e>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1904:	80 91 de 01 	lds	r24, 0x01DE
    1908:	81 32       	cpi	r24, 0x21	; 33
    190a:	09 f0       	breq	.+2      	; 0x190e <EVENT_USB_Device_ControlRequest+0xee>
    190c:	41 c0       	rjmp	.+130    	; 0x1990 <EVENT_USB_Device_ControlRequest+0x170>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    190e:	80 91 e2 01 	lds	r24, 0x01E2
    1912:	90 91 e3 01 	lds	r25, 0x01E3
    1916:	89 2b       	or	r24, r25
    1918:	d9 f5       	brne	.+118    	; 0x1990 <EVENT_USB_Device_ControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    191a:	80 91 e8 00 	lds	r24, 0x00E8
    191e:	87 7f       	andi	r24, 0xF7	; 247
    1920:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    1924:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Endpoint_ClearStatusStage>

                    keyboard_protocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1928:	90 91 e0 01 	lds	r25, 0x01E0
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	91 11       	cpse	r25, r1
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <EVENT_USB_Device_ControlRequest+0x114>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	80 93 0b 01 	sts	0x010B, r24
#ifdef NKRO_ENABLE
                    keyboard_nkro = !!keyboard_protocol;
    1938:	80 93 0c 01 	sts	0x010C, r24
#endif
                    clear_keyboard();
    193c:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1940:	80 91 de 01 	lds	r24, 0x01DE
    1944:	81 32       	cpi	r24, 0x21	; 33
    1946:	21 f5       	brne	.+72     	; 0x1990 <EVENT_USB_Device_ControlRequest+0x170>
    1948:	80 91 e8 00 	lds	r24, 0x00E8
    194c:	87 7f       	andi	r24, 0xF7	; 247
    194e:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    1952:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    1956:	80 91 e1 01 	lds	r24, 0x01E1
    195a:	80 93 4c 01 	sts	0x014C, r24
    195e:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1960:	80 91 de 01 	lds	r24, 0x01DE
    1964:	81 3a       	cpi	r24, 0xA1	; 161
    1966:	a1 f4       	brne	.+40     	; 0x1990 <EVENT_USB_Device_ControlRequest+0x170>
    1968:	80 91 e8 00 	lds	r24, 0x00E8
    196c:	87 7f       	andi	r24, 0xF7	; 247
    196e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1972:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    1976:	80 ff       	sbrs	r24, 0
    1978:	fc cf       	rjmp	.-8      	; 0x1972 <EVENT_USB_Device_ControlRequest+0x152>
                Endpoint_Write_8(keyboard_idle);
    197a:	80 91 4c 01 	lds	r24, 0x014C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    197e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1982:	80 91 e8 00 	lds	r24, 0x00E8
    1986:	8e 77       	andi	r24, 0x7E	; 126
    1988:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    198c:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <Endpoint_ClearStatusStage>
    1990:	08 95       	ret

00001992 <main>:
 * main
 ******************************************************************************/
static void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1992:	84 b7       	in	r24, 0x34	; 52
    1994:	87 7f       	andi	r24, 0xF7	; 247
    1996:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
    1998:	88 e1       	ldi	r24, 0x18	; 24
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	80 93 60 00 	sts	0x0060, r24
    19a2:	10 92 60 00 	sts	0x0060, r1
    19a6:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	80 e8       	ldi	r24, 0x80	; 128
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	80 93 61 00 	sts	0x0061, r24
    19b4:	90 93 61 00 	sts	0x0061, r25
    19b8:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    19ba:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <USB_Disable>

    USB_Init();
    19be:	0e 94 67 0e 	call	0x1cce	; 0x1cce <USB_Init>
    19c2:	80 91 e2 00 	lds	r24, 0x00E2
    19c6:	84 60       	ori	r24, 0x04	; 4
    19c8:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    19cc:	84 e7       	ldi	r24, 0x74	; 116
    19ce:	9a e0       	ldi	r25, 0x0A	; 10
    19d0:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <print_set_sendchar>

int main(void)  __attribute__ ((weak));
int main(void)
{
    SetupHardware();
    sei();
    19d4:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    19d6:	80 91 dd 01 	lds	r24, 0x01DD
    19da:	84 30       	cpi	r24, 0x04	; 4
    19dc:	e1 f7       	brne	.-8      	; 0x19d6 <main+0x44>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    19de:	8b ef       	ldi	r24, 0xFB	; 251
    19e0:	91 e0       	ldi	r25, 0x01	; 1
    19e2:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>

    /* init modules */
    keyboard_init();
    19e6:	0e 94 71 12 	call	0x24e2	; 0x24e2 <keyboard_init>
    host_set_driver(&lufa_driver);
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	0e 94 df 11 	call	0x23be	; 0x23be <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    19f2:	8a ee       	ldi	r24, 0xEA	; 234
    19f4:	91 e0       	ldi	r25, 0x01	; 1
    19f6:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    19fa:	80 91 dd 01 	lds	r24, 0x01DD
    19fe:	85 30       	cpi	r24, 0x05	; 5
    1a00:	89 f4       	brne	.+34     	; 0x1a24 <main+0x92>
            print("[s]");
    1a02:	86 ee       	ldi	r24, 0xE6	; 230
    1a04:	91 e0       	ldi	r25, 0x01	; 1
    1a06:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            suspend_power_down();
    1a0a:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <suspend_power_down>
            if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1a0e:	80 91 db 01 	lds	r24, 0x01DB
    1a12:	88 23       	and	r24, r24
    1a14:	91 f3       	breq	.-28     	; 0x19fa <main+0x68>
    1a16:	0e 94 e3 1f 	call	0x3fc6	; 0x3fc6 <suspend_wakeup_condition>
    1a1a:	88 23       	and	r24, r24
    1a1c:	71 f3       	breq	.-36     	; 0x19fa <main+0x68>
                    USB_Device_SendRemoteWakeup();
    1a1e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <USB_Device_SendRemoteWakeup>
    1a22:	eb cf       	rjmp	.-42     	; 0x19fa <main+0x68>
            }
        }

        keyboard_task();
    1a24:	0e 94 9f 12 	call	0x253e	; 0x253e <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    1a28:	e8 cf       	rjmp	.-48     	; 0x19fa <main+0x68>

00001a2a <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    1a2a:	29 2f       	mov	r18, r25
    1a2c:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1a2e:	23 30       	cpi	r18, 0x03	; 3
    1a30:	31 05       	cpc	r19, r1
    1a32:	a9 f0       	breq	.+42     	; 0x1a5e <CALLBACK_USB_GetDescriptor+0x34>
    1a34:	6c f4       	brge	.+26     	; 0x1a50 <CALLBACK_USB_GetDescriptor+0x26>
    1a36:	21 30       	cpi	r18, 0x01	; 1
    1a38:	31 05       	cpc	r19, r1
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <CALLBACK_USB_GetDescriptor+0x14>
    1a3c:	42 c0       	rjmp	.+132    	; 0x1ac2 <CALLBACK_USB_GetDescriptor+0x98>
    1a3e:	22 30       	cpi	r18, 0x02	; 2
    1a40:	31 05       	cpc	r19, r1
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <CALLBACK_USB_GetDescriptor+0x1c>
    1a44:	43 c0       	rjmp	.+134    	; 0x1acc <CALLBACK_USB_GetDescriptor+0xa2>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1a46:	8d e8       	ldi	r24, 0x8D	; 141
    1a48:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1a4a:	24 e4       	ldi	r18, 0x44	; 68
    1a4c:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    1a4e:	42 c0       	rjmp	.+132    	; 0x1ad4 <CALLBACK_USB_GetDescriptor+0xaa>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    1a50:	21 32       	cpi	r18, 0x21	; 33
    1a52:	31 05       	cpc	r19, r1
    1a54:	c9 f0       	breq	.+50     	; 0x1a88 <CALLBACK_USB_GetDescriptor+0x5e>
    1a56:	22 32       	cpi	r18, 0x22	; 34
    1a58:	31 05       	cpc	r19, r1
    1a5a:	19 f1       	breq	.+70     	; 0x1aa2 <CALLBACK_USB_GetDescriptor+0x78>
    1a5c:	37 c0       	rjmp	.+110    	; 0x1acc <CALLBACK_USB_GetDescriptor+0xa2>
    1a5e:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	91 05       	cpc	r25, r1
    1a64:	41 f0       	breq	.+16     	; 0x1a76 <CALLBACK_USB_GetDescriptor+0x4c>
    1a66:	82 30       	cpi	r24, 0x02	; 2
    1a68:	91 05       	cpc	r25, r1
    1a6a:	41 f0       	breq	.+16     	; 0x1a7c <CALLBACK_USB_GetDescriptor+0x52>
    1a6c:	89 2b       	or	r24, r25
    1a6e:	71 f5       	brne	.+92     	; 0x1acc <CALLBACK_USB_GetDescriptor+0xa2>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1a70:	e0 e4       	ldi	r30, 0x40	; 64
    1a72:	f2 e0       	ldi	r31, 0x02	; 2
    1a74:	05 c0       	rjmp	.+10     	; 0x1a80 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1a76:	e0 e3       	ldi	r30, 0x30	; 48
    1a78:	f2 e0       	ldi	r31, 0x02	; 2
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <CALLBACK_USB_GetDescriptor+0x56>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1a7c:	e0 e2       	ldi	r30, 0x20	; 32
    1a7e:	f2 e0       	ldi	r31, 0x02	; 2
    1a80:	84 91       	lpm	r24, Z
    1a82:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    1a84:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    1a86:	26 c0       	rjmp	.+76     	; 0x1ad4 <CALLBACK_USB_GetDescriptor+0xaa>
    1a88:	65 30       	cpi	r22, 0x05	; 5
    1a8a:	00 f5       	brcc	.+64     	; 0x1acc <CALLBACK_USB_GetDescriptor+0xa2>
    1a8c:	e6 2f       	mov	r30, r22
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	ee 0f       	add	r30, r30
    1a92:	ff 1f       	adc	r31, r31
    1a94:	ec 5d       	subi	r30, 0xDC	; 220
    1a96:	fe 4f       	sbci	r31, 0xFE	; 254
    1a98:	20 81       	ld	r18, Z
    1a9a:	31 81       	ldd	r19, Z+1	; 0x01
    1a9c:	89 e0       	ldi	r24, 0x09	; 9
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	19 c0       	rjmp	.+50     	; 0x1ad4 <CALLBACK_USB_GetDescriptor+0xaa>
    1aa2:	65 30       	cpi	r22, 0x05	; 5
    1aa4:	98 f4       	brcc	.+38     	; 0x1acc <CALLBACK_USB_GetDescriptor+0xa2>
    1aa6:	e6 2f       	mov	r30, r22
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	df 01       	movw	r26, r30
    1aac:	aa 0f       	add	r26, r26
    1aae:	bb 1f       	adc	r27, r27
    1ab0:	a6 5e       	subi	r26, 0xE6	; 230
    1ab2:	be 4f       	sbci	r27, 0xFE	; 254
    1ab4:	2d 91       	ld	r18, X+
    1ab6:	3c 91       	ld	r19, X
    1ab8:	eb 5e       	subi	r30, 0xEB	; 235
    1aba:	fe 4f       	sbci	r31, 0xFE	; 254
    1abc:	80 81       	ld	r24, Z
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	09 c0       	rjmp	.+18     	; 0x1ad4 <CALLBACK_USB_GetDescriptor+0xaa>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    1ac2:	82 e1       	ldi	r24, 0x12	; 18
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1ac6:	21 ed       	ldi	r18, 0xD1	; 209
    1ac8:	32 e0       	ldi	r19, 0x02	; 2
    1aca:	04 c0       	rjmp	.+8      	; 0x1ad4 <CALLBACK_USB_GetDescriptor+0xaa>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1ad4:	fa 01       	movw	r30, r20
    1ad6:	31 83       	std	Z+1, r19	; 0x01
    1ad8:	20 83       	st	Z, r18
    return Size;
}
    1ada:	08 95       	ret

00001adc <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1adc:	80 e1       	ldi	r24, 0x10	; 16
    1ade:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1ae0:	82 e1       	ldi	r24, 0x12	; 18
    1ae2:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    1ae4:	09 b4       	in	r0, 0x29	; 41
    1ae6:	00 fe       	sbrs	r0, 0
    1ae8:	fd cf       	rjmp	.-6      	; 0x1ae4 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1aea:	80 91 d8 00 	lds	r24, 0x00D8
    1aee:	8f 7d       	andi	r24, 0xDF	; 223
    1af0:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    1af4:	80 91 e0 00 	lds	r24, 0x00E0
    1af8:	82 60       	ori	r24, 0x02	; 2
    1afa:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    1afe:	80 91 e0 00 	lds	r24, 0x00E0
    1b02:	81 fd       	sbrc	r24, 1
    1b04:	fc cf       	rjmp	.-8      	; 0x1afe <USB_Device_SendRemoteWakeup+0x22>
}
    1b06:	08 95       	ret

00001b08 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1b08:	98 2f       	mov	r25, r24
    1b0a:	97 30       	cpi	r25, 0x07	; 7
    1b0c:	58 f5       	brcc	.+86     	; 0x1b64 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b0e:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1b12:	98 17       	cp	r25, r24
    1b14:	39 f0       	breq	.+14     	; 0x1b24 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1b16:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1b1a:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    1b1e:	50 91 f0 00 	lds	r21, 0x00F0
    1b22:	03 c0       	rjmp	.+6      	; 0x1b2a <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1b24:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1b26:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1b28:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1b2a:	21 ff       	sbrs	r18, 1
    1b2c:	19 c0       	rjmp	.+50     	; 0x1b60 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1b2e:	30 91 eb 00 	lds	r19, 0x00EB
    1b32:	3e 7f       	andi	r19, 0xFE	; 254
    1b34:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1b38:	30 91 ed 00 	lds	r19, 0x00ED
    1b3c:	3d 7f       	andi	r19, 0xFD	; 253
    1b3e:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1b42:	30 91 eb 00 	lds	r19, 0x00EB
    1b46:	31 60       	ori	r19, 0x01	; 1
    1b48:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1b4c:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1b50:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1b54:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1b58:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1b5c:	27 ff       	sbrs	r18, 7
    1b5e:	07 c0       	rjmp	.+14     	; 0x1b6e <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1b60:	9f 5f       	subi	r25, 0xFF	; 255
    1b62:	d3 cf       	rjmp	.-90     	; 0x1b0a <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1b64:	8f 70       	andi	r24, 0x0F	; 15
    1b66:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1b70:	08 95       	ret

00001b72 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1b72:	80 91 de 01 	lds	r24, 0x01DE
    1b76:	87 fd       	sbrc	r24, 7
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b7a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1b7e:	80 ff       	sbrs	r24, 0
    1b80:	0e c0       	rjmp	.+28     	; 0x1b9e <Endpoint_ClearStatusStage+0x2c>
    1b82:	12 c0       	rjmp	.+36     	; 0x1ba8 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b84:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1b88:	82 fd       	sbrc	r24, 2
    1b8a:	05 c0       	rjmp	.+10     	; 0x1b96 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b8c:	80 91 dd 01 	lds	r24, 0x01DD
    1b90:	81 11       	cpse	r24, r1
    1b92:	f8 cf       	rjmp	.-16     	; 0x1b84 <Endpoint_ClearStatusStage+0x12>
    1b94:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b96:	80 91 e8 00 	lds	r24, 0x00E8
    1b9a:	8b 77       	andi	r24, 0x7B	; 123
    1b9c:	08 c0       	rjmp	.+16     	; 0x1bae <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b9e:	80 91 dd 01 	lds	r24, 0x01DD
    1ba2:	81 11       	cpse	r24, r1
    1ba4:	ea cf       	rjmp	.-44     	; 0x1b7a <Endpoint_ClearStatusStage+0x8>
    1ba6:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ba8:	80 91 e8 00 	lds	r24, 0x00E8
    1bac:	8e 77       	andi	r24, 0x7E	; 126
    1bae:	80 93 e8 00 	sts	0x00E8, r24
    1bb2:	08 95       	ret

00001bb4 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1bb4:	80 91 e4 00 	lds	r24, 0x00E4
    1bb8:	90 91 e5 00 	lds	r25, 0x00E5
    1bbc:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1bbe:	20 91 ec 00 	lds	r18, 0x00EC
    1bc2:	20 ff       	sbrs	r18, 0
    1bc4:	21 c0       	rjmp	.+66     	; 0x1c08 <Endpoint_WaitUntilReady+0x54>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bc6:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1bca:	20 fd       	sbrc	r18, 0
    1bcc:	21 c0       	rjmp	.+66     	; 0x1c10 <Endpoint_WaitUntilReady+0x5c>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1bce:	20 91 dd 01 	lds	r18, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1bd2:	22 23       	and	r18, r18
    1bd4:	89 f0       	breq	.+34     	; 0x1bf8 <Endpoint_WaitUntilReady+0x44>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1bd6:	25 30       	cpi	r18, 0x05	; 5
    1bd8:	89 f0       	breq	.+34     	; 0x1bfc <Endpoint_WaitUntilReady+0x48>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1bda:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1bde:	25 fd       	sbrc	r18, 5
    1be0:	0f c0       	rjmp	.+30     	; 0x1c00 <Endpoint_WaitUntilReady+0x4c>
    1be2:	20 91 e4 00 	lds	r18, 0x00E4
    1be6:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1bea:	28 17       	cp	r18, r24
    1bec:	39 07       	cpc	r19, r25
    1bee:	39 f3       	breq	.-50     	; 0x1bbe <Endpoint_WaitUntilReady+0xa>
    1bf0:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1bf2:	41 f0       	breq	.+16     	; 0x1c04 <Endpoint_WaitUntilReady+0x50>
    1bf4:	c9 01       	movw	r24, r18
    1bf6:	e3 cf       	rjmp	.-58     	; 0x1bbe <Endpoint_WaitUntilReady+0xa>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1bf8:	82 e0       	ldi	r24, 0x02	; 2
    1bfa:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1bfc:	83 e0       	ldi	r24, 0x03	; 3
    1bfe:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    1c04:	84 e0       	ldi	r24, 0x04	; 4
    1c06:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c08:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1c0c:	22 ff       	sbrs	r18, 2
    1c0e:	df cf       	rjmp	.-66     	; 0x1bce <Endpoint_WaitUntilReady+0x1a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	08 95       	ret

00001c14 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1c14:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1c18:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1c1c:	e0 ee       	ldi	r30, 0xE0	; 224
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	81 60       	ori	r24, 0x01	; 1
    1c24:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1c26:	e8 ed       	ldi	r30, 0xD8	; 216
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8f 77       	andi	r24, 0x7F	; 127
    1c2e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c30:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1c32:	a7 ed       	ldi	r26, 0xD7	; 215
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	8c 91       	ld	r24, X
    1c38:	8e 7f       	andi	r24, 0xFE	; 254
    1c3a:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1c3c:	80 81       	ld	r24, Z
    1c3e:	8f 7e       	andi	r24, 0xEF	; 239
    1c40:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1c42:	10 92 dc 01 	sts	0x01DC, r1
    1c46:	08 95       	ret

00001c48 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1c50:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1c54:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1c58:	c8 ed       	ldi	r28, 0xD8	; 216
    1c5a:	d0 e0       	ldi	r29, 0x00	; 0
    1c5c:	88 81       	ld	r24, Y
    1c5e:	8f 77       	andi	r24, 0x7F	; 127
    1c60:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1c62:	88 81       	ld	r24, Y
    1c64:	80 68       	ori	r24, 0x80	; 128
    1c66:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c68:	88 81       	ld	r24, Y
    1c6a:	8f 7d       	andi	r24, 0xDF	; 223
    1c6c:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c6e:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1c70:	10 92 dd 01 	sts	0x01DD, r1
	USB_Device_ConfigurationNumber  = 0;
    1c74:	10 92 d9 01 	sts	0x01D9, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1c78:	10 92 db 01 	sts	0x01DB, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1c7c:	10 92 da 01 	sts	0x01DA, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1c80:	00 ee       	ldi	r16, 0xE0	; 224
    1c82:	10 e0       	ldi	r17, 0x00	; 0
    1c84:	f8 01       	movw	r30, r16
    1c86:	80 81       	ld	r24, Z
    1c88:	8b 7f       	andi	r24, 0xFB	; 251
    1c8a:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1c8c:	88 81       	ld	r24, Y
    1c8e:	81 60       	ori	r24, 0x01	; 1
    1c90:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1c92:	42 e0       	ldi	r20, 0x02	; 2
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1c9c:	e1 ee       	ldi	r30, 0xE1	; 225
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	8e 7f       	andi	r24, 0xFE	; 254
    1ca4:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1ca6:	e2 ee       	ldi	r30, 0xE2	; 226
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	81 60       	ori	r24, 0x01	; 1
    1cae:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1cb0:	80 81       	ld	r24, Z
    1cb2:	88 60       	ori	r24, 0x08	; 8
    1cb4:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	80 81       	ld	r24, Z
    1cba:	8e 7f       	andi	r24, 0xFE	; 254
    1cbc:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1cbe:	88 81       	ld	r24, Y
    1cc0:	80 61       	ori	r24, 0x10	; 16
    1cc2:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1cc4:	df 91       	pop	r29
    1cc6:	cf 91       	pop	r28
    1cc8:	1f 91       	pop	r17
    1cca:	0f 91       	pop	r16
    1ccc:	08 95       	ret

00001cce <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1cce:	e7 ed       	ldi	r30, 0xD7	; 215
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	81 60       	ori	r24, 0x01	; 1
    1cd6:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1cd8:	84 e0       	ldi	r24, 0x04	; 4
    1cda:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	80 93 dc 01 	sts	0x01DC, r24

	USB_ResetInterface();
    1ce2:	0c 94 24 0e 	jmp	0x1c48	; 0x1c48 <USB_ResetInterface>

00001ce6 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1ce6:	e8 ed       	ldi	r30, 0xD8	; 216
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	8e 7f       	andi	r24, 0xFE	; 254
    1cee:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1cf0:	10 92 e2 00 	sts	0x00E2, r1
    1cf4:	08 95       	ret

00001cf6 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1cf6:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1cfa:	10 92 e1 00 	sts	0x00E1, r1
    1cfe:	08 95       	ret

00001d00 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1d00:	1f 92       	push	r1
    1d02:	0f 92       	push	r0
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	0f 92       	push	r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	2f 93       	push	r18
    1d0c:	3f 93       	push	r19
    1d0e:	4f 93       	push	r20
    1d10:	5f 93       	push	r21
    1d12:	6f 93       	push	r22
    1d14:	7f 93       	push	r23
    1d16:	8f 93       	push	r24
    1d18:	9f 93       	push	r25
    1d1a:	af 93       	push	r26
    1d1c:	bf 93       	push	r27
    1d1e:	ef 93       	push	r30
    1d20:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1d22:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1d26:	82 ff       	sbrs	r24, 2
    1d28:	0b c0       	rjmp	.+22     	; 0x1d40 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1d2a:	80 91 e2 00 	lds	r24, 0x00E2
    1d2e:	82 ff       	sbrs	r24, 2
    1d30:	07 c0       	rjmp	.+14     	; 0x1d40 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1d32:	80 91 e1 00 	lds	r24, 0x00E1
    1d36:	8b 7f       	andi	r24, 0xFB	; 251
    1d38:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1d3c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1d40:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1d44:	80 ff       	sbrs	r24, 0
    1d46:	1f c0       	rjmp	.+62     	; 0x1d86 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1d48:	80 91 d8 00 	lds	r24, 0x00D8
    1d4c:	80 ff       	sbrs	r24, 0
    1d4e:	1b c0       	rjmp	.+54     	; 0x1d86 <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1d50:	80 91 da 00 	lds	r24, 0x00DA
    1d54:	8e 7f       	andi	r24, 0xFE	; 254
    1d56:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1d5a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1d5e:	80 ff       	sbrs	r24, 0
    1d60:	0d c0       	rjmp	.+26     	; 0x1d7c <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1d62:	80 e1       	ldi	r24, 0x10	; 16
    1d64:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1d66:	82 e1       	ldi	r24, 0x12	; 18
    1d68:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1d6a:	09 b4       	in	r0, 0x29	; 41
    1d6c:	00 fe       	sbrs	r0, 0
    1d6e:	fd cf       	rjmp	.-6      	; 0x1d6a <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	80 93 dd 01 	sts	0x01DD, r24
			EVENT_USB_Device_Connect();
    1d76:	0e 94 a0 0b 	call	0x1740	; 0x1740 <EVENT_USB_Device_Connect>
    1d7a:	05 c0       	rjmp	.+10     	; 0x1d86 <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1d7c:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1d7e:	10 92 dd 01 	sts	0x01DD, r1
			EVENT_USB_Device_Disconnect();
    1d82:	0e 94 b2 0b 	call	0x1764	; 0x1764 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1d86:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1d8a:	80 ff       	sbrs	r24, 0
    1d8c:	19 c0       	rjmp	.+50     	; 0x1dc0 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1d8e:	80 91 e2 00 	lds	r24, 0x00E2
    1d92:	80 ff       	sbrs	r24, 0
    1d94:	15 c0       	rjmp	.+42     	; 0x1dc0 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d96:	80 91 e2 00 	lds	r24, 0x00E2
    1d9a:	8e 7f       	andi	r24, 0xFE	; 254
    1d9c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1da0:	80 91 e2 00 	lds	r24, 0x00E2
    1da4:	80 61       	ori	r24, 0x10	; 16
    1da6:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1daa:	80 91 d8 00 	lds	r24, 0x00D8
    1dae:	80 62       	ori	r24, 0x20	; 32
    1db0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1db4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1db6:	85 e0       	ldi	r24, 0x05	; 5
    1db8:	80 93 dd 01 	sts	0x01DD, r24
		EVENT_USB_Device_Suspend();
    1dbc:	0e 94 bd 0b 	call	0x177a	; 0x177a <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1dc0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1dc4:	84 ff       	sbrs	r24, 4
    1dc6:	2e c0       	rjmp	.+92     	; 0x1e24 <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1dc8:	80 91 e2 00 	lds	r24, 0x00E2
    1dcc:	84 ff       	sbrs	r24, 4
    1dce:	2a c0       	rjmp	.+84     	; 0x1e24 <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1dd0:	80 e1       	ldi	r24, 0x10	; 16
    1dd2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1dd4:	82 e1       	ldi	r24, 0x12	; 18
    1dd6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1dd8:	09 b4       	in	r0, 0x29	; 41
    1dda:	00 fe       	sbrs	r0, 0
    1ddc:	fd cf       	rjmp	.-6      	; 0x1dd8 <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1dde:	80 91 d8 00 	lds	r24, 0x00D8
    1de2:	8f 7d       	andi	r24, 0xDF	; 223
    1de4:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1de8:	80 91 e1 00 	lds	r24, 0x00E1
    1dec:	8f 7e       	andi	r24, 0xEF	; 239
    1dee:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1df2:	80 91 e2 00 	lds	r24, 0x00E2
    1df6:	8f 7e       	andi	r24, 0xEF	; 239
    1df8:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1dfc:	80 91 e2 00 	lds	r24, 0x00E2
    1e00:	81 60       	ori	r24, 0x01	; 1
    1e02:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1e06:	80 91 d9 01 	lds	r24, 0x01D9
    1e0a:	81 11       	cpse	r24, r1
    1e0c:	04 c0       	rjmp	.+8      	; 0x1e16 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1e0e:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1e12:	87 ff       	sbrs	r24, 7
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <__vector_10+0x11a>
    1e16:	84 e0       	ldi	r24, 0x04	; 4
    1e18:	01 c0       	rjmp	.+2      	; 0x1e1c <__vector_10+0x11c>
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	80 93 dd 01 	sts	0x01DD, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1e20:	0e 94 c3 0b 	call	0x1786	; 0x1786 <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1e24:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1e28:	83 ff       	sbrs	r24, 3
    1e2a:	29 c0       	rjmp	.+82     	; 0x1e7e <__vector_10+0x17e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1e2c:	80 91 e2 00 	lds	r24, 0x00E2
    1e30:	83 ff       	sbrs	r24, 3
    1e32:	25 c0       	rjmp	.+74     	; 0x1e7e <__vector_10+0x17e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1e34:	80 91 e1 00 	lds	r24, 0x00E1
    1e38:	87 7f       	andi	r24, 0xF7	; 247
    1e3a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1e3e:	82 e0       	ldi	r24, 0x02	; 2
    1e40:	80 93 dd 01 	sts	0x01DD, r24
		USB_Device_ConfigurationNumber = 0;
    1e44:	10 92 d9 01 	sts	0x01D9, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1e48:	80 91 e1 00 	lds	r24, 0x00E1
    1e4c:	8e 7f       	andi	r24, 0xFE	; 254
    1e4e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1e52:	80 91 e2 00 	lds	r24, 0x00E2
    1e56:	8e 7f       	andi	r24, 0xFE	; 254
    1e58:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1e5c:	80 91 e2 00 	lds	r24, 0x00E2
    1e60:	80 61       	ori	r24, 0x10	; 16
    1e62:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1e66:	42 e0       	ldi	r20, 0x02	; 2
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1e70:	80 91 f0 00 	lds	r24, 0x00F0
    1e74:	88 60       	ori	r24, 0x08	; 8
    1e76:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1e7a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1e7e:	ff 91       	pop	r31
    1e80:	ef 91       	pop	r30
    1e82:	bf 91       	pop	r27
    1e84:	af 91       	pop	r26
    1e86:	9f 91       	pop	r25
    1e88:	8f 91       	pop	r24
    1e8a:	7f 91       	pop	r23
    1e8c:	6f 91       	pop	r22
    1e8e:	5f 91       	pop	r21
    1e90:	4f 91       	pop	r20
    1e92:	3f 91       	pop	r19
    1e94:	2f 91       	pop	r18
    1e96:	0f 90       	pop	r0
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	0f 90       	pop	r0
    1e9c:	1f 90       	pop	r1
    1e9e:	18 95       	reti

00001ea0 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1ea0:	1f 92       	push	r1
    1ea2:	0f 92       	push	r0
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	0f 92       	push	r0
    1ea8:	11 24       	eor	r1, r1
    1eaa:	2f 93       	push	r18
    1eac:	3f 93       	push	r19
    1eae:	4f 93       	push	r20
    1eb0:	5f 93       	push	r21
    1eb2:	6f 93       	push	r22
    1eb4:	7f 93       	push	r23
    1eb6:	8f 93       	push	r24
    1eb8:	9f 93       	push	r25
    1eba:	af 93       	push	r26
    1ebc:	bf 93       	push	r27
    1ebe:	cf 93       	push	r28
    1ec0:	ef 93       	push	r30
    1ec2:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1ec4:	c0 91 e9 00 	lds	r28, 0x00E9
    1ec8:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1eca:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ece:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1ed2:	80 91 f0 00 	lds	r24, 0x00F0
    1ed6:	87 7f       	andi	r24, 0xF7	; 247
    1ed8:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1edc:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1ede:	0e 94 8e 10 	call	0x211c	; 0x211c <USB_Device_ProcessControlRequest>
    1ee2:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1ee6:	80 91 f0 00 	lds	r24, 0x00F0
    1eea:	88 60       	ori	r24, 0x08	; 8
    1eec:	80 93 f0 00 	sts	0x00F0, r24
    1ef0:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1ef4:	ff 91       	pop	r31
    1ef6:	ef 91       	pop	r30
    1ef8:	cf 91       	pop	r28
    1efa:	bf 91       	pop	r27
    1efc:	af 91       	pop	r26
    1efe:	9f 91       	pop	r25
    1f00:	8f 91       	pop	r24
    1f02:	7f 91       	pop	r23
    1f04:	6f 91       	pop	r22
    1f06:	5f 91       	pop	r21
    1f08:	4f 91       	pop	r20
    1f0a:	3f 91       	pop	r19
    1f0c:	2f 91       	pop	r18
    1f0e:	0f 90       	pop	r0
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	0f 90       	pop	r0
    1f14:	1f 90       	pop	r1
    1f16:	18 95       	reti

00001f18 <Endpoint_Write_Stream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1f18:	cf 92       	push	r12
    1f1a:	df 92       	push	r13
    1f1c:	ef 92       	push	r14
    1f1e:	ff 92       	push	r15
    1f20:	0f 93       	push	r16
    1f22:	1f 93       	push	r17
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    1f28:	7c 01       	movw	r14, r24
    1f2a:	8b 01       	movw	r16, r22
    1f2c:	ea 01       	movw	r28, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1f2e:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <Endpoint_WaitUntilReady>
    1f32:	81 11       	cpse	r24, r1
    1f34:	31 c0       	rjmp	.+98     	; 0x1f98 <Endpoint_Write_Stream_LE+0x80>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1f36:	20 97       	sbiw	r28, 0x00	; 0
    1f38:	31 f0       	breq	.+12     	; 0x1f46 <Endpoint_Write_Stream_LE+0x2e>
	{
		Length -= *BytesProcessed;
    1f3a:	88 81       	ld	r24, Y
    1f3c:	99 81       	ldd	r25, Y+1	; 0x01
    1f3e:	08 1b       	sub	r16, r24
    1f40:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1f42:	e8 0e       	add	r14, r24
    1f44:	f9 1e       	adc	r15, r25
// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1f46:	c1 2c       	mov	r12, r1
    1f48:	d1 2c       	mov	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1f4a:	01 15       	cp	r16, r1
    1f4c:	11 05       	cpc	r17, r1
    1f4e:	19 f1       	breq	.+70     	; 0x1f96 <Endpoint_Write_Stream_LE+0x7e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1f50:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1f54:	85 fd       	sbrc	r24, 5
    1f56:	14 c0       	rjmp	.+40     	; 0x1f80 <Endpoint_Write_Stream_LE+0x68>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f58:	80 91 e8 00 	lds	r24, 0x00E8
    1f5c:	8e 77       	andi	r24, 0x7E	; 126
    1f5e:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1f62:	20 97       	sbiw	r28, 0x00	; 0
    1f64:	41 f0       	breq	.+16     	; 0x1f76 <Endpoint_Write_Stream_LE+0x5e>
			{
				*BytesProcessed += BytesInTransfer;
    1f66:	88 81       	ld	r24, Y
    1f68:	99 81       	ldd	r25, Y+1	; 0x01
    1f6a:	8c 0d       	add	r24, r12
    1f6c:	9d 1d       	adc	r25, r13
    1f6e:	99 83       	std	Y+1, r25	; 0x01
    1f70:	88 83       	st	Y, r24
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1f72:	85 e0       	ldi	r24, 0x05	; 5
    1f74:	11 c0       	rjmp	.+34     	; 0x1f98 <Endpoint_Write_Stream_LE+0x80>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1f76:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <Endpoint_WaitUntilReady>
    1f7a:	88 23       	and	r24, r24
    1f7c:	31 f3       	breq	.-52     	; 0x1f4a <Endpoint_Write_Stream_LE+0x32>
    1f7e:	0c c0       	rjmp	.+24     	; 0x1f98 <Endpoint_Write_Stream_LE+0x80>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1f80:	f7 01       	movw	r30, r14
    1f82:	81 91       	ld	r24, Z+
    1f84:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f86:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1f8a:	01 50       	subi	r16, 0x01	; 1
    1f8c:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1f8e:	ff ef       	ldi	r31, 0xFF	; 255
    1f90:	cf 1a       	sub	r12, r31
    1f92:	df 0a       	sbc	r13, r31
    1f94:	da cf       	rjmp	.-76     	; 0x1f4a <Endpoint_Write_Stream_LE+0x32>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1f96:	80 e0       	ldi	r24, 0x00	; 0
}
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	1f 91       	pop	r17
    1f9e:	0f 91       	pop	r16
    1fa0:	ff 90       	pop	r15
    1fa2:	ef 90       	pop	r14
    1fa4:	df 90       	pop	r13
    1fa6:	cf 90       	pop	r12
    1fa8:	08 95       	ret

00001faa <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1faa:	20 91 e4 01 	lds	r18, 0x01E4
    1fae:	30 91 e5 01 	lds	r19, 0x01E5
    1fb2:	26 17       	cp	r18, r22
    1fb4:	37 07       	cpc	r19, r23
    1fb6:	48 f0       	brcs	.+18     	; 0x1fca <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1fb8:	61 15       	cp	r22, r1
    1fba:	71 05       	cpc	r23, r1
    1fbc:	39 f4       	brne	.+14     	; 0x1fcc <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1fbe:	20 91 e8 00 	lds	r18, 0x00E8
    1fc2:	2e 77       	andi	r18, 0x7E	; 126
    1fc4:	20 93 e8 00 	sts	0x00E8, r18
    1fc8:	01 c0       	rjmp	.+2      	; 0x1fcc <Endpoint_Write_Control_Stream_LE+0x22>
    1fca:	b9 01       	movw	r22, r18
    1fcc:	fc 01       	movw	r30, r24
    1fce:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1fd0:	61 15       	cp	r22, r1
    1fd2:	71 05       	cpc	r23, r1
    1fd4:	a9 f1       	breq	.+106    	; 0x2040 <Endpoint_Write_Control_Stream_LE+0x96>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1fd6:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1fda:	88 23       	and	r24, r24
    1fdc:	e9 f1       	breq	.+122    	; 0x2058 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1fde:	85 30       	cpi	r24, 0x05	; 5
    1fe0:	e9 f1       	breq	.+122    	; 0x205c <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fe2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1fe6:	83 fd       	sbrc	r24, 3
    1fe8:	35 c0       	rjmp	.+106    	; 0x2054 <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1fea:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1fee:	82 ff       	sbrs	r24, 2
    1ff0:	06 c0       	rjmp	.+12     	; 0x1ffe <Endpoint_Write_Control_Stream_LE+0x54>
    1ff2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1ff6:	82 ff       	sbrs	r24, 2
    1ff8:	26 c0       	rjmp	.+76     	; 0x2046 <Endpoint_Write_Control_Stream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1ffe:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    2002:	80 ff       	sbrs	r24, 0
    2004:	e5 cf       	rjmp	.-54     	; 0x1fd0 <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    2006:	20 91 f3 00 	lds	r18, 0x00F3
    200a:	80 91 f2 00 	lds	r24, 0x00F2
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2012:	61 15       	cp	r22, r1
    2014:	71 05       	cpc	r23, r1
    2016:	51 f0       	breq	.+20     	; 0x202c <Endpoint_Write_Control_Stream_LE+0x82>
    2018:	88 30       	cpi	r24, 0x08	; 8
    201a:	91 05       	cpc	r25, r1
    201c:	38 f4       	brcc	.+14     	; 0x202c <Endpoint_Write_Control_Stream_LE+0x82>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    201e:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2020:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    2024:	61 50       	subi	r22, 0x01	; 1
    2026:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    2028:	01 96       	adiw	r24, 0x01	; 1
    202a:	f3 cf       	rjmp	.-26     	; 0x2012 <Endpoint_Write_Control_Stream_LE+0x68>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    202c:	21 e0       	ldi	r18, 0x01	; 1
    202e:	08 97       	sbiw	r24, 0x08	; 8
    2030:	09 f0       	breq	.+2      	; 0x2034 <Endpoint_Write_Control_Stream_LE+0x8a>
    2032:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2034:	80 91 e8 00 	lds	r24, 0x00E8
    2038:	8e 77       	andi	r24, 0x7E	; 126
    203a:	80 93 e8 00 	sts	0x00E8, r24
    203e:	c8 cf       	rjmp	.-112    	; 0x1fd0 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2040:	21 11       	cpse	r18, r1
    2042:	c9 cf       	rjmp	.-110    	; 0x1fd6 <Endpoint_Write_Control_Stream_LE+0x2c>
    2044:	d6 cf       	rjmp	.-84     	; 0x1ff2 <Endpoint_Write_Control_Stream_LE+0x48>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2046:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    204a:	88 23       	and	r24, r24
    204c:	29 f0       	breq	.+10     	; 0x2058 <Endpoint_Write_Control_Stream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    204e:	85 30       	cpi	r24, 0x05	; 5
    2050:	81 f6       	brne	.-96     	; 0x1ff2 <Endpoint_Write_Control_Stream_LE+0x48>
    2052:	04 c0       	rjmp	.+8      	; 0x205c <Endpoint_Write_Control_Stream_LE+0xb2>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2058:	82 e0       	ldi	r24, 0x02	; 2
    205a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    205c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    205e:	08 95       	ret

00002060 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    2060:	20 91 e4 01 	lds	r18, 0x01E4
    2064:	30 91 e5 01 	lds	r19, 0x01E5
    2068:	26 17       	cp	r18, r22
    206a:	37 07       	cpc	r19, r23
    206c:	48 f0       	brcs	.+18     	; 0x2080 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    206e:	61 15       	cp	r22, r1
    2070:	71 05       	cpc	r23, r1
    2072:	39 f4       	brne	.+14     	; 0x2082 <Endpoint_Write_Control_PStream_LE+0x22>
    2074:	20 91 e8 00 	lds	r18, 0x00E8
    2078:	2e 77       	andi	r18, 0x7E	; 126
    207a:	20 93 e8 00 	sts	0x00E8, r18
    207e:	01 c0       	rjmp	.+2      	; 0x2082 <Endpoint_Write_Control_PStream_LE+0x22>
    2080:	b9 01       	movw	r22, r18
    2082:	fc 01       	movw	r30, r24
    2084:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2086:	61 15       	cp	r22, r1
    2088:	71 05       	cpc	r23, r1
    208a:	c1 f1       	breq	.+112    	; 0x20fc <Endpoint_Write_Control_PStream_LE+0x9c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    208c:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2090:	88 23       	and	r24, r24
    2092:	09 f4       	brne	.+2      	; 0x2096 <Endpoint_Write_Control_PStream_LE+0x36>
    2094:	3f c0       	rjmp	.+126    	; 0x2114 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2096:	85 30       	cpi	r24, 0x05	; 5
    2098:	09 f4       	brne	.+2      	; 0x209c <Endpoint_Write_Control_PStream_LE+0x3c>
    209a:	3e c0       	rjmp	.+124    	; 0x2118 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    209c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    20a0:	83 fd       	sbrc	r24, 3
    20a2:	36 c0       	rjmp	.+108    	; 0x2110 <Endpoint_Write_Control_PStream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    20a4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    20a8:	82 ff       	sbrs	r24, 2
    20aa:	06 c0       	rjmp	.+12     	; 0x20b8 <Endpoint_Write_Control_PStream_LE+0x58>
    20ac:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    20b0:	82 ff       	sbrs	r24, 2
    20b2:	27 c0       	rjmp	.+78     	; 0x2102 <Endpoint_Write_Control_PStream_LE+0xa2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    20b8:	80 91 e8 00 	lds	r24, 0x00E8
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
    20bc:	80 ff       	sbrs	r24, 0
    20be:	e3 cf       	rjmp	.-58     	; 0x2086 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    20c0:	20 91 f3 00 	lds	r18, 0x00F3
    20c4:	80 91 f2 00 	lds	r24, 0x00F2
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    20cc:	61 15       	cp	r22, r1
    20ce:	71 05       	cpc	r23, r1
    20d0:	59 f0       	breq	.+22     	; 0x20e8 <Endpoint_Write_Control_PStream_LE+0x88>
    20d2:	88 30       	cpi	r24, 0x08	; 8
    20d4:	91 05       	cpc	r25, r1
    20d6:	40 f4       	brcc	.+16     	; 0x20e8 <Endpoint_Write_Control_PStream_LE+0x88>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    20d8:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    20da:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    20de:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    20e0:	61 50       	subi	r22, 0x01	; 1
    20e2:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	f2 cf       	rjmp	.-28     	; 0x20cc <Endpoint_Write_Control_PStream_LE+0x6c>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    20e8:	21 e0       	ldi	r18, 0x01	; 1
    20ea:	08 97       	sbiw	r24, 0x08	; 8
    20ec:	09 f0       	breq	.+2      	; 0x20f0 <Endpoint_Write_Control_PStream_LE+0x90>
    20ee:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20f0:	80 91 e8 00 	lds	r24, 0x00E8
    20f4:	8e 77       	andi	r24, 0x7E	; 126
    20f6:	80 93 e8 00 	sts	0x00E8, r24
    20fa:	c5 cf       	rjmp	.-118    	; 0x2086 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    20fc:	21 11       	cpse	r18, r1
    20fe:	c6 cf       	rjmp	.-116    	; 0x208c <Endpoint_Write_Control_PStream_LE+0x2c>
    2100:	d5 cf       	rjmp	.-86     	; 0x20ac <Endpoint_Write_Control_PStream_LE+0x4c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2102:	80 91 dd 01 	lds	r24, 0x01DD

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2106:	88 23       	and	r24, r24
    2108:	29 f0       	breq	.+10     	; 0x2114 <Endpoint_Write_Control_PStream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    210a:	85 30       	cpi	r24, 0x05	; 5
    210c:	79 f6       	brne	.-98     	; 0x20ac <Endpoint_Write_Control_PStream_LE+0x4c>
    210e:	04 c0       	rjmp	.+8      	; 0x2118 <Endpoint_Write_Control_PStream_LE+0xb8>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2114:	82 e0       	ldi	r24, 0x02	; 2
    2116:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2118:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    211a:	08 95       	ret

0000211c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	aa 97       	sbiw	r28, 0x2a	; 42
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	ee ed       	ldi	r30, 0xDE	; 222
    2136:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2138:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    213c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    213e:	21 e0       	ldi	r18, 0x01	; 1
    2140:	e6 3e       	cpi	r30, 0xE6	; 230
    2142:	f2 07       	cpc	r31, r18
    2144:	c9 f7       	brne	.-14     	; 0x2138 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2146:	0e 94 10 0c 	call	0x1820	; 0x1820 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    214a:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    214e:	83 ff       	sbrs	r24, 3
    2150:	1d c1       	rjmp	.+570    	; 0x238c <USB_Device_ProcessControlRequest+0x270>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2152:	20 91 de 01 	lds	r18, 0x01DE

		switch (USB_ControlRequest.bRequest)
    2156:	30 91 df 01 	lds	r19, 0x01DF
    215a:	83 2f       	mov	r24, r19
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	8a 30       	cpi	r24, 0x0A	; 10
    2160:	91 05       	cpc	r25, r1
    2162:	08 f0       	brcs	.+2      	; 0x2166 <USB_Device_ProcessControlRequest+0x4a>
    2164:	13 c1       	rjmp	.+550    	; 0x238c <USB_Device_ProcessControlRequest+0x270>
    2166:	fc 01       	movw	r30, r24
    2168:	ea 5a       	subi	r30, 0xAA	; 170
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2170:	20 38       	cpi	r18, 0x80	; 128
    2172:	81 f0       	breq	.+32     	; 0x2194 <USB_Device_ProcessControlRequest+0x78>
    2174:	22 38       	cpi	r18, 0x82	; 130
    2176:	09 f0       	breq	.+2      	; 0x217a <USB_Device_ProcessControlRequest+0x5e>
    2178:	09 c1       	rjmp	.+530    	; 0x238c <USB_Device_ProcessControlRequest+0x270>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    217a:	80 91 e2 01 	lds	r24, 0x01E2
    217e:	8f 70       	andi	r24, 0x0F	; 15
    2180:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2184:	80 91 eb 00 	lds	r24, 0x00EB
    2188:	85 fb       	bst	r24, 5
    218a:	88 27       	eor	r24, r24
    218c:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    218e:	10 92 e9 00 	sts	0x00E9, r1
    2192:	06 c0       	rjmp	.+12     	; 0x21a0 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2194:	80 91 da 01 	lds	r24, 0x01DA
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2198:	90 91 db 01 	lds	r25, 0x01DB
    219c:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    219e:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21a0:	90 91 e8 00 	lds	r25, 0x00E8
    21a4:	97 7f       	andi	r25, 0xF7	; 247
    21a6:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    21aa:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    21ae:	10 92 f1 00 	sts	0x00F1, r1
    21b2:	c6 c0       	rjmp	.+396    	; 0x2340 <USB_Device_ProcessControlRequest+0x224>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    21b4:	82 2f       	mov	r24, r18
    21b6:	8d 7f       	andi	r24, 0xFD	; 253
    21b8:	09 f0       	breq	.+2      	; 0x21bc <USB_Device_ProcessControlRequest+0xa0>
    21ba:	e8 c0       	rjmp	.+464    	; 0x238c <USB_Device_ProcessControlRequest+0x270>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    21bc:	22 23       	and	r18, r18
    21be:	19 f0       	breq	.+6      	; 0x21c6 <USB_Device_ProcessControlRequest+0xaa>
    21c0:	22 30       	cpi	r18, 0x02	; 2
    21c2:	61 f0       	breq	.+24     	; 0x21dc <USB_Device_ProcessControlRequest+0xc0>
    21c4:	e3 c0       	rjmp	.+454    	; 0x238c <USB_Device_ProcessControlRequest+0x270>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    21c6:	80 91 e0 01 	lds	r24, 0x01E0
    21ca:	81 30       	cpi	r24, 0x01	; 1
    21cc:	09 f0       	breq	.+2      	; 0x21d0 <USB_Device_ProcessControlRequest+0xb4>
    21ce:	de c0       	rjmp	.+444    	; 0x238c <USB_Device_ProcessControlRequest+0x270>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    21d0:	33 30       	cpi	r19, 0x03	; 3
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <USB_Device_ProcessControlRequest+0xba>
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	80 93 db 01 	sts	0x01DB, r24
    21da:	28 c0       	rjmp	.+80     	; 0x222c <USB_Device_ProcessControlRequest+0x110>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    21dc:	80 91 e0 01 	lds	r24, 0x01E0
    21e0:	81 11       	cpse	r24, r1
    21e2:	24 c0       	rjmp	.+72     	; 0x222c <USB_Device_ProcessControlRequest+0x110>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    21e4:	20 91 e2 01 	lds	r18, 0x01E2
    21e8:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    21ea:	09 f4       	brne	.+2      	; 0x21ee <USB_Device_ProcessControlRequest+0xd2>
    21ec:	cf c0       	rjmp	.+414    	; 0x238c <USB_Device_ProcessControlRequest+0x270>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    21ee:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    21f2:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    21f6:	80 ff       	sbrs	r24, 0
    21f8:	19 c0       	rjmp	.+50     	; 0x222c <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    21fa:	80 91 eb 00 	lds	r24, 0x00EB
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    21fe:	33 30       	cpi	r19, 0x03	; 3
    2200:	11 f4       	brne	.+4      	; 0x2206 <USB_Device_ProcessControlRequest+0xea>
    2202:	80 62       	ori	r24, 0x20	; 32
    2204:	11 c0       	rjmp	.+34     	; 0x2228 <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2206:	80 61       	ori	r24, 0x10	; 16
    2208:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	02 2e       	mov	r0, r18
    2212:	01 c0       	rjmp	.+2      	; 0x2216 <USB_Device_ProcessControlRequest+0xfa>
    2214:	88 0f       	add	r24, r24
    2216:	0a 94       	dec	r0
    2218:	ea f7       	brpl	.-6      	; 0x2214 <USB_Device_ProcessControlRequest+0xf8>
    221a:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    221e:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2222:	80 91 eb 00 	lds	r24, 0x00EB
    2226:	88 60       	ori	r24, 0x08	; 8
    2228:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    222c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2230:	80 91 e8 00 	lds	r24, 0x00E8
    2234:	87 7f       	andi	r24, 0xF7	; 247
    2236:	87 c0       	rjmp	.+270    	; 0x2346 <USB_Device_ProcessControlRequest+0x22a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2238:	21 11       	cpse	r18, r1
    223a:	a8 c0       	rjmp	.+336    	; 0x238c <USB_Device_ProcessControlRequest+0x270>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    223c:	10 91 e0 01 	lds	r17, 0x01E0
    2240:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2242:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2244:	f8 94       	cli
    2246:	80 91 e8 00 	lds	r24, 0x00E8
    224a:	87 7f       	andi	r24, 0xF7	; 247
    224c:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2250:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2254:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    2258:	80 ff       	sbrs	r24, 0
    225a:	fc cf       	rjmp	.-8      	; 0x2254 <USB_Device_ProcessControlRequest+0x138>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    225c:	80 91 e3 00 	lds	r24, 0x00E3
    2260:	80 78       	andi	r24, 0x80	; 128
    2262:	81 2b       	or	r24, r17

				UDADDR = Temp;
    2264:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    2268:	80 68       	ori	r24, 0x80	; 128
    226a:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    226e:	11 23       	and	r17, r17
    2270:	11 f0       	breq	.+4      	; 0x2276 <USB_Device_ProcessControlRequest+0x15a>
    2272:	83 e0       	ldi	r24, 0x03	; 3
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <USB_Device_ProcessControlRequest+0x15c>
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	80 93 dd 01 	sts	0x01DD, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    227c:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    227e:	86 c0       	rjmp	.+268    	; 0x238c <USB_Device_ProcessControlRequest+0x270>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2280:	20 58       	subi	r18, 0x80	; 128
    2282:	22 30       	cpi	r18, 0x02	; 2
    2284:	08 f0       	brcs	.+2      	; 0x2288 <USB_Device_ProcessControlRequest+0x16c>
    2286:	82 c0       	rjmp	.+260    	; 0x238c <USB_Device_ProcessControlRequest+0x270>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2288:	80 91 e0 01 	lds	r24, 0x01E0
    228c:	90 91 e1 01 	lds	r25, 0x01E1
    2290:	8c 3d       	cpi	r24, 0xDC	; 220
    2292:	23 e0       	ldi	r18, 0x03	; 3
    2294:	92 07       	cpc	r25, r18
    2296:	79 f5       	brne	.+94     	; 0x22f6 <USB_Device_ProcessControlRequest+0x1da>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2298:	83 e0       	ldi	r24, 0x03	; 3
    229a:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    229c:	8a e2       	ldi	r24, 0x2A	; 42
    229e:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    22a0:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    22a2:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    22a4:	de 01       	movw	r26, r28
    22a6:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    22a8:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    22aa:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    22ac:	51 e2       	ldi	r21, 0x21	; 33
    22ae:	e3 2f       	mov	r30, r19
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	50 93 57 00 	sts	0x0057, r21
    22b6:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    22b8:	20 ff       	sbrs	r18, 0
    22ba:	03 c0       	rjmp	.+6      	; 0x22c2 <USB_Device_ProcessControlRequest+0x1a6>
					{
						SerialByte >>= 4;
    22bc:	e2 95       	swap	r30
    22be:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    22c0:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    22c2:	ef 70       	andi	r30, 0x0F	; 15
    22c4:	8e 2f       	mov	r24, r30
    22c6:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    22c8:	ea 30       	cpi	r30, 0x0A	; 10
    22ca:	10 f0       	brcs	.+4      	; 0x22d0 <USB_Device_ProcessControlRequest+0x1b4>
    22cc:	c7 96       	adiw	r24, 0x37	; 55
    22ce:	01 c0       	rjmp	.+2      	; 0x22d2 <USB_Device_ProcessControlRequest+0x1b6>
    22d0:	c0 96       	adiw	r24, 0x30	; 48
    22d2:	8d 93       	st	X+, r24
    22d4:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    22d6:	2f 5f       	subi	r18, 0xFF	; 255
    22d8:	24 31       	cpi	r18, 0x14	; 20
    22da:	49 f7       	brne	.-46     	; 0x22ae <USB_Device_ProcessControlRequest+0x192>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    22dc:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22de:	80 91 e8 00 	lds	r24, 0x00E8
    22e2:	87 7f       	andi	r24, 0xF7	; 247
    22e4:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    22e8:	6a e2       	ldi	r22, 0x2A	; 42
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	ce 01       	movw	r24, r28
    22ee:	01 96       	adiw	r24, 0x01	; 1
    22f0:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <Endpoint_Write_Control_Stream_LE>
    22f4:	14 c0       	rjmp	.+40     	; 0x231e <USB_Device_ProcessControlRequest+0x202>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    22f6:	ae 01       	movw	r20, r28
    22f8:	4f 5f       	subi	r20, 0xFF	; 255
    22fa:	5f 4f       	sbci	r21, 0xFF	; 255
    22fc:	60 91 e2 01 	lds	r22, 0x01E2
    2300:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <CALLBACK_USB_GetDescriptor>
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	09 f4       	brne	.+2      	; 0x230a <USB_Device_ProcessControlRequest+0x1ee>
    2308:	41 c0       	rjmp	.+130    	; 0x238c <USB_Device_ProcessControlRequest+0x270>
    230a:	20 91 e8 00 	lds	r18, 0x00E8
    230e:	27 7f       	andi	r18, 0xF7	; 247
    2310:	20 93 e8 00 	sts	0x00E8, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2314:	bc 01       	movw	r22, r24
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	9a 81       	ldd	r25, Y+2	; 0x02
    231a:	0e 94 30 10 	call	0x2060	; 0x2060 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    231e:	80 91 e8 00 	lds	r24, 0x00E8
    2322:	8b 77       	andi	r24, 0x7B	; 123
    2324:	80 93 e8 00 	sts	0x00E8, r24
    2328:	31 c0       	rjmp	.+98     	; 0x238c <USB_Device_ProcessControlRequest+0x270>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    232a:	20 38       	cpi	r18, 0x80	; 128
    232c:	79 f5       	brne	.+94     	; 0x238c <USB_Device_ProcessControlRequest+0x270>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    232e:	80 91 e8 00 	lds	r24, 0x00E8
    2332:	87 7f       	andi	r24, 0xF7	; 247
    2334:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2338:	80 91 d9 01 	lds	r24, 0x01D9
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    233c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2340:	80 91 e8 00 	lds	r24, 0x00E8
    2344:	8e 77       	andi	r24, 0x7E	; 126
    2346:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    234a:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Endpoint_ClearStatusStage>
    234e:	1e c0       	rjmp	.+60     	; 0x238c <USB_Device_ProcessControlRequest+0x270>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2350:	21 11       	cpse	r18, r1
    2352:	1c c0       	rjmp	.+56     	; 0x238c <USB_Device_ProcessControlRequest+0x270>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2354:	90 91 e0 01 	lds	r25, 0x01E0
    2358:	92 30       	cpi	r25, 0x02	; 2
    235a:	c0 f4       	brcc	.+48     	; 0x238c <USB_Device_ProcessControlRequest+0x270>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    235c:	80 91 e8 00 	lds	r24, 0x00E8
    2360:	87 7f       	andi	r24, 0xF7	; 247
    2362:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2366:	90 93 d9 01 	sts	0x01D9, r25

	Endpoint_ClearStatusStage();
    236a:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    236e:	80 91 d9 01 	lds	r24, 0x01D9
    2372:	81 11       	cpse	r24, r1
    2374:	04 c0       	rjmp	.+8      	; 0x237e <USB_Device_ProcessControlRequest+0x262>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2376:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    237a:	87 ff       	sbrs	r24, 7
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <USB_Device_ProcessControlRequest+0x266>
    237e:	84 e0       	ldi	r24, 0x04	; 4
    2380:	01 c0       	rjmp	.+2      	; 0x2384 <USB_Device_ProcessControlRequest+0x268>
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	80 93 dd 01 	sts	0x01DD, r24

	EVENT_USB_Device_ConfigurationChanged();
    2388:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    238c:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2390:	83 ff       	sbrs	r24, 3
    2392:	0a c0       	rjmp	.+20     	; 0x23a8 <USB_Device_ProcessControlRequest+0x28c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2394:	80 91 eb 00 	lds	r24, 0x00EB
    2398:	80 62       	ori	r24, 0x20	; 32
    239a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    239e:	80 91 e8 00 	lds	r24, 0x00E8
    23a2:	87 7f       	andi	r24, 0xF7	; 247
    23a4:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    23a8:	aa 96       	adiw	r28, 0x2a	; 42
    23aa:	0f b6       	in	r0, 0x3f	; 63
    23ac:	f8 94       	cli
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	cd bf       	out	0x3d, r28	; 61
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	1f 91       	pop	r17
    23ba:	0f 91       	pop	r16
    23bc:	08 95       	ret

000023be <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    23be:	90 93 64 01 	sts	0x0164, r25
    23c2:	80 93 63 01 	sts	0x0163, r24
    23c6:	08 95       	ret

000023c8 <host_get_driver>:
}

host_driver_t *host_get_driver(void)
{
    return driver;
}
    23c8:	80 91 63 01 	lds	r24, 0x0163
    23cc:	90 91 64 01 	lds	r25, 0x0164
    23d0:	08 95       	ret

000023d2 <host_keyboard_leds>:

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    23d2:	e0 91 63 01 	lds	r30, 0x0163
    23d6:	f0 91 64 01 	lds	r31, 0x0164
    23da:	30 97       	sbiw	r30, 0x00	; 0
    23dc:	21 f0       	breq	.+8      	; 0x23e6 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    23de:	01 90       	ld	r0, Z+
    23e0:	f0 81       	ld	r31, Z
    23e2:	e0 2d       	mov	r30, r0
    23e4:	09 94       	ijmp
}
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	08 95       	ret

000023ea <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    23ea:	ff 92       	push	r15
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
    23f4:	8c 01       	movw	r16, r24
    if (!driver) return;
    23f6:	e0 91 63 01 	lds	r30, 0x0163
    23fa:	f0 91 64 01 	lds	r31, 0x0164
    23fe:	30 97       	sbiw	r30, 0x00	; 0
    2400:	99 f1       	breq	.+102    	; 0x2468 <host_keyboard_send+0x7e>
    (*driver->send_keyboard)(report);
    2402:	02 80       	ldd	r0, Z+2	; 0x02
    2404:	f3 81       	ldd	r31, Z+3	; 0x03
    2406:	e0 2d       	mov	r30, r0
    2408:	09 95       	icall

    if (debug_keyboard) {
    240a:	80 91 c3 01 	lds	r24, 0x01C3
    240e:	82 ff       	sbrs	r24, 2
    2410:	2b c0       	rjmp	.+86     	; 0x2468 <host_keyboard_send+0x7e>
        dprint("keyboard_report: ");
    2412:	80 ff       	sbrs	r24, 0
    2414:	04 c0       	rjmp	.+8      	; 0x241e <host_keyboard_send+0x34>
    2416:	86 e0       	ldi	r24, 0x06	; 6
    2418:	94 e0       	ldi	r25, 0x04	; 4
    241a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    241e:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    2420:	80 e1       	ldi	r24, 0x10	; 16
    2422:	f8 2e       	mov	r15, r24
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2424:	00 e0       	ldi	r16, 0x00	; 0
    2426:	14 e0       	ldi	r17, 0x04	; 4
    2428:	80 91 c3 01 	lds	r24, 0x01C3
    242c:	80 ff       	sbrs	r24, 0
    242e:	0b c0       	rjmp	.+22     	; 0x2446 <host_keyboard_send+0x5c>
    2430:	88 81       	ld	r24, Y
    2432:	1f 92       	push	r1
    2434:	8f 93       	push	r24
    2436:	1f 93       	push	r17
    2438:	0f 93       	push	r16
    243a:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	fa 94       	dec	r15
    2448:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    244a:	f1 10       	cpse	r15, r1
    244c:	ed cf       	rjmp	.-38     	; 0x2428 <host_keyboard_send+0x3e>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    244e:	80 91 c3 01 	lds	r24, 0x01C3
    2452:	80 ff       	sbrs	r24, 0
    2454:	09 c0       	rjmp	.+18     	; 0x2468 <host_keyboard_send+0x7e>
    2456:	8e ef       	ldi	r24, 0xFE	; 254
    2458:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	1f 91       	pop	r17
    2460:	0f 91       	pop	r16
    2462:	ff 90       	pop	r15
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2464:	0c 94 0e 08 	jmp	0x101c	; 0x101c <xputs>
    }
}
    2468:	df 91       	pop	r29
    246a:	cf 91       	pop	r28
    246c:	1f 91       	pop	r17
    246e:	0f 91       	pop	r16
    2470:	ff 90       	pop	r15
    2472:	08 95       	ret

00002474 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2474:	e0 91 63 01 	lds	r30, 0x0163
    2478:	f0 91 64 01 	lds	r31, 0x0164
    247c:	30 97       	sbiw	r30, 0x00	; 0
    247e:	21 f0       	breq	.+8      	; 0x2488 <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2480:	04 80       	ldd	r0, Z+4	; 0x04
    2482:	f5 81       	ldd	r31, Z+5	; 0x05
    2484:	e0 2d       	mov	r30, r0
    2486:	09 94       	ijmp
    2488:	08 95       	ret

0000248a <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    248a:	20 91 61 01 	lds	r18, 0x0161
    248e:	30 91 62 01 	lds	r19, 0x0162
    2492:	82 17       	cp	r24, r18
    2494:	93 07       	cpc	r25, r19
    2496:	71 f0       	breq	.+28     	; 0x24b4 <host_system_send+0x2a>
    last_system_report = report;
    2498:	90 93 62 01 	sts	0x0162, r25
    249c:	80 93 61 01 	sts	0x0161, r24

    if (!driver) return;
    24a0:	e0 91 63 01 	lds	r30, 0x0163
    24a4:	f0 91 64 01 	lds	r31, 0x0164
    24a8:	30 97       	sbiw	r30, 0x00	; 0
    24aa:	21 f0       	breq	.+8      	; 0x24b4 <host_system_send+0x2a>
    (*driver->send_system)(report);
    24ac:	06 80       	ldd	r0, Z+6	; 0x06
    24ae:	f7 81       	ldd	r31, Z+7	; 0x07
    24b0:	e0 2d       	mov	r30, r0
    24b2:	09 94       	ijmp
    24b4:	08 95       	ret

000024b6 <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    24b6:	20 91 5f 01 	lds	r18, 0x015F
    24ba:	30 91 60 01 	lds	r19, 0x0160
    24be:	82 17       	cp	r24, r18
    24c0:	93 07       	cpc	r25, r19
    24c2:	71 f0       	breq	.+28     	; 0x24e0 <host_consumer_send+0x2a>
    last_consumer_report = report;
    24c4:	90 93 60 01 	sts	0x0160, r25
    24c8:	80 93 5f 01 	sts	0x015F, r24

    if (!driver) return;
    24cc:	e0 91 63 01 	lds	r30, 0x0163
    24d0:	f0 91 64 01 	lds	r31, 0x0164
    24d4:	30 97       	sbiw	r30, 0x00	; 0
    24d6:	21 f0       	breq	.+8      	; 0x24e0 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    24d8:	00 84       	ldd	r0, Z+8	; 0x08
    24da:	f1 85       	ldd	r31, Z+9	; 0x09
    24dc:	e0 2d       	mov	r30, r0
    24de:	09 94       	ijmp
    24e0:	08 95       	ret

000024e2 <keyboard_init>:
#endif


void keyboard_init(void)
{
    timer_init();
    24e2:	0e 94 23 20 	call	0x4046	; 0x4046 <timer_init>
    matrix_init();
    24e6:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <matrix_init>
    serial_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    24ea:	0c 94 f0 20 	jmp	0x41e0	; 0x41e0 <bootmagic>

000024ee <keyboard_set_leds>:
        keyboard_set_leds(led_status);
    }
}

void keyboard_set_leds(uint8_t leds)
{
    24ee:	cf 93       	push	r28
    24f0:	c8 2f       	mov	r28, r24
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    24f2:	80 91 c3 01 	lds	r24, 0x01C3
    24f6:	82 ff       	sbrs	r24, 2
    24f8:	1e c0       	rjmp	.+60     	; 0x2536 <keyboard_set_leds+0x48>
    24fa:	80 ff       	sbrs	r24, 0
    24fc:	04 c0       	rjmp	.+8      	; 0x2506 <keyboard_set_leds+0x18>
    24fe:	8f e1       	ldi	r24, 0x1F	; 31
    2500:	94 e0       	ldi	r25, 0x04	; 4
    2502:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    2506:	80 91 c3 01 	lds	r24, 0x01C3
    250a:	80 ff       	sbrs	r24, 0
    250c:	0c c0       	rjmp	.+24     	; 0x2526 <keyboard_set_leds+0x38>
    250e:	1f 92       	push	r1
    2510:	cf 93       	push	r28
    2512:	2a e1       	ldi	r18, 0x1A	; 26
    2514:	34 e0       	ldi	r19, 0x04	; 4
    2516:	3f 93       	push	r19
    2518:	2f 93       	push	r18
    251a:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	80 91 c3 01 	lds	r24, 0x01C3
    252a:	80 ff       	sbrs	r24, 0
    252c:	04 c0       	rjmp	.+8      	; 0x2536 <keyboard_set_leds+0x48>
    252e:	88 e1       	ldi	r24, 0x18	; 24
    2530:	94 e0       	ldi	r25, 0x04	; 4
    2532:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    led_set(leds);
    2536:	8c 2f       	mov	r24, r28
}
    2538:	cf 91       	pop	r28
}

void keyboard_set_leds(uint8_t leds)
{
    if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
    led_set(leds);
    253a:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <led_set>

0000253e <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    253e:	5f 92       	push	r5
    2540:	6f 92       	push	r6
    2542:	7f 92       	push	r7
    2544:	8f 92       	push	r8
    2546:	9f 92       	push	r9
    2548:	af 92       	push	r10
    254a:	bf 92       	push	r11
    254c:	cf 92       	push	r12
    254e:	df 92       	push	r13
    2550:	ef 92       	push	r14
    2552:	ff 92       	push	r15
    2554:	0f 93       	push	r16
    2556:	1f 93       	push	r17
    2558:	cf 93       	push	r28
    255a:	df 93       	push	r29
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	2a 97       	sbiw	r28, 0x0a	; 10
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	de bf       	out	0x3e, r29	; 62
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	cd bf       	out	0x3d, r28	; 61
    static matrix_row_t matrix_prev[MATRIX_ROWS];
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    256c:	0e 94 ef 08 	call	0x11de	; 0x11de <matrix_scan>
    2570:	96 e6       	ldi	r25, 0x66	; 102
    2572:	c9 2e       	mov	r12, r25
    2574:	91 e0       	ldi	r25, 0x01	; 1
    2576:	d9 2e       	mov	r13, r25
    2578:	00 e0       	ldi	r16, 0x00	; 0
    257a:	10 e0       	ldi	r17, 0x00	; 0
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    257c:	aa 24       	eor	r10, r10
    257e:	a3 94       	inc	r10
    2580:	b1 2c       	mov	r11, r1
    2582:	50 2e       	mov	r5, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2584:	80 2f       	mov	r24, r16
    2586:	0e 94 19 0a 	call	0x1432	; 0x1432 <matrix_get_row>
    258a:	3c 01       	movw	r6, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    258c:	f6 01       	movw	r30, r12
    258e:	e1 90       	ld	r14, Z+
    2590:	f1 90       	ld	r15, Z+
    2592:	6f 01       	movw	r12, r30
    2594:	e8 26       	eor	r14, r24
    2596:	f9 26       	eor	r15, r25
        if (matrix_change) {
    2598:	e1 14       	cp	r14, r1
    259a:	f1 04       	cpc	r15, r1
    259c:	b1 f4       	brne	.+44     	; 0x25ca <keyboard_task+0x8c>
    259e:	0f 5f       	subi	r16, 0xFF	; 255
    25a0:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    25a2:	05 30       	cpi	r16, 0x05	; 5
    25a4:	11 05       	cpc	r17, r1
    25a6:	69 f7       	brne	.-38     	; 0x2582 <keyboard_task+0x44>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    25a8:	8f ef       	ldi	r24, 0xFF	; 255
    25aa:	89 83       	std	Y+1, r24	; 0x01
    25ac:	8a 83       	std	Y+2, r24	; 0x02
    25ae:	1b 82       	std	Y+3, r1	; 0x03
    25b0:	0e 94 2c 20 	call	0x4058	; 0x4058 <timer_read>
    25b4:	81 60       	ori	r24, 0x01	; 1
    25b6:	78 2f       	mov	r23, r24
    25b8:	9d 83       	std	Y+5, r25	; 0x05
    25ba:	8c 83       	std	Y+4, r24	; 0x04
    25bc:	49 81       	ldd	r20, Y+1	; 0x01
    25be:	5a 81       	ldd	r21, Y+2	; 0x02
    25c0:	6b 81       	ldd	r22, Y+3	; 0x03
    25c2:	8d 81       	ldd	r24, Y+5	; 0x05
    25c4:	0e 94 58 13 	call	0x26b0	; 0x26b0 <action_exec>
    25c8:	3a c0       	rjmp	.+116    	; 0x263e <keyboard_task+0x100>
    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
        matrix_change = matrix_row ^ matrix_prev[r];
        if (matrix_change) {
            if (debug_matrix) matrix_print();
    25ca:	80 91 c3 01 	lds	r24, 0x01C3
    25ce:	81 fd       	sbrc	r24, 1
    25d0:	0e 94 22 0a 	call	0x1444	; 0x1444 <matrix_print>
    static matrix_row_t matrix_prev[MATRIX_ROWS];
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    25d8:	45 01       	movw	r8, r10
    25da:	02 2e       	mov	r0, r18
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <keyboard_task+0xa4>
    25de:	88 0c       	add	r8, r8
    25e0:	99 1c       	adc	r9, r9
    25e2:	0a 94       	dec	r0
    25e4:	e2 f7       	brpl	.-8      	; 0x25de <keyboard_task+0xa0>
    25e6:	c4 01       	movw	r24, r8
    25e8:	8e 21       	and	r24, r14
    25ea:	9f 21       	and	r25, r15
    25ec:	89 2b       	or	r24, r25
    25ee:	09 f1       	breq	.+66     	; 0x2632 <keyboard_task+0xf4>
                    action_exec((keyevent_t){
    25f0:	2e 83       	std	Y+6, r18	; 0x06
    25f2:	5f 82       	std	Y+7, r5	; 0x07
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    25f4:	68 20       	and	r6, r8
    25f6:	79 20       	and	r7, r9
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	67 28       	or	r6, r7
    25fc:	09 f4       	brne	.+2      	; 0x2600 <keyboard_task+0xc2>
    25fe:	80 e0       	ldi	r24, 0x00	; 0
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    2600:	88 87       	std	Y+8, r24	; 0x08
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    2602:	0e 94 2c 20 	call	0x4058	; 0x4058 <timer_read>
    2606:	81 60       	ori	r24, 0x01	; 1
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    action_exec((keyevent_t){
    2608:	78 2f       	mov	r23, r24
    260a:	9a 87       	std	Y+10, r25	; 0x0a
    260c:	89 87       	std	Y+9, r24	; 0x09
    260e:	4e 81       	ldd	r20, Y+6	; 0x06
    2610:	5f 81       	ldd	r21, Y+7	; 0x07
    2612:	68 85       	ldd	r22, Y+8	; 0x08
    2614:	8a 85       	ldd	r24, Y+10	; 0x0a
    2616:	0e 94 58 13 	call	0x26b0	; 0x26b0 <action_exec>
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    });
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    261a:	f8 01       	movw	r30, r16
    261c:	ee 0f       	add	r30, r30
    261e:	ff 1f       	adc	r31, r31
    2620:	ea 59       	subi	r30, 0x9A	; 154
    2622:	fe 4f       	sbci	r31, 0xFE	; 254
    2624:	80 81       	ld	r24, Z
    2626:	91 81       	ldd	r25, Z+1	; 0x01
    2628:	88 25       	eor	r24, r8
    262a:	99 25       	eor	r25, r9
    262c:	91 83       	std	Z+1, r25	; 0x01
    262e:	80 83       	st	Z, r24
                    // process a key per task call
                    goto MATRIX_LOOP_END;
    2630:	06 c0       	rjmp	.+12     	; 0x263e <keyboard_task+0x100>
    2632:	2f 5f       	subi	r18, 0xFF	; 255
    2634:	3f 4f       	sbci	r19, 0xFF	; 255
            if (has_ghost_in_row(r)) {
                matrix_prev[r] = matrix_row;
                continue;
            }
#endif
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    2636:	2e 30       	cpi	r18, 0x0E	; 14
    2638:	31 05       	cpc	r19, r1
    263a:	71 f6       	brne	.-100    	; 0x25d8 <keyboard_task+0x9a>
    263c:	b0 cf       	rjmp	.-160    	; 0x259e <keyboard_task+0x60>

MATRIX_LOOP_END:

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    263e:	0e 94 5e 24 	call	0x48bc	; 0x48bc <mousekey_task>
#ifdef SERIAL_MOUSE_ENABLE
        serial_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    2642:	10 91 65 01 	lds	r17, 0x0165
    2646:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <host_keyboard_leds>
    264a:	18 17       	cp	r17, r24
    264c:	d9 f0       	breq	.+54     	; 0x2684 <keyboard_task+0x146>
        led_status = host_keyboard_leds();
    264e:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <host_keyboard_leds>
    2652:	80 93 65 01 	sts	0x0165, r24
        keyboard_set_leds(led_status);
    }
}
    2656:	2a 96       	adiw	r28, 0x0a	; 10
    2658:	0f b6       	in	r0, 0x3f	; 63
    265a:	f8 94       	cli
    265c:	de bf       	out	0x3e, r29	; 62
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	cd bf       	out	0x3d, r28	; 61
    2662:	df 91       	pop	r29
    2664:	cf 91       	pop	r28
    2666:	1f 91       	pop	r17
    2668:	0f 91       	pop	r16
    266a:	ff 90       	pop	r15
    266c:	ef 90       	pop	r14
    266e:	df 90       	pop	r13
    2670:	cf 90       	pop	r12
    2672:	bf 90       	pop	r11
    2674:	af 90       	pop	r10
    2676:	9f 90       	pop	r9
    2678:	8f 90       	pop	r8
    267a:	7f 90       	pop	r7
    267c:	6f 90       	pop	r6
    267e:	5f 90       	pop	r5
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        keyboard_set_leds(led_status);
    2680:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <keyboard_set_leds>
    }
}
    2684:	2a 96       	adiw	r28, 0x0a	; 10
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	df 91       	pop	r29
    2692:	cf 91       	pop	r28
    2694:	1f 91       	pop	r17
    2696:	0f 91       	pop	r16
    2698:	ff 90       	pop	r15
    269a:	ef 90       	pop	r14
    269c:	df 90       	pop	r13
    269e:	cf 90       	pop	r12
    26a0:	bf 90       	pop	r11
    26a2:	af 90       	pop	r10
    26a4:	9f 90       	pop	r9
    26a6:	8f 90       	pop	r8
    26a8:	7f 90       	pop	r7
    26aa:	6f 90       	pop	r6
    26ac:	5f 90       	pop	r5
    26ae:	08 95       	ret

000026b0 <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	2b 97       	sbiw	r28, 0x0b	; 11
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	f8 94       	cli
    26be:	de bf       	out	0x3e, r29	; 62
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	cd bf       	out	0x3d, r28	; 61
    26c4:	4f 83       	std	Y+7, r20	; 0x07
    26c6:	58 87       	std	Y+8, r21	; 0x08
    26c8:	69 87       	std	Y+9, r22	; 0x09
    26ca:	7a 87       	std	Y+10, r23	; 0x0a
    26cc:	8b 87       	std	Y+11, r24	; 0x0b
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
    }

    keyrecord_t record = { .event = event };
    26ce:	de 01       	movw	r26, r28
    26d0:	11 96       	adiw	r26, 0x01	; 1
    26d2:	86 e0       	ldi	r24, 0x06	; 6
    26d4:	fd 01       	movw	r30, r26
    26d6:	11 92       	st	Z+, r1
    26d8:	8a 95       	dec	r24
    26da:	e9 f7       	brne	.-6      	; 0x26d6 <action_exec+0x26>
    26dc:	85 e0       	ldi	r24, 0x05	; 5
    26de:	fe 01       	movw	r30, r28
    26e0:	37 96       	adiw	r30, 0x07	; 7
    26e2:	01 90       	ld	r0, Z+
    26e4:	0d 92       	st	X+, r0
    26e6:	8a 95       	dec	r24
    26e8:	e1 f7       	brne	.-8      	; 0x26e2 <action_exec+0x32>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    26ea:	49 81       	ldd	r20, Y+1	; 0x01
    26ec:	5a 81       	ldd	r21, Y+2	; 0x02
    26ee:	6b 81       	ldd	r22, Y+3	; 0x03
    26f0:	7c 81       	ldd	r23, Y+4	; 0x04
    26f2:	8d 81       	ldd	r24, Y+5	; 0x05
    26f4:	9e 81       	ldd	r25, Y+6	; 0x06
    26f6:	0e 94 8b 1a 	call	0x3516	; 0x3516 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    26fa:	2b 96       	adiw	r28, 0x0b	; 11
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	08 95       	ret

0000270c <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    270c:	cf 93       	push	r28
    270e:	c8 2f       	mov	r28, r24
    if (code == KC_NO) {
    2710:	88 23       	and	r24, r24
    2712:	09 f4       	brne	.+2      	; 0x2716 <register_code+0xa>
    2714:	c1 c0       	rjmp	.+386    	; 0x2898 <register_code+0x18c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE    
    else if (KC_LOCKING_CAPS == code) {
    2716:	82 38       	cpi	r24, 0x82	; 130
    2718:	59 f4       	brne	.+22     	; 0x2730 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    271a:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <host_keyboard_leds>
    271e:	81 fd       	sbrc	r24, 1
    2720:	bb c0       	rjmp	.+374    	; 0x2898 <register_code+0x18c>
#endif
        add_key(KC_CAPSLOCK);
    2722:	89 e3       	ldi	r24, 0x39	; 57
    2724:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <add_key>
        send_keyboard_report();
    2728:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    272c:	89 e3       	ldi	r24, 0x39	; 57
    272e:	0c c0       	rjmp	.+24     	; 0x2748 <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2730:	83 38       	cpi	r24, 0x83	; 131
    2732:	79 f4       	brne	.+30     	; 0x2752 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    2734:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <host_keyboard_leds>
    2738:	80 fd       	sbrc	r24, 0
    273a:	ae c0       	rjmp	.+348    	; 0x2898 <register_code+0x18c>
#endif
        add_key(KC_NUMLOCK);
    273c:	83 e5       	ldi	r24, 0x53	; 83
    273e:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <add_key>
        send_keyboard_report();
    2742:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2746:	83 e5       	ldi	r24, 0x53	; 83
    2748:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    274c:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    274e:	0c 94 fa 1d 	jmp	0x3bf4	; 0x3bf4 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2752:	84 38       	cpi	r24, 0x84	; 132
    2754:	59 f4       	brne	.+22     	; 0x276c <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    2756:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <host_keyboard_leds>
    275a:	82 fd       	sbrc	r24, 2
    275c:	9d c0       	rjmp	.+314    	; 0x2898 <register_code+0x18c>
#endif
        add_key(KC_SCROLLLOCK);
    275e:	87 e4       	ldi	r24, 0x47	; 71
    2760:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <add_key>
        send_keyboard_report();
    2764:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    2768:	87 e4       	ldi	r24, 0x47	; 71
    276a:	ee cf       	rjmp	.-36     	; 0x2748 <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    276c:	8c ef       	ldi	r24, 0xFC	; 252
    276e:	8c 0f       	add	r24, r28
    2770:	81 3a       	cpi	r24, 0xA1	; 161
    2772:	48 f4       	brcc	.+18     	; 0x2786 <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2774:	8c 2f       	mov	r24, r28
    2776:	0e 94 3e 2a 	call	0x547c	; 0x547c <command_proc>
    277a:	81 11       	cpse	r24, r1
    277c:	8d c0       	rjmp	.+282    	; 0x2898 <register_code+0x18c>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    277e:	8c 2f       	mov	r24, r28
    2780:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <add_key>
    2784:	e3 cf       	rjmp	.-58     	; 0x274c <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2786:	80 e2       	ldi	r24, 0x20	; 32
    2788:	8c 0f       	add	r24, r28
    278a:	88 30       	cpi	r24, 0x08	; 8
    278c:	48 f4       	brcc	.+18     	; 0x27a0 <register_code+0x94>
        add_mods(MOD_BIT(code));
    278e:	c7 70       	andi	r28, 0x07	; 7
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	01 c0       	rjmp	.+2      	; 0x2796 <register_code+0x8a>
    2794:	88 0f       	add	r24, r24
    2796:	ca 95       	dec	r28
    2798:	ea f7       	brpl	.-6      	; 0x2794 <register_code+0x88>
    279a:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <add_mods>
    279e:	d6 cf       	rjmp	.-84     	; 0x274c <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    27a0:	8b e5       	ldi	r24, 0x5B	; 91
    27a2:	8c 0f       	add	r24, r28
    27a4:	83 30       	cpi	r24, 0x03	; 3
    27a6:	78 f4       	brcc	.+30     	; 0x27c6 <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    27a8:	c5 3a       	cpi	r28, 0xA5	; 165
    27aa:	29 f0       	breq	.+10     	; 0x27b6 <register_code+0xaa>
    27ac:	c6 3a       	cpi	r28, 0xA6	; 166
    27ae:	31 f4       	brne	.+12     	; 0x27bc <register_code+0xb0>
    27b0:	82 e8       	ldi	r24, 0x82	; 130
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	05 c0       	rjmp	.+10     	; 0x27c0 <register_code+0xb4>
    27b6:	81 e8       	ldi	r24, 0x81	; 129
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	02 c0       	rjmp	.+4      	; 0x27c0 <register_code+0xb4>
    27bc:	83 e8       	ldi	r24, 0x83	; 131
    27be:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    27c0:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    27c2:	0c 94 45 12 	jmp	0x248a	; 0x248a <host_system_send>
    }
    else if IS_CONSUMER(code) {
    27c6:	88 e5       	ldi	r24, 0x58	; 88
    27c8:	8c 0f       	add	r24, r28
    27ca:	83 31       	cpi	r24, 0x13	; 19
    27cc:	08 f0       	brcs	.+2      	; 0x27d0 <register_code+0xc4>
    27ce:	64 c0       	rjmp	.+200    	; 0x2898 <register_code+0x18c>
        host_consumer_send(KEYCODE2CONSUMER(code));
    27d0:	c8 3a       	cpi	r28, 0xA8	; 168
    27d2:	39 f1       	breq	.+78     	; 0x2822 <register_code+0x116>
    27d4:	c9 3a       	cpi	r28, 0xA9	; 169
    27d6:	41 f1       	breq	.+80     	; 0x2828 <register_code+0x11c>
    27d8:	ca 3a       	cpi	r28, 0xAA	; 170
    27da:	49 f1       	breq	.+82     	; 0x282e <register_code+0x122>
    27dc:	cb 3a       	cpi	r28, 0xAB	; 171
    27de:	51 f1       	breq	.+84     	; 0x2834 <register_code+0x128>
    27e0:	cc 3a       	cpi	r28, 0xAC	; 172
    27e2:	59 f1       	breq	.+86     	; 0x283a <register_code+0x12e>
    27e4:	cd 3a       	cpi	r28, 0xAD	; 173
    27e6:	61 f1       	breq	.+88     	; 0x2840 <register_code+0x134>
    27e8:	c0 3b       	cpi	r28, 0xB0	; 176
    27ea:	69 f1       	breq	.+90     	; 0x2846 <register_code+0x13a>
    27ec:	ce 3a       	cpi	r28, 0xAE	; 174
    27ee:	71 f1       	breq	.+92     	; 0x284c <register_code+0x140>
    27f0:	cf 3a       	cpi	r28, 0xAF	; 175
    27f2:	79 f1       	breq	.+94     	; 0x2852 <register_code+0x146>
    27f4:	c1 3b       	cpi	r28, 0xB1	; 177
    27f6:	81 f1       	breq	.+96     	; 0x2858 <register_code+0x14c>
    27f8:	c2 3b       	cpi	r28, 0xB2	; 178
    27fa:	89 f1       	breq	.+98     	; 0x285e <register_code+0x152>
    27fc:	c3 3b       	cpi	r28, 0xB3	; 179
    27fe:	91 f1       	breq	.+100    	; 0x2864 <register_code+0x158>
    2800:	c4 3b       	cpi	r28, 0xB4	; 180
    2802:	99 f1       	breq	.+102    	; 0x286a <register_code+0x15e>
    2804:	c5 3b       	cpi	r28, 0xB5	; 181
    2806:	a1 f1       	breq	.+104    	; 0x2870 <register_code+0x164>
    2808:	c6 3b       	cpi	r28, 0xB6	; 182
    280a:	a9 f1       	breq	.+106    	; 0x2876 <register_code+0x16a>
    280c:	c7 3b       	cpi	r28, 0xB7	; 183
    280e:	b1 f1       	breq	.+108    	; 0x287c <register_code+0x170>
    2810:	c8 3b       	cpi	r28, 0xB8	; 184
    2812:	b9 f1       	breq	.+110    	; 0x2882 <register_code+0x176>
    2814:	c9 3b       	cpi	r28, 0xB9	; 185
    2816:	c1 f1       	breq	.+112    	; 0x2888 <register_code+0x17c>
    2818:	ca 3b       	cpi	r28, 0xBA	; 186
    281a:	c9 f5       	brne	.+114    	; 0x288e <register_code+0x182>
    281c:	8a e2       	ldi	r24, 0x2A	; 42
    281e:	92 e0       	ldi	r25, 0x02	; 2
    2820:	38 c0       	rjmp	.+112    	; 0x2892 <register_code+0x186>
    2822:	82 ee       	ldi	r24, 0xE2	; 226
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	35 c0       	rjmp	.+106    	; 0x2892 <register_code+0x186>
    2828:	89 ee       	ldi	r24, 0xE9	; 233
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	32 c0       	rjmp	.+100    	; 0x2892 <register_code+0x186>
    282e:	8a ee       	ldi	r24, 0xEA	; 234
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	2f c0       	rjmp	.+94     	; 0x2892 <register_code+0x186>
    2834:	85 eb       	ldi	r24, 0xB5	; 181
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	2c c0       	rjmp	.+88     	; 0x2892 <register_code+0x186>
    283a:	86 eb       	ldi	r24, 0xB6	; 182
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	29 c0       	rjmp	.+82     	; 0x2892 <register_code+0x186>
    2840:	87 eb       	ldi	r24, 0xB7	; 183
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	26 c0       	rjmp	.+76     	; 0x2892 <register_code+0x186>
    2846:	8c ec       	ldi	r24, 0xCC	; 204
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	23 c0       	rjmp	.+70     	; 0x2892 <register_code+0x186>
    284c:	8d ec       	ldi	r24, 0xCD	; 205
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	20 c0       	rjmp	.+64     	; 0x2892 <register_code+0x186>
    2852:	83 e8       	ldi	r24, 0x83	; 131
    2854:	91 e0       	ldi	r25, 0x01	; 1
    2856:	1d c0       	rjmp	.+58     	; 0x2892 <register_code+0x186>
    2858:	8a e8       	ldi	r24, 0x8A	; 138
    285a:	91 e0       	ldi	r25, 0x01	; 1
    285c:	1a c0       	rjmp	.+52     	; 0x2892 <register_code+0x186>
    285e:	82 e9       	ldi	r24, 0x92	; 146
    2860:	91 e0       	ldi	r25, 0x01	; 1
    2862:	17 c0       	rjmp	.+46     	; 0x2892 <register_code+0x186>
    2864:	84 e9       	ldi	r24, 0x94	; 148
    2866:	91 e0       	ldi	r25, 0x01	; 1
    2868:	14 c0       	rjmp	.+40     	; 0x2892 <register_code+0x186>
    286a:	81 e2       	ldi	r24, 0x21	; 33
    286c:	92 e0       	ldi	r25, 0x02	; 2
    286e:	11 c0       	rjmp	.+34     	; 0x2892 <register_code+0x186>
    2870:	83 e2       	ldi	r24, 0x23	; 35
    2872:	92 e0       	ldi	r25, 0x02	; 2
    2874:	0e c0       	rjmp	.+28     	; 0x2892 <register_code+0x186>
    2876:	84 e2       	ldi	r24, 0x24	; 36
    2878:	92 e0       	ldi	r25, 0x02	; 2
    287a:	0b c0       	rjmp	.+22     	; 0x2892 <register_code+0x186>
    287c:	85 e2       	ldi	r24, 0x25	; 37
    287e:	92 e0       	ldi	r25, 0x02	; 2
    2880:	08 c0       	rjmp	.+16     	; 0x2892 <register_code+0x186>
    2882:	86 e2       	ldi	r24, 0x26	; 38
    2884:	92 e0       	ldi	r25, 0x02	; 2
    2886:	05 c0       	rjmp	.+10     	; 0x2892 <register_code+0x186>
    2888:	87 e2       	ldi	r24, 0x27	; 39
    288a:	92 e0       	ldi	r25, 0x02	; 2
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <register_code+0x186>
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    2892:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    2894:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <host_consumer_send>
    }
}
    2898:	cf 91       	pop	r28
    289a:	08 95       	ret

0000289c <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    289c:	88 23       	and	r24, r24
    289e:	09 f4       	brne	.+2      	; 0x28a2 <unregister_code+0x6>
    28a0:	4b c0       	rjmp	.+150    	; 0x2938 <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    28a2:	82 38       	cpi	r24, 0x82	; 130
    28a4:	59 f4       	brne	.+22     	; 0x28bc <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    28a6:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <host_keyboard_leds>
    28aa:	81 ff       	sbrs	r24, 1
    28ac:	45 c0       	rjmp	.+138    	; 0x2938 <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    28ae:	89 e3       	ldi	r24, 0x39	; 57
    28b0:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <add_key>
        send_keyboard_report();
    28b4:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    28b8:	89 e3       	ldi	r24, 0x39	; 57
    28ba:	0c c0       	rjmp	.+24     	; 0x28d4 <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    28bc:	83 38       	cpi	r24, 0x83	; 131
    28be:	71 f4       	brne	.+28     	; 0x28dc <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    28c0:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <host_keyboard_leds>
    28c4:	80 ff       	sbrs	r24, 0
    28c6:	38 c0       	rjmp	.+112    	; 0x2938 <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    28c8:	83 e5       	ldi	r24, 0x53	; 83
    28ca:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <add_key>
        send_keyboard_report();
    28ce:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <send_keyboard_report>
        del_key(KC_NUMLOCK);
    28d2:	83 e5       	ldi	r24, 0x53	; 83
    28d4:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <del_key>
        send_keyboard_report();
    28d8:	0c 94 fa 1d 	jmp	0x3bf4	; 0x3bf4 <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    28dc:	84 38       	cpi	r24, 0x84	; 132
    28de:	59 f4       	brne	.+22     	; 0x28f6 <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    28e0:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <host_keyboard_leds>
    28e4:	82 ff       	sbrs	r24, 2
    28e6:	28 c0       	rjmp	.+80     	; 0x2938 <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    28e8:	87 e4       	ldi	r24, 0x47	; 71
    28ea:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <add_key>
        send_keyboard_report();
    28ee:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    28f2:	87 e4       	ldi	r24, 0x47	; 71
    28f4:	ef cf       	rjmp	.-34     	; 0x28d4 <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    28f6:	9c ef       	ldi	r25, 0xFC	; 252
    28f8:	98 0f       	add	r25, r24
    28fa:	91 3a       	cpi	r25, 0xA1	; 161
    28fc:	58 f3       	brcs	.-42     	; 0x28d4 <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    28fe:	90 e2       	ldi	r25, 0x20	; 32
    2900:	98 0f       	add	r25, r24
    2902:	98 30       	cpi	r25, 0x08	; 8
    2904:	50 f4       	brcc	.+20     	; 0x291a <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    2906:	87 70       	andi	r24, 0x07	; 7
    2908:	91 e0       	ldi	r25, 0x01	; 1
    290a:	01 c0       	rjmp	.+2      	; 0x290e <unregister_code+0x72>
    290c:	99 0f       	add	r25, r25
    290e:	8a 95       	dec	r24
    2910:	ea f7       	brpl	.-6      	; 0x290c <unregister_code+0x70>
    2912:	89 2f       	mov	r24, r25
    2914:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <del_mods>
    2918:	df cf       	rjmp	.-66     	; 0x28d8 <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    291a:	9b e5       	ldi	r25, 0x5B	; 91
    291c:	98 0f       	add	r25, r24
    291e:	93 30       	cpi	r25, 0x03	; 3
    2920:	20 f4       	brcc	.+8      	; 0x292a <unregister_code+0x8e>
        host_system_send(0);
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	0c 94 45 12 	jmp	0x248a	; 0x248a <host_system_send>
    }
    else if IS_CONSUMER(code) {
    292a:	88 5a       	subi	r24, 0xA8	; 168
    292c:	83 31       	cpi	r24, 0x13	; 19
    292e:	20 f4       	brcc	.+8      	; 0x2938 <unregister_code+0x9c>
        host_consumer_send(0);
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <host_consumer_send>
    2938:	08 95       	ret

0000293a <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    293a:	88 23       	and	r24, r24
    293c:	21 f0       	breq	.+8      	; 0x2946 <register_mods+0xc>
        add_mods(mods);
    293e:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <add_mods>
        send_keyboard_report();
    2942:	0c 94 fa 1d 	jmp	0x3bf4	; 0x3bf4 <send_keyboard_report>
    2946:	08 95       	ret

00002948 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2948:	88 23       	and	r24, r24
    294a:	21 f0       	breq	.+8      	; 0x2954 <unregister_mods+0xc>
        del_mods(mods);
    294c:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <del_mods>
        send_keyboard_report();
    2950:	0c 94 fa 1d 	jmp	0x3bf4	; 0x3bf4 <send_keyboard_report>
    2954:	08 95       	ret

00002956 <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    2956:	cf 92       	push	r12
    2958:	df 92       	push	r13
    295a:	ef 92       	push	r14
    295c:	ff 92       	push	r15
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
    296a:	28 97       	sbiw	r28, 0x08	; 8
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	de bf       	out	0x3e, r29	; 62
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	cd bf       	out	0x3d, r28	; 61
    2976:	8c 01       	movw	r16, r24
    keyevent_t event = record->event;
    2978:	85 e0       	ldi	r24, 0x05	; 5
    297a:	f8 01       	movw	r30, r16
    297c:	de 01       	movw	r26, r28
    297e:	11 96       	adiw	r26, 0x01	; 1
    2980:	01 90       	ld	r0, Z+
    2982:	0d 92       	st	X+, r0
    2984:	8a 95       	dec	r24
    2986:	e1 f7       	brne	.-8      	; 0x2980 <process_action+0x2a>
    2988:	f8 01       	movw	r30, r16
    298a:	40 81       	ld	r20, Z
    298c:	31 81       	ldd	r19, Z+1	; 0x01
    298e:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    2990:	25 81       	ldd	r18, Z+5	; 0x05
    2992:	22 95       	swap	r18
    2994:	2f 70       	andi	r18, 0x0F	; 15

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    2996:	83 81       	ldd	r24, Z+3	; 0x03
    2998:	94 81       	ldd	r25, Z+4	; 0x04
    299a:	89 2b       	or	r24, r25
    299c:	31 f0       	breq	.+12     	; 0x29aa <process_action+0x54>
    299e:	3f 3f       	cpi	r19, 0xFF	; 255
    29a0:	31 f4       	brne	.+12     	; 0x29ae <process_action+0x58>
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	4f 3f       	cpi	r20, 0xFF	; 255
    29a6:	19 f4       	brne	.+6      	; 0x29ae <process_action+0x58>
    29a8:	03 c0       	rjmp	.+6      	; 0x29b0 <process_action+0x5a>
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	01 c0       	rjmp	.+2      	; 0x29b0 <process_action+0x5a>
    29ae:	80 e0       	ldi	r24, 0x00	; 0
#endif

    if (IS_NOEVENT(event)) { return; }
    29b0:	80 fd       	sbrc	r24, 0
    29b2:	c8 c2       	rjmp	.+1424   	; 0x2f44 <process_action+0x5ee>

    action_t action = layer_switch_get_action(event.key);
    29b4:	49 83       	std	Y+1, r20	; 0x01
    29b6:	3a 83       	std	Y+2, r19	; 0x02
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	9a 81       	ldd	r25, Y+2	; 0x02
    29bc:	2f 83       	std	Y+7, r18	; 0x07
    29be:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <layer_switch_get_action>
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    29c2:	9e 83       	std	Y+6, r25	; 0x06
    29c4:	88 87       	std	Y+8, r24	; 0x08
    29c6:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    29ca:	0e 94 b6 1b 	call	0x376c	; 0x376c <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    29ce:	4e 81       	ldd	r20, Y+6	; 0x06
    29d0:	e4 2f       	mov	r30, r20
    29d2:	e2 95       	swap	r30
    29d4:	ef 70       	andi	r30, 0x0F	; 15
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	e0 5a       	subi	r30, 0xA0	; 160
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	2f 81       	ldd	r18, Y+7	; 0x07
    29de:	68 85       	ldd	r22, Y+8	; 0x08
    29e0:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    29e4:	84 2f       	mov	r24, r20
    29e6:	80 7f       	andi	r24, 0xF0	; 240
    29e8:	14 2f       	mov	r17, r20
    29ea:	1f 70       	andi	r17, 0x0F	; 15
    29ec:	88 23       	and	r24, r24
    29ee:	11 f0       	breq	.+4      	; 0x29f4 <process_action+0x9e>
    29f0:	12 95       	swap	r17
    29f2:	10 7f       	andi	r17, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    29f4:	ff 20       	and	r15, r15
    29f6:	59 f0       	breq	.+22     	; 0x2a0e <process_action+0xb8>
                    if (mods) {
    29f8:	11 23       	and	r17, r17
    29fa:	09 f4       	brne	.+2      	; 0x29fe <process_action+0xa8>
    29fc:	58 c2       	rjmp	.+1200   	; 0x2eae <process_action+0x558>
                        add_weak_mods(mods);
    29fe:	81 2f       	mov	r24, r17
    2a00:	68 87       	std	Y+8, r22	; 0x08
    2a02:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <add_weak_mods>
                        send_keyboard_report();
    2a06:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <send_keyboard_report>
    2a0a:	68 85       	ldd	r22, Y+8	; 0x08
    2a0c:	50 c2       	rjmp	.+1184   	; 0x2eae <process_action+0x558>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2a0e:	86 2f       	mov	r24, r22
    2a10:	0e 94 4e 14 	call	0x289c	; 0x289c <unregister_code>
                    if (mods) {
    2a14:	11 23       	and	r17, r17
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <process_action+0xc4>
    2a18:	95 c2       	rjmp	.+1322   	; 0x2f44 <process_action+0x5ee>
                        del_weak_mods(mods);
    2a1a:	81 2f       	mov	r24, r17
    2a1c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2a20:	28 96       	adiw	r28, 0x08	; 8
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	df 91       	pop	r29
    2a2e:	cf 91       	pop	r28
    2a30:	1f 91       	pop	r17
    2a32:	0f 91       	pop	r16
    2a34:	ff 90       	pop	r15
    2a36:	ef 90       	pop	r14
    2a38:	df 90       	pop	r13
    2a3a:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    2a3c:	0c 94 fa 1d 	jmp	0x3bf4	; 0x3bf4 <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2a40:	34 2f       	mov	r19, r20
    2a42:	30 7f       	andi	r19, 0xF0	; 240
    2a44:	84 2f       	mov	r24, r20
    2a46:	8f 70       	andi	r24, 0x0F	; 15
    2a48:	30 32       	cpi	r19, 0x20	; 32
    2a4a:	11 f0       	breq	.+4      	; 0x2a50 <process_action+0xfa>
    2a4c:	82 95       	swap	r24
    2a4e:	80 7f       	andi	r24, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    2a50:	66 23       	and	r22, r22
    2a52:	19 f0       	breq	.+6      	; 0x2a5a <process_action+0x104>
    2a54:	61 30       	cpi	r22, 0x01	; 1
    2a56:	09 f1       	breq	.+66     	; 0x2a9a <process_action+0x144>
    2a58:	2a c0       	rjmp	.+84     	; 0x2aae <process_action+0x158>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    2a5a:	ff 20       	and	r15, r15
    2a5c:	a1 f0       	breq	.+40     	; 0x2a86 <process_action+0x130>
                            if (tap_count == 0) {
    2a5e:	22 23       	and	r18, r18
    2a60:	81 f1       	breq	.+96     	; 0x2ac2 <process_action+0x16c>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2a62:	21 30       	cpi	r18, 0x01	; 1
    2a64:	71 f5       	brne	.+92     	; 0x2ac2 <process_action+0x16c>
            break;
#endif
        default:
            break;
    }
}
    2a66:	28 96       	adiw	r28, 0x08	; 8
    2a68:	0f b6       	in	r0, 0x3f	; 63
    2a6a:	f8 94       	cli
    2a6c:	de bf       	out	0x3e, r29	; 62
    2a6e:	0f be       	out	0x3f, r0	; 63
    2a70:	cd bf       	out	0x3d, r28	; 61
    2a72:	df 91       	pop	r29
    2a74:	cf 91       	pop	r28
    2a76:	1f 91       	pop	r17
    2a78:	0f 91       	pop	r16
    2a7a:	ff 90       	pop	r15
    2a7c:	ef 90       	pop	r14
    2a7e:	df 90       	pop	r13
    2a80:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2a82:	0c 94 e1 1d 	jmp	0x3bc2	; 0x3bc2 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    2a86:	22 23       	and	r18, r18
    2a88:	19 f0       	breq	.+6      	; 0x2a90 <process_action+0x13a>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2a8a:	21 30       	cpi	r18, 0x01	; 1
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <process_action+0x13a>
    2a8e:	5a c2       	rjmp	.+1204   	; 0x2f44 <process_action+0x5ee>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2a90:	8e 83       	std	Y+6, r24	; 0x06
    2a92:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <clear_oneshot_mods>
                                unregister_mods(mods);
    2a96:	8e 81       	ldd	r24, Y+6	; 0x06
    2a98:	8e c1       	rjmp	.+796    	; 0x2db6 <process_action+0x460>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    2a9a:	ff 20       	and	r15, r15
    2a9c:	21 f0       	breq	.+8      	; 0x2aa6 <process_action+0x150>
                            if (tap_count <= TAPPING_TOGGLE) {
    2a9e:	26 30       	cpi	r18, 0x06	; 6
    2aa0:	08 f0       	brcs	.+2      	; 0x2aa4 <process_action+0x14e>
    2aa2:	50 c2       	rjmp	.+1184   	; 0x2f44 <process_action+0x5ee>
    2aa4:	0e c0       	rjmp	.+28     	; 0x2ac2 <process_action+0x16c>
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    2aa6:	25 30       	cpi	r18, 0x05	; 5
    2aa8:	08 f0       	brcs	.+2      	; 0x2aac <process_action+0x156>
    2aaa:	4c c2       	rjmp	.+1176   	; 0x2f44 <process_action+0x5ee>
    2aac:	84 c1       	rjmp	.+776    	; 0x2db6 <process_action+0x460>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    2aae:	ff 20       	and	r15, r15
    2ab0:	c1 f0       	breq	.+48     	; 0x2ae2 <process_action+0x18c>
                            if (tap_count > 0) {
    2ab2:	22 23       	and	r18, r18
    2ab4:	31 f0       	breq	.+12     	; 0x2ac2 <process_action+0x16c>
                                if (record->tap.interrupted) {
    2ab6:	f8 01       	movw	r30, r16
    2ab8:	95 81       	ldd	r25, Z+5	; 0x05
    2aba:	90 ff       	sbrs	r25, 0
    2abc:	f8 c1       	rjmp	.+1008   	; 0x2eae <process_action+0x558>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    2abe:	9f 70       	andi	r25, 0x0F	; 15
    2ac0:	95 83       	std	Z+5, r25	; 0x05
            break;
#endif
        default:
            break;
    }
}
    2ac2:	28 96       	adiw	r28, 0x08	; 8
    2ac4:	0f b6       	in	r0, 0x3f	; 63
    2ac6:	f8 94       	cli
    2ac8:	de bf       	out	0x3e, r29	; 62
    2aca:	0f be       	out	0x3f, r0	; 63
    2acc:	cd bf       	out	0x3d, r28	; 61
    2ace:	df 91       	pop	r29
    2ad0:	cf 91       	pop	r28
    2ad2:	1f 91       	pop	r17
    2ad4:	0f 91       	pop	r16
    2ad6:	ff 90       	pop	r15
    2ad8:	ef 90       	pop	r14
    2ada:	df 90       	pop	r13
    2adc:	cf 90       	pop	r12
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
                                    register_mods(mods);
    2ade:	0c 94 9d 14 	jmp	0x293a	; 0x293a <register_mods>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    2ae2:	22 23       	and	r18, r18
    2ae4:	09 f4       	brne	.+2      	; 0x2ae8 <process_action+0x192>
    2ae6:	67 c1       	rjmp	.+718    	; 0x2db6 <process_action+0x460>
    2ae8:	f6 c1       	rjmp	.+1004   	; 0x2ed6 <process_action+0x580>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    2aea:	24 2f       	mov	r18, r20
    2aec:	26 95       	lsr	r18
    2aee:	26 95       	lsr	r18
    2af0:	23 70       	andi	r18, 0x03	; 3
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	21 15       	cp	r18, r1
    2af6:	31 05       	cpc	r19, r1
    2af8:	21 f0       	breq	.+8      	; 0x2b02 <process_action+0x1ac>
    2afa:	21 30       	cpi	r18, 0x01	; 1
    2afc:	31 05       	cpc	r19, r1
    2afe:	c9 f0       	breq	.+50     	; 0x2b32 <process_action+0x1dc>
    2b00:	21 c2       	rjmp	.+1090   	; 0x2f44 <process_action+0x5ee>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2b02:	ff 20       	and	r15, r15
    2b04:	21 f0       	breq	.+8      	; 0x2b0e <process_action+0x1b8>
                        host_system_send(action.usage.code);
    2b06:	86 2f       	mov	r24, r22
    2b08:	94 2f       	mov	r25, r20
    2b0a:	93 70       	andi	r25, 0x03	; 3
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <process_action+0x1bc>
                    } else {
                        host_system_send(0);
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2b12:	28 96       	adiw	r28, 0x08	; 8
    2b14:	0f b6       	in	r0, 0x3f	; 63
    2b16:	f8 94       	cli
    2b18:	de bf       	out	0x3e, r29	; 62
    2b1a:	0f be       	out	0x3f, r0	; 63
    2b1c:	cd bf       	out	0x3d, r28	; 61
    2b1e:	df 91       	pop	r29
    2b20:	cf 91       	pop	r28
    2b22:	1f 91       	pop	r17
    2b24:	0f 91       	pop	r16
    2b26:	ff 90       	pop	r15
    2b28:	ef 90       	pop	r14
    2b2a:	df 90       	pop	r13
    2b2c:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    2b2e:	0c 94 45 12 	jmp	0x248a	; 0x248a <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2b32:	ff 20       	and	r15, r15
    2b34:	21 f0       	breq	.+8      	; 0x2b3e <process_action+0x1e8>
                        host_consumer_send(action.usage.code);
    2b36:	86 2f       	mov	r24, r22
    2b38:	94 2f       	mov	r25, r20
    2b3a:	93 70       	andi	r25, 0x03	; 3
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <process_action+0x1ec>
                    } else {
                        host_consumer_send(0);
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
    2b40:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2b42:	28 96       	adiw	r28, 0x08	; 8
    2b44:	0f b6       	in	r0, 0x3f	; 63
    2b46:	f8 94       	cli
    2b48:	de bf       	out	0x3e, r29	; 62
    2b4a:	0f be       	out	0x3f, r0	; 63
    2b4c:	cd bf       	out	0x3d, r28	; 61
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	1f 91       	pop	r17
    2b54:	0f 91       	pop	r16
    2b56:	ff 90       	pop	r15
    2b58:	ef 90       	pop	r14
    2b5a:	df 90       	pop	r13
    2b5c:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    2b5e:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2b62:	86 2f       	mov	r24, r22
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2b64:	ff 20       	and	r15, r15
    2b66:	19 f0       	breq	.+6      	; 0x2b6e <process_action+0x218>
                mousekey_on(action.key.code);
    2b68:	0e 94 e4 22 	call	0x45c8	; 0x45c8 <mousekey_on>
    2b6c:	02 c0       	rjmp	.+4      	; 0x2b72 <process_action+0x21c>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    2b6e:	0e 94 4c 23 	call	0x4698	; 0x4698 <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    2b72:	28 96       	adiw	r28, 0x08	; 8
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	cd bf       	out	0x3d, r28	; 61
    2b7e:	df 91       	pop	r29
    2b80:	cf 91       	pop	r28
    2b82:	1f 91       	pop	r17
    2b84:	0f 91       	pop	r16
    2b86:	ff 90       	pop	r15
    2b88:	ef 90       	pop	r14
    2b8a:	df 90       	pop	r13
    2b8c:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    2b8e:	0c 94 d1 23 	jmp	0x47a2	; 0x47a2 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    2b92:	84 2f       	mov	r24, r20
    2b94:	83 70       	andi	r24, 0x03	; 3
    2b96:	09 f0       	breq	.+2      	; 0x2b9a <process_action+0x244>
    2b98:	76 c0       	rjmp	.+236    	; 0x2c86 <process_action+0x330>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    2b9a:	f1 10       	cpse	r15, r1
    2b9c:	d3 c1       	rjmp	.+934    	; 0x2f44 <process_action+0x5ee>
                    uint8_t shift = action.layer_bitop.part*4;
    2b9e:	26 2f       	mov	r18, r22
    2ba0:	22 95       	swap	r18
    2ba2:	26 95       	lsr	r18
    2ba4:	27 70       	andi	r18, 0x07	; 7
    2ba6:	22 0f       	add	r18, r18
    2ba8:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2baa:	86 2f       	mov	r24, r22
    2bac:	8f 70       	andi	r24, 0x0F	; 15
    2bae:	c8 2e       	mov	r12, r24
    2bb0:	d1 2c       	mov	r13, r1
    2bb2:	e1 2c       	mov	r14, r1
    2bb4:	f1 2c       	mov	r15, r1
    2bb6:	02 2e       	mov	r0, r18
    2bb8:	04 c0       	rjmp	.+8      	; 0x2bc2 <process_action+0x26c>
    2bba:	cc 0c       	add	r12, r12
    2bbc:	dd 1c       	adc	r13, r13
    2bbe:	ee 1c       	adc	r14, r14
    2bc0:	ff 1c       	adc	r15, r15
    2bc2:	0a 94       	dec	r0
    2bc4:	d2 f7       	brpl	.-12     	; 0x2bba <process_action+0x264>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2bc6:	64 ff       	sbrs	r22, 4
    2bc8:	10 c0       	rjmp	.+32     	; 0x2bea <process_action+0x294>
    2bca:	6f e0       	ldi	r22, 0x0F	; 15
    2bcc:	70 e0       	ldi	r23, 0x00	; 0
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	04 c0       	rjmp	.+8      	; 0x2bdc <process_action+0x286>
    2bd4:	66 0f       	add	r22, r22
    2bd6:	77 1f       	adc	r23, r23
    2bd8:	88 1f       	adc	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	2a 95       	dec	r18
    2bde:	d2 f7       	brpl	.-12     	; 0x2bd4 <process_action+0x27e>
    2be0:	60 95       	com	r22
    2be2:	70 95       	com	r23
    2be4:	80 95       	com	r24
    2be6:	90 95       	com	r25
    2be8:	03 c0       	rjmp	.+6      	; 0x2bf0 <process_action+0x29a>
    2bea:	60 e0       	ldi	r22, 0x00	; 0
    2bec:	70 e0       	ldi	r23, 0x00	; 0
    2bee:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2bf0:	24 2f       	mov	r18, r20
    2bf2:	26 95       	lsr	r18
    2bf4:	26 95       	lsr	r18
    2bf6:	23 70       	andi	r18, 0x03	; 3
    2bf8:	42 2f       	mov	r20, r18
    2bfa:	50 e0       	ldi	r21, 0x00	; 0
    2bfc:	42 30       	cpi	r20, 0x02	; 2
    2bfe:	51 05       	cpc	r21, r1
    2c00:	d1 f0       	breq	.+52     	; 0x2c36 <process_action+0x2e0>
    2c02:	43 30       	cpi	r20, 0x03	; 3
    2c04:	51 05       	cpc	r21, r1
    2c06:	59 f1       	breq	.+86     	; 0x2c5e <process_action+0x308>
    2c08:	6c 29       	or	r22, r12
    2c0a:	7d 29       	or	r23, r13
    2c0c:	8e 29       	or	r24, r14
    2c0e:	9f 29       	or	r25, r15
    2c10:	41 30       	cpi	r20, 0x01	; 1
    2c12:	51 05       	cpc	r21, r1
    2c14:	41 f1       	breq	.+80     	; 0x2c66 <process_action+0x310>
            break;
#endif
        default:
            break;
    }
}
    2c16:	28 96       	adiw	r28, 0x08	; 8
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	cd bf       	out	0x3d, r28	; 61
    2c22:	df 91       	pop	r29
    2c24:	cf 91       	pop	r28
    2c26:	1f 91       	pop	r17
    2c28:	0f 91       	pop	r16
    2c2a:	ff 90       	pop	r15
    2c2c:	ef 90       	pop	r14
    2c2e:	df 90       	pop	r13
    2c30:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2c32:	0c 94 db 1b 	jmp	0x37b6	; 0x37b6 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2c36:	6c 29       	or	r22, r12
    2c38:	7d 29       	or	r23, r13
    2c3a:	8e 29       	or	r24, r14
    2c3c:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2c3e:	28 96       	adiw	r28, 0x08	; 8
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	ff 90       	pop	r15
    2c54:	ef 90       	pop	r14
    2c56:	df 90       	pop	r13
    2c58:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2c5a:	0c 94 f5 1b 	jmp	0x37ea	; 0x37ea <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2c5e:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <default_layer_and>
    2c62:	c7 01       	movw	r24, r14
    2c64:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2c66:	28 96       	adiw	r28, 0x08	; 8
    2c68:	0f b6       	in	r0, 0x3f	; 63
    2c6a:	f8 94       	cli
    2c6c:	de bf       	out	0x3e, r29	; 62
    2c6e:	0f be       	out	0x3f, r0	; 63
    2c70:	cd bf       	out	0x3d, r28	; 61
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	1f 91       	pop	r17
    2c78:	0f 91       	pop	r16
    2c7a:	ff 90       	pop	r15
    2c7c:	ef 90       	pop	r14
    2c7e:	df 90       	pop	r13
    2c80:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2c82:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2c86:	ff 20       	and	r15, r15
    2c88:	19 f0       	breq	.+6      	; 0x2c90 <process_action+0x33a>
    2c8a:	84 2f       	mov	r24, r20
    2c8c:	81 70       	andi	r24, 0x01	; 1
    2c8e:	01 c0       	rjmp	.+2      	; 0x2c92 <process_action+0x33c>
    2c90:	86 95       	lsr	r24
    2c92:	88 23       	and	r24, r24
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <process_action+0x342>
    2c96:	56 c1       	rjmp	.+684    	; 0x2f44 <process_action+0x5ee>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    2c98:	26 2f       	mov	r18, r22
    2c9a:	22 95       	swap	r18
    2c9c:	26 95       	lsr	r18
    2c9e:	27 70       	andi	r18, 0x07	; 7
    2ca0:	22 0f       	add	r18, r18
    2ca2:	22 0f       	add	r18, r18
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    2ca4:	86 2f       	mov	r24, r22
    2ca6:	8f 70       	andi	r24, 0x0F	; 15
    2ca8:	c8 2e       	mov	r12, r24
    2caa:	d1 2c       	mov	r13, r1
    2cac:	e1 2c       	mov	r14, r1
    2cae:	f1 2c       	mov	r15, r1
    2cb0:	02 2e       	mov	r0, r18
    2cb2:	04 c0       	rjmp	.+8      	; 0x2cbc <process_action+0x366>
    2cb4:	cc 0c       	add	r12, r12
    2cb6:	dd 1c       	adc	r13, r13
    2cb8:	ee 1c       	adc	r14, r14
    2cba:	ff 1c       	adc	r15, r15
    2cbc:	0a 94       	dec	r0
    2cbe:	d2 f7       	brpl	.-12     	; 0x2cb4 <process_action+0x35e>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    2cc0:	64 ff       	sbrs	r22, 4
    2cc2:	10 c0       	rjmp	.+32     	; 0x2ce4 <process_action+0x38e>
    2cc4:	6f e0       	ldi	r22, 0x0F	; 15
    2cc6:	70 e0       	ldi	r23, 0x00	; 0
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	04 c0       	rjmp	.+8      	; 0x2cd6 <process_action+0x380>
    2cce:	66 0f       	add	r22, r22
    2cd0:	77 1f       	adc	r23, r23
    2cd2:	88 1f       	adc	r24, r24
    2cd4:	99 1f       	adc	r25, r25
    2cd6:	2a 95       	dec	r18
    2cd8:	d2 f7       	brpl	.-12     	; 0x2cce <process_action+0x378>
    2cda:	60 95       	com	r22
    2cdc:	70 95       	com	r23
    2cde:	80 95       	com	r24
    2ce0:	90 95       	com	r25
    2ce2:	03 c0       	rjmp	.+6      	; 0x2cea <process_action+0x394>
    2ce4:	60 e0       	ldi	r22, 0x00	; 0
    2ce6:	70 e0       	ldi	r23, 0x00	; 0
    2ce8:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2cea:	24 2f       	mov	r18, r20
    2cec:	26 95       	lsr	r18
    2cee:	26 95       	lsr	r18
    2cf0:	23 70       	andi	r18, 0x03	; 3
    2cf2:	42 2f       	mov	r20, r18
    2cf4:	50 e0       	ldi	r21, 0x00	; 0
    2cf6:	42 30       	cpi	r20, 0x02	; 2
    2cf8:	51 05       	cpc	r21, r1
    2cfa:	d1 f0       	breq	.+52     	; 0x2d30 <process_action+0x3da>
    2cfc:	43 30       	cpi	r20, 0x03	; 3
    2cfe:	51 05       	cpc	r21, r1
    2d00:	59 f1       	breq	.+86     	; 0x2d58 <process_action+0x402>
    2d02:	6c 29       	or	r22, r12
    2d04:	7d 29       	or	r23, r13
    2d06:	8e 29       	or	r24, r14
    2d08:	9f 29       	or	r25, r15
    2d0a:	41 30       	cpi	r20, 0x01	; 1
    2d0c:	51 05       	cpc	r21, r1
    2d0e:	41 f1       	breq	.+80     	; 0x2d60 <process_action+0x40a>
            break;
#endif
        default:
            break;
    }
}
    2d10:	28 96       	adiw	r28, 0x08	; 8
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	de bf       	out	0x3e, r29	; 62
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	cd bf       	out	0x3d, r28	; 61
    2d1c:	df 91       	pop	r29
    2d1e:	cf 91       	pop	r28
    2d20:	1f 91       	pop	r17
    2d22:	0f 91       	pop	r16
    2d24:	ff 90       	pop	r15
    2d26:	ef 90       	pop	r14
    2d28:	df 90       	pop	r13
    2d2a:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2d2c:	0c 94 af 1c 	jmp	0x395e	; 0x395e <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2d30:	6c 29       	or	r22, r12
    2d32:	7d 29       	or	r23, r13
    2d34:	8e 29       	or	r24, r14
    2d36:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2d38:	28 96       	adiw	r28, 0x08	; 8
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	f8 94       	cli
    2d3e:	de bf       	out	0x3e, r29	; 62
    2d40:	0f be       	out	0x3f, r0	; 63
    2d42:	cd bf       	out	0x3d, r28	; 61
    2d44:	df 91       	pop	r29
    2d46:	cf 91       	pop	r28
    2d48:	1f 91       	pop	r17
    2d4a:	0f 91       	pop	r16
    2d4c:	ff 90       	pop	r15
    2d4e:	ef 90       	pop	r14
    2d50:	df 90       	pop	r13
    2d52:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2d54:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2d58:	0e 94 af 1c 	call	0x395e	; 0x395e <layer_and>
    2d5c:	c7 01       	movw	r24, r14
    2d5e:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2d60:	28 96       	adiw	r28, 0x08	; 8
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	f8 94       	cli
    2d66:	de bf       	out	0x3e, r29	; 62
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	cd bf       	out	0x3d, r28	; 61
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	1f 91       	pop	r17
    2d72:	0f 91       	pop	r16
    2d74:	ff 90       	pop	r15
    2d76:	ef 90       	pop	r14
    2d78:	df 90       	pop	r13
    2d7a:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2d7c:	0c 94 95 1c 	jmp	0x392a	; 0x392a <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2d80:	60 3f       	cpi	r22, 0xF0	; 240
    2d82:	49 f1       	breq	.+82     	; 0x2dd6 <process_action+0x480>
    2d84:	18 f4       	brcc	.+6      	; 0x2d8c <process_action+0x436>
    2d86:	60 3e       	cpi	r22, 0xE0	; 224
    2d88:	48 f4       	brcc	.+18     	; 0x2d9c <process_action+0x446>
    2d8a:	8c c0       	rjmp	.+280    	; 0x2ea4 <process_action+0x54e>
    2d8c:	62 3f       	cpi	r22, 0xF2	; 242
    2d8e:	09 f4       	brne	.+2      	; 0x2d92 <process_action+0x43c>
    2d90:	51 c0       	rjmp	.+162    	; 0x2e34 <process_action+0x4de>
    2d92:	e0 f1       	brcs	.+120    	; 0x2e0c <process_action+0x4b6>
    2d94:	63 3f       	cpi	r22, 0xF3	; 243
    2d96:	09 f4       	brne	.+2      	; 0x2d9a <process_action+0x444>
    2d98:	61 c0       	rjmp	.+194    	; 0x2e5c <process_action+0x506>
    2d9a:	84 c0       	rjmp	.+264    	; 0x2ea4 <process_action+0x54e>
    2d9c:	16 2f       	mov	r17, r22
    2d9e:	1f 70       	andi	r17, 0x0F	; 15
    2da0:	84 2f       	mov	r24, r20
    2da2:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2da4:	ff 20       	and	r15, r15
    2da6:	21 f0       	breq	.+8      	; 0x2db0 <process_action+0x45a>
                        layer_on(action.layer_tap.val);
    2da8:	0e 94 2e 1c 	call	0x385c	; 0x385c <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2dac:	81 2f       	mov	r24, r17
    2dae:	89 ce       	rjmp	.-750    	; 0x2ac2 <process_action+0x16c>
                    } else {
                        layer_off(action.layer_tap.val);
    2db0:	0e 94 4f 1c 	call	0x389e	; 0x389e <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2db4:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2db6:	28 96       	adiw	r28, 0x08	; 8
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	de bf       	out	0x3e, r29	; 62
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	cd bf       	out	0x3d, r28	; 61
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	1f 91       	pop	r17
    2dc8:	0f 91       	pop	r16
    2dca:	ff 90       	pop	r15
    2dcc:	ef 90       	pop	r14
    2dce:	df 90       	pop	r13
    2dd0:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2dd2:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2dd6:	ff 20       	and	r15, r15
    2dd8:	a9 f0       	breq	.+42     	; 0x2e04 <process_action+0x4ae>
                        if (tap_count < TAPPING_TOGGLE) {
    2dda:	25 30       	cpi	r18, 0x05	; 5
    2ddc:	08 f0       	brcs	.+2      	; 0x2de0 <process_action+0x48a>
    2dde:	b2 c0       	rjmp	.+356    	; 0x2f44 <process_action+0x5ee>
                            layer_invert(action.layer_tap.val);
    2de0:	84 2f       	mov	r24, r20
    2de2:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2de4:	28 96       	adiw	r28, 0x08	; 8
    2de6:	0f b6       	in	r0, 0x3f	; 63
    2de8:	f8 94       	cli
    2dea:	de bf       	out	0x3e, r29	; 62
    2dec:	0f be       	out	0x3f, r0	; 63
    2dee:	cd bf       	out	0x3d, r28	; 61
    2df0:	df 91       	pop	r29
    2df2:	cf 91       	pop	r28
    2df4:	1f 91       	pop	r17
    2df6:	0f 91       	pop	r16
    2df8:	ff 90       	pop	r15
    2dfa:	ef 90       	pop	r14
    2dfc:	df 90       	pop	r13
    2dfe:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2e00:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2e04:	26 30       	cpi	r18, 0x06	; 6
    2e06:	08 f0       	brcs	.+2      	; 0x2e0a <process_action+0x4b4>
    2e08:	9d c0       	rjmp	.+314    	; 0x2f44 <process_action+0x5ee>
    2e0a:	ea cf       	rjmp	.-44     	; 0x2de0 <process_action+0x48a>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2e0c:	ff 20       	and	r15, r15
    2e0e:	a1 f0       	breq	.+40     	; 0x2e38 <process_action+0x4e2>
    2e10:	84 2f       	mov	r24, r20
    2e12:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2e14:	28 96       	adiw	r28, 0x08	; 8
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	f8 94       	cli
    2e1a:	de bf       	out	0x3e, r29	; 62
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	cd bf       	out	0x3d, r28	; 61
    2e20:	df 91       	pop	r29
    2e22:	cf 91       	pop	r28
    2e24:	1f 91       	pop	r17
    2e26:	0f 91       	pop	r16
    2e28:	ff 90       	pop	r15
    2e2a:	ef 90       	pop	r14
    2e2c:	df 90       	pop	r13
    2e2e:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2e30:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2e34:	ff 20       	and	r15, r15
    2e36:	61 f3       	breq	.-40     	; 0x2e10 <process_action+0x4ba>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2e38:	84 2f       	mov	r24, r20
    2e3a:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2e3c:	28 96       	adiw	r28, 0x08	; 8
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	f8 94       	cli
    2e42:	de bf       	out	0x3e, r29	; 62
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	cd bf       	out	0x3d, r28	; 61
    2e48:	df 91       	pop	r29
    2e4a:	cf 91       	pop	r28
    2e4c:	1f 91       	pop	r17
    2e4e:	0f 91       	pop	r16
    2e50:	ff 90       	pop	r15
    2e52:	ef 90       	pop	r14
    2e54:	df 90       	pop	r13
    2e56:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2e58:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2e5c:	ff 20       	and	r15, r15
    2e5e:	91 f0       	breq	.+36     	; 0x2e84 <process_action+0x52e>
    2e60:	84 2f       	mov	r24, r20
    2e62:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2e64:	28 96       	adiw	r28, 0x08	; 8
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	f8 94       	cli
    2e6a:	de bf       	out	0x3e, r29	; 62
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	cd bf       	out	0x3d, r28	; 61
    2e70:	df 91       	pop	r29
    2e72:	cf 91       	pop	r28
    2e74:	1f 91       	pop	r17
    2e76:	0f 91       	pop	r16
    2e78:	ff 90       	pop	r15
    2e7a:	ef 90       	pop	r14
    2e7c:	df 90       	pop	r13
    2e7e:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2e80:	0c 94 19 1c 	jmp	0x3832	; 0x3832 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2e84:	28 96       	adiw	r28, 0x08	; 8
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
    2e90:	df 91       	pop	r29
    2e92:	cf 91       	pop	r28
    2e94:	1f 91       	pop	r17
    2e96:	0f 91       	pop	r16
    2e98:	ff 90       	pop	r15
    2e9a:	ef 90       	pop	r14
    2e9c:	df 90       	pop	r13
    2e9e:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2ea0:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2ea4:	ff 20       	and	r15, r15
    2ea6:	a1 f0       	breq	.+40     	; 0x2ed0 <process_action+0x57a>
                        if (tap_count > 0) {
    2ea8:	22 23       	and	r18, r18
    2eaa:	09 f4       	brne	.+2      	; 0x2eae <process_action+0x558>
    2eac:	b1 cf       	rjmp	.-158    	; 0x2e10 <process_action+0x4ba>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2eae:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2eb0:	28 96       	adiw	r28, 0x08	; 8
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	f8 94       	cli
    2eb6:	de bf       	out	0x3e, r29	; 62
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	cd bf       	out	0x3d, r28	; 61
    2ebc:	df 91       	pop	r29
    2ebe:	cf 91       	pop	r28
    2ec0:	1f 91       	pop	r17
    2ec2:	0f 91       	pop	r16
    2ec4:	ff 90       	pop	r15
    2ec6:	ef 90       	pop	r14
    2ec8:	df 90       	pop	r13
    2eca:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2ecc:	0c 94 86 13 	jmp	0x270c	; 0x270c <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2ed0:	22 23       	and	r18, r18
    2ed2:	09 f4       	brne	.+2      	; 0x2ed6 <process_action+0x580>
    2ed4:	b1 cf       	rjmp	.-158    	; 0x2e38 <process_action+0x4e2>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2ed6:	86 2f       	mov	r24, r22
            break;
#endif
        default:
            break;
    }
}
    2ed8:	28 96       	adiw	r28, 0x08	; 8
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	f8 94       	cli
    2ede:	de bf       	out	0x3e, r29	; 62
    2ee0:	0f be       	out	0x3f, r0	; 63
    2ee2:	cd bf       	out	0x3d, r28	; 61
    2ee4:	df 91       	pop	r29
    2ee6:	cf 91       	pop	r28
    2ee8:	1f 91       	pop	r17
    2eea:	0f 91       	pop	r16
    2eec:	ff 90       	pop	r15
    2eee:	ef 90       	pop	r14
    2ef0:	df 90       	pop	r13
    2ef2:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2ef4:	0c 94 4e 14 	jmp	0x289c	; 0x289c <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2ef8:	4f 70       	andi	r20, 0x0F	; 15
    2efa:	c8 01       	movw	r24, r16
    2efc:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2f00:	28 96       	adiw	r28, 0x08	; 8
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	de bf       	out	0x3e, r29	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	cd bf       	out	0x3d, r28	; 61
    2f0c:	df 91       	pop	r29
    2f0e:	cf 91       	pop	r28
    2f10:	1f 91       	pop	r17
    2f12:	0f 91       	pop	r16
    2f14:	ff 90       	pop	r15
    2f16:	ef 90       	pop	r14
    2f18:	df 90       	pop	r13
    2f1a:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2f1c:	0c 94 38 1b 	jmp	0x3670	; 0x3670 <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2f20:	4f 70       	andi	r20, 0x0F	; 15
    2f22:	c8 01       	movw	r24, r16
            break;
#endif
        default:
            break;
    }
}
    2f24:	28 96       	adiw	r28, 0x08	; 8
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	de bf       	out	0x3e, r29	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	df 91       	pop	r29
    2f32:	cf 91       	pop	r28
    2f34:	1f 91       	pop	r17
    2f36:	0f 91       	pop	r16
    2f38:	ff 90       	pop	r15
    2f3a:	ef 90       	pop	r14
    2f3c:	df 90       	pop	r13
    2f3e:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2f40:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2f44:	28 96       	adiw	r28, 0x08	; 8
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	f8 94       	cli
    2f4a:	de bf       	out	0x3e, r29	; 62
    2f4c:	0f be       	out	0x3f, r0	; 63
    2f4e:	cd bf       	out	0x3d, r28	; 61
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	1f 91       	pop	r17
    2f56:	0f 91       	pop	r16
    2f58:	ff 90       	pop	r15
    2f5a:	ef 90       	pop	r14
    2f5c:	df 90       	pop	r13
    2f5e:	cf 90       	pop	r12
    2f60:	08 95       	ret

00002f62 <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2f62:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <clear_weak_mods>
    clear_keys();
    2f66:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <clear_keys>
    send_keyboard_report();
    2f6a:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2f6e:	0e 94 ff 24 	call	0x49fe	; 0x49fe <mousekey_clear>
    mousekey_send();
    2f72:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2f76:	80 e0       	ldi	r24, 0x00	; 0
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	0e 94 45 12 	call	0x248a	; 0x248a <host_system_send>
    host_consumer_send(0);
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <host_consumer_send>

00002f86 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2f86:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <clear_mods>
    clear_keyboard_but_mods();
    2f8a:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <clear_keyboard_but_mods>

00002f8e <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2f8e:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <layer_switch_get_action>

    switch (action.kind.id) {
    2f92:	29 2f       	mov	r18, r25
    2f94:	22 95       	swap	r18
    2f96:	2f 70       	andi	r18, 0x0F	; 15
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	2c 30       	cpi	r18, 0x0C	; 12
    2f9c:	31 05       	cpc	r19, r1
    2f9e:	4c f4       	brge	.+18     	; 0x2fb2 <is_tap_key+0x24>
    2fa0:	2a 30       	cpi	r18, 0x0A	; 10
    2fa2:	31 05       	cpc	r19, r1
    2fa4:	6c f4       	brge	.+26     	; 0x2fc0 <is_tap_key+0x32>
    2fa6:	22 50       	subi	r18, 0x02	; 2
    2fa8:	31 09       	sbc	r19, r1
    2faa:	22 30       	cpi	r18, 0x02	; 2
    2fac:	31 05       	cpc	r19, r1
    2fae:	70 f4       	brcc	.+28     	; 0x2fcc <is_tap_key+0x3e>
    2fb0:	07 c0       	rjmp	.+14     	; 0x2fc0 <is_tap_key+0x32>
    2fb2:	2c 30       	cpi	r18, 0x0C	; 12
    2fb4:	31 05       	cpc	r19, r1
    2fb6:	31 f0       	breq	.+12     	; 0x2fc4 <is_tap_key+0x36>
    2fb8:	2f 30       	cpi	r18, 0x0F	; 15
    2fba:	31 05       	cpc	r19, r1
    2fbc:	19 f0       	breq	.+6      	; 0x2fc4 <is_tap_key+0x36>
    2fbe:	06 c0       	rjmp	.+12     	; 0x2fcc <is_tap_key+0x3e>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            return true;
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	08 95       	ret
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2fc4:	93 fb       	bst	r25, 3
    2fc6:	88 27       	eor	r24, r24
    2fc8:	80 f9       	bld	r24, 0
    2fca:	08 95       	ret
            return false;
    }
    return false;
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
}
    2fce:	08 95       	ret

00002fd0 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2fd0:	cf 93       	push	r28
    2fd2:	df 93       	push	r29
    2fd4:	00 d0       	rcall	.+0      	; 0x2fd6 <debug_event+0x6>
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <debug_event+0x8>
    2fd8:	1f 92       	push	r1
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	0f 90       	pop	r0
    2fe8:	df 91       	pop	r29
    2fea:	cf 91       	pop	r28
    2fec:	08 95       	ret

00002fee <debug_record>:

void debug_record(keyrecord_t record)
{
    2fee:	cf 93       	push	r28
    2ff0:	df 93       	push	r29
    2ff2:	00 d0       	rcall	.+0      	; 0x2ff4 <debug_record+0x6>
    2ff4:	00 d0       	rcall	.+0      	; 0x2ff6 <debug_record+0x8>
    2ff6:	00 d0       	rcall	.+0      	; 0x2ff8 <debug_record+0xa>
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2ffc:	26 96       	adiw	r28, 0x06	; 6
    2ffe:	0f b6       	in	r0, 0x3f	; 63
    3000:	f8 94       	cli
    3002:	de bf       	out	0x3e, r29	; 62
    3004:	0f be       	out	0x3f, r0	; 63
    3006:	cd bf       	out	0x3d, r28	; 61
    3008:	df 91       	pop	r29
    300a:	cf 91       	pop	r28
    300c:	08 95       	ret

0000300e <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    300e:	1f 93       	push	r17
    3010:	cf 93       	push	r28
    3012:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3014:	c0 91 70 01 	lds	r28, 0x0170
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    3018:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    301a:	80 91 71 01 	lds	r24, 0x0171
    301e:	c8 17       	cp	r28, r24
    3020:	99 f0       	breq	.+38     	; 0x3048 <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    3022:	d0 e0       	ldi	r29, 0x00	; 0
    3024:	1c 9f       	mul	r17, r28
    3026:	f0 01       	movw	r30, r0
    3028:	1d 9f       	mul	r17, r29
    302a:	f0 0d       	add	r31, r0
    302c:	11 24       	eor	r1, r1
    302e:	ee 58       	subi	r30, 0x8E	; 142
    3030:	fe 4f       	sbci	r31, 0xFE	; 254
    3032:	40 81       	ld	r20, Z
    3034:	51 81       	ldd	r21, Z+1	; 0x01
    3036:	62 81       	ldd	r22, Z+2	; 0x02
    3038:	73 81       	ldd	r23, Z+3	; 0x03
    303a:	84 81       	ldd	r24, Z+4	; 0x04
    303c:	95 81       	ldd	r25, Z+5	; 0x05
    303e:	0e 94 f7 17 	call	0x2fee	; 0x2fee <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3042:	21 96       	adiw	r28, 0x01	; 1
    3044:	c7 70       	andi	r28, 0x07	; 7
    3046:	e9 cf       	rjmp	.-46     	; 0x301a <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	1f 91       	pop	r17
    304e:	08 95       	ret

00003050 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    3050:	40 91 a2 01 	lds	r20, 0x01A2
    3054:	50 91 a3 01 	lds	r21, 0x01A3
    3058:	60 91 a4 01 	lds	r22, 0x01A4
    305c:	70 91 a5 01 	lds	r23, 0x01A5
    3060:	80 91 a6 01 	lds	r24, 0x01A6
    3064:	90 91 a7 01 	lds	r25, 0x01A7
    3068:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <debug_record>

0000306c <waiting_buffer_scan_tap>:
    return false;
}

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    306c:	cf 93       	push	r28
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    306e:	80 91 a7 01 	lds	r24, 0x01A7
    3072:	82 95       	swap	r24
    3074:	8f 70       	andi	r24, 0x0F	; 15
    3076:	09 f0       	breq	.+2      	; 0x307a <waiting_buffer_scan_tap+0xe>
    3078:	5f c0       	rjmp	.+190    	; 0x3138 <waiting_buffer_scan_tap+0xcc>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    307a:	80 91 a4 01 	lds	r24, 0x01A4
    307e:	88 23       	and	r24, r24
    3080:	09 f4       	brne	.+2      	; 0x3084 <waiting_buffer_scan_tap+0x18>
    3082:	5a c0       	rjmp	.+180    	; 0x3138 <waiting_buffer_scan_tap+0xcc>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3084:	20 91 70 01 	lds	r18, 0x0170
    3088:	a0 91 71 01 	lds	r26, 0x0171
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    308c:	60 91 a2 01 	lds	r22, 0x01A2
    3090:	70 91 a3 01 	lds	r23, 0x01A3
    3094:	80 91 a5 01 	lds	r24, 0x01A5
    3098:	90 91 a6 01 	lds	r25, 0x01A6
    309c:	31 e0       	ldi	r19, 0x01	; 1
    309e:	6f 3f       	cpi	r22, 0xFF	; 255
    30a0:	09 f0       	breq	.+2      	; 0x30a4 <waiting_buffer_scan_tap+0x38>
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	b3 2f       	mov	r27, r19
    30a6:	c6 e0       	ldi	r28, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    30a8:	2a 17       	cp	r18, r26
    30aa:	09 f4       	brne	.+2      	; 0x30ae <waiting_buffer_scan_tap+0x42>
    30ac:	45 c0       	rjmp	.+138    	; 0x3138 <waiting_buffer_scan_tap+0xcc>
    30ae:	00 97       	sbiw	r24, 0x00	; 0
    30b0:	21 f0       	breq	.+8      	; 0x30ba <waiting_buffer_scan_tap+0x4e>
    30b2:	7f 3f       	cpi	r23, 0xFF	; 255
    30b4:	21 f4       	brne	.+8      	; 0x30be <waiting_buffer_scan_tap+0x52>
    30b6:	4b 2f       	mov	r20, r27
    30b8:	03 c0       	rjmp	.+6      	; 0x30c0 <waiting_buffer_scan_tap+0x54>
    30ba:	41 e0       	ldi	r20, 0x01	; 1
    30bc:	01 c0       	rjmp	.+2      	; 0x30c0 <waiting_buffer_scan_tap+0x54>
    30be:	40 e0       	ldi	r20, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    30c2:	40 fd       	sbrc	r20, 0
    30c4:	35 c0       	rjmp	.+106    	; 0x3130 <waiting_buffer_scan_tap+0xc4>
    30c6:	c2 9f       	mul	r28, r18
    30c8:	f0 01       	movw	r30, r0
    30ca:	c3 9f       	mul	r28, r19
    30cc:	f0 0d       	add	r31, r0
    30ce:	11 24       	eor	r1, r1
    30d0:	ee 58       	subi	r30, 0x8E	; 142
    30d2:	fe 4f       	sbci	r31, 0xFE	; 254
    30d4:	41 81       	ldd	r20, Z+1	; 0x01
    30d6:	74 13       	cpse	r23, r20
    30d8:	2b c0       	rjmp	.+86     	; 0x3130 <waiting_buffer_scan_tap+0xc4>
    30da:	40 81       	ld	r20, Z
    30dc:	64 13       	cpse	r22, r20
    30de:	28 c0       	rjmp	.+80     	; 0x3130 <waiting_buffer_scan_tap+0xc4>
    30e0:	42 81       	ldd	r20, Z+2	; 0x02
    30e2:	41 11       	cpse	r20, r1
    30e4:	25 c0       	rjmp	.+74     	; 0x3130 <waiting_buffer_scan_tap+0xc4>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    30e6:	43 81       	ldd	r20, Z+3	; 0x03
    30e8:	54 81       	ldd	r21, Z+4	; 0x04
    30ea:	48 17       	cp	r20, r24
    30ec:	59 07       	cpc	r21, r25
    30ee:	10 f4       	brcc	.+4      	; 0x30f4 <waiting_buffer_scan_tap+0x88>
    30f0:	41 50       	subi	r20, 0x01	; 1
    30f2:	51 09       	sbc	r21, r1
    30f4:	48 1b       	sub	r20, r24
    30f6:	59 0b       	sbc	r21, r25
    30f8:	48 3c       	cpi	r20, 0xC8	; 200
    30fa:	51 05       	cpc	r21, r1
    30fc:	c8 f4       	brcc	.+50     	; 0x3130 <waiting_buffer_scan_tap+0xc4>
            tapping_key.tap.count = 1;
    30fe:	80 91 a7 01 	lds	r24, 0x01A7
    3102:	8f 70       	andi	r24, 0x0F	; 15
    3104:	80 61       	ori	r24, 0x10	; 16
    3106:	80 93 a7 01 	sts	0x01A7, r24
            waiting_buffer[i].tap.count = 1;
    310a:	86 e0       	ldi	r24, 0x06	; 6
    310c:	82 9f       	mul	r24, r18
    310e:	f0 01       	movw	r30, r0
    3110:	83 9f       	mul	r24, r19
    3112:	f0 0d       	add	r31, r0
    3114:	11 24       	eor	r1, r1
    3116:	e9 58       	subi	r30, 0x89	; 137
    3118:	fe 4f       	sbci	r31, 0xFE	; 254
    311a:	80 81       	ld	r24, Z
    311c:	8f 70       	andi	r24, 0x0F	; 15
    311e:	80 61       	ori	r24, 0x10	; 16
    3120:	80 83       	st	Z, r24
            process_action(&tapping_key);
    3122:	82 ea       	ldi	r24, 0xA2	; 162
    3124:	91 e0       	ldi	r25, 0x01	; 1
    3126:	0e 94 ab 14 	call	0x2956	; 0x2956 <process_action>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    312a:	cf 91       	pop	r28
            tapping_key.tap.count = 1;
            waiting_buffer[i].tap.count = 1;
            process_action(&tapping_key);

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    312c:	0c 94 07 18 	jmp	0x300e	; 0x300e <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3130:	2f 5f       	subi	r18, 0xFF	; 255
    3132:	3f 4f       	sbci	r19, 0xFF	; 255
    3134:	27 70       	andi	r18, 0x07	; 7
    3136:	b8 cf       	rjmp	.-144    	; 0x30a8 <waiting_buffer_scan_tap+0x3c>
            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
            return;
        }
    }
}
    3138:	cf 91       	pop	r28
    313a:	08 95       	ret

0000313c <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    313c:	cf 92       	push	r12
    313e:	df 92       	push	r13
    3140:	ef 92       	push	r14
    3142:	ff 92       	push	r15
    3144:	0f 93       	push	r16
    3146:	1f 93       	push	r17
    3148:	cf 93       	push	r28
    314a:	df 93       	push	r29
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
    3150:	62 97       	sbiw	r28, 0x12	; 18
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61
    315c:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    315e:	85 e0       	ldi	r24, 0x05	; 5
    3160:	f8 01       	movw	r30, r16
    3162:	de 01       	movw	r26, r28
    3164:	1d 96       	adiw	r26, 0x0d	; 13
    3166:	01 90       	ld	r0, Z+
    3168:	0d 92       	st	X+, r0
    316a:	8a 95       	dec	r24
    316c:	e1 f7       	brne	.-8      	; 0x3166 <process_tapping+0x2a>
    316e:	d8 01       	movw	r26, r16
    3170:	4c 91       	ld	r20, X
    3172:	11 96       	adiw	r26, 0x01	; 1
    3174:	5c 91       	ld	r21, X
    3176:	11 97       	sbiw	r26, 0x01	; 1
    3178:	12 96       	adiw	r26, 0x02	; 2
    317a:	6c 91       	ld	r22, X
    317c:	12 97       	sbiw	r26, 0x02	; 2
    317e:	13 96       	adiw	r26, 0x03	; 3
    3180:	ed 90       	ld	r14, X+
    3182:	fc 90       	ld	r15, X
    3184:	14 97       	sbiw	r26, 0x04	; 4

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    3186:	70 91 a2 01 	lds	r23, 0x01A2
    318a:	e0 91 a3 01 	lds	r30, 0x01A3
    318e:	20 91 a5 01 	lds	r18, 0x01A5
    3192:	30 91 a6 01 	lds	r19, 0x01A6
    3196:	21 15       	cp	r18, r1
    3198:	31 05       	cpc	r19, r1
    319a:	31 f0       	breq	.+12     	; 0x31a8 <process_tapping+0x6c>
    319c:	ef 3f       	cpi	r30, 0xFF	; 255
    319e:	31 f4       	brne	.+12     	; 0x31ac <process_tapping+0x70>
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	7f 3f       	cpi	r23, 0xFF	; 255
    31a4:	19 f4       	brne	.+6      	; 0x31ac <process_tapping+0x70>
    31a6:	03 c0       	rjmp	.+6      	; 0x31ae <process_tapping+0x72>
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	01 c0       	rjmp	.+2      	; 0x31ae <process_tapping+0x72>
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	b8 2f       	mov	r27, r24
    31b0:	b1 70       	andi	r27, 0x01	; 1
    31b2:	cb 2e       	mov	r12, r27
    31b4:	80 fd       	sbrc	r24, 0
    31b6:	6c c1       	rjmp	.+728    	; 0x3490 <process_tapping+0x354>
    31b8:	d0 90 a4 01 	lds	r13, 0x01A4
    31bc:	dd 20       	and	r13, r13
    31be:	09 f4       	brne	.+2      	; 0x31c2 <process_tapping+0x86>
    31c0:	f5 c0       	rjmp	.+490    	; 0x33ac <process_tapping+0x270>
    31c2:	f0 91 a7 01 	lds	r31, 0x01A7
        if (WITHIN_TAPPING_TERM(event)) {
    31c6:	e2 16       	cp	r14, r18
    31c8:	f3 06       	cpc	r15, r19
    31ca:	38 f0       	brcs	.+14     	; 0x31da <process_tapping+0x9e>
    31cc:	c7 01       	movw	r24, r14
    31ce:	82 1b       	sub	r24, r18
    31d0:	93 0b       	sbc	r25, r19
    31d2:	88 3c       	cpi	r24, 0xC8	; 200
    31d4:	91 05       	cpc	r25, r1
    31d6:	48 f0       	brcs	.+18     	; 0x31ea <process_tapping+0xae>
    31d8:	9b c0       	rjmp	.+310    	; 0x3310 <process_tapping+0x1d4>
    31da:	20 95       	com	r18
    31dc:	30 95       	com	r19
    31de:	2e 0d       	add	r18, r14
    31e0:	3f 1d       	adc	r19, r15
    31e2:	28 3c       	cpi	r18, 0xC8	; 200
    31e4:	31 05       	cpc	r19, r1
    31e6:	08 f0       	brcs	.+2      	; 0x31ea <process_tapping+0xae>
    31e8:	93 c0       	rjmp	.+294    	; 0x3310 <process_tapping+0x1d4>
            if (tapping_key.tap.count == 0) {
    31ea:	8f 2f       	mov	r24, r31
    31ec:	80 7f       	andi	r24, 0xF0	; 240
    31ee:	09 f0       	breq	.+2      	; 0x31f2 <process_tapping+0xb6>
    31f0:	52 c0       	rjmp	.+164    	; 0x3296 <process_tapping+0x15a>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    31f2:	e5 13       	cpse	r30, r21
    31f4:	14 c0       	rjmp	.+40     	; 0x321e <process_tapping+0xe2>
    31f6:	74 13       	cpse	r23, r20
    31f8:	12 c0       	rjmp	.+36     	; 0x321e <process_tapping+0xe2>
    31fa:	d6 2e       	mov	r13, r22
    31fc:	61 11       	cpse	r22, r1
    31fe:	0f c0       	rjmp	.+30     	; 0x321e <process_tapping+0xe2>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    3200:	ff 70       	andi	r31, 0x0F	; 15
    3202:	f0 61       	ori	r31, 0x10	; 16
    3204:	f0 93 a7 01 	sts	0x01A7, r31
                    debug_tapping_key();
    3208:	0e 94 28 18 	call	0x3050	; 0x3050 <debug_tapping_key>
                    process_action(&tapping_key);
    320c:	82 ea       	ldi	r24, 0xA2	; 162
    320e:	91 e0       	ldi	r25, 0x01	; 1
    3210:	0e 94 ab 14 	call	0x2956	; 0x2956 <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    3214:	80 91 a7 01 	lds	r24, 0x01A7
    3218:	f8 01       	movw	r30, r16
    321a:	85 83       	std	Z+5, r24	; 0x05
                    // enqueue
                    return false;
    321c:	6c c1       	rjmp	.+728    	; 0x34f6 <process_tapping+0x3ba>
    321e:	ef 28       	or	r14, r15
    3220:	31 f0       	breq	.+12     	; 0x322e <process_tapping+0xf2>
    3222:	5f 3f       	cpi	r21, 0xFF	; 255
    3224:	31 f4       	brne	.+12     	; 0x3232 <process_tapping+0xf6>
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	4f 3f       	cpi	r20, 0xFF	; 255
    322a:	19 f4       	brne	.+6      	; 0x3232 <process_tapping+0xf6>
    322c:	03 c0       	rjmp	.+6      	; 0x3234 <process_tapping+0xf8>
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	01 c0       	rjmp	.+2      	; 0x3234 <process_tapping+0xf8>
    3232:	80 e0       	ldi	r24, 0x00	; 0
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    3234:	80 fd       	sbrc	r24, 0
    3236:	03 c0       	rjmp	.+6      	; 0x323e <process_tapping+0x102>
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	86 27       	eor	r24, r22
    323c:	01 c0       	rjmp	.+2      	; 0x3240 <process_tapping+0x104>
    323e:	80 e0       	ldi	r24, 0x00	; 0
#endif
                /* Process release event of a key pressed before tapping starts
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
    3240:	f8 2f       	mov	r31, r24
    3242:	f1 70       	andi	r31, 0x01	; 1
    3244:	ff 2e       	mov	r15, r31
    3246:	80 ff       	sbrs	r24, 0
    3248:	1c c0       	rjmp	.+56     	; 0x3282 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    324a:	80 91 70 01 	lds	r24, 0x0170
    324e:	20 91 71 01 	lds	r18, 0x0171
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    3252:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    3254:	82 17       	cp	r24, r18
    3256:	09 f4       	brne	.+2      	; 0x325a <process_tapping+0x11e>
    3258:	28 c1       	rjmp	.+592    	; 0x34aa <process_tapping+0x36e>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	38 9f       	mul	r19, r24
    325e:	f0 01       	movw	r30, r0
    3260:	39 9f       	mul	r19, r25
    3262:	f0 0d       	add	r31, r0
    3264:	11 24       	eor	r1, r1
    3266:	ee 58       	subi	r30, 0x8E	; 142
    3268:	fe 4f       	sbci	r31, 0xFE	; 254
    326a:	71 81       	ldd	r23, Z+1	; 0x01
    326c:	57 13       	cpse	r21, r23
    326e:	06 c0       	rjmp	.+12     	; 0x327c <process_tapping+0x140>
    3270:	70 81       	ld	r23, Z
    3272:	47 13       	cpse	r20, r23
    3274:	03 c0       	rjmp	.+6      	; 0x327c <process_tapping+0x140>
    3276:	72 81       	ldd	r23, Z+2	; 0x02
    3278:	67 13       	cpse	r22, r23
    327a:	03 c0       	rjmp	.+6      	; 0x3282 <process_tapping+0x146>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    327c:	01 96       	adiw	r24, 0x01	; 1
    327e:	87 70       	andi	r24, 0x07	; 7
    3280:	e9 cf       	rjmp	.-46     	; 0x3254 <process_tapping+0x118>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    3282:	d6 2e       	mov	r13, r22
    3284:	66 23       	and	r22, r22
    3286:	09 f4       	brne	.+2      	; 0x328a <process_tapping+0x14e>
    3288:	36 c1       	rjmp	.+620    	; 0x34f6 <process_tapping+0x3ba>
                        tapping_key.tap.interrupted = true;
    328a:	80 91 a7 01 	lds	r24, 0x01A7
    328e:	81 60       	ori	r24, 0x01	; 1
    3290:	80 93 a7 01 	sts	0x01A7, r24
    3294:	53 c0       	rjmp	.+166    	; 0x333c <process_tapping+0x200>
                    return false;
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3296:	e5 13       	cpse	r30, r21
    3298:	08 c0       	rjmp	.+16     	; 0x32aa <process_tapping+0x16e>
    329a:	74 13       	cpse	r23, r20
    329c:	06 c0       	rjmp	.+12     	; 0x32aa <process_tapping+0x16e>
    329e:	61 11       	cpse	r22, r1
    32a0:	04 c0       	rjmp	.+8      	; 0x32aa <process_tapping+0x16e>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    32a2:	d8 01       	movw	r26, r16
    32a4:	15 96       	adiw	r26, 0x05	; 5
    32a6:	fc 93       	st	X, r31
    32a8:	ae c0       	rjmp	.+348    	; 0x3406 <process_tapping+0x2ca>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    32aa:	4d 87       	std	Y+13, r20	; 0x0d
    32ac:	5e 87       	std	Y+14, r21	; 0x0e
    32ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    32b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b2:	6a 8b       	std	Y+18, r22	; 0x12
    32b4:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <is_tap_key>
    32b8:	6a 89       	ldd	r22, Y+18	; 0x12
    32ba:	88 23       	and	r24, r24
    32bc:	29 f1       	breq	.+74     	; 0x3308 <process_tapping+0x1cc>
    32be:	d6 2e       	mov	r13, r22
    32c0:	66 23       	and	r22, r22
    32c2:	11 f1       	breq	.+68     	; 0x3308 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    32c4:	20 91 a7 01 	lds	r18, 0x01A7
    32c8:	82 2f       	mov	r24, r18
    32ca:	82 95       	swap	r24
    32cc:	8f 70       	andi	r24, 0x0F	; 15
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	02 97       	sbiw	r24, 0x02	; 2
    32d2:	0c f4       	brge	.+2      	; 0x32d6 <process_tapping+0x19a>
    32d4:	60 c0       	rjmp	.+192    	; 0x3396 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    32d6:	80 91 a2 01 	lds	r24, 0x01A2
    32da:	90 91 a3 01 	lds	r25, 0x01A3
    32de:	98 87       	std	Y+8, r25	; 0x08
    32e0:	8f 83       	std	Y+7, r24	; 0x07
    32e2:	19 86       	std	Y+9, r1	; 0x09
    32e4:	fb 86       	std	Y+11, r15	; 0x0b
    32e6:	ea 86       	std	Y+10, r14	; 0x0a
    32e8:	2c 87       	std	Y+12, r18	; 0x0c
    32ea:	ce 01       	movw	r24, r28
    32ec:	07 96       	adiw	r24, 0x07	; 7
    32ee:	51 c0       	rjmp	.+162    	; 0x3392 <process_tapping+0x256>
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
                debug_tapping_key();
                return false;
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    32f0:	e5 17       	cp	r30, r21
    32f2:	31 f1       	breq	.+76     	; 0x3340 <process_tapping+0x204>
                    keyp->tap = tapping_key.tap;
                    process_action(keyp);
                    tapping_key = (keyrecord_t){};
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    32f4:	4d 87       	std	Y+13, r20	; 0x0d
    32f6:	5e 87       	std	Y+14, r21	; 0x0e
    32f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    32fc:	6a 8b       	std	Y+18, r22	; 0x12
    32fe:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <is_tap_key>
    3302:	6a 89       	ldd	r22, Y+18	; 0x12
    3304:	81 11       	cpse	r24, r1
    3306:	2e c0       	rjmp	.+92     	; 0x3364 <process_tapping+0x228>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    3308:	c8 01       	movw	r24, r16
    330a:	0e 94 ab 14 	call	0x2956	; 0x2956 <process_action>
    330e:	a4 c0       	rjmp	.+328    	; 0x3458 <process_tapping+0x31c>
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    3310:	8f 2f       	mov	r24, r31
    3312:	80 7f       	andi	r24, 0xF0	; 240
    3314:	69 f7       	brne	.-38     	; 0x32f0 <process_tapping+0x1b4>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    3316:	7e 2d       	mov	r23, r14
    3318:	f9 8a       	std	Y+17, r15	; 0x11
    331a:	e8 8a       	std	Y+16, r14	; 0x10
    331c:	89 89       	ldd	r24, Y+17	; 0x11
    331e:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <debug_event>
                process_action(&tapping_key);
    3322:	82 ea       	ldi	r24, 0xA2	; 162
    3324:	91 e0       	ldi	r25, 0x01	; 1
    3326:	0e 94 ab 14 	call	0x2956	; 0x2956 <process_action>
                tapping_key = (keyrecord_t){};
    332a:	e2 ea       	ldi	r30, 0xA2	; 162
    332c:	f1 e0       	ldi	r31, 0x01	; 1
    332e:	86 e0       	ldi	r24, 0x06	; 6
    3330:	df 01       	movw	r26, r30
    3332:	1d 92       	st	X+, r1
    3334:	8a 95       	dec	r24
    3336:	e9 f7       	brne	.-6      	; 0x3332 <process_tapping+0x1f6>
                debug_tapping_key();
    3338:	0e 94 28 18 	call	0x3050	; 0x3050 <debug_tapping_key>
                return false;
    333c:	d1 2c       	mov	r13, r1
    333e:	db c0       	rjmp	.+438    	; 0x34f6 <process_tapping+0x3ba>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3340:	74 13       	cpse	r23, r20
    3342:	d8 cf       	rjmp	.-80     	; 0x32f4 <process_tapping+0x1b8>
    3344:	61 11       	cpse	r22, r1
    3346:	d6 cf       	rjmp	.-84     	; 0x32f4 <process_tapping+0x1b8>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    3348:	d8 01       	movw	r26, r16
    334a:	15 96       	adiw	r26, 0x05	; 5
    334c:	fc 93       	st	X, r31
                    process_action(keyp);
    334e:	c8 01       	movw	r24, r16
    3350:	0e 94 ab 14 	call	0x2956	; 0x2956 <process_action>
                    tapping_key = (keyrecord_t){};
    3354:	e2 ea       	ldi	r30, 0xA2	; 162
    3356:	f1 e0       	ldi	r31, 0x01	; 1
    3358:	86 e0       	ldi	r24, 0x06	; 6
    335a:	df 01       	movw	r26, r30
    335c:	1d 92       	st	X+, r1
    335e:	8a 95       	dec	r24
    3360:	e9 f7       	brne	.-6      	; 0x335c <process_tapping+0x220>
                    return true;
    3362:	c9 c0       	rjmp	.+402    	; 0x34f6 <process_tapping+0x3ba>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    3364:	d6 2e       	mov	r13, r22
    3366:	66 23       	and	r22, r22
    3368:	79 f2       	breq	.-98     	; 0x3308 <process_tapping+0x1cc>
                    if (tapping_key.tap.count > 1) {
    336a:	20 91 a7 01 	lds	r18, 0x01A7
    336e:	82 2f       	mov	r24, r18
    3370:	82 95       	swap	r24
    3372:	8f 70       	andi	r24, 0x0F	; 15
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	02 97       	sbiw	r24, 0x02	; 2
    3378:	74 f0       	brlt	.+28     	; 0x3396 <process_tapping+0x25a>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    337a:	80 91 a2 01 	lds	r24, 0x01A2
    337e:	90 91 a3 01 	lds	r25, 0x01A3
    3382:	9a 83       	std	Y+2, r25	; 0x02
    3384:	89 83       	std	Y+1, r24	; 0x01
    3386:	1b 82       	std	Y+3, r1	; 0x03
    3388:	fd 82       	std	Y+5, r15	; 0x05
    338a:	ec 82       	std	Y+4, r14	; 0x04
    338c:	2e 83       	std	Y+6, r18	; 0x06
    338e:	ce 01       	movw	r24, r28
    3390:	01 96       	adiw	r24, 0x01	; 1
    3392:	0e 94 ab 14 	call	0x2956	; 0x2956 <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last timeout tap(1).\n");
                    }
                    tapping_key = *keyp;
    3396:	86 e0       	ldi	r24, 0x06	; 6
    3398:	f8 01       	movw	r30, r16
    339a:	a2 ea       	ldi	r26, 0xA2	; 162
    339c:	b1 e0       	ldi	r27, 0x01	; 1
    339e:	01 90       	ld	r0, Z+
    33a0:	0d 92       	st	X+, r0
    33a2:	8a 95       	dec	r24
    33a4:	e1 f7       	brne	.-8      	; 0x339e <process_tapping+0x262>
                    waiting_buffer_scan_tap();
    33a6:	0e 94 36 18 	call	0x306c	; 0x306c <waiting_buffer_scan_tap>
    33aa:	6f c0       	rjmp	.+222    	; 0x348a <process_tapping+0x34e>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    33ac:	e2 16       	cp	r14, r18
    33ae:	f3 06       	cpc	r15, r19
    33b0:	28 f0       	brcs	.+10     	; 0x33bc <process_tapping+0x280>
    33b2:	c7 01       	movw	r24, r14
    33b4:	82 1b       	sub	r24, r18
    33b6:	93 0b       	sbc	r25, r19
    33b8:	9c 01       	movw	r18, r24
    33ba:	04 c0       	rjmp	.+8      	; 0x33c4 <process_tapping+0x288>
    33bc:	20 95       	com	r18
    33be:	30 95       	com	r19
    33c0:	2e 0d       	add	r18, r14
    33c2:	3f 1d       	adc	r19, r15
    33c4:	28 3c       	cpi	r18, 0xC8	; 200
    33c6:	31 05       	cpc	r19, r1
    33c8:	08 f0       	brcs	.+2      	; 0x33cc <process_tapping+0x290>
    33ca:	52 c0       	rjmp	.+164    	; 0x3470 <process_tapping+0x334>
            if (event.pressed) {
    33cc:	d6 2e       	mov	r13, r22
    33ce:	66 23       	and	r22, r22
    33d0:	09 f4       	brne	.+2      	; 0x33d4 <process_tapping+0x298>
    33d2:	9a cf       	rjmp	.-204    	; 0x3308 <process_tapping+0x1cc>
                if (IS_TAPPING_KEY(event.key)) {
    33d4:	e5 13       	cpse	r30, r21
    33d6:	2c c0       	rjmp	.+88     	; 0x3430 <process_tapping+0x2f4>
    33d8:	74 13       	cpse	r23, r20
    33da:	2a c0       	rjmp	.+84     	; 0x3430 <process_tapping+0x2f4>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    33dc:	80 91 a7 01 	lds	r24, 0x01A7
    33e0:	80 fd       	sbrc	r24, 0
    33e2:	1d c0       	rjmp	.+58     	; 0x341e <process_tapping+0x2e2>
    33e4:	98 2f       	mov	r25, r24
    33e6:	92 95       	swap	r25
    33e8:	9f 70       	andi	r25, 0x0F	; 15
    33ea:	c9 f0       	breq	.+50     	; 0x341e <process_tapping+0x2e2>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    33ec:	d8 01       	movw	r26, r16
    33ee:	15 96       	adiw	r26, 0x05	; 5
    33f0:	8c 93       	st	X, r24
    33f2:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    33f4:	9f 30       	cpi	r25, 0x0F	; 15
    33f6:	39 f0       	breq	.+14     	; 0x3406 <process_tapping+0x2ca>
    33f8:	9f 5f       	subi	r25, 0xFF	; 255
    33fa:	92 95       	swap	r25
    33fc:	90 7f       	andi	r25, 0xF0	; 240
    33fe:	8f 70       	andi	r24, 0x0F	; 15
    3400:	89 2b       	or	r24, r25
    3402:	15 96       	adiw	r26, 0x05	; 5
    3404:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    3406:	c8 01       	movw	r24, r16
    3408:	0e 94 ab 14 	call	0x2956	; 0x2956 <process_action>
                        tapping_key = *keyp;
    340c:	86 e0       	ldi	r24, 0x06	; 6
    340e:	f8 01       	movw	r30, r16
    3410:	a2 ea       	ldi	r26, 0xA2	; 162
    3412:	b1 e0       	ldi	r27, 0x01	; 1
    3414:	01 90       	ld	r0, Z+
    3416:	0d 92       	st	X+, r0
    3418:	8a 95       	dec	r24
    341a:	e1 f7       	brne	.-8      	; 0x3414 <process_tapping+0x2d8>
    341c:	36 c0       	rjmp	.+108    	; 0x348a <process_tapping+0x34e>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    341e:	86 e0       	ldi	r24, 0x06	; 6
    3420:	f8 01       	movw	r30, r16
    3422:	a2 ea       	ldi	r26, 0xA2	; 162
    3424:	b1 e0       	ldi	r27, 0x01	; 1
    3426:	01 90       	ld	r0, Z+
    3428:	0d 92       	st	X+, r0
    342a:	8a 95       	dec	r24
    342c:	e1 f7       	brne	.-8      	; 0x3426 <process_tapping+0x2ea>
                        return true;
    342e:	63 c0       	rjmp	.+198    	; 0x34f6 <process_tapping+0x3ba>
                    }
                } else if (is_tap_key(event.key)) {
    3430:	4d 87       	std	Y+13, r20	; 0x0d
    3432:	5e 87       	std	Y+14, r21	; 0x0e
    3434:	8d 85       	ldd	r24, Y+13	; 0x0d
    3436:	9e 85       	ldd	r25, Y+14	; 0x0e
    3438:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <is_tap_key>
    343c:	88 23       	and	r24, r24
    343e:	79 f0       	breq	.+30     	; 0x345e <process_tapping+0x322>
                    // Sequential tap can be interfered with other tap key.
                    debug("Tapping: Start with interfering other tap.\n");
                    tapping_key = *keyp;
    3440:	86 e0       	ldi	r24, 0x06	; 6
    3442:	f8 01       	movw	r30, r16
    3444:	a2 ea       	ldi	r26, 0xA2	; 162
    3446:	b1 e0       	ldi	r27, 0x01	; 1
    3448:	01 90       	ld	r0, Z+
    344a:	0d 92       	st	X+, r0
    344c:	8a 95       	dec	r24
    344e:	e1 f7       	brne	.-8      	; 0x3448 <process_tapping+0x30c>
                    waiting_buffer_scan_tap();
    3450:	0e 94 36 18 	call	0x306c	; 0x306c <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3454:	0e 94 28 18 	call	0x3050	; 0x3050 <debug_tapping_key>
                    return true;
    3458:	dd 24       	eor	r13, r13
    345a:	d3 94       	inc	r13
    345c:	4c c0       	rjmp	.+152    	; 0x34f6 <process_tapping+0x3ba>
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    345e:	80 91 a7 01 	lds	r24, 0x01A7
    3462:	81 60       	ori	r24, 0x01	; 1
    3464:	80 93 a7 01 	sts	0x01A7, r24
                    process_action(keyp);
    3468:	c8 01       	movw	r24, r16
    346a:	0e 94 ab 14 	call	0x2956	; 0x2956 <process_action>
                    return true;
    346e:	43 c0       	rjmp	.+134    	; 0x34f6 <process_tapping+0x3ba>
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    3470:	7e 2d       	mov	r23, r14
    3472:	f9 8a       	std	Y+17, r15	; 0x11
    3474:	e8 8a       	std	Y+16, r14	; 0x10
    3476:	89 89       	ldd	r24, Y+17	; 0x11
    3478:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <debug_event>
            tapping_key = (keyrecord_t){};
    347c:	e2 ea       	ldi	r30, 0xA2	; 162
    347e:	f1 e0       	ldi	r31, 0x01	; 1
    3480:	86 e0       	ldi	r24, 0x06	; 6
    3482:	df 01       	movw	r26, r30
    3484:	1d 92       	st	X+, r1
    3486:	8a 95       	dec	r24
    3488:	e9 f7       	brne	.-6      	; 0x3484 <process_tapping+0x348>
            debug_tapping_key();
    348a:	0e 94 28 18 	call	0x3050	; 0x3050 <debug_tapping_key>
            return false;
    348e:	33 c0       	rjmp	.+102    	; 0x34f6 <process_tapping+0x3ba>
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    3490:	66 23       	and	r22, r22
    3492:	09 f4       	brne	.+2      	; 0x3496 <process_tapping+0x35a>
    3494:	39 cf       	rjmp	.-398    	; 0x3308 <process_tapping+0x1cc>
    3496:	4d 87       	std	Y+13, r20	; 0x0d
    3498:	5e 87       	std	Y+14, r21	; 0x0e
    349a:	8d 85       	ldd	r24, Y+13	; 0x0d
    349c:	9e 85       	ldd	r25, Y+14	; 0x0e
    349e:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <is_tap_key>
    34a2:	88 23       	and	r24, r24
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <process_tapping+0x36c>
    34a6:	30 cf       	rjmp	.-416    	; 0x3308 <process_tapping+0x1cc>
    34a8:	cb cf       	rjmp	.-106    	; 0x3440 <process_tapping+0x304>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    34aa:	4d 87       	std	Y+13, r20	; 0x0d
    34ac:	5e 87       	std	Y+14, r21	; 0x0e
    34ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    34b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    34b2:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <layer_switch_get_action>
                    switch (action.kind.id) {
    34b6:	29 2f       	mov	r18, r25
    34b8:	22 95       	swap	r18
    34ba:	2f 70       	andi	r18, 0x0F	; 15
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	22 30       	cpi	r18, 0x02	; 2
    34c0:	31 05       	cpc	r19, r1
    34c2:	2c f4       	brge	.+10     	; 0x34ce <process_tapping+0x392>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    34c4:	9f 70       	andi	r25, 0x0F	; 15
    34c6:	41 f0       	breq	.+16     	; 0x34d8 <process_tapping+0x39c>
    34c8:	81 11       	cpse	r24, r1
    34ca:	06 c0       	rjmp	.+12     	; 0x34d8 <process_tapping+0x39c>
    34cc:	0c c0       	rjmp	.+24     	; 0x34e6 <process_tapping+0x3aa>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    34ce:	24 30       	cpi	r18, 0x04	; 4
    34d0:	31 05       	cpc	r19, r1
    34d2:	2c f4       	brge	.+10     	; 0x34de <process_tapping+0x3a2>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    34d4:	9f 70       	andi	r25, 0x0F	; 15
    34d6:	49 f4       	brne	.+18     	; 0x34ea <process_tapping+0x3ae>
                            if (IS_MOD(action.key.code)) return false;
    34d8:	80 5e       	subi	r24, 0xE0	; 224
    34da:	88 30       	cpi	r24, 0x08	; 8
    34dc:	20 f0       	brcs	.+8      	; 0x34e6 <process_tapping+0x3aa>
                            break;
                    }
                    // Release of key should be process immediately.
                    debug("Tapping: release event of a key pressed before tapping\n");
                    process_action(keyp);
    34de:	c8 01       	movw	r24, r16
    34e0:	0e 94 ab 14 	call	0x2956	; 0x2956 <process_action>
                    return true;
    34e4:	cf 2c       	mov	r12, r15
    34e6:	dc 2c       	mov	r13, r12
    34e8:	06 c0       	rjmp	.+12     	; 0x34f6 <process_tapping+0x3ba>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    34ea:	d8 01       	movw	r26, r16
    34ec:	15 96       	adiw	r26, 0x05	; 5
    34ee:	9c 91       	ld	r25, X
    34f0:	90 7f       	andi	r25, 0xF0	; 240
    34f2:	91 f7       	brne	.-28     	; 0x34d8 <process_tapping+0x39c>
    34f4:	f8 cf       	rjmp	.-16     	; 0x34e6 <process_tapping+0x3aa>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    34f6:	8d 2d       	mov	r24, r13
    34f8:	62 96       	adiw	r28, 0x12	; 18
    34fa:	0f b6       	in	r0, 0x3f	; 63
    34fc:	f8 94       	cli
    34fe:	de bf       	out	0x3e, r29	; 62
    3500:	0f be       	out	0x3f, r0	; 63
    3502:	cd bf       	out	0x3d, r28	; 61
    3504:	df 91       	pop	r29
    3506:	cf 91       	pop	r28
    3508:	1f 91       	pop	r17
    350a:	0f 91       	pop	r16
    350c:	ff 90       	pop	r15
    350e:	ef 90       	pop	r14
    3510:	df 90       	pop	r13
    3512:	cf 90       	pop	r12
    3514:	08 95       	ret

00003516 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    3516:	1f 93       	push	r17
    3518:	cf 93       	push	r28
    351a:	df 93       	push	r29
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
    3520:	2c 97       	sbiw	r28, 0x0c	; 12
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	4f 83       	std	Y+7, r20	; 0x07
    352e:	58 87       	std	Y+8, r21	; 0x08
    3530:	69 87       	std	Y+9, r22	; 0x09
    3532:	7a 87       	std	Y+10, r23	; 0x0a
    3534:	8b 87       	std	Y+11, r24	; 0x0b
    3536:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    3538:	ce 01       	movw	r24, r28
    353a:	07 96       	adiw	r24, 0x07	; 7
    353c:	0e 94 9e 18 	call	0x313c	; 0x313c <process_tapping>
    3540:	88 23       	and	r24, r24
    3542:	c1 f0       	breq	.+48     	; 0x3574 <action_tapping_process+0x5e>
        if (!IS_NOEVENT(record.event)) {
    3544:	2f 81       	ldd	r18, Y+7	; 0x07
    3546:	38 85       	ldd	r19, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3548:	8a 85       	ldd	r24, Y+10	; 0x0a
    354a:	9b 85       	ldd	r25, Y+11	; 0x0b
    354c:	89 2b       	or	r24, r25
    354e:	31 f0       	breq	.+12     	; 0x355c <action_tapping_process+0x46>
    3550:	3f 3f       	cpi	r19, 0xFF	; 255
    3552:	11 f0       	breq	.+4      	; 0x3558 <action_tapping_process+0x42>
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	03 c0       	rjmp	.+6      	; 0x355e <action_tapping_process+0x48>
    3558:	2f 3f       	cpi	r18, 0xFF	; 255
    355a:	e1 f7       	brne	.-8      	; 0x3554 <action_tapping_process+0x3e>
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	81 11       	cpse	r24, r1
    3560:	47 c0       	rjmp	.+142    	; 0x35f0 <action_tapping_process+0xda>
            debug("processed: "); debug_record(record); debug("\n");
    3562:	4f 81       	ldd	r20, Y+7	; 0x07
    3564:	58 85       	ldd	r21, Y+8	; 0x08
    3566:	69 85       	ldd	r22, Y+9	; 0x09
    3568:	7a 85       	ldd	r23, Y+10	; 0x0a
    356a:	8b 85       	ldd	r24, Y+11	; 0x0b
    356c:	9c 85       	ldd	r25, Y+12	; 0x0c
    356e:	0e 94 f7 17 	call	0x2fee	; 0x2fee <debug_record>
    3572:	3e c0       	rjmp	.+124    	; 0x35f0 <action_tapping_process+0xda>
    3574:	86 e0       	ldi	r24, 0x06	; 6
    3576:	fe 01       	movw	r30, r28
    3578:	37 96       	adiw	r30, 0x07	; 7
    357a:	de 01       	movw	r26, r28
    357c:	11 96       	adiw	r26, 0x01	; 1
    357e:	01 90       	ld	r0, Z+
    3580:	0d 92       	st	X+, r0
    3582:	8a 95       	dec	r24
    3584:	e1 f7       	brne	.-8      	; 0x357e <action_tapping_process+0x68>
    3586:	ff 81       	ldd	r31, Y+7	; 0x07
    3588:	e8 85       	ldd	r30, Y+8	; 0x08
    358a:	4a 85       	ldd	r20, Y+10	; 0x0a
    358c:	5b 85       	ldd	r21, Y+11	; 0x0b
    358e:	41 15       	cp	r20, r1
    3590:	51 05       	cpc	r21, r1
    3592:	31 f0       	breq	.+12     	; 0x35a0 <action_tapping_process+0x8a>
    3594:	ef 3f       	cpi	r30, 0xFF	; 255
    3596:	31 f4       	brne	.+12     	; 0x35a4 <action_tapping_process+0x8e>
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	ff 3f       	cpi	r31, 0xFF	; 255
    359c:	19 f4       	brne	.+6      	; 0x35a4 <action_tapping_process+0x8e>
    359e:	03 c0       	rjmp	.+6      	; 0x35a6 <action_tapping_process+0x90>
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	01 c0       	rjmp	.+2      	; 0x35a6 <action_tapping_process+0x90>
    35a4:	80 e0       	ldi	r24, 0x00	; 0
/*
 * Waiting buffer
 */
bool waiting_buffer_enq(keyrecord_t record)
{
    if (IS_NOEVENT(record.event)) {
    35a6:	80 fd       	sbrc	r24, 0
    35a8:	23 c0       	rjmp	.+70     	; 0x35f0 <action_tapping_process+0xda>
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    35aa:	20 91 71 01 	lds	r18, 0x0171
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	c9 01       	movw	r24, r18
    35b2:	01 96       	adiw	r24, 0x01	; 1
    35b4:	87 70       	andi	r24, 0x07	; 7
    35b6:	99 27       	eor	r25, r25
    35b8:	60 91 70 01 	lds	r22, 0x0170
    35bc:	70 e0       	ldi	r23, 0x00	; 0
    35be:	86 17       	cp	r24, r22
    35c0:	97 07       	cpc	r25, r23
    35c2:	f1 f1       	breq	.+124    	; 0x3640 <action_tapping_process+0x12a>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    35c4:	f9 83       	std	Y+1, r31	; 0x01
    35c6:	ea 83       	std	Y+2, r30	; 0x02
    35c8:	5d 83       	std	Y+5, r21	; 0x05
    35ca:	4c 83       	std	Y+4, r20	; 0x04
    35cc:	96 e0       	ldi	r25, 0x06	; 6
    35ce:	92 9f       	mul	r25, r18
    35d0:	d0 01       	movw	r26, r0
    35d2:	93 9f       	mul	r25, r19
    35d4:	b0 0d       	add	r27, r0
    35d6:	11 24       	eor	r1, r1
    35d8:	ae 58       	subi	r26, 0x8E	; 142
    35da:	be 4f       	sbci	r27, 0xFE	; 254
    35dc:	fe 01       	movw	r30, r28
    35de:	31 96       	adiw	r30, 0x01	; 1
    35e0:	01 90       	ld	r0, Z+
    35e2:	0d 92       	st	X+, r0
    35e4:	9a 95       	dec	r25
    35e6:	e1 f7       	brne	.-8      	; 0x35e0 <action_tapping_process+0xca>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    35e8:	80 93 71 01 	sts	0x0171, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    35ec:	0e 94 07 18 	call	0x300e	; 0x300e <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    35f0:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    35f2:	80 91 70 01 	lds	r24, 0x0170
    35f6:	90 91 71 01 	lds	r25, 0x0171
    35fa:	89 17       	cp	r24, r25
    35fc:	79 f1       	breq	.+94     	; 0x365c <action_tapping_process+0x146>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    35fe:	18 9f       	mul	r17, r24
    3600:	c0 01       	movw	r24, r0
    3602:	11 24       	eor	r1, r1
    3604:	8e 58       	subi	r24, 0x8E	; 142
    3606:	9e 4f       	sbci	r25, 0xFE	; 254
    3608:	0e 94 9e 18 	call	0x313c	; 0x313c <process_tapping>
    360c:	88 23       	and	r24, r24
    360e:	31 f1       	breq	.+76     	; 0x365c <action_tapping_process+0x146>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    3610:	e0 91 70 01 	lds	r30, 0x0170
    3614:	1e 9f       	mul	r17, r30
    3616:	f0 01       	movw	r30, r0
    3618:	11 24       	eor	r1, r1
    361a:	ee 58       	subi	r30, 0x8E	; 142
    361c:	fe 4f       	sbci	r31, 0xFE	; 254
    361e:	40 81       	ld	r20, Z
    3620:	51 81       	ldd	r21, Z+1	; 0x01
    3622:	62 81       	ldd	r22, Z+2	; 0x02
    3624:	73 81       	ldd	r23, Z+3	; 0x03
    3626:	84 81       	ldd	r24, Z+4	; 0x04
    3628:	95 81       	ldd	r25, Z+5	; 0x05
    362a:	0e 94 f7 17 	call	0x2fee	; 0x2fee <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    362e:	80 91 70 01 	lds	r24, 0x0170
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	01 96       	adiw	r24, 0x01	; 1
    3636:	87 70       	andi	r24, 0x07	; 7
    3638:	99 27       	eor	r25, r25
    363a:	80 93 70 01 	sts	0x0170, r24
    363e:	d9 cf       	rjmp	.-78     	; 0x35f2 <action_tapping_process+0xdc>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    3640:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    3644:	10 92 71 01 	sts	0x0171, r1
    waiting_buffer_tail = 0;
    3648:	10 92 70 01 	sts	0x0170, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    364c:	e2 ea       	ldi	r30, 0xA2	; 162
    364e:	f1 e0       	ldi	r31, 0x01	; 1
    3650:	86 e0       	ldi	r24, 0x06	; 6
    3652:	df 01       	movw	r26, r30
    3654:	1d 92       	st	X+, r1
    3656:	8a 95       	dec	r24
    3658:	e9 f7       	brne	.-6      	; 0x3654 <action_tapping_process+0x13e>
    365a:	ca cf       	rjmp	.-108    	; 0x35f0 <action_tapping_process+0xda>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    365c:	2c 96       	adiw	r28, 0x0c	; 12
    365e:	0f b6       	in	r0, 0x3f	; 63
    3660:	f8 94       	cli
    3662:	de bf       	out	0x3e, r29	; 62
    3664:	0f be       	out	0x3f, r0	; 63
    3666:	cd bf       	out	0x3d, r28	; 61
    3668:	df 91       	pop	r29
    366a:	cf 91       	pop	r28
    366c:	1f 91       	pop	r17
    366e:	08 95       	ret

00003670 <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    3670:	ef 92       	push	r14
    3672:	ff 92       	push	r15
    3674:	0f 93       	push	r16
    3676:	1f 93       	push	r17
    3678:	cf 93       	push	r28
    367a:	df 93       	push	r29
    367c:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    367e:	00 97       	sbiw	r24, 0x00	; 0
    3680:	09 f4       	brne	.+2      	; 0x3684 <action_macro_play+0x14>
    3682:	6d c0       	rjmp	.+218    	; 0x375e <action_macro_play+0xee>
    3684:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3686:	ee 24       	eor	r14, r14
    3688:	e3 94       	inc	r14
    macro_t macro = END;
    uint8_t interval = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    368a:	ef 01       	movw	r28, r30
    368c:	21 96       	adiw	r28, 0x01	; 1
    368e:	84 91       	lpm	r24, Z
    3690:	84 37       	cpi	r24, 0x74	; 116
    3692:	40 f4       	brcc	.+16     	; 0x36a4 <action_macro_play+0x34>
    3694:	84 30       	cpi	r24, 0x04	; 4
    3696:	08 f0       	brcs	.+2      	; 0x369a <action_macro_play+0x2a>
    3698:	53 c0       	rjmp	.+166    	; 0x3740 <action_macro_play+0xd0>
    369a:	81 30       	cpi	r24, 0x01	; 1
    369c:	81 f0       	breq	.+32     	; 0x36be <action_macro_play+0x4e>
    369e:	82 30       	cpi	r24, 0x02	; 2
    36a0:	21 f1       	breq	.+72     	; 0x36ea <action_macro_play+0x7a>
    36a2:	5d c0       	rjmp	.+186    	; 0x375e <action_macro_play+0xee>
    36a4:	85 37       	cpi	r24, 0x75	; 117
    36a6:	09 f4       	brne	.+2      	; 0x36aa <action_macro_play+0x3a>
    36a8:	45 c0       	rjmp	.+138    	; 0x3734 <action_macro_play+0xc4>
    36aa:	b0 f1       	brcs	.+108    	; 0x3718 <action_macro_play+0xa8>
    36ac:	9c e7       	ldi	r25, 0x7C	; 124
    36ae:	98 0f       	add	r25, r24
    36b0:	90 37       	cpi	r25, 0x70	; 112
    36b2:	08 f0       	brcs	.+2      	; 0x36b6 <action_macro_play+0x46>
    36b4:	54 c0       	rjmp	.+168    	; 0x375e <action_macro_play+0xee>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    36b6:	8f 77       	andi	r24, 0x7F	; 127
    36b8:	0e 94 4e 14 	call	0x289c	; 0x289c <unregister_code>
                break;
    36bc:	43 c0       	rjmp	.+134    	; 0x3744 <action_macro_play+0xd4>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    36be:	8f 01       	movw	r16, r30
    36c0:	0e 5f       	subi	r16, 0xFE	; 254
    36c2:	1f 4f       	sbci	r17, 0xFF	; 255
    36c4:	fe 01       	movw	r30, r28
    36c6:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    36c8:	90 e2       	ldi	r25, 0x20	; 32
    36ca:	98 0f       	add	r25, r24
    36cc:	98 30       	cpi	r25, 0x08	; 8
    36ce:	50 f4       	brcc	.+20     	; 0x36e4 <action_macro_play+0x74>
                    add_weak_mods(MOD_BIT(macro));
    36d0:	87 70       	andi	r24, 0x07	; 7
    36d2:	fe 2d       	mov	r31, r14
    36d4:	01 c0       	rjmp	.+2      	; 0x36d8 <action_macro_play+0x68>
    36d6:	ff 0f       	add	r31, r31
    36d8:	8a 95       	dec	r24
    36da:	ea f7       	brpl	.-6      	; 0x36d6 <action_macro_play+0x66>
    36dc:	8f 2f       	mov	r24, r31
    36de:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <add_weak_mods>
    36e2:	15 c0       	rjmp	.+42     	; 0x370e <action_macro_play+0x9e>
                } else {
                    register_code(macro);
    36e4:	0e 94 86 13 	call	0x270c	; 0x270c <register_code>
    36e8:	12 c0       	rjmp	.+36     	; 0x370e <action_macro_play+0x9e>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    36ea:	8f 01       	movw	r16, r30
    36ec:	0e 5f       	subi	r16, 0xFE	; 254
    36ee:	1f 4f       	sbci	r17, 0xFF	; 255
    36f0:	fe 01       	movw	r30, r28
    36f2:	84 91       	lpm	r24, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    36f4:	90 e2       	ldi	r25, 0x20	; 32
    36f6:	98 0f       	add	r25, r24
    36f8:	98 30       	cpi	r25, 0x08	; 8
    36fa:	58 f4       	brcc	.+22     	; 0x3712 <action_macro_play+0xa2>
                    del_weak_mods(MOD_BIT(macro));
    36fc:	87 70       	andi	r24, 0x07	; 7
    36fe:	fe 2d       	mov	r31, r14
    3700:	01 c0       	rjmp	.+2      	; 0x3704 <action_macro_play+0x94>
    3702:	ff 0f       	add	r31, r31
    3704:	8a 95       	dec	r24
    3706:	ea f7       	brpl	.-6      	; 0x3702 <action_macro_play+0x92>
    3708:	8f 2f       	mov	r24, r31
    370a:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <del_weak_mods>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    370e:	e8 01       	movw	r28, r16
    3710:	19 c0       	rjmp	.+50     	; 0x3744 <action_macro_play+0xd4>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                } else {
                    unregister_code(macro);
    3712:	0e 94 4e 14 	call	0x289c	; 0x289c <unregister_code>
    3716:	fb cf       	rjmp	.-10     	; 0x370e <action_macro_play+0x9e>
                }
                break;
            case WAIT:
                MACRO_READ();
    3718:	cf 01       	movw	r24, r30
    371a:	02 96       	adiw	r24, 0x02	; 2
    371c:	fe 01       	movw	r30, r28
    371e:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    3720:	cc 23       	and	r28, r28
    3722:	61 f0       	breq	.+24     	; 0x373c <action_macro_play+0xcc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3724:	ef e9       	ldi	r30, 0x9F	; 159
    3726:	ff e0       	ldi	r31, 0x0F	; 15
    3728:	31 97       	sbiw	r30, 0x01	; 1
    372a:	f1 f7       	brne	.-4      	; 0x3728 <action_macro_play+0xb8>
    372c:	00 c0       	rjmp	.+0      	; 0x372e <action_macro_play+0xbe>
    372e:	00 00       	nop
    3730:	c1 50       	subi	r28, 0x01	; 1
    3732:	f6 cf       	rjmp	.-20     	; 0x3720 <action_macro_play+0xb0>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    3734:	cf 01       	movw	r24, r30
    3736:	02 96       	adiw	r24, 0x02	; 2
    3738:	fe 01       	movw	r30, r28
    373a:	f4 90       	lpm	r15, Z
    373c:	ec 01       	movw	r28, r24
                dprintf("INTERVAL(%u)\n", interval);
                break;
    373e:	02 c0       	rjmp	.+4      	; 0x3744 <action_macro_play+0xd4>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    3740:	0e 94 86 13 	call	0x270c	; 0x270c <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    3744:	8f 2d       	mov	r24, r15
    3746:	88 23       	and	r24, r24
    3748:	41 f0       	breq	.+16     	; 0x375a <action_macro_play+0xea>
    374a:	ef e9       	ldi	r30, 0x9F	; 159
    374c:	ff e0       	ldi	r31, 0x0F	; 15
    374e:	31 97       	sbiw	r30, 0x01	; 1
    3750:	f1 f7       	brne	.-4      	; 0x374e <action_macro_play+0xde>
    3752:	00 c0       	rjmp	.+0      	; 0x3754 <action_macro_play+0xe4>
    3754:	00 00       	nop
    3756:	81 50       	subi	r24, 0x01	; 1
    3758:	f6 cf       	rjmp	.-20     	; 0x3746 <action_macro_play+0xd6>
    375a:	fe 01       	movw	r30, r28
    375c:	96 cf       	rjmp	.-212    	; 0x368a <action_macro_play+0x1a>
    }
}
    375e:	df 91       	pop	r29
    3760:	cf 91       	pop	r28
    3762:	1f 91       	pop	r17
    3764:	0f 91       	pop	r16
    3766:	ff 90       	pop	r15
    3768:	ef 90       	pop	r14
    376a:	08 95       	ret

0000376c <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    376c:	08 95       	ret

0000376e <default_layer_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    376e:	60 93 ac 01 	sts	0x01AC, r22
    3772:	70 93 ad 01 	sts	0x01AD, r23
    3776:	80 93 ae 01 	sts	0x01AE, r24
    377a:	90 93 af 01 	sts	0x01AF, r25
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    377e:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <clear_keyboard_but_mods>

00003782 <default_layer_or>:
    default_layer_state_set(state);
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    3782:	0f 93       	push	r16
    3784:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    3786:	00 91 ac 01 	lds	r16, 0x01AC
    378a:	10 91 ad 01 	lds	r17, 0x01AD
    378e:	20 91 ae 01 	lds	r18, 0x01AE
    3792:	30 91 af 01 	lds	r19, 0x01AF
    3796:	06 2b       	or	r16, r22
    3798:	17 2b       	or	r17, r23
    379a:	28 2b       	or	r18, r24
    379c:	39 2b       	or	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    379e:	00 93 ac 01 	sts	0x01AC, r16
    37a2:	10 93 ad 01 	sts	0x01AD, r17
    37a6:	20 93 ae 01 	sts	0x01AE, r18
    37aa:	30 93 af 01 	sts	0x01AF, r19

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
    37ae:	1f 91       	pop	r17
    37b0:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    37b2:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <clear_keyboard_but_mods>

000037b6 <default_layer_and>:
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    37b6:	0f 93       	push	r16
    37b8:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    37ba:	00 91 ac 01 	lds	r16, 0x01AC
    37be:	10 91 ad 01 	lds	r17, 0x01AD
    37c2:	20 91 ae 01 	lds	r18, 0x01AE
    37c6:	30 91 af 01 	lds	r19, 0x01AF
    37ca:	06 23       	and	r16, r22
    37cc:	17 23       	and	r17, r23
    37ce:	28 23       	and	r18, r24
    37d0:	39 23       	and	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    37d2:	00 93 ac 01 	sts	0x01AC, r16
    37d6:	10 93 ad 01 	sts	0x01AD, r17
    37da:	20 93 ae 01 	sts	0x01AE, r18
    37de:	30 93 af 01 	sts	0x01AF, r19
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
    37e2:	1f 91       	pop	r17
    37e4:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    37e6:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <clear_keyboard_but_mods>

000037ea <default_layer_xor>:
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    37ea:	0f 93       	push	r16
    37ec:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    37ee:	00 91 ac 01 	lds	r16, 0x01AC
    37f2:	10 91 ad 01 	lds	r17, 0x01AD
    37f6:	20 91 ae 01 	lds	r18, 0x01AE
    37fa:	30 91 af 01 	lds	r19, 0x01AF
    37fe:	06 27       	eor	r16, r22
    3800:	17 27       	eor	r17, r23
    3802:	28 27       	eor	r18, r24
    3804:	39 27       	eor	r19, r25

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3806:	00 93 ac 01 	sts	0x01AC, r16
    380a:	10 93 ad 01 	sts	0x01AD, r17
    380e:	20 93 ae 01 	sts	0x01AE, r18
    3812:	30 93 af 01 	sts	0x01AF, r19
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
}
    3816:	1f 91       	pop	r17
    3818:	0f 91       	pop	r16
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    381a:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <clear_keyboard_but_mods>

0000381e <layer_clear>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    381e:	10 92 a8 01 	sts	0x01A8, r1
    3822:	10 92 a9 01 	sts	0x01A9, r1
    3826:	10 92 aa 01 	sts	0x01AA, r1
    382a:	10 92 ab 01 	sts	0x01AB, r1
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    382e:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <clear_keyboard_but_mods>

00003832 <layer_move>:
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    3832:	41 e0       	ldi	r20, 0x01	; 1
    3834:	50 e0       	ldi	r21, 0x00	; 0
    3836:	60 e0       	ldi	r22, 0x00	; 0
    3838:	70 e0       	ldi	r23, 0x00	; 0
    383a:	04 c0       	rjmp	.+8      	; 0x3844 <layer_move+0x12>
    383c:	44 0f       	add	r20, r20
    383e:	55 1f       	adc	r21, r21
    3840:	66 1f       	adc	r22, r22
    3842:	77 1f       	adc	r23, r23
    3844:	8a 95       	dec	r24
    3846:	d2 f7       	brpl	.-12     	; 0x383c <layer_move+0xa>

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3848:	40 93 a8 01 	sts	0x01A8, r20
    384c:	50 93 a9 01 	sts	0x01A9, r21
    3850:	60 93 aa 01 	sts	0x01AA, r22
    3854:	70 93 ab 01 	sts	0x01AB, r23
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3858:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <clear_keyboard_but_mods>

0000385c <layer_on>:
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    385c:	41 e0       	ldi	r20, 0x01	; 1
    385e:	50 e0       	ldi	r21, 0x00	; 0
    3860:	60 e0       	ldi	r22, 0x00	; 0
    3862:	70 e0       	ldi	r23, 0x00	; 0
    3864:	04 c0       	rjmp	.+8      	; 0x386e <layer_on+0x12>
    3866:	44 0f       	add	r20, r20
    3868:	55 1f       	adc	r21, r21
    386a:	66 1f       	adc	r22, r22
    386c:	77 1f       	adc	r23, r23
    386e:	8a 95       	dec	r24
    3870:	d2 f7       	brpl	.-12     	; 0x3866 <layer_on+0xa>
    3872:	80 91 a8 01 	lds	r24, 0x01A8
    3876:	90 91 a9 01 	lds	r25, 0x01A9
    387a:	a0 91 aa 01 	lds	r26, 0x01AA
    387e:	b0 91 ab 01 	lds	r27, 0x01AB
    3882:	84 2b       	or	r24, r20
    3884:	95 2b       	or	r25, r21
    3886:	a6 2b       	or	r26, r22
    3888:	b7 2b       	or	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    388a:	80 93 a8 01 	sts	0x01A8, r24
    388e:	90 93 a9 01 	sts	0x01A9, r25
    3892:	a0 93 aa 01 	sts	0x01AA, r26
    3896:	b0 93 ab 01 	sts	0x01AB, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    389a:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <clear_keyboard_but_mods>

0000389e <layer_off>:
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    389e:	41 e0       	ldi	r20, 0x01	; 1
    38a0:	50 e0       	ldi	r21, 0x00	; 0
    38a2:	60 e0       	ldi	r22, 0x00	; 0
    38a4:	70 e0       	ldi	r23, 0x00	; 0
    38a6:	04 c0       	rjmp	.+8      	; 0x38b0 <layer_off+0x12>
    38a8:	44 0f       	add	r20, r20
    38aa:	55 1f       	adc	r21, r21
    38ac:	66 1f       	adc	r22, r22
    38ae:	77 1f       	adc	r23, r23
    38b0:	8a 95       	dec	r24
    38b2:	d2 f7       	brpl	.-12     	; 0x38a8 <layer_off+0xa>
    38b4:	40 95       	com	r20
    38b6:	50 95       	com	r21
    38b8:	60 95       	com	r22
    38ba:	70 95       	com	r23
    38bc:	80 91 a8 01 	lds	r24, 0x01A8
    38c0:	90 91 a9 01 	lds	r25, 0x01A9
    38c4:	a0 91 aa 01 	lds	r26, 0x01AA
    38c8:	b0 91 ab 01 	lds	r27, 0x01AB
    38cc:	84 23       	and	r24, r20
    38ce:	95 23       	and	r25, r21
    38d0:	a6 23       	and	r26, r22
    38d2:	b7 23       	and	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    38d4:	80 93 a8 01 	sts	0x01A8, r24
    38d8:	90 93 a9 01 	sts	0x01A9, r25
    38dc:	a0 93 aa 01 	sts	0x01AA, r26
    38e0:	b0 93 ab 01 	sts	0x01AB, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    38e4:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <clear_keyboard_but_mods>

000038e8 <layer_invert>:
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    38e8:	41 e0       	ldi	r20, 0x01	; 1
    38ea:	50 e0       	ldi	r21, 0x00	; 0
    38ec:	60 e0       	ldi	r22, 0x00	; 0
    38ee:	70 e0       	ldi	r23, 0x00	; 0
    38f0:	04 c0       	rjmp	.+8      	; 0x38fa <layer_invert+0x12>
    38f2:	44 0f       	add	r20, r20
    38f4:	55 1f       	adc	r21, r21
    38f6:	66 1f       	adc	r22, r22
    38f8:	77 1f       	adc	r23, r23
    38fa:	8a 95       	dec	r24
    38fc:	d2 f7       	brpl	.-12     	; 0x38f2 <layer_invert+0xa>
    38fe:	80 91 a8 01 	lds	r24, 0x01A8
    3902:	90 91 a9 01 	lds	r25, 0x01A9
    3906:	a0 91 aa 01 	lds	r26, 0x01AA
    390a:	b0 91 ab 01 	lds	r27, 0x01AB
    390e:	84 27       	eor	r24, r20
    3910:	95 27       	eor	r25, r21
    3912:	a6 27       	eor	r26, r22
    3914:	b7 27       	eor	r27, r23

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3916:	80 93 a8 01 	sts	0x01A8, r24
    391a:	90 93 a9 01 	sts	0x01A9, r25
    391e:	a0 93 aa 01 	sts	0x01AA, r26
    3922:	b0 93 ab 01 	sts	0x01AB, r27
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3926:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <clear_keyboard_but_mods>

0000392a <layer_or>:
{
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    392a:	0f 93       	push	r16
    392c:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    392e:	00 91 a8 01 	lds	r16, 0x01A8
    3932:	10 91 a9 01 	lds	r17, 0x01A9
    3936:	20 91 aa 01 	lds	r18, 0x01AA
    393a:	30 91 ab 01 	lds	r19, 0x01AB
    393e:	06 2b       	or	r16, r22
    3940:	17 2b       	or	r17, r23
    3942:	28 2b       	or	r18, r24
    3944:	39 2b       	or	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3946:	00 93 a8 01 	sts	0x01A8, r16
    394a:	10 93 a9 01 	sts	0x01A9, r17
    394e:	20 93 aa 01 	sts	0x01AA, r18
    3952:	30 93 ab 01 	sts	0x01AB, r19
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
    3956:	1f 91       	pop	r17
    3958:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    395a:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <clear_keyboard_but_mods>

0000395e <layer_and>:
void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    395e:	0f 93       	push	r16
    3960:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3962:	00 91 a8 01 	lds	r16, 0x01A8
    3966:	10 91 a9 01 	lds	r17, 0x01A9
    396a:	20 91 aa 01 	lds	r18, 0x01AA
    396e:	30 91 ab 01 	lds	r19, 0x01AB
    3972:	06 23       	and	r16, r22
    3974:	17 23       	and	r17, r23
    3976:	28 23       	and	r18, r24
    3978:	39 23       	and	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    397a:	00 93 a8 01 	sts	0x01A8, r16
    397e:	10 93 a9 01 	sts	0x01A9, r17
    3982:	20 93 aa 01 	sts	0x01AA, r18
    3986:	30 93 ab 01 	sts	0x01AB, r19
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
    398a:	1f 91       	pop	r17
    398c:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    398e:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <clear_keyboard_but_mods>

00003992 <layer_xor>:
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    3992:	0f 93       	push	r16
    3994:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3996:	00 91 a8 01 	lds	r16, 0x01A8
    399a:	10 91 a9 01 	lds	r17, 0x01A9
    399e:	20 91 aa 01 	lds	r18, 0x01AA
    39a2:	30 91 ab 01 	lds	r19, 0x01AB
    39a6:	06 27       	eor	r16, r22
    39a8:	17 27       	eor	r17, r23
    39aa:	28 27       	eor	r18, r24
    39ac:	39 27       	eor	r19, r25

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    39ae:	00 93 a8 01 	sts	0x01A8, r16
    39b2:	10 93 a9 01 	sts	0x01A9, r17
    39b6:	20 93 aa 01 	sts	0x01AA, r18
    39ba:	30 93 ab 01 	sts	0x01AB, r19
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
}
    39be:	1f 91       	pop	r17
    39c0:	0f 91       	pop	r16
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    39c2:	0c 94 b1 17 	jmp	0x2f62	; 0x2f62 <clear_keyboard_but_mods>

000039c6 <layer_debug>:
{
    layer_state_set(layer_state ^ state);
}

void layer_debug(void)
{
    39c6:	08 95       	ret

000039c8 <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    39c8:	cf 92       	push	r12
    39ca:	df 92       	push	r13
    39cc:	ef 92       	push	r14
    39ce:	ff 92       	push	r15
    39d0:	0f 93       	push	r16
    39d2:	1f 93       	push	r17
    39d4:	cf 93       	push	r28
    39d6:	df 93       	push	r29
    39d8:	ec 01       	movw	r28, r24
    action_t action;
    action.code = ACTION_TRANSPARENT;

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    39da:	c0 90 ac 01 	lds	r12, 0x01AC
    39de:	d0 90 ad 01 	lds	r13, 0x01AD
    39e2:	e0 90 ae 01 	lds	r14, 0x01AE
    39e6:	f0 90 af 01 	lds	r15, 0x01AF
    39ea:	80 91 a8 01 	lds	r24, 0x01A8
    39ee:	90 91 a9 01 	lds	r25, 0x01A9
    39f2:	a0 91 aa 01 	lds	r26, 0x01AA
    39f6:	b0 91 ab 01 	lds	r27, 0x01AB
    39fa:	c8 2a       	or	r12, r24
    39fc:	d9 2a       	or	r13, r25
    39fe:	ea 2a       	or	r14, r26
    3a00:	fb 2a       	or	r15, r27
    3a02:	0f e1       	ldi	r16, 0x1F	; 31
    3a04:	10 e0       	ldi	r17, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    3a06:	b7 01       	movw	r22, r14
    3a08:	a6 01       	movw	r20, r12
    3a0a:	00 2e       	mov	r0, r16
    3a0c:	04 c0       	rjmp	.+8      	; 0x3a16 <layer_switch_get_action+0x4e>
    3a0e:	76 95       	lsr	r23
    3a10:	67 95       	ror	r22
    3a12:	57 95       	ror	r21
    3a14:	47 95       	ror	r20
    3a16:	0a 94       	dec	r0
    3a18:	d2 f7       	brpl	.-12     	; 0x3a0e <layer_switch_get_action+0x46>
    3a1a:	40 ff       	sbrs	r20, 0
    3a1c:	07 c0       	rjmp	.+14     	; 0x3a2c <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    3a1e:	be 01       	movw	r22, r28
    3a20:	80 2f       	mov	r24, r16
    3a22:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    3a26:	81 30       	cpi	r24, 0x01	; 1
    3a28:	91 05       	cpc	r25, r1
    3a2a:	39 f4       	brne	.+14     	; 0x3a3a <layer_switch_get_action+0x72>
    3a2c:	01 50       	subi	r16, 0x01	; 1
    3a2e:	11 09       	sbc	r17, r1
    3a30:	50 f7       	brcc	.-44     	; 0x3a06 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    3a32:	be 01       	movw	r22, r28
    3a34:	80 e0       	ldi	r24, 0x00	; 0
    3a36:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    3a3a:	df 91       	pop	r29
    3a3c:	cf 91       	pop	r28
    3a3e:	1f 91       	pop	r17
    3a40:	0f 91       	pop	r16
    3a42:	ff 90       	pop	r15
    3a44:	ef 90       	pop	r14
    3a46:	df 90       	pop	r13
    3a48:	cf 90       	pop	r12
    3a4a:	08 95       	ret

00003a4c <add_key>:

/* key */
void add_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    3a4c:	90 91 0c 01 	lds	r25, 0x010C
    3a50:	99 23       	and	r25, r25
    3a52:	41 f1       	breq	.+80     	; 0x3aa4 <add_key+0x58>
}

#ifdef NKRO_ENABLE
static inline void add_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3a54:	98 2f       	mov	r25, r24
    3a56:	96 95       	lsr	r25
    3a58:	96 95       	lsr	r25
    3a5a:	96 95       	lsr	r25
    3a5c:	9f 30       	cpi	r25, 0x0F	; 15
    3a5e:	88 f4       	brcc	.+34     	; 0x3a82 <add_key+0x36>
        keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
    3a60:	e0 91 0d 01 	lds	r30, 0x010D
    3a64:	f0 91 0e 01 	lds	r31, 0x010E
    3a68:	e9 0f       	add	r30, r25
    3a6a:	f1 1d       	adc	r31, r1
    3a6c:	87 70       	andi	r24, 0x07	; 7
    3a6e:	21 e0       	ldi	r18, 0x01	; 1
    3a70:	30 e0       	ldi	r19, 0x00	; 0
    3a72:	01 c0       	rjmp	.+2      	; 0x3a76 <add_key+0x2a>
    3a74:	22 0f       	add	r18, r18
    3a76:	8a 95       	dec	r24
    3a78:	ea f7       	brpl	.-6      	; 0x3a74 <add_key+0x28>
    3a7a:	81 81       	ldd	r24, Z+1	; 0x01
    3a7c:	82 2b       	or	r24, r18
    3a7e:	81 83       	std	Z+1, r24	; 0x01
    3a80:	08 95       	ret
    } else {
        dprintf("add_key_bit: can't add: %02X\n", code);
    3a82:	90 91 c3 01 	lds	r25, 0x01C3
    3a86:	90 ff       	sbrs	r25, 0
    3a88:	2d c0       	rjmp	.+90     	; 0x3ae4 <add_key+0x98>
    3a8a:	1f 92       	push	r1
    3a8c:	8f 93       	push	r24
    3a8e:	80 e5       	ldi	r24, 0x50	; 80
    3a90:	94 e0       	ldi	r25, 0x04	; 4
    3a92:	9f 93       	push	r25
    3a94:	8f 93       	push	r24
    3a96:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    3a9a:	0f 90       	pop	r0
    3a9c:	0f 90       	pop	r0
    3a9e:	0f 90       	pop	r0
    3aa0:	0f 90       	pop	r0
    3aa2:	08 95       	ret
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3aa4:	40 91 0d 01 	lds	r20, 0x010D
    3aa8:	50 91 0e 01 	lds	r21, 0x010E
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	9f ef       	ldi	r25, 0xFF	; 255
    3ab2:	fa 01       	movw	r30, r20
    3ab4:	e2 0f       	add	r30, r18
    3ab6:	f3 1f       	adc	r31, r19
    3ab8:	62 81       	ldd	r22, Z+2	; 0x02
    3aba:	68 17       	cp	r22, r24
    3abc:	99 f0       	breq	.+38     	; 0x3ae4 <add_key+0x98>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3abe:	9f 3f       	cpi	r25, 0xFF	; 255
    3ac0:	19 f4       	brne	.+6      	; 0x3ac8 <add_key+0x7c>
    3ac2:	61 11       	cpse	r22, r1
    3ac4:	01 c0       	rjmp	.+2      	; 0x3ac8 <add_key+0x7c>
    3ac6:	92 2f       	mov	r25, r18
    3ac8:	2f 5f       	subi	r18, 0xFF	; 255
    3aca:	3f 4f       	sbci	r19, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    3acc:	2e 30       	cpi	r18, 0x0E	; 14
    3ace:	31 05       	cpc	r19, r1
    3ad0:	81 f7       	brne	.-32     	; 0x3ab2 <add_key+0x66>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3ad2:	9f 3f       	cpi	r25, 0xFF	; 255
    3ad4:	39 f0       	breq	.+14     	; 0x3ae4 <add_key+0x98>
            keyboard_report->keys[empty] = code;
    3ad6:	fa 01       	movw	r30, r20
    3ad8:	e9 0f       	add	r30, r25
    3ada:	f1 1d       	adc	r31, r1
    3adc:	97 fd       	sbrc	r25, 7
    3ade:	fa 95       	dec	r31
    3ae0:	82 83       	std	Z+2, r24	; 0x02
    3ae2:	08 95       	ret
    3ae4:	08 95       	ret

00003ae6 <del_key>:
}

void del_key(uint8_t key)
{
#ifdef NKRO_ENABLE
    if (keyboard_nkro) {
    3ae6:	90 91 0c 01 	lds	r25, 0x010C
    3aea:	99 23       	and	r25, r25
    3aec:	49 f1       	breq	.+82     	; 0x3b40 <del_key+0x5a>
    }
}

static inline void del_key_bit(uint8_t code)
{
    if ((code>>3) < KEYBOARD_REPORT_BITS) {
    3aee:	98 2f       	mov	r25, r24
    3af0:	96 95       	lsr	r25
    3af2:	96 95       	lsr	r25
    3af4:	96 95       	lsr	r25
    3af6:	9f 30       	cpi	r25, 0x0F	; 15
    3af8:	90 f4       	brcc	.+36     	; 0x3b1e <del_key+0x38>
        keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
    3afa:	e0 91 0d 01 	lds	r30, 0x010D
    3afe:	f0 91 0e 01 	lds	r31, 0x010E
    3b02:	e9 0f       	add	r30, r25
    3b04:	f1 1d       	adc	r31, r1
    3b06:	87 70       	andi	r24, 0x07	; 7
    3b08:	21 e0       	ldi	r18, 0x01	; 1
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	01 c0       	rjmp	.+2      	; 0x3b10 <del_key+0x2a>
    3b0e:	22 0f       	add	r18, r18
    3b10:	8a 95       	dec	r24
    3b12:	ea f7       	brpl	.-6      	; 0x3b0e <del_key+0x28>
    3b14:	20 95       	com	r18
    3b16:	81 81       	ldd	r24, Z+1	; 0x01
    3b18:	28 23       	and	r18, r24
    3b1a:	21 83       	std	Z+1, r18	; 0x01
    3b1c:	08 95       	ret
    } else {
        dprintf("del_key_bit: can't del: %02X\n", code);
    3b1e:	90 91 c3 01 	lds	r25, 0x01C3
    3b22:	90 ff       	sbrs	r25, 0
    3b24:	1f c0       	rjmp	.+62     	; 0x3b64 <del_key+0x7e>
    3b26:	1f 92       	push	r1
    3b28:	8f 93       	push	r24
    3b2a:	82 e3       	ldi	r24, 0x32	; 50
    3b2c:	94 e0       	ldi	r25, 0x04	; 4
    3b2e:	9f 93       	push	r25
    3b30:	8f 93       	push	r24
    3b32:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    3b36:	0f 90       	pop	r0
    3b38:	0f 90       	pop	r0
    3b3a:	0f 90       	pop	r0
    3b3c:	0f 90       	pop	r0
    3b3e:	08 95       	ret
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3b40:	40 91 0d 01 	lds	r20, 0x010D
    3b44:	50 91 0e 01 	lds	r21, 0x010E
    3b48:	20 e0       	ldi	r18, 0x00	; 0
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	fa 01       	movw	r30, r20
    3b4e:	e2 0f       	add	r30, r18
    3b50:	f3 1f       	adc	r31, r19
    3b52:	92 81       	ldd	r25, Z+2	; 0x02
    3b54:	98 13       	cpse	r25, r24
    3b56:	01 c0       	rjmp	.+2      	; 0x3b5a <del_key+0x74>
            keyboard_report->keys[i] = 0;
    3b58:	12 82       	std	Z+2, r1	; 0x02
    3b5a:	2f 5f       	subi	r18, 0xFF	; 255
    3b5c:	3f 4f       	sbci	r19, 0xFF	; 255
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3b5e:	2e 30       	cpi	r18, 0x0E	; 14
    3b60:	31 05       	cpc	r19, r1
    3b62:	a1 f7       	brne	.-24     	; 0x3b4c <del_key+0x66>
    3b64:	08 95       	ret

00003b66 <clear_keys>:
#endif
    del_key_byte(key);
}

void clear_keys(void)
{
    3b66:	81 e0       	ldi	r24, 0x01	; 1
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    3b6a:	e0 91 0d 01 	lds	r30, 0x010D
    3b6e:	f0 91 0e 01 	lds	r31, 0x010E
    3b72:	e8 0f       	add	r30, r24
    3b74:	f9 1f       	adc	r31, r25
    3b76:	10 82       	st	Z, r1
    3b78:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3b7a:	80 31       	cpi	r24, 0x10	; 16
    3b7c:	91 05       	cpc	r25, r1
    3b7e:	a9 f7       	brne	.-22     	; 0x3b6a <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3b80:	08 95       	ret

00003b82 <add_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
void add_mods(uint8_t mods) { real_mods |= mods; }
    3b82:	90 91 c2 01 	lds	r25, 0x01C2
    3b86:	98 2b       	or	r25, r24
    3b88:	90 93 c2 01 	sts	0x01C2, r25
    3b8c:	08 95       	ret

00003b8e <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3b8e:	80 95       	com	r24
    3b90:	90 91 c2 01 	lds	r25, 0x01C2
    3b94:	98 23       	and	r25, r24
    3b96:	90 93 c2 01 	sts	0x01C2, r25
    3b9a:	08 95       	ret

00003b9c <clear_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
void clear_mods(void) { real_mods = 0; }
    3b9c:	10 92 c2 01 	sts	0x01C2, r1
    3ba0:	08 95       	ret

00003ba2 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3ba2:	90 91 c1 01 	lds	r25, 0x01C1
    3ba6:	98 2b       	or	r25, r24
    3ba8:	90 93 c1 01 	sts	0x01C1, r25
    3bac:	08 95       	ret

00003bae <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    3bae:	80 95       	com	r24
    3bb0:	90 91 c1 01 	lds	r25, 0x01C1
    3bb4:	98 23       	and	r25, r24
    3bb6:	90 93 c1 01 	sts	0x01C1, r25
    3bba:	08 95       	ret

00003bbc <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    3bbc:	10 92 c1 01 	sts	0x01C1, r1
    3bc0:	08 95       	ret

00003bc2 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    3bc2:	80 93 b0 01 	sts	0x01B0, r24
    3bc6:	08 95       	ret

00003bc8 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3bc8:	10 92 b0 01 	sts	0x01B0, r1
    3bcc:	08 95       	ret

00003bce <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3bce:	40 91 0d 01 	lds	r20, 0x010D
    3bd2:	50 91 0e 01 	lds	r21, 0x010E
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    3bda:	80 e0       	ldi	r24, 0x00	; 0
    3bdc:	fa 01       	movw	r30, r20
    3bde:	e2 0f       	add	r30, r18
    3be0:	f3 1f       	adc	r31, r19
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    3be2:	91 81       	ldd	r25, Z+1	; 0x01
    3be4:	91 11       	cpse	r25, r1
            cnt++;
    3be6:	8f 5f       	subi	r24, 0xFF	; 255
    3be8:	2f 5f       	subi	r18, 0xFF	; 255
    3bea:	3f 4f       	sbci	r19, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    3bec:	2f 30       	cpi	r18, 0x0F	; 15
    3bee:	31 05       	cpc	r19, r1
    3bf0:	a9 f7       	brne	.-22     	; 0x3bdc <has_anykey+0xe>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    3bf2:	08 95       	ret

00003bf4 <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    3bf4:	e0 91 0d 01 	lds	r30, 0x010D
    3bf8:	f0 91 0e 01 	lds	r31, 0x010E
    3bfc:	80 91 c2 01 	lds	r24, 0x01C2
    3c00:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    3c02:	e0 91 0d 01 	lds	r30, 0x010D
    3c06:	f0 91 0e 01 	lds	r31, 0x010E
    3c0a:	80 81       	ld	r24, Z
    3c0c:	90 91 c1 01 	lds	r25, 0x01C1
    3c10:	89 2b       	or	r24, r25
    3c12:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    3c14:	90 91 b0 01 	lds	r25, 0x01B0
    3c18:	99 23       	and	r25, r25
    3c1a:	61 f0       	breq	.+24     	; 0x3c34 <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3c1c:	e0 91 0d 01 	lds	r30, 0x010D
    3c20:	f0 91 0e 01 	lds	r31, 0x010E
    3c24:	80 81       	ld	r24, Z
    3c26:	89 2b       	or	r24, r25
    3c28:	80 83       	st	Z, r24
        if (has_anykey()) {
    3c2a:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <has_anykey>
    3c2e:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    3c30:	10 92 b0 01 	sts	0x01B0, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    3c34:	80 91 0d 01 	lds	r24, 0x010D
    3c38:	90 91 0e 01 	lds	r25, 0x010E
    3c3c:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <host_keyboard_send>

00003c40 <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    3c40:	8b 3b       	cpi	r24, 0xBB	; 187
    3c42:	60 f4       	brcc	.+24     	; 0x3c5c <keycode_to_action+0x1c>
    3c44:	88 3a       	cpi	r24, 0xA8	; 168
    3c46:	00 f5       	brcc	.+64     	; 0x3c88 <keycode_to_action+0x48>
    3c48:	85 3a       	cpi	r24, 0xA5	; 165
    3c4a:	a8 f4       	brcc	.+42     	; 0x3c76 <keycode_to_action+0x36>
    3c4c:	84 30       	cpi	r24, 0x04	; 4
    3c4e:	88 f4       	brcc	.+34     	; 0x3c72 <keycode_to_action+0x32>
    3c50:	81 30       	cpi	r24, 0x01	; 1
    3c52:	09 f0       	breq	.+2      	; 0x3c56 <keycode_to_action+0x16>
    3c54:	55 c0       	rjmp	.+170    	; 0x3d00 <keycode_to_action+0xc0>
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	08 95       	ret

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action;
    switch (keycode) {
    3c5c:	80 3e       	cpi	r24, 0xE0	; 224
    3c5e:	08 f4       	brcc	.+2      	; 0x3c62 <keycode_to_action+0x22>
    3c60:	4f c0       	rjmp	.+158    	; 0x3d00 <keycode_to_action+0xc0>
    3c62:	88 3e       	cpi	r24, 0xE8	; 232
    3c64:	30 f0       	brcs	.+12     	; 0x3c72 <keycode_to_action+0x32>
    3c66:	80 3f       	cpi	r24, 0xF0	; 240
    3c68:	08 f4       	brcc	.+2      	; 0x3c6c <keycode_to_action+0x2c>
    3c6a:	4a c0       	rjmp	.+148    	; 0x3d00 <keycode_to_action+0xc0>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	90 65       	ori	r25, 0x50	; 80
            break;
    3c70:	08 95       	ret
{
    action_t action;
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3c72:	90 e0       	ldi	r25, 0x00	; 0
            break;
    3c74:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3c76:	85 3a       	cpi	r24, 0xA5	; 165
    3c78:	09 f4       	brne	.+2      	; 0x3c7c <keycode_to_action+0x3c>
    3c7a:	45 c0       	rjmp	.+138    	; 0x3d06 <keycode_to_action+0xc6>
    3c7c:	86 3a       	cpi	r24, 0xA6	; 166
    3c7e:	09 f0       	breq	.+2      	; 0x3c82 <keycode_to_action+0x42>
    3c80:	45 c0       	rjmp	.+138    	; 0x3d0c <keycode_to_action+0xcc>
    3c82:	82 e8       	ldi	r24, 0x82	; 130
    3c84:	90 e4       	ldi	r25, 0x40	; 64
    3c86:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3c88:	88 3a       	cpi	r24, 0xA8	; 168
    3c8a:	09 f4       	brne	.+2      	; 0x3c8e <keycode_to_action+0x4e>
    3c8c:	42 c0       	rjmp	.+132    	; 0x3d12 <keycode_to_action+0xd2>
    3c8e:	89 3a       	cpi	r24, 0xA9	; 169
    3c90:	09 f4       	brne	.+2      	; 0x3c94 <keycode_to_action+0x54>
    3c92:	42 c0       	rjmp	.+132    	; 0x3d18 <keycode_to_action+0xd8>
    3c94:	8a 3a       	cpi	r24, 0xAA	; 170
    3c96:	09 f4       	brne	.+2      	; 0x3c9a <keycode_to_action+0x5a>
    3c98:	42 c0       	rjmp	.+132    	; 0x3d1e <keycode_to_action+0xde>
    3c9a:	8b 3a       	cpi	r24, 0xAB	; 171
    3c9c:	09 f4       	brne	.+2      	; 0x3ca0 <keycode_to_action+0x60>
    3c9e:	42 c0       	rjmp	.+132    	; 0x3d24 <keycode_to_action+0xe4>
    3ca0:	8c 3a       	cpi	r24, 0xAC	; 172
    3ca2:	09 f4       	brne	.+2      	; 0x3ca6 <keycode_to_action+0x66>
    3ca4:	42 c0       	rjmp	.+132    	; 0x3d2a <keycode_to_action+0xea>
    3ca6:	8d 3a       	cpi	r24, 0xAD	; 173
    3ca8:	09 f4       	brne	.+2      	; 0x3cac <keycode_to_action+0x6c>
    3caa:	42 c0       	rjmp	.+132    	; 0x3d30 <keycode_to_action+0xf0>
    3cac:	80 3b       	cpi	r24, 0xB0	; 176
    3cae:	09 f4       	brne	.+2      	; 0x3cb2 <keycode_to_action+0x72>
    3cb0:	42 c0       	rjmp	.+132    	; 0x3d36 <keycode_to_action+0xf6>
    3cb2:	8e 3a       	cpi	r24, 0xAE	; 174
    3cb4:	09 f4       	brne	.+2      	; 0x3cb8 <keycode_to_action+0x78>
    3cb6:	42 c0       	rjmp	.+132    	; 0x3d3c <keycode_to_action+0xfc>
    3cb8:	8f 3a       	cpi	r24, 0xAF	; 175
    3cba:	09 f4       	brne	.+2      	; 0x3cbe <keycode_to_action+0x7e>
    3cbc:	42 c0       	rjmp	.+132    	; 0x3d42 <keycode_to_action+0x102>
    3cbe:	81 3b       	cpi	r24, 0xB1	; 177
    3cc0:	09 f4       	brne	.+2      	; 0x3cc4 <keycode_to_action+0x84>
    3cc2:	42 c0       	rjmp	.+132    	; 0x3d48 <keycode_to_action+0x108>
    3cc4:	82 3b       	cpi	r24, 0xB2	; 178
    3cc6:	09 f4       	brne	.+2      	; 0x3cca <keycode_to_action+0x8a>
    3cc8:	42 c0       	rjmp	.+132    	; 0x3d4e <keycode_to_action+0x10e>
    3cca:	83 3b       	cpi	r24, 0xB3	; 179
    3ccc:	09 f4       	brne	.+2      	; 0x3cd0 <keycode_to_action+0x90>
    3cce:	42 c0       	rjmp	.+132    	; 0x3d54 <keycode_to_action+0x114>
    3cd0:	84 3b       	cpi	r24, 0xB4	; 180
    3cd2:	09 f4       	brne	.+2      	; 0x3cd6 <keycode_to_action+0x96>
    3cd4:	42 c0       	rjmp	.+132    	; 0x3d5a <keycode_to_action+0x11a>
    3cd6:	85 3b       	cpi	r24, 0xB5	; 181
    3cd8:	09 f4       	brne	.+2      	; 0x3cdc <keycode_to_action+0x9c>
    3cda:	42 c0       	rjmp	.+132    	; 0x3d60 <keycode_to_action+0x120>
    3cdc:	86 3b       	cpi	r24, 0xB6	; 182
    3cde:	09 f4       	brne	.+2      	; 0x3ce2 <keycode_to_action+0xa2>
    3ce0:	42 c0       	rjmp	.+132    	; 0x3d66 <keycode_to_action+0x126>
    3ce2:	87 3b       	cpi	r24, 0xB7	; 183
    3ce4:	09 f4       	brne	.+2      	; 0x3ce8 <keycode_to_action+0xa8>
    3ce6:	42 c0       	rjmp	.+132    	; 0x3d6c <keycode_to_action+0x12c>
    3ce8:	88 3b       	cpi	r24, 0xB8	; 184
    3cea:	09 f4       	brne	.+2      	; 0x3cee <keycode_to_action+0xae>
    3cec:	42 c0       	rjmp	.+132    	; 0x3d72 <keycode_to_action+0x132>
    3cee:	89 3b       	cpi	r24, 0xB9	; 185
    3cf0:	09 f4       	brne	.+2      	; 0x3cf4 <keycode_to_action+0xb4>
    3cf2:	42 c0       	rjmp	.+132    	; 0x3d78 <keycode_to_action+0x138>
    3cf4:	8a 3b       	cpi	r24, 0xBA	; 186
    3cf6:	09 f0       	breq	.+2      	; 0x3cfa <keycode_to_action+0xba>
    3cf8:	42 c0       	rjmp	.+132    	; 0x3d7e <keycode_to_action+0x13e>
    3cfa:	8a e2       	ldi	r24, 0x2A	; 42
    3cfc:	96 e4       	ldi	r25, 0x46	; 70
    3cfe:	08 95       	ret
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        default:
            action.code = ACTION_NO;
    3d00:	80 e0       	ldi	r24, 0x00	; 0
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3d06:	81 e8       	ldi	r24, 0x81	; 129
    3d08:	90 e4       	ldi	r25, 0x40	; 64
    3d0a:	08 95       	ret
    3d0c:	83 e8       	ldi	r24, 0x83	; 131
    3d0e:	90 e4       	ldi	r25, 0x40	; 64
    3d10:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3d12:	82 ee       	ldi	r24, 0xE2	; 226
    3d14:	94 e4       	ldi	r25, 0x44	; 68
    3d16:	08 95       	ret
    3d18:	89 ee       	ldi	r24, 0xE9	; 233
    3d1a:	94 e4       	ldi	r25, 0x44	; 68
    3d1c:	08 95       	ret
    3d1e:	8a ee       	ldi	r24, 0xEA	; 234
    3d20:	94 e4       	ldi	r25, 0x44	; 68
    3d22:	08 95       	ret
    3d24:	85 eb       	ldi	r24, 0xB5	; 181
    3d26:	94 e4       	ldi	r25, 0x44	; 68
    3d28:	08 95       	ret
    3d2a:	86 eb       	ldi	r24, 0xB6	; 182
    3d2c:	94 e4       	ldi	r25, 0x44	; 68
    3d2e:	08 95       	ret
    3d30:	87 eb       	ldi	r24, 0xB7	; 183
    3d32:	94 e4       	ldi	r25, 0x44	; 68
    3d34:	08 95       	ret
    3d36:	8c ec       	ldi	r24, 0xCC	; 204
    3d38:	94 e4       	ldi	r25, 0x44	; 68
    3d3a:	08 95       	ret
    3d3c:	8d ec       	ldi	r24, 0xCD	; 205
    3d3e:	94 e4       	ldi	r25, 0x44	; 68
    3d40:	08 95       	ret
    3d42:	83 e8       	ldi	r24, 0x83	; 131
    3d44:	95 e4       	ldi	r25, 0x45	; 69
    3d46:	08 95       	ret
    3d48:	8a e8       	ldi	r24, 0x8A	; 138
    3d4a:	95 e4       	ldi	r25, 0x45	; 69
    3d4c:	08 95       	ret
    3d4e:	82 e9       	ldi	r24, 0x92	; 146
    3d50:	95 e4       	ldi	r25, 0x45	; 69
    3d52:	08 95       	ret
    3d54:	84 e9       	ldi	r24, 0x94	; 148
    3d56:	95 e4       	ldi	r25, 0x45	; 69
    3d58:	08 95       	ret
    3d5a:	81 e2       	ldi	r24, 0x21	; 33
    3d5c:	96 e4       	ldi	r25, 0x46	; 70
    3d5e:	08 95       	ret
    3d60:	83 e2       	ldi	r24, 0x23	; 35
    3d62:	96 e4       	ldi	r25, 0x46	; 70
    3d64:	08 95       	ret
    3d66:	84 e2       	ldi	r24, 0x24	; 36
    3d68:	96 e4       	ldi	r25, 0x46	; 70
    3d6a:	08 95       	ret
    3d6c:	85 e2       	ldi	r24, 0x25	; 37
    3d6e:	96 e4       	ldi	r25, 0x46	; 70
    3d70:	08 95       	ret
    3d72:	86 e2       	ldi	r24, 0x26	; 38
    3d74:	96 e4       	ldi	r25, 0x46	; 70
    3d76:	08 95       	ret
    3d78:	87 e2       	ldi	r24, 0x27	; 39
    3d7a:	96 e4       	ldi	r25, 0x46	; 70
    3d7c:	08 95       	ret
    3d7e:	80 e0       	ldi	r24, 0x00	; 0
    3d80:	94 e4       	ldi	r25, 0x44	; 68
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    3d82:	08 95       	ret

00003d84 <action_for_key>:

/* converts key to action */
__attribute__ ((weak))
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3d84:	0e 94 b2 08 	call	0x1164	; 0x1164 <keymap_key_to_keycode>
    switch (keycode) {
    3d88:	80 3e       	cpi	r24, 0xE0	; 224
    3d8a:	a8 f4       	brcc	.+42     	; 0x3db6 <action_for_key+0x32>
    3d8c:	80 3c       	cpi	r24, 0xC0	; 192
    3d8e:	00 f5       	brcc	.+64     	; 0x3dd0 <action_for_key+0x4c>
    3d90:	81 33       	cpi	r24, 0x31	; 49
    3d92:	09 f4       	brne	.+2      	; 0x3d96 <action_for_key+0x12>
    3d94:	5c c0       	rjmp	.+184    	; 0x3e4e <action_for_key+0xca>
    3d96:	38 f4       	brcc	.+14     	; 0x3da6 <action_for_key+0x22>
    3d98:	89 32       	cpi	r24, 0x29	; 41
    3d9a:	09 f4       	brne	.+2      	; 0x3d9e <action_for_key+0x1a>
    3d9c:	52 c0       	rjmp	.+164    	; 0x3e42 <action_for_key+0xbe>
    3d9e:	8a 32       	cpi	r24, 0x2A	; 42
    3da0:	09 f4       	brne	.+2      	; 0x3da4 <action_for_key+0x20>
    3da2:	5b c0       	rjmp	.+182    	; 0x3e5a <action_for_key+0xd6>
    3da4:	5f c0       	rjmp	.+190    	; 0x3e64 <action_for_key+0xe0>
    3da6:	89 33       	cpi	r24, 0x39	; 57
    3da8:	b1 f0       	breq	.+44     	; 0x3dd6 <action_for_key+0x52>
    3daa:	82 38       	cpi	r24, 0x82	; 130
    3dac:	a1 f0       	breq	.+40     	; 0x3dd6 <action_for_key+0x52>
    3dae:	85 33       	cpi	r24, 0x35	; 53
    3db0:	09 f4       	brne	.+2      	; 0x3db4 <action_for_key+0x30>
    3db2:	41 c0       	rjmp	.+130    	; 0x3e36 <action_for_key+0xb2>
    3db4:	57 c0       	rjmp	.+174    	; 0x3e64 <action_for_key+0xe0>
    3db6:	83 3e       	cpi	r24, 0xE3	; 227
    3db8:	41 f1       	breq	.+80     	; 0x3e0a <action_for_key+0x86>
    3dba:	28 f4       	brcc	.+10     	; 0x3dc6 <action_for_key+0x42>
    3dbc:	80 3e       	cpi	r24, 0xE0	; 224
    3dbe:	99 f0       	breq	.+38     	; 0x3de6 <action_for_key+0x62>
    3dc0:	82 3e       	cpi	r24, 0xE2	; 226
    3dc2:	b9 f0       	breq	.+46     	; 0x3df2 <action_for_key+0x6e>
    3dc4:	4f c0       	rjmp	.+158    	; 0x3e64 <action_for_key+0xe0>
    3dc6:	86 3e       	cpi	r24, 0xE6	; 230
    3dc8:	31 f1       	breq	.+76     	; 0x3e16 <action_for_key+0x92>
    3dca:	87 3e       	cpi	r24, 0xE7	; 231
    3dcc:	71 f1       	breq	.+92     	; 0x3e2a <action_for_key+0xa6>
    3dce:	4a c0       	rjmp	.+148    	; 0x3e64 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3dd0:	0e 94 c1 08 	call	0x1182	; 0x1182 <keymap_fn_to_action>
    3dd4:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3dd6:	90 91 d8 01 	lds	r25, 0x01D8
    3dda:	90 fd       	sbrc	r25, 0
    3ddc:	02 c0       	rjmp	.+4      	; 0x3de2 <action_for_key+0x5e>
    3dde:	91 ff       	sbrs	r25, 1
    3de0:	41 c0       	rjmp	.+130    	; 0x3e64 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3de2:	80 ee       	ldi	r24, 0xE0	; 224
    3de4:	3f c0       	rjmp	.+126    	; 0x3e64 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3de6:	80 91 d8 01 	lds	r24, 0x01D8
    3dea:	80 ff       	sbrs	r24, 0
    3dec:	fa cf       	rjmp	.-12     	; 0x3de2 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3dee:	89 e3       	ldi	r24, 0x39	; 57
    3df0:	39 c0       	rjmp	.+114    	; 0x3e64 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3df2:	80 91 d8 01 	lds	r24, 0x01D8
    3df6:	82 ff       	sbrs	r24, 2
    3df8:	0c c0       	rjmp	.+24     	; 0x3e12 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3dfa:	80 91 d8 01 	lds	r24, 0x01D8
    3dfe:	84 ff       	sbrs	r24, 4
    3e00:	02 c0       	rjmp	.+4      	; 0x3e06 <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3e02:	80 e0       	ldi	r24, 0x00	; 0
    3e04:	2f c0       	rjmp	.+94     	; 0x3e64 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3e06:	83 ee       	ldi	r24, 0xE3	; 227
    3e08:	2d c0       	rjmp	.+90     	; 0x3e64 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3e0a:	80 91 d8 01 	lds	r24, 0x01D8
    3e0e:	82 ff       	sbrs	r24, 2
    3e10:	f4 cf       	rjmp	.-24     	; 0x3dfa <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3e12:	82 ee       	ldi	r24, 0xE2	; 226
    3e14:	27 c0       	rjmp	.+78     	; 0x3e64 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3e16:	80 91 d8 01 	lds	r24, 0x01D8
    3e1a:	83 ff       	sbrs	r24, 3
    3e1c:	0a c0       	rjmp	.+20     	; 0x3e32 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3e1e:	80 91 d8 01 	lds	r24, 0x01D8
    3e22:	84 fd       	sbrc	r24, 4
    3e24:	ee cf       	rjmp	.-36     	; 0x3e02 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3e26:	87 ee       	ldi	r24, 0xE7	; 231
    3e28:	1d c0       	rjmp	.+58     	; 0x3e64 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3e2a:	80 91 d8 01 	lds	r24, 0x01D8
    3e2e:	83 ff       	sbrs	r24, 3
    3e30:	f6 cf       	rjmp	.-20     	; 0x3e1e <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3e32:	86 ee       	ldi	r24, 0xE6	; 230
    3e34:	17 c0       	rjmp	.+46     	; 0x3e64 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3e36:	80 91 d8 01 	lds	r24, 0x01D8
    3e3a:	85 ff       	sbrs	r24, 5
    3e3c:	06 c0       	rjmp	.+12     	; 0x3e4a <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3e3e:	89 e2       	ldi	r24, 0x29	; 41
    3e40:	11 c0       	rjmp	.+34     	; 0x3e64 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3e42:	80 91 d8 01 	lds	r24, 0x01D8
    3e46:	85 ff       	sbrs	r24, 5
    3e48:	fa cf       	rjmp	.-12     	; 0x3e3e <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3e4a:	85 e3       	ldi	r24, 0x35	; 53
    3e4c:	0b c0       	rjmp	.+22     	; 0x3e64 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3e4e:	80 91 d8 01 	lds	r24, 0x01D8
    3e52:	86 ff       	sbrs	r24, 6
    3e54:	06 c0       	rjmp	.+12     	; 0x3e62 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3e56:	8a e2       	ldi	r24, 0x2A	; 42
    3e58:	05 c0       	rjmp	.+10     	; 0x3e64 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3e5a:	80 91 d8 01 	lds	r24, 0x01D8
    3e5e:	86 ff       	sbrs	r24, 6
    3e60:	fa cf       	rjmp	.-12     	; 0x3e56 <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3e62:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3e64:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <keycode_to_action>
    }
}
    3e68:	08 95       	ret

00003e6a <action_get_macro>:
/* Macro */
__attribute__ ((weak))
const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    return MACRO_NONE;
}
    3e6a:	80 e0       	ldi	r24, 0x00	; 0
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	08 95       	ret

00003e70 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3e70:	08 95       	ret

00003e72 <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    3e72:	90 93 c6 01 	sts	0x01C6, r25
    3e76:	80 93 c5 01 	sts	0x01C5, r24
    3e7a:	08 95       	ret

00003e7c <biton32>:
    if (bits >> 1) { bits >>= 1; n += 1;}
    return n;
}

uint8_t biton32(uint32_t bits)
{
    3e7c:	cf 92       	push	r12
    3e7e:	df 92       	push	r13
    3e80:	ef 92       	push	r14
    3e82:	ff 92       	push	r15
    3e84:	0f 93       	push	r16
    3e86:	1f 93       	push	r17
    uint8_t n = 0;
    if (bits >>16) { bits >>=16; n +=16;}
    3e88:	6c 01       	movw	r12, r24
    3e8a:	ee 24       	eor	r14, r14
    3e8c:	ff 24       	eor	r15, r15
    3e8e:	c1 14       	cp	r12, r1
    3e90:	d1 04       	cpc	r13, r1
    3e92:	e1 04       	cpc	r14, r1
    3e94:	f1 04       	cpc	r15, r1
    3e96:	21 f4       	brne	.+8      	; 0x3ea0 <biton32+0x24>
    3e98:	6b 01       	movw	r12, r22
    3e9a:	7c 01       	movw	r14, r24
    return n;
}

uint8_t biton32(uint32_t bits)
{
    uint8_t n = 0;
    3e9c:	80 e0       	ldi	r24, 0x00	; 0
    3e9e:	01 c0       	rjmp	.+2      	; 0x3ea2 <biton32+0x26>
    if (bits >>16) { bits >>=16; n +=16;}
    3ea0:	80 e1       	ldi	r24, 0x10	; 16
    if (bits >> 8) { bits >>= 8; n += 8;}
    3ea2:	33 27       	eor	r19, r19
    3ea4:	2f 2d       	mov	r18, r15
    3ea6:	1e 2d       	mov	r17, r14
    3ea8:	0d 2d       	mov	r16, r13
    3eaa:	01 15       	cp	r16, r1
    3eac:	11 05       	cpc	r17, r1
    3eae:	21 05       	cpc	r18, r1
    3eb0:	31 05       	cpc	r19, r1
    3eb2:	19 f0       	breq	.+6      	; 0x3eba <biton32+0x3e>
    3eb4:	88 5f       	subi	r24, 0xF8	; 248
    3eb6:	68 01       	movw	r12, r16
    3eb8:	79 01       	movw	r14, r18
    if (bits >> 4) { bits >>= 4; n += 4;}
    3eba:	97 01       	movw	r18, r14
    3ebc:	86 01       	movw	r16, r12
    3ebe:	a4 e0       	ldi	r26, 0x04	; 4
    3ec0:	36 95       	lsr	r19
    3ec2:	27 95       	ror	r18
    3ec4:	17 95       	ror	r17
    3ec6:	07 95       	ror	r16
    3ec8:	aa 95       	dec	r26
    3eca:	d1 f7       	brne	.-12     	; 0x3ec0 <biton32+0x44>
    3ecc:	01 15       	cp	r16, r1
    3ece:	11 05       	cpc	r17, r1
    3ed0:	21 05       	cpc	r18, r1
    3ed2:	31 05       	cpc	r19, r1
    3ed4:	19 f0       	breq	.+6      	; 0x3edc <biton32+0x60>
    3ed6:	8c 5f       	subi	r24, 0xFC	; 252
    3ed8:	68 01       	movw	r12, r16
    3eda:	79 01       	movw	r14, r18
    if (bits >> 2) { bits >>= 2; n += 2;}
    3edc:	97 01       	movw	r18, r14
    3ede:	86 01       	movw	r16, r12
    3ee0:	f2 e0       	ldi	r31, 0x02	; 2
    3ee2:	36 95       	lsr	r19
    3ee4:	27 95       	ror	r18
    3ee6:	17 95       	ror	r17
    3ee8:	07 95       	ror	r16
    3eea:	fa 95       	dec	r31
    3eec:	d1 f7       	brne	.-12     	; 0x3ee2 <biton32+0x66>
    3eee:	01 15       	cp	r16, r1
    3ef0:	11 05       	cpc	r17, r1
    3ef2:	21 05       	cpc	r18, r1
    3ef4:	31 05       	cpc	r19, r1
    3ef6:	19 f0       	breq	.+6      	; 0x3efe <biton32+0x82>
    3ef8:	8e 5f       	subi	r24, 0xFE	; 254
    3efa:	68 01       	movw	r12, r16
    3efc:	79 01       	movw	r14, r18
    if (bits >> 1) { bits >>= 1; n += 1;}
    3efe:	b7 01       	movw	r22, r14
    3f00:	a6 01       	movw	r20, r12
    3f02:	76 95       	lsr	r23
    3f04:	67 95       	ror	r22
    3f06:	57 95       	ror	r21
    3f08:	47 95       	ror	r20
    3f0a:	45 2b       	or	r20, r21
    3f0c:	46 2b       	or	r20, r22
    3f0e:	47 2b       	or	r20, r23
    3f10:	09 f0       	breq	.+2      	; 0x3f14 <biton32+0x98>
    3f12:	8f 5f       	subi	r24, 0xFF	; 255
    return n;
}
    3f14:	1f 91       	pop	r17
    3f16:	0f 91       	pop	r16
    3f18:	ff 90       	pop	r15
    3f1a:	ef 90       	pop	r14
    3f1c:	df 90       	pop	r13
    3f1e:	cf 90       	pop	r12
    3f20:	08 95       	ret

00003f22 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3f22:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3f24:	98 2f       	mov	r25, r24
    3f26:	9c 7c       	andi	r25, 0xCC	; 204
    3f28:	96 95       	lsr	r25
    3f2a:	96 95       	lsr	r25
    3f2c:	83 73       	andi	r24, 0x33	; 51
    3f2e:	44 e0       	ldi	r20, 0x04	; 4
    3f30:	84 9f       	mul	r24, r20
    3f32:	90 01       	movw	r18, r0
    3f34:	11 24       	eor	r1, r1
    3f36:	92 2b       	or	r25, r18
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3f38:	89 2f       	mov	r24, r25
    3f3a:	8a 7a       	andi	r24, 0xAA	; 170
    3f3c:	86 95       	lsr	r24
    3f3e:	95 75       	andi	r25, 0x55	; 85
    3f40:	99 0f       	add	r25, r25
    return bits;
}
    3f42:	89 2b       	or	r24, r25
    3f44:	08 95       	ret

00003f46 <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3f46:	1f 93       	push	r17
    3f48:	cf 93       	push	r28
    3f4a:	df 93       	push	r29
    3f4c:	1f 92       	push	r1
    3f4e:	cd b7       	in	r28, 0x3d	; 61
    3f50:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    3f52:	99 83       	std	Y+1, r25	; 0x01
    3f54:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <bitrev>
    3f58:	18 2f       	mov	r17, r24
    3f5a:	99 81       	ldd	r25, Y+1	; 0x01
    3f5c:	89 2f       	mov	r24, r25
    3f5e:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <bitrev>
    3f62:	21 2f       	mov	r18, r17
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	32 2f       	mov	r19, r18
    3f68:	22 27       	eor	r18, r18
    return bits;
}
    3f6a:	a9 01       	movw	r20, r18
    3f6c:	48 2b       	or	r20, r24
    3f6e:	ca 01       	movw	r24, r20
    3f70:	0f 90       	pop	r0
    3f72:	df 91       	pop	r29
    3f74:	cf 91       	pop	r28
    3f76:	1f 91       	pop	r17
    3f78:	08 95       	ret

00003f7a <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    3f7a:	80 91 dd 01 	lds	r24, 0x01DD
    3f7e:	84 30       	cpi	r24, 0x04	; 4
    3f80:	09 f1       	breq	.+66     	; 0x3fc4 <suspend_power_down+0x4a>
#endif
    wdt_timeout = wdto;
    3f82:	10 92 c4 01 	sts	0x01C4, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    3f86:	20 e4       	ldi	r18, 0x40	; 64
    3f88:	88 e1       	ldi	r24, 0x18	; 24
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	0f b6       	in	r0, 0x3f	; 63
    3f8e:	f8 94       	cli
    3f90:	a8 95       	wdr
    3f92:	80 93 60 00 	sts	0x0060, r24
    3f96:	0f be       	out	0x3f, r0	; 63
    3f98:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    3f9c:	83 b7       	in	r24, 0x33	; 51
    3f9e:	81 7f       	andi	r24, 0xF1	; 241
    3fa0:	84 60       	ori	r24, 0x04	; 4
    3fa2:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    3fa4:	83 b7       	in	r24, 0x33	; 51
    3fa6:	81 60       	ori	r24, 0x01	; 1
    3fa8:	83 bf       	out	0x33, r24	; 51
    sei();
    3faa:	78 94       	sei
    sleep_cpu();
    3fac:	88 95       	sleep
    sleep_disable();
    3fae:	83 b7       	in	r24, 0x33	; 51
    3fb0:	8e 7f       	andi	r24, 0xFE	; 254
    3fb2:	83 bf       	out	0x33, r24	; 51

    // Disable watchdog after sleep
    wdt_disable();
    3fb4:	88 e1       	ldi	r24, 0x18	; 24
    3fb6:	0f b6       	in	r0, 0x3f	; 63
    3fb8:	f8 94       	cli
    3fba:	80 93 60 00 	sts	0x0060, r24
    3fbe:	10 92 60 00 	sts	0x0060, r1
    3fc2:	0f be       	out	0x3f, r0	; 63
    3fc4:	08 95       	ret

00003fc6 <suspend_wakeup_condition>:
{
    power_down(WDTO_15MS);
}

bool suspend_wakeup_condition(void)
{
    3fc6:	cf 93       	push	r28
    matrix_power_up();
    3fc8:	0e 94 b0 08 	call	0x1160	; 0x1160 <matrix_power_up>
    matrix_scan();
    3fcc:	0e 94 ef 08 	call	0x11de	; 0x11de <matrix_scan>
    matrix_power_down();
    3fd0:	0e 94 b1 08 	call	0x1162	; 0x1162 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3fd4:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3fd6:	8c 2f       	mov	r24, r28
    3fd8:	0e 94 19 0a 	call	0x1432	; 0x1432 <matrix_get_row>
    3fdc:	89 2b       	or	r24, r25
    3fde:	29 f4       	brne	.+10     	; 0x3fea <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3fe0:	cf 5f       	subi	r28, 0xFF	; 255
    3fe2:	c5 30       	cpi	r28, 0x05	; 5
    3fe4:	c1 f7       	brne	.-16     	; 0x3fd6 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	01 c0       	rjmp	.+2      	; 0x3fec <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    3fec:	cf 91       	pop	r28
    3fee:	08 95       	ret

00003ff0 <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    3ff0:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <clear_keyboard>

00003ff4 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3ff4:	1f 92       	push	r1
    3ff6:	0f 92       	push	r0
    3ff8:	0f b6       	in	r0, 0x3f	; 63
    3ffa:	0f 92       	push	r0
    3ffc:	11 24       	eor	r1, r1
    3ffe:	8f 93       	push	r24
    4000:	9f 93       	push	r25
    4002:	af 93       	push	r26
    4004:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    4006:	80 91 c4 01 	lds	r24, 0x01C4
    400a:	81 11       	cpse	r24, r1
    400c:	13 c0       	rjmp	.+38     	; 0x4034 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    400e:	80 91 c7 01 	lds	r24, 0x01C7
    4012:	90 91 c8 01 	lds	r25, 0x01C8
    4016:	a0 91 c9 01 	lds	r26, 0x01C9
    401a:	b0 91 ca 01 	lds	r27, 0x01CA
    401e:	41 96       	adiw	r24, 0x11	; 17
    4020:	a1 1d       	adc	r26, r1
    4022:	b1 1d       	adc	r27, r1
    4024:	80 93 c7 01 	sts	0x01C7, r24
    4028:	90 93 c8 01 	sts	0x01C8, r25
    402c:	a0 93 c9 01 	sts	0x01C9, r26
    4030:	b0 93 ca 01 	sts	0x01CA, r27
            break;
        default:
            ;
    }
}
    4034:	bf 91       	pop	r27
    4036:	af 91       	pop	r26
    4038:	9f 91       	pop	r25
    403a:	8f 91       	pop	r24
    403c:	0f 90       	pop	r0
    403e:	0f be       	out	0x3f, r0	; 63
    4040:	0f 90       	pop	r0
    4042:	1f 90       	pop	r1
    4044:	18 95       	reti

00004046 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    4046:	82 e0       	ldi	r24, 0x02	; 2
    4048:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    404a:	93 e0       	ldi	r25, 0x03	; 3
    404c:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    404e:	9a ef       	ldi	r25, 0xFA	; 250
    4050:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    4052:	80 93 6e 00 	sts	0x006E, r24
    4056:	08 95       	ret

00004058 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    4058:	2f b7       	in	r18, 0x3f	; 63
    cli();
    405a:	f8 94       	cli
    t = timer_count;
    405c:	80 91 c7 01 	lds	r24, 0x01C7
    4060:	90 91 c8 01 	lds	r25, 0x01C8
    4064:	a0 91 c9 01 	lds	r26, 0x01C9
    4068:	b0 91 ca 01 	lds	r27, 0x01CA
    SREG = sreg;
    406c:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    406e:	08 95       	ret

00004070 <timer_elapsed>:
    return t;
}

inline
uint16_t timer_elapsed(uint16_t last)
{
    4070:	cf 92       	push	r12
    4072:	df 92       	push	r13
    4074:	ef 92       	push	r14
    4076:	ff 92       	push	r15
    4078:	0f 93       	push	r16
    407a:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    407c:	2f b7       	in	r18, 0x3f	; 63
    cli();
    407e:	f8 94       	cli
    t = timer_count;
    4080:	40 91 c7 01 	lds	r20, 0x01C7
    4084:	50 91 c8 01 	lds	r21, 0x01C8
    4088:	60 91 c9 01 	lds	r22, 0x01C9
    408c:	70 91 ca 01 	lds	r23, 0x01CA
    SREG = sreg;
    4090:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    4092:	6a 01       	movw	r12, r20
    4094:	7b 01       	movw	r14, r22
    4096:	ee 24       	eor	r14, r14
    4098:	ff 24       	eor	r15, r15
    409a:	8c 01       	movw	r16, r24
    409c:	20 e0       	ldi	r18, 0x00	; 0
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	c0 16       	cp	r12, r16
    40a2:	d1 06       	cpc	r13, r17
    40a4:	e2 06       	cpc	r14, r18
    40a6:	f3 06       	cpc	r15, r19
    40a8:	10 f4       	brcc	.+4      	; 0x40ae <timer_elapsed+0x3e>
    40aa:	41 50       	subi	r20, 0x01	; 1
    40ac:	51 09       	sbc	r21, r1
    40ae:	48 1b       	sub	r20, r24
    40b0:	59 0b       	sbc	r21, r25
}
    40b2:	ca 01       	movw	r24, r20
    40b4:	1f 91       	pop	r17
    40b6:	0f 91       	pop	r16
    40b8:	ff 90       	pop	r15
    40ba:	ef 90       	pop	r14
    40bc:	df 90       	pop	r13
    40be:	cf 90       	pop	r12
    40c0:	08 95       	ret

000040c2 <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    40c2:	1f 92       	push	r1
    40c4:	0f 92       	push	r0
    40c6:	0f b6       	in	r0, 0x3f	; 63
    40c8:	0f 92       	push	r0
    40ca:	11 24       	eor	r1, r1
    40cc:	8f 93       	push	r24
    40ce:	9f 93       	push	r25
    40d0:	af 93       	push	r26
    40d2:	bf 93       	push	r27
    timer_count++;
    40d4:	80 91 c7 01 	lds	r24, 0x01C7
    40d8:	90 91 c8 01 	lds	r25, 0x01C8
    40dc:	a0 91 c9 01 	lds	r26, 0x01C9
    40e0:	b0 91 ca 01 	lds	r27, 0x01CA
    40e4:	01 96       	adiw	r24, 0x01	; 1
    40e6:	a1 1d       	adc	r26, r1
    40e8:	b1 1d       	adc	r27, r1
    40ea:	80 93 c7 01 	sts	0x01C7, r24
    40ee:	90 93 c8 01 	sts	0x01C8, r25
    40f2:	a0 93 c9 01 	sts	0x01C9, r26
    40f6:	b0 93 ca 01 	sts	0x01CA, r27
}
    40fa:	bf 91       	pop	r27
    40fc:	af 91       	pop	r26
    40fe:	9f 91       	pop	r25
    4100:	8f 91       	pop	r24
    4102:	0f 90       	pop	r0
    4104:	0f be       	out	0x3f, r0	; 63
    4106:	0f 90       	pop	r0
    4108:	1f 90       	pop	r1
    410a:	18 95       	reti

0000410c <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    410c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <USB_Disable>
    cli();
    4110:	f8 94       	cli
    4112:	2f ef       	ldi	r18, 0xFF	; 255
    4114:	87 ea       	ldi	r24, 0xA7	; 167
    4116:	91 e6       	ldi	r25, 0x61	; 97
    4118:	21 50       	subi	r18, 0x01	; 1
    411a:	80 40       	sbci	r24, 0x00	; 0
    411c:	90 40       	sbci	r25, 0x00	; 0
    411e:	e1 f7       	brne	.-8      	; 0x4118 <bootloader_jump+0xc>
    4120:	00 c0       	rjmp	.+0      	; 0x4122 <bootloader_jump+0x16>
    4122:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    4124:	87 e0       	ldi	r24, 0x07	; 7
    4126:	90 eb       	ldi	r25, 0xB0	; 176
    4128:	dc 01       	movw	r26, r24
    412a:	80 93 e6 01 	sts	0x01E6, r24
    412e:	90 93 e7 01 	sts	0x01E7, r25
    4132:	a0 93 e8 01 	sts	0x01E8, r26
    4136:	b0 93 e9 01 	sts	0x01E9, r27
    wdt_enable(WDTO_250MS);
    413a:	2c e0       	ldi	r18, 0x0C	; 12
    413c:	88 e1       	ldi	r24, 0x18	; 24
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	0f b6       	in	r0, 0x3f	; 63
    4142:	f8 94       	cli
    4144:	a8 95       	wdr
    4146:	80 93 60 00 	sts	0x0060, r24
    414a:	0f be       	out	0x3f, r0	; 63
    414c:	20 93 60 00 	sts	0x0060, r18
    4150:	ff cf       	rjmp	.-2      	; 0x4150 <bootloader_jump+0x44>

00004152 <scan_keycode>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_keycode(uint8_t keycode)
{
    4152:	cf 92       	push	r12
    4154:	df 92       	push	r13
    4156:	ef 92       	push	r14
    4158:	ff 92       	push	r15
    415a:	0f 93       	push	r16
    415c:	1f 93       	push	r17
    415e:	cf 93       	push	r28
    4160:	df 93       	push	r29
    4162:	c8 2e       	mov	r12, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    4164:	d1 2c       	mov	r13, r1
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    4166:	01 e0       	ldi	r16, 0x01	; 1
    4168:	10 e0       	ldi	r17, 0x00	; 0
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    416a:	8d 2d       	mov	r24, r13
    416c:	0e 94 19 0a 	call	0x1432	; 0x1432 <matrix_get_row>
    4170:	7c 01       	movw	r14, r24
    4172:	c0 e0       	ldi	r28, 0x00	; 0
    4174:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    4176:	98 01       	movw	r18, r16
    4178:	0c 2e       	mov	r0, r28
    417a:	02 c0       	rjmp	.+4      	; 0x4180 <scan_keycode+0x2e>
    417c:	22 0f       	add	r18, r18
    417e:	33 1f       	adc	r19, r19
    4180:	0a 94       	dec	r0
    4182:	e2 f7       	brpl	.-8      	; 0x417c <scan_keycode+0x2a>
    4184:	2e 21       	and	r18, r14
    4186:	3f 21       	and	r19, r15
    4188:	23 2b       	or	r18, r19
    418a:	29 f4       	brne	.+10     	; 0x4196 <scan_keycode+0x44>
    418c:	21 96       	adiw	r28, 0x01	; 1

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    418e:	ce 30       	cpi	r28, 0x0E	; 14
    4190:	d1 05       	cpc	r29, r1
    4192:	89 f7       	brne	.-30     	; 0x4176 <scan_keycode+0x24>
    4194:	09 c0       	rjmp	.+18     	; 0x41a8 <scan_keycode+0x56>
            if (matrix_row & ((matrix_row_t)1<<c)) {
                if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
    4196:	6c 2f       	mov	r22, r28
    4198:	7d 2d       	mov	r23, r13
    419a:	80 e0       	ldi	r24, 0x00	; 0
    419c:	0e 94 b2 08 	call	0x1164	; 0x1164 <keymap_key_to_keycode>
    41a0:	c8 12       	cpse	r12, r24
    41a2:	f4 cf       	rjmp	.-24     	; 0x418c <scan_keycode+0x3a>
                    return true;
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	05 c0       	rjmp	.+10     	; 0x41b2 <scan_keycode+0x60>
    }
}

static bool scan_keycode(uint8_t keycode)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    41a8:	d3 94       	inc	r13
    41aa:	85 e0       	ldi	r24, 0x05	; 5
    41ac:	d8 12       	cpse	r13, r24
    41ae:	dd cf       	rjmp	.-70     	; 0x416a <scan_keycode+0x18>
                    return true;
                }
            }
        }
    }
    return false;
    41b0:	80 e0       	ldi	r24, 0x00	; 0
}
    41b2:	df 91       	pop	r29
    41b4:	cf 91       	pop	r28
    41b6:	1f 91       	pop	r17
    41b8:	0f 91       	pop	r16
    41ba:	ff 90       	pop	r15
    41bc:	ef 90       	pop	r14
    41be:	df 90       	pop	r13
    41c0:	cf 90       	pop	r12
    41c2:	08 95       	ret

000041c4 <bootmagic_scan_keycode>:

bool bootmagic_scan_keycode(uint8_t keycode)
{
    41c4:	cf 93       	push	r28
    41c6:	c8 2f       	mov	r28, r24
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
    41c8:	8c e2       	ldi	r24, 0x2C	; 44
    41ca:	0e 94 a9 20 	call	0x4152	; 0x4152 <scan_keycode>
    41ce:	88 23       	and	r24, r24
    41d0:	21 f0       	breq	.+8      	; 0x41da <bootmagic_scan_keycode+0x16>

    return scan_keycode(keycode);
    41d2:	8c 2f       	mov	r24, r28
}
    41d4:	cf 91       	pop	r28

bool bootmagic_scan_keycode(uint8_t keycode)
{
    if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;

    return scan_keycode(keycode);
    41d6:	0c 94 a9 20 	jmp	0x4152	; 0x4152 <scan_keycode>
}
    41da:	80 e0       	ldi	r24, 0x00	; 0
    41dc:	cf 91       	pop	r28
    41de:	08 95       	ret

000041e0 <bootmagic>:
#include "eeconfig.h"
#include "bootmagic.h"


void bootmagic(void)
{
    41e0:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    41e2:	0e 94 3d 22 	call	0x447a	; 0x447a <eeconfig_is_enabled>
    41e6:	81 11       	cpse	r24, r1
    41e8:	02 c0       	rjmp	.+4      	; 0x41ee <bootmagic+0xe>
        eeconfig_init();
    41ea:	0e 94 23 22 	call	0x4446	; 0x4446 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("boogmagic scan: ... ");
    41ee:	85 e7       	ldi	r24, 0x75	; 117
    41f0:	94 e0       	ldi	r25, 0x04	; 4
    41f2:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); _delay_ms(10); }
    41f6:	c5 e6       	ldi	r28, 0x65	; 101
    41f8:	c1 50       	subi	r28, 0x01	; 1
    41fa:	49 f0       	breq	.+18     	; 0x420e <bootmagic+0x2e>
    41fc:	0e 94 ef 08 	call	0x11de	; 0x11de <matrix_scan>
    4200:	8f e3       	ldi	r24, 0x3F	; 63
    4202:	9c e9       	ldi	r25, 0x9C	; 156
    4204:	01 97       	sbiw	r24, 0x01	; 1
    4206:	f1 f7       	brne	.-4      	; 0x4204 <bootmagic+0x24>
    4208:	00 c0       	rjmp	.+0      	; 0x420a <bootmagic+0x2a>
    420a:	00 00       	nop
    420c:	f5 cf       	rjmp	.-22     	; 0x41f8 <bootmagic+0x18>
    print("done.\n");
    420e:	8e e6       	ldi	r24, 0x6E	; 110
    4210:	94 e0       	ldi	r25, 0x04	; 4
    4212:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
    4216:	89 e2       	ldi	r24, 0x29	; 41
    4218:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    421c:	81 11       	cpse	r24, r1
    421e:	11 c1       	rjmp	.+546    	; 0x4442 <bootmagic+0x262>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    4220:	8a e2       	ldi	r24, 0x2A	; 42
    4222:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    4226:	81 11       	cpse	r24, r1
        eeconfig_init();
    4228:	0e 94 23 22 	call	0x4446	; 0x4446 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
    422c:	85 e0       	ldi	r24, 0x05	; 5
    422e:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    4232:	81 11       	cpse	r24, r1
        bootloader_jump();
    4234:	0e 94 86 20 	call	0x410c	; 0x410c <bootloader_jump>
    }

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    4238:	0e 94 48 22 	call	0x4490	; 0x4490 <eeconfig_read_debug>
    423c:	80 93 c3 01 	sts	0x01C3, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    4240:	87 e0       	ldi	r24, 0x07	; 7
    4242:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    4246:	88 23       	and	r24, r24
    4248:	99 f1       	breq	.+102    	; 0x42b0 <bootmagic+0xd0>
        if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    424a:	8b e1       	ldi	r24, 0x1B	; 27
    424c:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    4250:	88 23       	and	r24, r24
    4252:	51 f0       	breq	.+20     	; 0x4268 <bootmagic+0x88>
            debug_config.matrix = !debug_config.matrix;
    4254:	90 91 c3 01 	lds	r25, 0x01C3
    4258:	91 fb       	bst	r25, 1
    425a:	88 27       	eor	r24, r24
    425c:	80 f9       	bld	r24, 0
    425e:	21 e0       	ldi	r18, 0x01	; 1
    4260:	82 27       	eor	r24, r18
    4262:	80 fb       	bst	r24, 0
    4264:	91 f9       	bld	r25, 1
    4266:	22 c0       	rjmp	.+68     	; 0x42ac <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    4268:	8e e0       	ldi	r24, 0x0E	; 14
    426a:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    426e:	88 23       	and	r24, r24
    4270:	51 f0       	breq	.+20     	; 0x4286 <bootmagic+0xa6>
            debug_config.keyboard = !debug_config.keyboard;
    4272:	90 91 c3 01 	lds	r25, 0x01C3
    4276:	92 fb       	bst	r25, 2
    4278:	88 27       	eor	r24, r24
    427a:	80 f9       	bld	r24, 0
    427c:	21 e0       	ldi	r18, 0x01	; 1
    427e:	82 27       	eor	r24, r18
    4280:	80 fb       	bst	r24, 0
    4282:	92 f9       	bld	r25, 2
    4284:	13 c0       	rjmp	.+38     	; 0x42ac <bootmagic+0xcc>
        } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    4286:	80 e1       	ldi	r24, 0x10	; 16
    4288:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    428c:	90 91 c3 01 	lds	r25, 0x01C3
    4290:	88 23       	and	r24, r24
    4292:	41 f0       	breq	.+16     	; 0x42a4 <bootmagic+0xc4>
            debug_config.mouse = !debug_config.mouse;
    4294:	93 fb       	bst	r25, 3
    4296:	88 27       	eor	r24, r24
    4298:	80 f9       	bld	r24, 0
    429a:	21 e0       	ldi	r18, 0x01	; 1
    429c:	82 27       	eor	r24, r18
    429e:	80 fb       	bst	r24, 0
    42a0:	93 f9       	bld	r25, 3
    42a2:	04 c0       	rjmp	.+8      	; 0x42ac <bootmagic+0xcc>
        } else {
            debug_config.enable = !debug_config.enable;
    42a4:	89 2f       	mov	r24, r25
    42a6:	80 95       	com	r24
    42a8:	80 fb       	bst	r24, 0
    42aa:	90 f9       	bld	r25, 0
    42ac:	90 93 c3 01 	sts	0x01C3, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    42b0:	80 91 c3 01 	lds	r24, 0x01C3
    42b4:	0e 94 4c 22 	call	0x4498	; 0x4498 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    42b8:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <eeconfig_read_keymap>
    42bc:	80 93 d8 01 	sts	0x01D8, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    42c0:	80 ee       	ldi	r24, 0xE0	; 224
    42c2:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    42c6:	88 23       	and	r24, r24
    42c8:	41 f0       	breq	.+16     	; 0x42da <bootmagic+0xfa>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    42ca:	80 91 d8 01 	lds	r24, 0x01D8
    42ce:	98 2f       	mov	r25, r24
    42d0:	90 95       	com	r25
    42d2:	90 fb       	bst	r25, 0
    42d4:	80 f9       	bld	r24, 0
    42d6:	80 93 d8 01 	sts	0x01D8, r24
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    42da:	89 e3       	ldi	r24, 0x39	; 57
    42dc:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    42e0:	88 23       	and	r24, r24
    42e2:	59 f0       	breq	.+22     	; 0x42fa <bootmagic+0x11a>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    42e4:	90 91 d8 01 	lds	r25, 0x01D8
    42e8:	91 fb       	bst	r25, 1
    42ea:	88 27       	eor	r24, r24
    42ec:	80 f9       	bld	r24, 0
    42ee:	21 e0       	ldi	r18, 0x01	; 1
    42f0:	82 27       	eor	r24, r18
    42f2:	80 fb       	bst	r24, 0
    42f4:	91 f9       	bld	r25, 1
    42f6:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    42fa:	82 ee       	ldi	r24, 0xE2	; 226
    42fc:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    4300:	88 23       	and	r24, r24
    4302:	59 f0       	breq	.+22     	; 0x431a <bootmagic+0x13a>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    4304:	90 91 d8 01 	lds	r25, 0x01D8
    4308:	92 fb       	bst	r25, 2
    430a:	88 27       	eor	r24, r24
    430c:	80 f9       	bld	r24, 0
    430e:	21 e0       	ldi	r18, 0x01	; 1
    4310:	82 27       	eor	r24, r18
    4312:	80 fb       	bst	r24, 0
    4314:	92 f9       	bld	r25, 2
    4316:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    431a:	86 ee       	ldi	r24, 0xE6	; 230
    431c:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    4320:	88 23       	and	r24, r24
    4322:	59 f0       	breq	.+22     	; 0x433a <bootmagic+0x15a>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    4324:	90 91 d8 01 	lds	r25, 0x01D8
    4328:	93 fb       	bst	r25, 3
    432a:	88 27       	eor	r24, r24
    432c:	80 f9       	bld	r24, 0
    432e:	21 e0       	ldi	r18, 0x01	; 1
    4330:	82 27       	eor	r24, r18
    4332:	80 fb       	bst	r24, 0
    4334:	93 f9       	bld	r25, 3
    4336:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
    433a:	83 ee       	ldi	r24, 0xE3	; 227
    433c:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    4340:	88 23       	and	r24, r24
    4342:	59 f0       	breq	.+22     	; 0x435a <bootmagic+0x17a>
        keymap_config.no_gui = !keymap_config.no_gui;
    4344:	90 91 d8 01 	lds	r25, 0x01D8
    4348:	94 fb       	bst	r25, 4
    434a:	88 27       	eor	r24, r24
    434c:	80 f9       	bld	r24, 0
    434e:	21 e0       	ldi	r18, 0x01	; 1
    4350:	82 27       	eor	r24, r18
    4352:	80 fb       	bst	r24, 0
    4354:	94 f9       	bld	r25, 4
    4356:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    435a:	85 e3       	ldi	r24, 0x35	; 53
    435c:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    4360:	88 23       	and	r24, r24
    4362:	59 f0       	breq	.+22     	; 0x437a <bootmagic+0x19a>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    4364:	90 91 d8 01 	lds	r25, 0x01D8
    4368:	95 fb       	bst	r25, 5
    436a:	88 27       	eor	r24, r24
    436c:	80 f9       	bld	r24, 0
    436e:	21 e0       	ldi	r18, 0x01	; 1
    4370:	82 27       	eor	r24, r18
    4372:	80 fb       	bst	r24, 0
    4374:	95 f9       	bld	r25, 5
    4376:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    437a:	81 e3       	ldi	r24, 0x31	; 49
    437c:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    4380:	88 23       	and	r24, r24
    4382:	59 f0       	breq	.+22     	; 0x439a <bootmagic+0x1ba>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    4384:	90 91 d8 01 	lds	r25, 0x01D8
    4388:	96 fb       	bst	r25, 6
    438a:	88 27       	eor	r24, r24
    438c:	80 f9       	bld	r24, 0
    438e:	21 e0       	ldi	r18, 0x01	; 1
    4390:	82 27       	eor	r24, r18
    4392:	80 fb       	bst	r24, 0
    4394:	96 f9       	bld	r25, 6
    4396:	90 93 d8 01 	sts	0x01D8, r25
    }
    if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
    439a:	81 e1       	ldi	r24, 0x11	; 17
    439c:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    43a0:	88 23       	and	r24, r24
    43a2:	59 f0       	breq	.+22     	; 0x43ba <bootmagic+0x1da>
        keymap_config.nkro = !keymap_config.nkro;
    43a4:	90 91 d8 01 	lds	r25, 0x01D8
    43a8:	97 fb       	bst	r25, 7
    43aa:	88 27       	eor	r24, r24
    43ac:	80 f9       	bld	r24, 0
    43ae:	21 e0       	ldi	r18, 0x01	; 1
    43b0:	82 27       	eor	r24, r18
    43b2:	80 fb       	bst	r24, 0
    43b4:	97 f9       	bld	r25, 7
    43b6:	90 93 d8 01 	sts	0x01D8, r25
    }
    eeconfig_write_keymap(keymap_config.raw);
    43ba:	80 91 d8 01 	lds	r24, 0x01D8
    43be:	0e 94 5e 22 	call	0x44bc	; 0x44bc <eeconfig_write_keymap>

#ifdef NKRO_ENABLE
    keyboard_nkro = keymap_config.nkro;
    43c2:	80 91 d8 01 	lds	r24, 0x01D8
    43c6:	87 fb       	bst	r24, 7
    43c8:	88 27       	eor	r24, r24
    43ca:	80 f9       	bld	r24, 0
    43cc:	80 93 0c 01 	sts	0x010C, r24
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    43d0:	87 e2       	ldi	r24, 0x27	; 39
    43d2:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    43d6:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    43d8:	8e e1       	ldi	r24, 0x1E	; 30
    43da:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    43de:	81 11       	cpse	r24, r1
    43e0:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    43e2:	8f e1       	ldi	r24, 0x1F	; 31
    43e4:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    43e8:	81 11       	cpse	r24, r1
    43ea:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    43ec:	80 e2       	ldi	r24, 0x20	; 32
    43ee:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    43f2:	81 11       	cpse	r24, r1
    43f4:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    43f6:	81 e2       	ldi	r24, 0x21	; 33
    43f8:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    43fc:	81 11       	cpse	r24, r1
    43fe:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    4400:	82 e2       	ldi	r24, 0x22	; 34
    4402:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    4406:	81 11       	cpse	r24, r1
    4408:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    440a:	83 e2       	ldi	r24, 0x23	; 35
    440c:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    4410:	81 11       	cpse	r24, r1
    4412:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    4414:	84 e2       	ldi	r24, 0x24	; 36
    4416:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <bootmagic_scan_keycode>
    441a:	88 23       	and	r24, r24
    441c:	11 f0       	breq	.+4      	; 0x4422 <bootmagic+0x242>
    441e:	c0 68       	ori	r28, 0x80	; 128
    4420:	02 c0       	rjmp	.+4      	; 0x4426 <bootmagic+0x246>
    if (default_layer) {
    4422:	cc 23       	and	r28, r28
    4424:	29 f0       	breq	.+10     	; 0x4430 <bootmagic+0x250>
        eeconfig_write_default_layer(default_layer);
    4426:	8c 2f       	mov	r24, r28
    4428:	0e 94 55 22 	call	0x44aa	; 0x44aa <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    442c:	6c 2f       	mov	r22, r28
    442e:	03 c0       	rjmp	.+6      	; 0x4436 <bootmagic+0x256>
    } else {
        default_layer = eeconfig_read_default_layer();
    4430:	0e 94 51 22 	call	0x44a2	; 0x44a2 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    4434:	68 2f       	mov	r22, r24
    4436:	70 e0       	ldi	r23, 0x00	; 0
    4438:	80 e0       	ldi	r24, 0x00	; 0
    443a:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    443c:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    443e:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <default_layer_set>
    }
}
    4442:	cf 91       	pop	r28
    4444:	08 95       	ret

00004446 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    4446:	6d ee       	ldi	r22, 0xED	; 237
    4448:	7e ef       	ldi	r23, 0xFE	; 254
    444a:	80 e0       	ldi	r24, 0x00	; 0
    444c:	90 e0       	ldi	r25, 0x00	; 0
    444e:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <__eewr_word_m32u4>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4452:	60 e0       	ldi	r22, 0x00	; 0
    4454:	82 e0       	ldi	r24, 0x02	; 2
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    445c:	60 e0       	ldi	r22, 0x00	; 0
    445e:	83 e0       	ldi	r24, 0x03	; 3
    4460:	90 e0       	ldi	r25, 0x00	; 0
    4462:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    4466:	60 e0       	ldi	r22, 0x00	; 0
    4468:	84 e0       	ldi	r24, 0x04	; 4
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <__eewr_byte_m32u4>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    4470:	60 e0       	ldi	r22, 0x00	; 0
    4472:	85 e0       	ldi	r24, 0x05	; 5
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	0c 94 0c 2d 	jmp	0x5a18	; 0x5a18 <__eewr_byte_m32u4>

0000447a <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    447a:	80 e0       	ldi	r24, 0x00	; 0
    447c:	90 e0       	ldi	r25, 0x00	; 0
    447e:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <__eerd_word_m32u4>
    4482:	21 e0       	ldi	r18, 0x01	; 1
    4484:	8d 3e       	cpi	r24, 0xED	; 237
    4486:	9e 4f       	sbci	r25, 0xFE	; 254
    4488:	09 f0       	breq	.+2      	; 0x448c <eeconfig_is_enabled+0x12>
    448a:	20 e0       	ldi	r18, 0x00	; 0
}
    448c:	82 2f       	mov	r24, r18
    448e:	08 95       	ret

00004490 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    4490:	82 e0       	ldi	r24, 0x02	; 2
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	0c 94 fe 2c 	jmp	0x59fc	; 0x59fc <__eerd_byte_m32u4>

00004498 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    4498:	68 2f       	mov	r22, r24
    449a:	82 e0       	ldi	r24, 0x02	; 2
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	0c 94 0c 2d 	jmp	0x5a18	; 0x5a18 <__eewr_byte_m32u4>

000044a2 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    44a2:	83 e0       	ldi	r24, 0x03	; 3
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	0c 94 fe 2c 	jmp	0x59fc	; 0x59fc <__eerd_byte_m32u4>

000044aa <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    44aa:	68 2f       	mov	r22, r24
    44ac:	83 e0       	ldi	r24, 0x03	; 3
    44ae:	90 e0       	ldi	r25, 0x00	; 0
    44b0:	0c 94 0c 2d 	jmp	0x5a18	; 0x5a18 <__eewr_byte_m32u4>

000044b4 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    44b4:	84 e0       	ldi	r24, 0x04	; 4
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	0c 94 fe 2c 	jmp	0x59fc	; 0x59fc <__eerd_byte_m32u4>

000044bc <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    44bc:	68 2f       	mov	r22, r24
    44be:	84 e0       	ldi	r24, 0x04	; 4
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	0c 94 0c 2d 	jmp	0x5a18	; 0x5a18 <__eewr_byte_m32u4>

000044c6 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    44c6:	80 91 cd 01 	lds	r24, 0x01CD
    44ca:	80 ff       	sbrs	r24, 0
    44cc:	0b c0       	rjmp	.+22     	; 0x44e4 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    44ce:	60 91 12 01 	lds	r22, 0x0112
    44d2:	85 e0       	ldi	r24, 0x05	; 5
    44d4:	68 9f       	mul	r22, r24
    44d6:	b0 01       	movw	r22, r0
    44d8:	11 24       	eor	r1, r1
    44da:	75 95       	asr	r23
    44dc:	67 95       	ror	r22
    44de:	75 95       	asr	r23
    44e0:	67 95       	ror	r22
    44e2:	2a c0       	rjmp	.+84     	; 0x4538 <move_unit+0x72>
    } else if (mousekey_accel & (1<<1)) {
    44e4:	81 ff       	sbrs	r24, 1
    44e6:	09 c0       	rjmp	.+18     	; 0x44fa <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    44e8:	60 91 12 01 	lds	r22, 0x0112
    44ec:	85 e0       	ldi	r24, 0x05	; 5
    44ee:	68 9f       	mul	r22, r24
    44f0:	b0 01       	movw	r22, r0
    44f2:	11 24       	eor	r1, r1
    44f4:	75 95       	asr	r23
    44f6:	67 95       	ror	r22
    44f8:	1f c0       	rjmp	.+62     	; 0x4538 <move_unit+0x72>
    } else if (mousekey_accel & (1<<2)) {
    44fa:	82 ff       	sbrs	r24, 2
    44fc:	07 c0       	rjmp	.+14     	; 0x450c <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    44fe:	60 91 12 01 	lds	r22, 0x0112
    4502:	85 e0       	ldi	r24, 0x05	; 5
    4504:	68 9f       	mul	r22, r24
    4506:	b0 01       	movw	r22, r0
    4508:	11 24       	eor	r1, r1
    450a:	16 c0       	rjmp	.+44     	; 0x4538 <move_unit+0x72>
    } else if (mousekey_repeat == 0) {
    450c:	40 91 ce 01 	lds	r20, 0x01CE
    4510:	44 23       	and	r20, r20
    4512:	c9 f0       	breq	.+50     	; 0x4546 <move_unit+0x80>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    4514:	60 91 11 01 	lds	r22, 0x0111
    4518:	46 17       	cp	r20, r22
    451a:	88 f7       	brcc	.-30     	; 0x44fe <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    451c:	20 91 12 01 	lds	r18, 0x0112
    4520:	85 e0       	ldi	r24, 0x05	; 5
    4522:	28 9f       	mul	r18, r24
    4524:	90 01       	movw	r18, r0
    4526:	11 24       	eor	r1, r1
    4528:	42 9f       	mul	r20, r18
    452a:	c0 01       	movw	r24, r0
    452c:	43 9f       	mul	r20, r19
    452e:	90 0d       	add	r25, r0
    4530:	11 24       	eor	r1, r1
    4532:	70 e0       	ldi	r23, 0x00	; 0
    4534:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    4538:	60 38       	cpi	r22, 0x80	; 128
    453a:	71 05       	cpc	r23, r1
    453c:	40 f4       	brcc	.+16     	; 0x454e <move_unit+0x88>
    453e:	61 15       	cp	r22, r1
    4540:	71 05       	cpc	r23, r1
    4542:	39 f0       	breq	.+14     	; 0x4552 <move_unit+0x8c>
    4544:	02 c0       	rjmp	.+4      	; 0x454a <move_unit+0x84>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    4546:	65 e0       	ldi	r22, 0x05	; 5
    4548:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    454a:	86 2f       	mov	r24, r22
    454c:	08 95       	ret
    454e:	8f e7       	ldi	r24, 0x7F	; 127
    4550:	08 95       	ret
    4552:	81 e0       	ldi	r24, 0x01	; 1
}
    4554:	08 95       	ret

00004556 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4556:	80 91 cd 01 	lds	r24, 0x01CD
    455a:	80 ff       	sbrs	r24, 0
    455c:	08 c0       	rjmp	.+16     	; 0x456e <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    455e:	60 91 10 01 	lds	r22, 0x0110
    4562:	70 e0       	ldi	r23, 0x00	; 0
    4564:	75 95       	asr	r23
    4566:	67 95       	ror	r22
    4568:	75 95       	asr	r23
    456a:	67 95       	ror	r22
    456c:	21 c0       	rjmp	.+66     	; 0x45b0 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    456e:	81 ff       	sbrs	r24, 1
    4570:	06 c0       	rjmp	.+12     	; 0x457e <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4572:	60 91 10 01 	lds	r22, 0x0110
    4576:	70 e0       	ldi	r23, 0x00	; 0
    4578:	75 95       	asr	r23
    457a:	67 95       	ror	r22
    457c:	19 c0       	rjmp	.+50     	; 0x45b0 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    457e:	82 ff       	sbrs	r24, 2
    4580:	04 c0       	rjmp	.+8      	; 0x458a <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    4582:	60 91 10 01 	lds	r22, 0x0110
    4586:	70 e0       	ldi	r23, 0x00	; 0
    4588:	10 c0       	rjmp	.+32     	; 0x45aa <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    458a:	80 91 ce 01 	lds	r24, 0x01CE
    458e:	88 23       	and	r24, r24
    4590:	c1 f0       	breq	.+48     	; 0x45c2 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    4592:	60 91 0f 01 	lds	r22, 0x010F
    4596:	86 17       	cp	r24, r22
    4598:	a0 f7       	brcc	.-24     	; 0x4582 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    459a:	90 91 10 01 	lds	r25, 0x0110
    459e:	98 9f       	mul	r25, r24
    45a0:	c0 01       	movw	r24, r0
    45a2:	11 24       	eor	r1, r1
    45a4:	70 e0       	ldi	r23, 0x00	; 0
    45a6:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    45aa:	60 38       	cpi	r22, 0x80	; 128
    45ac:	71 05       	cpc	r23, r1
    45ae:	28 f4       	brcc	.+10     	; 0x45ba <wheel_unit+0x64>
    45b0:	61 15       	cp	r22, r1
    45b2:	71 05       	cpc	r23, r1
    45b4:	21 f0       	breq	.+8      	; 0x45be <wheel_unit+0x68>
    45b6:	86 2f       	mov	r24, r22
    45b8:	08 95       	ret
    45ba:	8f e7       	ldi	r24, 0x7F	; 127
    45bc:	08 95       	ret
    45be:	81 e0       	ldi	r24, 0x01	; 1
    45c0:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    45c2:	61 e0       	ldi	r22, 0x01	; 1
    45c4:	70 e0       	ldi	r23, 0x00	; 0
    45c6:	f4 cf       	rjmp	.-24     	; 0x45b0 <wheel_unit+0x5a>

000045c8 <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    45c8:	80 3f       	cpi	r24, 0xF0	; 240
    45ca:	21 f4       	brne	.+8      	; 0x45d4 <mousekey_on+0xc>
    45cc:	0e 94 63 22 	call	0x44c6	; 0x44c6 <move_unit>
    45d0:	81 95       	neg	r24
    45d2:	04 c0       	rjmp	.+8      	; 0x45dc <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    45d4:	81 3f       	cpi	r24, 0xF1	; 241
    45d6:	29 f4       	brne	.+10     	; 0x45e2 <mousekey_on+0x1a>
    45d8:	0e 94 63 22 	call	0x44c6	; 0x44c6 <move_unit>
    45dc:	80 93 d1 01 	sts	0x01D1, r24
    45e0:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    45e2:	82 3f       	cpi	r24, 0xF2	; 242
    45e4:	21 f4       	brne	.+8      	; 0x45ee <mousekey_on+0x26>
    45e6:	0e 94 63 22 	call	0x44c6	; 0x44c6 <move_unit>
    45ea:	81 95       	neg	r24
    45ec:	04 c0       	rjmp	.+8      	; 0x45f6 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    45ee:	83 3f       	cpi	r24, 0xF3	; 243
    45f0:	29 f4       	brne	.+10     	; 0x45fc <mousekey_on+0x34>
    45f2:	0e 94 63 22 	call	0x44c6	; 0x44c6 <move_unit>
    45f6:	80 93 d0 01 	sts	0x01D0, r24
    45fa:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    45fc:	89 3f       	cpi	r24, 0xF9	; 249
    45fe:	19 f4       	brne	.+6      	; 0x4606 <mousekey_on+0x3e>
    4600:	0e 94 ab 22 	call	0x4556	; 0x4556 <wheel_unit>
    4604:	05 c0       	rjmp	.+10     	; 0x4610 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4606:	8a 3f       	cpi	r24, 0xFA	; 250
    4608:	31 f4       	brne	.+12     	; 0x4616 <mousekey_on+0x4e>
    460a:	0e 94 ab 22 	call	0x4556	; 0x4556 <wheel_unit>
    460e:	81 95       	neg	r24
    4610:	80 93 d2 01 	sts	0x01D2, r24
    4614:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4616:	8b 3f       	cpi	r24, 0xFB	; 251
    4618:	21 f4       	brne	.+8      	; 0x4622 <mousekey_on+0x5a>
    461a:	0e 94 ab 22 	call	0x4556	; 0x4556 <wheel_unit>
    461e:	81 95       	neg	r24
    4620:	04 c0       	rjmp	.+8      	; 0x462a <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    4622:	8c 3f       	cpi	r24, 0xFC	; 252
    4624:	29 f4       	brne	.+10     	; 0x4630 <mousekey_on+0x68>
    4626:	0e 94 ab 22 	call	0x4556	; 0x4556 <wheel_unit>
    462a:	80 93 d3 01 	sts	0x01D3, r24
    462e:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4630:	84 3f       	cpi	r24, 0xF4	; 244
    4632:	21 f4       	brne	.+8      	; 0x463c <mousekey_on+0x74>
    4634:	80 91 cf 01 	lds	r24, 0x01CF
    4638:	81 60       	ori	r24, 0x01	; 1
    463a:	17 c0       	rjmp	.+46     	; 0x466a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    463c:	85 3f       	cpi	r24, 0xF5	; 245
    463e:	21 f4       	brne	.+8      	; 0x4648 <mousekey_on+0x80>
    4640:	80 91 cf 01 	lds	r24, 0x01CF
    4644:	82 60       	ori	r24, 0x02	; 2
    4646:	11 c0       	rjmp	.+34     	; 0x466a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    4648:	86 3f       	cpi	r24, 0xF6	; 246
    464a:	21 f4       	brne	.+8      	; 0x4654 <mousekey_on+0x8c>
    464c:	80 91 cf 01 	lds	r24, 0x01CF
    4650:	84 60       	ori	r24, 0x04	; 4
    4652:	0b c0       	rjmp	.+22     	; 0x466a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4654:	87 3f       	cpi	r24, 0xF7	; 247
    4656:	21 f4       	brne	.+8      	; 0x4660 <mousekey_on+0x98>
    4658:	80 91 cf 01 	lds	r24, 0x01CF
    465c:	88 60       	ori	r24, 0x08	; 8
    465e:	05 c0       	rjmp	.+10     	; 0x466a <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4660:	88 3f       	cpi	r24, 0xF8	; 248
    4662:	31 f4       	brne	.+12     	; 0x4670 <mousekey_on+0xa8>
    4664:	80 91 cf 01 	lds	r24, 0x01CF
    4668:	80 61       	ori	r24, 0x10	; 16
    466a:	80 93 cf 01 	sts	0x01CF, r24
    466e:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4670:	8d 3f       	cpi	r24, 0xFD	; 253
    4672:	21 f4       	brne	.+8      	; 0x467c <mousekey_on+0xb4>
    4674:	80 91 cd 01 	lds	r24, 0x01CD
    4678:	81 60       	ori	r24, 0x01	; 1
    467a:	0b c0       	rjmp	.+22     	; 0x4692 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    467c:	8e 3f       	cpi	r24, 0xFE	; 254
    467e:	21 f4       	brne	.+8      	; 0x4688 <mousekey_on+0xc0>
    4680:	80 91 cd 01 	lds	r24, 0x01CD
    4684:	82 60       	ori	r24, 0x02	; 2
    4686:	05 c0       	rjmp	.+10     	; 0x4692 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    4688:	8f 3f       	cpi	r24, 0xFF	; 255
    468a:	29 f4       	brne	.+10     	; 0x4696 <mousekey_on+0xce>
    468c:	80 91 cd 01 	lds	r24, 0x01CD
    4690:	84 60       	ori	r24, 0x04	; 4
    4692:	80 93 cd 01 	sts	0x01CD, r24
    4696:	08 95       	ret

00004698 <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    4698:	80 3f       	cpi	r24, 0xF0	; 240
    469a:	39 f4       	brne	.+14     	; 0x46aa <mousekey_off+0x12>
    469c:	80 91 d1 01 	lds	r24, 0x01D1
    46a0:	87 ff       	sbrs	r24, 7
    46a2:	6c c0       	rjmp	.+216    	; 0x477c <mousekey_off+0xe4>
    46a4:	10 92 d1 01 	sts	0x01D1, r1
    46a8:	69 c0       	rjmp	.+210    	; 0x477c <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    46aa:	81 3f       	cpi	r24, 0xF1	; 241
    46ac:	29 f4       	brne	.+10     	; 0x46b8 <mousekey_off+0x20>
    46ae:	80 91 d1 01 	lds	r24, 0x01D1
    46b2:	18 16       	cp	r1, r24
    46b4:	bc f3       	brlt	.-18     	; 0x46a4 <mousekey_off+0xc>
    46b6:	62 c0       	rjmp	.+196    	; 0x477c <mousekey_off+0xe4>
    46b8:	90 91 d0 01 	lds	r25, 0x01D0
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    46bc:	82 3f       	cpi	r24, 0xF2	; 242
    46be:	29 f4       	brne	.+10     	; 0x46ca <mousekey_off+0x32>
    46c0:	97 ff       	sbrs	r25, 7
    46c2:	5c c0       	rjmp	.+184    	; 0x477c <mousekey_off+0xe4>
    46c4:	10 92 d0 01 	sts	0x01D0, r1
    46c8:	59 c0       	rjmp	.+178    	; 0x477c <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    46ca:	83 3f       	cpi	r24, 0xF3	; 243
    46cc:	19 f4       	brne	.+6      	; 0x46d4 <mousekey_off+0x3c>
    46ce:	19 16       	cp	r1, r25
    46d0:	cc f3       	brlt	.-14     	; 0x46c4 <mousekey_off+0x2c>
    46d2:	54 c0       	rjmp	.+168    	; 0x477c <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    46d4:	89 3f       	cpi	r24, 0xF9	; 249
    46d6:	41 f4       	brne	.+16     	; 0x46e8 <mousekey_off+0x50>
    46d8:	80 91 d2 01 	lds	r24, 0x01D2
    46dc:	18 16       	cp	r1, r24
    46de:	0c f0       	brlt	.+2      	; 0x46e2 <mousekey_off+0x4a>
    46e0:	4d c0       	rjmp	.+154    	; 0x477c <mousekey_off+0xe4>
    46e2:	10 92 d2 01 	sts	0x01D2, r1
    46e6:	4a c0       	rjmp	.+148    	; 0x477c <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    46e8:	8a 3f       	cpi	r24, 0xFA	; 250
    46ea:	29 f4       	brne	.+10     	; 0x46f6 <mousekey_off+0x5e>
    46ec:	80 91 d2 01 	lds	r24, 0x01D2
    46f0:	87 ff       	sbrs	r24, 7
    46f2:	44 c0       	rjmp	.+136    	; 0x477c <mousekey_off+0xe4>
    46f4:	f6 cf       	rjmp	.-20     	; 0x46e2 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    46f6:	8b 3f       	cpi	r24, 0xFB	; 251
    46f8:	39 f4       	brne	.+14     	; 0x4708 <mousekey_off+0x70>
    46fa:	80 91 d3 01 	lds	r24, 0x01D3
    46fe:	87 ff       	sbrs	r24, 7
    4700:	3d c0       	rjmp	.+122    	; 0x477c <mousekey_off+0xe4>
    4702:	10 92 d3 01 	sts	0x01D3, r1
    4706:	3a c0       	rjmp	.+116    	; 0x477c <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    4708:	8c 3f       	cpi	r24, 0xFC	; 252
    470a:	29 f4       	brne	.+10     	; 0x4716 <mousekey_off+0x7e>
    470c:	80 91 d3 01 	lds	r24, 0x01D3
    4710:	18 16       	cp	r1, r24
    4712:	bc f3       	brlt	.-18     	; 0x4702 <mousekey_off+0x6a>
    4714:	33 c0       	rjmp	.+102    	; 0x477c <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4716:	84 3f       	cpi	r24, 0xF4	; 244
    4718:	21 f4       	brne	.+8      	; 0x4722 <mousekey_off+0x8a>
    471a:	80 91 cf 01 	lds	r24, 0x01CF
    471e:	8e 7f       	andi	r24, 0xFE	; 254
    4720:	17 c0       	rjmp	.+46     	; 0x4750 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4722:	85 3f       	cpi	r24, 0xF5	; 245
    4724:	21 f4       	brne	.+8      	; 0x472e <mousekey_off+0x96>
    4726:	80 91 cf 01 	lds	r24, 0x01CF
    472a:	8d 7f       	andi	r24, 0xFD	; 253
    472c:	11 c0       	rjmp	.+34     	; 0x4750 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    472e:	86 3f       	cpi	r24, 0xF6	; 246
    4730:	21 f4       	brne	.+8      	; 0x473a <mousekey_off+0xa2>
    4732:	80 91 cf 01 	lds	r24, 0x01CF
    4736:	8b 7f       	andi	r24, 0xFB	; 251
    4738:	0b c0       	rjmp	.+22     	; 0x4750 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    473a:	87 3f       	cpi	r24, 0xF7	; 247
    473c:	21 f4       	brne	.+8      	; 0x4746 <mousekey_off+0xae>
    473e:	80 91 cf 01 	lds	r24, 0x01CF
    4742:	87 7f       	andi	r24, 0xF7	; 247
    4744:	05 c0       	rjmp	.+10     	; 0x4750 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4746:	88 3f       	cpi	r24, 0xF8	; 248
    4748:	31 f4       	brne	.+12     	; 0x4756 <mousekey_off+0xbe>
    474a:	80 91 cf 01 	lds	r24, 0x01CF
    474e:	8f 7e       	andi	r24, 0xEF	; 239
    4750:	80 93 cf 01 	sts	0x01CF, r24
    4754:	13 c0       	rjmp	.+38     	; 0x477c <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4756:	8d 3f       	cpi	r24, 0xFD	; 253
    4758:	21 f4       	brne	.+8      	; 0x4762 <mousekey_off+0xca>
    475a:	80 91 cd 01 	lds	r24, 0x01CD
    475e:	8e 7f       	andi	r24, 0xFE	; 254
    4760:	0b c0       	rjmp	.+22     	; 0x4778 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4762:	8e 3f       	cpi	r24, 0xFE	; 254
    4764:	21 f4       	brne	.+8      	; 0x476e <mousekey_off+0xd6>
    4766:	80 91 cd 01 	lds	r24, 0x01CD
    476a:	8d 7f       	andi	r24, 0xFD	; 253
    476c:	05 c0       	rjmp	.+10     	; 0x4778 <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    476e:	8f 3f       	cpi	r24, 0xFF	; 255
    4770:	29 f4       	brne	.+10     	; 0x477c <mousekey_off+0xe4>
    4772:	80 91 cd 01 	lds	r24, 0x01CD
    4776:	8b 7f       	andi	r24, 0xFB	; 251
    4778:	80 93 cd 01 	sts	0x01CD, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    477c:	80 91 d0 01 	lds	r24, 0x01D0
    4780:	81 11       	cpse	r24, r1
    4782:	0e c0       	rjmp	.+28     	; 0x47a0 <mousekey_off+0x108>
    4784:	80 91 d1 01 	lds	r24, 0x01D1
    4788:	81 11       	cpse	r24, r1
    478a:	0a c0       	rjmp	.+20     	; 0x47a0 <mousekey_off+0x108>
    478c:	80 91 d2 01 	lds	r24, 0x01D2
    4790:	81 11       	cpse	r24, r1
    4792:	06 c0       	rjmp	.+12     	; 0x47a0 <mousekey_off+0x108>
    4794:	80 91 d3 01 	lds	r24, 0x01D3
    4798:	81 11       	cpse	r24, r1
    479a:	02 c0       	rjmp	.+4      	; 0x47a0 <mousekey_off+0x108>
        mousekey_repeat = 0;
    479c:	10 92 ce 01 	sts	0x01CE, r1
    47a0:	08 95       	ret

000047a2 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    47a2:	80 91 c3 01 	lds	r24, 0x01C3
    47a6:	83 ff       	sbrs	r24, 3
    47a8:	7e c0       	rjmp	.+252    	; 0x48a6 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    47aa:	81 eb       	ldi	r24, 0xB1	; 177
    47ac:	94 e0       	ldi	r25, 0x04	; 4
    47ae:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    phex(mouse_report.buttons); print("|");
    47b2:	80 91 cf 01 	lds	r24, 0x01CF
    47b6:	1f 92       	push	r1
    47b8:	8f 93       	push	r24
    47ba:	8c ea       	ldi	r24, 0xAC	; 172
    47bc:	94 e0       	ldi	r25, 0x04	; 4
    47be:	9f 93       	push	r25
    47c0:	8f 93       	push	r24
    47c2:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    47c6:	8a ea       	ldi	r24, 0xAA	; 170
    47c8:	94 e0       	ldi	r25, 0x04	; 4
    47ca:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print_decs(mouse_report.x); print(" ");
    47ce:	20 91 d0 01 	lds	r18, 0x01D0
    47d2:	82 2f       	mov	r24, r18
    47d4:	99 27       	eor	r25, r25
    47d6:	87 fd       	sbrc	r24, 7
    47d8:	90 95       	com	r25
    47da:	9f 93       	push	r25
    47dc:	2f 93       	push	r18
    47de:	87 ea       	ldi	r24, 0xA7	; 167
    47e0:	94 e0       	ldi	r25, 0x04	; 4
    47e2:	9f 93       	push	r25
    47e4:	8f 93       	push	r24
    47e6:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    47ea:	85 ea       	ldi	r24, 0xA5	; 165
    47ec:	94 e0       	ldi	r25, 0x04	; 4
    47ee:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print_decs(mouse_report.y); print(" ");
    47f2:	20 91 d1 01 	lds	r18, 0x01D1
    47f6:	82 2f       	mov	r24, r18
    47f8:	99 27       	eor	r25, r25
    47fa:	87 fd       	sbrc	r24, 7
    47fc:	90 95       	com	r25
    47fe:	9f 93       	push	r25
    4800:	2f 93       	push	r18
    4802:	82 ea       	ldi	r24, 0xA2	; 162
    4804:	94 e0       	ldi	r25, 0x04	; 4
    4806:	9f 93       	push	r25
    4808:	8f 93       	push	r24
    480a:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    480e:	80 ea       	ldi	r24, 0xA0	; 160
    4810:	94 e0       	ldi	r25, 0x04	; 4
    4812:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print_decs(mouse_report.v); print(" ");
    4816:	20 91 d2 01 	lds	r18, 0x01D2
    481a:	82 2f       	mov	r24, r18
    481c:	99 27       	eor	r25, r25
    481e:	87 fd       	sbrc	r24, 7
    4820:	90 95       	com	r25
    4822:	9f 93       	push	r25
    4824:	2f 93       	push	r18
    4826:	8d e9       	ldi	r24, 0x9D	; 157
    4828:	94 e0       	ldi	r25, 0x04	; 4
    482a:	9f 93       	push	r25
    482c:	8f 93       	push	r24
    482e:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4832:	8b e9       	ldi	r24, 0x9B	; 155
    4834:	94 e0       	ldi	r25, 0x04	; 4
    4836:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print_decs(mouse_report.h); print("](");
    483a:	20 91 d3 01 	lds	r18, 0x01D3
    483e:	82 2f       	mov	r24, r18
    4840:	99 27       	eor	r25, r25
    4842:	87 fd       	sbrc	r24, 7
    4844:	90 95       	com	r25
    4846:	9f 93       	push	r25
    4848:	2f 93       	push	r18
    484a:	88 e9       	ldi	r24, 0x98	; 152
    484c:	94 e0       	ldi	r25, 0x04	; 4
    484e:	9f 93       	push	r25
    4850:	8f 93       	push	r24
    4852:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4856:	85 e9       	ldi	r24, 0x95	; 149
    4858:	94 e0       	ldi	r25, 0x04	; 4
    485a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print_dec(mousekey_repeat); print("/");
    485e:	80 91 ce 01 	lds	r24, 0x01CE
    4862:	1f 92       	push	r1
    4864:	8f 93       	push	r24
    4866:	82 e9       	ldi	r24, 0x92	; 146
    4868:	94 e0       	ldi	r25, 0x04	; 4
    486a:	9f 93       	push	r25
    486c:	8f 93       	push	r24
    486e:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4872:	80 e9       	ldi	r24, 0x90	; 144
    4874:	94 e0       	ldi	r25, 0x04	; 4
    4876:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print_dec(mousekey_accel); print(")\n");
    487a:	80 91 cd 01 	lds	r24, 0x01CD
    487e:	1f 92       	push	r1
    4880:	8f 93       	push	r24
    4882:	8d e8       	ldi	r24, 0x8D	; 141
    4884:	94 e0       	ldi	r25, 0x04	; 4
    4886:	9f 93       	push	r25
    4888:	8f 93       	push	r24
    488a:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    488e:	8a e8       	ldi	r24, 0x8A	; 138
    4890:	94 e0       	ldi	r25, 0x04	; 4
    4892:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4896:	8d b7       	in	r24, 0x3d	; 61
    4898:	9e b7       	in	r25, 0x3e	; 62
    489a:	4c 96       	adiw	r24, 0x1c	; 28
    489c:	0f b6       	in	r0, 0x3f	; 63
    489e:	f8 94       	cli
    48a0:	9e bf       	out	0x3e, r25	; 62
    48a2:	0f be       	out	0x3f, r0	; 63
    48a4:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    48a6:	8f ec       	ldi	r24, 0xCF	; 207
    48a8:	91 e0       	ldi	r25, 0x01	; 1
    48aa:	0e 94 3a 12 	call	0x2474	; 0x2474 <host_mouse_send>
    last_timer = timer_read();
    48ae:	0e 94 2c 20 	call	0x4058	; 0x4058 <timer_read>
    48b2:	90 93 cc 01 	sts	0x01CC, r25
    48b6:	80 93 cb 01 	sts	0x01CB, r24
    48ba:	08 95       	ret

000048bc <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    48bc:	1f 93       	push	r17
    48be:	cf 93       	push	r28
    48c0:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    48c2:	80 91 cb 01 	lds	r24, 0x01CB
    48c6:	90 91 cc 01 	lds	r25, 0x01CC
    48ca:	0e 94 38 20 	call	0x4070	; 0x4070 <timer_elapsed>
    48ce:	40 91 ce 01 	lds	r20, 0x01CE
    48d2:	44 23       	and	r20, r20
    48d4:	21 f0       	breq	.+8      	; 0x48de <mousekey_task+0x22>
    48d6:	20 91 13 01 	lds	r18, 0x0113
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	06 c0       	rjmp	.+12     	; 0x48ea <mousekey_task+0x2e>
    48de:	20 91 14 01 	lds	r18, 0x0114
    48e2:	5a e0       	ldi	r21, 0x0A	; 10
    48e4:	25 9f       	mul	r18, r21
    48e6:	90 01       	movw	r18, r0
    48e8:	11 24       	eor	r1, r1
    48ea:	82 17       	cp	r24, r18
    48ec:	93 07       	cpc	r25, r19
    48ee:	08 f4       	brcc	.+2      	; 0x48f2 <mousekey_task+0x36>
    48f0:	82 c0       	rjmp	.+260    	; 0x49f6 <mousekey_task+0x13a>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    48f2:	80 91 d0 01 	lds	r24, 0x01D0
    48f6:	10 91 d1 01 	lds	r17, 0x01D1
    48fa:	d0 91 d2 01 	lds	r29, 0x01D2
    48fe:	c0 91 d3 01 	lds	r28, 0x01D3
    4902:	81 11       	cpse	r24, r1
    4904:	07 c0       	rjmp	.+14     	; 0x4914 <mousekey_task+0x58>
    4906:	11 11       	cpse	r17, r1
    4908:	05 c0       	rjmp	.+10     	; 0x4914 <mousekey_task+0x58>
    490a:	d1 11       	cpse	r29, r1
    490c:	03 c0       	rjmp	.+6      	; 0x4914 <mousekey_task+0x58>
    490e:	cc 23       	and	r28, r28
    4910:	09 f4       	brne	.+2      	; 0x4914 <mousekey_task+0x58>
    4912:	71 c0       	rjmp	.+226    	; 0x49f6 <mousekey_task+0x13a>
        return;

    if (mousekey_repeat != UINT8_MAX)
    4914:	4f 3f       	cpi	r20, 0xFF	; 255
    4916:	19 f0       	breq	.+6      	; 0x491e <mousekey_task+0x62>
        mousekey_repeat++;
    4918:	4f 5f       	subi	r20, 0xFF	; 255
    491a:	40 93 ce 01 	sts	0x01CE, r20


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    491e:	18 16       	cp	r1, r24
    4920:	24 f4       	brge	.+8      	; 0x492a <mousekey_task+0x6e>
    4922:	0e 94 63 22 	call	0x44c6	; 0x44c6 <move_unit>
    4926:	80 93 d0 01 	sts	0x01D0, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    492a:	80 91 d0 01 	lds	r24, 0x01D0
    492e:	87 ff       	sbrs	r24, 7
    4930:	05 c0       	rjmp	.+10     	; 0x493c <mousekey_task+0x80>
    4932:	0e 94 63 22 	call	0x44c6	; 0x44c6 <move_unit>
    4936:	81 95       	neg	r24
    4938:	80 93 d0 01 	sts	0x01D0, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    493c:	11 16       	cp	r1, r17
    493e:	24 f4       	brge	.+8      	; 0x4948 <mousekey_task+0x8c>
    4940:	0e 94 63 22 	call	0x44c6	; 0x44c6 <move_unit>
    4944:	80 93 d1 01 	sts	0x01D1, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    4948:	80 91 d1 01 	lds	r24, 0x01D1
    494c:	87 ff       	sbrs	r24, 7
    494e:	05 c0       	rjmp	.+10     	; 0x495a <mousekey_task+0x9e>
    4950:	0e 94 63 22 	call	0x44c6	; 0x44c6 <move_unit>
    4954:	81 95       	neg	r24
    4956:	80 93 d1 01 	sts	0x01D1, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    495a:	60 91 d0 01 	lds	r22, 0x01D0
    495e:	66 23       	and	r22, r22
    4960:	39 f1       	breq	.+78     	; 0x49b0 <mousekey_task+0xf4>
    4962:	10 91 d1 01 	lds	r17, 0x01D1
    4966:	11 23       	and	r17, r17
    4968:	19 f1       	breq	.+70     	; 0x49b0 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    496a:	77 27       	eor	r23, r23
    496c:	67 fd       	sbrc	r22, 7
    496e:	70 95       	com	r23
    4970:	87 2f       	mov	r24, r23
    4972:	97 2f       	mov	r25, r23
    4974:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <__floatsisf>
    4978:	23 e3       	ldi	r18, 0x33	; 51
    497a:	33 e3       	ldi	r19, 0x33	; 51
    497c:	43 e3       	ldi	r20, 0x33	; 51
    497e:	5f e3       	ldi	r21, 0x3F	; 63
    4980:	0e 94 45 2c 	call	0x588a	; 0x588a <__mulsf3>
    4984:	0e 94 ae 2b 	call	0x575c	; 0x575c <__fixsfsi>
    4988:	60 93 d0 01 	sts	0x01D0, r22
        mouse_report.y *= 0.7;
    498c:	61 2f       	mov	r22, r17
    498e:	77 27       	eor	r23, r23
    4990:	67 fd       	sbrc	r22, 7
    4992:	70 95       	com	r23
    4994:	87 2f       	mov	r24, r23
    4996:	97 2f       	mov	r25, r23
    4998:	0e 94 e1 2b 	call	0x57c2	; 0x57c2 <__floatsisf>
    499c:	23 e3       	ldi	r18, 0x33	; 51
    499e:	33 e3       	ldi	r19, 0x33	; 51
    49a0:	43 e3       	ldi	r20, 0x33	; 51
    49a2:	5f e3       	ldi	r21, 0x3F	; 63
    49a4:	0e 94 45 2c 	call	0x588a	; 0x588a <__mulsf3>
    49a8:	0e 94 ae 2b 	call	0x575c	; 0x575c <__fixsfsi>
    49ac:	60 93 d1 01 	sts	0x01D1, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    49b0:	1d 16       	cp	r1, r29
    49b2:	24 f4       	brge	.+8      	; 0x49bc <mousekey_task+0x100>
    49b4:	0e 94 ab 22 	call	0x4556	; 0x4556 <wheel_unit>
    49b8:	80 93 d2 01 	sts	0x01D2, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    49bc:	80 91 d2 01 	lds	r24, 0x01D2
    49c0:	87 ff       	sbrs	r24, 7
    49c2:	05 c0       	rjmp	.+10     	; 0x49ce <mousekey_task+0x112>
    49c4:	0e 94 ab 22 	call	0x4556	; 0x4556 <wheel_unit>
    49c8:	81 95       	neg	r24
    49ca:	80 93 d2 01 	sts	0x01D2, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    49ce:	1c 16       	cp	r1, r28
    49d0:	24 f4       	brge	.+8      	; 0x49da <mousekey_task+0x11e>
    49d2:	0e 94 ab 22 	call	0x4556	; 0x4556 <wheel_unit>
    49d6:	80 93 d3 01 	sts	0x01D3, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    49da:	80 91 d3 01 	lds	r24, 0x01D3
    49de:	87 ff       	sbrs	r24, 7
    49e0:	05 c0       	rjmp	.+10     	; 0x49ec <mousekey_task+0x130>
    49e2:	0e 94 ab 22 	call	0x4556	; 0x4556 <wheel_unit>
    49e6:	81 95       	neg	r24
    49e8:	80 93 d3 01 	sts	0x01D3, r24

    mousekey_send();
}
    49ec:	df 91       	pop	r29
    49ee:	cf 91       	pop	r28
    49f0:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    49f2:	0c 94 d1 23 	jmp	0x47a2	; 0x47a2 <mousekey_send>
}
    49f6:	df 91       	pop	r29
    49f8:	cf 91       	pop	r28
    49fa:	1f 91       	pop	r17
    49fc:	08 95       	ret

000049fe <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    49fe:	ef ec       	ldi	r30, 0xCF	; 207
    4a00:	f1 e0       	ldi	r31, 0x01	; 1
    4a02:	85 e0       	ldi	r24, 0x05	; 5
    4a04:	df 01       	movw	r26, r30
    4a06:	1d 92       	st	X+, r1
    4a08:	8a 95       	dec	r24
    4a0a:	e9 f7       	brne	.-6      	; 0x4a06 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4a0c:	10 92 ce 01 	sts	0x01CE, r1
    mousekey_accel = 0;
    4a10:	10 92 cd 01 	sts	0x01CD, r1
    4a14:	08 95       	ret

00004a16 <command_console_help>:
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\n----- Console Help -----\n");
    4a16:	80 e8       	ldi	r24, 0x80	; 128
    4a18:	99 e0       	ldi	r25, 0x09	; 9
    4a1a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("ESC/q:	quit\n");
    4a1e:	83 e7       	ldi	r24, 0x73	; 115
    4a20:	99 e0       	ldi	r25, 0x09	; 9
    4a22:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
#ifdef MOUSEKEY_ENABLE
    print("m:	mousekey\n");
    4a26:	86 e6       	ldi	r24, 0x66	; 102
    4a28:	99 e0       	ldi	r25, 0x09	; 9
    4a2a:	0c 94 0e 08 	jmp	0x101c	; 0x101c <xputs>

00004a2e <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\n----- Mousekey Parameters Help -----\n");
    4a2e:	83 ee       	ldi	r24, 0xE3	; 227
    4a30:	98 e0       	ldi	r25, 0x08	; 8
    4a32:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("ESC/q:	quit\n");
    4a36:	86 ed       	ldi	r24, 0xD6	; 214
    4a38:	98 e0       	ldi	r25, 0x08	; 8
    4a3a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("1:	select mk_delay(*10ms)\n");
    4a3e:	8b eb       	ldi	r24, 0xBB	; 187
    4a40:	98 e0       	ldi	r25, 0x08	; 8
    4a42:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("2:	select mk_interval(ms)\n");
    4a46:	80 ea       	ldi	r24, 0xA0	; 160
    4a48:	98 e0       	ldi	r25, 0x08	; 8
    4a4a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("3:	select mk_max_speed\n");
    4a4e:	88 e8       	ldi	r24, 0x88	; 136
    4a50:	98 e0       	ldi	r25, 0x08	; 8
    4a52:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("4:	select mk_time_to_max\n");
    4a56:	8e e6       	ldi	r24, 0x6E	; 110
    4a58:	98 e0       	ldi	r25, 0x08	; 8
    4a5a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("5:	select mk_wheel_max_speed\n");
    4a5e:	80 e5       	ldi	r24, 0x50	; 80
    4a60:	98 e0       	ldi	r25, 0x08	; 8
    4a62:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("6:	select mk_wheel_time_to_max\n");
    4a66:	80 e3       	ldi	r24, 0x30	; 48
    4a68:	98 e0       	ldi	r25, 0x08	; 8
    4a6a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("p:	print parameters\n");
    4a6e:	8b e1       	ldi	r24, 0x1B	; 27
    4a70:	98 e0       	ldi	r25, 0x08	; 8
    4a72:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("d:	set default values\n");
    4a76:	84 e0       	ldi	r24, 0x04	; 4
    4a78:	98 e0       	ldi	r25, 0x08	; 8
    4a7a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("up:	increase parameters(+1)\n");
    4a7e:	87 ee       	ldi	r24, 0xE7	; 231
    4a80:	97 e0       	ldi	r25, 0x07	; 7
    4a82:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("down:	decrease parameters(-1)\n");
    4a86:	88 ec       	ldi	r24, 0xC8	; 200
    4a88:	97 e0       	ldi	r25, 0x07	; 7
    4a8a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("pgup:	increase parameters(+10)\n");
    4a8e:	88 ea       	ldi	r24, 0xA8	; 168
    4a90:	97 e0       	ldi	r25, 0x07	; 7
    4a92:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("pgdown:	decrease parameters(-10)\n");
    4a96:	86 e8       	ldi	r24, 0x86	; 134
    4a98:	97 e0       	ldi	r25, 0x07	; 7
    4a9a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("\nspeed = delta * max_speed * (repeat / time_to_max)\n");
    4a9e:	81 e5       	ldi	r24, 0x51	; 81
    4aa0:	97 e0       	ldi	r25, 0x07	; 7
    4aa2:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("where delta: cursor="); pdec(MOUSEKEY_MOVE_DELTA);
    4aa6:	8c e3       	ldi	r24, 0x3C	; 60
    4aa8:	97 e0       	ldi	r25, 0x07	; 7
    4aaa:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4aae:	1f 92       	push	r1
    4ab0:	85 e0       	ldi	r24, 0x05	; 5
    4ab2:	8f 93       	push	r24
    4ab4:	89 e3       	ldi	r24, 0x39	; 57
    4ab6:	97 e0       	ldi	r25, 0x07	; 7
    4ab8:	9f 93       	push	r25
    4aba:	8f 93       	push	r24
    4abc:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    print(", wheel="); pdec(MOUSEKEY_WHEEL_DELTA); print("\n");
    4ac0:	80 e3       	ldi	r24, 0x30	; 48
    4ac2:	97 e0       	ldi	r25, 0x07	; 7
    4ac4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4ac8:	1f 92       	push	r1
    4aca:	81 e0       	ldi	r24, 0x01	; 1
    4acc:	8f 93       	push	r24
    4ace:	8d e2       	ldi	r24, 0x2D	; 45
    4ad0:	97 e0       	ldi	r25, 0x07	; 7
    4ad2:	9f 93       	push	r25
    4ad4:	8f 93       	push	r24
    4ad6:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4ada:	8b e2       	ldi	r24, 0x2B	; 43
    4adc:	97 e0       	ldi	r25, 0x07	; 7
    4ade:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
    4ae2:	8d b7       	in	r24, 0x3d	; 61
    4ae4:	9e b7       	in	r25, 0x3e	; 62
    4ae6:	08 96       	adiw	r24, 0x08	; 8
    4ae8:	0f b6       	in	r0, 0x3f	; 63
    4aea:	f8 94       	cli
    4aec:	9e bf       	out	0x3e, r25	; 62
    4aee:	0f be       	out	0x3f, r0	; 63
    4af0:	8d bf       	out	0x3d, r24	; 61
    4af2:	8e ef       	ldi	r24, 0xFE	; 254
    4af4:	96 e0       	ldi	r25, 0x06	; 6
    4af6:	0c 94 0e 08 	jmp	0x101c	; 0x101c <xputs>

00004afa <mousekey_param_inc>:
}

#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    4afa:	83 30       	cpi	r24, 0x03	; 3
    4afc:	09 f4       	brne	.+2      	; 0x4b00 <mousekey_param_inc+0x6>
    4afe:	59 c0       	rjmp	.+178    	; 0x4bb2 <mousekey_param_inc+0xb8>
    4b00:	28 f4       	brcc	.+10     	; 0x4b0c <mousekey_param_inc+0x12>
    4b02:	81 30       	cpi	r24, 0x01	; 1
    4b04:	61 f0       	breq	.+24     	; 0x4b1e <mousekey_param_inc+0x24>
    4b06:	82 30       	cpi	r24, 0x02	; 2
    4b08:	79 f1       	breq	.+94     	; 0x4b68 <mousekey_param_inc+0x6e>
    4b0a:	08 95       	ret
    4b0c:	85 30       	cpi	r24, 0x05	; 5
    4b0e:	09 f4       	brne	.+2      	; 0x4b12 <mousekey_param_inc+0x18>
    4b10:	9a c0       	rjmp	.+308    	; 0x4c46 <mousekey_param_inc+0x14c>
    4b12:	08 f4       	brcc	.+2      	; 0x4b16 <mousekey_param_inc+0x1c>
    4b14:	73 c0       	rjmp	.+230    	; 0x4bfc <mousekey_param_inc+0x102>
    4b16:	86 30       	cpi	r24, 0x06	; 6
    4b18:	09 f4       	brne	.+2      	; 0x4b1c <mousekey_param_inc+0x22>
    4b1a:	ba c0       	rjmp	.+372    	; 0x4c90 <mousekey_param_inc+0x196>
    4b1c:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4b1e:	20 91 14 01 	lds	r18, 0x0114
    4b22:	86 2f       	mov	r24, r22
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	82 0f       	add	r24, r18
    4b28:	91 1d       	adc	r25, r1
    4b2a:	8f 3f       	cpi	r24, 0xFF	; 255
    4b2c:	91 05       	cpc	r25, r1
    4b2e:	20 f4       	brcc	.+8      	; 0x4b38 <mousekey_param_inc+0x3e>
                mk_delay += inc;
    4b30:	62 0f       	add	r22, r18
    4b32:	60 93 14 01 	sts	0x0114, r22
    4b36:	03 c0       	rjmp	.+6      	; 0x4b3e <mousekey_param_inc+0x44>
            else
                mk_delay = UINT8_MAX;
    4b38:	8f ef       	ldi	r24, 0xFF	; 255
    4b3a:	80 93 14 01 	sts	0x0114, r24
            PRINT_SET_VAL(mk_delay);
    4b3e:	8a ed       	ldi	r24, 0xDA	; 218
    4b40:	95 e0       	ldi	r25, 0x05	; 5
    4b42:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4b46:	80 91 14 01 	lds	r24, 0x0114
    4b4a:	1f 92       	push	r1
    4b4c:	8f 93       	push	r24
    4b4e:	87 ed       	ldi	r24, 0xD7	; 215
    4b50:	95 e0       	ldi	r25, 0x05	; 5
    4b52:	9f 93       	push	r25
    4b54:	8f 93       	push	r24
    4b56:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4b5a:	0f 90       	pop	r0
    4b5c:	0f 90       	pop	r0
    4b5e:	0f 90       	pop	r0
    4b60:	0f 90       	pop	r0
    4b62:	85 ed       	ldi	r24, 0xD5	; 213
    4b64:	95 e0       	ldi	r25, 0x05	; 5
    4b66:	b8 c0       	rjmp	.+368    	; 0x4cd8 <mousekey_param_inc+0x1de>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    4b68:	20 91 13 01 	lds	r18, 0x0113
    4b6c:	86 2f       	mov	r24, r22
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	82 0f       	add	r24, r18
    4b72:	91 1d       	adc	r25, r1
    4b74:	8f 3f       	cpi	r24, 0xFF	; 255
    4b76:	91 05       	cpc	r25, r1
    4b78:	20 f4       	brcc	.+8      	; 0x4b82 <mousekey_param_inc+0x88>
                mk_interval += inc;
    4b7a:	62 0f       	add	r22, r18
    4b7c:	60 93 13 01 	sts	0x0113, r22
    4b80:	03 c0       	rjmp	.+6      	; 0x4b88 <mousekey_param_inc+0x8e>
            else
                mk_interval = UINT8_MAX;
    4b82:	8f ef       	ldi	r24, 0xFF	; 255
    4b84:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_interval);
    4b88:	86 ec       	ldi	r24, 0xC6	; 198
    4b8a:	95 e0       	ldi	r25, 0x05	; 5
    4b8c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4b90:	80 91 13 01 	lds	r24, 0x0113
    4b94:	1f 92       	push	r1
    4b96:	8f 93       	push	r24
    4b98:	83 ec       	ldi	r24, 0xC3	; 195
    4b9a:	95 e0       	ldi	r25, 0x05	; 5
    4b9c:	9f 93       	push	r25
    4b9e:	8f 93       	push	r24
    4ba0:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4ba4:	0f 90       	pop	r0
    4ba6:	0f 90       	pop	r0
    4ba8:	0f 90       	pop	r0
    4baa:	0f 90       	pop	r0
    4bac:	81 ec       	ldi	r24, 0xC1	; 193
    4bae:	95 e0       	ldi	r25, 0x05	; 5
    4bb0:	93 c0       	rjmp	.+294    	; 0x4cd8 <mousekey_param_inc+0x1de>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    4bb2:	20 91 12 01 	lds	r18, 0x0112
    4bb6:	86 2f       	mov	r24, r22
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	82 0f       	add	r24, r18
    4bbc:	91 1d       	adc	r25, r1
    4bbe:	8f 3f       	cpi	r24, 0xFF	; 255
    4bc0:	91 05       	cpc	r25, r1
    4bc2:	20 f4       	brcc	.+8      	; 0x4bcc <mousekey_param_inc+0xd2>
                mk_max_speed += inc;
    4bc4:	62 0f       	add	r22, r18
    4bc6:	60 93 12 01 	sts	0x0112, r22
    4bca:	03 c0       	rjmp	.+6      	; 0x4bd2 <mousekey_param_inc+0xd8>
            else
                mk_max_speed = UINT8_MAX;
    4bcc:	8f ef       	ldi	r24, 0xFF	; 255
    4bce:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_max_speed);
    4bd2:	81 eb       	ldi	r24, 0xB1	; 177
    4bd4:	95 e0       	ldi	r25, 0x05	; 5
    4bd6:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4bda:	80 91 12 01 	lds	r24, 0x0112
    4bde:	1f 92       	push	r1
    4be0:	8f 93       	push	r24
    4be2:	8e ea       	ldi	r24, 0xAE	; 174
    4be4:	95 e0       	ldi	r25, 0x05	; 5
    4be6:	9f 93       	push	r25
    4be8:	8f 93       	push	r24
    4bea:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4bee:	0f 90       	pop	r0
    4bf0:	0f 90       	pop	r0
    4bf2:	0f 90       	pop	r0
    4bf4:	0f 90       	pop	r0
    4bf6:	8c ea       	ldi	r24, 0xAC	; 172
    4bf8:	95 e0       	ldi	r25, 0x05	; 5
    4bfa:	6e c0       	rjmp	.+220    	; 0x4cd8 <mousekey_param_inc+0x1de>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    4bfc:	20 91 11 01 	lds	r18, 0x0111
    4c00:	86 2f       	mov	r24, r22
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	82 0f       	add	r24, r18
    4c06:	91 1d       	adc	r25, r1
    4c08:	8f 3f       	cpi	r24, 0xFF	; 255
    4c0a:	91 05       	cpc	r25, r1
    4c0c:	20 f4       	brcc	.+8      	; 0x4c16 <mousekey_param_inc+0x11c>
                mk_time_to_max += inc;
    4c0e:	62 0f       	add	r22, r18
    4c10:	60 93 11 01 	sts	0x0111, r22
    4c14:	03 c0       	rjmp	.+6      	; 0x4c1c <mousekey_param_inc+0x122>
            else
                mk_time_to_max = UINT8_MAX;
    4c16:	8f ef       	ldi	r24, 0xFF	; 255
    4c18:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_time_to_max);
    4c1c:	8a e9       	ldi	r24, 0x9A	; 154
    4c1e:	95 e0       	ldi	r25, 0x05	; 5
    4c20:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4c24:	80 91 11 01 	lds	r24, 0x0111
    4c28:	1f 92       	push	r1
    4c2a:	8f 93       	push	r24
    4c2c:	87 e9       	ldi	r24, 0x97	; 151
    4c2e:	95 e0       	ldi	r25, 0x05	; 5
    4c30:	9f 93       	push	r25
    4c32:	8f 93       	push	r24
    4c34:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4c38:	0f 90       	pop	r0
    4c3a:	0f 90       	pop	r0
    4c3c:	0f 90       	pop	r0
    4c3e:	0f 90       	pop	r0
    4c40:	85 e9       	ldi	r24, 0x95	; 149
    4c42:	95 e0       	ldi	r25, 0x05	; 5
    4c44:	49 c0       	rjmp	.+146    	; 0x4cd8 <mousekey_param_inc+0x1de>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4c46:	20 91 10 01 	lds	r18, 0x0110
    4c4a:	86 2f       	mov	r24, r22
    4c4c:	90 e0       	ldi	r25, 0x00	; 0
    4c4e:	82 0f       	add	r24, r18
    4c50:	91 1d       	adc	r25, r1
    4c52:	8f 3f       	cpi	r24, 0xFF	; 255
    4c54:	91 05       	cpc	r25, r1
    4c56:	20 f4       	brcc	.+8      	; 0x4c60 <mousekey_param_inc+0x166>
                mk_wheel_max_speed += inc;
    4c58:	62 0f       	add	r22, r18
    4c5a:	60 93 10 01 	sts	0x0110, r22
    4c5e:	03 c0       	rjmp	.+6      	; 0x4c66 <mousekey_param_inc+0x16c>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4c60:	8f ef       	ldi	r24, 0xFF	; 255
    4c62:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4c66:	8f e7       	ldi	r24, 0x7F	; 127
    4c68:	95 e0       	ldi	r25, 0x05	; 5
    4c6a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4c6e:	80 91 10 01 	lds	r24, 0x0110
    4c72:	1f 92       	push	r1
    4c74:	8f 93       	push	r24
    4c76:	8c e7       	ldi	r24, 0x7C	; 124
    4c78:	95 e0       	ldi	r25, 0x05	; 5
    4c7a:	9f 93       	push	r25
    4c7c:	8f 93       	push	r24
    4c7e:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4c82:	0f 90       	pop	r0
    4c84:	0f 90       	pop	r0
    4c86:	0f 90       	pop	r0
    4c88:	0f 90       	pop	r0
    4c8a:	8a e7       	ldi	r24, 0x7A	; 122
    4c8c:	95 e0       	ldi	r25, 0x05	; 5
    4c8e:	24 c0       	rjmp	.+72     	; 0x4cd8 <mousekey_param_inc+0x1de>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4c90:	20 91 0f 01 	lds	r18, 0x010F
    4c94:	86 2f       	mov	r24, r22
    4c96:	90 e0       	ldi	r25, 0x00	; 0
    4c98:	82 0f       	add	r24, r18
    4c9a:	91 1d       	adc	r25, r1
    4c9c:	8f 3f       	cpi	r24, 0xFF	; 255
    4c9e:	91 05       	cpc	r25, r1
    4ca0:	20 f4       	brcc	.+8      	; 0x4caa <mousekey_param_inc+0x1b0>
                mk_wheel_time_to_max += inc;
    4ca2:	62 0f       	add	r22, r18
    4ca4:	60 93 0f 01 	sts	0x010F, r22
    4ca8:	03 c0       	rjmp	.+6      	; 0x4cb0 <mousekey_param_inc+0x1b6>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4caa:	8f ef       	ldi	r24, 0xFF	; 255
    4cac:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4cb0:	82 e6       	ldi	r24, 0x62	; 98
    4cb2:	95 e0       	ldi	r25, 0x05	; 5
    4cb4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4cb8:	80 91 0f 01 	lds	r24, 0x010F
    4cbc:	1f 92       	push	r1
    4cbe:	8f 93       	push	r24
    4cc0:	8f e5       	ldi	r24, 0x5F	; 95
    4cc2:	95 e0       	ldi	r25, 0x05	; 5
    4cc4:	9f 93       	push	r25
    4cc6:	8f 93       	push	r24
    4cc8:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4ccc:	0f 90       	pop	r0
    4cce:	0f 90       	pop	r0
    4cd0:	0f 90       	pop	r0
    4cd2:	0f 90       	pop	r0
    4cd4:	8d e5       	ldi	r24, 0x5D	; 93
    4cd6:	95 e0       	ldi	r25, 0x05	; 5
    4cd8:	0c 94 0e 08 	jmp	0x101c	; 0x101c <xputs>

00004cdc <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    4cdc:	83 30       	cpi	r24, 0x03	; 3
    4cde:	09 f4       	brne	.+2      	; 0x4ce2 <mousekey_param_dec+0x6>
    4ce0:	4d c0       	rjmp	.+154    	; 0x4d7c <mousekey_param_dec+0xa0>
    4ce2:	28 f4       	brcc	.+10     	; 0x4cee <mousekey_param_dec+0x12>
    4ce4:	81 30       	cpi	r24, 0x01	; 1
    4ce6:	61 f0       	breq	.+24     	; 0x4d00 <mousekey_param_dec+0x24>
    4ce8:	82 30       	cpi	r24, 0x02	; 2
    4cea:	49 f1       	breq	.+82     	; 0x4d3e <mousekey_param_dec+0x62>
    4cec:	08 95       	ret
    4cee:	85 30       	cpi	r24, 0x05	; 5
    4cf0:	09 f4       	brne	.+2      	; 0x4cf4 <mousekey_param_dec+0x18>
    4cf2:	82 c0       	rjmp	.+260    	; 0x4df8 <mousekey_param_dec+0x11c>
    4cf4:	08 f4       	brcc	.+2      	; 0x4cf8 <mousekey_param_dec+0x1c>
    4cf6:	61 c0       	rjmp	.+194    	; 0x4dba <mousekey_param_dec+0xde>
    4cf8:	86 30       	cpi	r24, 0x06	; 6
    4cfa:	09 f4       	brne	.+2      	; 0x4cfe <mousekey_param_dec+0x22>
    4cfc:	9c c0       	rjmp	.+312    	; 0x4e36 <mousekey_param_dec+0x15a>
    4cfe:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    4d00:	80 91 14 01 	lds	r24, 0x0114
    4d04:	68 17       	cp	r22, r24
    4d06:	20 f4       	brcc	.+8      	; 0x4d10 <mousekey_param_dec+0x34>
                mk_delay -= dec;
    4d08:	86 1b       	sub	r24, r22
    4d0a:	80 93 14 01 	sts	0x0114, r24
    4d0e:	02 c0       	rjmp	.+4      	; 0x4d14 <mousekey_param_dec+0x38>
            else
                mk_delay = 0;
    4d10:	10 92 14 01 	sts	0x0114, r1
            PRINT_SET_VAL(mk_delay);
    4d14:	81 e5       	ldi	r24, 0x51	; 81
    4d16:	95 e0       	ldi	r25, 0x05	; 5
    4d18:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4d1c:	80 91 14 01 	lds	r24, 0x0114
    4d20:	1f 92       	push	r1
    4d22:	8f 93       	push	r24
    4d24:	8e e4       	ldi	r24, 0x4E	; 78
    4d26:	95 e0       	ldi	r25, 0x05	; 5
    4d28:	9f 93       	push	r25
    4d2a:	8f 93       	push	r24
    4d2c:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4d30:	0f 90       	pop	r0
    4d32:	0f 90       	pop	r0
    4d34:	0f 90       	pop	r0
    4d36:	0f 90       	pop	r0
    4d38:	8c e4       	ldi	r24, 0x4C	; 76
    4d3a:	95 e0       	ldi	r25, 0x05	; 5
    4d3c:	9a c0       	rjmp	.+308    	; 0x4e72 <mousekey_param_dec+0x196>
            break;
        case 2:
            if (mk_interval > dec)
    4d3e:	80 91 13 01 	lds	r24, 0x0113
    4d42:	68 17       	cp	r22, r24
    4d44:	20 f4       	brcc	.+8      	; 0x4d4e <mousekey_param_dec+0x72>
                mk_interval -= dec;
    4d46:	86 1b       	sub	r24, r22
    4d48:	80 93 13 01 	sts	0x0113, r24
    4d4c:	02 c0       	rjmp	.+4      	; 0x4d52 <mousekey_param_dec+0x76>
            else
                mk_interval = 0;
    4d4e:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_interval);
    4d52:	8d e3       	ldi	r24, 0x3D	; 61
    4d54:	95 e0       	ldi	r25, 0x05	; 5
    4d56:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4d5a:	80 91 13 01 	lds	r24, 0x0113
    4d5e:	1f 92       	push	r1
    4d60:	8f 93       	push	r24
    4d62:	8a e3       	ldi	r24, 0x3A	; 58
    4d64:	95 e0       	ldi	r25, 0x05	; 5
    4d66:	9f 93       	push	r25
    4d68:	8f 93       	push	r24
    4d6a:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4d6e:	0f 90       	pop	r0
    4d70:	0f 90       	pop	r0
    4d72:	0f 90       	pop	r0
    4d74:	0f 90       	pop	r0
    4d76:	88 e3       	ldi	r24, 0x38	; 56
    4d78:	95 e0       	ldi	r25, 0x05	; 5
    4d7a:	7b c0       	rjmp	.+246    	; 0x4e72 <mousekey_param_dec+0x196>
            break;
        case 3:
            if (mk_max_speed > dec)
    4d7c:	80 91 12 01 	lds	r24, 0x0112
    4d80:	68 17       	cp	r22, r24
    4d82:	20 f4       	brcc	.+8      	; 0x4d8c <mousekey_param_dec+0xb0>
                mk_max_speed -= dec;
    4d84:	86 1b       	sub	r24, r22
    4d86:	80 93 12 01 	sts	0x0112, r24
    4d8a:	02 c0       	rjmp	.+4      	; 0x4d90 <mousekey_param_dec+0xb4>
            else
                mk_max_speed = 0;
    4d8c:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_max_speed);
    4d90:	88 e2       	ldi	r24, 0x28	; 40
    4d92:	95 e0       	ldi	r25, 0x05	; 5
    4d94:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4d98:	80 91 12 01 	lds	r24, 0x0112
    4d9c:	1f 92       	push	r1
    4d9e:	8f 93       	push	r24
    4da0:	85 e2       	ldi	r24, 0x25	; 37
    4da2:	95 e0       	ldi	r25, 0x05	; 5
    4da4:	9f 93       	push	r25
    4da6:	8f 93       	push	r24
    4da8:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4dac:	0f 90       	pop	r0
    4dae:	0f 90       	pop	r0
    4db0:	0f 90       	pop	r0
    4db2:	0f 90       	pop	r0
    4db4:	83 e2       	ldi	r24, 0x23	; 35
    4db6:	95 e0       	ldi	r25, 0x05	; 5
    4db8:	5c c0       	rjmp	.+184    	; 0x4e72 <mousekey_param_dec+0x196>
            break;
        case 4:
            if (mk_time_to_max > dec)
    4dba:	80 91 11 01 	lds	r24, 0x0111
    4dbe:	68 17       	cp	r22, r24
    4dc0:	20 f4       	brcc	.+8      	; 0x4dca <mousekey_param_dec+0xee>
                mk_time_to_max -= dec;
    4dc2:	86 1b       	sub	r24, r22
    4dc4:	80 93 11 01 	sts	0x0111, r24
    4dc8:	02 c0       	rjmp	.+4      	; 0x4dce <mousekey_param_dec+0xf2>
            else
                mk_time_to_max = 0;
    4dca:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_time_to_max);
    4dce:	81 e1       	ldi	r24, 0x11	; 17
    4dd0:	95 e0       	ldi	r25, 0x05	; 5
    4dd2:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4dd6:	80 91 11 01 	lds	r24, 0x0111
    4dda:	1f 92       	push	r1
    4ddc:	8f 93       	push	r24
    4dde:	8e e0       	ldi	r24, 0x0E	; 14
    4de0:	95 e0       	ldi	r25, 0x05	; 5
    4de2:	9f 93       	push	r25
    4de4:	8f 93       	push	r24
    4de6:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4dea:	0f 90       	pop	r0
    4dec:	0f 90       	pop	r0
    4dee:	0f 90       	pop	r0
    4df0:	0f 90       	pop	r0
    4df2:	8c e0       	ldi	r24, 0x0C	; 12
    4df4:	95 e0       	ldi	r25, 0x05	; 5
    4df6:	3d c0       	rjmp	.+122    	; 0x4e72 <mousekey_param_dec+0x196>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    4df8:	80 91 10 01 	lds	r24, 0x0110
    4dfc:	68 17       	cp	r22, r24
    4dfe:	20 f4       	brcc	.+8      	; 0x4e08 <mousekey_param_dec+0x12c>
                mk_wheel_max_speed -= dec;
    4e00:	86 1b       	sub	r24, r22
    4e02:	80 93 10 01 	sts	0x0110, r24
    4e06:	02 c0       	rjmp	.+4      	; 0x4e0c <mousekey_param_dec+0x130>
            else
                mk_wheel_max_speed = 0;
    4e08:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4e0c:	86 ef       	ldi	r24, 0xF6	; 246
    4e0e:	94 e0       	ldi	r25, 0x04	; 4
    4e10:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4e14:	80 91 10 01 	lds	r24, 0x0110
    4e18:	1f 92       	push	r1
    4e1a:	8f 93       	push	r24
    4e1c:	83 ef       	ldi	r24, 0xF3	; 243
    4e1e:	94 e0       	ldi	r25, 0x04	; 4
    4e20:	9f 93       	push	r25
    4e22:	8f 93       	push	r24
    4e24:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4e28:	0f 90       	pop	r0
    4e2a:	0f 90       	pop	r0
    4e2c:	0f 90       	pop	r0
    4e2e:	0f 90       	pop	r0
    4e30:	81 ef       	ldi	r24, 0xF1	; 241
    4e32:	94 e0       	ldi	r25, 0x04	; 4
    4e34:	1e c0       	rjmp	.+60     	; 0x4e72 <mousekey_param_dec+0x196>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    4e36:	80 91 0f 01 	lds	r24, 0x010F
    4e3a:	68 17       	cp	r22, r24
    4e3c:	20 f4       	brcc	.+8      	; 0x4e46 <mousekey_param_dec+0x16a>
                mk_wheel_time_to_max -= dec;
    4e3e:	86 1b       	sub	r24, r22
    4e40:	80 93 0f 01 	sts	0x010F, r24
    4e44:	02 c0       	rjmp	.+4      	; 0x4e4a <mousekey_param_dec+0x16e>
            else
                mk_wheel_time_to_max = 0;
    4e46:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4e4a:	89 ed       	ldi	r24, 0xD9	; 217
    4e4c:	94 e0       	ldi	r25, 0x04	; 4
    4e4e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4e52:	80 91 0f 01 	lds	r24, 0x010F
    4e56:	1f 92       	push	r1
    4e58:	8f 93       	push	r24
    4e5a:	86 ed       	ldi	r24, 0xD6	; 214
    4e5c:	94 e0       	ldi	r25, 0x04	; 4
    4e5e:	9f 93       	push	r25
    4e60:	8f 93       	push	r24
    4e62:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4e66:	0f 90       	pop	r0
    4e68:	0f 90       	pop	r0
    4e6a:	0f 90       	pop	r0
    4e6c:	0f 90       	pop	r0
    4e6e:	84 ed       	ldi	r24, 0xD4	; 212
    4e70:	94 e0       	ldi	r25, 0x04	; 4
    4e72:	0c 94 0e 08 	jmp	0x101c	; 0x101c <xputs>

00004e76 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    4e76:	cf 93       	push	r28
    4e78:	c8 2f       	mov	r28, r24
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    4e7a:	8f e4       	ldi	r24, 0x4F	; 79
    4e7c:	99 e0       	ldi	r25, 0x09	; 9
    4e7e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4e82:	60 91 ac 01 	lds	r22, 0x01AC
    4e86:	70 91 ad 01 	lds	r23, 0x01AD
    4e8a:	80 91 ae 01 	lds	r24, 0x01AE
    4e8e:	90 91 af 01 	lds	r25, 0x01AF
    4e92:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <biton32>
    4e96:	1f 92       	push	r1
    4e98:	8f 93       	push	r24
    4e9a:	2c e4       	ldi	r18, 0x4C	; 76
    4e9c:	39 e0       	ldi	r19, 0x09	; 9
    4e9e:	3f 93       	push	r19
    4ea0:	2f 93       	push	r18
    4ea2:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    print(" to "); print_dec(layer); print("\n");
    4ea6:	87 e4       	ldi	r24, 0x47	; 71
    4ea8:	99 e0       	ldi	r25, 0x09	; 9
    4eaa:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4eae:	1f 92       	push	r1
    4eb0:	cf 93       	push	r28
    4eb2:	24 e4       	ldi	r18, 0x44	; 68
    4eb4:	39 e0       	ldi	r19, 0x09	; 9
    4eb6:	3f 93       	push	r19
    4eb8:	2f 93       	push	r18
    4eba:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4ebe:	82 e4       	ldi	r24, 0x42	; 66
    4ec0:	99 e0       	ldi	r25, 0x09	; 9
    4ec2:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    default_layer_set(1UL<<layer);
    4ec6:	61 e0       	ldi	r22, 0x01	; 1
    4ec8:	70 e0       	ldi	r23, 0x00	; 0
    4eca:	80 e0       	ldi	r24, 0x00	; 0
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	04 c0       	rjmp	.+8      	; 0x4ed8 <switch_default_layer+0x62>
    4ed0:	66 0f       	add	r22, r22
    4ed2:	77 1f       	adc	r23, r23
    4ed4:	88 1f       	adc	r24, r24
    4ed6:	99 1f       	adc	r25, r25
    4ed8:	ca 95       	dec	r28
    4eda:	d2 f7       	brpl	.-12     	; 0x4ed0 <switch_default_layer+0x5a>
    4edc:	0e 94 b7 1b 	call	0x376e	; 0x376e <default_layer_set>
    clear_keyboard();
    4ee0:	8d b7       	in	r24, 0x3d	; 61
    4ee2:	9e b7       	in	r25, 0x3e	; 62
    4ee4:	08 96       	adiw	r24, 0x08	; 8
    4ee6:	0f b6       	in	r0, 0x3f	; 63
    4ee8:	f8 94       	cli
    4eea:	9e bf       	out	0x3e, r25	; 62
    4eec:	0f be       	out	0x3f, r0	; 63
    4eee:	8d bf       	out	0x3d, r24	; 61
}
    4ef0:	cf 91       	pop	r28
static void switch_default_layer(uint8_t layer)
{
    print("switch_default_layer: "); print_dec(biton32(default_layer_state));
    print(" to "); print_dec(layer); print("\n");
    default_layer_set(1UL<<layer);
    clear_keyboard();
    4ef2:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <clear_keyboard>

00004ef6 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    4ef6:	cf 93       	push	r28
    static host_driver_t *host_driver = 0;
    switch (code) {
    4ef8:	48 2f       	mov	r20, r24
    4efa:	50 e0       	ldi	r21, 0x00	; 0
    4efc:	fa 01       	movw	r30, r20
    4efe:	36 97       	sbiw	r30, 0x06	; 6
    4f00:	e3 34       	cpi	r30, 0x43	; 67
    4f02:	f1 05       	cpc	r31, r1
    4f04:	08 f0       	brcs	.+2      	; 0x4f08 <command_common+0x12>
    4f06:	ae c2       	rjmp	.+1372   	; 0x5464 <command_common+0x56e>
    4f08:	e0 59       	subi	r30, 0x90	; 144
    4f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f0c:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__tablejump2__>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    4f10:	8d e6       	ldi	r24, 0x6D	; 109
    4f12:	9f e0       	ldi	r25, 0x0F	; 15
    4f14:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    4f18:	8d ea       	ldi	r24, 0xAD	; 173
    4f1a:	9c e0       	ldi	r25, 0x0C	; 12
    4f1c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4f20:	0e 94 51 22 	call	0x44a2	; 0x44a2 <eeconfig_read_default_layer>
    4f24:	1f 92       	push	r1
    4f26:	8f 93       	push	r24
    4f28:	8a ea       	ldi	r24, 0xAA	; 170
    4f2a:	9c e0       	ldi	r25, 0x0C	; 12
    4f2c:	9f 93       	push	r25
    4f2e:	8f 93       	push	r24
    4f30:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4f34:	88 ea       	ldi	r24, 0xA8	; 168
    4f36:	9c e0       	ldi	r25, 0x0C	; 12
    4f38:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    4f3c:	0e 94 48 22 	call	0x4490	; 0x4490 <eeconfig_read_debug>
    4f40:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    4f42:	85 e9       	ldi	r24, 0x95	; 149
    4f44:	9c e0       	ldi	r25, 0x0C	; 12
    4f46:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4f4a:	1f 92       	push	r1
    4f4c:	cf 93       	push	r28
    4f4e:	20 e9       	ldi	r18, 0x90	; 144
    4f50:	3c e0       	ldi	r19, 0x0C	; 12
    4f52:	3f 93       	push	r19
    4f54:	2f 93       	push	r18
    4f56:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4f5a:	8e e8       	ldi	r24, 0x8E	; 142
    4f5c:	9c e0       	ldi	r25, 0x0C	; 12
    4f5e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4f62:	84 e8       	ldi	r24, 0x84	; 132
    4f64:	9c e0       	ldi	r25, 0x0C	; 12
    4f66:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4f6a:	8c 2f       	mov	r24, r28
    4f6c:	81 70       	andi	r24, 0x01	; 1
    4f6e:	1f 92       	push	r1
    4f70:	8f 93       	push	r24
    4f72:	21 e8       	ldi	r18, 0x81	; 129
    4f74:	3c e0       	ldi	r19, 0x0C	; 12
    4f76:	3f 93       	push	r19
    4f78:	2f 93       	push	r18
    4f7a:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4f7e:	8f e7       	ldi	r24, 0x7F	; 127
    4f80:	9c e0       	ldi	r25, 0x0C	; 12
    4f82:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4f86:	85 e7       	ldi	r24, 0x75	; 117
    4f88:	9c e0       	ldi	r25, 0x0C	; 12
    4f8a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4f8e:	c1 fb       	bst	r28, 1
    4f90:	88 27       	eor	r24, r24
    4f92:	80 f9       	bld	r24, 0
    4f94:	1f 92       	push	r1
    4f96:	8f 93       	push	r24
    4f98:	22 e7       	ldi	r18, 0x72	; 114
    4f9a:	3c e0       	ldi	r19, 0x0C	; 12
    4f9c:	3f 93       	push	r19
    4f9e:	2f 93       	push	r18
    4fa0:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4fa4:	80 e7       	ldi	r24, 0x70	; 112
    4fa6:	9c e0       	ldi	r25, 0x0C	; 12
    4fa8:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4fac:	84 e6       	ldi	r24, 0x64	; 100
    4fae:	9c e0       	ldi	r25, 0x0C	; 12
    4fb0:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4fb4:	c2 fb       	bst	r28, 2
    4fb6:	88 27       	eor	r24, r24
    4fb8:	80 f9       	bld	r24, 0
    4fba:	1f 92       	push	r1
    4fbc:	8f 93       	push	r24
    4fbe:	21 e6       	ldi	r18, 0x61	; 97
    4fc0:	3c e0       	ldi	r19, 0x0C	; 12
    4fc2:	3f 93       	push	r19
    4fc4:	2f 93       	push	r18
    4fc6:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4fca:	8f e5       	ldi	r24, 0x5F	; 95
    4fcc:	9c e0       	ldi	r25, 0x0C	; 12
    4fce:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4fd2:	86 e5       	ldi	r24, 0x56	; 86
    4fd4:	9c e0       	ldi	r25, 0x0C	; 12
    4fd6:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    4fda:	c3 fb       	bst	r28, 3
    4fdc:	cc 27       	eor	r28, r28
    4fde:	c0 f9       	bld	r28, 0
    4fe0:	1f 92       	push	r1
    4fe2:	cf 93       	push	r28
    4fe4:	83 e5       	ldi	r24, 0x53	; 83
    4fe6:	9c e0       	ldi	r25, 0x0C	; 12
    4fe8:	9f 93       	push	r25
    4fea:	8f 93       	push	r24
    4fec:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    4ff0:	81 e5       	ldi	r24, 0x51	; 81
    4ff2:	9c e0       	ldi	r25, 0x0C	; 12
    4ff4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4ff8:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <eeconfig_read_keymap>
    4ffc:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4ffe:	8d e3       	ldi	r24, 0x3D	; 61
    5000:	9c e0       	ldi	r25, 0x0C	; 12
    5002:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5006:	1f 92       	push	r1
    5008:	cf 93       	push	r28
    500a:	28 e3       	ldi	r18, 0x38	; 56
    500c:	3c e0       	ldi	r19, 0x0C	; 12
    500e:	3f 93       	push	r19
    5010:	2f 93       	push	r18
    5012:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    5016:	86 e3       	ldi	r24, 0x36	; 54
    5018:	9c e0       	ldi	r25, 0x0C	; 12
    501a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    501e:	8d e1       	ldi	r24, 0x1D	; 29
    5020:	9c e0       	ldi	r25, 0x0C	; 12
    5022:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5026:	8c 2f       	mov	r24, r28
    5028:	81 70       	andi	r24, 0x01	; 1
    502a:	1f 92       	push	r1
    502c:	8f 93       	push	r24
    502e:	2a e1       	ldi	r18, 0x1A	; 26
    5030:	3c e0       	ldi	r19, 0x0C	; 12
    5032:	3f 93       	push	r19
    5034:	2f 93       	push	r18
    5036:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    503a:	8d b7       	in	r24, 0x3d	; 61
    503c:	9e b7       	in	r25, 0x3e	; 62
    503e:	80 96       	adiw	r24, 0x20	; 32
    5040:	0f b6       	in	r0, 0x3f	; 63
    5042:	f8 94       	cli
    5044:	9e bf       	out	0x3e, r25	; 62
    5046:	0f be       	out	0x3f, r0	; 63
    5048:	8d bf       	out	0x3d, r24	; 61
    504a:	88 e1       	ldi	r24, 0x18	; 24
    504c:	9c e0       	ldi	r25, 0x0C	; 12
    504e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    5052:	81 e0       	ldi	r24, 0x01	; 1
    5054:	9c e0       	ldi	r25, 0x0C	; 12
    5056:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    505a:	c1 fb       	bst	r28, 1
    505c:	88 27       	eor	r24, r24
    505e:	80 f9       	bld	r24, 0
    5060:	1f 92       	push	r1
    5062:	8f 93       	push	r24
    5064:	2e ef       	ldi	r18, 0xFE	; 254
    5066:	3b e0       	ldi	r19, 0x0B	; 11
    5068:	3f 93       	push	r19
    506a:	2f 93       	push	r18
    506c:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    5070:	8c ef       	ldi	r24, 0xFC	; 252
    5072:	9b e0       	ldi	r25, 0x0B	; 11
    5074:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    5078:	8a ee       	ldi	r24, 0xEA	; 234
    507a:	9b e0       	ldi	r25, 0x0B	; 11
    507c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5080:	c2 fb       	bst	r28, 2
    5082:	88 27       	eor	r24, r24
    5084:	80 f9       	bld	r24, 0
    5086:	1f 92       	push	r1
    5088:	8f 93       	push	r24
    508a:	27 ee       	ldi	r18, 0xE7	; 231
    508c:	3b e0       	ldi	r19, 0x0B	; 11
    508e:	3f 93       	push	r19
    5090:	2f 93       	push	r18
    5092:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    5096:	85 ee       	ldi	r24, 0xE5	; 229
    5098:	9b e0       	ldi	r25, 0x0B	; 11
    509a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    509e:	83 ed       	ldi	r24, 0xD3	; 211
    50a0:	9b e0       	ldi	r25, 0x0B	; 11
    50a2:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    50a6:	c3 fb       	bst	r28, 3
    50a8:	88 27       	eor	r24, r24
    50aa:	80 f9       	bld	r24, 0
    50ac:	1f 92       	push	r1
    50ae:	8f 93       	push	r24
    50b0:	20 ed       	ldi	r18, 0xD0	; 208
    50b2:	3b e0       	ldi	r19, 0x0B	; 11
    50b4:	3f 93       	push	r19
    50b6:	2f 93       	push	r18
    50b8:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    50bc:	8e ec       	ldi	r24, 0xCE	; 206
    50be:	9b e0       	ldi	r25, 0x0B	; 11
    50c0:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    50c4:	84 ec       	ldi	r24, 0xC4	; 196
    50c6:	9b e0       	ldi	r25, 0x0B	; 11
    50c8:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    50cc:	c4 fb       	bst	r28, 4
    50ce:	88 27       	eor	r24, r24
    50d0:	80 f9       	bld	r24, 0
    50d2:	1f 92       	push	r1
    50d4:	8f 93       	push	r24
    50d6:	21 ec       	ldi	r18, 0xC1	; 193
    50d8:	3b e0       	ldi	r19, 0x0B	; 11
    50da:	3f 93       	push	r19
    50dc:	2f 93       	push	r18
    50de:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    50e2:	8f eb       	ldi	r24, 0xBF	; 191
    50e4:	9b e0       	ldi	r25, 0x0B	; 11
    50e6:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    50ea:	8d ea       	ldi	r24, 0xAD	; 173
    50ec:	9b e0       	ldi	r25, 0x0B	; 11
    50ee:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    50f2:	c5 fb       	bst	r28, 5
    50f4:	88 27       	eor	r24, r24
    50f6:	80 f9       	bld	r24, 0
    50f8:	1f 92       	push	r1
    50fa:	8f 93       	push	r24
    50fc:	2a ea       	ldi	r18, 0xAA	; 170
    50fe:	3b e0       	ldi	r19, 0x0B	; 11
    5100:	3f 93       	push	r19
    5102:	2f 93       	push	r18
    5104:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    5108:	88 ea       	ldi	r24, 0xA8	; 168
    510a:	9b e0       	ldi	r25, 0x0B	; 11
    510c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    5110:	8c e8       	ldi	r24, 0x8C	; 140
    5112:	9b e0       	ldi	r25, 0x0B	; 11
    5114:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5118:	c6 fb       	bst	r28, 6
    511a:	88 27       	eor	r24, r24
    511c:	80 f9       	bld	r24, 0
    511e:	1f 92       	push	r1
    5120:	8f 93       	push	r24
    5122:	29 e8       	ldi	r18, 0x89	; 137
    5124:	3b e0       	ldi	r19, 0x0B	; 11
    5126:	3f 93       	push	r19
    5128:	2f 93       	push	r18
    512a:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    512e:	87 e8       	ldi	r24, 0x87	; 135
    5130:	9b e0       	ldi	r25, 0x0B	; 11
    5132:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    5136:	8f e7       	ldi	r24, 0x7F	; 127
    5138:	9b e0       	ldi	r25, 0x0B	; 11
    513a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    513e:	c7 fb       	bst	r28, 7
    5140:	cc 27       	eor	r28, r28
    5142:	c0 f9       	bld	r28, 0
    5144:	1f 92       	push	r1
    5146:	cf 93       	push	r28
    5148:	8c e7       	ldi	r24, 0x7C	; 124
    514a:	9b e0       	ldi	r25, 0x0B	; 11
    514c:	9f 93       	push	r25
    514e:	8f 93       	push	r24
    5150:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    5154:	8a e7       	ldi	r24, 0x7A	; 122
    5156:	9b e0       	ldi	r25, 0x0B	; 11
    5158:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    515c:	8d b7       	in	r24, 0x3d	; 61
    515e:	9e b7       	in	r25, 0x3e	; 62
    5160:	4c 96       	adiw	r24, 0x1c	; 28
    5162:	0f b6       	in	r0, 0x3f	; 63
    5164:	f8 94       	cli
    5166:	9e bf       	out	0x3e, r25	; 62
    5168:	0f be       	out	0x3f, r0	; 63
    516a:	8d bf       	out	0x3d, r24	; 61
    516c:	1d c0       	rjmp	.+58     	; 0x51a8 <command_common+0x2b2>
            print("eeconfig:\n");
            print_eeconfig();
            break;
#endif
        case KC_CAPSLOCK:
            if (host_get_driver()) {
    516e:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <host_get_driver>
    5172:	89 2b       	or	r24, r25
    5174:	79 f0       	breq	.+30     	; 0x5194 <command_common+0x29e>
                host_driver = host_get_driver();
    5176:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <host_get_driver>
    517a:	90 93 d6 01 	sts	0x01D6, r25
    517e:	80 93 d5 01 	sts	0x01D5, r24
                clear_keyboard();
    5182:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <clear_keyboard>
                host_set_driver(0);
    5186:	80 e0       	ldi	r24, 0x00	; 0
    5188:	90 e0       	ldi	r25, 0x00	; 0
    518a:	0e 94 df 11 	call	0x23be	; 0x23be <host_set_driver>
                print("Locked.\n");
    518e:	84 e6       	ldi	r24, 0x64	; 100
    5190:	9f e0       	ldi	r25, 0x0F	; 15
    5192:	08 c0       	rjmp	.+16     	; 0x51a4 <command_common+0x2ae>
            } else {
                host_set_driver(host_driver);
    5194:	80 91 d5 01 	lds	r24, 0x01D5
    5198:	90 91 d6 01 	lds	r25, 0x01D6
    519c:	0e 94 df 11 	call	0x23be	; 0x23be <host_set_driver>
                print("Unlocked.\n");
    51a0:	89 e5       	ldi	r24, 0x59	; 89
    51a2:	9f e0       	ldi	r25, 0x0F	; 15
    51a4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    51a8:	c1 e0       	ldi	r28, 0x01	; 1
    51aa:	61 c1       	rjmp	.+706    	; 0x546e <command_common+0x578>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\n----- Command Help -----\n");
    51ac:	8e e5       	ldi	r24, 0x5E	; 94
    51ae:	9b e0       	ldi	r25, 0x0B	; 11
    51b0:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("c:	enter console mode\n");
    51b4:	87 e4       	ldi	r24, 0x47	; 71
    51b6:	9b e0       	ldi	r25, 0x0B	; 11
    51b8:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("d:	toggle debug enable\n");
    51bc:	8f e2       	ldi	r24, 0x2F	; 47
    51be:	9b e0       	ldi	r25, 0x0B	; 11
    51c0:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("x:	toggle matrix debug\n");
    51c4:	87 e1       	ldi	r24, 0x17	; 23
    51c6:	9b e0       	ldi	r25, 0x0B	; 11
    51c8:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("k:	toggle keyboard debug\n");
    51cc:	8d ef       	ldi	r24, 0xFD	; 253
    51ce:	9a e0       	ldi	r25, 0x0A	; 10
    51d0:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("m:	toggle mouse debug\n");
    51d4:	86 ee       	ldi	r24, 0xE6	; 230
    51d6:	9a e0       	ldi	r25, 0x0A	; 10
    51d8:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
#ifdef SLEEP_LED_ENABLE
    print("z:	toggle sleep LED test\n");
#endif
    print("v:	print device version & info\n");
    51dc:	86 ec       	ldi	r24, 0xC6	; 198
    51de:	9a e0       	ldi	r25, 0x0A	; 10
    51e0:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("t:	print timer count\n");
    51e4:	80 eb       	ldi	r24, 0xB0	; 176
    51e6:	9a e0       	ldi	r25, 0x0A	; 10
    51e8:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("s:	print status\n");
    51ec:	8f e9       	ldi	r24, 0x9F	; 159
    51ee:	9a e0       	ldi	r25, 0x0A	; 10
    51f0:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("e:	print eeprom config\n");
    51f4:	87 e8       	ldi	r24, 0x87	; 135
    51f6:	9a e0       	ldi	r25, 0x0A	; 10
    51f8:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
#ifdef NKRO_ENABLE
    print("n:	toggle NKRO\n");
    51fc:	87 e7       	ldi	r24, 0x77	; 119
    51fe:	9a e0       	ldi	r25, 0x0A	; 10
    5200:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
#endif
    print("0/F10:	switch to Layer0 \n");
    5204:	8d e5       	ldi	r24, 0x5D	; 93
    5206:	9a e0       	ldi	r25, 0x0A	; 10
    5208:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("1/F1:	switch to Layer1 \n");
    520c:	84 e4       	ldi	r24, 0x44	; 68
    520e:	9a e0       	ldi	r25, 0x0A	; 10
    5210:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("2/F2:	switch to Layer2 \n");
    5214:	8b e2       	ldi	r24, 0x2B	; 43
    5216:	9a e0       	ldi	r25, 0x0A	; 10
    5218:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("3/F3:	switch to Layer3 \n");
    521c:	82 e1       	ldi	r24, 0x12	; 18
    521e:	9a e0       	ldi	r25, 0x0A	; 10
    5220:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("4/F4:	switch to Layer4 \n");
    5224:	89 ef       	ldi	r24, 0xF9	; 249
    5226:	99 e0       	ldi	r25, 0x09	; 9
    5228:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("PScr:	power down/remote wake-up\n");
    522c:	88 ed       	ldi	r24, 0xD8	; 216
    522e:	99 e0       	ldi	r25, 0x09	; 9
    5230:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("Caps:	Lock Keyboard(Child Proof)\n");
    5234:	86 eb       	ldi	r24, 0xB6	; 182
    5236:	99 e0       	ldi	r25, 0x09	; 9
    5238:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("Paus:	jump to bootloader\n");
    523c:	8c e9       	ldi	r24, 0x9C	; 156
    523e:	99 e0       	ldi	r25, 0x09	; 9
    5240:	b1 cf       	rjmp	.-158    	; 0x51a4 <command_common+0x2ae>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    5242:	80 91 c3 01 	lds	r24, 0x01C3
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    5246:	81 7f       	andi	r24, 0xF1	; 241
    5248:	8e 7f       	andi	r24, 0xFE	; 254
    524a:	80 93 c3 01 	sts	0x01C3, r24
            command_console_help();
    524e:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <command_console_help>
            print("\nEnter Console Mode\n");
    5252:	84 e4       	ldi	r24, 0x44	; 68
    5254:	9f e0       	ldi	r25, 0x0F	; 15
    5256:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            print("C> ");
    525a:	80 e4       	ldi	r24, 0x40	; 64
    525c:	9f e0       	ldi	r25, 0x0F	; 15
    525e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            command_state = CONSOLE;
    5262:	81 e0       	ldi	r24, 0x01	; 1
    5264:	80 93 d4 01 	sts	0x01D4, r24
    5268:	9f cf       	rjmp	.-194    	; 0x51a8 <command_common+0x2b2>
            break;
        case KC_PAUSE:
            clear_keyboard();
    526a:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <clear_keyboard>
            print("\n\nJump to bootloader... ");
    526e:	87 e2       	ldi	r24, 0x27	; 39
    5270:	9f e0       	ldi	r25, 0x0F	; 15
    5272:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5276:	9f ef       	ldi	r25, 0xFF	; 255
    5278:	23 ed       	ldi	r18, 0xD3	; 211
    527a:	80 e3       	ldi	r24, 0x30	; 48
    527c:	91 50       	subi	r25, 0x01	; 1
    527e:	20 40       	sbci	r18, 0x00	; 0
    5280:	80 40       	sbci	r24, 0x00	; 0
    5282:	e1 f7       	brne	.-8      	; 0x527c <command_common+0x386>
    5284:	00 c0       	rjmp	.+0      	; 0x5286 <command_common+0x390>
    5286:	00 00       	nop
            _delay_ms(1000);
            bootloader_jump(); // not return
    5288:	0e 94 86 20 	call	0x410c	; 0x410c <bootloader_jump>
            print("not supported.\n");
    528c:	87 e1       	ldi	r24, 0x17	; 23
    528e:	9f e0       	ldi	r25, 0x0F	; 15
    5290:	89 cf       	rjmp	.-238    	; 0x51a4 <command_common+0x2ae>
            break;
        case KC_D:
            if (debug_enable) {
    5292:	80 91 c3 01 	lds	r24, 0x01C3
    5296:	c8 2f       	mov	r28, r24
    5298:	c1 70       	andi	r28, 0x01	; 1
    529a:	80 ff       	sbrs	r24, 0
    529c:	09 c0       	rjmp	.+18     	; 0x52b0 <command_common+0x3ba>
                print("\nDEBUG: disabled.\n");
    529e:	84 e0       	ldi	r24, 0x04	; 4
    52a0:	9f e0       	ldi	r25, 0x0F	; 15
    52a2:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
                debug_matrix   = false;
    52a6:	80 91 c3 01 	lds	r24, 0x01C3
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    52aa:	81 7f       	andi	r24, 0xF1	; 241
    52ac:	8e 7f       	andi	r24, 0xFE	; 254
    52ae:	44 c0       	rjmp	.+136    	; 0x5338 <command_common+0x442>
            } else {
                print("\nDEBUG: enabled.\n");
    52b0:	82 ef       	ldi	r24, 0xF2	; 242
    52b2:	9e e0       	ldi	r25, 0x0E	; 14
    52b4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
                debug_enable   = true;
    52b8:	80 91 c3 01 	lds	r24, 0x01C3
    52bc:	81 60       	ori	r24, 0x01	; 1
    52be:	80 93 c3 01 	sts	0x01C3, r24
    52c2:	72 cf       	rjmp	.-284    	; 0x51a8 <command_common+0x2b2>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    52c4:	80 91 c3 01 	lds	r24, 0x01C3
    52c8:	81 fb       	bst	r24, 1
    52ca:	cc 27       	eor	r28, r28
    52cc:	c0 f9       	bld	r28, 0
    52ce:	91 e0       	ldi	r25, 0x01	; 1
    52d0:	c9 27       	eor	r28, r25
    52d2:	c0 fb       	bst	r28, 0
    52d4:	81 f9       	bld	r24, 1
    52d6:	80 93 c3 01 	sts	0x01C3, r24
            if (debug_matrix) {
    52da:	cc 23       	and	r28, r28
    52dc:	19 f0       	breq	.+6      	; 0x52e4 <command_common+0x3ee>
                print("\nDEBUG: matrix enabled.\n");
    52de:	89 ed       	ldi	r24, 0xD9	; 217
    52e0:	9e e0       	ldi	r25, 0x0E	; 14
    52e2:	25 c0       	rjmp	.+74     	; 0x532e <command_common+0x438>
                debug_enable = true;
            } else {
                print("\nDEBUG: matrix disabled.\n");
    52e4:	8f eb       	ldi	r24, 0xBF	; 191
    52e6:	9e e0       	ldi	r25, 0x0E	; 14
    52e8:	5d cf       	rjmp	.-326    	; 0x51a4 <command_common+0x2ae>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    52ea:	80 91 c3 01 	lds	r24, 0x01C3
    52ee:	82 fb       	bst	r24, 2
    52f0:	cc 27       	eor	r28, r28
    52f2:	c0 f9       	bld	r28, 0
    52f4:	91 e0       	ldi	r25, 0x01	; 1
    52f6:	c9 27       	eor	r28, r25
    52f8:	c0 fb       	bst	r28, 0
    52fa:	82 f9       	bld	r24, 2
    52fc:	80 93 c3 01 	sts	0x01C3, r24
            if (debug_keyboard) {
    5300:	cc 23       	and	r28, r28
    5302:	19 f0       	breq	.+6      	; 0x530a <command_common+0x414>
                print("\nDEBUG: keyboard enabled.\n");
    5304:	84 ea       	ldi	r24, 0xA4	; 164
    5306:	9e e0       	ldi	r25, 0x0E	; 14
    5308:	12 c0       	rjmp	.+36     	; 0x532e <command_common+0x438>
                debug_enable = true;
            } else {
                print("\nDEBUG: keyboard disabled.\n");
    530a:	88 e8       	ldi	r24, 0x88	; 136
    530c:	9e e0       	ldi	r25, 0x0E	; 14
    530e:	4a cf       	rjmp	.-364    	; 0x51a4 <command_common+0x2ae>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    5310:	80 91 c3 01 	lds	r24, 0x01C3
    5314:	83 fb       	bst	r24, 3
    5316:	cc 27       	eor	r28, r28
    5318:	c0 f9       	bld	r28, 0
    531a:	91 e0       	ldi	r25, 0x01	; 1
    531c:	c9 27       	eor	r28, r25
    531e:	c0 fb       	bst	r28, 0
    5320:	83 f9       	bld	r24, 3
    5322:	80 93 c3 01 	sts	0x01C3, r24
            if (debug_mouse) {
    5326:	cc 23       	and	r28, r28
    5328:	51 f0       	breq	.+20     	; 0x533e <command_common+0x448>
                print("\nDEBUG: mouse enabled.\n");
    532a:	80 e7       	ldi	r24, 0x70	; 112
    532c:	9e e0       	ldi	r25, 0x0E	; 14
    532e:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
                debug_enable = true;
    5332:	80 91 c3 01 	lds	r24, 0x01C3
    5336:	81 60       	ori	r24, 0x01	; 1
    5338:	80 93 c3 01 	sts	0x01C3, r24
    533c:	98 c0       	rjmp	.+304    	; 0x546e <command_common+0x578>
            } else {
                print("\nDEBUG: mouse disabled.\n");
    533e:	87 e5       	ldi	r24, 0x57	; 87
    5340:	9e e0       	ldi	r25, 0x0E	; 14
    5342:	30 cf       	rjmp	.-416    	; 0x51a4 <command_common+0x2ae>
            }
            break;
        case KC_V: // print version & information
            print("\n\n----- Version -----\n");
    5344:	80 e4       	ldi	r24, 0x40	; 64
    5346:	9e e0       	ldi	r25, 0x0E	; 14
    5348:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    534c:	81 e2       	ldi	r24, 0x21	; 33
    534e:	9e e0       	ldi	r25, 0x0E	; 14
    5350:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    5354:	8c ee       	ldi	r24, 0xEC	; 236
    5356:	9d e0       	ldi	r25, 0x0D	; 13
    5358:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    535c:	8f eb       	ldi	r24, 0xBF	; 191
    535e:	9d e0       	ldi	r25, 0x0D	; 13
    5360:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            /* build options */
            print("OPTIONS:"
    5364:	8a e7       	ldi	r24, 0x7A	; 122
    5366:	9d e0       	ldi	r25, 0x0D	; 13
    5368:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    536c:	8c e4       	ldi	r24, 0x4C	; 76
    536e:	9d e0       	ldi	r25, 0x0D	; 13
    5370:	19 cf       	rjmp	.-462    	; 0x51a4 <command_common+0x2ae>
                  " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
                  " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
            break;
        case KC_T: // print timer
            print_val_hex32(timer_count);
    5372:	80 91 c7 01 	lds	r24, 0x01C7
    5376:	90 91 c8 01 	lds	r25, 0x01C8
    537a:	a0 91 c9 01 	lds	r26, 0x01C9
    537e:	b0 91 ca 01 	lds	r27, 0x01CA
    5382:	bf 93       	push	r27
    5384:	af 93       	push	r26
    5386:	9f 93       	push	r25
    5388:	8f 93       	push	r24
    538a:	88 e3       	ldi	r24, 0x38	; 56
    538c:	9d e0       	ldi	r25, 0x0D	; 13
    538e:	9f 93       	push	r25
    5390:	8f 93       	push	r24
    5392:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
            break;
    5396:	0f 90       	pop	r0
    5398:	0f 90       	pop	r0
    539a:	0f 90       	pop	r0
    539c:	0f 90       	pop	r0
    539e:	0f 90       	pop	r0
    53a0:	0f 90       	pop	r0
    53a2:	02 cf       	rjmp	.-508    	; 0x51a8 <command_common+0x2b2>
        case KC_S:
            print("\n\n----- Status -----\n");
    53a4:	82 e2       	ldi	r24, 0x22	; 34
    53a6:	9d e0       	ldi	r25, 0x0D	; 13
    53a8:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            print_val_hex8(host_keyboard_leds());
    53ac:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <host_keyboard_leds>
    53b0:	1f 92       	push	r1
    53b2:	8f 93       	push	r24
    53b4:	88 e0       	ldi	r24, 0x08	; 8
    53b6:	9d e0       	ldi	r25, 0x0D	; 13
    53b8:	9f 93       	push	r25
    53ba:	8f 93       	push	r24
    53bc:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
            print_val_hex8(keyboard_protocol);
    53c0:	80 91 0b 01 	lds	r24, 0x010B
    53c4:	1f 92       	push	r1
    53c6:	8f 93       	push	r24
    53c8:	81 ef       	ldi	r24, 0xF1	; 241
    53ca:	9c e0       	ldi	r25, 0x0C	; 12
    53cc:	9f 93       	push	r25
    53ce:	8f 93       	push	r24
    53d0:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
            print_val_hex8(keyboard_idle);
    53d4:	80 91 4c 01 	lds	r24, 0x014C
    53d8:	1f 92       	push	r1
    53da:	8f 93       	push	r24
    53dc:	8e ed       	ldi	r24, 0xDE	; 222
    53de:	9c e0       	ldi	r25, 0x0C	; 12
    53e0:	9f 93       	push	r25
    53e2:	8f 93       	push	r24
    53e4:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    53e8:	8d b7       	in	r24, 0x3d	; 61
    53ea:	9e b7       	in	r25, 0x3e	; 62
    53ec:	0c 96       	adiw	r24, 0x0c	; 12
    53ee:	0f b6       	in	r0, 0x3f	; 63
    53f0:	f8 94       	cli
    53f2:	9e bf       	out	0x3e, r25	; 62
    53f4:	0f be       	out	0x3f, r0	; 63
    53f6:	8d bf       	out	0x3d, r24	; 61
    53f8:	d7 ce       	rjmp	.-594    	; 0x51a8 <command_common+0x2b2>
#ifdef NKRO_ENABLE
        case KC_N:
            clear_keyboard(); //Prevents stuck keys.
    53fa:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <clear_keyboard>
            keyboard_nkro = !keyboard_nkro;
    53fe:	c0 91 0c 01 	lds	r28, 0x010C
    5402:	81 e0       	ldi	r24, 0x01	; 1
    5404:	c8 27       	eor	r28, r24
    5406:	c0 93 0c 01 	sts	0x010C, r28
            if (keyboard_nkro)
    540a:	cc 23       	and	r28, r28
    540c:	29 f0       	breq	.+10     	; 0x5418 <command_common+0x522>
                print("NKRO: enabled\n");
    540e:	8f ec       	ldi	r24, 0xCF	; 207
    5410:	9c e0       	ldi	r25, 0x0C	; 12
    5412:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5416:	2b c0       	rjmp	.+86     	; 0x546e <command_common+0x578>
            else
                print("NKRO: disabled\n");
    5418:	8f eb       	ldi	r24, 0xBF	; 191
    541a:	9c e0       	ldi	r25, 0x0C	; 12
    541c:	c3 ce       	rjmp	.-634    	; 0x51a4 <command_common+0x2ae>
                host_system_send(SYSTEM_POWER_DOWN);
                host_system_send(0);
                _delay_ms(500);
            }
#else
            host_system_send(SYSTEM_POWER_DOWN);
    541e:	81 e8       	ldi	r24, 0x81	; 129
    5420:	90 e0       	ldi	r25, 0x00	; 0
    5422:	0e 94 45 12 	call	0x248a	; 0x248a <host_system_send>
    5426:	9f ef       	ldi	r25, 0xFF	; 255
    5428:	21 ee       	ldi	r18, 0xE1	; 225
    542a:	84 e0       	ldi	r24, 0x04	; 4
    542c:	91 50       	subi	r25, 0x01	; 1
    542e:	20 40       	sbci	r18, 0x00	; 0
    5430:	80 40       	sbci	r24, 0x00	; 0
    5432:	e1 f7       	brne	.-8      	; 0x542c <command_common+0x536>
    5434:	00 c0       	rjmp	.+0      	; 0x5436 <command_common+0x540>
    5436:	00 00       	nop
            _delay_ms(100);
            host_system_send(0);
    5438:	80 e0       	ldi	r24, 0x00	; 0
    543a:	90 e0       	ldi	r25, 0x00	; 0
    543c:	0e 94 45 12 	call	0x248a	; 0x248a <host_system_send>
    5440:	9f ef       	ldi	r25, 0xFF	; 255
    5442:	29 e6       	ldi	r18, 0x69	; 105
    5444:	88 e1       	ldi	r24, 0x18	; 24
    5446:	91 50       	subi	r25, 0x01	; 1
    5448:	20 40       	sbci	r18, 0x00	; 0
    544a:	80 40       	sbci	r24, 0x00	; 0
    544c:	e1 f7       	brne	.-8      	; 0x5446 <command_common+0x550>
    544e:	00 c0       	rjmp	.+0      	; 0x5450 <command_common+0x55a>
    5450:	00 00       	nop
    5452:	aa ce       	rjmp	.-684    	; 0x51a8 <command_common+0x2b2>
            break;
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
            switch_default_layer(0);
    5454:	80 e0       	ldi	r24, 0x00	; 0
    5456:	03 c0       	rjmp	.+6      	; 0x545e <command_common+0x568>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    5458:	8d 51       	subi	r24, 0x1D	; 29
    545a:	01 c0       	rjmp	.+2      	; 0x545e <command_common+0x568>
            break;
        case KC_F1 ... KC_F12:
            switch_default_layer((code - KC_F1) + 1);
    545c:	89 53       	subi	r24, 0x39	; 57
    545e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <switch_default_layer>
    5462:	a2 ce       	rjmp	.-700    	; 0x51a8 <command_common+0x2b2>
            break;
        default:
            print("?");
    5464:	8d eb       	ldi	r24, 0xBD	; 189
    5466:	9c e0       	ldi	r25, 0x0C	; 12
    5468:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            return false;
    546c:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    546e:	8c 2f       	mov	r24, r28
    5470:	cf 91       	pop	r28
    5472:	08 95       	ret

00005474 <command_extra>:
/* This allows to define extra commands. return false when not processed. */
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    return false;
}
    5474:	80 e0       	ldi	r24, 0x00	; 0
    5476:	08 95       	ret

00005478 <command_console_extra>:

bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    return false;
}
    5478:	80 e0       	ldi	r24, 0x00	; 0
    547a:	08 95       	ret

0000547c <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    547c:	cf 93       	push	r28
    547e:	c8 2f       	mov	r28, r24
    switch (command_state) {
    5480:	80 91 d4 01 	lds	r24, 0x01D4
    5484:	81 30       	cpi	r24, 0x01	; 1
    5486:	71 f0       	breq	.+28     	; 0x54a4 <command_proc+0x28>
    5488:	20 f0       	brcs	.+8      	; 0x5492 <command_proc+0x16>
    548a:	82 30       	cpi	r24, 0x02	; 2
    548c:	09 f4       	brne	.+2      	; 0x5490 <command_proc+0x14>
    548e:	4e c0       	rjmp	.+156    	; 0x552c <command_proc+0xb0>
    5490:	5d c1       	rjmp	.+698    	; 0x574c <command_proc+0x2d0>
        case ONESHOT:
            if (!IS_COMMAND())
    5492:	a0 91 0d 01 	lds	r26, 0x010D
    5496:	b0 91 0e 01 	lds	r27, 0x010E
    549a:	8c 91       	ld	r24, X
    549c:	82 32       	cpi	r24, 0x22	; 34
    549e:	09 f0       	breq	.+2      	; 0x54a2 <command_proc+0x26>
    54a0:	57 c1       	rjmp	.+686    	; 0x5750 <command_proc+0x2d4>
    54a2:	07 c0       	rjmp	.+14     	; 0x54b2 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    54a4:	a0 91 0d 01 	lds	r26, 0x010D
    54a8:	b0 91 0e 01 	lds	r27, 0x010E
    54ac:	8c 91       	ld	r24, X
    54ae:	82 32       	cpi	r24, 0x22	; 34
    54b0:	49 f4       	brne	.+18     	; 0x54c4 <command_proc+0x48>
                return (command_extra(code) || command_common(code));
    54b2:	8c 2f       	mov	r24, r28
    54b4:	0e 94 3a 2a 	call	0x5474	; 0x5474 <command_extra>
    54b8:	81 11       	cpse	r24, r1
    54ba:	35 c0       	rjmp	.+106    	; 0x5526 <command_proc+0xaa>
    54bc:	8c 2f       	mov	r24, r28
    54be:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <command_common>
    54c2:	32 c0       	rjmp	.+100    	; 0x5528 <command_proc+0xac>
            else
                return (command_console_extra(code) || command_console(code));
    54c4:	8c 2f       	mov	r24, r28
    54c6:	0e 94 3c 2a 	call	0x5478	; 0x5478 <command_console_extra>
    54ca:	81 11       	cpse	r24, r1
    54cc:	2c c0       	rjmp	.+88     	; 0x5526 <command_proc+0xaa>
#endif
}

static bool command_console(uint8_t code)
{
    switch (code) {
    54ce:	c4 31       	cpi	r28, 0x14	; 20
    54d0:	f1 f0       	breq	.+60     	; 0x550e <command_proc+0x92>
    54d2:	90 f4       	brcc	.+36     	; 0x54f8 <command_proc+0x7c>
    54d4:	cb 30       	cpi	r28, 0x0B	; 11
    54d6:	a1 f0       	breq	.+40     	; 0x5500 <command_proc+0x84>
    54d8:	c0 31       	cpi	r28, 0x10	; 16
    54da:	01 f5       	brne	.+64     	; 0x551c <command_proc+0xa0>
            print("\nQuit Console Mode\n");
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    54dc:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <mousekey_console_help>
            print("\nEnter Mousekey Console\n");
    54e0:	81 e1       	ldi	r24, 0x11	; 17
    54e2:	99 e0       	ldi	r25, 0x09	; 9
    54e4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            print("M0>");
    54e8:	8d e0       	ldi	r24, 0x0D	; 13
    54ea:	99 e0       	ldi	r25, 0x09	; 9
    54ec:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            command_state = MOUSEKEY;
    54f0:	82 e0       	ldi	r24, 0x02	; 2
    54f2:	80 93 d4 01 	sts	0x01D4, r24
    54f6:	17 c0       	rjmp	.+46     	; 0x5526 <command_proc+0xaa>
#endif
}

static bool command_console(uint8_t code)
{
    switch (code) {
    54f8:	c9 32       	cpi	r28, 0x29	; 41
    54fa:	49 f0       	breq	.+18     	; 0x550e <command_proc+0x92>
    54fc:	c8 33       	cpi	r28, 0x38	; 56
    54fe:	71 f4       	brne	.+28     	; 0x551c <command_proc+0xa0>
        case KC_H:
        case KC_SLASH: /* ? */
            command_console_help();
    5500:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <command_console_help>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    5504:	8e e3       	ldi	r24, 0x3E	; 62
    5506:	99 e0       	ldi	r25, 0x09	; 9
    5508:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    550c:	0c c0       	rjmp	.+24     	; 0x5526 <command_proc+0xaa>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            print("\nQuit Console Mode\n");
    550e:	8a e2       	ldi	r24, 0x2A	; 42
    5510:	99 e0       	ldi	r25, 0x09	; 9
    5512:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            command_state = ONESHOT;
    5516:	10 92 d4 01 	sts	0x01D4, r1
    551a:	1c c1       	rjmp	.+568    	; 0x5754 <command_proc+0x2d8>
            print("M0>");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    551c:	8b e0       	ldi	r24, 0x0B	; 11
    551e:	99 e0       	ldi	r25, 0x09	; 9
    5520:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5524:	17 c1       	rjmp	.+558    	; 0x5754 <command_proc+0x2d8>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5526:	81 e0       	ldi	r24, 0x01	; 1
    5528:	81 70       	andi	r24, 0x01	; 1
    552a:	16 c1       	rjmp	.+556    	; 0x5758 <command_proc+0x2dc>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    552c:	c8 32       	cpi	r28, 0x28	; 40
    552e:	28 f5       	brcc	.+74     	; 0x557a <command_proc+0xfe>
    5530:	ce 31       	cpi	r28, 0x1E	; 30
    5532:	08 f0       	brcs	.+2      	; 0x5536 <command_proc+0xba>
    5534:	c0 c0       	rjmp	.+384    	; 0x56b6 <command_proc+0x23a>
    5536:	cb 30       	cpi	r28, 0x0B	; 11
    5538:	a1 f1       	breq	.+104    	; 0x55a2 <command_proc+0x126>
    553a:	d0 f4       	brcc	.+52     	; 0x5570 <command_proc+0xf4>
    553c:	c7 30       	cpi	r28, 0x07	; 7
    553e:	09 f0       	breq	.+2      	; 0x5542 <command_proc+0xc6>
    5540:	e8 c0       	rjmp	.+464    	; 0x5712 <command_proc+0x296>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    5542:	8e e1       	ldi	r24, 0x1E	; 30
    5544:	80 93 14 01 	sts	0x0114, r24
            mk_interval = MOUSEKEY_INTERVAL;
    5548:	82 e3       	ldi	r24, 0x32	; 50
    554a:	80 93 13 01 	sts	0x0113, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    554e:	8a e0       	ldi	r24, 0x0A	; 10
    5550:	80 93 12 01 	sts	0x0112, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    5554:	84 e1       	ldi	r24, 0x14	; 20
    5556:	80 93 11 01 	sts	0x0111, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    555a:	88 e0       	ldi	r24, 0x08	; 8
    555c:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    5560:	88 e2       	ldi	r24, 0x28	; 40
    5562:	80 93 0f 01 	sts	0x010F, r24
            print("set default values.\n");
    5566:	83 eb       	ldi	r24, 0xB3	; 179
    5568:	96 e0       	ldi	r25, 0x06	; 6
    556a:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    556e:	d6 c0       	rjmp	.+428    	; 0x571c <command_proc+0x2a0>
    print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    5570:	c3 31       	cpi	r28, 0x13	; 19
    5572:	41 f1       	breq	.+80     	; 0x55c4 <command_proc+0x148>
    5574:	c4 31       	cpi	r28, 0x14	; 20
    5576:	c1 f0       	breq	.+48     	; 0x55a8 <command_proc+0x12c>
    5578:	cc c0       	rjmp	.+408    	; 0x5712 <command_proc+0x296>
    557a:	cb 34       	cpi	r28, 0x4B	; 75
    557c:	09 f4       	brne	.+2      	; 0x5580 <command_proc+0x104>
    557e:	be c0       	rjmp	.+380    	; 0x56fc <command_proc+0x280>
    5580:	28 f4       	brcc	.+10     	; 0x558c <command_proc+0x110>
    5582:	c9 32       	cpi	r28, 0x29	; 41
    5584:	89 f0       	breq	.+34     	; 0x55a8 <command_proc+0x12c>
    5586:	c8 33       	cpi	r28, 0x38	; 56
    5588:	61 f0       	breq	.+24     	; 0x55a2 <command_proc+0x126>
    558a:	c3 c0       	rjmp	.+390    	; 0x5712 <command_proc+0x296>
    558c:	c1 35       	cpi	r28, 0x51	; 81
    558e:	09 f4       	brne	.+2      	; 0x5592 <command_proc+0x116>
    5590:	b3 c0       	rjmp	.+358    	; 0x56f8 <command_proc+0x27c>
    5592:	c2 35       	cpi	r28, 0x52	; 82
    5594:	09 f4       	brne	.+2      	; 0x5598 <command_proc+0x11c>
    5596:	ae c0       	rjmp	.+348    	; 0x56f4 <command_proc+0x278>
    5598:	ce 34       	cpi	r28, 0x4E	; 78
    559a:	09 f0       	breq	.+2      	; 0x559e <command_proc+0x122>
    559c:	ba c0       	rjmp	.+372    	; 0x5712 <command_proc+0x296>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    559e:	6a e0       	ldi	r22, 0x0A	; 10
    55a0:	b3 c0       	rjmp	.+358    	; 0x5708 <command_proc+0x28c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    55a2:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <mousekey_console_help>
    55a6:	ba c0       	rjmp	.+372    	; 0x571c <command_proc+0x2a0>
            break;
        case KC_Q:
        case KC_ESC:
            mousekey_param = 0;
    55a8:	10 92 d7 01 	sts	0x01D7, r1
            print("\nQuit Mousekey Console\n");
    55ac:	86 ee       	ldi	r24, 0xE6	; 230
    55ae:	96 e0       	ldi	r25, 0x06	; 6
    55b0:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            print("C> ");
    55b4:	82 ee       	ldi	r24, 0xE2	; 226
    55b6:	96 e0       	ldi	r25, 0x06	; 6
    55b8:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
            command_state = CONSOLE;
    55bc:	81 e0       	ldi	r24, 0x01	; 1
    55be:	80 93 d4 01 	sts	0x01D4, r24
    55c2:	ca c0       	rjmp	.+404    	; 0x5758 <command_proc+0x2dc>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\n----- Mousekey Parameters -----\n");
    55c4:	86 e8       	ldi	r24, 0x86	; 134
    55c6:	96 e0       	ldi	r25, 0x06	; 6
    55c8:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("1: mk_delay(*10ms): "); pdec(mk_delay); print("\n");
    55cc:	81 e7       	ldi	r24, 0x71	; 113
    55ce:	96 e0       	ldi	r25, 0x06	; 6
    55d0:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    55d4:	80 91 14 01 	lds	r24, 0x0114
    55d8:	1f 92       	push	r1
    55da:	8f 93       	push	r24
    55dc:	8e e6       	ldi	r24, 0x6E	; 110
    55de:	96 e0       	ldi	r25, 0x06	; 6
    55e0:	9f 93       	push	r25
    55e2:	8f 93       	push	r24
    55e4:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    55e8:	8c e6       	ldi	r24, 0x6C	; 108
    55ea:	96 e0       	ldi	r25, 0x06	; 6
    55ec:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("2: mk_interval(ms): "); pdec(mk_interval); print("\n");
    55f0:	87 e5       	ldi	r24, 0x57	; 87
    55f2:	96 e0       	ldi	r25, 0x06	; 6
    55f4:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    55f8:	80 91 13 01 	lds	r24, 0x0113
    55fc:	1f 92       	push	r1
    55fe:	8f 93       	push	r24
    5600:	84 e5       	ldi	r24, 0x54	; 84
    5602:	96 e0       	ldi	r25, 0x06	; 6
    5604:	9f 93       	push	r25
    5606:	8f 93       	push	r24
    5608:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    560c:	82 e5       	ldi	r24, 0x52	; 82
    560e:	96 e0       	ldi	r25, 0x06	; 6
    5610:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("3: mk_max_speed: "); pdec(mk_max_speed); print("\n");
    5614:	80 e4       	ldi	r24, 0x40	; 64
    5616:	96 e0       	ldi	r25, 0x06	; 6
    5618:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    561c:	80 91 12 01 	lds	r24, 0x0112
    5620:	1f 92       	push	r1
    5622:	8f 93       	push	r24
    5624:	8d e3       	ldi	r24, 0x3D	; 61
    5626:	96 e0       	ldi	r25, 0x06	; 6
    5628:	9f 93       	push	r25
    562a:	8f 93       	push	r24
    562c:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    5630:	8b e3       	ldi	r24, 0x3B	; 59
    5632:	96 e0       	ldi	r25, 0x06	; 6
    5634:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("4: mk_time_to_max: "); pdec(mk_time_to_max); print("\n");
    5638:	87 e2       	ldi	r24, 0x27	; 39
    563a:	96 e0       	ldi	r25, 0x06	; 6
    563c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5640:	80 91 11 01 	lds	r24, 0x0111
    5644:	1f 92       	push	r1
    5646:	8f 93       	push	r24
    5648:	84 e2       	ldi	r24, 0x24	; 36
    564a:	96 e0       	ldi	r25, 0x06	; 6
    564c:	9f 93       	push	r25
    564e:	8f 93       	push	r24
    5650:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    5654:	82 e2       	ldi	r24, 0x22	; 34
    5656:	96 e0       	ldi	r25, 0x06	; 6
    5658:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("5: mk_wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    565c:	8a e0       	ldi	r24, 0x0A	; 10
    565e:	96 e0       	ldi	r25, 0x06	; 6
    5660:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5664:	80 91 10 01 	lds	r24, 0x0110
    5668:	1f 92       	push	r1
    566a:	8f 93       	push	r24
    566c:	87 e0       	ldi	r24, 0x07	; 7
    566e:	96 e0       	ldi	r25, 0x06	; 6
    5670:	9f 93       	push	r25
    5672:	8f 93       	push	r24
    5674:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    5678:	85 e0       	ldi	r24, 0x05	; 5
    567a:	96 e0       	ldi	r25, 0x06	; 6
    567c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    print("6: mk_wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    5680:	8b ee       	ldi	r24, 0xEB	; 235
    5682:	95 e0       	ldi	r25, 0x05	; 5
    5684:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5688:	80 91 0f 01 	lds	r24, 0x010F
    568c:	1f 92       	push	r1
    568e:	8f 93       	push	r24
    5690:	88 ee       	ldi	r24, 0xE8	; 232
    5692:	95 e0       	ldi	r25, 0x05	; 5
    5694:	9f 93       	push	r25
    5696:	8f 93       	push	r24
    5698:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    569c:	86 ee       	ldi	r24, 0xE6	; 230
    569e:	95 e0       	ldi	r25, 0x05	; 5
    56a0:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    56a4:	8d b7       	in	r24, 0x3d	; 61
    56a6:	9e b7       	in	r25, 0x3e	; 62
    56a8:	48 96       	adiw	r24, 0x18	; 24
    56aa:	0f b6       	in	r0, 0x3f	; 63
    56ac:	f8 94       	cli
    56ae:	9e bf       	out	0x3e, r25	; 62
    56b0:	0f be       	out	0x3f, r0	; 63
    56b2:	8d bf       	out	0x3d, r24	; 61
    56b4:	33 c0       	rjmp	.+102    	; 0x571c <command_proc+0x2a0>
    56b6:	ce 51       	subi	r28, 0x1E	; 30
    56b8:	ec 2f       	mov	r30, r28
    56ba:	f0 e0       	ldi	r31, 0x00	; 0
    56bc:	e2 5d       	subi	r30, 0xD2	; 210
    56be:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_6:
        case KC_7:
        case KC_8:
        case KC_9:
        case KC_0:
            mousekey_param = numkey2num(code);
    56c0:	80 81       	ld	r24, Z
    56c2:	80 93 d7 01 	sts	0x01D7, r24
            print("selected parameter: "); pdec(mousekey_param); print("\n");
    56c6:	8d ec       	ldi	r24, 0xCD	; 205
    56c8:	96 e0       	ldi	r25, 0x06	; 6
    56ca:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    56ce:	80 91 d7 01 	lds	r24, 0x01D7
    56d2:	1f 92       	push	r1
    56d4:	8f 93       	push	r24
    56d6:	8a ec       	ldi	r24, 0xCA	; 202
    56d8:	96 e0       	ldi	r25, 0x06	; 6
    56da:	9f 93       	push	r25
    56dc:	8f 93       	push	r24
    56de:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    56e2:	88 ec       	ldi	r24, 0xC8	; 200
    56e4:	96 e0       	ldi	r25, 0x06	; 6
    56e6:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    56ea:	0f 90       	pop	r0
    56ec:	0f 90       	pop	r0
    56ee:	0f 90       	pop	r0
    56f0:	0f 90       	pop	r0
    56f2:	14 c0       	rjmp	.+40     	; 0x571c <command_proc+0x2a0>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    56f4:	61 e0       	ldi	r22, 0x01	; 1
    56f6:	03 c0       	rjmp	.+6      	; 0x56fe <command_proc+0x282>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    56f8:	61 e0       	ldi	r22, 0x01	; 1
    56fa:	06 c0       	rjmp	.+12     	; 0x5708 <command_proc+0x28c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    56fc:	6a e0       	ldi	r22, 0x0A	; 10
    56fe:	80 91 d7 01 	lds	r24, 0x01D7
    5702:	0e 94 7d 25 	call	0x4afa	; 0x4afa <mousekey_param_inc>
    5706:	0a c0       	rjmp	.+20     	; 0x571c <command_proc+0x2a0>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    5708:	80 91 d7 01 	lds	r24, 0x01D7
    570c:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <mousekey_param_dec>
    5710:	05 c0       	rjmp	.+10     	; 0x571c <command_proc+0x2a0>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default values.\n");
            break;
        default:
            print("?");
    5712:	81 eb       	ldi	r24, 0xB1	; 177
    5714:	96 e0       	ldi	r25, 0x06	; 6
    5716:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    571a:	16 c0       	rjmp	.+44     	; 0x5748 <command_proc+0x2cc>
            return false;
    }
    print("M"); pdec(mousekey_param); print("> ");
    571c:	8f ea       	ldi	r24, 0xAF	; 175
    571e:	96 e0       	ldi	r25, 0x06	; 6
    5720:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5724:	80 91 d7 01 	lds	r24, 0x01D7
    5728:	1f 92       	push	r1
    572a:	8f 93       	push	r24
    572c:	8c ea       	ldi	r24, 0xAC	; 172
    572e:	96 e0       	ldi	r25, 0x06	; 6
    5730:	9f 93       	push	r25
    5732:	8f 93       	push	r24
    5734:	0e 94 a7 08 	call	0x114e	; 0x114e <__xprintf>
    5738:	89 ea       	ldi	r24, 0xA9	; 169
    573a:	96 e0       	ldi	r25, 0x06	; 6
    573c:	0e 94 0e 08 	call	0x101c	; 0x101c <xputs>
    5740:	0f 90       	pop	r0
    5742:	0f 90       	pop	r0
    5744:	0f 90       	pop	r0
    5746:	0f 90       	pop	r0
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    5748:	81 e0       	ldi	r24, 0x01	; 1
    574a:	06 c0       	rjmp	.+12     	; 0x5758 <command_proc+0x2dc>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    574c:	10 92 d4 01 	sts	0x01D4, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    5750:	80 e0       	ldi	r24, 0x00	; 0
    5752:	02 c0       	rjmp	.+4      	; 0x5758 <command_proc+0x2dc>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    5754:	80 e0       	ldi	r24, 0x00	; 0
    5756:	e8 ce       	rjmp	.-560    	; 0x5528 <command_proc+0xac>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    5758:	cf 91       	pop	r28
    575a:	08 95       	ret

0000575c <__fixsfsi>:
    575c:	04 d0       	rcall	.+8      	; 0x5766 <__fixunssfsi>
    575e:	68 94       	set
    5760:	b1 11       	cpse	r27, r1
    5762:	8d c0       	rjmp	.+282    	; 0x587e <__fp_szero>
    5764:	08 95       	ret

00005766 <__fixunssfsi>:
    5766:	70 d0       	rcall	.+224    	; 0x5848 <__fp_splitA>
    5768:	88 f0       	brcs	.+34     	; 0x578c <__fixunssfsi+0x26>
    576a:	9f 57       	subi	r25, 0x7F	; 127
    576c:	90 f0       	brcs	.+36     	; 0x5792 <__fixunssfsi+0x2c>
    576e:	b9 2f       	mov	r27, r25
    5770:	99 27       	eor	r25, r25
    5772:	b7 51       	subi	r27, 0x17	; 23
    5774:	a0 f0       	brcs	.+40     	; 0x579e <__fixunssfsi+0x38>
    5776:	d1 f0       	breq	.+52     	; 0x57ac <__fixunssfsi+0x46>
    5778:	66 0f       	add	r22, r22
    577a:	77 1f       	adc	r23, r23
    577c:	88 1f       	adc	r24, r24
    577e:	99 1f       	adc	r25, r25
    5780:	1a f0       	brmi	.+6      	; 0x5788 <__fixunssfsi+0x22>
    5782:	ba 95       	dec	r27
    5784:	c9 f7       	brne	.-14     	; 0x5778 <__fixunssfsi+0x12>
    5786:	12 c0       	rjmp	.+36     	; 0x57ac <__fixunssfsi+0x46>
    5788:	b1 30       	cpi	r27, 0x01	; 1
    578a:	81 f0       	breq	.+32     	; 0x57ac <__fixunssfsi+0x46>
    578c:	77 d0       	rcall	.+238    	; 0x587c <__fp_zero>
    578e:	b1 e0       	ldi	r27, 0x01	; 1
    5790:	08 95       	ret
    5792:	74 c0       	rjmp	.+232    	; 0x587c <__fp_zero>
    5794:	67 2f       	mov	r22, r23
    5796:	78 2f       	mov	r23, r24
    5798:	88 27       	eor	r24, r24
    579a:	b8 5f       	subi	r27, 0xF8	; 248
    579c:	39 f0       	breq	.+14     	; 0x57ac <__fixunssfsi+0x46>
    579e:	b9 3f       	cpi	r27, 0xF9	; 249
    57a0:	cc f3       	brlt	.-14     	; 0x5794 <__fixunssfsi+0x2e>
    57a2:	86 95       	lsr	r24
    57a4:	77 95       	ror	r23
    57a6:	67 95       	ror	r22
    57a8:	b3 95       	inc	r27
    57aa:	d9 f7       	brne	.-10     	; 0x57a2 <__fixunssfsi+0x3c>
    57ac:	3e f4       	brtc	.+14     	; 0x57bc <__fixunssfsi+0x56>
    57ae:	90 95       	com	r25
    57b0:	80 95       	com	r24
    57b2:	70 95       	com	r23
    57b4:	61 95       	neg	r22
    57b6:	7f 4f       	sbci	r23, 0xFF	; 255
    57b8:	8f 4f       	sbci	r24, 0xFF	; 255
    57ba:	9f 4f       	sbci	r25, 0xFF	; 255
    57bc:	08 95       	ret

000057be <__floatunsisf>:
    57be:	e8 94       	clt
    57c0:	09 c0       	rjmp	.+18     	; 0x57d4 <__floatsisf+0x12>

000057c2 <__floatsisf>:
    57c2:	97 fb       	bst	r25, 7
    57c4:	3e f4       	brtc	.+14     	; 0x57d4 <__floatsisf+0x12>
    57c6:	90 95       	com	r25
    57c8:	80 95       	com	r24
    57ca:	70 95       	com	r23
    57cc:	61 95       	neg	r22
    57ce:	7f 4f       	sbci	r23, 0xFF	; 255
    57d0:	8f 4f       	sbci	r24, 0xFF	; 255
    57d2:	9f 4f       	sbci	r25, 0xFF	; 255
    57d4:	99 23       	and	r25, r25
    57d6:	a9 f0       	breq	.+42     	; 0x5802 <__floatsisf+0x40>
    57d8:	f9 2f       	mov	r31, r25
    57da:	96 e9       	ldi	r25, 0x96	; 150
    57dc:	bb 27       	eor	r27, r27
    57de:	93 95       	inc	r25
    57e0:	f6 95       	lsr	r31
    57e2:	87 95       	ror	r24
    57e4:	77 95       	ror	r23
    57e6:	67 95       	ror	r22
    57e8:	b7 95       	ror	r27
    57ea:	f1 11       	cpse	r31, r1
    57ec:	f8 cf       	rjmp	.-16     	; 0x57de <__floatsisf+0x1c>
    57ee:	fa f4       	brpl	.+62     	; 0x582e <__floatsisf+0x6c>
    57f0:	bb 0f       	add	r27, r27
    57f2:	11 f4       	brne	.+4      	; 0x57f8 <__floatsisf+0x36>
    57f4:	60 ff       	sbrs	r22, 0
    57f6:	1b c0       	rjmp	.+54     	; 0x582e <__floatsisf+0x6c>
    57f8:	6f 5f       	subi	r22, 0xFF	; 255
    57fa:	7f 4f       	sbci	r23, 0xFF	; 255
    57fc:	8f 4f       	sbci	r24, 0xFF	; 255
    57fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5800:	16 c0       	rjmp	.+44     	; 0x582e <__floatsisf+0x6c>
    5802:	88 23       	and	r24, r24
    5804:	11 f0       	breq	.+4      	; 0x580a <__floatsisf+0x48>
    5806:	96 e9       	ldi	r25, 0x96	; 150
    5808:	11 c0       	rjmp	.+34     	; 0x582c <__floatsisf+0x6a>
    580a:	77 23       	and	r23, r23
    580c:	21 f0       	breq	.+8      	; 0x5816 <__floatsisf+0x54>
    580e:	9e e8       	ldi	r25, 0x8E	; 142
    5810:	87 2f       	mov	r24, r23
    5812:	76 2f       	mov	r23, r22
    5814:	05 c0       	rjmp	.+10     	; 0x5820 <__floatsisf+0x5e>
    5816:	66 23       	and	r22, r22
    5818:	71 f0       	breq	.+28     	; 0x5836 <__floatsisf+0x74>
    581a:	96 e8       	ldi	r25, 0x86	; 134
    581c:	86 2f       	mov	r24, r22
    581e:	70 e0       	ldi	r23, 0x00	; 0
    5820:	60 e0       	ldi	r22, 0x00	; 0
    5822:	2a f0       	brmi	.+10     	; 0x582e <__floatsisf+0x6c>
    5824:	9a 95       	dec	r25
    5826:	66 0f       	add	r22, r22
    5828:	77 1f       	adc	r23, r23
    582a:	88 1f       	adc	r24, r24
    582c:	da f7       	brpl	.-10     	; 0x5824 <__floatsisf+0x62>
    582e:	88 0f       	add	r24, r24
    5830:	96 95       	lsr	r25
    5832:	87 95       	ror	r24
    5834:	97 f9       	bld	r25, 7
    5836:	08 95       	ret

00005838 <__fp_split3>:
    5838:	57 fd       	sbrc	r21, 7
    583a:	90 58       	subi	r25, 0x80	; 128
    583c:	44 0f       	add	r20, r20
    583e:	55 1f       	adc	r21, r21
    5840:	59 f0       	breq	.+22     	; 0x5858 <__fp_splitA+0x10>
    5842:	5f 3f       	cpi	r21, 0xFF	; 255
    5844:	71 f0       	breq	.+28     	; 0x5862 <__fp_splitA+0x1a>
    5846:	47 95       	ror	r20

00005848 <__fp_splitA>:
    5848:	88 0f       	add	r24, r24
    584a:	97 fb       	bst	r25, 7
    584c:	99 1f       	adc	r25, r25
    584e:	61 f0       	breq	.+24     	; 0x5868 <__fp_splitA+0x20>
    5850:	9f 3f       	cpi	r25, 0xFF	; 255
    5852:	79 f0       	breq	.+30     	; 0x5872 <__fp_splitA+0x2a>
    5854:	87 95       	ror	r24
    5856:	08 95       	ret
    5858:	12 16       	cp	r1, r18
    585a:	13 06       	cpc	r1, r19
    585c:	14 06       	cpc	r1, r20
    585e:	55 1f       	adc	r21, r21
    5860:	f2 cf       	rjmp	.-28     	; 0x5846 <__fp_split3+0xe>
    5862:	46 95       	lsr	r20
    5864:	f1 df       	rcall	.-30     	; 0x5848 <__fp_splitA>
    5866:	08 c0       	rjmp	.+16     	; 0x5878 <__fp_splitA+0x30>
    5868:	16 16       	cp	r1, r22
    586a:	17 06       	cpc	r1, r23
    586c:	18 06       	cpc	r1, r24
    586e:	99 1f       	adc	r25, r25
    5870:	f1 cf       	rjmp	.-30     	; 0x5854 <__fp_splitA+0xc>
    5872:	86 95       	lsr	r24
    5874:	71 05       	cpc	r23, r1
    5876:	61 05       	cpc	r22, r1
    5878:	08 94       	sec
    587a:	08 95       	ret

0000587c <__fp_zero>:
    587c:	e8 94       	clt

0000587e <__fp_szero>:
    587e:	bb 27       	eor	r27, r27
    5880:	66 27       	eor	r22, r22
    5882:	77 27       	eor	r23, r23
    5884:	cb 01       	movw	r24, r22
    5886:	97 f9       	bld	r25, 7
    5888:	08 95       	ret

0000588a <__mulsf3>:
    588a:	0b d0       	rcall	.+22     	; 0x58a2 <__mulsf3x>
    588c:	78 c0       	rjmp	.+240    	; 0x597e <__fp_round>
    588e:	69 d0       	rcall	.+210    	; 0x5962 <__fp_pscA>
    5890:	28 f0       	brcs	.+10     	; 0x589c <__mulsf3+0x12>
    5892:	6e d0       	rcall	.+220    	; 0x5970 <__fp_pscB>
    5894:	18 f0       	brcs	.+6      	; 0x589c <__mulsf3+0x12>
    5896:	95 23       	and	r25, r21
    5898:	09 f0       	breq	.+2      	; 0x589c <__mulsf3+0x12>
    589a:	5a c0       	rjmp	.+180    	; 0x5950 <__fp_inf>
    589c:	5f c0       	rjmp	.+190    	; 0x595c <__fp_nan>
    589e:	11 24       	eor	r1, r1
    58a0:	ee cf       	rjmp	.-36     	; 0x587e <__fp_szero>

000058a2 <__mulsf3x>:
    58a2:	ca df       	rcall	.-108    	; 0x5838 <__fp_split3>
    58a4:	a0 f3       	brcs	.-24     	; 0x588e <__mulsf3+0x4>

000058a6 <__mulsf3_pse>:
    58a6:	95 9f       	mul	r25, r21
    58a8:	d1 f3       	breq	.-12     	; 0x589e <__mulsf3+0x14>
    58aa:	95 0f       	add	r25, r21
    58ac:	50 e0       	ldi	r21, 0x00	; 0
    58ae:	55 1f       	adc	r21, r21
    58b0:	62 9f       	mul	r22, r18
    58b2:	f0 01       	movw	r30, r0
    58b4:	72 9f       	mul	r23, r18
    58b6:	bb 27       	eor	r27, r27
    58b8:	f0 0d       	add	r31, r0
    58ba:	b1 1d       	adc	r27, r1
    58bc:	63 9f       	mul	r22, r19
    58be:	aa 27       	eor	r26, r26
    58c0:	f0 0d       	add	r31, r0
    58c2:	b1 1d       	adc	r27, r1
    58c4:	aa 1f       	adc	r26, r26
    58c6:	64 9f       	mul	r22, r20
    58c8:	66 27       	eor	r22, r22
    58ca:	b0 0d       	add	r27, r0
    58cc:	a1 1d       	adc	r26, r1
    58ce:	66 1f       	adc	r22, r22
    58d0:	82 9f       	mul	r24, r18
    58d2:	22 27       	eor	r18, r18
    58d4:	b0 0d       	add	r27, r0
    58d6:	a1 1d       	adc	r26, r1
    58d8:	62 1f       	adc	r22, r18
    58da:	73 9f       	mul	r23, r19
    58dc:	b0 0d       	add	r27, r0
    58de:	a1 1d       	adc	r26, r1
    58e0:	62 1f       	adc	r22, r18
    58e2:	83 9f       	mul	r24, r19
    58e4:	a0 0d       	add	r26, r0
    58e6:	61 1d       	adc	r22, r1
    58e8:	22 1f       	adc	r18, r18
    58ea:	74 9f       	mul	r23, r20
    58ec:	33 27       	eor	r19, r19
    58ee:	a0 0d       	add	r26, r0
    58f0:	61 1d       	adc	r22, r1
    58f2:	23 1f       	adc	r18, r19
    58f4:	84 9f       	mul	r24, r20
    58f6:	60 0d       	add	r22, r0
    58f8:	21 1d       	adc	r18, r1
    58fa:	82 2f       	mov	r24, r18
    58fc:	76 2f       	mov	r23, r22
    58fe:	6a 2f       	mov	r22, r26
    5900:	11 24       	eor	r1, r1
    5902:	9f 57       	subi	r25, 0x7F	; 127
    5904:	50 40       	sbci	r21, 0x00	; 0
    5906:	8a f0       	brmi	.+34     	; 0x592a <__mulsf3_pse+0x84>
    5908:	e1 f0       	breq	.+56     	; 0x5942 <__mulsf3_pse+0x9c>
    590a:	88 23       	and	r24, r24
    590c:	4a f0       	brmi	.+18     	; 0x5920 <__mulsf3_pse+0x7a>
    590e:	ee 0f       	add	r30, r30
    5910:	ff 1f       	adc	r31, r31
    5912:	bb 1f       	adc	r27, r27
    5914:	66 1f       	adc	r22, r22
    5916:	77 1f       	adc	r23, r23
    5918:	88 1f       	adc	r24, r24
    591a:	91 50       	subi	r25, 0x01	; 1
    591c:	50 40       	sbci	r21, 0x00	; 0
    591e:	a9 f7       	brne	.-22     	; 0x590a <__mulsf3_pse+0x64>
    5920:	9e 3f       	cpi	r25, 0xFE	; 254
    5922:	51 05       	cpc	r21, r1
    5924:	70 f0       	brcs	.+28     	; 0x5942 <__mulsf3_pse+0x9c>
    5926:	14 c0       	rjmp	.+40     	; 0x5950 <__fp_inf>
    5928:	aa cf       	rjmp	.-172    	; 0x587e <__fp_szero>
    592a:	5f 3f       	cpi	r21, 0xFF	; 255
    592c:	ec f3       	brlt	.-6      	; 0x5928 <__mulsf3_pse+0x82>
    592e:	98 3e       	cpi	r25, 0xE8	; 232
    5930:	dc f3       	brlt	.-10     	; 0x5928 <__mulsf3_pse+0x82>
    5932:	86 95       	lsr	r24
    5934:	77 95       	ror	r23
    5936:	67 95       	ror	r22
    5938:	b7 95       	ror	r27
    593a:	f7 95       	ror	r31
    593c:	e7 95       	ror	r30
    593e:	9f 5f       	subi	r25, 0xFF	; 255
    5940:	c1 f7       	brne	.-16     	; 0x5932 <__mulsf3_pse+0x8c>
    5942:	fe 2b       	or	r31, r30
    5944:	88 0f       	add	r24, r24
    5946:	91 1d       	adc	r25, r1
    5948:	96 95       	lsr	r25
    594a:	87 95       	ror	r24
    594c:	97 f9       	bld	r25, 7
    594e:	08 95       	ret

00005950 <__fp_inf>:
    5950:	97 f9       	bld	r25, 7
    5952:	9f 67       	ori	r25, 0x7F	; 127
    5954:	80 e8       	ldi	r24, 0x80	; 128
    5956:	70 e0       	ldi	r23, 0x00	; 0
    5958:	60 e0       	ldi	r22, 0x00	; 0
    595a:	08 95       	ret

0000595c <__fp_nan>:
    595c:	9f ef       	ldi	r25, 0xFF	; 255
    595e:	80 ec       	ldi	r24, 0xC0	; 192
    5960:	08 95       	ret

00005962 <__fp_pscA>:
    5962:	00 24       	eor	r0, r0
    5964:	0a 94       	dec	r0
    5966:	16 16       	cp	r1, r22
    5968:	17 06       	cpc	r1, r23
    596a:	18 06       	cpc	r1, r24
    596c:	09 06       	cpc	r0, r25
    596e:	08 95       	ret

00005970 <__fp_pscB>:
    5970:	00 24       	eor	r0, r0
    5972:	0a 94       	dec	r0
    5974:	12 16       	cp	r1, r18
    5976:	13 06       	cpc	r1, r19
    5978:	14 06       	cpc	r1, r20
    597a:	05 06       	cpc	r0, r21
    597c:	08 95       	ret

0000597e <__fp_round>:
    597e:	09 2e       	mov	r0, r25
    5980:	03 94       	inc	r0
    5982:	00 0c       	add	r0, r0
    5984:	11 f4       	brne	.+4      	; 0x598a <__fp_round+0xc>
    5986:	88 23       	and	r24, r24
    5988:	52 f0       	brmi	.+20     	; 0x599e <__fp_round+0x20>
    598a:	bb 0f       	add	r27, r27
    598c:	40 f4       	brcc	.+16     	; 0x599e <__fp_round+0x20>
    598e:	bf 2b       	or	r27, r31
    5990:	11 f4       	brne	.+4      	; 0x5996 <__fp_round+0x18>
    5992:	60 ff       	sbrs	r22, 0
    5994:	04 c0       	rjmp	.+8      	; 0x599e <__fp_round+0x20>
    5996:	6f 5f       	subi	r22, 0xFF	; 255
    5998:	7f 4f       	sbci	r23, 0xFF	; 255
    599a:	8f 4f       	sbci	r24, 0xFF	; 255
    599c:	9f 4f       	sbci	r25, 0xFF	; 255
    599e:	08 95       	ret

000059a0 <__divmodhi4>:
    59a0:	97 fb       	bst	r25, 7
    59a2:	07 2e       	mov	r0, r23
    59a4:	16 f4       	brtc	.+4      	; 0x59aa <__divmodhi4+0xa>
    59a6:	00 94       	com	r0
    59a8:	07 d0       	rcall	.+14     	; 0x59b8 <__divmodhi4_neg1>
    59aa:	77 fd       	sbrc	r23, 7
    59ac:	09 d0       	rcall	.+18     	; 0x59c0 <__divmodhi4_neg2>
    59ae:	0e 94 ea 2c 	call	0x59d4	; 0x59d4 <__udivmodhi4>
    59b2:	07 fc       	sbrc	r0, 7
    59b4:	05 d0       	rcall	.+10     	; 0x59c0 <__divmodhi4_neg2>
    59b6:	3e f4       	brtc	.+14     	; 0x59c6 <__divmodhi4_exit>

000059b8 <__divmodhi4_neg1>:
    59b8:	90 95       	com	r25
    59ba:	81 95       	neg	r24
    59bc:	9f 4f       	sbci	r25, 0xFF	; 255
    59be:	08 95       	ret

000059c0 <__divmodhi4_neg2>:
    59c0:	70 95       	com	r23
    59c2:	61 95       	neg	r22
    59c4:	7f 4f       	sbci	r23, 0xFF	; 255

000059c6 <__divmodhi4_exit>:
    59c6:	08 95       	ret

000059c8 <__tablejump2__>:
    59c8:	ee 0f       	add	r30, r30
    59ca:	ff 1f       	adc	r31, r31

000059cc <__tablejump__>:
    59cc:	05 90       	lpm	r0, Z+
    59ce:	f4 91       	lpm	r31, Z
    59d0:	e0 2d       	mov	r30, r0
    59d2:	09 94       	ijmp

000059d4 <__udivmodhi4>:
    59d4:	aa 1b       	sub	r26, r26
    59d6:	bb 1b       	sub	r27, r27
    59d8:	51 e1       	ldi	r21, 0x11	; 17
    59da:	07 c0       	rjmp	.+14     	; 0x59ea <__udivmodhi4_ep>

000059dc <__udivmodhi4_loop>:
    59dc:	aa 1f       	adc	r26, r26
    59de:	bb 1f       	adc	r27, r27
    59e0:	a6 17       	cp	r26, r22
    59e2:	b7 07       	cpc	r27, r23
    59e4:	10 f0       	brcs	.+4      	; 0x59ea <__udivmodhi4_ep>
    59e6:	a6 1b       	sub	r26, r22
    59e8:	b7 0b       	sbc	r27, r23

000059ea <__udivmodhi4_ep>:
    59ea:	88 1f       	adc	r24, r24
    59ec:	99 1f       	adc	r25, r25
    59ee:	5a 95       	dec	r21
    59f0:	a9 f7       	brne	.-22     	; 0x59dc <__udivmodhi4_loop>
    59f2:	80 95       	com	r24
    59f4:	90 95       	com	r25
    59f6:	bc 01       	movw	r22, r24
    59f8:	cd 01       	movw	r24, r26
    59fa:	08 95       	ret

000059fc <__eerd_byte_m32u4>:
    59fc:	f9 99       	sbic	0x1f, 1	; 31
    59fe:	fe cf       	rjmp	.-4      	; 0x59fc <__eerd_byte_m32u4>
    5a00:	92 bd       	out	0x22, r25	; 34
    5a02:	81 bd       	out	0x21, r24	; 33
    5a04:	f8 9a       	sbi	0x1f, 0	; 31
    5a06:	99 27       	eor	r25, r25
    5a08:	80 b5       	in	r24, 0x20	; 32
    5a0a:	08 95       	ret

00005a0c <__eerd_word_m32u4>:
    5a0c:	a8 e1       	ldi	r26, 0x18	; 24
    5a0e:	b0 e0       	ldi	r27, 0x00	; 0
    5a10:	42 e0       	ldi	r20, 0x02	; 2
    5a12:	50 e0       	ldi	r21, 0x00	; 0
    5a14:	0c 94 21 2d 	jmp	0x5a42	; 0x5a42 <__eerd_blraw_m32u4>

00005a18 <__eewr_byte_m32u4>:
    5a18:	26 2f       	mov	r18, r22

00005a1a <__eewr_r18_m32u4>:
    5a1a:	f9 99       	sbic	0x1f, 1	; 31
    5a1c:	fe cf       	rjmp	.-4      	; 0x5a1a <__eewr_r18_m32u4>
    5a1e:	1f ba       	out	0x1f, r1	; 31
    5a20:	92 bd       	out	0x22, r25	; 34
    5a22:	81 bd       	out	0x21, r24	; 33
    5a24:	20 bd       	out	0x20, r18	; 32
    5a26:	0f b6       	in	r0, 0x3f	; 63
    5a28:	f8 94       	cli
    5a2a:	fa 9a       	sbi	0x1f, 2	; 31
    5a2c:	f9 9a       	sbi	0x1f, 1	; 31
    5a2e:	0f be       	out	0x3f, r0	; 63
    5a30:	01 96       	adiw	r24, 0x01	; 1
    5a32:	08 95       	ret

00005a34 <__eewr_word_m32u4>:
    5a34:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <__eewr_byte_m32u4>
    5a38:	27 2f       	mov	r18, r23
    5a3a:	0c 94 0d 2d 	jmp	0x5a1a	; 0x5a1a <__eewr_r18_m32u4>

00005a3e <__eerd_block_m32u4>:
    5a3e:	dc 01       	movw	r26, r24
    5a40:	cb 01       	movw	r24, r22

00005a42 <__eerd_blraw_m32u4>:
    5a42:	fc 01       	movw	r30, r24
    5a44:	f9 99       	sbic	0x1f, 1	; 31
    5a46:	fe cf       	rjmp	.-4      	; 0x5a44 <__eerd_blraw_m32u4+0x2>
    5a48:	06 c0       	rjmp	.+12     	; 0x5a56 <__eerd_blraw_m32u4+0x14>
    5a4a:	f2 bd       	out	0x22, r31	; 34
    5a4c:	e1 bd       	out	0x21, r30	; 33
    5a4e:	f8 9a       	sbi	0x1f, 0	; 31
    5a50:	31 96       	adiw	r30, 0x01	; 1
    5a52:	00 b4       	in	r0, 0x20	; 32
    5a54:	0d 92       	st	X+, r0
    5a56:	41 50       	subi	r20, 0x01	; 1
    5a58:	50 40       	sbci	r21, 0x00	; 0
    5a5a:	b8 f7       	brcc	.-18     	; 0x5a4a <__eerd_blraw_m32u4+0x8>
    5a5c:	08 95       	ret

00005a5e <_exit>:
    5a5e:	f8 94       	cli

00005a60 <__stop_program>:
    5a60:	ff cf       	rjmp	.-2      	; 0x5a60 <__stop_program>

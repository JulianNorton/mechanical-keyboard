   1               		.file	"descriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB99:
  15               		.file 1 "../../protocol/lufa/descriptor.c"
   1:../../protocol/lufa/descriptor.c **** /* 
   2:../../protocol/lufa/descriptor.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:../../protocol/lufa/descriptor.c ****  * This file is based on:
   4:../../protocol/lufa/descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:../../protocol/lufa/descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:../../protocol/lufa/descriptor.c ****  */
   7:../../protocol/lufa/descriptor.c **** 
   8:../../protocol/lufa/descriptor.c **** /*
   9:../../protocol/lufa/descriptor.c ****              LUFA Library
  10:../../protocol/lufa/descriptor.c ****      Copyright (C) Dean Camera, 2012.
  11:../../protocol/lufa/descriptor.c **** 
  12:../../protocol/lufa/descriptor.c ****   dean [at] fourwalledcubicle [dot] com
  13:../../protocol/lufa/descriptor.c ****            www.lufa-lib.org
  14:../../protocol/lufa/descriptor.c **** */
  15:../../protocol/lufa/descriptor.c **** 
  16:../../protocol/lufa/descriptor.c **** /*
  17:../../protocol/lufa/descriptor.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:../../protocol/lufa/descriptor.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:../../protocol/lufa/descriptor.c **** 
  20:../../protocol/lufa/descriptor.c ****   Permission to use, copy, modify, distribute, and sell this
  21:../../protocol/lufa/descriptor.c ****   software and its documentation for any purpose is hereby granted
  22:../../protocol/lufa/descriptor.c ****   without fee, provided that the above copyright notice appear in
  23:../../protocol/lufa/descriptor.c ****   all copies and that both that the copyright notice and this
  24:../../protocol/lufa/descriptor.c ****   permission notice and warranty disclaimer appear in supporting
  25:../../protocol/lufa/descriptor.c ****   documentation, and that the name of the author not be used in
  26:../../protocol/lufa/descriptor.c ****   advertising or publicity pertaining to distribution of the
  27:../../protocol/lufa/descriptor.c ****   software without specific, written prior permission.
  28:../../protocol/lufa/descriptor.c **** 
  29:../../protocol/lufa/descriptor.c ****   The author disclaim all warranties with regard to this
  30:../../protocol/lufa/descriptor.c ****   software, including all implied warranties of merchantability
  31:../../protocol/lufa/descriptor.c ****   and fitness.  In no event shall the author be liable for any
  32:../../protocol/lufa/descriptor.c ****   special, indirect or consequential damages or any damages
  33:../../protocol/lufa/descriptor.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:../../protocol/lufa/descriptor.c ****   in an action of contract, negligence or other tortious action,
  35:../../protocol/lufa/descriptor.c ****   arising out of or in connection with the use or performance of
  36:../../protocol/lufa/descriptor.c ****   this software.
  37:../../protocol/lufa/descriptor.c **** */
  38:../../protocol/lufa/descriptor.c **** 
  39:../../protocol/lufa/descriptor.c **** #include "util.h"
  40:../../protocol/lufa/descriptor.c **** #include "report.h"
  41:../../protocol/lufa/descriptor.c **** #include "descriptor.h"
  42:../../protocol/lufa/descriptor.c **** 
  43:../../protocol/lufa/descriptor.c **** 
  44:../../protocol/lufa/descriptor.c **** /*******************************************************************************
  45:../../protocol/lufa/descriptor.c ****  * HID Report Descriptors
  46:../../protocol/lufa/descriptor.c ****  ******************************************************************************/
  47:../../protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] =
  48:../../protocol/lufa/descriptor.c **** {
  49:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
  50:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x06), /* Keyboard */
  51:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
  52:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
  53:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), /* Keyboard Left Control */
  54:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), /* Keyboard Right GUI */
  55:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  56:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
  57:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
  58:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  59:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
  60:../../protocol/lufa/descriptor.c **** 
  61:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  62:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  63:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_CONSTANT),  /* reserved */
  64:../../protocol/lufa/descriptor.c **** 
  65:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08), /* LEDs */
  66:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), /* Num Lock */
  67:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), /* Kana */
  68:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
  69:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
  70:../../protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
  71:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
  72:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
  73:../../protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
  74:../../protocol/lufa/descriptor.c **** 
  75:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Keyboard */
  76:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00), /* Reserved (no event indicated) */
  77:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xFF), /* Keyboard Application */
  78:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
  79:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0xFF),
  80:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x06),
  81:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
  82:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
  83:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
  84:../../protocol/lufa/descriptor.c **** };
  85:../../protocol/lufa/descriptor.c **** 
  86:../../protocol/lufa/descriptor.c **** #ifdef MOUSE_ENABLE
  87:../../protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] =
  88:../../protocol/lufa/descriptor.c **** {
  89:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
  90:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x02), /* Mouse */
  91:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
  92:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE(8, 0x01), /* Pointer */
  93:../../protocol/lufa/descriptor.c ****         HID_RI_COLLECTION(8, 0x00), /* Physical */
  94:../../protocol/lufa/descriptor.c **** 
  95:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x09), /* Button */
  96:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE_MINIMUM(8, 0x01),  /* Button 1 */
  97:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE_MAXIMUM(8, 0x05),  /* Button 5 */
  98:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, 0x00),
  99:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 100:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x05),
 101:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x01),
 102:../../protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 103:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 104:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x03),
 105:../../protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_CONSTANT),
 106:../../protocol/lufa/descriptor.c **** 
 107:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 108:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE(8, 0x30), /* Usage X */
 109:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE(8, 0x31), /* Usage Y */
 110:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 111:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 112:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x02),
 113:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 114:../../protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 115:../../protocol/lufa/descriptor.c **** 
 116:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE(8, 0x38), /* Wheel */
 117:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 118:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 119:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 120:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 121:../../protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 122:../../protocol/lufa/descriptor.c **** 
 123:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE_PAGE(8, 0x0C), /* Consumer */
 124:../../protocol/lufa/descriptor.c ****             HID_RI_USAGE(16, 0x0238), /* AC Pan (Horizontal wheel) */
 125:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MINIMUM(8, -127),
 126:../../protocol/lufa/descriptor.c ****             HID_RI_LOGICAL_MAXIMUM(8, 127),
 127:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_COUNT(8, 0x01),
 128:../../protocol/lufa/descriptor.c ****             HID_RI_REPORT_SIZE(8, 0x08),
 129:../../protocol/lufa/descriptor.c ****             HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 130:../../protocol/lufa/descriptor.c **** 
 131:../../protocol/lufa/descriptor.c ****         HID_RI_END_COLLECTION(0),
 132:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 133:../../protocol/lufa/descriptor.c **** };
 134:../../protocol/lufa/descriptor.c **** #endif
 135:../../protocol/lufa/descriptor.c **** 
 136:../../protocol/lufa/descriptor.c **** #ifdef EXTRAKEY_ENABLE
 137:../../protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ExtrakeyReport[] =
 138:../../protocol/lufa/descriptor.c **** {
 139:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 140:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x80), /* System Control */
 141:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 142:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_SYSTEM),
 143:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 144:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x00B7),
 145:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0001), /* System Power Down */
 146:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x00B7), /* System Display LCD Autoscale */
 147:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 148:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 149:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 150:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 151:../../protocol/lufa/descriptor.c **** 
 152:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C), /* Consumer */
 153:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x01), /* Consumer Control */
 154:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 155:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_ID(8, REPORT_ID_CONSUMER),
 156:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 157:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(16, 0x029C),
 158:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(16, 0x0001), /* +10 */
 159:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(16, 0x029C), /* AC Distribute Vertically */
 160:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 16),
 161:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 1),
 162:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 163:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 164:../../protocol/lufa/descriptor.c **** };
 165:../../protocol/lufa/descriptor.c **** #endif
 166:../../protocol/lufa/descriptor.c **** 
 167:../../protocol/lufa/descriptor.c **** #ifdef CONSOLE_ENABLE
 168:../../protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ConsoleReport[] =
 169:../../protocol/lufa/descriptor.c **** {
 170:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF31), /* Vendor Page(PJRC Teensy compatible) */
 171:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x74), /* Vendor Usage(PJRC Teensy compatible) */
 172:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 173:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE(8, 0x75), /* Vendor Usage 0x75 */
 174:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 175:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0xFF),
 176:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 177:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 178:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 179:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE(8, 0x76), /* Vendor Usage 0x76 */
 180:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 181:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0xFF),
 182:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 183:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x08),
 184:../../protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 185:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 186:../../protocol/lufa/descriptor.c **** };
 187:../../protocol/lufa/descriptor.c **** #endif
 188:../../protocol/lufa/descriptor.c **** 
 189:../../protocol/lufa/descriptor.c **** #ifdef NKRO_ENABLE
 190:../../protocol/lufa/descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM NKROReport[] =
 191:../../protocol/lufa/descriptor.c **** {
 192:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01), /* Generic Desktop */
 193:../../protocol/lufa/descriptor.c ****     HID_RI_USAGE(8, 0x06), /* Keyboard */
 194:../../protocol/lufa/descriptor.c ****     HID_RI_COLLECTION(8, 0x01), /* Application */
 195:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
 196:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0xE0), /* Keyboard Left Control */
 197:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0xE7), /* Keyboard Right GUI */
 198:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 199:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 200:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x08),
 201:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 202:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 203:../../protocol/lufa/descriptor.c **** 
 204:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x08), /* LEDs */
 205:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x01), /* Num Lock */
 206:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, 0x05), /* Kana */
 207:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x05),
 208:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 209:../../protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE)
 210:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, 0x01),
 211:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x03),
 212:../../protocol/lufa/descriptor.c ****         HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
 213:../../protocol/lufa/descriptor.c **** 
 214:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_PAGE(8, 0x07), /* Key Codes */
 215:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MINIMUM(8, 0x00), /* Keyboard 0 */
 216:../../protocol/lufa/descriptor.c ****         HID_RI_USAGE_MAXIMUM(8, (NKRO_EPSIZE-1)*8-1), /* Keyboard Right GUI */
 217:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MINIMUM(8, 0x00),
 218:../../protocol/lufa/descriptor.c ****         HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 219:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_COUNT(8, (NKRO_EPSIZE-1)*8),
 220:../../protocol/lufa/descriptor.c ****         HID_RI_REPORT_SIZE(8, 0x01),
 221:../../protocol/lufa/descriptor.c ****         HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 222:../../protocol/lufa/descriptor.c ****     HID_RI_END_COLLECTION(0),
 223:../../protocol/lufa/descriptor.c **** };
 224:../../protocol/lufa/descriptor.c **** #endif
 225:../../protocol/lufa/descriptor.c **** 
 226:../../protocol/lufa/descriptor.c **** /*******************************************************************************
 227:../../protocol/lufa/descriptor.c ****  * Device Descriptors
 228:../../protocol/lufa/descriptor.c ****  ******************************************************************************/
 229:../../protocol/lufa/descriptor.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
 230:../../protocol/lufa/descriptor.c **** {
 231:../../protocol/lufa/descriptor.c ****     .Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
 232:../../protocol/lufa/descriptor.c **** 
 233:../../protocol/lufa/descriptor.c ****     .USBSpecification       = VERSION_BCD(1,1,0),
 234:../../protocol/lufa/descriptor.c ****     .Class                  = USB_CSCP_NoDeviceClass,
 235:../../protocol/lufa/descriptor.c ****     .SubClass               = USB_CSCP_NoDeviceSubclass,
 236:../../protocol/lufa/descriptor.c ****     .Protocol               = USB_CSCP_NoDeviceProtocol,
 237:../../protocol/lufa/descriptor.c **** 
 238:../../protocol/lufa/descriptor.c ****     .Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
 239:../../protocol/lufa/descriptor.c **** 
 240:../../protocol/lufa/descriptor.c ****     /* specified in config.h */
 241:../../protocol/lufa/descriptor.c ****     .VendorID               = VENDOR_ID,
 242:../../protocol/lufa/descriptor.c ****     .ProductID              = PRODUCT_ID,
 243:../../protocol/lufa/descriptor.c ****     .ReleaseNumber          = DEVICE_VER,
 244:../../protocol/lufa/descriptor.c **** 
 245:../../protocol/lufa/descriptor.c ****     .ManufacturerStrIndex   = 0x01,
 246:../../protocol/lufa/descriptor.c ****     .ProductStrIndex        = 0x02,
 247:../../protocol/lufa/descriptor.c ****     .SerialNumStrIndex      = NO_DESCRIPTOR,
 248:../../protocol/lufa/descriptor.c **** 
 249:../../protocol/lufa/descriptor.c ****     .NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
 250:../../protocol/lufa/descriptor.c **** };
 251:../../protocol/lufa/descriptor.c **** 
 252:../../protocol/lufa/descriptor.c **** /*******************************************************************************
 253:../../protocol/lufa/descriptor.c ****  * Configuration Descriptors
 254:../../protocol/lufa/descriptor.c ****  ******************************************************************************/
 255:../../protocol/lufa/descriptor.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
 256:../../protocol/lufa/descriptor.c **** {
 257:../../protocol/lufa/descriptor.c ****     .Config =
 258:../../protocol/lufa/descriptor.c ****         {
 259:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type
 260:../../protocol/lufa/descriptor.c **** 
 261:../../protocol/lufa/descriptor.c ****             .TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 262:../../protocol/lufa/descriptor.c ****             .TotalInterfaces        = TOTAL_INTERFACES,
 263:../../protocol/lufa/descriptor.c **** 
 264:../../protocol/lufa/descriptor.c ****             .ConfigurationNumber    = 1,
 265:../../protocol/lufa/descriptor.c ****             .ConfigurationStrIndex  = NO_DESCRIPTOR,
 266:../../protocol/lufa/descriptor.c **** 
 267:../../protocol/lufa/descriptor.c ****             .ConfigAttributes       = (USB_CONFIG_ATTR_RESERVED | USB_CONFIG_ATTR_REMOTEWAKEUP),
 268:../../protocol/lufa/descriptor.c **** 
 269:../../protocol/lufa/descriptor.c ****             .MaxPowerConsumption    = USB_CONFIG_POWER_MA(100)
 270:../../protocol/lufa/descriptor.c ****         },
 271:../../protocol/lufa/descriptor.c **** 
 272:../../protocol/lufa/descriptor.c ****     /*
 273:../../protocol/lufa/descriptor.c ****      * Keyboard
 274:../../protocol/lufa/descriptor.c ****      */
 275:../../protocol/lufa/descriptor.c ****     .Keyboard_Interface =
 276:../../protocol/lufa/descriptor.c ****         {
 277:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 278:../../protocol/lufa/descriptor.c **** 
 279:../../protocol/lufa/descriptor.c ****             .InterfaceNumber        = KEYBOARD_INTERFACE,
 280:../../protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 281:../../protocol/lufa/descriptor.c **** 
 282:../../protocol/lufa/descriptor.c ****             .TotalEndpoints         = 1,
 283:../../protocol/lufa/descriptor.c **** 
 284:../../protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 285:../../protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_BootSubclass,
 286:../../protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_KeyboardBootProtocol,
 287:../../protocol/lufa/descriptor.c **** 
 288:../../protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 289:../../protocol/lufa/descriptor.c ****         },
 290:../../protocol/lufa/descriptor.c **** 
 291:../../protocol/lufa/descriptor.c ****     .Keyboard_HID =
 292:../../protocol/lufa/descriptor.c ****         {
 293:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 294:../../protocol/lufa/descriptor.c **** 
 295:../../protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 296:../../protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 297:../../protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 298:../../protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 299:../../protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(KeyboardReport)
 300:../../protocol/lufa/descriptor.c ****         },
 301:../../protocol/lufa/descriptor.c **** 
 302:../../protocol/lufa/descriptor.c ****     .Keyboard_INEndpoint =
 303:../../protocol/lufa/descriptor.c ****         {
 304:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 305:../../protocol/lufa/descriptor.c **** 
 306:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | KEYBOARD_IN_EPNUM),
 307:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 308:../../protocol/lufa/descriptor.c ****             .EndpointSize           = KEYBOARD_EPSIZE,
 309:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x0A
 310:../../protocol/lufa/descriptor.c ****         },
 311:../../protocol/lufa/descriptor.c **** 
 312:../../protocol/lufa/descriptor.c ****     /*
 313:../../protocol/lufa/descriptor.c ****      * Mouse
 314:../../protocol/lufa/descriptor.c ****      */
 315:../../protocol/lufa/descriptor.c **** #ifdef MOUSE_ENABLE
 316:../../protocol/lufa/descriptor.c ****     .Mouse_Interface =
 317:../../protocol/lufa/descriptor.c ****         {
 318:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 319:../../protocol/lufa/descriptor.c **** 
 320:../../protocol/lufa/descriptor.c ****             .InterfaceNumber        = MOUSE_INTERFACE,
 321:../../protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 322:../../protocol/lufa/descriptor.c **** 
 323:../../protocol/lufa/descriptor.c ****             .TotalEndpoints         = 1,
 324:../../protocol/lufa/descriptor.c **** 
 325:../../protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 326:../../protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_BootSubclass,
 327:../../protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_MouseBootProtocol,
 328:../../protocol/lufa/descriptor.c **** 
 329:../../protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 330:../../protocol/lufa/descriptor.c ****         },
 331:../../protocol/lufa/descriptor.c **** 
 332:../../protocol/lufa/descriptor.c ****     .Mouse_HID =
 333:../../protocol/lufa/descriptor.c ****         {
 334:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 335:../../protocol/lufa/descriptor.c **** 
 336:../../protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 337:../../protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 338:../../protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 339:../../protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 340:../../protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(MouseReport)
 341:../../protocol/lufa/descriptor.c ****         },
 342:../../protocol/lufa/descriptor.c **** 
 343:../../protocol/lufa/descriptor.c ****     .Mouse_INEndpoint =
 344:../../protocol/lufa/descriptor.c ****         {
 345:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 346:../../protocol/lufa/descriptor.c **** 
 347:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | MOUSE_IN_EPNUM),
 348:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 349:../../protocol/lufa/descriptor.c ****             .EndpointSize           = MOUSE_EPSIZE,
 350:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x0A
 351:../../protocol/lufa/descriptor.c ****         },
 352:../../protocol/lufa/descriptor.c **** #endif
 353:../../protocol/lufa/descriptor.c **** 
 354:../../protocol/lufa/descriptor.c ****     /*
 355:../../protocol/lufa/descriptor.c ****      * Extra
 356:../../protocol/lufa/descriptor.c ****      */
 357:../../protocol/lufa/descriptor.c **** #ifdef EXTRAKEY_ENABLE
 358:../../protocol/lufa/descriptor.c ****     .Extrakey_Interface =
 359:../../protocol/lufa/descriptor.c ****         {
 360:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 361:../../protocol/lufa/descriptor.c **** 
 362:../../protocol/lufa/descriptor.c ****             .InterfaceNumber        = EXTRAKEY_INTERFACE,
 363:../../protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 364:../../protocol/lufa/descriptor.c **** 
 365:../../protocol/lufa/descriptor.c ****             .TotalEndpoints         = 1,
 366:../../protocol/lufa/descriptor.c **** 
 367:../../protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 368:../../protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 369:../../protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 370:../../protocol/lufa/descriptor.c **** 
 371:../../protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 372:../../protocol/lufa/descriptor.c ****         },
 373:../../protocol/lufa/descriptor.c **** 
 374:../../protocol/lufa/descriptor.c ****     .Extrakey_HID =
 375:../../protocol/lufa/descriptor.c ****         {
 376:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 377:../../protocol/lufa/descriptor.c **** 
 378:../../protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 379:../../protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 380:../../protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 381:../../protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 382:../../protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(ExtrakeyReport)
 383:../../protocol/lufa/descriptor.c ****         },
 384:../../protocol/lufa/descriptor.c **** 
 385:../../protocol/lufa/descriptor.c ****     .Extrakey_INEndpoint =
 386:../../protocol/lufa/descriptor.c ****         {
 387:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 388:../../protocol/lufa/descriptor.c **** 
 389:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | EXTRAKEY_IN_EPNUM),
 390:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 391:../../protocol/lufa/descriptor.c ****             .EndpointSize           = EXTRAKEY_EPSIZE,
 392:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x0A
 393:../../protocol/lufa/descriptor.c ****         },
 394:../../protocol/lufa/descriptor.c **** #endif
 395:../../protocol/lufa/descriptor.c **** 
 396:../../protocol/lufa/descriptor.c ****     /*
 397:../../protocol/lufa/descriptor.c ****      * Console
 398:../../protocol/lufa/descriptor.c ****      */
 399:../../protocol/lufa/descriptor.c **** #ifdef CONSOLE_ENABLE
 400:../../protocol/lufa/descriptor.c ****     .Console_Interface =
 401:../../protocol/lufa/descriptor.c ****         {
 402:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 403:../../protocol/lufa/descriptor.c **** 
 404:../../protocol/lufa/descriptor.c ****             .InterfaceNumber        = CONSOLE_INTERFACE,
 405:../../protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 406:../../protocol/lufa/descriptor.c **** 
 407:../../protocol/lufa/descriptor.c ****             .TotalEndpoints         = 2,
 408:../../protocol/lufa/descriptor.c **** 
 409:../../protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 410:../../protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 411:../../protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 412:../../protocol/lufa/descriptor.c **** 
 413:../../protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 414:../../protocol/lufa/descriptor.c ****         },
 415:../../protocol/lufa/descriptor.c **** 
 416:../../protocol/lufa/descriptor.c ****     .Console_HID =
 417:../../protocol/lufa/descriptor.c ****         {
 418:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 419:../../protocol/lufa/descriptor.c **** 
 420:../../protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 421:../../protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 422:../../protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 423:../../protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 424:../../protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(ConsoleReport)
 425:../../protocol/lufa/descriptor.c ****         },
 426:../../protocol/lufa/descriptor.c **** 
 427:../../protocol/lufa/descriptor.c ****     .Console_INEndpoint =
 428:../../protocol/lufa/descriptor.c ****         {
 429:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 430:../../protocol/lufa/descriptor.c **** 
 431:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | CONSOLE_IN_EPNUM),
 432:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 433:../../protocol/lufa/descriptor.c ****             .EndpointSize           = CONSOLE_EPSIZE,
 434:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x01
 435:../../protocol/lufa/descriptor.c ****         },
 436:../../protocol/lufa/descriptor.c **** 
 437:../../protocol/lufa/descriptor.c ****     .Console_OUTEndpoint =
 438:../../protocol/lufa/descriptor.c ****         {
 439:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 440:../../protocol/lufa/descriptor.c **** 
 441:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_OUT | CONSOLE_OUT_EPNUM),
 442:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 443:../../protocol/lufa/descriptor.c ****             .EndpointSize           = CONSOLE_EPSIZE,
 444:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x01
 445:../../protocol/lufa/descriptor.c ****         },
 446:../../protocol/lufa/descriptor.c **** #endif
 447:../../protocol/lufa/descriptor.c **** 
 448:../../protocol/lufa/descriptor.c ****     /*
 449:../../protocol/lufa/descriptor.c ****      * NKRO
 450:../../protocol/lufa/descriptor.c ****      */
 451:../../protocol/lufa/descriptor.c **** #ifdef NKRO_ENABLE
 452:../../protocol/lufa/descriptor.c ****     .NKRO_Interface =
 453:../../protocol/lufa/descriptor.c ****         {
 454:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_In
 455:../../protocol/lufa/descriptor.c **** 
 456:../../protocol/lufa/descriptor.c ****             .InterfaceNumber        = NKRO_INTERFACE,
 457:../../protocol/lufa/descriptor.c ****             .AlternateSetting       = 0x00,
 458:../../protocol/lufa/descriptor.c **** 
 459:../../protocol/lufa/descriptor.c ****             .TotalEndpoints         = 1,
 460:../../protocol/lufa/descriptor.c **** 
 461:../../protocol/lufa/descriptor.c ****             .Class                  = HID_CSCP_HIDClass,
 462:../../protocol/lufa/descriptor.c ****             .SubClass               = HID_CSCP_NonBootSubclass,
 463:../../protocol/lufa/descriptor.c ****             .Protocol               = HID_CSCP_NonBootProtocol,
 464:../../protocol/lufa/descriptor.c **** 
 465:../../protocol/lufa/descriptor.c ****             .InterfaceStrIndex      = NO_DESCRIPTOR
 466:../../protocol/lufa/descriptor.c ****         },
 467:../../protocol/lufa/descriptor.c **** 
 468:../../protocol/lufa/descriptor.c ****     .NKRO_HID =
 469:../../protocol/lufa/descriptor.c ****         {
 470:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DTYPE_
 471:../../protocol/lufa/descriptor.c **** 
 472:../../protocol/lufa/descriptor.c ****             .HIDSpec                = VERSION_BCD(1,1,1),
 473:../../protocol/lufa/descriptor.c ****             .CountryCode            = 0x00,
 474:../../protocol/lufa/descriptor.c ****             .TotalReportDescriptors = 1,
 475:../../protocol/lufa/descriptor.c ****             .HIDReportType          = HID_DTYPE_Report,
 476:../../protocol/lufa/descriptor.c ****             .HIDReportLength        = sizeof(NKROReport)
 477:../../protocol/lufa/descriptor.c ****         },
 478:../../protocol/lufa/descriptor.c **** 
 479:../../protocol/lufa/descriptor.c ****     .NKRO_INEndpoint =
 480:../../protocol/lufa/descriptor.c ****         {
 481:../../protocol/lufa/descriptor.c ****             .Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_End
 482:../../protocol/lufa/descriptor.c **** 
 483:../../protocol/lufa/descriptor.c ****             .EndpointAddress        = (ENDPOINT_DIR_IN | NKRO_IN_EPNUM),
 484:../../protocol/lufa/descriptor.c ****             .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_D
 485:../../protocol/lufa/descriptor.c ****             .EndpointSize           = NKRO_EPSIZE,
 486:../../protocol/lufa/descriptor.c ****             .PollingIntervalMS      = 0x01
 487:../../protocol/lufa/descriptor.c ****         },
 488:../../protocol/lufa/descriptor.c **** #endif
 489:../../protocol/lufa/descriptor.c **** };
 490:../../protocol/lufa/descriptor.c **** 
 491:../../protocol/lufa/descriptor.c **** 
 492:../../protocol/lufa/descriptor.c **** /*******************************************************************************
 493:../../protocol/lufa/descriptor.c ****  * String Descriptors
 494:../../protocol/lufa/descriptor.c ****  ******************************************************************************/
 495:../../protocol/lufa/descriptor.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 496:../../protocol/lufa/descriptor.c **** {
 497:../../protocol/lufa/descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 498:../../protocol/lufa/descriptor.c **** 
 499:../../protocol/lufa/descriptor.c ****     .UnicodeString          = {LANGUAGE_ID_ENG}
 500:../../protocol/lufa/descriptor.c **** };
 501:../../protocol/lufa/descriptor.c **** 
 502:../../protocol/lufa/descriptor.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 503:../../protocol/lufa/descriptor.c **** {
 504:../../protocol/lufa/descriptor.c ****     /* subtract 1 for null terminator */
 505:../../protocol/lufa/descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(MANUFACTURER))-1), .Type = DTYPE_S
 506:../../protocol/lufa/descriptor.c **** 
 507:../../protocol/lufa/descriptor.c ****     .UnicodeString          = LSTR(MANUFACTURER)
 508:../../protocol/lufa/descriptor.c **** };
 509:../../protocol/lufa/descriptor.c **** 
 510:../../protocol/lufa/descriptor.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 511:../../protocol/lufa/descriptor.c **** {
 512:../../protocol/lufa/descriptor.c ****     /* subtract 1 for null terminator */
 513:../../protocol/lufa/descriptor.c ****     .Header                 = {.Size = USB_STRING_LEN(sizeof(STR(PRODUCT))-1), .Type = DTYPE_String
 514:../../protocol/lufa/descriptor.c **** 
 515:../../protocol/lufa/descriptor.c ****     .UnicodeString          = LSTR(PRODUCT)
 516:../../protocol/lufa/descriptor.c **** };
 517:../../protocol/lufa/descriptor.c **** 
 518:../../protocol/lufa/descriptor.c **** 
 519:../../protocol/lufa/descriptor.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 520:../../protocol/lufa/descriptor.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 521:../../protocol/lufa/descriptor.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 522:../../protocol/lufa/descriptor.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 523:../../protocol/lufa/descriptor.c ****  *  USB host.
 524:../../protocol/lufa/descriptor.c ****  */
 525:../../protocol/lufa/descriptor.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 526:../../protocol/lufa/descriptor.c ****                                     const uint8_t wIndex,
 527:../../protocol/lufa/descriptor.c ****                                     const void** const DescriptorAddress)
 528:../../protocol/lufa/descriptor.c **** {
  16               		.loc 1 528 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 529:../../protocol/lufa/descriptor.c ****     const uint8_t  DescriptorType   = (wValue >> 8);
  23               		.loc 1 529 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 530:../../protocol/lufa/descriptor.c ****     const uint8_t  DescriptorIndex  = (wValue & 0xFF);
 531:../../protocol/lufa/descriptor.c **** 
 532:../../protocol/lufa/descriptor.c ****     const void* Address = NULL;
 533:../../protocol/lufa/descriptor.c ****     uint16_t    Size    = NO_DESCRIPTOR;
 534:../../protocol/lufa/descriptor.c **** 
 535:../../protocol/lufa/descriptor.c ****     switch (DescriptorType)
  26               		.loc 1 535 0
  27 0004 2330      		cpi r18,3
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 04F4      		brge .L4
  31 000c 2130      		cpi r18,1
  32 000e 3105      		cpc r19,__zero_reg__
  33 0010 01F4      		brne .+2
  34 0012 00C0      		rjmp .L12
  35 0014 2230      		cpi r18,2
  36 0016 3105      		cpc r19,__zero_reg__
  37 0018 01F0      		breq .+2
  38 001a 00C0      		rjmp .L15
  39               	.LVL1:
 536:../../protocol/lufa/descriptor.c ****     {
 537:../../protocol/lufa/descriptor.c ****         case DTYPE_Device:
 538:../../protocol/lufa/descriptor.c ****             Address = &DeviceDescriptor;
 539:../../protocol/lufa/descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 540:../../protocol/lufa/descriptor.c ****             break;
 541:../../protocol/lufa/descriptor.c ****         case DTYPE_Configuration:
 542:../../protocol/lufa/descriptor.c ****             Address = &ConfigurationDescriptor;
 543:../../protocol/lufa/descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
  40               		.loc 1 543 0
  41 001c 8DE8      		ldi r24,lo8(-115)
  42 001e 90E0      		ldi r25,0
  43               	.LVL2:
 542:../../protocol/lufa/descriptor.c ****             Address = &ConfigurationDescriptor;
  44               		.loc 1 542 0
  45 0020 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  46 0022 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 544:../../protocol/lufa/descriptor.c ****             break;
  47               		.loc 1 544 0
  48 0024 00C0      		rjmp .L5
  49               	.LVL3:
  50               	.L4:
 535:../../protocol/lufa/descriptor.c ****     switch (DescriptorType)
  51               		.loc 1 535 0
  52 0026 2132      		cpi r18,33
  53 0028 3105      		cpc r19,__zero_reg__
  54 002a 01F0      		breq .L7
  55 002c 2232      		cpi r18,34
  56 002e 3105      		cpc r19,__zero_reg__
  57 0030 01F0      		breq .L8
  58 0032 00C0      		rjmp .L15
  59               	.L3:
  60 0034 9927      		clr r25
  61               	.LVL4:
 545:../../protocol/lufa/descriptor.c ****         case DTYPE_String:
 546:../../protocol/lufa/descriptor.c ****             switch (DescriptorIndex )
  62               		.loc 1 546 0
  63 0036 8130      		cpi r24,1
  64 0038 9105      		cpc r25,__zero_reg__
  65 003a 01F0      		breq .L9
  66 003c 8230      		cpi r24,2
  67 003e 9105      		cpc r25,__zero_reg__
  68 0040 01F0      		breq .L10
  69 0042 892B      		or r24,r25
  70 0044 01F4      		brne .L15
  71               	.LVL5:
  72               	.LBB2:
 547:../../protocol/lufa/descriptor.c ****             {
 548:../../protocol/lufa/descriptor.c ****                 case 0x00:
 549:../../protocol/lufa/descriptor.c ****                     Address = &LanguageString;
 550:../../protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
  73               		.loc 1 550 0
  74 0046 E0E0      		ldi r30,lo8(LanguageString)
  75 0048 F0E0      		ldi r31,hi8(LanguageString)
  76 004a 00C0      		rjmp .L17
  77               	.LVL6:
  78               	.L9:
  79               	.LBE2:
  80               	.LBB3:
 551:../../protocol/lufa/descriptor.c ****                     break;
 552:../../protocol/lufa/descriptor.c ****                 case 0x01:
 553:../../protocol/lufa/descriptor.c ****                     Address = &ManufacturerString;
 554:../../protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
  81               		.loc 1 554 0
  82 004c E0E0      		ldi r30,lo8(ManufacturerString)
  83 004e F0E0      		ldi r31,hi8(ManufacturerString)
  84 0050 00C0      		rjmp .L17
  85               	.LVL7:
  86               	.L10:
  87               	.LBE3:
  88               	.LBB4:
 555:../../protocol/lufa/descriptor.c ****                     break;
 556:../../protocol/lufa/descriptor.c ****                 case 0x02:
 557:../../protocol/lufa/descriptor.c ****                     Address = &ProductString;
 558:../../protocol/lufa/descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
  89               		.loc 1 558 0
  90 0052 E0E0      		ldi r30,lo8(ProductString)
  91 0054 F0E0      		ldi r31,hi8(ProductString)
  92               	.LVL8:
  93               	.L17:
  94               	/* #APP */
  95               	 ;  558 "../../protocol/lufa/descriptor.c" 1
  96 0056 8491      		lpm r24, Z
  97               		
  98               	 ;  0 "" 2
  99               	.LVL9:
 100               	/* #NOAPP */
 101               	.LBE4:
 102 0058 90E0      		ldi r25,0
 103               	.LVL10:
 557:../../protocol/lufa/descriptor.c ****                     Address = &ProductString;
 104               		.loc 1 557 0
 105 005a 9F01      		movw r18,r30
 559:../../protocol/lufa/descriptor.c ****                     break;
 106               		.loc 1 559 0
 107 005c 00C0      		rjmp .L5
 108               	.LVL11:
 109               	.L7:
 110 005e 6530      		cpi r22,lo8(5)
 111 0060 00F4      		brsh .L15
 112 0062 E62F      		mov r30,r22
 113 0064 F0E0      		ldi r31,0
 114 0066 EE0F      		lsl r30
 115 0068 FF1F      		rol r31
 116 006a E050      		subi r30,lo8(-(CSWTCH.1))
 117 006c F040      		sbci r31,hi8(-(CSWTCH.1))
 118 006e 2081      		ld r18,Z
 119 0070 3181      		ldd r19,Z+1
 120 0072 89E0      		ldi r24,lo8(9)
 121 0074 90E0      		ldi r25,0
 122               	.LVL12:
 123 0076 00C0      		rjmp .L5
 124               	.LVL13:
 125               	.L8:
 126 0078 6530      		cpi r22,lo8(5)
 127 007a 00F4      		brsh .L15
 128 007c E62F      		mov r30,r22
 129 007e F0E0      		ldi r31,0
 130 0080 DF01      		movw r26,r30
 131 0082 AA0F      		lsl r26
 132 0084 BB1F      		rol r27
 133               	.LVL14:
 134 0086 A050      		subi r26,lo8(-(CSWTCH.2))
 135 0088 B040      		sbci r27,hi8(-(CSWTCH.2))
 136 008a 2D91      		ld r18,X+
 137 008c 3C91      		ld r19,X
 138 008e E050      		subi r30,lo8(-(CSWTCH.3))
 139 0090 F040      		sbci r31,hi8(-(CSWTCH.3))
 140 0092 8081      		ld r24,Z
 141 0094 90E0      		ldi r25,0
 142 0096 00C0      		rjmp .L5
 143               	.LVL15:
 144               	.L12:
 539:../../protocol/lufa/descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 145               		.loc 1 539 0
 146 0098 82E1      		ldi r24,lo8(18)
 147 009a 90E0      		ldi r25,0
 148               	.LVL16:
 538:../../protocol/lufa/descriptor.c ****             Address = &DeviceDescriptor;
 149               		.loc 1 538 0
 150 009c 20E0      		ldi r18,lo8(DeviceDescriptor)
 151 009e 30E0      		ldi r19,hi8(DeviceDescriptor)
 152 00a0 00C0      		rjmp .L5
 153               	.L15:
 154 00a2 80E0      		ldi r24,0
 155 00a4 90E0      		ldi r25,0
 156 00a6 20E0      		ldi r18,0
 157 00a8 30E0      		ldi r19,0
 158               	.LVL17:
 159               	.L5:
 560:../../protocol/lufa/descriptor.c ****             }
 561:../../protocol/lufa/descriptor.c ****             break;
 562:../../protocol/lufa/descriptor.c ****         case HID_DTYPE_HID:
 563:../../protocol/lufa/descriptor.c ****             switch (wIndex) {
 564:../../protocol/lufa/descriptor.c ****             case KEYBOARD_INTERFACE:
 565:../../protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.Keyboard_HID;
 566:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 567:../../protocol/lufa/descriptor.c ****                 break;
 568:../../protocol/lufa/descriptor.c **** #ifdef MOUSE_ENABLE
 569:../../protocol/lufa/descriptor.c ****             case MOUSE_INTERFACE:
 570:../../protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.Mouse_HID;
 571:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 572:../../protocol/lufa/descriptor.c ****                 break;
 573:../../protocol/lufa/descriptor.c **** #endif
 574:../../protocol/lufa/descriptor.c **** #ifdef EXTRAKEY_ENABLE
 575:../../protocol/lufa/descriptor.c ****             case EXTRAKEY_INTERFACE:
 576:../../protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.Extrakey_HID;
 577:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 578:../../protocol/lufa/descriptor.c ****                 break;
 579:../../protocol/lufa/descriptor.c **** #endif
 580:../../protocol/lufa/descriptor.c **** #ifdef CONSOLE_ENABLE
 581:../../protocol/lufa/descriptor.c ****             case CONSOLE_INTERFACE:
 582:../../protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.Console_HID;
 583:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 584:../../protocol/lufa/descriptor.c ****                 break;
 585:../../protocol/lufa/descriptor.c **** #endif
 586:../../protocol/lufa/descriptor.c **** #ifdef NKRO_ENABLE
 587:../../protocol/lufa/descriptor.c ****             case NKRO_INTERFACE:
 588:../../protocol/lufa/descriptor.c ****                 Address = &ConfigurationDescriptor.NKRO_HID;
 589:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(USB_HID_Descriptor_HID_t);
 590:../../protocol/lufa/descriptor.c ****                 break;
 591:../../protocol/lufa/descriptor.c **** #endif
 592:../../protocol/lufa/descriptor.c ****             }
 593:../../protocol/lufa/descriptor.c ****             break;
 594:../../protocol/lufa/descriptor.c ****         case HID_DTYPE_Report:
 595:../../protocol/lufa/descriptor.c ****             switch (wIndex) {
 596:../../protocol/lufa/descriptor.c ****             case KEYBOARD_INTERFACE:
 597:../../protocol/lufa/descriptor.c ****                 Address = &KeyboardReport;
 598:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(KeyboardReport);
 599:../../protocol/lufa/descriptor.c ****                 break;
 600:../../protocol/lufa/descriptor.c **** #ifdef MOUSE_ENABLE
 601:../../protocol/lufa/descriptor.c ****             case MOUSE_INTERFACE:
 602:../../protocol/lufa/descriptor.c ****                 Address = &MouseReport;
 603:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(MouseReport);
 604:../../protocol/lufa/descriptor.c ****                 break;
 605:../../protocol/lufa/descriptor.c **** #endif
 606:../../protocol/lufa/descriptor.c **** #ifdef EXTRAKEY_ENABLE
 607:../../protocol/lufa/descriptor.c ****             case EXTRAKEY_INTERFACE:
 608:../../protocol/lufa/descriptor.c ****                 Address = &ExtrakeyReport;
 609:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(ExtrakeyReport);
 610:../../protocol/lufa/descriptor.c ****                 break;
 611:../../protocol/lufa/descriptor.c **** #endif
 612:../../protocol/lufa/descriptor.c **** #ifdef CONSOLE_ENABLE
 613:../../protocol/lufa/descriptor.c ****             case CONSOLE_INTERFACE:
 614:../../protocol/lufa/descriptor.c ****                 Address = &ConsoleReport;
 615:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(ConsoleReport);
 616:../../protocol/lufa/descriptor.c ****                 break;
 617:../../protocol/lufa/descriptor.c **** #endif
 618:../../protocol/lufa/descriptor.c **** #ifdef NKRO_ENABLE
 619:../../protocol/lufa/descriptor.c ****             case NKRO_INTERFACE:
 620:../../protocol/lufa/descriptor.c ****                 Address = &NKROReport;
 621:../../protocol/lufa/descriptor.c ****                 Size    = sizeof(NKROReport);
 622:../../protocol/lufa/descriptor.c ****                 break;
 623:../../protocol/lufa/descriptor.c **** #endif
 624:../../protocol/lufa/descriptor.c ****             }
 625:../../protocol/lufa/descriptor.c ****             break;
 626:../../protocol/lufa/descriptor.c ****     }
 627:../../protocol/lufa/descriptor.c **** 
 628:../../protocol/lufa/descriptor.c ****     *DescriptorAddress = Address;
 160               		.loc 1 628 0
 161 00aa FA01      		movw r30,r20
 162 00ac 3183      		std Z+1,r19
 163 00ae 2083      		st Z,r18
 629:../../protocol/lufa/descriptor.c ****     return Size;
 630:../../protocol/lufa/descriptor.c **** }
 164               		.loc 1 630 0
 165 00b0 0895      		ret
 166               		.cfi_endproc
 167               	.LFE99:
 169               		.section	.rodata
 172               	CSWTCH.3:
 173 0000 3F        		.byte	63
 174 0001 4D        		.byte	77
 175 0002 36        		.byte	54
 176 0003 20        		.byte	32
 177 0004 39        		.byte	57
 180               	CSWTCH.2:
 181 0005 0000      		.word	KeyboardReport
 182 0007 0000      		.word	MouseReport
 183 0009 0000      		.word	ExtrakeyReport
 184 000b 0000      		.word	ConsoleReport
 185 000d 0000      		.word	NKROReport
 188               	CSWTCH.1:
 189 000f 0000      		.word	ConfigurationDescriptor+18
 190 0011 0000      		.word	ConfigurationDescriptor+43
 191 0013 0000      		.word	ConfigurationDescriptor+68
 192 0015 0000      		.word	ConfigurationDescriptor+93
 193 0017 0000      		.word	ConfigurationDescriptor+125
 194               	.global	ProductString
 195               		.section	.progmem.data,"a",@progbits
 198               	ProductString:
 199 0000 0E        		.byte	14
 200 0001 03        		.byte	3
 201 0002 6A00      		.string	"j"
 202 0004 7500      		.string	"u"
 203 0006 6C00      		.string	"l"
 204 0008 6900      		.string	"i"
 205 000a 6100      		.string	"a"
 206 000c 6E00      		.string	"n"
 207 000e 00        		.string	""
 208 000f 00        		.string	""
 209               	.global	ManufacturerString
 212               	ManufacturerString:
 213 0010 0E        		.byte	14
 214 0011 03        		.byte	3
 215 0012 6A00      		.string	"j"
 216 0014 7500      		.string	"u"
 217 0016 6C00      		.string	"l"
 218 0018 6900      		.string	"i"
 219 001a 6100      		.string	"a"
 220 001c 6E00      		.string	"n"
 221 001e 00        		.string	""
 222 001f 00        		.string	""
 223               	.global	LanguageString
 226               	LanguageString:
 227 0020 04        		.byte	4
 228 0021 03        		.byte	3
 229 0022 0904      		.word	1033
 230               	.global	ConfigurationDescriptor
 233               	ConfigurationDescriptor:
 234 0024 09        		.byte	9
 235 0025 02        		.byte	2
 236 0026 8D00      		.word	141
 237 0028 05        		.byte	5
 238 0029 01        		.byte	1
 239 002a 00        		.byte	0
 240 002b A0        		.byte	-96
 241 002c 32        		.byte	50
 242 002d 09        		.byte	9
 243 002e 04        		.byte	4
 244 002f 00        		.byte	0
 245 0030 00        		.byte	0
 246 0031 01        		.byte	1
 247 0032 03        		.byte	3
 248 0033 01        		.byte	1
 249 0034 01        		.byte	1
 250 0035 00        		.byte	0
 251 0036 09        		.byte	9
 252 0037 21        		.byte	33
 253 0038 1101      		.word	273
 254 003a 00        		.byte	0
 255 003b 01        		.byte	1
 256 003c 22        		.byte	34
 257 003d 3F00      		.word	63
 258 003f 07        		.byte	7
 259 0040 05        		.byte	5
 260 0041 81        		.byte	-127
 261 0042 03        		.byte	3
 262 0043 0800      		.word	8
 263 0045 0A        		.byte	10
 264 0046 09        		.byte	9
 265 0047 04        		.byte	4
 266 0048 01        		.byte	1
 267 0049 00        		.byte	0
 268 004a 01        		.byte	1
 269 004b 03        		.byte	3
 270 004c 01        		.byte	1
 271 004d 02        		.byte	2
 272 004e 00        		.byte	0
 273 004f 09        		.byte	9
 274 0050 21        		.byte	33
 275 0051 1101      		.word	273
 276 0053 00        		.byte	0
 277 0054 01        		.byte	1
 278 0055 22        		.byte	34
 279 0056 4D00      		.word	77
 280 0058 07        		.byte	7
 281 0059 05        		.byte	5
 282 005a 82        		.byte	-126
 283 005b 03        		.byte	3
 284 005c 0800      		.word	8
 285 005e 0A        		.byte	10
 286 005f 09        		.byte	9
 287 0060 04        		.byte	4
 288 0061 02        		.byte	2
 289 0062 00        		.byte	0
 290 0063 01        		.byte	1
 291 0064 03        		.byte	3
 292 0065 00        		.byte	0
 293 0066 00        		.byte	0
 294 0067 00        		.byte	0
 295 0068 09        		.byte	9
 296 0069 21        		.byte	33
 297 006a 1101      		.word	273
 298 006c 00        		.byte	0
 299 006d 01        		.byte	1
 300 006e 22        		.byte	34
 301 006f 3600      		.word	54
 302 0071 07        		.byte	7
 303 0072 05        		.byte	5
 304 0073 83        		.byte	-125
 305 0074 03        		.byte	3
 306 0075 0800      		.word	8
 307 0077 0A        		.byte	10
 308 0078 09        		.byte	9
 309 0079 04        		.byte	4
 310 007a 03        		.byte	3
 311 007b 00        		.byte	0
 312 007c 02        		.byte	2
 313 007d 03        		.byte	3
 314 007e 00        		.byte	0
 315 007f 00        		.byte	0
 316 0080 00        		.byte	0
 317 0081 09        		.byte	9
 318 0082 21        		.byte	33
 319 0083 1101      		.word	273
 320 0085 00        		.byte	0
 321 0086 01        		.byte	1
 322 0087 22        		.byte	34
 323 0088 2000      		.word	32
 324 008a 07        		.byte	7
 325 008b 05        		.byte	5
 326 008c 84        		.byte	-124
 327 008d 03        		.byte	3
 328 008e 2000      		.word	32
 329 0090 01        		.byte	1
 330 0091 07        		.byte	7
 331 0092 05        		.byte	5
 332 0093 04        		.byte	4
 333 0094 03        		.byte	3
 334 0095 2000      		.word	32
 335 0097 01        		.byte	1
 336 0098 09        		.byte	9
 337 0099 04        		.byte	4
 338 009a 04        		.byte	4
 339 009b 00        		.byte	0
 340 009c 01        		.byte	1
 341 009d 03        		.byte	3
 342 009e 00        		.byte	0
 343 009f 00        		.byte	0
 344 00a0 00        		.byte	0
 345 00a1 09        		.byte	9
 346 00a2 21        		.byte	33
 347 00a3 1101      		.word	273
 348 00a5 00        		.byte	0
 349 00a6 01        		.byte	1
 350 00a7 22        		.byte	34
 351 00a8 3900      		.word	57
 352 00aa 07        		.byte	7
 353 00ab 05        		.byte	5
 354 00ac 85        		.byte	-123
 355 00ad 03        		.byte	3
 356 00ae 1000      		.word	16
 357 00b0 01        		.byte	1
 358               	.global	DeviceDescriptor
 361               	DeviceDescriptor:
 362 00b1 12        		.byte	18
 363 00b2 01        		.byte	1
 364 00b3 1001      		.word	272
 365 00b5 00        		.byte	0
 366 00b6 00        		.byte	0
 367 00b7 00        		.byte	0
 368 00b8 08        		.byte	8
 369 00b9 EDFE      		.word	-275
 370 00bb 6060      		.word	24672
 371 00bd 0100      		.word	1
 372 00bf 01        		.byte	1
 373 00c0 02        		.byte	2
 374 00c1 00        		.byte	0
 375 00c2 01        		.byte	1
 376               	.global	NKROReport
 379               	NKROReport:
 380 00c3 05        		.byte	5
 381 00c4 01        		.byte	1
 382 00c5 09        		.byte	9
 383 00c6 06        		.byte	6
 384 00c7 A1        		.byte	-95
 385 00c8 01        		.byte	1
 386 00c9 05        		.byte	5
 387 00ca 07        		.byte	7
 388 00cb 19        		.byte	25
 389 00cc E0        		.byte	-32
 390 00cd 29        		.byte	41
 391 00ce E7        		.byte	-25
 392 00cf 15        		.byte	21
 393 00d0 00        		.byte	0
 394 00d1 25        		.byte	37
 395 00d2 01        		.byte	1
 396 00d3 95        		.byte	-107
 397 00d4 08        		.byte	8
 398 00d5 75        		.byte	117
 399 00d6 01        		.byte	1
 400 00d7 81        		.byte	-127
 401 00d8 02        		.byte	2
 402 00d9 05        		.byte	5
 403 00da 08        		.byte	8
 404 00db 19        		.byte	25
 405 00dc 01        		.byte	1
 406 00dd 29        		.byte	41
 407 00de 05        		.byte	5
 408 00df 95        		.byte	-107
 409 00e0 05        		.byte	5
 410 00e1 75        		.byte	117
 411 00e2 01        		.byte	1
 412 00e3 91        		.byte	-111
 413 00e4 02        		.byte	2
 414 00e5 95        		.byte	-107
 415 00e6 01        		.byte	1
 416 00e7 75        		.byte	117
 417 00e8 03        		.byte	3
 418 00e9 91        		.byte	-111
 419 00ea 01        		.byte	1
 420 00eb 05        		.byte	5
 421 00ec 07        		.byte	7
 422 00ed 19        		.byte	25
 423 00ee 00        		.byte	0
 424 00ef 29        		.byte	41
 425 00f0 77        		.byte	119
 426 00f1 15        		.byte	21
 427 00f2 00        		.byte	0
 428 00f3 25        		.byte	37
 429 00f4 01        		.byte	1
 430 00f5 95        		.byte	-107
 431 00f6 78        		.byte	120
 432 00f7 75        		.byte	117
 433 00f8 01        		.byte	1
 434 00f9 81        		.byte	-127
 435 00fa 02        		.byte	2
 436 00fb C0        		.byte	-64
 437               	.global	ConsoleReport
 440               	ConsoleReport:
 441 00fc 06        		.byte	6
 442 00fd 31        		.byte	49
 443 00fe FF        		.byte	-1
 444 00ff 09        		.byte	9
 445 0100 74        		.byte	116
 446 0101 A1        		.byte	-95
 447 0102 01        		.byte	1
 448 0103 09        		.byte	9
 449 0104 75        		.byte	117
 450 0105 15        		.byte	21
 451 0106 00        		.byte	0
 452 0107 25        		.byte	37
 453 0108 FF        		.byte	-1
 454 0109 95        		.byte	-107
 455 010a 20        		.byte	32
 456 010b 75        		.byte	117
 457 010c 08        		.byte	8
 458 010d 81        		.byte	-127
 459 010e 02        		.byte	2
 460 010f 09        		.byte	9
 461 0110 76        		.byte	118
 462 0111 15        		.byte	21
 463 0112 00        		.byte	0
 464 0113 25        		.byte	37
 465 0114 FF        		.byte	-1
 466 0115 95        		.byte	-107
 467 0116 20        		.byte	32
 468 0117 75        		.byte	117
 469 0118 08        		.byte	8
 470 0119 91        		.byte	-111
 471 011a 02        		.byte	2
 472 011b C0        		.byte	-64
 473               	.global	ExtrakeyReport
 476               	ExtrakeyReport:
 477 011c 05        		.byte	5
 478 011d 01        		.byte	1
 479 011e 09        		.byte	9
 480 011f 80        		.byte	-128
 481 0120 A1        		.byte	-95
 482 0121 01        		.byte	1
 483 0122 85        		.byte	-123
 484 0123 02        		.byte	2
 485 0124 16        		.byte	22
 486 0125 01        		.byte	1
 487 0126 00        		.byte	0
 488 0127 26        		.byte	38
 489 0128 B7        		.byte	-73
 490 0129 00        		.byte	0
 491 012a 1A        		.byte	26
 492 012b 01        		.byte	1
 493 012c 00        		.byte	0
 494 012d 2A        		.byte	42
 495 012e B7        		.byte	-73
 496 012f 00        		.byte	0
 497 0130 75        		.byte	117
 498 0131 10        		.byte	16
 499 0132 95        		.byte	-107
 500 0133 01        		.byte	1
 501 0134 81        		.byte	-127
 502 0135 00        		.byte	0
 503 0136 C0        		.byte	-64
 504 0137 05        		.byte	5
 505 0138 0C        		.byte	12
 506 0139 09        		.byte	9
 507 013a 01        		.byte	1
 508 013b A1        		.byte	-95
 509 013c 01        		.byte	1
 510 013d 85        		.byte	-123
 511 013e 03        		.byte	3
 512 013f 16        		.byte	22
 513 0140 01        		.byte	1
 514 0141 00        		.byte	0
 515 0142 26        		.byte	38
 516 0143 9C        		.byte	-100
 517 0144 02        		.byte	2
 518 0145 1A        		.byte	26
 519 0146 01        		.byte	1
 520 0147 00        		.byte	0
 521 0148 2A        		.byte	42
 522 0149 9C        		.byte	-100
 523 014a 02        		.byte	2
 524 014b 75        		.byte	117
 525 014c 10        		.byte	16
 526 014d 95        		.byte	-107
 527 014e 01        		.byte	1
 528 014f 81        		.byte	-127
 529 0150 00        		.byte	0
 530 0151 C0        		.byte	-64
 531               	.global	MouseReport
 534               	MouseReport:
 535 0152 05        		.byte	5
 536 0153 01        		.byte	1
 537 0154 09        		.byte	9
 538 0155 02        		.byte	2
 539 0156 A1        		.byte	-95
 540 0157 01        		.byte	1
 541 0158 09        		.byte	9
 542 0159 01        		.byte	1
 543 015a A1        		.byte	-95
 544 015b 00        		.byte	0
 545 015c 05        		.byte	5
 546 015d 09        		.byte	9
 547 015e 19        		.byte	25
 548 015f 01        		.byte	1
 549 0160 29        		.byte	41
 550 0161 05        		.byte	5
 551 0162 15        		.byte	21
 552 0163 00        		.byte	0
 553 0164 25        		.byte	37
 554 0165 01        		.byte	1
 555 0166 95        		.byte	-107
 556 0167 05        		.byte	5
 557 0168 75        		.byte	117
 558 0169 01        		.byte	1
 559 016a 81        		.byte	-127
 560 016b 02        		.byte	2
 561 016c 95        		.byte	-107
 562 016d 01        		.byte	1
 563 016e 75        		.byte	117
 564 016f 03        		.byte	3
 565 0170 81        		.byte	-127
 566 0171 01        		.byte	1
 567 0172 05        		.byte	5
 568 0173 01        		.byte	1
 569 0174 09        		.byte	9
 570 0175 30        		.byte	48
 571 0176 09        		.byte	9
 572 0177 31        		.byte	49
 573 0178 15        		.byte	21
 574 0179 81        		.byte	-127
 575 017a 25        		.byte	37
 576 017b 7F        		.byte	127
 577 017c 95        		.byte	-107
 578 017d 02        		.byte	2
 579 017e 75        		.byte	117
 580 017f 08        		.byte	8
 581 0180 81        		.byte	-127
 582 0181 06        		.byte	6
 583 0182 09        		.byte	9
 584 0183 38        		.byte	56
 585 0184 15        		.byte	21
 586 0185 81        		.byte	-127
 587 0186 25        		.byte	37
 588 0187 7F        		.byte	127
 589 0188 95        		.byte	-107
 590 0189 01        		.byte	1
 591 018a 75        		.byte	117
 592 018b 08        		.byte	8
 593 018c 81        		.byte	-127
 594 018d 06        		.byte	6
 595 018e 05        		.byte	5
 596 018f 0C        		.byte	12
 597 0190 0A        		.byte	10
 598 0191 38        		.byte	56
 599 0192 02        		.byte	2
 600 0193 15        		.byte	21
 601 0194 81        		.byte	-127
 602 0195 25        		.byte	37
 603 0196 7F        		.byte	127
 604 0197 95        		.byte	-107
 605 0198 01        		.byte	1
 606 0199 75        		.byte	117
 607 019a 08        		.byte	8
 608 019b 81        		.byte	-127
 609 019c 06        		.byte	6
 610 019d C0        		.byte	-64
 611 019e C0        		.byte	-64
 612               	.global	KeyboardReport
 615               	KeyboardReport:
 616 019f 05        		.byte	5
 617 01a0 01        		.byte	1
 618 01a1 09        		.byte	9
 619 01a2 06        		.byte	6
 620 01a3 A1        		.byte	-95
 621 01a4 01        		.byte	1
 622 01a5 05        		.byte	5
 623 01a6 07        		.byte	7
 624 01a7 19        		.byte	25
 625 01a8 E0        		.byte	-32
 626 01a9 29        		.byte	41
 627 01aa E7        		.byte	-25
 628 01ab 15        		.byte	21
 629 01ac 00        		.byte	0
 630 01ad 25        		.byte	37
 631 01ae 01        		.byte	1
 632 01af 95        		.byte	-107
 633 01b0 08        		.byte	8
 634 01b1 75        		.byte	117
 635 01b2 01        		.byte	1
 636 01b3 81        		.byte	-127
 637 01b4 02        		.byte	2
 638 01b5 95        		.byte	-107
 639 01b6 01        		.byte	1
 640 01b7 75        		.byte	117
 641 01b8 08        		.byte	8
 642 01b9 81        		.byte	-127
 643 01ba 01        		.byte	1
 644 01bb 05        		.byte	5
 645 01bc 08        		.byte	8
 646 01bd 19        		.byte	25
 647 01be 01        		.byte	1
 648 01bf 29        		.byte	41
 649 01c0 05        		.byte	5
 650 01c1 95        		.byte	-107
 651 01c2 05        		.byte	5
 652 01c3 75        		.byte	117
 653 01c4 01        		.byte	1
 654 01c5 91        		.byte	-111
 655 01c6 02        		.byte	2
 656 01c7 95        		.byte	-107
 657 01c8 01        		.byte	1
 658 01c9 75        		.byte	117
 659 01ca 03        		.byte	3
 660 01cb 91        		.byte	-111
 661 01cc 01        		.byte	1
 662 01cd 05        		.byte	5
 663 01ce 07        		.byte	7
 664 01cf 19        		.byte	25
 665 01d0 00        		.byte	0
 666 01d1 29        		.byte	41
 667 01d2 FF        		.byte	-1
 668 01d3 15        		.byte	21
 669 01d4 00        		.byte	0
 670 01d5 25        		.byte	37
 671 01d6 FF        		.byte	-1
 672 01d7 95        		.byte	-107
 673 01d8 06        		.byte	6
 674 01d9 75        		.byte	117
 675 01da 08        		.byte	8
 676 01db 81        		.byte	-127
 677 01dc 00        		.byte	0
 678 01dd C0        		.byte	-64
 679               		.text
 680               	.Letext0:
 681               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 682               		.file 3 "/usr/local/CrossPack-AVR-20131216/lib/gcc/avr/4.8.1/include/stddef.h"
 683               		.file 4 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 684               		.file 5 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 685               		.file 6 "../../protocol/lufa/descriptor.h"
 686               		.file 7 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:00000000 descriptor.c
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:2      *ABS*:0000003e __SP_H__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:3      *ABS*:0000003d __SP_L__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:4      *ABS*:0000003f __SREG__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:6      *ABS*:00000001 __zero_reg__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:13     .text.CALLBACK_USB_GetDescriptor:00000000 CALLBACK_USB_GetDescriptor
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:233    .progmem.data:00000024 ConfigurationDescriptor
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:226    .progmem.data:00000020 LanguageString
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:212    .progmem.data:00000010 ManufacturerString
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:198    .progmem.data:00000000 ProductString
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:188    .rodata:0000000f CSWTCH.1
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:180    .rodata:00000005 CSWTCH.2
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:172    .rodata:00000000 CSWTCH.3
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:361    .progmem.data:000000b1 DeviceDescriptor
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:615    .progmem.data:0000019f KeyboardReport
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:534    .progmem.data:00000152 MouseReport
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:476    .progmem.data:0000011c ExtrakeyReport
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:440    .progmem.data:000000fc ConsoleReport
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccrH7Q2W.s:379    .progmem.data:000000c3 NKROReport

UNDEFINED SYMBOLS
__do_copy_data

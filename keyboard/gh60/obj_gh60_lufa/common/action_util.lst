   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB101:
  15               		.file 1 "../../tmk_core/common/action_util.c"
   1:../../tmk_core/common/action_util.c **** /*
   2:../../tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action_util.c **** 
   4:../../tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action_util.c **** (at your option) any later version.
   8:../../tmk_core/common/action_util.c **** 
   9:../../tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action_util.c **** 
  14:../../tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action_util.c **** */
  17:../../tmk_core/common/action_util.c **** #include "host.h"
  18:../../tmk_core/common/action_util.c **** #include "report.h"
  19:../../tmk_core/common/action_util.c **** #include "debug.h"
  20:../../tmk_core/common/action_util.c **** #include "action_util.h"
  21:../../tmk_core/common/action_util.c **** #include "timer.h"
  22:../../tmk_core/common/action_util.c **** 
  23:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  24:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  25:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  26:../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  27:../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  28:../../tmk_core/common/action_util.c **** #endif
  29:../../tmk_core/common/action_util.c **** 
  30:../../tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  31:../../tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  32:../../tmk_core/common/action_util.c **** 
  33:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  34:../../tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  35:../../tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  36:../../tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  37:../../tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  38:../../tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  39:../../tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  40:../../tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  41:../../tmk_core/common/action_util.c **** #endif
  42:../../tmk_core/common/action_util.c **** 
  43:../../tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  44:../../tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  45:../../tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  46:../../tmk_core/common/action_util.c **** 
  47:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  48:../../tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  49:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  50:../../tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  51:../../tmk_core/common/action_util.c **** #endif
  52:../../tmk_core/common/action_util.c **** #endif
  53:../../tmk_core/common/action_util.c **** 
  54:../../tmk_core/common/action_util.c **** 
  55:../../tmk_core/common/action_util.c **** void send_keyboard_report(void) {
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
  57:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
  58:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  59:../../tmk_core/common/action_util.c ****     if (oneshot_mods) {
  60:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  61:../../tmk_core/common/action_util.c ****         if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
  62:../../tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
  63:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  64:../../tmk_core/common/action_util.c ****         }
  65:../../tmk_core/common/action_util.c **** #endif
  66:../../tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
  67:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
  68:../../tmk_core/common/action_util.c ****             clear_oneshot_mods();
  69:../../tmk_core/common/action_util.c ****         }
  70:../../tmk_core/common/action_util.c ****     }
  71:../../tmk_core/common/action_util.c **** #endif
  72:../../tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
  73:../../tmk_core/common/action_util.c **** }
  74:../../tmk_core/common/action_util.c **** 
  75:../../tmk_core/common/action_util.c **** /* key */
  76:../../tmk_core/common/action_util.c **** void add_key(uint8_t key)
  77:../../tmk_core/common/action_util.c **** {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  78:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  79:../../tmk_core/common/action_util.c ****     if (keyboard_nkro) {
  23               		.loc 1 79 0
  24 0000 9091 0000 		lds r25,keyboard_nkro
  25 0004 9923      		tst r25
  26 0006 01F0      		breq .L2
  27               	.LVL1:
  28               	.LBB7:
  29               	.LBB8:
  80:../../tmk_core/common/action_util.c ****         add_key_bit(key);
  81:../../tmk_core/common/action_util.c ****         return;
  82:../../tmk_core/common/action_util.c ****     }
  83:../../tmk_core/common/action_util.c **** #endif
  84:../../tmk_core/common/action_util.c ****     add_key_byte(key);
  85:../../tmk_core/common/action_util.c **** }
  86:../../tmk_core/common/action_util.c **** 
  87:../../tmk_core/common/action_util.c **** void del_key(uint8_t key)
  88:../../tmk_core/common/action_util.c **** {
  89:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  90:../../tmk_core/common/action_util.c ****     if (keyboard_nkro) {
  91:../../tmk_core/common/action_util.c ****         del_key_bit(key);
  92:../../tmk_core/common/action_util.c ****         return;
  93:../../tmk_core/common/action_util.c ****     }
  94:../../tmk_core/common/action_util.c **** #endif
  95:../../tmk_core/common/action_util.c ****     del_key_byte(key);
  96:../../tmk_core/common/action_util.c **** }
  97:../../tmk_core/common/action_util.c **** 
  98:../../tmk_core/common/action_util.c **** void clear_keys(void)
  99:../../tmk_core/common/action_util.c **** {
 100:../../tmk_core/common/action_util.c ****     // not clear mods
 101:../../tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 102:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 103:../../tmk_core/common/action_util.c ****     }
 104:../../tmk_core/common/action_util.c **** }
 105:../../tmk_core/common/action_util.c **** 
 106:../../tmk_core/common/action_util.c **** 
 107:../../tmk_core/common/action_util.c **** /* modifier */
 108:../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 109:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 110:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 111:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 112:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 113:../../tmk_core/common/action_util.c **** 
 114:../../tmk_core/common/action_util.c **** /* weak modifier */
 115:../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 116:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 117:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 118:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 119:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 120:../../tmk_core/common/action_util.c **** 
 121:../../tmk_core/common/action_util.c **** /* Oneshot modifier */
 122:../../tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 123:../../tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 124:../../tmk_core/common/action_util.c **** {
 125:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 126:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:../../tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 128:../../tmk_core/common/action_util.c **** #endif
 129:../../tmk_core/common/action_util.c **** }
 130:../../tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 131:../../tmk_core/common/action_util.c **** {
 132:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 133:../../tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 134:../../tmk_core/common/action_util.c ****     oneshot_time = 0;
 135:../../tmk_core/common/action_util.c **** #endif
 136:../../tmk_core/common/action_util.c **** }
 137:../../tmk_core/common/action_util.c **** #endif
 138:../../tmk_core/common/action_util.c **** 
 139:../../tmk_core/common/action_util.c **** 
 140:../../tmk_core/common/action_util.c **** 
 141:../../tmk_core/common/action_util.c **** 
 142:../../tmk_core/common/action_util.c **** /*
 143:../../tmk_core/common/action_util.c ****  * inspect keyboard state
 144:../../tmk_core/common/action_util.c ****  */
 145:../../tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 146:../../tmk_core/common/action_util.c **** {
 147:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 148:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 149:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 150:../../tmk_core/common/action_util.c ****             cnt++;
 151:../../tmk_core/common/action_util.c ****     }
 152:../../tmk_core/common/action_util.c ****     return cnt;
 153:../../tmk_core/common/action_util.c **** }
 154:../../tmk_core/common/action_util.c **** 
 155:../../tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 156:../../tmk_core/common/action_util.c **** {
 157:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 158:../../tmk_core/common/action_util.c **** }
 159:../../tmk_core/common/action_util.c **** 
 160:../../tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 161:../../tmk_core/common/action_util.c **** {
 162:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 163:../../tmk_core/common/action_util.c ****     if (keyboard_nkro) {
 164:../../tmk_core/common/action_util.c ****         uint8_t i = 0;
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 166:../../tmk_core/common/action_util.c ****             ;
 167:../../tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 168:../../tmk_core/common/action_util.c ****     }
 169:../../tmk_core/common/action_util.c **** #endif
 170:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 171:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 172:../../tmk_core/common/action_util.c ****     do {
 173:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 174:../../tmk_core/common/action_util.c ****             break;
 175:../../tmk_core/common/action_util.c ****         }
 176:../../tmk_core/common/action_util.c ****         i = RO_INC(i);
 177:../../tmk_core/common/action_util.c ****     } while (i != cb_tail);
 178:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[i];
 179:../../tmk_core/common/action_util.c **** #else
 180:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 181:../../tmk_core/common/action_util.c **** #endif
 182:../../tmk_core/common/action_util.c **** }
 183:../../tmk_core/common/action_util.c **** 
 184:../../tmk_core/common/action_util.c **** 
 185:../../tmk_core/common/action_util.c **** 
 186:../../tmk_core/common/action_util.c **** /* local functions */
 187:../../tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code)
 188:../../tmk_core/common/action_util.c **** {
 189:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 190:../../tmk_core/common/action_util.c ****     int8_t i = cb_head;
 191:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 192:../../tmk_core/common/action_util.c ****     if (cb_count) {
 193:../../tmk_core/common/action_util.c ****         do {
 194:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 195:../../tmk_core/common/action_util.c ****                 return;
 196:../../tmk_core/common/action_util.c ****             }
 197:../../tmk_core/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 198:../../tmk_core/common/action_util.c ****                 empty = i;
 199:../../tmk_core/common/action_util.c ****             }
 200:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 201:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 202:../../tmk_core/common/action_util.c ****         if (i == cb_tail) {
 203:../../tmk_core/common/action_util.c ****             if (cb_tail == cb_head) {
 204:../../tmk_core/common/action_util.c ****                 // buffer is full
 205:../../tmk_core/common/action_util.c ****                 if (empty == -1) {
 206:../../tmk_core/common/action_util.c ****                     // pop head when has no empty space
 207:../../tmk_core/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 208:../../tmk_core/common/action_util.c ****                     cb_count--;
 209:../../tmk_core/common/action_util.c ****                 }
 210:../../tmk_core/common/action_util.c ****                 else {
 211:../../tmk_core/common/action_util.c ****                     // left shift when has empty space
 212:../../tmk_core/common/action_util.c ****                     uint8_t offset = 1;
 213:../../tmk_core/common/action_util.c ****                     i = RO_INC(empty);
 214:../../tmk_core/common/action_util.c ****                     do {
 215:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 216:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 217:../../tmk_core/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 218:../../tmk_core/common/action_util.c ****                             empty = RO_INC(empty);
 219:../../tmk_core/common/action_util.c ****                         }
 220:../../tmk_core/common/action_util.c ****                         else {
 221:../../tmk_core/common/action_util.c ****                             offset++;
 222:../../tmk_core/common/action_util.c ****                         }
 223:../../tmk_core/common/action_util.c ****                         i = RO_INC(i);
 224:../../tmk_core/common/action_util.c ****                     } while (i != cb_tail);
 225:../../tmk_core/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 226:../../tmk_core/common/action_util.c ****                 }
 227:../../tmk_core/common/action_util.c ****             }
 228:../../tmk_core/common/action_util.c ****         }
 229:../../tmk_core/common/action_util.c ****     }
 230:../../tmk_core/common/action_util.c ****     // add to tail
 231:../../tmk_core/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 232:../../tmk_core/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 233:../../tmk_core/common/action_util.c ****     cb_count++;
 234:../../tmk_core/common/action_util.c **** #else
 235:../../tmk_core/common/action_util.c ****     int8_t i = 0;
 236:../../tmk_core/common/action_util.c ****     int8_t empty = -1;
 237:../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 238:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 239:../../tmk_core/common/action_util.c ****             break;
 240:../../tmk_core/common/action_util.c ****         }
 241:../../tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
 242:../../tmk_core/common/action_util.c ****             empty = i;
 243:../../tmk_core/common/action_util.c ****         }
 244:../../tmk_core/common/action_util.c ****     }
 245:../../tmk_core/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
 246:../../tmk_core/common/action_util.c ****         if (empty != -1) {
 247:../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 248:../../tmk_core/common/action_util.c ****         }
 249:../../tmk_core/common/action_util.c ****     }
 250:../../tmk_core/common/action_util.c **** #endif
 251:../../tmk_core/common/action_util.c **** }
 252:../../tmk_core/common/action_util.c **** 
 253:../../tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 254:../../tmk_core/common/action_util.c **** {
 255:../../tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 256:../../tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 257:../../tmk_core/common/action_util.c ****     if (cb_count) {
 258:../../tmk_core/common/action_util.c ****         do {
 259:../../tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 260:../../tmk_core/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 261:../../tmk_core/common/action_util.c ****                 cb_count--;
 262:../../tmk_core/common/action_util.c ****                 if (cb_count == 0) {
 263:../../tmk_core/common/action_util.c ****                     // reset head and tail
 264:../../tmk_core/common/action_util.c ****                     cb_tail = cb_head = 0;
 265:../../tmk_core/common/action_util.c ****                 }
 266:../../tmk_core/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 267:../../tmk_core/common/action_util.c ****                     // left shift when next to tail
 268:../../tmk_core/common/action_util.c ****                     do {
 269:../../tmk_core/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 270:../../tmk_core/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 271:../../tmk_core/common/action_util.c ****                             break;
 272:../../tmk_core/common/action_util.c ****                         }
 273:../../tmk_core/common/action_util.c ****                     } while (cb_tail != cb_head);
 274:../../tmk_core/common/action_util.c ****                 }
 275:../../tmk_core/common/action_util.c ****                 break;
 276:../../tmk_core/common/action_util.c ****             }
 277:../../tmk_core/common/action_util.c ****             i = RO_INC(i);
 278:../../tmk_core/common/action_util.c ****         } while (i != cb_tail);
 279:../../tmk_core/common/action_util.c ****     }
 280:../../tmk_core/common/action_util.c **** #else
 281:../../tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 282:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 283:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 284:../../tmk_core/common/action_util.c ****         }
 285:../../tmk_core/common/action_util.c ****     }
 286:../../tmk_core/common/action_util.c **** #endif
 287:../../tmk_core/common/action_util.c **** }
 288:../../tmk_core/common/action_util.c **** 
 289:../../tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 290:../../tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code)
 291:../../tmk_core/common/action_util.c **** {
 292:../../tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
  30               		.loc 1 292 0
  31 0008 982F      		mov r25,r24
  32 000a 9695      		lsr r25
  33 000c 9695      		lsr r25
  34 000e 9695      		lsr r25
  35 0010 9F30      		cpi r25,lo8(15)
  36 0012 00F4      		brsh .L3
 293:../../tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
  37               		.loc 1 293 0
  38 0014 E091 0000 		lds r30,keyboard_report
  39 0018 F091 0000 		lds r31,keyboard_report+1
  40 001c E90F      		add r30,r25
  41 001e F11D      		adc r31,__zero_reg__
  42 0020 8770      		andi r24,lo8(7)
  43               	.LVL2:
  44 0022 21E0      		ldi r18,lo8(1)
  45 0024 30E0      		ldi r19,0
  46 0026 00C0      		rjmp 2f
  47               		1:
  48 0028 220F      		lsl r18
  49               		2:
  50 002a 8A95      		dec r24
  51 002c 02F4      		brpl 1b
  52 002e 8181      		ldd r24,Z+1
  53 0030 822B      		or r24,r18
  54 0032 8183      		std Z+1,r24
  55 0034 0895      		ret
  56               	.LVL3:
  57               	.L3:
 294:../../tmk_core/common/action_util.c ****     } else {
 295:../../tmk_core/common/action_util.c ****         dprintf("add_key_bit: can't add: %02X\n", code);
  58               		.loc 1 295 0
  59 0036 9091 0000 		lds r25,debug_config
  60 003a 90FF      		sbrs r25,0
  61 003c 00C0      		rjmp .L1
  62 003e 1F92      		push __zero_reg__
  63               	.LCFI0:
  64               		.cfi_def_cfa_offset 3
  65 0040 8F93      		push r24
  66               	.LCFI1:
  67               		.cfi_def_cfa_offset 4
  68 0042 80E0      		ldi r24,lo8(__c.4530)
  69 0044 90E0      		ldi r25,hi8(__c.4530)
  70               	.LVL4:
  71 0046 9F93      		push r25
  72               	.LCFI2:
  73               		.cfi_def_cfa_offset 5
  74               	.LVL5:
  75 0048 8F93      		push r24
  76               	.LCFI3:
  77               		.cfi_def_cfa_offset 6
  78               	.LVL6:
  79 004a 0E94 0000 		call __xprintf
  80               	.LVL7:
  81 004e 0F90      		pop __tmp_reg__
  82 0050 0F90      		pop __tmp_reg__
  83 0052 0F90      		pop __tmp_reg__
  84 0054 0F90      		pop __tmp_reg__
  85               	.LCFI4:
  86               		.cfi_def_cfa_offset 2
  87 0056 0895      		ret
  88               	.LVL8:
  89               	.L2:
  90               	.LBE8:
  91               	.LBE7:
  92               	.LBB9:
  93               	.LBB10:
 238:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
  94               		.loc 1 238 0
  95 0058 4091 0000 		lds r20,keyboard_report
  96 005c 5091 0000 		lds r21,keyboard_report+1
  97 0060 20E0      		ldi r18,0
  98 0062 30E0      		ldi r19,0
  99 0064 9FEF      		ldi r25,lo8(-1)
 100               	.L7:
 101               	.LVL9:
 102 0066 FA01      		movw r30,r20
 103 0068 E20F      		add r30,r18
 104 006a F31F      		adc r31,r19
 105 006c 6281      		ldd r22,Z+2
 106 006e 6817      		cp r22,r24
 107 0070 01F0      		breq .L1
 241:../../tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
 108               		.loc 1 241 0
 109 0072 9F3F      		cpi r25,lo8(-1)
 110 0074 01F4      		brne .L5
 111 0076 6111      		cpse r22,__zero_reg__
 112 0078 00C0      		rjmp .L5
 113 007a 922F      		mov r25,r18
 114               	.LVL10:
 115               	.L5:
 116 007c 2F5F      		subi r18,-1
 117 007e 3F4F      		sbci r19,-1
 118               	.LVL11:
 237:../../tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 119               		.loc 1 237 0
 120 0080 2E30      		cpi r18,14
 121 0082 3105      		cpc r19,__zero_reg__
 122 0084 01F4      		brne .L7
 246:../../tmk_core/common/action_util.c ****         if (empty != -1) {
 123               		.loc 1 246 0
 124 0086 9F3F      		cpi r25,lo8(-1)
 125 0088 01F0      		breq .L1
 247:../../tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 126               		.loc 1 247 0
 127 008a FA01      		movw r30,r20
 128 008c E90F      		add r30,r25
 129 008e F11D      		adc r31,__zero_reg__
 130 0090 97FD      		sbrc r25,7
 131 0092 FA95      		dec r31
 132 0094 8283      		std Z+2,r24
 133 0096 0895      		ret
 134               	.LVL12:
 135               	.L1:
 136 0098 0895      		ret
 137               	.LBE10:
 138               	.LBE9:
 139               		.cfi_endproc
 140               	.LFE101:
 142               		.section	.text.del_key,"ax",@progbits
 143               	.global	del_key
 145               	del_key:
 146               	.LFB102:
  88:../../tmk_core/common/action_util.c **** {
 147               		.loc 1 88 0
 148               		.cfi_startproc
 149               	.LVL13:
 150               	/* prologue: function */
 151               	/* frame size = 0 */
 152               	/* stack size = 0 */
 153               	.L__stack_usage = 0
  90:../../tmk_core/common/action_util.c ****     if (keyboard_nkro) {
 154               		.loc 1 90 0
 155 0000 9091 0000 		lds r25,keyboard_nkro
 156 0004 9923      		tst r25
 157 0006 01F0      		breq .L15
 158               	.LVL14:
 159               	.LBB17:
 160               	.LBB18:
 296:../../tmk_core/common/action_util.c ****     }
 297:../../tmk_core/common/action_util.c **** }
 298:../../tmk_core/common/action_util.c **** 
 299:../../tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code)
 300:../../tmk_core/common/action_util.c **** {
 301:../../tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 161               		.loc 1 301 0
 162 0008 982F      		mov r25,r24
 163 000a 9695      		lsr r25
 164 000c 9695      		lsr r25
 165 000e 9695      		lsr r25
 166 0010 9F30      		cpi r25,lo8(15)
 167 0012 00F4      		brsh .L16
 302:../../tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
 168               		.loc 1 302 0
 169 0014 E091 0000 		lds r30,keyboard_report
 170 0018 F091 0000 		lds r31,keyboard_report+1
 171 001c E90F      		add r30,r25
 172 001e F11D      		adc r31,__zero_reg__
 173 0020 8770      		andi r24,lo8(7)
 174               	.LVL15:
 175 0022 21E0      		ldi r18,lo8(1)
 176 0024 30E0      		ldi r19,0
 177 0026 00C0      		rjmp 2f
 178               		1:
 179 0028 220F      		lsl r18
 180               		2:
 181 002a 8A95      		dec r24
 182 002c 02F4      		brpl 1b
 183 002e 2095      		com r18
 184 0030 8181      		ldd r24,Z+1
 185 0032 2823      		and r18,r24
 186 0034 2183      		std Z+1,r18
 187 0036 0895      		ret
 188               	.LVL16:
 189               	.L16:
 303:../../tmk_core/common/action_util.c ****     } else {
 304:../../tmk_core/common/action_util.c ****         dprintf("del_key_bit: can't del: %02X\n", code);
 190               		.loc 1 304 0
 191 0038 9091 0000 		lds r25,debug_config
 192 003c 90FF      		sbrs r25,0
 193 003e 00C0      		rjmp .L14
 194 0040 1F92      		push __zero_reg__
 195               	.LCFI5:
 196               		.cfi_def_cfa_offset 3
 197 0042 8F93      		push r24
 198               	.LCFI6:
 199               		.cfi_def_cfa_offset 4
 200 0044 80E0      		ldi r24,lo8(__c.4535)
 201 0046 90E0      		ldi r25,hi8(__c.4535)
 202               	.LVL17:
 203 0048 9F93      		push r25
 204               	.LCFI7:
 205               		.cfi_def_cfa_offset 5
 206               	.LVL18:
 207 004a 8F93      		push r24
 208               	.LCFI8:
 209               		.cfi_def_cfa_offset 6
 210               	.LVL19:
 211 004c 0E94 0000 		call __xprintf
 212               	.LVL20:
 213 0050 0F90      		pop __tmp_reg__
 214 0052 0F90      		pop __tmp_reg__
 215 0054 0F90      		pop __tmp_reg__
 216 0056 0F90      		pop __tmp_reg__
 217               	.LCFI9:
 218               		.cfi_def_cfa_offset 2
 219 0058 0895      		ret
 220               	.LVL21:
 221               	.L15:
 222               	.LBE18:
 223               	.LBE17:
 224               	.LBB19:
 225               	.LBB20:
 282:../../tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 226               		.loc 1 282 0
 227 005a 4091 0000 		lds r20,keyboard_report
 228 005e 5091 0000 		lds r21,keyboard_report+1
 229 0062 20E0      		ldi r18,0
 230 0064 30E0      		ldi r19,0
 231               	.L21:
 232               	.LVL22:
 233 0066 FA01      		movw r30,r20
 234 0068 E20F      		add r30,r18
 235 006a F31F      		adc r31,r19
 236 006c 9281      		ldd r25,Z+2
 237 006e 9813      		cpse r25,r24
 238 0070 00C0      		rjmp .L19
 283:../../tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 239               		.loc 1 283 0
 240 0072 1282      		std Z+2,__zero_reg__
 241               	.L19:
 242               	.LVL23:
 243 0074 2F5F      		subi r18,-1
 244 0076 3F4F      		sbci r19,-1
 245               	.LVL24:
 281:../../tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 246               		.loc 1 281 0
 247 0078 2E30      		cpi r18,14
 248 007a 3105      		cpc r19,__zero_reg__
 249 007c 01F4      		brne .L21
 250               	.LVL25:
 251               	.L14:
 252 007e 0895      		ret
 253               	.LBE20:
 254               	.LBE19:
 255               		.cfi_endproc
 256               	.LFE102:
 258               		.section	.text.clear_keys,"ax",@progbits
 259               	.global	clear_keys
 261               	clear_keys:
 262               	.LFB103:
  99:../../tmk_core/common/action_util.c **** {
 263               		.loc 1 99 0
 264               		.cfi_startproc
 265               	/* prologue: function */
 266               	/* frame size = 0 */
 267               	/* stack size = 0 */
 268               	.L__stack_usage = 0
 269               	.LVL26:
  99:../../tmk_core/common/action_util.c **** {
 270               		.loc 1 99 0
 271 0000 81E0      		ldi r24,lo8(1)
 272 0002 90E0      		ldi r25,0
 273               	.LVL27:
 274               	.L27:
 275               	.LBB21:
 102:../../tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 276               		.loc 1 102 0 discriminator 2
 277 0004 E091 0000 		lds r30,keyboard_report
 278 0008 F091 0000 		lds r31,keyboard_report+1
 279 000c E80F      		add r30,r24
 280 000e F91F      		adc r31,r25
 281 0010 1082      		st Z,__zero_reg__
 282               	.LVL28:
 283 0012 0196      		adiw r24,1
 284               	.LVL29:
 101:../../tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 285               		.loc 1 101 0 discriminator 2
 286 0014 8031      		cpi r24,16
 287 0016 9105      		cpc r25,__zero_reg__
 288 0018 01F4      		brne .L27
 289               	/* epilogue start */
 290               	.LBE21:
 104:../../tmk_core/common/action_util.c **** }
 291               		.loc 1 104 0
 292 001a 0895      		ret
 293               		.cfi_endproc
 294               	.LFE103:
 296               		.section	.text.get_mods,"ax",@progbits
 297               	.global	get_mods
 299               	get_mods:
 300               	.LFB104:
 108:../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 301               		.loc 1 108 0
 302               		.cfi_startproc
 303               	/* prologue: function */
 304               	/* frame size = 0 */
 305               	/* stack size = 0 */
 306               	.L__stack_usage = 0
 108:../../tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 307               		.loc 1 108 0
 308 0000 8091 0000 		lds r24,real_mods
 309 0004 0895      		ret
 310               		.cfi_endproc
 311               	.LFE104:
 313               		.section	.text.add_mods,"ax",@progbits
 314               	.global	add_mods
 316               	add_mods:
 317               	.LFB105:
 109:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 318               		.loc 1 109 0
 319               		.cfi_startproc
 320               	.LVL30:
 321               	/* prologue: function */
 322               	/* frame size = 0 */
 323               	/* stack size = 0 */
 324               	.L__stack_usage = 0
 109:../../tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 325               		.loc 1 109 0
 326 0000 9091 0000 		lds r25,real_mods
 327 0004 982B      		or r25,r24
 328 0006 9093 0000 		sts real_mods,r25
 329 000a 0895      		ret
 330               		.cfi_endproc
 331               	.LFE105:
 333               		.section	.text.del_mods,"ax",@progbits
 334               	.global	del_mods
 336               	del_mods:
 337               	.LFB106:
 110:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 338               		.loc 1 110 0
 339               		.cfi_startproc
 340               	.LVL31:
 341               	/* prologue: function */
 342               	/* frame size = 0 */
 343               	/* stack size = 0 */
 344               	.L__stack_usage = 0
 110:../../tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 345               		.loc 1 110 0
 346 0000 8095      		com r24
 347               	.LVL32:
 348 0002 9091 0000 		lds r25,real_mods
 349 0006 9823      		and r25,r24
 350 0008 9093 0000 		sts real_mods,r25
 351 000c 0895      		ret
 352               		.cfi_endproc
 353               	.LFE106:
 355               		.section	.text.set_mods,"ax",@progbits
 356               	.global	set_mods
 358               	set_mods:
 359               	.LFB107:
 111:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 360               		.loc 1 111 0
 361               		.cfi_startproc
 362               	.LVL33:
 363               	/* prologue: function */
 364               	/* frame size = 0 */
 365               	/* stack size = 0 */
 366               	.L__stack_usage = 0
 111:../../tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 367               		.loc 1 111 0
 368 0000 8093 0000 		sts real_mods,r24
 369 0004 0895      		ret
 370               		.cfi_endproc
 371               	.LFE107:
 373               		.section	.text.clear_mods,"ax",@progbits
 374               	.global	clear_mods
 376               	clear_mods:
 377               	.LFB108:
 112:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 378               		.loc 1 112 0
 379               		.cfi_startproc
 380               	/* prologue: function */
 381               	/* frame size = 0 */
 382               	/* stack size = 0 */
 383               	.L__stack_usage = 0
 112:../../tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 384               		.loc 1 112 0
 385 0000 1092 0000 		sts real_mods,__zero_reg__
 386 0004 0895      		ret
 387               		.cfi_endproc
 388               	.LFE108:
 390               		.section	.text.get_weak_mods,"ax",@progbits
 391               	.global	get_weak_mods
 393               	get_weak_mods:
 394               	.LFB109:
 115:../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 395               		.loc 1 115 0
 396               		.cfi_startproc
 397               	/* prologue: function */
 398               	/* frame size = 0 */
 399               	/* stack size = 0 */
 400               	.L__stack_usage = 0
 115:../../tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 401               		.loc 1 115 0
 402 0000 8091 0000 		lds r24,weak_mods
 403 0004 0895      		ret
 404               		.cfi_endproc
 405               	.LFE109:
 407               		.section	.text.add_weak_mods,"ax",@progbits
 408               	.global	add_weak_mods
 410               	add_weak_mods:
 411               	.LFB110:
 116:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 412               		.loc 1 116 0
 413               		.cfi_startproc
 414               	.LVL34:
 415               	/* prologue: function */
 416               	/* frame size = 0 */
 417               	/* stack size = 0 */
 418               	.L__stack_usage = 0
 116:../../tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 419               		.loc 1 116 0
 420 0000 9091 0000 		lds r25,weak_mods
 421 0004 982B      		or r25,r24
 422 0006 9093 0000 		sts weak_mods,r25
 423 000a 0895      		ret
 424               		.cfi_endproc
 425               	.LFE110:
 427               		.section	.text.del_weak_mods,"ax",@progbits
 428               	.global	del_weak_mods
 430               	del_weak_mods:
 431               	.LFB111:
 117:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 432               		.loc 1 117 0
 433               		.cfi_startproc
 434               	.LVL35:
 435               	/* prologue: function */
 436               	/* frame size = 0 */
 437               	/* stack size = 0 */
 438               	.L__stack_usage = 0
 117:../../tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 439               		.loc 1 117 0
 440 0000 8095      		com r24
 441               	.LVL36:
 442 0002 9091 0000 		lds r25,weak_mods
 443 0006 9823      		and r25,r24
 444 0008 9093 0000 		sts weak_mods,r25
 445 000c 0895      		ret
 446               		.cfi_endproc
 447               	.LFE111:
 449               		.section	.text.set_weak_mods,"ax",@progbits
 450               	.global	set_weak_mods
 452               	set_weak_mods:
 453               	.LFB112:
 118:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 454               		.loc 1 118 0
 455               		.cfi_startproc
 456               	.LVL37:
 457               	/* prologue: function */
 458               	/* frame size = 0 */
 459               	/* stack size = 0 */
 460               	.L__stack_usage = 0
 118:../../tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 461               		.loc 1 118 0
 462 0000 8093 0000 		sts weak_mods,r24
 463 0004 0895      		ret
 464               		.cfi_endproc
 465               	.LFE112:
 467               		.section	.text.clear_weak_mods,"ax",@progbits
 468               	.global	clear_weak_mods
 470               	clear_weak_mods:
 471               	.LFB113:
 119:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 472               		.loc 1 119 0
 473               		.cfi_startproc
 474               	/* prologue: function */
 475               	/* frame size = 0 */
 476               	/* stack size = 0 */
 477               	.L__stack_usage = 0
 119:../../tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 478               		.loc 1 119 0
 479 0000 1092 0000 		sts weak_mods,__zero_reg__
 480 0004 0895      		ret
 481               		.cfi_endproc
 482               	.LFE113:
 484               		.section	.text.set_oneshot_mods,"ax",@progbits
 485               	.global	set_oneshot_mods
 487               	set_oneshot_mods:
 488               	.LFB114:
 124:../../tmk_core/common/action_util.c **** {
 489               		.loc 1 124 0
 490               		.cfi_startproc
 491               	.LVL38:
 492               	/* prologue: function */
 493               	/* frame size = 0 */
 494               	/* stack size = 0 */
 495               	.L__stack_usage = 0
 125:../../tmk_core/common/action_util.c ****     oneshot_mods = mods;
 496               		.loc 1 125 0
 497 0000 8093 0000 		sts oneshot_mods,r24
 498 0004 0895      		ret
 499               		.cfi_endproc
 500               	.LFE114:
 502               		.section	.text.clear_oneshot_mods,"ax",@progbits
 503               	.global	clear_oneshot_mods
 505               	clear_oneshot_mods:
 506               	.LFB115:
 131:../../tmk_core/common/action_util.c **** {
 507               		.loc 1 131 0
 508               		.cfi_startproc
 509               	/* prologue: function */
 510               	/* frame size = 0 */
 511               	/* stack size = 0 */
 512               	.L__stack_usage = 0
 132:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 513               		.loc 1 132 0
 514 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 515 0004 0895      		ret
 516               		.cfi_endproc
 517               	.LFE115:
 519               		.section	.text.has_anykey,"ax",@progbits
 520               	.global	has_anykey
 522               	has_anykey:
 523               	.LFB116:
 146:../../tmk_core/common/action_util.c **** {
 524               		.loc 1 146 0
 525               		.cfi_startproc
 526               	/* prologue: function */
 527               	/* frame size = 0 */
 528               	/* stack size = 0 */
 529               	.L__stack_usage = 0
 530               	.LVL39:
 531               	.LBB22:
 149:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 532               		.loc 1 149 0
 533 0000 4091 0000 		lds r20,keyboard_report
 534 0004 5091 0000 		lds r21,keyboard_report+1
 535 0008 20E0      		ldi r18,0
 536 000a 30E0      		ldi r19,0
 537               	.LBE22:
 147:../../tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 538               		.loc 1 147 0
 539 000c 80E0      		ldi r24,0
 540               	.LVL40:
 541               	.L43:
 542 000e FA01      		movw r30,r20
 543 0010 E20F      		add r30,r18
 544 0012 F31F      		adc r31,r19
 545               	.LBB23:
 149:../../tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 546               		.loc 1 149 0
 547 0014 9181      		ldd r25,Z+1
 548 0016 9111      		cpse r25,__zero_reg__
 150:../../tmk_core/common/action_util.c ****             cnt++;
 549               		.loc 1 150 0
 550 0018 8F5F      		subi r24,lo8(-(1))
 551               	.LVL41:
 552               	.L41:
 553 001a 2F5F      		subi r18,-1
 554 001c 3F4F      		sbci r19,-1
 555               	.LVL42:
 148:../../tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 556               		.loc 1 148 0
 557 001e 2F30      		cpi r18,15
 558 0020 3105      		cpc r19,__zero_reg__
 559 0022 01F4      		brne .L43
 560               	/* epilogue start */
 561               	.LBE23:
 153:../../tmk_core/common/action_util.c **** }
 562               		.loc 1 153 0
 563 0024 0895      		ret
 564               		.cfi_endproc
 565               	.LFE116:
 567               		.section	.text.send_keyboard_report,"ax",@progbits
 568               	.global	send_keyboard_report
 570               	send_keyboard_report:
 571               	.LFB100:
  55:../../tmk_core/common/action_util.c **** void send_keyboard_report(void) {
 572               		.loc 1 55 0
 573               		.cfi_startproc
 574               	/* prologue: function */
 575               	/* frame size = 0 */
 576               	/* stack size = 0 */
 577               	.L__stack_usage = 0
  56:../../tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 578               		.loc 1 56 0
 579 0000 E091 0000 		lds r30,keyboard_report
 580 0004 F091 0000 		lds r31,keyboard_report+1
 581 0008 8091 0000 		lds r24,real_mods
 582 000c 8083      		st Z,r24
  57:../../tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 583               		.loc 1 57 0
 584 000e E091 0000 		lds r30,keyboard_report
 585 0012 F091 0000 		lds r31,keyboard_report+1
 586 0016 8081      		ld r24,Z
 587 0018 9091 0000 		lds r25,weak_mods
 588 001c 892B      		or r24,r25
 589 001e 8083      		st Z,r24
  59:../../tmk_core/common/action_util.c ****     if (oneshot_mods) {
 590               		.loc 1 59 0
 591 0020 9091 0000 		lds r25,oneshot_mods
 592 0024 9923      		tst r25
 593 0026 01F0      		breq .L49
  66:../../tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 594               		.loc 1 66 0
 595 0028 E091 0000 		lds r30,keyboard_report
 596 002c F091 0000 		lds r31,keyboard_report+1
 597 0030 8081      		ld r24,Z
 598 0032 892B      		or r24,r25
 599 0034 8083      		st Z,r24
  67:../../tmk_core/common/action_util.c ****         if (has_anykey()) {
 600               		.loc 1 67 0
 601 0036 0E94 0000 		call has_anykey
 602               	.LVL43:
 603 003a 8111      		cpse r24,__zero_reg__
 604               	.LBB26:
 605               	.LBB27:
 132:../../tmk_core/common/action_util.c ****     oneshot_mods = 0;
 606               		.loc 1 132 0
 607 003c 1092 0000 		sts oneshot_mods,__zero_reg__
 608               	.L49:
 609               	.LBE27:
 610               	.LBE26:
  72:../../tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
 611               		.loc 1 72 0
 612 0040 8091 0000 		lds r24,keyboard_report
 613 0044 9091 0000 		lds r25,keyboard_report+1
 614 0048 0C94 0000 		jmp host_keyboard_send
 615               	.LVL44:
 616               		.cfi_endproc
 617               	.LFE100:
 619               		.section	.text.has_anymod,"ax",@progbits
 620               	.global	has_anymod
 622               	has_anymod:
 623               	.LFB117:
 156:../../tmk_core/common/action_util.c **** {
 624               		.loc 1 156 0
 625               		.cfi_startproc
 626               	/* prologue: function */
 627               	/* frame size = 0 */
 628               	/* stack size = 0 */
 629               	.L__stack_usage = 0
 157:../../tmk_core/common/action_util.c ****     return bitpop(real_mods);
 630               		.loc 1 157 0
 631 0000 8091 0000 		lds r24,real_mods
 632 0004 0C94 0000 		jmp bitpop
 633               	.LVL45:
 634               		.cfi_endproc
 635               	.LFE117:
 637               		.section	.text.get_first_key,"ax",@progbits
 638               	.global	get_first_key
 640               	get_first_key:
 641               	.LFB118:
 161:../../tmk_core/common/action_util.c **** {
 642               		.loc 1 161 0
 643               		.cfi_startproc
 644 0000 CF93      		push r28
 645               	.LCFI10:
 646               		.cfi_def_cfa_offset 3
 647               		.cfi_offset 28, -2
 648 0002 DF93      		push r29
 649               	.LCFI11:
 650               		.cfi_def_cfa_offset 4
 651               		.cfi_offset 29, -3
 652               	/* prologue: function */
 653               	/* frame size = 0 */
 654               	/* stack size = 2 */
 655               	.L__stack_usage = 2
 163:../../tmk_core/common/action_util.c ****     if (keyboard_nkro) {
 656               		.loc 1 163 0
 657 0004 8091 0000 		lds r24,keyboard_nkro
 658 0008 E091 0000 		lds r30,keyboard_report
 659 000c F091 0000 		lds r31,keyboard_report+1
 660 0010 8823      		tst r24
 661 0012 01F0      		breq .L56
 662               	.LBB28:
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 663               		.loc 1 165 0
 664 0014 20E0      		ldi r18,0
 665 0016 30E0      		ldi r19,0
 666               	.L57:
 667 0018 C22F      		mov r28,r18
 668               	.LVL46:
 669 001a DF01      		movw r26,r30
 670 001c A20F      		add r26,r18
 671 001e B31F      		adc r27,r19
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 672               		.loc 1 165 0 is_stmt 0 discriminator 2
 673 0020 1196      		adiw r26,1
 674 0022 8C91      		ld r24,X
 675 0024 8111      		cpse r24,__zero_reg__
 676 0026 00C0      		rjmp .L58
 677               	.LVL47:
 678 0028 2F5F      		subi r18,-1
 679 002a 3F4F      		sbci r19,-1
 680               	.LVL48:
 165:../../tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 681               		.loc 1 165 0 discriminator 1
 682 002c 2F30      		cpi r18,15
 683 002e 3105      		cpc r19,__zero_reg__
 684 0030 01F4      		brne .L57
 685 0032 CFE0      		ldi r28,lo8(15)
 686               	.LVL49:
 687               	.L58:
 167:../../tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 688               		.loc 1 167 0 is_stmt 1
 689 0034 D0E0      		ldi r29,0
 690 0036 EC0F      		add r30,r28
 691 0038 FD1F      		adc r31,r29
 692 003a 8181      		ldd r24,Z+1
 693 003c 0E94 0000 		call biton
 694               	.LVL50:
 695 0040 93E0      		ldi r25,3
 696               		1:
 697 0042 CC0F      		lsl r28
 698 0044 DD1F      		rol r29
 699 0046 9A95      		dec r25
 700 0048 01F4      		brne 1b
 701 004a 8C2B      		or r24,r28
 702 004c 00C0      		rjmp .L60
 703               	.L56:
 704               	.LBE28:
 180:../../tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 705               		.loc 1 180 0
 706 004e 8281      		ldd r24,Z+2
 707               	.L60:
 708               	/* epilogue start */
 182:../../tmk_core/common/action_util.c **** }
 709               		.loc 1 182 0
 710 0050 DF91      		pop r29
 711 0052 CF91      		pop r28
 712 0054 0895      		ret
 713               		.cfi_endproc
 714               	.LFE118:
 716               		.section	.progmem.data.__c.4535,"a",@progbits
 719               	__c.4535:
 720 0000 6465 6C5F 		.string	"del_key_bit: can't del: %02X\n"
 720      6B65 795F 
 720      6269 743A 
 720      2063 616E 
 720      2774 2064 
 721               		.section	.progmem.data.__c.4530,"a",@progbits
 724               	__c.4530:
 725 0000 6164 645F 		.string	"add_key_bit: can't add: %02X\n"
 725      6B65 795F 
 725      6269 743A 
 725      2063 616E 
 725      2774 2061 
 726               		.section	.bss.oneshot_mods,"aw",@nobits
 729               	oneshot_mods:
 730 0000 00        		.zero	1
 731               	.global	keyboard_report
 732               		.section	.data.keyboard_report,"aw",@progbits
 735               	keyboard_report:
 736 0000 0000      		.word	__compound_literal.0
 737               		.section	.bss.__compound_literal.0,"aw",@nobits
 740               	__compound_literal.0:
 741 0000 0000 0000 		.zero	16
 741      0000 0000 
 741      0000 0000 
 741      0000 0000 
 742               		.section	.bss.weak_mods,"aw",@nobits
 745               	weak_mods:
 746 0000 00        		.zero	1
 747               		.section	.bss.real_mods,"aw",@nobits
 750               	real_mods:
 751 0000 00        		.zero	1
 752               		.text
 753               	.Letext0:
 754               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 755               		.file 3 "../../tmk_core/common/report.h"
 756               		.file 4 "../../tmk_core/common/debug.h"
 757               		.file 5 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 758               		.file 6 "../../tmk_core/common/host.h"
 759               		.file 7 "../../tmk_core/common/avr/xprintf.h"
 760               		.file 8 "../../tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:00000000 action_util.c
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:2      *ABS*:0000003e __SP_H__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:3      *ABS*:0000003d __SP_L__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:4      *ABS*:0000003f __SREG__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:6      *ABS*:00000001 __zero_reg__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:13     .text.add_key:00000000 add_key
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:735    .data.keyboard_report:00000000 keyboard_report
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:724    .progmem.data.__c.4530:00000000 __c.4530
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:145    .text.del_key:00000000 del_key
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:719    .progmem.data.__c.4535:00000000 __c.4535
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:261    .text.clear_keys:00000000 clear_keys
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:299    .text.get_mods:00000000 get_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:750    .bss.real_mods:00000000 real_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:316    .text.add_mods:00000000 add_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:336    .text.del_mods:00000000 del_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:358    .text.set_mods:00000000 set_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:376    .text.clear_mods:00000000 clear_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:393    .text.get_weak_mods:00000000 get_weak_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:745    .bss.weak_mods:00000000 weak_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:410    .text.add_weak_mods:00000000 add_weak_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:430    .text.del_weak_mods:00000000 del_weak_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:452    .text.set_weak_mods:00000000 set_weak_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:470    .text.clear_weak_mods:00000000 clear_weak_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:487    .text.set_oneshot_mods:00000000 set_oneshot_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:729    .bss.oneshot_mods:00000000 oneshot_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:505    .text.clear_oneshot_mods:00000000 clear_oneshot_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:522    .text.has_anykey:00000000 has_anykey
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:570    .text.send_keyboard_report:00000000 send_keyboard_report
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:622    .text.has_anymod:00000000 has_anymod
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:640    .text.get_first_key:00000000 get_first_key
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cctxCO34.s:740    .bss.__compound_literal.0:00000000 __compound_literal.0

UNDEFINED SYMBOLS
keyboard_nkro
debug_config
__xprintf
host_keyboard_send
bitpop
biton
__do_copy_data
__do_clear_bss

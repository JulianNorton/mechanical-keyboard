   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_power_up,"ax",@progbits
  11               		.weak	matrix_power_up
  13               	matrix_power_up:
  14               	.LFB3:
  15               		.file 1 "../../common/keyboard.h"
   1:../../common/keyboard.h **** /*
   2:../../common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/keyboard.h **** 
   4:../../common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/keyboard.h **** (at your option) any later version.
   8:../../common/keyboard.h **** 
   9:../../common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/keyboard.h **** GNU General Public License for more details.
  13:../../common/keyboard.h **** 
  14:../../common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/keyboard.h **** */
  17:../../common/keyboard.h **** 
  18:../../common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../common/keyboard.h **** #define KEYBOARD_H
  20:../../common/keyboard.h **** 
  21:../../common/keyboard.h **** #include <stdbool.h>
  22:../../common/keyboard.h **** #include <stdint.h>
  23:../../common/keyboard.h **** 
  24:../../common/keyboard.h **** 
  25:../../common/keyboard.h **** #ifdef __cplusplus
  26:../../common/keyboard.h **** extern "C" {
  27:../../common/keyboard.h **** #endif
  28:../../common/keyboard.h **** 
  29:../../common/keyboard.h **** /* key matrix position */
  30:../../common/keyboard.h **** typedef struct {
  31:../../common/keyboard.h ****     uint8_t col;
  32:../../common/keyboard.h ****     uint8_t row;
  33:../../common/keyboard.h **** } keypos_t;
  34:../../common/keyboard.h **** 
  35:../../common/keyboard.h **** /* key event */
  36:../../common/keyboard.h **** typedef struct {
  37:../../common/keyboard.h ****     keypos_t key;
  38:../../common/keyboard.h ****     bool     pressed;
  39:../../common/keyboard.h ****     uint16_t time;
  40:../../common/keyboard.h **** } keyevent_t;
  41:../../common/keyboard.h **** 
  42:../../common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../common/keyboard.h **** 
  45:../../common/keyboard.h **** /* Rules for No Event:
  46:../../common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../common/keyboard.h ****  */
  49:../../common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  50:../../common/keyboard.h **** static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
  51:../../common/keyboard.h **** static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
  52:../../common/keyboard.h **** 
  53:../../common/keyboard.h **** /* Tick event */
  54:../../common/keyboard.h **** #define TICK                    (keyevent_t){           \
  55:../../common/keyboard.h ****     .key = (keypos_t){ .row = 255, .col = 255 },           \
  56:../../common/keyboard.h ****     .pressed = false,                                   \
  57:../../common/keyboard.h ****     .time = (timer_read() | 1)                          \
  58:../../common/keyboard.h **** }
  59:../../common/keyboard.h **** 
  60:../../common/keyboard.h **** 
  61:../../common/keyboard.h **** void keyboard_init(void);
  62:../../common/keyboard.h **** void keyboard_task(void);
  63:../../common/keyboard.h **** void keyboard_set_leds(uint8_t leds);
  64:../../common/keyboard.h **** 
  65:../../common/keyboard.h **** __attribute__ ((weak)) void matrix_power_up(void) {}
  16               		.loc 1 65 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE3:
  26               		.section	.text.matrix_power_down,"ax",@progbits
  27               		.weak	matrix_power_down
  29               	matrix_power_down:
  30               	.LFB4:
  66:../../common/keyboard.h **** __attribute__ ((weak)) void matrix_power_down(void) {}
  31               		.loc 1 66 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
  37 0000 0895      		ret
  38               		.cfi_endproc
  39               	.LFE4:
  41               		.section	.text.keyboard_init,"ax",@progbits
  42               	.global	keyboard_init
  44               	keyboard_init:
  45               	.LFB104:
  46               		.file 2 "../../common/keyboard.c"
   1:../../common/keyboard.c **** /*
   2:../../common/keyboard.c **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/keyboard.c **** 
   4:../../common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:../../common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:../../common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/keyboard.c **** (at your option) any later version.
   8:../../common/keyboard.c **** 
   9:../../common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:../../common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/keyboard.c **** GNU General Public License for more details.
  13:../../common/keyboard.c **** 
  14:../../common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:../../common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/keyboard.c **** */
  17:../../common/keyboard.c **** #include <stdint.h>
  18:../../common/keyboard.c **** #include "keyboard.h"
  19:../../common/keyboard.c **** #include "matrix.h"
  20:../../common/keyboard.c **** #include "keymap.h"
  21:../../common/keyboard.c **** #include "host.h"
  22:../../common/keyboard.c **** #include "led.h"
  23:../../common/keyboard.c **** #include "keycode.h"
  24:../../common/keyboard.c **** #include "timer.h"
  25:../../common/keyboard.c **** #include "print.h"
  26:../../common/keyboard.c **** #include "debug.h"
  27:../../common/keyboard.c **** #include "command.h"
  28:../../common/keyboard.c **** #include "util.h"
  29:../../common/keyboard.c **** #include "sendchar.h"
  30:../../common/keyboard.c **** #include "bootmagic.h"
  31:../../common/keyboard.c **** #include "eeconfig.h"
  32:../../common/keyboard.c **** #include "backlight.h"
  33:../../common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  34:../../common/keyboard.c **** #   include "mousekey.h"
  35:../../common/keyboard.c **** #endif
  36:../../common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  37:../../common/keyboard.c **** #   include "ps2_mouse.h"
  38:../../common/keyboard.c **** #endif
  39:../../common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  40:../../common/keyboard.c **** #include "serial_mouse.h"
  41:../../common/keyboard.c **** #endif
  42:../../common/keyboard.c **** 
  43:../../common/keyboard.c **** 
  44:../../common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  45:../../common/keyboard.c **** static bool has_ghost_in_row(uint8_t row)
  46:../../common/keyboard.c **** {
  47:../../common/keyboard.c ****     matrix_row_t matrix_row = matrix_get_row(row);
  48:../../common/keyboard.c ****     // No ghost exists when less than 2 keys are down on the row
  49:../../common/keyboard.c ****     if (((matrix_row - 1) & matrix_row) == 0)
  50:../../common/keyboard.c ****         return false;
  51:../../common/keyboard.c **** 
  52:../../common/keyboard.c ****     // Ghost occurs when the row shares column line with other row
  53:../../common/keyboard.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
  54:../../common/keyboard.c ****         if (i != row && (matrix_get_row(i) & matrix_row))
  55:../../common/keyboard.c ****             return true;
  56:../../common/keyboard.c ****     }
  57:../../common/keyboard.c ****     return false;
  58:../../common/keyboard.c **** }
  59:../../common/keyboard.c **** #endif
  60:../../common/keyboard.c **** 
  61:../../common/keyboard.c **** 
  62:../../common/keyboard.c **** void keyboard_init(void)
  63:../../common/keyboard.c **** {
  47               		.loc 2 63 0
  48               		.cfi_startproc
  49               	/* prologue: function */
  50               	/* frame size = 0 */
  51               	/* stack size = 0 */
  52               	.L__stack_usage = 0
  64:../../common/keyboard.c ****     timer_init();
  53               		.loc 2 64 0
  54 0000 0E94 0000 		call timer_init
  55               	.LVL0:
  65:../../common/keyboard.c ****     matrix_init();
  56               		.loc 2 65 0
  57 0004 0E94 0000 		call matrix_init
  58               	.LVL1:
  66:../../common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  67:../../common/keyboard.c ****     ps2_mouse_init();
  68:../../common/keyboard.c **** #endif
  69:../../common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  70:../../common/keyboard.c ****     serial_mouse_init();
  71:../../common/keyboard.c **** #endif
  72:../../common/keyboard.c **** 
  73:../../common/keyboard.c **** 
  74:../../common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  75:../../common/keyboard.c ****     bootmagic();
  59               		.loc 2 75 0
  60 0008 0C94 0000 		jmp bootmagic
  61               	.LVL2:
  62               		.cfi_endproc
  63               	.LFE104:
  65               		.section	.text.keyboard_set_leds,"ax",@progbits
  66               	.global	keyboard_set_leds
  68               	keyboard_set_leds:
  69               	.LFB106:
  76:../../common/keyboard.c **** #endif
  77:../../common/keyboard.c **** 
  78:../../common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
  79:../../common/keyboard.c ****     backlight_init();
  80:../../common/keyboard.c **** #endif
  81:../../common/keyboard.c **** }
  82:../../common/keyboard.c **** 
  83:../../common/keyboard.c **** /*
  84:../../common/keyboard.c ****  * Do keyboard routine jobs: scan mantrix, light LEDs, ...
  85:../../common/keyboard.c ****  * This is repeatedly called as fast as possible.
  86:../../common/keyboard.c ****  */
  87:../../common/keyboard.c **** void keyboard_task(void)
  88:../../common/keyboard.c **** {
  89:../../common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
  90:../../common/keyboard.c ****     static uint8_t led_status = 0;
  91:../../common/keyboard.c ****     matrix_row_t matrix_row = 0;
  92:../../common/keyboard.c ****     matrix_row_t matrix_change = 0;
  93:../../common/keyboard.c **** 
  94:../../common/keyboard.c ****     matrix_scan();
  95:../../common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  96:../../common/keyboard.c ****         matrix_row = matrix_get_row(r);
  97:../../common/keyboard.c ****         matrix_change = matrix_row ^ matrix_prev[r];
  98:../../common/keyboard.c ****         if (matrix_change) {
  99:../../common/keyboard.c ****             if (debug_matrix) matrix_print();
 100:../../common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 101:../../common/keyboard.c ****             if (has_ghost_in_row(r)) {
 102:../../common/keyboard.c ****                 matrix_prev[r] = matrix_row;
 103:../../common/keyboard.c ****                 continue;
 104:../../common/keyboard.c ****             }
 105:../../common/keyboard.c **** #endif
 106:../../common/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 107:../../common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 108:../../common/keyboard.c ****                     action_exec((keyevent_t){
 109:../../common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 110:../../common/keyboard.c ****                         .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 111:../../common/keyboard.c ****                         .time = (timer_read() | 1) /* time should not be 0 */
 112:../../common/keyboard.c ****                     });
 113:../../common/keyboard.c ****                     // record a processed key
 114:../../common/keyboard.c ****                     matrix_prev[r] ^= ((matrix_row_t)1<<c);
 115:../../common/keyboard.c ****                     // process a key per task call
 116:../../common/keyboard.c ****                     goto MATRIX_LOOP_END;
 117:../../common/keyboard.c ****                 }
 118:../../common/keyboard.c ****             }
 119:../../common/keyboard.c ****         }
 120:../../common/keyboard.c ****     }
 121:../../common/keyboard.c ****     // call with pseudo tick event when no real key event.
 122:../../common/keyboard.c ****     action_exec(TICK);
 123:../../common/keyboard.c **** 
 124:../../common/keyboard.c **** MATRIX_LOOP_END:
 125:../../common/keyboard.c **** 
 126:../../common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 127:../../common/keyboard.c ****     // mousekey repeat & acceleration
 128:../../common/keyboard.c ****     mousekey_task();
 129:../../common/keyboard.c **** #endif
 130:../../common/keyboard.c **** 
 131:../../common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 132:../../common/keyboard.c ****     ps2_mouse_task();
 133:../../common/keyboard.c **** #endif
 134:../../common/keyboard.c **** 
 135:../../common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 136:../../common/keyboard.c ****         serial_mouse_task();
 137:../../common/keyboard.c **** #endif
 138:../../common/keyboard.c **** 
 139:../../common/keyboard.c ****     // update LED
 140:../../common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 141:../../common/keyboard.c ****         led_status = host_keyboard_leds();
 142:../../common/keyboard.c ****         keyboard_set_leds(led_status);
 143:../../common/keyboard.c ****     }
 144:../../common/keyboard.c **** }
 145:../../common/keyboard.c **** 
 146:../../common/keyboard.c **** void keyboard_set_leds(uint8_t leds)
 147:../../common/keyboard.c **** {
  70               		.loc 2 147 0
  71               		.cfi_startproc
  72               	.LVL3:
  73 0000 CF93      		push r28
  74               	.LCFI0:
  75               		.cfi_def_cfa_offset 3
  76               		.cfi_offset 28, -2
  77               	/* prologue: function */
  78               	/* frame size = 0 */
  79               	/* stack size = 1 */
  80               	.L__stack_usage = 1
  81 0002 C82F      		mov r28,r24
 148:../../common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
  82               		.loc 2 148 0
  83 0004 8091 0000 		lds r24,debug_config
  84               	.LVL4:
  85 0008 82FF      		sbrs r24,2
  86 000a 00C0      		rjmp .L6
  87               		.loc 2 148 0 is_stmt 0 discriminator 1
  88 000c 80FF      		sbrs r24,0
  89 000e 00C0      		rjmp .L7
  90 0010 80E0      		ldi r24,lo8(__c.4664)
  91 0012 90E0      		ldi r25,hi8(__c.4664)
  92 0014 0E94 0000 		call xputs
  93               	.LVL5:
  94               	.L7:
  95               		.loc 2 148 0 discriminator 2
  96 0018 8091 0000 		lds r24,debug_config
  97 001c 80FF      		sbrs r24,0
  98 001e 00C0      		rjmp .L8
  99               		.loc 2 148 0 discriminator 1
 100 0020 1F92      		push __zero_reg__
 101               	.LCFI1:
 102               		.cfi_def_cfa_offset 4
 103 0022 CF93      		push r28
 104               	.LCFI2:
 105               		.cfi_def_cfa_offset 5
 106 0024 20E0      		ldi r18,lo8(__c.4666)
 107 0026 30E0      		ldi r19,hi8(__c.4666)
 108 0028 3F93      		push r19
 109               	.LCFI3:
 110               		.cfi_def_cfa_offset 6
 111 002a 2F93      		push r18
 112               	.LCFI4:
 113               		.cfi_def_cfa_offset 7
 114 002c 0E94 0000 		call __xprintf
 115               	.LVL6:
 116 0030 0F90      		pop __tmp_reg__
 117 0032 0F90      		pop __tmp_reg__
 118 0034 0F90      		pop __tmp_reg__
 119 0036 0F90      		pop __tmp_reg__
 120               	.LCFI5:
 121               		.cfi_def_cfa_offset 3
 122               	.L8:
 123               		.loc 2 148 0 discriminator 2
 124 0038 8091 0000 		lds r24,debug_config
 125 003c 80FF      		sbrs r24,0
 126 003e 00C0      		rjmp .L6
 127               		.loc 2 148 0 discriminator 1
 128 0040 80E0      		ldi r24,lo8(__c.4668)
 129 0042 90E0      		ldi r25,hi8(__c.4668)
 130 0044 0E94 0000 		call xputs
 131               	.LVL7:
 132               	.L6:
 149:../../common/keyboard.c ****     led_set(leds);
 133               		.loc 2 149 0 is_stmt 1
 134 0048 8C2F      		mov r24,r28
 135               	/* epilogue start */
 150:../../common/keyboard.c **** }
 136               		.loc 2 150 0
 137 004a CF91      		pop r28
 138               	.LVL8:
 149:../../common/keyboard.c ****     led_set(leds);
 139               		.loc 2 149 0
 140 004c 0C94 0000 		jmp led_set
 141               	.LVL9:
 142               		.cfi_endproc
 143               	.LFE106:
 145               		.section	.text.keyboard_task,"ax",@progbits
 146               	.global	keyboard_task
 148               	keyboard_task:
 149               	.LFB105:
  88:../../common/keyboard.c **** {
 150               		.loc 2 88 0
 151               		.cfi_startproc
 152 0000 5F92      		push r5
 153               	.LCFI6:
 154               		.cfi_def_cfa_offset 3
 155               		.cfi_offset 5, -2
 156 0002 6F92      		push r6
 157               	.LCFI7:
 158               		.cfi_def_cfa_offset 4
 159               		.cfi_offset 6, -3
 160 0004 7F92      		push r7
 161               	.LCFI8:
 162               		.cfi_def_cfa_offset 5
 163               		.cfi_offset 7, -4
 164 0006 8F92      		push r8
 165               	.LCFI9:
 166               		.cfi_def_cfa_offset 6
 167               		.cfi_offset 8, -5
 168 0008 9F92      		push r9
 169               	.LCFI10:
 170               		.cfi_def_cfa_offset 7
 171               		.cfi_offset 9, -6
 172 000a AF92      		push r10
 173               	.LCFI11:
 174               		.cfi_def_cfa_offset 8
 175               		.cfi_offset 10, -7
 176 000c BF92      		push r11
 177               	.LCFI12:
 178               		.cfi_def_cfa_offset 9
 179               		.cfi_offset 11, -8
 180 000e CF92      		push r12
 181               	.LCFI13:
 182               		.cfi_def_cfa_offset 10
 183               		.cfi_offset 12, -9
 184 0010 DF92      		push r13
 185               	.LCFI14:
 186               		.cfi_def_cfa_offset 11
 187               		.cfi_offset 13, -10
 188 0012 EF92      		push r14
 189               	.LCFI15:
 190               		.cfi_def_cfa_offset 12
 191               		.cfi_offset 14, -11
 192 0014 FF92      		push r15
 193               	.LCFI16:
 194               		.cfi_def_cfa_offset 13
 195               		.cfi_offset 15, -12
 196 0016 0F93      		push r16
 197               	.LCFI17:
 198               		.cfi_def_cfa_offset 14
 199               		.cfi_offset 16, -13
 200 0018 1F93      		push r17
 201               	.LCFI18:
 202               		.cfi_def_cfa_offset 15
 203               		.cfi_offset 17, -14
 204 001a CF93      		push r28
 205               	.LCFI19:
 206               		.cfi_def_cfa_offset 16
 207               		.cfi_offset 28, -15
 208 001c DF93      		push r29
 209               	.LCFI20:
 210               		.cfi_def_cfa_offset 17
 211               		.cfi_offset 29, -16
 212 001e CDB7      		in r28,__SP_L__
 213 0020 DEB7      		in r29,__SP_H__
 214               	.LCFI21:
 215               		.cfi_def_cfa_register 28
 216 0022 2A97      		sbiw r28,10
 217               	.LCFI22:
 218               		.cfi_def_cfa_offset 27
 219 0024 0FB6      		in __tmp_reg__,__SREG__
 220 0026 F894      		cli
 221 0028 DEBF      		out __SP_H__,r29
 222 002a 0FBE      		out __SREG__,__tmp_reg__
 223 002c CDBF      		out __SP_L__,r28
 224               	/* prologue: function */
 225               	/* frame size = 10 */
 226               	/* stack size = 25 */
 227               	.L__stack_usage = 25
 228               	.LVL10:
  94:../../common/keyboard.c ****     matrix_scan();
 229               		.loc 2 94 0
 230 002e 0E94 0000 		call matrix_scan
 231               	.LVL11:
 232 0032 90E0      		ldi r25,lo8(matrix_prev.4644)
 233 0034 C92E      		mov r12,r25
 234 0036 90E0      		ldi r25,hi8(matrix_prev.4644)
 235 0038 D92E      		mov r13,r25
 236 003a 00E0      		ldi r16,0
 237 003c 10E0      		ldi r17,0
 238               	.LBB2:
 239               	.LBB3:
 107:../../common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 240               		.loc 2 107 0
 241 003e AA24      		clr r10
 242 0040 A394      		inc r10
 243 0042 B12C      		mov r11,__zero_reg__
 244               	.LVL12:
 245               	.L30:
 246 0044 502E      		mov r5,r16
 247               	.LVL13:
 248               	.LBE3:
  96:../../common/keyboard.c ****         matrix_row = matrix_get_row(r);
 249               		.loc 2 96 0
 250 0046 802F      		mov r24,r16
 251 0048 0E94 0000 		call matrix_get_row
 252               	.LVL14:
 253 004c 3C01      		movw r6,r24
 254               	.LVL15:
  97:../../common/keyboard.c ****         matrix_change = matrix_row ^ matrix_prev[r];
 255               		.loc 2 97 0
 256 004e F601      		movw r30,r12
 257 0050 E190      		ld r14,Z+
 258 0052 F190      		ld r15,Z+
 259 0054 6F01      		movw r12,r30
 260 0056 E826      		eor r14,r24
 261 0058 F926      		eor r15,r25
 262               	.LVL16:
  98:../../common/keyboard.c ****         if (matrix_change) {
 263               		.loc 2 98 0
 264 005a E114      		cp r14,__zero_reg__
 265 005c F104      		cpc r15,__zero_reg__
 266 005e 01F4      		brne .L21
 267               	.L28:
 268               	.LVL17:
 269 0060 0F5F      		subi r16,-1
 270 0062 1F4F      		sbci r17,-1
 271               	.LVL18:
  95:../../common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 272               		.loc 2 95 0
 273 0064 0530      		cpi r16,5
 274 0066 1105      		cpc r17,__zero_reg__
 275 0068 01F4      		brne .L30
 276               	.LBE2:
 122:../../common/keyboard.c ****     action_exec(TICK);
 277               		.loc 2 122 0
 278 006a 8FEF      		ldi r24,lo8(-1)
 279 006c 8983      		std Y+1,r24
 280 006e 8A83      		std Y+2,r24
 281 0070 1B82      		std Y+3,__zero_reg__
 282 0072 0E94 0000 		call timer_read
 283               	.LVL19:
 284 0076 8160      		ori r24,1
 285 0078 782F      		mov r23,r24
 286 007a 9D83      		std Y+5,r25
 287 007c 8C83      		std Y+4,r24
 288 007e 4981      		ldd r20,Y+1
 289 0080 5A81      		ldd r21,Y+2
 290 0082 6B81      		ldd r22,Y+3
 291 0084 8D81      		ldd r24,Y+5
 292 0086 0E94 0000 		call action_exec
 293               	.LVL20:
 294 008a 00C0      		rjmp .L27
 295               	.L21:
 296               	.LBB5:
  99:../../common/keyboard.c ****             if (debug_matrix) matrix_print();
 297               		.loc 2 99 0
 298 008c 8091 0000 		lds r24,debug_config
 299 0090 81FD      		sbrc r24,1
  99:../../common/keyboard.c ****             if (debug_matrix) matrix_print();
 300               		.loc 2 99 0 is_stmt 0 discriminator 1
 301 0092 0E94 0000 		call matrix_print
 302               	.LVL21:
 303               	.L24:
 304               	.LBE5:
  94:../../common/keyboard.c ****     matrix_scan();
 305               		.loc 2 94 0 is_stmt 1
 306 0096 20E0      		ldi r18,0
 307 0098 30E0      		ldi r19,0
 308               	.LVL22:
 309               	.L29:
 310               	.LBB6:
 311               	.LBB4:
 107:../../common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 312               		.loc 2 107 0
 313 009a 4501      		movw r8,r10
 314 009c 022E      		mov r0,r18
 315 009e 00C0      		rjmp 2f
 316               		1:
 317 00a0 880C      		lsl r8
 318 00a2 991C      		rol r9
 319               		2:
 320 00a4 0A94      		dec r0
 321 00a6 02F4      		brpl 1b
 322 00a8 C401      		movw r24,r8
 323 00aa 8E21      		and r24,r14
 324 00ac 9F21      		and r25,r15
 325 00ae 892B      		or r24,r25
 326 00b0 01F0      		breq .L25
 108:../../common/keyboard.c ****                     action_exec((keyevent_t){
 327               		.loc 2 108 0
 328 00b2 2E83      		std Y+6,r18
 329 00b4 5F82      		std Y+7,r5
 110:../../common/keyboard.c ****                         .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 330               		.loc 2 110 0
 331 00b6 6820      		and r6,r8
 332 00b8 7920      		and r7,r9
 333               	.LVL23:
 334 00ba 81E0      		ldi r24,lo8(1)
 335 00bc 6728      		or r6,r7
 336 00be 01F4      		brne .L26
 337 00c0 80E0      		ldi r24,0
 338               	.L26:
 108:../../common/keyboard.c ****                     action_exec((keyevent_t){
 339               		.loc 2 108 0
 340 00c2 8887      		std Y+8,r24
 111:../../common/keyboard.c ****                         .time = (timer_read() | 1) /* time should not be 0 */
 341               		.loc 2 111 0
 342 00c4 0E94 0000 		call timer_read
 343               	.LVL24:
 344 00c8 8160      		ori r24,1
 108:../../common/keyboard.c ****                     action_exec((keyevent_t){
 345               		.loc 2 108 0
 346 00ca 782F      		mov r23,r24
 347 00cc 9A87      		std Y+10,r25
 348 00ce 8987      		std Y+9,r24
 349 00d0 4E81      		ldd r20,Y+6
 350 00d2 5F81      		ldd r21,Y+7
 351 00d4 6885      		ldd r22,Y+8
 352 00d6 8A85      		ldd r24,Y+10
 353 00d8 0E94 0000 		call action_exec
 354               	.LVL25:
 114:../../common/keyboard.c ****                     matrix_prev[r] ^= ((matrix_row_t)1<<c);
 355               		.loc 2 114 0
 356 00dc F801      		movw r30,r16
 357 00de EE0F      		lsl r30
 358 00e0 FF1F      		rol r31
 359 00e2 E050      		subi r30,lo8(-(matrix_prev.4644))
 360 00e4 F040      		sbci r31,hi8(-(matrix_prev.4644))
 361 00e6 8081      		ld r24,Z
 362 00e8 9181      		ldd r25,Z+1
 363 00ea 8825      		eor r24,r8
 364 00ec 9925      		eor r25,r9
 365 00ee 9183      		std Z+1,r25
 366 00f0 8083      		st Z,r24
 116:../../common/keyboard.c ****                     goto MATRIX_LOOP_END;
 367               		.loc 2 116 0
 368 00f2 00C0      		rjmp .L27
 369               	.LVL26:
 370               	.L25:
 371 00f4 2F5F      		subi r18,-1
 372 00f6 3F4F      		sbci r19,-1
 373               	.LVL27:
 106:../../common/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 374               		.loc 2 106 0
 375 00f8 2F30      		cpi r18,15
 376 00fa 3105      		cpc r19,__zero_reg__
 377 00fc 01F4      		brne .L29
 378 00fe 00C0      		rjmp .L28
 379               	.LVL28:
 380               	.L27:
 381               	.LBE4:
 382               	.LBE6:
 128:../../common/keyboard.c ****     mousekey_task();
 383               		.loc 2 128 0
 384 0100 0E94 0000 		call mousekey_task
 385               	.LVL29:
 140:../../common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 386               		.loc 2 140 0
 387 0104 1091 0000 		lds r17,led_status.4645
 388 0108 0E94 0000 		call host_keyboard_leds
 389               	.LVL30:
 390 010c 1817      		cp r17,r24
 391 010e 01F0      		breq .L20
 141:../../common/keyboard.c ****         led_status = host_keyboard_leds();
 392               		.loc 2 141 0
 393 0110 0E94 0000 		call host_keyboard_leds
 394               	.LVL31:
 395 0114 8093 0000 		sts led_status.4645,r24
 396               	/* epilogue start */
 144:../../common/keyboard.c **** }
 397               		.loc 2 144 0
 398 0118 2A96      		adiw r28,10
 399 011a 0FB6      		in __tmp_reg__,__SREG__
 400 011c F894      		cli
 401 011e DEBF      		out __SP_H__,r29
 402 0120 0FBE      		out __SREG__,__tmp_reg__
 403 0122 CDBF      		out __SP_L__,r28
 404 0124 DF91      		pop r29
 405 0126 CF91      		pop r28
 406 0128 1F91      		pop r17
 407 012a 0F91      		pop r16
 408 012c FF90      		pop r15
 409 012e EF90      		pop r14
 410               	.LVL32:
 411 0130 DF90      		pop r13
 412 0132 CF90      		pop r12
 413 0134 BF90      		pop r11
 414 0136 AF90      		pop r10
 415 0138 9F90      		pop r9
 416 013a 8F90      		pop r8
 417 013c 7F90      		pop r7
 418 013e 6F90      		pop r6
 419 0140 5F90      		pop r5
 142:../../common/keyboard.c ****         keyboard_set_leds(led_status);
 420               		.loc 2 142 0
 421 0142 0C94 0000 		jmp keyboard_set_leds
 422               	.LVL33:
 423               	.L20:
 424               	/* epilogue start */
 144:../../common/keyboard.c **** }
 425               		.loc 2 144 0
 426 0146 2A96      		adiw r28,10
 427 0148 0FB6      		in __tmp_reg__,__SREG__
 428 014a F894      		cli
 429 014c DEBF      		out __SP_H__,r29
 430 014e 0FBE      		out __SREG__,__tmp_reg__
 431 0150 CDBF      		out __SP_L__,r28
 432 0152 DF91      		pop r29
 433 0154 CF91      		pop r28
 434 0156 1F91      		pop r17
 435 0158 0F91      		pop r16
 436 015a FF90      		pop r15
 437 015c EF90      		pop r14
 438               	.LVL34:
 439 015e DF90      		pop r13
 440 0160 CF90      		pop r12
 441 0162 BF90      		pop r11
 442 0164 AF90      		pop r10
 443 0166 9F90      		pop r9
 444 0168 8F90      		pop r8
 445 016a 7F90      		pop r7
 446 016c 6F90      		pop r6
 447 016e 5F90      		pop r5
 448 0170 0895      		ret
 449               		.cfi_endproc
 450               	.LFE105:
 452               		.section	.progmem.data,"a",@progbits
 455               	__c.4668:
 456 0000 0A00      		.string	"\n"
 459               	__c.4666:
 460 0002 2530 3258 		.string	"%02X"
 460      00
 463               	__c.4664:
 464 0007 6B65 7962 		.string	"keyboard_set_led: "
 464      6F61 7264 
 464      5F73 6574 
 464      5F6C 6564 
 464      3A20 00
 465               		.local	led_status.4645
 466               		.comm	led_status.4645,1,1
 467               		.local	matrix_prev.4644
 468               		.comm	matrix_prev.4644,10,1
 469               		.comm	keymap_config,1,1
 470               		.text
 471               	.Letext0:
 472               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 473               		.file 4 "../../common/matrix.h"
 474               		.file 5 "../../common/keymap.h"
 475               		.file 6 "../../common/debug.h"
 476               		.file 7 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
 477               		.file 8 "../../common/timer.h"
 478               		.file 9 "../../common/bootmagic.h"
 479               		.file 10 "../../common/avr/xprintf.h"
 480               		.file 11 "../../common/led.h"
 481               		.file 12 "../../common/action.h"
 482               		.file 13 "../../common/mousekey.h"
 483               		.file 14 "../../common/host.h"
DEFINED SYMBOLS
                            *ABS*:00000000 keyboard.c
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccyNRgbw.s:2      *ABS*:0000003e __SP_H__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccyNRgbw.s:3      *ABS*:0000003d __SP_L__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccyNRgbw.s:4      *ABS*:0000003f __SREG__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccyNRgbw.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccyNRgbw.s:6      *ABS*:00000001 __zero_reg__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccyNRgbw.s:13     .text.matrix_power_up:00000000 matrix_power_up
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccyNRgbw.s:29     .text.matrix_power_down:00000000 matrix_power_down
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccyNRgbw.s:44     .text.keyboard_init:00000000 keyboard_init
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccyNRgbw.s:68     .text.keyboard_set_leds:00000000 keyboard_set_leds
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccyNRgbw.s:463    .progmem.data:00000007 __c.4664
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccyNRgbw.s:459    .progmem.data:00000002 __c.4666
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccyNRgbw.s:455    .progmem.data:00000000 __c.4668
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccyNRgbw.s:148    .text.keyboard_task:00000000 keyboard_task
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccyNRgbw.s:466    .bss:00000001 matrix_prev.4644
                             .bss:00000000 led_status.4645
                            *COM*:00000001 keymap_config

UNDEFINED SYMBOLS
timer_init
matrix_init
bootmagic
debug_config
xputs
__xprintf
led_set
matrix_scan
matrix_get_row
timer_read
action_exec
matrix_print
mousekey_task
host_keyboard_leds
__do_clear_bss

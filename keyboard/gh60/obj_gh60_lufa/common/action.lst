   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB103:
  15               		.file 1 "../../tmk_core/common/action.c"
   1:../../tmk_core/common/action.c **** /*
   2:../../tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/action.c **** 
   4:../../tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/action.c **** (at your option) any later version.
   8:../../tmk_core/common/action.c **** 
   9:../../tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/action.c **** GNU General Public License for more details.
  13:../../tmk_core/common/action.c **** 
  14:../../tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/action.c **** */
  17:../../tmk_core/common/action.c **** #include "host.h"
  18:../../tmk_core/common/action.c **** #include "keycode.h"
  19:../../tmk_core/common/action.c **** #include "keyboard.h"
  20:../../tmk_core/common/action.c **** #include "mousekey.h"
  21:../../tmk_core/common/action.c **** #include "command.h"
  22:../../tmk_core/common/action.c **** #include "led.h"
  23:../../tmk_core/common/action.c **** #include "backlight.h"
  24:../../tmk_core/common/action.c **** #include "action_layer.h"
  25:../../tmk_core/common/action.c **** #include "action_tapping.h"
  26:../../tmk_core/common/action.c **** #include "action_macro.h"
  27:../../tmk_core/common/action.c **** #include "action_util.h"
  28:../../tmk_core/common/action.c **** #include "action.h"
  29:../../tmk_core/common/action.c **** 
  30:../../tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  31:../../tmk_core/common/action.c **** #include "debug.h"
  32:../../tmk_core/common/action.c **** #else
  33:../../tmk_core/common/action.c **** #include "nodebug.h"
  34:../../tmk_core/common/action.c **** #endif
  35:../../tmk_core/common/action.c **** 
  36:../../tmk_core/common/action.c **** 
  37:../../tmk_core/common/action.c **** void action_exec(keyevent_t event)
  38:../../tmk_core/common/action.c **** {
  16               		.loc 1 38 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  39:../../tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  40:../../tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:../../tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  42:../../tmk_core/common/action.c ****     }
  43:../../tmk_core/common/action.c **** 
  44:../../tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  48               		.loc 1 44 0
  49 001e DE01      		movw r26,r28
  50 0020 1196      		adiw r26,1
  51 0022 86E0      		ldi r24,lo8(6)
  52 0024 FD01      		movw r30,r26
  53               		0:
  54 0026 1192      		st Z+,__zero_reg__
  55 0028 8A95      		dec r24
  56 002a 01F4      		brne 0b
  57 002c 85E0      		ldi r24,lo8(5)
  58 002e FE01      		movw r30,r28
  59 0030 3796      		adiw r30,7
  60               		0:
  61 0032 0190      		ld r0,Z+
  62 0034 0D92      		st X+,r0
  63 0036 8A95      		dec r24
  64 0038 01F4      		brne 0b
  45:../../tmk_core/common/action.c **** 
  46:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  47:../../tmk_core/common/action.c ****     action_tapping_process(record);
  65               		.loc 1 47 0
  66 003a 4981      		ldd r20,Y+1
  67               	.LVL1:
  68 003c 5A81      		ldd r21,Y+2
  69               	.LVL2:
  70 003e 6B81      		ldd r22,Y+3
  71 0040 7C81      		ldd r23,Y+4
  72 0042 8D81      		ldd r24,Y+5
  73 0044 9E81      		ldd r25,Y+6
  74 0046 0E94 0000 		call action_tapping_process
  75               	.LVL3:
  76               	/* epilogue start */
  48:../../tmk_core/common/action.c **** #else
  49:../../tmk_core/common/action.c ****     process_action(&record);
  50:../../tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  51:../../tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  52:../../tmk_core/common/action.c ****     }
  53:../../tmk_core/common/action.c **** #endif
  54:../../tmk_core/common/action.c **** }
  77               		.loc 1 54 0
  78 004a 2B96      		adiw r28,11
  79 004c 0FB6      		in __tmp_reg__,__SREG__
  80 004e F894      		cli
  81 0050 DEBF      		out __SP_H__,r29
  82 0052 0FBE      		out __SREG__,__tmp_reg__
  83 0054 CDBF      		out __SP_L__,r28
  84 0056 DF91      		pop r29
  85 0058 CF91      		pop r28
  86 005a 0895      		ret
  87               		.cfi_endproc
  88               	.LFE103:
  90               		.section	.text.register_code,"ax",@progbits
  91               	.global	register_code
  93               	register_code:
  94               	.LFB105:
  55:../../tmk_core/common/action.c **** 
  56:../../tmk_core/common/action.c **** void process_action(keyrecord_t *record)
  57:../../tmk_core/common/action.c **** {
  58:../../tmk_core/common/action.c ****     keyevent_t event = record->event;
  59:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  60:../../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
  61:../../tmk_core/common/action.c **** #endif
  62:../../tmk_core/common/action.c **** 
  63:../../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
  64:../../tmk_core/common/action.c **** 
  65:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event.key);
  66:../../tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
  67:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
  68:../../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
  69:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  70:../../tmk_core/common/action.c **** #endif
  71:../../tmk_core/common/action.c ****     dprintln();
  72:../../tmk_core/common/action.c **** 
  73:../../tmk_core/common/action.c ****     switch (action.kind.id) {
  74:../../tmk_core/common/action.c ****         /* Key and Mods */
  75:../../tmk_core/common/action.c ****         case ACT_LMODS:
  76:../../tmk_core/common/action.c ****         case ACT_RMODS:
  77:../../tmk_core/common/action.c ****             {
  78:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  79:../../tmk_core/common/action.c ****                                                                 action.key.mods<<4;
  80:../../tmk_core/common/action.c ****                 if (event.pressed) {
  81:../../tmk_core/common/action.c ****                     if (mods) {
  82:../../tmk_core/common/action.c ****                         add_weak_mods(mods);
  83:../../tmk_core/common/action.c ****                         send_keyboard_report();
  84:../../tmk_core/common/action.c ****                     }
  85:../../tmk_core/common/action.c ****                     register_code(action.key.code);
  86:../../tmk_core/common/action.c ****                 } else {
  87:../../tmk_core/common/action.c ****                     unregister_code(action.key.code);
  88:../../tmk_core/common/action.c ****                     if (mods) {
  89:../../tmk_core/common/action.c ****                         del_weak_mods(mods);
  90:../../tmk_core/common/action.c ****                         send_keyboard_report();
  91:../../tmk_core/common/action.c ****                     }
  92:../../tmk_core/common/action.c ****                 }
  93:../../tmk_core/common/action.c ****             }
  94:../../tmk_core/common/action.c ****             break;
  95:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  96:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
  97:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
  98:../../tmk_core/common/action.c ****             {
  99:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 100:../../tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 101:../../tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 102:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 103:../../tmk_core/common/action.c ****                     case MODS_ONESHOT:
 104:../../tmk_core/common/action.c ****                         // Oneshot modifier
 105:../../tmk_core/common/action.c ****                         if (event.pressed) {
 106:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 107:../../tmk_core/common/action.c ****                                 register_mods(mods);
 108:../../tmk_core/common/action.c ****                             }
 109:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 110:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 111:../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 112:../../tmk_core/common/action.c ****                             }
 113:../../tmk_core/common/action.c ****                             else {
 114:../../tmk_core/common/action.c ****                                 register_mods(mods);
 115:../../tmk_core/common/action.c ****                             }
 116:../../tmk_core/common/action.c ****                         } else {
 117:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 118:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 119:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 120:../../tmk_core/common/action.c ****                             }
 121:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 122:../../tmk_core/common/action.c ****                                 // Retain Oneshot mods
 123:../../tmk_core/common/action.c ****                             }
 124:../../tmk_core/common/action.c ****                             else {
 125:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 126:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 127:../../tmk_core/common/action.c ****                             }
 128:../../tmk_core/common/action.c ****                         }
 129:../../tmk_core/common/action.c ****                         break;
 130:../../tmk_core/common/action.c ****     #endif
 131:../../tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 132:../../tmk_core/common/action.c ****                         if (event.pressed) {
 133:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 134:../../tmk_core/common/action.c ****                                 register_mods(mods);
 135:../../tmk_core/common/action.c ****                             }
 136:../../tmk_core/common/action.c ****                         } else {
 137:../../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 138:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 139:../../tmk_core/common/action.c ****                             }
 140:../../tmk_core/common/action.c ****                         }
 141:../../tmk_core/common/action.c ****                         break;
 142:../../tmk_core/common/action.c ****                     default:
 143:../../tmk_core/common/action.c ****                         if (event.pressed) {
 144:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 145:../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 146:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 147:../../tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 148:../../tmk_core/common/action.c ****                                     record->tap.count = 0;
 149:../../tmk_core/common/action.c ****                                     register_mods(mods);
 150:../../tmk_core/common/action.c ****                                 } else {
 151:../../tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 152:../../tmk_core/common/action.c ****                                     register_code(action.key.code);
 153:../../tmk_core/common/action.c ****                                 }
 154:../../tmk_core/common/action.c ****                             } else {
 155:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 156:../../tmk_core/common/action.c ****                                 register_mods(mods);
 157:../../tmk_core/common/action.c ****                             }
 158:../../tmk_core/common/action.c ****                         } else {
 159:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 160:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 161:../../tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 162:../../tmk_core/common/action.c ****                             } else {
 163:../../tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 164:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 165:../../tmk_core/common/action.c ****                             }
 166:../../tmk_core/common/action.c ****                         }
 167:../../tmk_core/common/action.c ****                         break;
 168:../../tmk_core/common/action.c ****                 }
 169:../../tmk_core/common/action.c ****             }
 170:../../tmk_core/common/action.c ****             break;
 171:../../tmk_core/common/action.c **** #endif
 172:../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 173:../../tmk_core/common/action.c ****         /* other HID usage */
 174:../../tmk_core/common/action.c ****         case ACT_USAGE:
 175:../../tmk_core/common/action.c ****             switch (action.usage.page) {
 176:../../tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 177:../../tmk_core/common/action.c ****                     if (event.pressed) {
 178:../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 179:../../tmk_core/common/action.c ****                     } else {
 180:../../tmk_core/common/action.c ****                         host_system_send(0);
 181:../../tmk_core/common/action.c ****                     }
 182:../../tmk_core/common/action.c ****                     break;
 183:../../tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 184:../../tmk_core/common/action.c ****                     if (event.pressed) {
 185:../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 186:../../tmk_core/common/action.c ****                     } else {
 187:../../tmk_core/common/action.c ****                         host_consumer_send(0);
 188:../../tmk_core/common/action.c ****                     }
 189:../../tmk_core/common/action.c ****                     break;
 190:../../tmk_core/common/action.c ****             }
 191:../../tmk_core/common/action.c ****             break;
 192:../../tmk_core/common/action.c **** #endif
 193:../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 194:../../tmk_core/common/action.c ****         /* Mouse key */
 195:../../tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 196:../../tmk_core/common/action.c ****             if (event.pressed) {
 197:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 198:../../tmk_core/common/action.c ****                 mousekey_send();
 199:../../tmk_core/common/action.c ****             } else {
 200:../../tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 201:../../tmk_core/common/action.c ****                 mousekey_send();
 202:../../tmk_core/common/action.c ****             }
 203:../../tmk_core/common/action.c ****             break;
 204:../../tmk_core/common/action.c **** #endif
 205:../../tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 206:../../tmk_core/common/action.c ****         case ACT_LAYER:
 207:../../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 208:../../tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 209:../../tmk_core/common/action.c ****                 if (!event.pressed) {
 210:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 211:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 212:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 213:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 214:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 215:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 216:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 217:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 218:../../tmk_core/common/action.c ****                     }
 219:../../tmk_core/common/action.c ****                 }
 220:../../tmk_core/common/action.c ****             } else {
 221:../../tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 222:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 223:../../tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 224:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 225:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 226:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 227:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 228:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 229:../../tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 230:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 231:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 232:../../tmk_core/common/action.c ****                     }
 233:../../tmk_core/common/action.c ****                 }
 234:../../tmk_core/common/action.c ****             }
 235:../../tmk_core/common/action.c ****             break;
 236:../../tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 237:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 238:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 239:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 240:../../tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 241:../../tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 242:../../tmk_core/common/action.c ****                     if (event.pressed) {
 243:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 244:../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 245:../../tmk_core/common/action.c ****                     } else {
 246:../../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 247:../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 248:../../tmk_core/common/action.c ****                     }
 249:../../tmk_core/common/action.c ****                     break;
 250:../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 251:../../tmk_core/common/action.c ****                     /* tap toggle */
 252:../../tmk_core/common/action.c ****                     if (event.pressed) {
 253:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 254:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 255:../../tmk_core/common/action.c ****                         }
 256:../../tmk_core/common/action.c ****                     } else {
 257:../../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 258:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 259:../../tmk_core/common/action.c ****                         }
 260:../../tmk_core/common/action.c ****                     }
 261:../../tmk_core/common/action.c ****                     break;
 262:../../tmk_core/common/action.c ****                 case OP_ON_OFF:
 263:../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 264:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 265:../../tmk_core/common/action.c ****                     break;
 266:../../tmk_core/common/action.c ****                 case OP_OFF_ON:
 267:../../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 268:../../tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 269:../../tmk_core/common/action.c ****                     break;
 270:../../tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 271:../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 272:../../tmk_core/common/action.c ****                                     layer_clear();
 273:../../tmk_core/common/action.c ****                     break;
 274:../../tmk_core/common/action.c ****                 default:
 275:../../tmk_core/common/action.c ****                     /* tap key */
 276:../../tmk_core/common/action.c ****                     if (event.pressed) {
 277:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 278:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 279:../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 280:../../tmk_core/common/action.c ****                         } else {
 281:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 282:../../tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 283:../../tmk_core/common/action.c ****                         }
 284:../../tmk_core/common/action.c ****                     } else {
 285:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 286:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 287:../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 288:../../tmk_core/common/action.c ****                         } else {
 289:../../tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 290:../../tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 291:../../tmk_core/common/action.c ****                         }
 292:../../tmk_core/common/action.c ****                     }
 293:../../tmk_core/common/action.c ****                     break;
 294:../../tmk_core/common/action.c ****             }
 295:../../tmk_core/common/action.c ****             break;
 296:../../tmk_core/common/action.c ****     #endif
 297:../../tmk_core/common/action.c **** #endif
 298:../../tmk_core/common/action.c ****         /* Extentions */
 299:../../tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 300:../../tmk_core/common/action.c ****         case ACT_MACRO:
 301:../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 302:../../tmk_core/common/action.c ****             break;
 303:../../tmk_core/common/action.c **** #endif
 304:../../tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 305:../../tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 306:../../tmk_core/common/action.c ****             if (!event.pressed) {
 307:../../tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 308:../../tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 309:../../tmk_core/common/action.c ****                         backlight_increase();
 310:../../tmk_core/common/action.c ****                         break;
 311:../../tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 312:../../tmk_core/common/action.c ****                         backlight_decrease();
 313:../../tmk_core/common/action.c ****                         break;
 314:../../tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 315:../../tmk_core/common/action.c ****                         backlight_toggle();
 316:../../tmk_core/common/action.c ****                         break;
 317:../../tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 318:../../tmk_core/common/action.c ****                         backlight_step();
 319:../../tmk_core/common/action.c ****                         break;
 320:../../tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 321:../../tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 322:../../tmk_core/common/action.c ****                         break;
 323:../../tmk_core/common/action.c ****                 }
 324:../../tmk_core/common/action.c ****             }
 325:../../tmk_core/common/action.c ****             break;
 326:../../tmk_core/common/action.c **** #endif
 327:../../tmk_core/common/action.c ****         case ACT_COMMAND:
 328:../../tmk_core/common/action.c ****             break;
 329:../../tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 330:../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 331:../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 332:../../tmk_core/common/action.c ****             break;
 333:../../tmk_core/common/action.c **** #endif
 334:../../tmk_core/common/action.c ****         default:
 335:../../tmk_core/common/action.c ****             break;
 336:../../tmk_core/common/action.c ****     }
 337:../../tmk_core/common/action.c **** }
 338:../../tmk_core/common/action.c **** 
 339:../../tmk_core/common/action.c **** 
 340:../../tmk_core/common/action.c **** 
 341:../../tmk_core/common/action.c **** 
 342:../../tmk_core/common/action.c **** /*
 343:../../tmk_core/common/action.c ****  * Utilities for actions.
 344:../../tmk_core/common/action.c ****  */
 345:../../tmk_core/common/action.c **** void register_code(uint8_t code)
 346:../../tmk_core/common/action.c **** {
  95               		.loc 1 346 0
  96               		.cfi_startproc
  97               	.LVL4:
  98 0000 CF93      		push r28
  99               	.LCFI4:
 100               		.cfi_def_cfa_offset 3
 101               		.cfi_offset 28, -2
 102               	/* prologue: function */
 103               	/* frame size = 0 */
 104               	/* stack size = 1 */
 105               	.L__stack_usage = 1
 106 0002 C82F      		mov r28,r24
 347:../../tmk_core/common/action.c ****     if (code == KC_NO) {
 107               		.loc 1 347 0
 108 0004 8823      		tst r24
 109 0006 01F4      		brne .+2
 110 0008 00C0      		rjmp .L2
 348:../../tmk_core/common/action.c ****         return;
 349:../../tmk_core/common/action.c ****     }
 350:../../tmk_core/common/action.c **** 
 351:../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 352:../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 111               		.loc 1 352 0
 112 000a 8238      		cpi r24,lo8(-126)
 113 000c 01F4      		brne .L5
 353:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 354:../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 355:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 114               		.loc 1 355 0
 115 000e 0E94 0000 		call host_keyboard_leds
 116               	.LVL5:
 117 0012 81FD      		sbrc r24,1
 118 0014 00C0      		rjmp .L2
 356:../../tmk_core/common/action.c **** #endif
 357:../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 119               		.loc 1 357 0
 120 0016 89E3      		ldi r24,lo8(57)
 121 0018 0E94 0000 		call add_key
 122               	.LVL6:
 358:../../tmk_core/common/action.c ****         send_keyboard_report();
 123               		.loc 1 358 0
 124 001c 0E94 0000 		call send_keyboard_report
 125               	.LVL7:
 359:../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 126               		.loc 1 359 0
 127 0020 89E3      		ldi r24,lo8(57)
 128 0022 00C0      		rjmp .L35
 129               	.LVL8:
 130               	.L5:
 360:../../tmk_core/common/action.c ****         send_keyboard_report();
 361:../../tmk_core/common/action.c ****     }
 362:../../tmk_core/common/action.c **** 
 363:../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 131               		.loc 1 363 0
 132 0024 8338      		cpi r24,lo8(-125)
 133 0026 01F4      		brne .L7
 364:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 365:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 134               		.loc 1 365 0
 135 0028 0E94 0000 		call host_keyboard_leds
 136               	.LVL9:
 137 002c 80FD      		sbrc r24,0
 138 002e 00C0      		rjmp .L2
 366:../../tmk_core/common/action.c **** #endif
 367:../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 139               		.loc 1 367 0
 140 0030 83E5      		ldi r24,lo8(83)
 141 0032 0E94 0000 		call add_key
 142               	.LVL10:
 368:../../tmk_core/common/action.c ****         send_keyboard_report();
 143               		.loc 1 368 0
 144 0036 0E94 0000 		call send_keyboard_report
 145               	.LVL11:
 369:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 146               		.loc 1 369 0
 147 003a 83E5      		ldi r24,lo8(83)
 148               	.L35:
 149 003c 0E94 0000 		call del_key
 150               	.LVL12:
 151               	.L36:
 152               	/* epilogue start */
 370:../../tmk_core/common/action.c ****         send_keyboard_report();
 371:../../tmk_core/common/action.c ****     }
 372:../../tmk_core/common/action.c **** 
 373:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 374:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 375:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 376:../../tmk_core/common/action.c **** #endif
 377:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 378:../../tmk_core/common/action.c ****         send_keyboard_report();
 379:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 380:../../tmk_core/common/action.c ****         send_keyboard_report();
 381:../../tmk_core/common/action.c ****     }
 382:../../tmk_core/common/action.c **** #endif
 383:../../tmk_core/common/action.c **** 
 384:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 385:../../tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 386:../../tmk_core/common/action.c ****         if (command_proc(code)) return;
 387:../../tmk_core/common/action.c **** 
 388:../../tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 389:../../tmk_core/common/action.c **** /* TODO: remove
 390:../../tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 391:../../tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 392:../../tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 393:../../tmk_core/common/action.c **** 
 394:../../tmk_core/common/action.c ****             add_key(code);
 395:../../tmk_core/common/action.c ****             send_keyboard_report();
 396:../../tmk_core/common/action.c **** 
 397:../../tmk_core/common/action.c ****             set_mods(tmp_mods);
 398:../../tmk_core/common/action.c ****             send_keyboard_report();
 399:../../tmk_core/common/action.c ****             oneshot_cancel();
 400:../../tmk_core/common/action.c ****         } else 
 401:../../tmk_core/common/action.c **** */
 402:../../tmk_core/common/action.c **** #endif
 403:../../tmk_core/common/action.c ****         {
 404:../../tmk_core/common/action.c ****             add_key(code);
 405:../../tmk_core/common/action.c ****             send_keyboard_report();
 406:../../tmk_core/common/action.c ****         }
 407:../../tmk_core/common/action.c ****     }
 408:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 409:../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 410:../../tmk_core/common/action.c ****         send_keyboard_report();
 411:../../tmk_core/common/action.c ****     }
 412:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 413:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 414:../../tmk_core/common/action.c ****     }
 415:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 417:../../tmk_core/common/action.c ****     }
 418:../../tmk_core/common/action.c **** }
 153               		.loc 1 418 0
 154 0040 CF91      		pop r28
 370:../../tmk_core/common/action.c ****         send_keyboard_report();
 155               		.loc 1 370 0
 156 0042 0C94 0000 		jmp send_keyboard_report
 157               	.LVL13:
 158               	.L7:
 373:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 159               		.loc 1 373 0
 160 0046 8438      		cpi r24,lo8(-124)
 161 0048 01F4      		brne .L8
 375:../../tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 162               		.loc 1 375 0
 163 004a 0E94 0000 		call host_keyboard_leds
 164               	.LVL14:
 165 004e 82FD      		sbrc r24,2
 166 0050 00C0      		rjmp .L2
 377:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 167               		.loc 1 377 0
 168 0052 87E4      		ldi r24,lo8(71)
 169 0054 0E94 0000 		call add_key
 170               	.LVL15:
 378:../../tmk_core/common/action.c ****         send_keyboard_report();
 171               		.loc 1 378 0
 172 0058 0E94 0000 		call send_keyboard_report
 173               	.LVL16:
 379:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 174               		.loc 1 379 0
 175 005c 87E4      		ldi r24,lo8(71)
 176 005e 00C0      		rjmp .L35
 177               	.LVL17:
 178               	.L8:
 384:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 179               		.loc 1 384 0
 180 0060 8CEF      		ldi r24,lo8(-4)
 181               	.LVL18:
 182 0062 8C0F      		add r24,r28
 183 0064 813A      		cpi r24,lo8(-95)
 184 0066 00F4      		brsh .L9
 386:../../tmk_core/common/action.c ****         if (command_proc(code)) return;
 185               		.loc 1 386 0
 186 0068 8C2F      		mov r24,r28
 187 006a 0E94 0000 		call command_proc
 188               	.LVL19:
 189 006e 8111      		cpse r24,__zero_reg__
 190 0070 00C0      		rjmp .L2
 404:../../tmk_core/common/action.c ****             add_key(code);
 191               		.loc 1 404 0
 192 0072 8C2F      		mov r24,r28
 193 0074 0E94 0000 		call add_key
 194               	.LVL20:
 195 0078 00C0      		rjmp .L36
 196               	.L9:
 408:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 197               		.loc 1 408 0
 198 007a 80E2      		ldi r24,lo8(32)
 199 007c 8C0F      		add r24,r28
 200 007e 8830      		cpi r24,lo8(8)
 201 0080 00F4      		brsh .L10
 409:../../tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 202               		.loc 1 409 0
 203 0082 C770      		andi r28,lo8(7)
 204               	.LVL21:
 205 0084 81E0      		ldi r24,lo8(1)
 206 0086 00C0      		rjmp 2f
 207               		1:
 208 0088 880F      		lsl r24
 209               		2:
 210 008a CA95      		dec r28
 211 008c 02F4      		brpl 1b
 212 008e 0E94 0000 		call add_mods
 213               	.LVL22:
 214 0092 00C0      		rjmp .L36
 215               	.LVL23:
 216               	.L10:
 412:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 217               		.loc 1 412 0
 218 0094 8BE5      		ldi r24,lo8(91)
 219 0096 8C0F      		add r24,r28
 220 0098 8330      		cpi r24,lo8(3)
 221 009a 00F4      		brsh .L11
 413:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 222               		.loc 1 413 0
 223 009c C53A      		cpi r28,lo8(-91)
 224 009e 01F0      		breq .L14
 413:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 225               		.loc 1 413 0 is_stmt 0 discriminator 1
 226 00a0 C63A      		cpi r28,lo8(-90)
 227 00a2 01F4      		brne .L15
 413:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 228               		.loc 1 413 0
 229 00a4 82E8      		ldi r24,lo8(-126)
 230 00a6 90E0      		ldi r25,0
 231 00a8 00C0      		rjmp .L12
 232               	.L14:
 233 00aa 81E8      		ldi r24,lo8(-127)
 234 00ac 90E0      		ldi r25,0
 235 00ae 00C0      		rjmp .L12
 236               	.L15:
 237 00b0 83E8      		ldi r24,lo8(-125)
 238 00b2 90E0      		ldi r25,0
 239               	.L12:
 240               	/* epilogue start */
 241               		.loc 1 418 0 is_stmt 1 discriminator 4
 242 00b4 CF91      		pop r28
 243               	.LVL24:
 413:../../tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 244               		.loc 1 413 0 discriminator 4
 245 00b6 0C94 0000 		jmp host_system_send
 246               	.LVL25:
 247               	.L11:
 415:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 248               		.loc 1 415 0
 249 00ba 88E5      		ldi r24,lo8(88)
 250 00bc 8C0F      		add r24,r28
 251 00be 8331      		cpi r24,lo8(19)
 252 00c0 00F0      		brlo .+2
 253 00c2 00C0      		rjmp .L2
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 254               		.loc 1 416 0
 255 00c4 C83A      		cpi r28,lo8(-88)
 256 00c6 01F0      		breq .L16
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 257               		.loc 1 416 0 is_stmt 0 discriminator 1
 258 00c8 C93A      		cpi r28,lo8(-87)
 259 00ca 01F0      		breq .L17
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 260               		.loc 1 416 0 discriminator 3
 261 00cc CA3A      		cpi r28,lo8(-86)
 262 00ce 01F0      		breq .L18
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 263               		.loc 1 416 0 discriminator 5
 264 00d0 CB3A      		cpi r28,lo8(-85)
 265 00d2 01F0      		breq .L19
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 266               		.loc 1 416 0 discriminator 7
 267 00d4 CC3A      		cpi r28,lo8(-84)
 268 00d6 01F0      		breq .L20
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 269               		.loc 1 416 0 discriminator 13
 270 00d8 CD3A      		cpi r28,lo8(-83)
 271 00da 01F0      		breq .L21
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 272               		.loc 1 416 0 discriminator 15
 273 00dc C03B      		cpi r28,lo8(-80)
 274 00de 01F0      		breq .L22
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 275               		.loc 1 416 0 discriminator 17
 276 00e0 CE3A      		cpi r28,lo8(-82)
 277 00e2 01F0      		breq .L23
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 278               		.loc 1 416 0 discriminator 19
 279 00e4 CF3A      		cpi r28,lo8(-81)
 280 00e6 01F0      		breq .L24
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 281               		.loc 1 416 0 discriminator 21
 282 00e8 C13B      		cpi r28,lo8(-79)
 283 00ea 01F0      		breq .L25
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 284               		.loc 1 416 0 discriminator 23
 285 00ec C23B      		cpi r28,lo8(-78)
 286 00ee 01F0      		breq .L26
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 287               		.loc 1 416 0 discriminator 25
 288 00f0 C33B      		cpi r28,lo8(-77)
 289 00f2 01F0      		breq .L27
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 290               		.loc 1 416 0 discriminator 27
 291 00f4 C43B      		cpi r28,lo8(-76)
 292 00f6 01F0      		breq .L28
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 293               		.loc 1 416 0 discriminator 29
 294 00f8 C53B      		cpi r28,lo8(-75)
 295 00fa 01F0      		breq .L29
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 296               		.loc 1 416 0 discriminator 31
 297 00fc C63B      		cpi r28,lo8(-74)
 298 00fe 01F0      		breq .L30
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 299               		.loc 1 416 0 discriminator 33
 300 0100 C73B      		cpi r28,lo8(-73)
 301 0102 01F0      		breq .L31
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 302               		.loc 1 416 0 discriminator 35
 303 0104 C83B      		cpi r28,lo8(-72)
 304 0106 01F0      		breq .L32
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 305               		.loc 1 416 0 discriminator 37
 306 0108 C93B      		cpi r28,lo8(-71)
 307 010a 01F0      		breq .L33
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 308               		.loc 1 416 0 discriminator 39
 309 010c CA3B      		cpi r28,lo8(-70)
 310 010e 01F4      		brne .L34
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 311               		.loc 1 416 0
 312 0110 8AE2      		ldi r24,lo8(42)
 313 0112 92E0      		ldi r25,lo8(2)
 314 0114 00C0      		rjmp .L13
 315               	.L16:
 316 0116 82EE      		ldi r24,lo8(-30)
 317 0118 90E0      		ldi r25,0
 318 011a 00C0      		rjmp .L13
 319               	.L17:
 320 011c 89EE      		ldi r24,lo8(-23)
 321 011e 90E0      		ldi r25,0
 322 0120 00C0      		rjmp .L13
 323               	.L18:
 324 0122 8AEE      		ldi r24,lo8(-22)
 325 0124 90E0      		ldi r25,0
 326 0126 00C0      		rjmp .L13
 327               	.L19:
 328 0128 85EB      		ldi r24,lo8(-75)
 329 012a 90E0      		ldi r25,0
 330 012c 00C0      		rjmp .L13
 331               	.L20:
 332 012e 86EB      		ldi r24,lo8(-74)
 333 0130 90E0      		ldi r25,0
 334 0132 00C0      		rjmp .L13
 335               	.L21:
 336 0134 87EB      		ldi r24,lo8(-73)
 337 0136 90E0      		ldi r25,0
 338 0138 00C0      		rjmp .L13
 339               	.L22:
 340 013a 8CEC      		ldi r24,lo8(-52)
 341 013c 90E0      		ldi r25,0
 342 013e 00C0      		rjmp .L13
 343               	.L23:
 344 0140 8DEC      		ldi r24,lo8(-51)
 345 0142 90E0      		ldi r25,0
 346 0144 00C0      		rjmp .L13
 347               	.L24:
 348 0146 83E8      		ldi r24,lo8(-125)
 349 0148 91E0      		ldi r25,lo8(1)
 350 014a 00C0      		rjmp .L13
 351               	.L25:
 352 014c 8AE8      		ldi r24,lo8(-118)
 353 014e 91E0      		ldi r25,lo8(1)
 354 0150 00C0      		rjmp .L13
 355               	.L26:
 356 0152 82E9      		ldi r24,lo8(-110)
 357 0154 91E0      		ldi r25,lo8(1)
 358 0156 00C0      		rjmp .L13
 359               	.L27:
 360 0158 84E9      		ldi r24,lo8(-108)
 361 015a 91E0      		ldi r25,lo8(1)
 362 015c 00C0      		rjmp .L13
 363               	.L28:
 364 015e 81E2      		ldi r24,lo8(33)
 365 0160 92E0      		ldi r25,lo8(2)
 366 0162 00C0      		rjmp .L13
 367               	.L29:
 368 0164 83E2      		ldi r24,lo8(35)
 369 0166 92E0      		ldi r25,lo8(2)
 370 0168 00C0      		rjmp .L13
 371               	.L30:
 372 016a 84E2      		ldi r24,lo8(36)
 373 016c 92E0      		ldi r25,lo8(2)
 374 016e 00C0      		rjmp .L13
 375               	.L31:
 376 0170 85E2      		ldi r24,lo8(37)
 377 0172 92E0      		ldi r25,lo8(2)
 378 0174 00C0      		rjmp .L13
 379               	.L32:
 380 0176 86E2      		ldi r24,lo8(38)
 381 0178 92E0      		ldi r25,lo8(2)
 382 017a 00C0      		rjmp .L13
 383               	.L33:
 384 017c 87E2      		ldi r24,lo8(39)
 385 017e 92E0      		ldi r25,lo8(2)
 386 0180 00C0      		rjmp .L13
 387               	.L34:
 388 0182 80E0      		ldi r24,0
 389 0184 90E0      		ldi r25,0
 390               	.L13:
 391               	/* epilogue start */
 392               		.loc 1 418 0 is_stmt 1 discriminator 43
 393 0186 CF91      		pop r28
 394               	.LVL26:
 416:../../tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 395               		.loc 1 416 0 discriminator 43
 396 0188 0C94 0000 		jmp host_consumer_send
 397               	.LVL27:
 398               	.L2:
 399               	/* epilogue start */
 400               		.loc 1 418 0
 401 018c CF91      		pop r28
 402               	.LVL28:
 403 018e 0895      		ret
 404               		.cfi_endproc
 405               	.LFE105:
 407               		.section	.text.unregister_code,"ax",@progbits
 408               	.global	unregister_code
 410               	unregister_code:
 411               	.LFB106:
 419:../../tmk_core/common/action.c **** 
 420:../../tmk_core/common/action.c **** void unregister_code(uint8_t code)
 421:../../tmk_core/common/action.c **** {
 412               		.loc 1 421 0
 413               		.cfi_startproc
 414               	.LVL29:
 415               	/* prologue: function */
 416               	/* frame size = 0 */
 417               	/* stack size = 0 */
 418               	.L__stack_usage = 0
 422:../../tmk_core/common/action.c ****     if (code == KC_NO) {
 419               		.loc 1 422 0
 420 0000 8823      		tst r24
 421 0002 01F4      		brne .+2
 422 0004 00C0      		rjmp .L38
 423:../../tmk_core/common/action.c ****         return;
 424:../../tmk_core/common/action.c ****     }
 425:../../tmk_core/common/action.c **** 
 426:../../tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 427:../../tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 423               		.loc 1 427 0
 424 0006 8238      		cpi r24,lo8(-126)
 425 0008 01F4      		brne .L41
 428:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 429:../../tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 430:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 426               		.loc 1 430 0
 427 000a 0E94 0000 		call host_keyboard_leds
 428               	.LVL30:
 429 000e 81FF      		sbrs r24,1
 430 0010 00C0      		rjmp .L38
 431:../../tmk_core/common/action.c **** #endif
 432:../../tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 431               		.loc 1 432 0
 432 0012 89E3      		ldi r24,lo8(57)
 433 0014 0E94 0000 		call add_key
 434               	.LVL31:
 433:../../tmk_core/common/action.c ****         send_keyboard_report();
 435               		.loc 1 433 0
 436 0018 0E94 0000 		call send_keyboard_report
 437               	.LVL32:
 434:../../tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 438               		.loc 1 434 0
 439 001c 89E3      		ldi r24,lo8(57)
 440 001e 00C0      		rjmp .L57
 441               	.LVL33:
 442               	.L41:
 435:../../tmk_core/common/action.c ****         send_keyboard_report();
 436:../../tmk_core/common/action.c ****     }
 437:../../tmk_core/common/action.c **** 
 438:../../tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 443               		.loc 1 438 0
 444 0020 8338      		cpi r24,lo8(-125)
 445 0022 01F4      		brne .L43
 439:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 440:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 446               		.loc 1 440 0
 447 0024 0E94 0000 		call host_keyboard_leds
 448               	.LVL34:
 449 0028 80FF      		sbrs r24,0
 450 002a 00C0      		rjmp .L38
 441:../../tmk_core/common/action.c **** #endif
 442:../../tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 451               		.loc 1 442 0
 452 002c 83E5      		ldi r24,lo8(83)
 453 002e 0E94 0000 		call add_key
 454               	.LVL35:
 443:../../tmk_core/common/action.c ****         send_keyboard_report();
 455               		.loc 1 443 0
 456 0032 0E94 0000 		call send_keyboard_report
 457               	.LVL36:
 444:../../tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 458               		.loc 1 444 0
 459 0036 83E5      		ldi r24,lo8(83)
 460               	.L57:
 461 0038 0E94 0000 		call del_key
 462               	.LVL37:
 463               	.L58:
 445:../../tmk_core/common/action.c ****         send_keyboard_report();
 464               		.loc 1 445 0
 465 003c 0C94 0000 		jmp send_keyboard_report
 466               	.LVL38:
 467               	.L43:
 446:../../tmk_core/common/action.c ****     }
 447:../../tmk_core/common/action.c **** 
 448:../../tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 468               		.loc 1 448 0
 469 0040 8438      		cpi r24,lo8(-124)
 470 0042 01F4      		brne .L44
 449:../../tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 450:../../tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 471               		.loc 1 450 0
 472 0044 0E94 0000 		call host_keyboard_leds
 473               	.LVL39:
 474 0048 82FF      		sbrs r24,2
 475 004a 00C0      		rjmp .L38
 451:../../tmk_core/common/action.c **** #endif
 452:../../tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 476               		.loc 1 452 0
 477 004c 87E4      		ldi r24,lo8(71)
 478 004e 0E94 0000 		call add_key
 479               	.LVL40:
 453:../../tmk_core/common/action.c ****         send_keyboard_report();
 480               		.loc 1 453 0
 481 0052 0E94 0000 		call send_keyboard_report
 482               	.LVL41:
 454:../../tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 483               		.loc 1 454 0
 484 0056 87E4      		ldi r24,lo8(71)
 485 0058 00C0      		rjmp .L57
 486               	.LVL42:
 487               	.L44:
 455:../../tmk_core/common/action.c ****         send_keyboard_report();
 456:../../tmk_core/common/action.c ****     }
 457:../../tmk_core/common/action.c **** #endif
 458:../../tmk_core/common/action.c **** 
 459:../../tmk_core/common/action.c ****     else if IS_KEY(code) {
 488               		.loc 1 459 0
 489 005a 9CEF      		ldi r25,lo8(-4)
 490 005c 980F      		add r25,r24
 491 005e 913A      		cpi r25,lo8(-95)
 492 0060 00F0      		brlo .L57
 460:../../tmk_core/common/action.c ****         del_key(code);
 461:../../tmk_core/common/action.c ****         send_keyboard_report();
 462:../../tmk_core/common/action.c ****     }
 463:../../tmk_core/common/action.c ****     else if IS_MOD(code) {
 493               		.loc 1 463 0
 494 0062 90E2      		ldi r25,lo8(32)
 495 0064 980F      		add r25,r24
 496 0066 9830      		cpi r25,lo8(8)
 497 0068 00F4      		brsh .L46
 464:../../tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 498               		.loc 1 464 0
 499 006a 8770      		andi r24,lo8(7)
 500               	.LVL43:
 501 006c 91E0      		ldi r25,lo8(1)
 502 006e 00C0      		rjmp 2f
 503               		1:
 504 0070 990F      		lsl r25
 505               		2:
 506 0072 8A95      		dec r24
 507 0074 02F4      		brpl 1b
 508 0076 892F      		mov r24,r25
 509 0078 0E94 0000 		call del_mods
 510               	.LVL44:
 511 007c 00C0      		rjmp .L58
 512               	.LVL45:
 513               	.L46:
 465:../../tmk_core/common/action.c ****         send_keyboard_report();
 466:../../tmk_core/common/action.c ****     }
 467:../../tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 514               		.loc 1 467 0
 515 007e 9BE5      		ldi r25,lo8(91)
 516 0080 980F      		add r25,r24
 517 0082 9330      		cpi r25,lo8(3)
 518 0084 00F4      		brsh .L47
 468:../../tmk_core/common/action.c ****         host_system_send(0);
 519               		.loc 1 468 0
 520 0086 80E0      		ldi r24,0
 521 0088 90E0      		ldi r25,0
 522               	.LVL46:
 523 008a 0C94 0000 		jmp host_system_send
 524               	.LVL47:
 525               	.L47:
 469:../../tmk_core/common/action.c ****     }
 470:../../tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 526               		.loc 1 470 0
 527 008e 885A      		subi r24,lo8(-(88))
 528               	.LVL48:
 529 0090 8331      		cpi r24,lo8(19)
 530 0092 00F4      		brsh .L38
 471:../../tmk_core/common/action.c ****         host_consumer_send(0);
 531               		.loc 1 471 0
 532 0094 80E0      		ldi r24,0
 533 0096 90E0      		ldi r25,0
 534               	.LVL49:
 535 0098 0C94 0000 		jmp host_consumer_send
 536               	.LVL50:
 537               	.L38:
 538 009c 0895      		ret
 539               		.cfi_endproc
 540               	.LFE106:
 542               		.section	.text.register_mods,"ax",@progbits
 543               	.global	register_mods
 545               	register_mods:
 546               	.LFB107:
 472:../../tmk_core/common/action.c ****     }
 473:../../tmk_core/common/action.c **** }
 474:../../tmk_core/common/action.c **** 
 475:../../tmk_core/common/action.c **** void register_mods(uint8_t mods)
 476:../../tmk_core/common/action.c **** {
 547               		.loc 1 476 0
 548               		.cfi_startproc
 549               	.LVL51:
 550               	/* prologue: function */
 551               	/* frame size = 0 */
 552               	/* stack size = 0 */
 553               	.L__stack_usage = 0
 477:../../tmk_core/common/action.c ****     if (mods) {
 554               		.loc 1 477 0
 555 0000 8823      		tst r24
 556 0002 01F0      		breq .L59
 478:../../tmk_core/common/action.c ****         add_mods(mods);
 557               		.loc 1 478 0
 558 0004 0E94 0000 		call add_mods
 559               	.LVL52:
 479:../../tmk_core/common/action.c ****         send_keyboard_report();
 560               		.loc 1 479 0
 561 0008 0C94 0000 		jmp send_keyboard_report
 562               	.LVL53:
 563               	.L59:
 564 000c 0895      		ret
 565               		.cfi_endproc
 566               	.LFE107:
 568               		.section	.text.unregister_mods,"ax",@progbits
 569               	.global	unregister_mods
 571               	unregister_mods:
 572               	.LFB108:
 480:../../tmk_core/common/action.c ****     }
 481:../../tmk_core/common/action.c **** }
 482:../../tmk_core/common/action.c **** 
 483:../../tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 484:../../tmk_core/common/action.c **** {
 573               		.loc 1 484 0
 574               		.cfi_startproc
 575               	.LVL54:
 576               	/* prologue: function */
 577               	/* frame size = 0 */
 578               	/* stack size = 0 */
 579               	.L__stack_usage = 0
 485:../../tmk_core/common/action.c ****     if (mods) {
 580               		.loc 1 485 0
 581 0000 8823      		tst r24
 582 0002 01F0      		breq .L61
 486:../../tmk_core/common/action.c ****         del_mods(mods);
 583               		.loc 1 486 0
 584 0004 0E94 0000 		call del_mods
 585               	.LVL55:
 487:../../tmk_core/common/action.c ****         send_keyboard_report();
 586               		.loc 1 487 0
 587 0008 0C94 0000 		jmp send_keyboard_report
 588               	.LVL56:
 589               	.L61:
 590 000c 0895      		ret
 591               		.cfi_endproc
 592               	.LFE108:
 594               		.section	.text.process_action,"ax",@progbits
 595               	.global	process_action
 597               	process_action:
 598               	.LFB104:
  57:../../tmk_core/common/action.c **** {
 599               		.loc 1 57 0
 600               		.cfi_startproc
 601               	.LVL57:
 602 0000 CF92      		push r12
 603               	.LCFI5:
 604               		.cfi_def_cfa_offset 3
 605               		.cfi_offset 12, -2
 606 0002 DF92      		push r13
 607               	.LCFI6:
 608               		.cfi_def_cfa_offset 4
 609               		.cfi_offset 13, -3
 610 0004 EF92      		push r14
 611               	.LCFI7:
 612               		.cfi_def_cfa_offset 5
 613               		.cfi_offset 14, -4
 614 0006 FF92      		push r15
 615               	.LCFI8:
 616               		.cfi_def_cfa_offset 6
 617               		.cfi_offset 15, -5
 618 0008 0F93      		push r16
 619               	.LCFI9:
 620               		.cfi_def_cfa_offset 7
 621               		.cfi_offset 16, -6
 622 000a 1F93      		push r17
 623               	.LCFI10:
 624               		.cfi_def_cfa_offset 8
 625               		.cfi_offset 17, -7
 626 000c CF93      		push r28
 627               	.LCFI11:
 628               		.cfi_def_cfa_offset 9
 629               		.cfi_offset 28, -8
 630 000e DF93      		push r29
 631               	.LCFI12:
 632               		.cfi_def_cfa_offset 10
 633               		.cfi_offset 29, -9
 634 0010 CDB7      		in r28,__SP_L__
 635 0012 DEB7      		in r29,__SP_H__
 636               	.LCFI13:
 637               		.cfi_def_cfa_register 28
 638 0014 2897      		sbiw r28,8
 639               	.LCFI14:
 640               		.cfi_def_cfa_offset 18
 641 0016 0FB6      		in __tmp_reg__,__SREG__
 642 0018 F894      		cli
 643 001a DEBF      		out __SP_H__,r29
 644 001c 0FBE      		out __SREG__,__tmp_reg__
 645 001e CDBF      		out __SP_L__,r28
 646               	/* prologue: function */
 647               	/* frame size = 8 */
 648               	/* stack size = 16 */
 649               	.L__stack_usage = 16
 650 0020 8C01      		movw r16,r24
  58:../../tmk_core/common/action.c ****     keyevent_t event = record->event;
 651               		.loc 1 58 0
 652 0022 85E0      		ldi r24,lo8(5)
 653               	.LVL58:
 654 0024 F801      		movw r30,r16
 655 0026 DE01      		movw r26,r28
 656 0028 1196      		adiw r26,1
 657               		0:
 658 002a 0190      		ld r0,Z+
 659 002c 0D92      		st X+,r0
 660 002e 8A95      		dec r24
 661 0030 01F4      		brne 0b
 662 0032 F801      		movw r30,r16
 663 0034 4081      		ld r20,Z
 664               	.LVL59:
 665 0036 3181      		ldd r19,Z+1
 666               	.LVL60:
 667 0038 F280      		ldd r15,Z+2
 668               	.LVL61:
  60:../../tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 669               		.loc 1 60 0
 670 003a 2581      		ldd r18,Z+5
 671 003c 2295      		swap r18
 672 003e 2F70      		andi r18,lo8(15)
 673               	.LVL62:
 674               	.LBB8:
 675               	.LBB9:
 676               		.file 2 "../../tmk_core/common/keyboard.h"
   1:../../tmk_core/common/keyboard.h **** /*
   2:../../tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../tmk_core/common/keyboard.h **** 
   4:../../tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../tmk_core/common/keyboard.h **** (at your option) any later version.
   8:../../tmk_core/common/keyboard.h **** 
   9:../../tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:../../tmk_core/common/keyboard.h **** 
  14:../../tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../tmk_core/common/keyboard.h **** */
  17:../../tmk_core/common/keyboard.h **** 
  18:../../tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:../../tmk_core/common/keyboard.h **** 
  21:../../tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:../../tmk_core/common/keyboard.h **** #include <stdint.h>
  23:../../tmk_core/common/keyboard.h **** 
  24:../../tmk_core/common/keyboard.h **** 
  25:../../tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:../../tmk_core/common/keyboard.h **** extern "C" {
  27:../../tmk_core/common/keyboard.h **** #endif
  28:../../tmk_core/common/keyboard.h **** 
  29:../../tmk_core/common/keyboard.h **** /* key matrix position */
  30:../../tmk_core/common/keyboard.h **** typedef struct {
  31:../../tmk_core/common/keyboard.h ****     uint8_t col;
  32:../../tmk_core/common/keyboard.h ****     uint8_t row;
  33:../../tmk_core/common/keyboard.h **** } keypos_t;
  34:../../tmk_core/common/keyboard.h **** 
  35:../../tmk_core/common/keyboard.h **** /* key event */
  36:../../tmk_core/common/keyboard.h **** typedef struct {
  37:../../tmk_core/common/keyboard.h ****     keypos_t key;
  38:../../tmk_core/common/keyboard.h ****     bool     pressed;
  39:../../tmk_core/common/keyboard.h ****     uint16_t time;
  40:../../tmk_core/common/keyboard.h **** } keyevent_t;
  41:../../tmk_core/common/keyboard.h **** 
  42:../../tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../tmk_core/common/keyboard.h **** 
  45:../../tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:../../tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../tmk_core/common/keyboard.h ****  */
  49:../../tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 677               		.loc 2 49 0
 678 0040 8381      		ldd r24,Z+3
 679 0042 9481      		ldd r25,Z+4
 680 0044 892B      		or r24,r25
 681 0046 01F0      		breq .L130
 682 0048 3F3F      		cpi r19,lo8(-1)
 683 004a 01F4      		brne .L131
 684 004c 81E0      		ldi r24,lo8(1)
 685 004e 4F3F      		cpi r20,lo8(-1)
 686 0050 01F4      		brne .L131
 687 0052 00C0      		rjmp .L64
 688               	.LVL63:
 689               	.L130:
 690 0054 81E0      		ldi r24,lo8(1)
 691               	.LVL64:
 692 0056 00C0      		rjmp .L64
 693               	.L131:
 694 0058 80E0      		ldi r24,0
 695               	.L64:
 696               	.LBE9:
 697               	.LBE8:
  63:../../tmk_core/common/action.c ****     if (IS_NOEVENT(event)) { return; }
 698               		.loc 1 63 0
 699 005a 80FD      		sbrc r24,0
 700 005c 00C0      		rjmp .L63
  65:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(event.key);
 701               		.loc 1 65 0
 702 005e 4983      		std Y+1,r20
 703 0060 3A83      		std Y+2,r19
 704 0062 8981      		ldd r24,Y+1
 705 0064 9A81      		ldd r25,Y+2
 706 0066 2F83      		std Y+7,r18
 707               	.LVL65:
 708 0068 0E94 0000 		call layer_switch_get_action
 709               	.LVL66:
  68:../../tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 710               		.loc 1 68 0
 711 006c 9E83      		std Y+6,r25
 712 006e 8887      		std Y+8,r24
 713 0070 0E94 0000 		call layer_debug
 714               	.LVL67:
  69:../../tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 715               		.loc 1 69 0
 716 0074 0E94 0000 		call default_layer_debug
 717               	.LVL68:
  73:../../tmk_core/common/action.c ****     switch (action.kind.id) {
 718               		.loc 1 73 0
 719 0078 4E81      		ldd r20,Y+6
 720 007a E42F      		mov r30,r20
 721               	.LVL69:
 722 007c E295      		swap r30
 723 007e EF70      		andi r30,lo8(15)
 724 0080 F0E0      		ldi r31,0
 725 0082 E050      		subi r30,lo8(-(gs(.L69)))
 726 0084 F040      		sbci r31,hi8(-(gs(.L69)))
 727 0086 2F81      		ldd r18,Y+7
 728 0088 6885      		ldd r22,Y+8
 729 008a 0C94 0000 		jmp __tablejump2__
 730               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 731               		.p2align	1
 732               	.L69:
 733 0000 0000      		.word gs(.L68)
 734 0002 0000      		.word gs(.L68)
 735 0004 0000      		.word gs(.L70)
 736 0006 0000      		.word gs(.L70)
 737 0008 0000      		.word gs(.L71)
 738 000a 0000      		.word gs(.L72)
 739 000c 0000      		.word gs(.L63)
 740 000e 0000      		.word gs(.L63)
 741 0010 0000      		.word gs(.L73)
 742 0012 0000      		.word gs(.L63)
 743 0014 0000      		.word gs(.L74)
 744 0016 0000      		.word gs(.L74)
 745 0018 0000      		.word gs(.L75)
 746 001a 0000      		.word gs(.L63)
 747 001c 0000      		.word gs(.L63)
 748 001e 0000      		.word gs(.L76)
 749               		.section	.text.process_action
 750               	.L68:
 751               	.LBB10:
  78:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 752               		.loc 1 78 0
 753 008e 842F      		mov r24,r20
 754 0090 807F      		andi r24,lo8(-16)
 755 0092 142F      		mov r17,r20
 756 0094 1F70      		andi r17,lo8(15)
 757 0096 8823      		tst r24
 758 0098 01F0      		breq .L78
  78:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 759               		.loc 1 78 0 is_stmt 0 discriminator 2
 760 009a 1295      		swap r17
 761 009c 107F      		andi r17,lo8(-16)
 762               	.L78:
 763               	.LVL70:
  80:../../tmk_core/common/action.c ****                 if (event.pressed) {
 764               		.loc 1 80 0 is_stmt 1 discriminator 3
 765 009e FF20      		tst r15
 766 00a0 01F0      		breq .L79
  81:../../tmk_core/common/action.c ****                     if (mods) {
 767               		.loc 1 81 0
 768 00a2 1123      		tst r17
 769 00a4 01F4      		brne .+2
 770 00a6 00C0      		rjmp .L161
  82:../../tmk_core/common/action.c ****                         add_weak_mods(mods);
 771               		.loc 1 82 0
 772 00a8 812F      		mov r24,r17
 773 00aa 6887      		std Y+8,r22
 774 00ac 0E94 0000 		call add_weak_mods
 775               	.LVL71:
  83:../../tmk_core/common/action.c ****                         send_keyboard_report();
 776               		.loc 1 83 0
 777 00b0 0E94 0000 		call send_keyboard_report
 778               	.LVL72:
 779 00b4 6885      		ldd r22,Y+8
 780 00b6 00C0      		rjmp .L161
 781               	.L79:
 782               	.LVL73:
  87:../../tmk_core/common/action.c ****                     unregister_code(action.key.code);
 783               		.loc 1 87 0
 784 00b8 862F      		mov r24,r22
 785 00ba 0E94 0000 		call unregister_code
 786               	.LVL74:
  88:../../tmk_core/common/action.c ****                     if (mods) {
 787               		.loc 1 88 0
 788 00be 1123      		tst r17
 789 00c0 01F4      		brne .+2
 790 00c2 00C0      		rjmp .L63
  89:../../tmk_core/common/action.c ****                         del_weak_mods(mods);
 791               		.loc 1 89 0
 792 00c4 812F      		mov r24,r17
 793 00c6 0E94 0000 		call del_weak_mods
 794               	.LVL75:
 795               	/* epilogue start */
 796               	.LBE10:
 337:../../tmk_core/common/action.c **** }
 797               		.loc 1 337 0
 798 00ca 2896      		adiw r28,8
 799 00cc 0FB6      		in __tmp_reg__,__SREG__
 800 00ce F894      		cli
 801 00d0 DEBF      		out __SP_H__,r29
 802 00d2 0FBE      		out __SREG__,__tmp_reg__
 803 00d4 CDBF      		out __SP_L__,r28
 804 00d6 DF91      		pop r29
 805 00d8 CF91      		pop r28
 806 00da 1F91      		pop r17
 807               	.LVL76:
 808 00dc 0F91      		pop r16
 809               	.LVL77:
 810 00de FF90      		pop r15
 811               	.LVL78:
 812 00e0 EF90      		pop r14
 813 00e2 DF90      		pop r13
 814 00e4 CF90      		pop r12
 815               	.LBB11:
  90:../../tmk_core/common/action.c ****                         send_keyboard_report();
 816               		.loc 1 90 0
 817 00e6 0C94 0000 		jmp send_keyboard_report
 818               	.LVL79:
 819               	.L70:
 820               	.LBE11:
 821               	.LBB12:
  99:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 822               		.loc 1 99 0
 823 00ea 342F      		mov r19,r20
 824 00ec 307F      		andi r19,lo8(-16)
 825 00ee 842F      		mov r24,r20
 826 00f0 8F70      		andi r24,lo8(15)
 827 00f2 3032      		cpi r19,lo8(32)
 828 00f4 01F0      		breq .L83
  99:../../tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 829               		.loc 1 99 0 is_stmt 0 discriminator 2
 830 00f6 8295      		swap r24
 831 00f8 807F      		andi r24,lo8(-16)
 832               	.L83:
 833               	.LVL80:
 101:../../tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 834               		.loc 1 101 0 is_stmt 1 discriminator 3
 835 00fa 6623      		tst r22
 836               	.LVL81:
 837 00fc 01F0      		breq .L85
 838 00fe 6130      		cpi r22,lo8(1)
 839 0100 01F0      		breq .L86
 840 0102 00C0      		rjmp .L169
 841               	.L85:
 105:../../tmk_core/common/action.c ****                         if (event.pressed) {
 842               		.loc 1 105 0
 843 0104 FF20      		tst r15
 844 0106 01F0      		breq .L87
 106:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 845               		.loc 1 106 0
 846 0108 2223      		tst r18
 847 010a 01F0      		breq .L160
 109:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 848               		.loc 1 109 0
 849 010c 2130      		cpi r18,lo8(1)
 850 010e 01F4      		brne .L160
 851               	/* epilogue start */
 852               	.LBE12:
 337:../../tmk_core/common/action.c **** }
 853               		.loc 1 337 0
 854 0110 2896      		adiw r28,8
 855 0112 0FB6      		in __tmp_reg__,__SREG__
 856 0114 F894      		cli
 857 0116 DEBF      		out __SP_H__,r29
 858 0118 0FBE      		out __SREG__,__tmp_reg__
 859 011a CDBF      		out __SP_L__,r28
 860 011c DF91      		pop r29
 861 011e CF91      		pop r28
 862 0120 1F91      		pop r17
 863 0122 0F91      		pop r16
 864               	.LVL82:
 865 0124 FF90      		pop r15
 866               	.LVL83:
 867 0126 EF90      		pop r14
 868 0128 DF90      		pop r13
 869 012a CF90      		pop r12
 870               	.LBB13:
 111:../../tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 871               		.loc 1 111 0
 872 012c 0C94 0000 		jmp set_oneshot_mods
 873               	.LVL84:
 874               	.L87:
 117:../../tmk_core/common/action.c ****                             if (tap_count == 0) {
 875               		.loc 1 117 0
 876 0130 2223      		tst r18
 877 0132 01F0      		breq .L158
 121:../../tmk_core/common/action.c ****                             else if (tap_count == 1) {
 878               		.loc 1 121 0
 879 0134 2130      		cpi r18,lo8(1)
 880 0136 01F4      		brne .+2
 881 0138 00C0      		rjmp .L63
 882               	.L158:
 125:../../tmk_core/common/action.c ****                                 clear_oneshot_mods();
 883               		.loc 1 125 0
 884 013a 8E83      		std Y+6,r24
 885 013c 0E94 0000 		call clear_oneshot_mods
 886               	.LVL85:
 126:../../tmk_core/common/action.c ****                                 unregister_mods(mods);
 887               		.loc 1 126 0
 888 0140 8E81      		ldd r24,Y+6
 889 0142 00C0      		rjmp .L163
 890               	.LVL86:
 891               	.L86:
 132:../../tmk_core/common/action.c ****                         if (event.pressed) {
 892               		.loc 1 132 0
 893 0144 FF20      		tst r15
 894 0146 01F0      		breq .L92
 133:../../tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 895               		.loc 1 133 0
 896 0148 2630      		cpi r18,lo8(6)
 897 014a 00F0      		brlo .+2
 898 014c 00C0      		rjmp .L63
 899 014e 00C0      		rjmp .L160
 900               	.L92:
 137:../../tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 901               		.loc 1 137 0
 902 0150 2530      		cpi r18,lo8(5)
 903 0152 00F0      		brlo .+2
 904 0154 00C0      		rjmp .L63
 905 0156 00C0      		rjmp .L163
 906               	.L169:
 143:../../tmk_core/common/action.c ****                         if (event.pressed) {
 907               		.loc 1 143 0
 908 0158 FF20      		tst r15
 909 015a 01F0      		breq .L93
 144:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 910               		.loc 1 144 0
 911 015c 2223      		tst r18
 912 015e 01F0      		breq .L160
 145:../../tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 913               		.loc 1 145 0
 914 0160 F801      		movw r30,r16
 915 0162 9581      		ldd r25,Z+5
 916 0164 90FF      		sbrs r25,0
 917 0166 00C0      		rjmp .L161
 148:../../tmk_core/common/action.c ****                                     record->tap.count = 0;
 918               		.loc 1 148 0
 919 0168 9F70      		andi r25,lo8(15)
 920 016a 9583      		std Z+5,r25
 921               	.LVL87:
 922               	.L160:
 923               	/* epilogue start */
 924               	.LBE13:
 337:../../tmk_core/common/action.c **** }
 925               		.loc 1 337 0
 926 016c 2896      		adiw r28,8
 927 016e 0FB6      		in __tmp_reg__,__SREG__
 928 0170 F894      		cli
 929 0172 DEBF      		out __SP_H__,r29
 930 0174 0FBE      		out __SREG__,__tmp_reg__
 931 0176 CDBF      		out __SP_L__,r28
 932 0178 DF91      		pop r29
 933 017a CF91      		pop r28
 934 017c 1F91      		pop r17
 935 017e 0F91      		pop r16
 936               	.LVL88:
 937 0180 FF90      		pop r15
 938               	.LVL89:
 939 0182 EF90      		pop r14
 940 0184 DF90      		pop r13
 941 0186 CF90      		pop r12
 942               	.LBB14:
 149:../../tmk_core/common/action.c ****                                     register_mods(mods);
 943               		.loc 1 149 0
 944 0188 0C94 0000 		jmp register_mods
 945               	.LVL90:
 946               	.L93:
 159:../../tmk_core/common/action.c ****                             if (tap_count > 0) {
 947               		.loc 1 159 0
 948 018c 2223      		tst r18
 949 018e 01F4      		brne .+2
 950 0190 00C0      		rjmp .L163
 951 0192 00C0      		rjmp .L162
 952               	.LVL91:
 953               	.L71:
 954               	.LBE14:
 175:../../tmk_core/common/action.c ****             switch (action.usage.page) {
 955               		.loc 1 175 0
 956 0194 242F      		mov r18,r20
 957 0196 2695      		lsr r18
 958 0198 2695      		lsr r18
 959 019a 2370      		andi r18,lo8(3)
 960 019c 30E0      		ldi r19,0
 961 019e 2115      		cp r18,__zero_reg__
 962 01a0 3105      		cpc r19,__zero_reg__
 963 01a2 01F0      		breq .L97
 964 01a4 2130      		cpi r18,1
 965 01a6 3105      		cpc r19,__zero_reg__
 966 01a8 01F0      		breq .L98
 967 01aa 00C0      		rjmp .L63
 968               	.L97:
 177:../../tmk_core/common/action.c ****                     if (event.pressed) {
 969               		.loc 1 177 0
 970 01ac FF20      		tst r15
 971 01ae 01F0      		breq .L99
 972               	.LVL92:
 178:../../tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 973               		.loc 1 178 0
 974 01b0 862F      		mov r24,r22
 975 01b2 942F      		mov r25,r20
 976 01b4 9370      		andi r25,lo8(3)
 977 01b6 00C0      		rjmp .L164
 978               	.LVL93:
 979               	.L99:
 180:../../tmk_core/common/action.c ****                         host_system_send(0);
 980               		.loc 1 180 0
 981 01b8 80E0      		ldi r24,0
 982 01ba 90E0      		ldi r25,0
 983               	.LVL94:
 984               	.L164:
 985               	/* epilogue start */
 337:../../tmk_core/common/action.c **** }
 986               		.loc 1 337 0
 987 01bc 2896      		adiw r28,8
 988 01be 0FB6      		in __tmp_reg__,__SREG__
 989 01c0 F894      		cli
 990 01c2 DEBF      		out __SP_H__,r29
 991 01c4 0FBE      		out __SREG__,__tmp_reg__
 992 01c6 CDBF      		out __SP_L__,r28
 993 01c8 DF91      		pop r29
 994 01ca CF91      		pop r28
 995 01cc 1F91      		pop r17
 996 01ce 0F91      		pop r16
 997               	.LVL95:
 998 01d0 FF90      		pop r15
 999               	.LVL96:
 1000 01d2 EF90      		pop r14
 1001 01d4 DF90      		pop r13
 1002 01d6 CF90      		pop r12
 180:../../tmk_core/common/action.c ****                         host_system_send(0);
 1003               		.loc 1 180 0
 1004 01d8 0C94 0000 		jmp host_system_send
 1005               	.LVL97:
 1006               	.L98:
 184:../../tmk_core/common/action.c ****                     if (event.pressed) {
 1007               		.loc 1 184 0
 1008 01dc FF20      		tst r15
 1009 01de 01F0      		breq .L100
 1010               	.LVL98:
 185:../../tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1011               		.loc 1 185 0
 1012 01e0 862F      		mov r24,r22
 1013 01e2 942F      		mov r25,r20
 1014 01e4 9370      		andi r25,lo8(3)
 1015 01e6 00C0      		rjmp .L165
 1016               	.LVL99:
 1017               	.L100:
 187:../../tmk_core/common/action.c ****                         host_consumer_send(0);
 1018               		.loc 1 187 0
 1019 01e8 80E0      		ldi r24,0
 1020 01ea 90E0      		ldi r25,0
 1021               	.LVL100:
 1022               	.L165:
 1023               	/* epilogue start */
 337:../../tmk_core/common/action.c **** }
 1024               		.loc 1 337 0
 1025 01ec 2896      		adiw r28,8
 1026 01ee 0FB6      		in __tmp_reg__,__SREG__
 1027 01f0 F894      		cli
 1028 01f2 DEBF      		out __SP_H__,r29
 1029 01f4 0FBE      		out __SREG__,__tmp_reg__
 1030 01f6 CDBF      		out __SP_L__,r28
 1031 01f8 DF91      		pop r29
 1032 01fa CF91      		pop r28
 1033 01fc 1F91      		pop r17
 1034 01fe 0F91      		pop r16
 1035               	.LVL101:
 1036 0200 FF90      		pop r15
 1037               	.LVL102:
 1038 0202 EF90      		pop r14
 1039 0204 DF90      		pop r13
 1040 0206 CF90      		pop r12
 187:../../tmk_core/common/action.c ****                         host_consumer_send(0);
 1041               		.loc 1 187 0
 1042 0208 0C94 0000 		jmp host_consumer_send
 1043               	.LVL103:
 1044               	.L72:
 197:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1045               		.loc 1 197 0
 1046 020c 862F      		mov r24,r22
 196:../../tmk_core/common/action.c ****             if (event.pressed) {
 1047               		.loc 1 196 0
 1048 020e FF20      		tst r15
 1049 0210 01F0      		breq .L101
 197:../../tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1050               		.loc 1 197 0
 1051 0212 0E94 0000 		call mousekey_on
 1052               	.LVL104:
 1053 0216 00C0      		rjmp .L167
 1054               	.LVL105:
 1055               	.L101:
 200:../../tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 1056               		.loc 1 200 0
 1057 0218 0E94 0000 		call mousekey_off
 1058               	.LVL106:
 1059               	.L167:
 1060               	/* epilogue start */
 337:../../tmk_core/common/action.c **** }
 1061               		.loc 1 337 0
 1062 021c 2896      		adiw r28,8
 1063 021e 0FB6      		in __tmp_reg__,__SREG__
 1064 0220 F894      		cli
 1065 0222 DEBF      		out __SP_H__,r29
 1066 0224 0FBE      		out __SREG__,__tmp_reg__
 1067 0226 CDBF      		out __SP_L__,r28
 1068 0228 DF91      		pop r29
 1069 022a CF91      		pop r28
 1070 022c 1F91      		pop r17
 1071 022e 0F91      		pop r16
 1072               	.LVL107:
 1073 0230 FF90      		pop r15
 1074               	.LVL108:
 1075 0232 EF90      		pop r14
 1076 0234 DF90      		pop r13
 1077 0236 CF90      		pop r12
 201:../../tmk_core/common/action.c ****                 mousekey_send();
 1078               		.loc 1 201 0
 1079 0238 0C94 0000 		jmp mousekey_send
 1080               	.LVL109:
 1081               	.L73:
 207:../../tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 1082               		.loc 1 207 0
 1083 023c 842F      		mov r24,r20
 1084 023e 8370      		andi r24,lo8(3)
 1085 0240 01F0      		breq .+2
 1086 0242 00C0      		rjmp .L102
 209:../../tmk_core/common/action.c ****                 if (!event.pressed) {
 1087               		.loc 1 209 0
 1088 0244 F110      		cpse r15,__zero_reg__
 1089 0246 00C0      		rjmp .L63
 1090               	.LVL110:
 1091               	.LBB15:
 210:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1092               		.loc 1 210 0
 1093 0248 262F      		mov r18,r22
 1094 024a 2295      		swap r18
 1095 024c 2695      		lsr r18
 1096 024e 2770      		andi r18,lo8(7)
 1097 0250 220F      		lsl r18
 1098 0252 220F      		lsl r18
 211:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1099               		.loc 1 211 0
 1100 0254 862F      		mov r24,r22
 1101 0256 8F70      		andi r24,lo8(15)
 1102 0258 C82E      		mov r12,r24
 1103 025a D12C      		mov r13,__zero_reg__
 1104 025c E12C      		mov r14,__zero_reg__
 1105 025e F12C      		mov r15,__zero_reg__
 1106 0260 022E      		mov r0,r18
 1107 0262 00C0      		rjmp 2f
 1108               		1:
 1109 0264 CC0C      		lsl r12
 1110 0266 DD1C      		rol r13
 1111 0268 EE1C      		rol r14
 1112 026a FF1C      		rol r15
 1113               		2:
 1114 026c 0A94      		dec r0
 1115 026e 02F4      		brpl 1b
 1116               	.LVL111:
 212:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1117               		.loc 1 212 0
 1118 0270 64FF      		sbrs r22,4
 1119 0272 00C0      		rjmp .L132
 212:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1120               		.loc 1 212 0 is_stmt 0 discriminator 1
 1121 0274 6FE0      		ldi r22,lo8(15)
 1122 0276 70E0      		ldi r23,0
 1123 0278 80E0      		ldi r24,0
 1124 027a 90E0      		ldi r25,0
 1125               	.LVL112:
 1126 027c 00C0      		rjmp 2f
 1127               		1:
 1128 027e 660F      		lsl r22
 1129 0280 771F      		rol r23
 1130 0282 881F      		rol r24
 1131 0284 991F      		rol r25
 1132               		2:
 1133 0286 2A95      		dec r18
 1134 0288 02F4      		brpl 1b
 1135 028a 6095      		com r22
 1136 028c 7095      		com r23
 1137 028e 8095      		com r24
 1138 0290 9095      		com r25
 1139 0292 00C0      		rjmp .L103
 1140               	.LVL113:
 1141               	.L132:
 212:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1142               		.loc 1 212 0
 1143 0294 60E0      		ldi r22,0
 1144 0296 70E0      		ldi r23,0
 1145 0298 CB01      		movw r24,r22
 1146               	.LVL114:
 1147               	.L103:
 213:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1148               		.loc 1 213 0 is_stmt 1 discriminator 3
 1149 029a 242F      		mov r18,r20
 1150 029c 2695      		lsr r18
 1151 029e 2695      		lsr r18
 1152 02a0 2370      		andi r18,lo8(3)
 1153 02a2 422F      		mov r20,r18
 1154               	.LVL115:
 1155 02a4 50E0      		ldi r21,0
 1156 02a6 4230      		cpi r20,2
 1157 02a8 5105      		cpc r21,__zero_reg__
 1158 02aa 01F0      		breq .L105
 1159 02ac 4330      		cpi r20,3
 1160 02ae 5105      		cpc r21,__zero_reg__
 1161 02b0 01F0      		breq .L106
 1162 02b2 6C29      		or r22,r12
 1163 02b4 7D29      		or r23,r13
 1164 02b6 8E29      		or r24,r14
 1165 02b8 9F29      		or r25,r15
 1166               	.LVL116:
 1167 02ba 4130      		cpi r20,1
 1168 02bc 5105      		cpc r21,__zero_reg__
 1169 02be 01F0      		breq .L168
 1170               	/* epilogue start */
 1171               	.LBE15:
 337:../../tmk_core/common/action.c **** }
 1172               		.loc 1 337 0 discriminator 3
 1173 02c0 2896      		adiw r28,8
 1174               	.LVL117:
 1175 02c2 0FB6      		in __tmp_reg__,__SREG__
 1176 02c4 F894      		cli
 1177 02c6 DEBF      		out __SP_H__,r29
 1178 02c8 0FBE      		out __SREG__,__tmp_reg__
 1179 02ca CDBF      		out __SP_L__,r28
 1180 02cc DF91      		pop r29
 1181 02ce CF91      		pop r28
 1182               	.LVL118:
 1183 02d0 1F91      		pop r17
 1184 02d2 0F91      		pop r16
 1185               	.LVL119:
 1186 02d4 FF90      		pop r15
 1187               	.LVL120:
 1188 02d6 EF90      		pop r14
 1189 02d8 DF90      		pop r13
 1190 02da CF90      		pop r12
 1191               	.LVL121:
 1192               	.LBB16:
 214:../../tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1193               		.loc 1 214 0 discriminator 3
 1194 02dc 0C94 0000 		jmp default_layer_and
 1195               	.LVL122:
 1196               	.L105:
 216:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1197               		.loc 1 216 0
 1198 02e0 6C29      		or r22,r12
 1199 02e2 7D29      		or r23,r13
 1200 02e4 8E29      		or r24,r14
 1201 02e6 9F29      		or r25,r15
 1202               	.LVL123:
 1203               	/* epilogue start */
 1204               	.LBE16:
 337:../../tmk_core/common/action.c **** }
 1205               		.loc 1 337 0
 1206 02e8 2896      		adiw r28,8
 1207               	.LVL124:
 1208 02ea 0FB6      		in __tmp_reg__,__SREG__
 1209 02ec F894      		cli
 1210 02ee DEBF      		out __SP_H__,r29
 1211 02f0 0FBE      		out __SREG__,__tmp_reg__
 1212 02f2 CDBF      		out __SP_L__,r28
 1213 02f4 DF91      		pop r29
 1214 02f6 CF91      		pop r28
 1215               	.LVL125:
 1216 02f8 1F91      		pop r17
 1217 02fa 0F91      		pop r16
 1218               	.LVL126:
 1219 02fc FF90      		pop r15
 1220               	.LVL127:
 1221 02fe EF90      		pop r14
 1222 0300 DF90      		pop r13
 1223 0302 CF90      		pop r12
 1224               	.LVL128:
 1225               	.LBB17:
 216:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1226               		.loc 1 216 0
 1227 0304 0C94 0000 		jmp default_layer_xor
 1228               	.LVL129:
 1229               	.L106:
 217:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1230               		.loc 1 217 0
 1231 0308 0E94 0000 		call default_layer_and
 1232               	.LVL130:
 1233 030c C701      		movw r24,r14
 1234 030e B601      		movw r22,r12
 1235               	.L168:
 1236               	/* epilogue start */
 1237               	.LBE17:
 337:../../tmk_core/common/action.c **** }
 1238               		.loc 1 337 0
 1239 0310 2896      		adiw r28,8
 1240 0312 0FB6      		in __tmp_reg__,__SREG__
 1241 0314 F894      		cli
 1242 0316 DEBF      		out __SP_H__,r29
 1243 0318 0FBE      		out __SREG__,__tmp_reg__
 1244 031a CDBF      		out __SP_L__,r28
 1245 031c DF91      		pop r29
 1246 031e CF91      		pop r28
 1247 0320 1F91      		pop r17
 1248 0322 0F91      		pop r16
 1249               	.LVL131:
 1250 0324 FF90      		pop r15
 1251               	.LVL132:
 1252 0326 EF90      		pop r14
 1253 0328 DF90      		pop r13
 1254 032a CF90      		pop r12
 1255               	.LVL133:
 1256               	.LBB18:
 217:../../tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1257               		.loc 1 217 0
 1258 032c 0C94 0000 		jmp default_layer_or
 1259               	.LVL134:
 1260               	.L102:
 1261               	.LBE18:
 222:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1262               		.loc 1 222 0
 1263 0330 FF20      		tst r15
 1264 0332 01F0      		breq .L108
 222:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1265               		.loc 1 222 0 is_stmt 0 discriminator 1
 1266 0334 842F      		mov r24,r20
 1267 0336 8170      		andi r24,lo8(1)
 1268 0338 00C0      		rjmp .L109
 1269               	.L108:
 222:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1270               		.loc 1 222 0 discriminator 2
 1271 033a 8695      		lsr r24
 1272               	.L109:
 222:../../tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1273               		.loc 1 222 0 discriminator 3
 1274 033c 8823      		tst r24
 1275 033e 01F4      		brne .+2
 1276 0340 00C0      		rjmp .L63
 1277               	.LVL135:
 1278               	.LBB19:
 224:../../tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1279               		.loc 1 224 0 is_stmt 1
 1280 0342 262F      		mov r18,r22
 1281 0344 2295      		swap r18
 1282 0346 2695      		lsr r18
 1283 0348 2770      		andi r18,lo8(7)
 1284 034a 220F      		lsl r18
 1285 034c 220F      		lsl r18
 225:../../tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1286               		.loc 1 225 0
 1287 034e 862F      		mov r24,r22
 1288 0350 8F70      		andi r24,lo8(15)
 1289 0352 C82E      		mov r12,r24
 1290 0354 D12C      		mov r13,__zero_reg__
 1291 0356 E12C      		mov r14,__zero_reg__
 1292 0358 F12C      		mov r15,__zero_reg__
 1293 035a 022E      		mov r0,r18
 1294 035c 00C0      		rjmp 2f
 1295               		1:
 1296 035e CC0C      		lsl r12
 1297 0360 DD1C      		rol r13
 1298 0362 EE1C      		rol r14
 1299 0364 FF1C      		rol r15
 1300               		2:
 1301 0366 0A94      		dec r0
 1302 0368 02F4      		brpl 1b
 1303               	.LVL136:
 226:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1304               		.loc 1 226 0
 1305 036a 64FF      		sbrs r22,4
 1306 036c 00C0      		rjmp .L133
 226:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1307               		.loc 1 226 0 is_stmt 0 discriminator 1
 1308 036e 6FE0      		ldi r22,lo8(15)
 1309 0370 70E0      		ldi r23,0
 1310 0372 80E0      		ldi r24,0
 1311 0374 90E0      		ldi r25,0
 1312               	.LVL137:
 1313 0376 00C0      		rjmp 2f
 1314               		1:
 1315 0378 660F      		lsl r22
 1316 037a 771F      		rol r23
 1317 037c 881F      		rol r24
 1318 037e 991F      		rol r25
 1319               		2:
 1320 0380 2A95      		dec r18
 1321 0382 02F4      		brpl 1b
 1322 0384 6095      		com r22
 1323 0386 7095      		com r23
 1324 0388 8095      		com r24
 1325 038a 9095      		com r25
 1326 038c 00C0      		rjmp .L110
 1327               	.LVL138:
 1328               	.L133:
 226:../../tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1329               		.loc 1 226 0
 1330 038e 60E0      		ldi r22,0
 1331 0390 70E0      		ldi r23,0
 1332 0392 CB01      		movw r24,r22
 1333               	.LVL139:
 1334               	.L110:
 227:../../tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1335               		.loc 1 227 0 is_stmt 1 discriminator 3
 1336 0394 242F      		mov r18,r20
 1337 0396 2695      		lsr r18
 1338 0398 2695      		lsr r18
 1339 039a 2370      		andi r18,lo8(3)
 1340 039c 422F      		mov r20,r18
 1341               	.LVL140:
 1342 039e 50E0      		ldi r21,0
 1343 03a0 4230      		cpi r20,2
 1344 03a2 5105      		cpc r21,__zero_reg__
 1345 03a4 01F0      		breq .L112
 1346 03a6 4330      		cpi r20,3
 1347 03a8 5105      		cpc r21,__zero_reg__
 1348 03aa 01F0      		breq .L113
 1349 03ac 6C29      		or r22,r12
 1350 03ae 7D29      		or r23,r13
 1351 03b0 8E29      		or r24,r14
 1352 03b2 9F29      		or r25,r15
 1353               	.LVL141:
 1354 03b4 4130      		cpi r20,1
 1355 03b6 5105      		cpc r21,__zero_reg__
 1356 03b8 01F0      		breq .L166
 1357               	/* epilogue start */
 1358               	.LBE19:
 337:../../tmk_core/common/action.c **** }
 1359               		.loc 1 337 0 discriminator 3
 1360 03ba 2896      		adiw r28,8
 1361               	.LVL142:
 1362 03bc 0FB6      		in __tmp_reg__,__SREG__
 1363 03be F894      		cli
 1364 03c0 DEBF      		out __SP_H__,r29
 1365 03c2 0FBE      		out __SREG__,__tmp_reg__
 1366 03c4 CDBF      		out __SP_L__,r28
 1367 03c6 DF91      		pop r29
 1368 03c8 CF91      		pop r28
 1369               	.LVL143:
 1370 03ca 1F91      		pop r17
 1371 03cc 0F91      		pop r16
 1372               	.LVL144:
 1373 03ce FF90      		pop r15
 1374               	.LVL145:
 1375 03d0 EF90      		pop r14
 1376 03d2 DF90      		pop r13
 1377 03d4 CF90      		pop r12
 1378               	.LVL146:
 1379               	.LBB20:
 228:../../tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1380               		.loc 1 228 0 discriminator 3
 1381 03d6 0C94 0000 		jmp layer_and
 1382               	.LVL147:
 1383               	.L112:
 230:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1384               		.loc 1 230 0
 1385 03da 6C29      		or r22,r12
 1386 03dc 7D29      		or r23,r13
 1387 03de 8E29      		or r24,r14
 1388 03e0 9F29      		or r25,r15
 1389               	.LVL148:
 1390               	/* epilogue start */
 1391               	.LBE20:
 337:../../tmk_core/common/action.c **** }
 1392               		.loc 1 337 0
 1393 03e2 2896      		adiw r28,8
 1394               	.LVL149:
 1395 03e4 0FB6      		in __tmp_reg__,__SREG__
 1396 03e6 F894      		cli
 1397 03e8 DEBF      		out __SP_H__,r29
 1398 03ea 0FBE      		out __SREG__,__tmp_reg__
 1399 03ec CDBF      		out __SP_L__,r28
 1400 03ee DF91      		pop r29
 1401 03f0 CF91      		pop r28
 1402               	.LVL150:
 1403 03f2 1F91      		pop r17
 1404 03f4 0F91      		pop r16
 1405               	.LVL151:
 1406 03f6 FF90      		pop r15
 1407               	.LVL152:
 1408 03f8 EF90      		pop r14
 1409 03fa DF90      		pop r13
 1410 03fc CF90      		pop r12
 1411               	.LVL153:
 1412               	.LBB21:
 230:../../tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1413               		.loc 1 230 0
 1414 03fe 0C94 0000 		jmp layer_xor
 1415               	.LVL154:
 1416               	.L113:
 231:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1417               		.loc 1 231 0
 1418 0402 0E94 0000 		call layer_and
 1419               	.LVL155:
 1420 0406 C701      		movw r24,r14
 1421 0408 B601      		movw r22,r12
 1422               	.L166:
 1423               	/* epilogue start */
 1424               	.LBE21:
 337:../../tmk_core/common/action.c **** }
 1425               		.loc 1 337 0
 1426 040a 2896      		adiw r28,8
 1427 040c 0FB6      		in __tmp_reg__,__SREG__
 1428 040e F894      		cli
 1429 0410 DEBF      		out __SP_H__,r29
 1430 0412 0FBE      		out __SREG__,__tmp_reg__
 1431 0414 CDBF      		out __SP_L__,r28
 1432 0416 DF91      		pop r29
 1433 0418 CF91      		pop r28
 1434 041a 1F91      		pop r17
 1435 041c 0F91      		pop r16
 1436               	.LVL156:
 1437 041e FF90      		pop r15
 1438               	.LVL157:
 1439 0420 EF90      		pop r14
 1440 0422 DF90      		pop r13
 1441 0424 CF90      		pop r12
 1442               	.LVL158:
 1443               	.LBB22:
 231:../../tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1444               		.loc 1 231 0
 1445 0426 0C94 0000 		jmp layer_or
 1446               	.LVL159:
 1447               	.L74:
 1448               	.LBE22:
 239:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1449               		.loc 1 239 0
 1450 042a 603F      		cpi r22,lo8(-16)
 1451 042c 01F0      		breq .L116
 1452               	.LVL160:
 1453 042e 00F4      		brsh .L117
 1454 0430 603E      		cpi r22,lo8(-32)
 1455 0432 00F4      		brsh .L156
 1456 0434 00C0      		rjmp .L115
 1457               	.L117:
 1458 0436 623F      		cpi r22,lo8(-14)
 1459 0438 01F4      		brne .+2
 1460 043a 00C0      		rjmp .L119
 1461 043c 00F0      		brlo .L120
 1462 043e 633F      		cpi r22,lo8(-13)
 1463 0440 01F4      		brne .+2
 1464 0442 00C0      		rjmp .L121
 1465 0444 00C0      		rjmp .L115
 1466               	.L156:
 1467 0446 162F      		mov r17,r22
 1468 0448 1F70      		andi r17,lo8(15)
 1469 044a 842F      		mov r24,r20
 1470 044c 8F71      		andi r24,lo8(31)
 242:../../tmk_core/common/action.c ****                     if (event.pressed) {
 1471               		.loc 1 242 0
 1472 044e FF20      		tst r15
 1473 0450 01F0      		breq .L122
 243:../../tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1474               		.loc 1 243 0
 1475 0452 0E94 0000 		call layer_on
 1476               	.LVL161:
 244:../../tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1477               		.loc 1 244 0
 1478 0456 812F      		mov r24,r17
 1479 0458 00C0      		rjmp .L160
 1480               	.LVL162:
 1481               	.L122:
 246:../../tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 1482               		.loc 1 246 0
 1483 045a 0E94 0000 		call layer_off
 1484               	.LVL163:
 247:../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1485               		.loc 1 247 0
 1486 045e 812F      		mov r24,r17
 1487               	.LVL164:
 1488               	.L163:
 1489               	/* epilogue start */
 337:../../tmk_core/common/action.c **** }
 1490               		.loc 1 337 0
 1491 0460 2896      		adiw r28,8
 1492 0462 0FB6      		in __tmp_reg__,__SREG__
 1493 0464 F894      		cli
 1494 0466 DEBF      		out __SP_H__,r29
 1495 0468 0FBE      		out __SREG__,__tmp_reg__
 1496 046a CDBF      		out __SP_L__,r28
 1497 046c DF91      		pop r29
 1498 046e CF91      		pop r28
 1499 0470 1F91      		pop r17
 1500 0472 0F91      		pop r16
 1501               	.LVL165:
 1502 0474 FF90      		pop r15
 1503               	.LVL166:
 1504 0476 EF90      		pop r14
 1505 0478 DF90      		pop r13
 1506 047a CF90      		pop r12
 247:../../tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1507               		.loc 1 247 0
 1508 047c 0C94 0000 		jmp unregister_mods
 1509               	.LVL167:
 1510               	.L116:
 252:../../tmk_core/common/action.c ****                     if (event.pressed) {
 1511               		.loc 1 252 0
 1512 0480 FF20      		tst r15
 1513 0482 01F0      		breq .L123
 253:../../tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1514               		.loc 1 253 0
 1515 0484 2530      		cpi r18,lo8(5)
 1516 0486 00F0      		brlo .+2
 1517 0488 00C0      		rjmp .L63
 1518               	.L124:
 254:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1519               		.loc 1 254 0
 1520 048a 842F      		mov r24,r20
 1521 048c 8F71      		andi r24,lo8(31)
 1522               	/* epilogue start */
 337:../../tmk_core/common/action.c **** }
 1523               		.loc 1 337 0
 1524 048e 2896      		adiw r28,8
 1525 0490 0FB6      		in __tmp_reg__,__SREG__
 1526 0492 F894      		cli
 1527 0494 DEBF      		out __SP_H__,r29
 1528 0496 0FBE      		out __SREG__,__tmp_reg__
 1529 0498 CDBF      		out __SP_L__,r28
 1530 049a DF91      		pop r29
 1531 049c CF91      		pop r28
 1532 049e 1F91      		pop r17
 1533 04a0 0F91      		pop r16
 1534               	.LVL168:
 1535 04a2 FF90      		pop r15
 1536               	.LVL169:
 1537 04a4 EF90      		pop r14
 1538 04a6 DF90      		pop r13
 1539 04a8 CF90      		pop r12
 254:../../tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1540               		.loc 1 254 0
 1541 04aa 0C94 0000 		jmp layer_invert
 1542               	.LVL170:
 1543               	.L123:
 257:../../tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1544               		.loc 1 257 0
 1545 04ae 2630      		cpi r18,lo8(6)
 1546 04b0 00F0      		brlo .+2
 1547 04b2 00C0      		rjmp .L63
 1548 04b4 00C0      		rjmp .L124
 1549               	.L120:
 263:../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1550               		.loc 1 263 0
 1551 04b6 FF20      		tst r15
 1552 04b8 01F0      		breq .L125
 1553               	.L126:
 263:../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1554               		.loc 1 263 0 is_stmt 0 discriminator 1
 1555 04ba 842F      		mov r24,r20
 1556 04bc 8F71      		andi r24,lo8(31)
 1557               	/* epilogue start */
 337:../../tmk_core/common/action.c **** }
 1558               		.loc 1 337 0 is_stmt 1 discriminator 1
 1559 04be 2896      		adiw r28,8
 1560 04c0 0FB6      		in __tmp_reg__,__SREG__
 1561 04c2 F894      		cli
 1562 04c4 DEBF      		out __SP_H__,r29
 1563 04c6 0FBE      		out __SREG__,__tmp_reg__
 1564 04c8 CDBF      		out __SP_L__,r28
 1565 04ca DF91      		pop r29
 1566 04cc CF91      		pop r28
 1567 04ce 1F91      		pop r17
 1568 04d0 0F91      		pop r16
 1569               	.LVL171:
 1570 04d2 FF90      		pop r15
 1571               	.LVL172:
 1572 04d4 EF90      		pop r14
 1573 04d6 DF90      		pop r13
 1574 04d8 CF90      		pop r12
 263:../../tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1575               		.loc 1 263 0 discriminator 1
 1576 04da 0C94 0000 		jmp layer_on
 1577               	.LVL173:
 1578               	.L119:
 267:../../tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 1579               		.loc 1 267 0
 1580 04de FF20      		tst r15
 1581 04e0 01F0      		breq .L126
 1582               	.L125:
 264:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1583               		.loc 1 264 0
 1584 04e2 842F      		mov r24,r20
 1585 04e4 8F71      		andi r24,lo8(31)
 1586               	/* epilogue start */
 337:../../tmk_core/common/action.c **** }
 1587               		.loc 1 337 0
 1588 04e6 2896      		adiw r28,8
 1589 04e8 0FB6      		in __tmp_reg__,__SREG__
 1590 04ea F894      		cli
 1591 04ec DEBF      		out __SP_H__,r29
 1592 04ee 0FBE      		out __SREG__,__tmp_reg__
 1593 04f0 CDBF      		out __SP_L__,r28
 1594 04f2 DF91      		pop r29
 1595 04f4 CF91      		pop r28
 1596 04f6 1F91      		pop r17
 1597 04f8 0F91      		pop r16
 1598               	.LVL174:
 1599 04fa FF90      		pop r15
 1600               	.LVL175:
 1601 04fc EF90      		pop r14
 1602 04fe DF90      		pop r13
 1603 0500 CF90      		pop r12
 264:../../tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1604               		.loc 1 264 0
 1605 0502 0C94 0000 		jmp layer_off
 1606               	.LVL176:
 1607               	.L121:
 271:../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1608               		.loc 1 271 0
 1609 0506 FF20      		tst r15
 1610 0508 01F0      		breq .L127
 271:../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1611               		.loc 1 271 0 is_stmt 0 discriminator 1
 1612 050a 842F      		mov r24,r20
 1613 050c 8F71      		andi r24,lo8(31)
 1614               	/* epilogue start */
 337:../../tmk_core/common/action.c **** }
 1615               		.loc 1 337 0 is_stmt 1 discriminator 1
 1616 050e 2896      		adiw r28,8
 1617 0510 0FB6      		in __tmp_reg__,__SREG__
 1618 0512 F894      		cli
 1619 0514 DEBF      		out __SP_H__,r29
 1620 0516 0FBE      		out __SREG__,__tmp_reg__
 1621 0518 CDBF      		out __SP_L__,r28
 1622 051a DF91      		pop r29
 1623 051c CF91      		pop r28
 1624 051e 1F91      		pop r17
 1625 0520 0F91      		pop r16
 1626               	.LVL177:
 1627 0522 FF90      		pop r15
 1628               	.LVL178:
 1629 0524 EF90      		pop r14
 1630 0526 DF90      		pop r13
 1631 0528 CF90      		pop r12
 271:../../tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1632               		.loc 1 271 0 discriminator 1
 1633 052a 0C94 0000 		jmp layer_move
 1634               	.LVL179:
 1635               	.L127:
 1636               	/* epilogue start */
 337:../../tmk_core/common/action.c **** }
 1637               		.loc 1 337 0
 1638 052e 2896      		adiw r28,8
 1639 0530 0FB6      		in __tmp_reg__,__SREG__
 1640 0532 F894      		cli
 1641 0534 DEBF      		out __SP_H__,r29
 1642 0536 0FBE      		out __SREG__,__tmp_reg__
 1643 0538 CDBF      		out __SP_L__,r28
 1644 053a DF91      		pop r29
 1645 053c CF91      		pop r28
 1646 053e 1F91      		pop r17
 1647 0540 0F91      		pop r16
 1648               	.LVL180:
 1649 0542 FF90      		pop r15
 1650               	.LVL181:
 1651 0544 EF90      		pop r14
 1652 0546 DF90      		pop r13
 1653 0548 CF90      		pop r12
 272:../../tmk_core/common/action.c ****                                     layer_clear();
 1654               		.loc 1 272 0
 1655 054a 0C94 0000 		jmp layer_clear
 1656               	.LVL182:
 1657               	.L115:
 276:../../tmk_core/common/action.c ****                     if (event.pressed) {
 1658               		.loc 1 276 0
 1659 054e FF20      		tst r15
 1660 0550 01F0      		breq .L128
 277:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1661               		.loc 1 277 0
 1662 0552 2223      		tst r18
 1663 0554 01F4      		brne .+2
 1664 0556 00C0      		rjmp .L126
 1665               	.L161:
 279:../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1666               		.loc 1 279 0
 1667 0558 862F      		mov r24,r22
 1668               	/* epilogue start */
 337:../../tmk_core/common/action.c **** }
 1669               		.loc 1 337 0
 1670 055a 2896      		adiw r28,8
 1671 055c 0FB6      		in __tmp_reg__,__SREG__
 1672 055e F894      		cli
 1673 0560 DEBF      		out __SP_H__,r29
 1674 0562 0FBE      		out __SREG__,__tmp_reg__
 1675 0564 CDBF      		out __SP_L__,r28
 1676 0566 DF91      		pop r29
 1677 0568 CF91      		pop r28
 1678 056a 1F91      		pop r17
 1679 056c 0F91      		pop r16
 1680               	.LVL183:
 1681 056e FF90      		pop r15
 1682               	.LVL184:
 1683 0570 EF90      		pop r14
 1684 0572 DF90      		pop r13
 1685 0574 CF90      		pop r12
 279:../../tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 1686               		.loc 1 279 0
 1687 0576 0C94 0000 		jmp register_code
 1688               	.LVL185:
 1689               	.L128:
 285:../../tmk_core/common/action.c ****                         if (tap_count > 0) {
 1690               		.loc 1 285 0
 1691 057a 2223      		tst r18
 1692 057c 01F4      		brne .+2
 1693 057e 00C0      		rjmp .L125
 1694               	.L162:
 287:../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 1695               		.loc 1 287 0
 1696 0580 862F      		mov r24,r22
 1697               	/* epilogue start */
 337:../../tmk_core/common/action.c **** }
 1698               		.loc 1 337 0
 1699 0582 2896      		adiw r28,8
 1700 0584 0FB6      		in __tmp_reg__,__SREG__
 1701 0586 F894      		cli
 1702 0588 DEBF      		out __SP_H__,r29
 1703 058a 0FBE      		out __SREG__,__tmp_reg__
 1704 058c CDBF      		out __SP_L__,r28
 1705 058e DF91      		pop r29
 1706 0590 CF91      		pop r28
 1707 0592 1F91      		pop r17
 1708 0594 0F91      		pop r16
 1709               	.LVL186:
 1710 0596 FF90      		pop r15
 1711               	.LVL187:
 1712 0598 EF90      		pop r14
 1713 059a DF90      		pop r13
 1714 059c CF90      		pop r12
 287:../../tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 1715               		.loc 1 287 0
 1716 059e 0C94 0000 		jmp unregister_code
 1717               	.LVL188:
 1718               	.L75:
 301:../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1719               		.loc 1 301 0
 1720 05a2 4F70      		andi r20,lo8(15)
 1721 05a4 C801      		movw r24,r16
 1722 05a6 0E94 0000 		call action_get_macro
 1723               	.LVL189:
 1724               	/* epilogue start */
 337:../../tmk_core/common/action.c **** }
 1725               		.loc 1 337 0
 1726 05aa 2896      		adiw r28,8
 1727 05ac 0FB6      		in __tmp_reg__,__SREG__
 1728 05ae F894      		cli
 1729 05b0 DEBF      		out __SP_H__,r29
 1730 05b2 0FBE      		out __SREG__,__tmp_reg__
 1731 05b4 CDBF      		out __SP_L__,r28
 1732 05b6 DF91      		pop r29
 1733 05b8 CF91      		pop r28
 1734 05ba 1F91      		pop r17
 1735 05bc 0F91      		pop r16
 1736               	.LVL190:
 1737 05be FF90      		pop r15
 1738               	.LVL191:
 1739 05c0 EF90      		pop r14
 1740 05c2 DF90      		pop r13
 1741 05c4 CF90      		pop r12
 301:../../tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1742               		.loc 1 301 0
 1743 05c6 0C94 0000 		jmp action_macro_play
 1744               	.LVL192:
 1745               	.L76:
 331:../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1746               		.loc 1 331 0
 1747 05ca 4F70      		andi r20,lo8(15)
 1748 05cc C801      		movw r24,r16
 1749               	/* epilogue start */
 337:../../tmk_core/common/action.c **** }
 1750               		.loc 1 337 0
 1751 05ce 2896      		adiw r28,8
 1752 05d0 0FB6      		in __tmp_reg__,__SREG__
 1753 05d2 F894      		cli
 1754 05d4 DEBF      		out __SP_H__,r29
 1755 05d6 0FBE      		out __SREG__,__tmp_reg__
 1756 05d8 CDBF      		out __SP_L__,r28
 1757 05da DF91      		pop r29
 1758 05dc CF91      		pop r28
 1759 05de 1F91      		pop r17
 1760 05e0 0F91      		pop r16
 1761               	.LVL193:
 1762 05e2 FF90      		pop r15
 1763               	.LVL194:
 1764 05e4 EF90      		pop r14
 1765 05e6 DF90      		pop r13
 1766 05e8 CF90      		pop r12
 331:../../tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1767               		.loc 1 331 0
 1768 05ea 0C94 0000 		jmp action_function
 1769               	.LVL195:
 1770               	.L63:
 1771               	/* epilogue start */
 337:../../tmk_core/common/action.c **** }
 1772               		.loc 1 337 0
 1773 05ee 2896      		adiw r28,8
 1774 05f0 0FB6      		in __tmp_reg__,__SREG__
 1775 05f2 F894      		cli
 1776 05f4 DEBF      		out __SP_H__,r29
 1777 05f6 0FBE      		out __SREG__,__tmp_reg__
 1778 05f8 CDBF      		out __SP_L__,r28
 1779 05fa DF91      		pop r29
 1780 05fc CF91      		pop r28
 1781 05fe 1F91      		pop r17
 1782 0600 0F91      		pop r16
 1783               	.LVL196:
 1784 0602 FF90      		pop r15
 1785               	.LVL197:
 1786 0604 EF90      		pop r14
 1787 0606 DF90      		pop r13
 1788 0608 CF90      		pop r12
 1789 060a 0895      		ret
 1790               		.cfi_endproc
 1791               	.LFE104:
 1793               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1794               	.global	clear_keyboard_but_mods
 1796               	clear_keyboard_but_mods:
 1797               	.LFB110:
 488:../../tmk_core/common/action.c ****     }
 489:../../tmk_core/common/action.c **** }
 490:../../tmk_core/common/action.c **** 
 491:../../tmk_core/common/action.c **** void clear_keyboard(void)
 492:../../tmk_core/common/action.c **** {
 493:../../tmk_core/common/action.c ****     clear_mods();
 494:../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 495:../../tmk_core/common/action.c **** }
 496:../../tmk_core/common/action.c **** 
 497:../../tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 498:../../tmk_core/common/action.c **** {
 1798               		.loc 1 498 0
 1799               		.cfi_startproc
 1800               	/* prologue: function */
 1801               	/* frame size = 0 */
 1802               	/* stack size = 0 */
 1803               	.L__stack_usage = 0
 499:../../tmk_core/common/action.c ****     clear_weak_mods();
 1804               		.loc 1 499 0
 1805 0000 0E94 0000 		call clear_weak_mods
 1806               	.LVL198:
 500:../../tmk_core/common/action.c ****     clear_keys();
 1807               		.loc 1 500 0
 1808 0004 0E94 0000 		call clear_keys
 1809               	.LVL199:
 501:../../tmk_core/common/action.c ****     send_keyboard_report();
 1810               		.loc 1 501 0
 1811 0008 0E94 0000 		call send_keyboard_report
 1812               	.LVL200:
 502:../../tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 503:../../tmk_core/common/action.c ****     mousekey_clear();
 1813               		.loc 1 503 0
 1814 000c 0E94 0000 		call mousekey_clear
 1815               	.LVL201:
 504:../../tmk_core/common/action.c ****     mousekey_send();
 1816               		.loc 1 504 0
 1817 0010 0E94 0000 		call mousekey_send
 1818               	.LVL202:
 505:../../tmk_core/common/action.c **** #endif
 506:../../tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 507:../../tmk_core/common/action.c ****     host_system_send(0);
 1819               		.loc 1 507 0
 1820 0014 80E0      		ldi r24,0
 1821 0016 90E0      		ldi r25,0
 1822 0018 0E94 0000 		call host_system_send
 1823               	.LVL203:
 508:../../tmk_core/common/action.c ****     host_consumer_send(0);
 1824               		.loc 1 508 0
 1825 001c 80E0      		ldi r24,0
 1826 001e 90E0      		ldi r25,0
 1827 0020 0C94 0000 		jmp host_consumer_send
 1828               	.LVL204:
 1829               		.cfi_endproc
 1830               	.LFE110:
 1832               		.section	.text.clear_keyboard,"ax",@progbits
 1833               	.global	clear_keyboard
 1835               	clear_keyboard:
 1836               	.LFB109:
 492:../../tmk_core/common/action.c **** {
 1837               		.loc 1 492 0
 1838               		.cfi_startproc
 1839               	/* prologue: function */
 1840               	/* frame size = 0 */
 1841               	/* stack size = 0 */
 1842               	.L__stack_usage = 0
 493:../../tmk_core/common/action.c ****     clear_mods();
 1843               		.loc 1 493 0
 1844 0000 0E94 0000 		call clear_mods
 1845               	.LVL205:
 494:../../tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1846               		.loc 1 494 0
 1847 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1848               	.LVL206:
 1849               		.cfi_endproc
 1850               	.LFE109:
 1852               		.section	.text.is_tap_key,"ax",@progbits
 1853               	.global	is_tap_key
 1855               	is_tap_key:
 1856               	.LFB111:
 509:../../tmk_core/common/action.c **** #endif
 510:../../tmk_core/common/action.c **** }
 511:../../tmk_core/common/action.c **** 
 512:../../tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 513:../../tmk_core/common/action.c **** {
 1857               		.loc 1 513 0
 1858               		.cfi_startproc
 1859               	.LVL207:
 1860               	/* prologue: function */
 1861               	/* frame size = 0 */
 1862               	/* stack size = 0 */
 1863               	.L__stack_usage = 0
 514:../../tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1864               		.loc 1 514 0
 1865 0000 0E94 0000 		call layer_switch_get_action
 1866               	.LVL208:
 515:../../tmk_core/common/action.c **** 
 516:../../tmk_core/common/action.c ****     switch (action.kind.id) {
 1867               		.loc 1 516 0
 1868 0004 292F      		mov r18,r25
 1869 0006 2295      		swap r18
 1870 0008 2F70      		andi r18,lo8(15)
 1871 000a 30E0      		ldi r19,0
 1872 000c 2C30      		cpi r18,12
 1873 000e 3105      		cpc r19,__zero_reg__
 1874 0010 04F4      		brge .L174
 1875 0012 2A30      		cpi r18,10
 1876 0014 3105      		cpc r19,__zero_reg__
 1877 0016 04F4      		brge .L175
 1878 0018 2250      		subi r18,2
 1879 001a 3109      		sbc r19,__zero_reg__
 1880 001c 2230      		cpi r18,2
 1881 001e 3105      		cpc r19,__zero_reg__
 1882 0020 00F4      		brsh .L189
 1883 0022 00C0      		rjmp .L175
 1884               	.L174:
 1885 0024 2C30      		cpi r18,12
 1886 0026 3105      		cpc r19,__zero_reg__
 1887 0028 01F0      		breq .L176
 1888 002a 2F30      		cpi r18,15
 1889 002c 3105      		cpc r19,__zero_reg__
 1890 002e 01F0      		breq .L176
 1891 0030 00C0      		rjmp .L189
 1892               	.L175:
 517:../../tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 518:../../tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 519:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 520:../../tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 521:../../tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1893               		.loc 1 521 0
 1894 0032 803E      		cpi r24,lo8(-32)
 1895               	.LVL209:
 1896 0034 00F0      		brlo .L177
 1897 0036 803F      		cpi r24,lo8(-16)
 1898 0038 01F4      		brne .L189
 1899               	.L177:
 522:../../tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 523:../../tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 524:../../tmk_core/common/action.c ****                     return true;
 1900               		.loc 1 524 0
 1901 003a 81E0      		ldi r24,lo8(1)
 1902               	.LVL210:
 1903 003c 0895      		ret
 1904               	.L176:
 525:../../tmk_core/common/action.c ****             }
 526:../../tmk_core/common/action.c ****             return false;
 527:../../tmk_core/common/action.c ****         case ACT_MACRO:
 528:../../tmk_core/common/action.c ****         case ACT_FUNCTION:
 529:../../tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1905               		.loc 1 529 0
 1906 003e 93FB      		bst r25,3
 1907 0040 8827      		clr r24
 1908 0042 80F9      		bld r24,0
 1909 0044 0895      		ret
 1910               	.LVL211:
 1911               	.L189:
 526:../../tmk_core/common/action.c ****             return false;
 1912               		.loc 1 526 0
 1913 0046 80E0      		ldi r24,0
 1914               	.LVL212:
 530:../../tmk_core/common/action.c ****             return false;
 531:../../tmk_core/common/action.c ****     }
 532:../../tmk_core/common/action.c ****     return false;
 533:../../tmk_core/common/action.c **** }
 1915               		.loc 1 533 0
 1916 0048 0895      		ret
 1917               		.cfi_endproc
 1918               	.LFE111:
 1920               		.section	.text.debug_event,"ax",@progbits
 1921               	.global	debug_event
 1923               	debug_event:
 1924               	.LFB112:
 534:../../tmk_core/common/action.c **** 
 535:../../tmk_core/common/action.c **** 
 536:../../tmk_core/common/action.c **** /*
 537:../../tmk_core/common/action.c ****  * debug print
 538:../../tmk_core/common/action.c ****  */
 539:../../tmk_core/common/action.c **** void debug_event(keyevent_t event)
 540:../../tmk_core/common/action.c **** {
 1925               		.loc 1 540 0
 1926               		.cfi_startproc
 1927 0000 CF93      		push r28
 1928               	.LCFI15:
 1929               		.cfi_def_cfa_offset 3
 1930               		.cfi_offset 28, -2
 1931 0002 DF93      		push r29
 1932               	.LCFI16:
 1933               		.cfi_def_cfa_offset 4
 1934               		.cfi_offset 29, -3
 1935 0004 00D0      		rcall .
 1936 0006 00D0      		rcall .
 1937 0008 1F92      		push __zero_reg__
 1938               	.LCFI17:
 1939               		.cfi_def_cfa_offset 9
 1940 000a CDB7      		in r28,__SP_L__
 1941 000c DEB7      		in r29,__SP_H__
 1942               	.LCFI18:
 1943               		.cfi_def_cfa_register 28
 1944               	/* prologue: function */
 1945               	/* frame size = 5 */
 1946               	/* stack size = 7 */
 1947               	.L__stack_usage = 7
 1948               	/* epilogue start */
 541:../../tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 542:../../tmk_core/common/action.c **** }
 1949               		.loc 1 542 0
 1950 000e 0F90      		pop __tmp_reg__
 1951 0010 0F90      		pop __tmp_reg__
 1952 0012 0F90      		pop __tmp_reg__
 1953 0014 0F90      		pop __tmp_reg__
 1954 0016 0F90      		pop __tmp_reg__
 1955 0018 DF91      		pop r29
 1956 001a CF91      		pop r28
 1957 001c 0895      		ret
 1958               		.cfi_endproc
 1959               	.LFE112:
 1961               		.section	.text.debug_record,"ax",@progbits
 1962               	.global	debug_record
 1964               	debug_record:
 1965               	.LFB113:
 543:../../tmk_core/common/action.c **** 
 544:../../tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 545:../../tmk_core/common/action.c **** {
 1966               		.loc 1 545 0
 1967               		.cfi_startproc
 1968 0000 CF93      		push r28
 1969               	.LCFI19:
 1970               		.cfi_def_cfa_offset 3
 1971               		.cfi_offset 28, -2
 1972 0002 DF93      		push r29
 1973               	.LCFI20:
 1974               		.cfi_def_cfa_offset 4
 1975               		.cfi_offset 29, -3
 1976 0004 00D0      		rcall .
 1977 0006 00D0      		rcall .
 1978 0008 00D0      		rcall .
 1979               	.LCFI21:
 1980               		.cfi_def_cfa_offset 10
 1981 000a CDB7      		in r28,__SP_L__
 1982 000c DEB7      		in r29,__SP_H__
 1983               	.LCFI22:
 1984               		.cfi_def_cfa_register 28
 1985               	/* prologue: function */
 1986               	/* frame size = 6 */
 1987               	/* stack size = 8 */
 1988               	.L__stack_usage = 8
 1989               	/* epilogue start */
 546:../../tmk_core/common/action.c ****     debug_event(record.event);
 547:../../tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 548:../../tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 549:../../tmk_core/common/action.c **** #endif
 550:../../tmk_core/common/action.c **** }
 1990               		.loc 1 550 0
 1991 000e 2696      		adiw r28,6
 1992 0010 0FB6      		in __tmp_reg__,__SREG__
 1993 0012 F894      		cli
 1994 0014 DEBF      		out __SP_H__,r29
 1995 0016 0FBE      		out __SREG__,__tmp_reg__
 1996 0018 CDBF      		out __SP_L__,r28
 1997 001a DF91      		pop r29
 1998 001c CF91      		pop r28
 1999 001e 0895      		ret
 2000               		.cfi_endproc
 2001               	.LFE113:
 2003               		.section	.text.debug_action,"ax",@progbits
 2004               	.global	debug_action
 2006               	debug_action:
 2007               	.LFB114:
 551:../../tmk_core/common/action.c **** 
 552:../../tmk_core/common/action.c **** void debug_action(action_t action)
 553:../../tmk_core/common/action.c **** {
 2008               		.loc 1 553 0
 2009               		.cfi_startproc
 2010               	.LVL213:
 2011               	/* prologue: function */
 2012               	/* frame size = 0 */
 2013               	/* stack size = 0 */
 2014               	.L__stack_usage = 0
 2015 0000 0895      		ret
 2016               		.cfi_endproc
 2017               	.LFE114:
 2019               		.text
 2020               	.Letext0:
 2021               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 2022               		.file 4 "../../tmk_core/common/keycode.h"
 2023               		.file 5 "../../tmk_core/common/action_code.h"
 2024               		.file 6 "../../tmk_core/common/action_macro.h"
 2025               		.file 7 "../../tmk_core/common/action.h"
 2026               		.file 8 "../../tmk_core/common/action_tapping.h"
 2027               		.file 9 "../../tmk_core/common/action_util.h"
 2028               		.file 10 "../../tmk_core/common/host.h"
 2029               		.file 11 "../../tmk_core/common/action_layer.h"
 2030               		.file 12 "../../tmk_core/common/command.h"
 2031               		.file 13 "../../tmk_core/common/mousekey.h"
 2032               		.file 14 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:00000000 action.c
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:2      *ABS*:0000003e __SP_H__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:3      *ABS*:0000003d __SP_L__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:4      *ABS*:0000003f __SREG__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:6      *ABS*:00000001 __zero_reg__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:13     .text.action_exec:00000000 action_exec
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:93     .text.register_code:00000000 register_code
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:410    .text.unregister_code:00000000 unregister_code
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:545    .text.register_mods:00000000 register_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:571    .text.unregister_mods:00000000 unregister_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:597    .text.process_action:00000000 process_action
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:1796   .text.clear_keyboard_but_mods:00000000 clear_keyboard_but_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:1835   .text.clear_keyboard:00000000 clear_keyboard
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:1855   .text.is_tap_key:00000000 is_tap_key
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:1923   .text.debug_event:00000000 debug_event
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:1964   .text.debug_record:00000000 debug_record
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccRWzDIO.s:2006   .text.debug_action:00000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
command_proc
add_mods
host_system_send
host_consumer_send
del_mods
layer_switch_get_action
layer_debug
default_layer_debug
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
mousekey_on
mousekey_off
mousekey_send
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
clear_weak_mods
clear_keys
mousekey_clear
clear_mods

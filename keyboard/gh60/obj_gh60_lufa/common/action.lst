   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_power_up,"ax",@progbits
  11               		.weak	matrix_power_up
  13               	matrix_power_up:
  14               	.LFB102:
  15               		.file 1 "../../common/keyboard.h"
   1:../../common/keyboard.h **** /*
   2:../../common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/keyboard.h **** 
   4:../../common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/keyboard.h **** (at your option) any later version.
   8:../../common/keyboard.h **** 
   9:../../common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/keyboard.h **** GNU General Public License for more details.
  13:../../common/keyboard.h **** 
  14:../../common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/keyboard.h **** */
  17:../../common/keyboard.h **** 
  18:../../common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../common/keyboard.h **** #define KEYBOARD_H
  20:../../common/keyboard.h **** 
  21:../../common/keyboard.h **** #include <stdbool.h>
  22:../../common/keyboard.h **** #include <stdint.h>
  23:../../common/keyboard.h **** 
  24:../../common/keyboard.h **** 
  25:../../common/keyboard.h **** #ifdef __cplusplus
  26:../../common/keyboard.h **** extern "C" {
  27:../../common/keyboard.h **** #endif
  28:../../common/keyboard.h **** 
  29:../../common/keyboard.h **** /* key matrix position */
  30:../../common/keyboard.h **** typedef struct {
  31:../../common/keyboard.h ****     uint8_t col;
  32:../../common/keyboard.h ****     uint8_t row;
  33:../../common/keyboard.h **** } keypos_t;
  34:../../common/keyboard.h **** 
  35:../../common/keyboard.h **** /* key event */
  36:../../common/keyboard.h **** typedef struct {
  37:../../common/keyboard.h ****     keypos_t key;
  38:../../common/keyboard.h ****     bool     pressed;
  39:../../common/keyboard.h ****     uint16_t time;
  40:../../common/keyboard.h **** } keyevent_t;
  41:../../common/keyboard.h **** 
  42:../../common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../common/keyboard.h **** 
  45:../../common/keyboard.h **** /* Rules for No Event:
  46:../../common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../common/keyboard.h ****  */
  49:../../common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  50:../../common/keyboard.h **** static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
  51:../../common/keyboard.h **** static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
  52:../../common/keyboard.h **** 
  53:../../common/keyboard.h **** /* Tick event */
  54:../../common/keyboard.h **** #define TICK                    (keyevent_t){           \
  55:../../common/keyboard.h ****     .key = (keypos_t){ .row = 255, .col = 255 },           \
  56:../../common/keyboard.h ****     .pressed = false,                                   \
  57:../../common/keyboard.h ****     .time = (timer_read() | 1)                          \
  58:../../common/keyboard.h **** }
  59:../../common/keyboard.h **** 
  60:../../common/keyboard.h **** 
  61:../../common/keyboard.h **** void keyboard_init(void);
  62:../../common/keyboard.h **** void keyboard_task(void);
  63:../../common/keyboard.h **** void keyboard_set_leds(uint8_t leds);
  64:../../common/keyboard.h **** 
  65:../../common/keyboard.h **** __attribute__ ((weak)) void matrix_power_up(void) {}
  16               		.loc 1 65 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE102:
  26               		.section	.text.matrix_power_down,"ax",@progbits
  27               		.weak	matrix_power_down
  29               	matrix_power_down:
  30               	.LFB103:
  66:../../common/keyboard.h **** __attribute__ ((weak)) void matrix_power_down(void) {}
  31               		.loc 1 66 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
  37 0000 0895      		ret
  38               		.cfi_endproc
  39               	.LFE103:
  41               		.section	.text.action_exec,"ax",@progbits
  42               	.global	action_exec
  44               	action_exec:
  45               	.LFB104:
  46               		.file 2 "../../common/action.c"
   1:../../common/action.c **** /*
   2:../../common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/action.c **** 
   4:../../common/action.c **** This program is free software: you can redistribute it and/or modify
   5:../../common/action.c **** it under the terms of the GNU General Public License as published by
   6:../../common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/action.c **** (at your option) any later version.
   8:../../common/action.c **** 
   9:../../common/action.c **** This program is distributed in the hope that it will be useful,
  10:../../common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/action.c **** GNU General Public License for more details.
  13:../../common/action.c **** 
  14:../../common/action.c **** You should have received a copy of the GNU General Public License
  15:../../common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/action.c **** */
  17:../../common/action.c **** #include "host.h"
  18:../../common/action.c **** #include "keycode.h"
  19:../../common/action.c **** #include "keyboard.h"
  20:../../common/action.c **** #include "mousekey.h"
  21:../../common/action.c **** #include "command.h"
  22:../../common/action.c **** #include "led.h"
  23:../../common/action.c **** #include "backlight.h"
  24:../../common/action.c **** #include "action_layer.h"
  25:../../common/action.c **** #include "action_tapping.h"
  26:../../common/action.c **** #include "action_macro.h"
  27:../../common/action.c **** #include "action_util.h"
  28:../../common/action.c **** #include "action.h"
  29:../../common/action.c **** 
  30:../../common/action.c **** #ifdef DEBUG_ACTION
  31:../../common/action.c **** #include "debug.h"
  32:../../common/action.c **** #else
  33:../../common/action.c **** #include "nodebug.h"
  34:../../common/action.c **** #endif
  35:../../common/action.c **** 
  36:../../common/action.c **** 
  37:../../common/action.c **** void action_exec(keyevent_t event)
  38:../../common/action.c **** {
  47               		.loc 2 38 0
  48               		.cfi_startproc
  49               		.loc 2 38 0
  50 0000 CF93      		push r28
  51               	.LCFI0:
  52               		.cfi_def_cfa_offset 3
  53               		.cfi_offset 28, -2
  54 0002 DF93      		push r29
  55               	.LCFI1:
  56               		.cfi_def_cfa_offset 4
  57               		.cfi_offset 29, -3
  58 0004 CDB7      		in r28,__SP_L__
  59 0006 DEB7      		in r29,__SP_H__
  60               	.LCFI2:
  61               		.cfi_def_cfa_register 28
  62 0008 2B97      		sbiw r28,11
  63               	.LCFI3:
  64               		.cfi_def_cfa_offset 15
  65 000a 0FB6      		in __tmp_reg__,__SREG__
  66 000c F894      		cli
  67 000e DEBF      		out __SP_H__,r29
  68 0010 0FBE      		out __SREG__,__tmp_reg__
  69 0012 CDBF      		out __SP_L__,r28
  70               	/* prologue: function */
  71               	/* frame size = 11 */
  72               	/* stack size = 13 */
  73               	.L__stack_usage = 13
  74 0014 4F83      		std Y+7,r20
  75 0016 5887      		std Y+8,r21
  76 0018 6987      		std Y+9,r22
  77 001a 7A87      		std Y+10,r23
  78 001c 8B87      		std Y+11,r24
  79               	.LVL0:
  39:../../common/action.c ****     if (!IS_NOEVENT(event)) {
  40:../../common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:../../common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  42:../../common/action.c ****     }
  43:../../common/action.c **** 
  44:../../common/action.c ****     keyrecord_t record = { .event = event };
  80               		.loc 2 44 0
  81 001e DE01      		movw r26,r28
  82 0020 1196      		adiw r26,1
  83 0022 86E0      		ldi r24,lo8(6)
  84 0024 FD01      		movw r30,r26
  85               		0:
  86 0026 1192      		st Z+,__zero_reg__
  87 0028 8A95      		dec r24
  88 002a 01F4      		brne 0b
  89 002c 85E0      		ldi r24,lo8(5)
  90 002e FE01      		movw r30,r28
  91 0030 3796      		adiw r30,7
  92               		0:
  93 0032 0190      		ld r0,Z+
  94 0034 0D92      		st X+,r0
  95 0036 8A95      		dec r24
  96 0038 01F4      		brne 0b
  45:../../common/action.c **** 
  46:../../common/action.c **** #ifndef NO_ACTION_TAPPING
  47:../../common/action.c ****     action_tapping_process(record);
  97               		.loc 2 47 0
  98 003a 4981      		ldd r20,Y+1
  99               	.LVL1:
 100 003c 5A81      		ldd r21,Y+2
 101               	.LVL2:
 102 003e 6B81      		ldd r22,Y+3
 103 0040 7C81      		ldd r23,Y+4
 104 0042 8D81      		ldd r24,Y+5
 105 0044 9E81      		ldd r25,Y+6
 106 0046 0E94 0000 		call action_tapping_process
 107               	.LVL3:
 108               	/* epilogue start */
  48:../../common/action.c **** #else
  49:../../common/action.c ****     process_action(&record);
  50:../../common/action.c ****     if (!IS_NOEVENT(record.event)) {
  51:../../common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  52:../../common/action.c ****     }
  53:../../common/action.c **** #endif
  54:../../common/action.c **** }
 109               		.loc 2 54 0
 110 004a 2B96      		adiw r28,11
 111 004c 0FB6      		in __tmp_reg__,__SREG__
 112 004e F894      		cli
 113 0050 DEBF      		out __SP_H__,r29
 114 0052 0FBE      		out __SREG__,__tmp_reg__
 115 0054 CDBF      		out __SP_L__,r28
 116 0056 DF91      		pop r29
 117 0058 CF91      		pop r28
 118 005a 0895      		ret
 119               		.cfi_endproc
 120               	.LFE104:
 122               		.section	.text.register_code,"ax",@progbits
 123               	.global	register_code
 125               	register_code:
 126               	.LFB106:
  55:../../common/action.c **** 
  56:../../common/action.c **** void process_action(keyrecord_t *record)
  57:../../common/action.c **** {
  58:../../common/action.c ****     keyevent_t event = record->event;
  59:../../common/action.c **** #ifndef NO_ACTION_TAPPING
  60:../../common/action.c ****     uint8_t tap_count = record->tap.count;
  61:../../common/action.c **** #endif
  62:../../common/action.c **** 
  63:../../common/action.c ****     if (IS_NOEVENT(event)) { return; }
  64:../../common/action.c **** 
  65:../../common/action.c ****     action_t action = layer_switch_get_action(event.key);
  66:../../common/action.c ****     dprint("ACTION: "); debug_action(action);
  67:../../common/action.c **** #ifndef NO_ACTION_LAYER
  68:../../common/action.c ****     dprint(" layer_state: "); layer_debug();
  69:../../common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
  70:../../common/action.c **** #endif
  71:../../common/action.c ****     dprintln();
  72:../../common/action.c **** 
  73:../../common/action.c ****     switch (action.kind.id) {
  74:../../common/action.c ****         /* Key and Mods */
  75:../../common/action.c ****         case ACT_LMODS:
  76:../../common/action.c ****         case ACT_RMODS:
  77:../../common/action.c ****             {
  78:../../common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
  79:../../common/action.c ****                                                                 action.key.mods<<4;
  80:../../common/action.c ****                 if (event.pressed) {
  81:../../common/action.c ****                     if (mods) {
  82:../../common/action.c ****                         add_weak_mods(mods);
  83:../../common/action.c ****                         send_keyboard_report();
  84:../../common/action.c ****                     }
  85:../../common/action.c ****                     register_code(action.key.code);
  86:../../common/action.c ****                 } else {
  87:../../common/action.c ****                     unregister_code(action.key.code);
  88:../../common/action.c ****                     if (mods) {
  89:../../common/action.c ****                         del_weak_mods(mods);
  90:../../common/action.c ****                         send_keyboard_report();
  91:../../common/action.c ****                     }
  92:../../common/action.c ****                 }
  93:../../common/action.c ****             }
  94:../../common/action.c ****             break;
  95:../../common/action.c **** #ifndef NO_ACTION_TAPPING
  96:../../common/action.c ****         case ACT_LMODS_TAP:
  97:../../common/action.c ****         case ACT_RMODS_TAP:
  98:../../common/action.c ****             {
  99:../../common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 100:../../common/action.c ****                                                                     action.key.mods<<4;
 101:../../common/action.c ****                 switch (action.layer_tap.code) {
 102:../../common/action.c ****     #ifndef NO_ACTION_ONESHOT
 103:../../common/action.c ****                     case MODS_ONESHOT:
 104:../../common/action.c ****                         // Oneshot modifier
 105:../../common/action.c ****                         if (event.pressed) {
 106:../../common/action.c ****                             if (tap_count == 0) {
 107:../../common/action.c ****                                 register_mods(mods);
 108:../../common/action.c ****                             }
 109:../../common/action.c ****                             else if (tap_count == 1) {
 110:../../common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 111:../../common/action.c ****                                 set_oneshot_mods(mods);
 112:../../common/action.c ****                             }
 113:../../common/action.c ****                             else {
 114:../../common/action.c ****                                 register_mods(mods);
 115:../../common/action.c ****                             }
 116:../../common/action.c ****                         } else {
 117:../../common/action.c ****                             if (tap_count == 0) {
 118:../../common/action.c ****                                 clear_oneshot_mods();
 119:../../common/action.c ****                                 unregister_mods(mods);
 120:../../common/action.c ****                             }
 121:../../common/action.c ****                             else if (tap_count == 1) {
 122:../../common/action.c ****                                 // Retain Oneshot mods
 123:../../common/action.c ****                             }
 124:../../common/action.c ****                             else {
 125:../../common/action.c ****                                 clear_oneshot_mods();
 126:../../common/action.c ****                                 unregister_mods(mods);
 127:../../common/action.c ****                             }
 128:../../common/action.c ****                         }
 129:../../common/action.c ****                         break;
 130:../../common/action.c ****     #endif
 131:../../common/action.c ****                     case MODS_TAP_TOGGLE:
 132:../../common/action.c ****                         if (event.pressed) {
 133:../../common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 134:../../common/action.c ****                                 register_mods(mods);
 135:../../common/action.c ****                             }
 136:../../common/action.c ****                         } else {
 137:../../common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 138:../../common/action.c ****                                 unregister_mods(mods);
 139:../../common/action.c ****                             }
 140:../../common/action.c ****                         }
 141:../../common/action.c ****                         break;
 142:../../common/action.c ****                     default:
 143:../../common/action.c ****                         if (event.pressed) {
 144:../../common/action.c ****                             if (tap_count > 0) {
 145:../../common/action.c ****                                 if (record->tap.interrupted) {
 146:../../common/action.c ****                                     dprint("MODS_TAP: Tap: Cancel: add_mods\n");
 147:../../common/action.c ****                                     // ad hoc: set 0 to cancel tap
 148:../../common/action.c ****                                     record->tap.count = 0;
 149:../../common/action.c ****                                     register_mods(mods);
 150:../../common/action.c ****                                 } else {
 151:../../common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 152:../../common/action.c ****                                     register_code(action.key.code);
 153:../../common/action.c ****                                 }
 154:../../common/action.c ****                             } else {
 155:../../common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 156:../../common/action.c ****                                 register_mods(mods);
 157:../../common/action.c ****                             }
 158:../../common/action.c ****                         } else {
 159:../../common/action.c ****                             if (tap_count > 0) {
 160:../../common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 161:../../common/action.c ****                                 unregister_code(action.key.code);
 162:../../common/action.c ****                             } else {
 163:../../common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 164:../../common/action.c ****                                 unregister_mods(mods);
 165:../../common/action.c ****                             }
 166:../../common/action.c ****                         }
 167:../../common/action.c ****                         break;
 168:../../common/action.c ****                 }
 169:../../common/action.c ****             }
 170:../../common/action.c ****             break;
 171:../../common/action.c **** #endif
 172:../../common/action.c **** #ifdef EXTRAKEY_ENABLE
 173:../../common/action.c ****         /* other HID usage */
 174:../../common/action.c ****         case ACT_USAGE:
 175:../../common/action.c ****             switch (action.usage.page) {
 176:../../common/action.c ****                 case PAGE_SYSTEM:
 177:../../common/action.c ****                     if (event.pressed) {
 178:../../common/action.c ****                         host_system_send(action.usage.code);
 179:../../common/action.c ****                     } else {
 180:../../common/action.c ****                         host_system_send(0);
 181:../../common/action.c ****                     }
 182:../../common/action.c ****                     break;
 183:../../common/action.c ****                 case PAGE_CONSUMER:
 184:../../common/action.c ****                     if (event.pressed) {
 185:../../common/action.c ****                         host_consumer_send(action.usage.code);
 186:../../common/action.c ****                     } else {
 187:../../common/action.c ****                         host_consumer_send(0);
 188:../../common/action.c ****                     }
 189:../../common/action.c ****                     break;
 190:../../common/action.c ****             }
 191:../../common/action.c ****             break;
 192:../../common/action.c **** #endif
 193:../../common/action.c **** #ifdef MOUSEKEY_ENABLE
 194:../../common/action.c ****         /* Mouse key */
 195:../../common/action.c ****         case ACT_MOUSEKEY:
 196:../../common/action.c ****             if (event.pressed) {
 197:../../common/action.c ****                 mousekey_on(action.key.code);
 198:../../common/action.c ****                 mousekey_send();
 199:../../common/action.c ****             } else {
 200:../../common/action.c ****                 mousekey_off(action.key.code);
 201:../../common/action.c ****                 mousekey_send();
 202:../../common/action.c ****             }
 203:../../common/action.c ****             break;
 204:../../common/action.c **** #endif
 205:../../common/action.c **** #ifndef NO_ACTION_LAYER
 206:../../common/action.c ****         case ACT_LAYER:
 207:../../common/action.c ****             if (action.layer_bitop.on == 0) {
 208:../../common/action.c ****                 /* Default Layer Bitwise Operation */
 209:../../common/action.c ****                 if (!event.pressed) {
 210:../../common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 211:../../common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 212:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 213:../../common/action.c ****                     switch (action.layer_bitop.op) {
 214:../../common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 215:../../common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 216:../../common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 217:../../common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 218:../../common/action.c ****                     }
 219:../../common/action.c ****                 }
 220:../../common/action.c ****             } else {
 221:../../common/action.c ****                 /* Layer Bitwise Operation */
 222:../../common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 223:../../common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 224:../../common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 225:../../common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 226:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 227:../../common/action.c ****                     switch (action.layer_bitop.op) {
 228:../../common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 229:../../common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 230:../../common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 231:../../common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 232:../../common/action.c ****                     }
 233:../../common/action.c ****                 }
 234:../../common/action.c ****             }
 235:../../common/action.c ****             break;
 236:../../common/action.c ****     #ifndef NO_ACTION_TAPPING
 237:../../common/action.c ****         case ACT_LAYER_TAP:
 238:../../common/action.c ****         case ACT_LAYER_TAP_EXT:
 239:../../common/action.c ****             switch (action.layer_tap.code) {
 240:../../common/action.c ****                 case 0xe0 ... 0xef:
 241:../../common/action.c ****                     /* layer On/Off with modifiers(left only) */
 242:../../common/action.c ****                     if (event.pressed) {
 243:../../common/action.c ****                         layer_on(action.layer_tap.val);
 244:../../common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 245:../../common/action.c ****                     } else {
 246:../../common/action.c ****                         layer_off(action.layer_tap.val);
 247:../../common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 248:../../common/action.c ****                     }
 249:../../common/action.c ****                     break;
 250:../../common/action.c ****                 case OP_TAP_TOGGLE:
 251:../../common/action.c ****                     /* tap toggle */
 252:../../common/action.c ****                     if (event.pressed) {
 253:../../common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 254:../../common/action.c ****                             layer_invert(action.layer_tap.val);
 255:../../common/action.c ****                         }
 256:../../common/action.c ****                     } else {
 257:../../common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 258:../../common/action.c ****                             layer_invert(action.layer_tap.val);
 259:../../common/action.c ****                         }
 260:../../common/action.c ****                     }
 261:../../common/action.c ****                     break;
 262:../../common/action.c ****                 case OP_ON_OFF:
 263:../../common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 264:../../common/action.c ****                                     layer_off(action.layer_tap.val);
 265:../../common/action.c ****                     break;
 266:../../common/action.c ****                 case OP_OFF_ON:
 267:../../common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 268:../../common/action.c ****                                     layer_on(action.layer_tap.val);
 269:../../common/action.c ****                     break;
 270:../../common/action.c ****                 case OP_SET_CLEAR:
 271:../../common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 272:../../common/action.c ****                                     layer_clear();
 273:../../common/action.c ****                     break;
 274:../../common/action.c ****                 default:
 275:../../common/action.c ****                     /* tap key */
 276:../../common/action.c ****                     if (event.pressed) {
 277:../../common/action.c ****                         if (tap_count > 0) {
 278:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 279:../../common/action.c ****                             register_code(action.layer_tap.code);
 280:../../common/action.c ****                         } else {
 281:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 282:../../common/action.c ****                             layer_on(action.layer_tap.val);
 283:../../common/action.c ****                         }
 284:../../common/action.c ****                     } else {
 285:../../common/action.c ****                         if (tap_count > 0) {
 286:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 287:../../common/action.c ****                             unregister_code(action.layer_tap.code);
 288:../../common/action.c ****                         } else {
 289:../../common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 290:../../common/action.c ****                             layer_off(action.layer_tap.val);
 291:../../common/action.c ****                         }
 292:../../common/action.c ****                     }
 293:../../common/action.c ****                     break;
 294:../../common/action.c ****             }
 295:../../common/action.c ****             break;
 296:../../common/action.c ****     #endif
 297:../../common/action.c **** #endif
 298:../../common/action.c ****         /* Extentions */
 299:../../common/action.c **** #ifndef NO_ACTION_MACRO
 300:../../common/action.c ****         case ACT_MACRO:
 301:../../common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 302:../../common/action.c ****             break;
 303:../../common/action.c **** #endif
 304:../../common/action.c **** #ifdef BACKLIGHT_ENABLE
 305:../../common/action.c ****         case ACT_BACKLIGHT:
 306:../../common/action.c ****             if (!event.pressed) {
 307:../../common/action.c ****                 switch (action.backlight.opt) {
 308:../../common/action.c ****                     case BACKLIGHT_INCREASE:
 309:../../common/action.c ****                         backlight_increase();
 310:../../common/action.c ****                         break;
 311:../../common/action.c ****                     case BACKLIGHT_DECREASE:
 312:../../common/action.c ****                         backlight_decrease();
 313:../../common/action.c ****                         break;
 314:../../common/action.c ****                     case BACKLIGHT_TOGGLE:
 315:../../common/action.c ****                         backlight_toggle();
 316:../../common/action.c ****                         break;
 317:../../common/action.c ****                     case BACKLIGHT_STEP:
 318:../../common/action.c ****                         backlight_step();
 319:../../common/action.c ****                         break;
 320:../../common/action.c ****                     case BACKLIGHT_LEVEL:
 321:../../common/action.c ****                         backlight_level(action.backlight.level);
 322:../../common/action.c ****                         break;
 323:../../common/action.c ****                 }
 324:../../common/action.c ****             }
 325:../../common/action.c ****             break;
 326:../../common/action.c **** #endif
 327:../../common/action.c ****         case ACT_COMMAND:
 328:../../common/action.c ****             break;
 329:../../common/action.c **** #ifndef NO_ACTION_FUNCTION
 330:../../common/action.c ****         case ACT_FUNCTION:
 331:../../common/action.c ****             action_function(record, action.func.id, action.func.opt);
 332:../../common/action.c ****             break;
 333:../../common/action.c **** #endif
 334:../../common/action.c ****         default:
 335:../../common/action.c ****             break;
 336:../../common/action.c ****     }
 337:../../common/action.c **** }
 338:../../common/action.c **** 
 339:../../common/action.c **** 
 340:../../common/action.c **** 
 341:../../common/action.c **** 
 342:../../common/action.c **** /*
 343:../../common/action.c ****  * Utilities for actions.
 344:../../common/action.c ****  */
 345:../../common/action.c **** void register_code(uint8_t code)
 346:../../common/action.c **** {
 127               		.loc 2 346 0
 128               		.cfi_startproc
 129               	.LVL4:
 130 0000 CF93      		push r28
 131               	.LCFI4:
 132               		.cfi_def_cfa_offset 3
 133               		.cfi_offset 28, -2
 134               	/* prologue: function */
 135               	/* frame size = 0 */
 136               	/* stack size = 1 */
 137               	.L__stack_usage = 1
 138 0002 C82F      		mov r28,r24
 347:../../common/action.c ****     if (code == KC_NO) {
 139               		.loc 2 347 0
 140 0004 8823      		tst r24
 141 0006 01F4      		brne .+2
 142 0008 00C0      		rjmp .L4
 348:../../common/action.c ****         return;
 349:../../common/action.c ****     }
 350:../../common/action.c **** 
 351:../../common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE    
 352:../../common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 143               		.loc 2 352 0
 144 000a 8238      		cpi r24,lo8(-126)
 145 000c 01F4      		brne .L7
 353:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 354:../../common/action.c ****         // Resync: ignore if caps lock already is on
 355:../../common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 146               		.loc 2 355 0
 147 000e 0E94 0000 		call host_keyboard_leds
 148               	.LVL5:
 149 0012 81FD      		sbrc r24,1
 150 0014 00C0      		rjmp .L4
 356:../../common/action.c **** #endif
 357:../../common/action.c ****         add_key(KC_CAPSLOCK);
 151               		.loc 2 357 0
 152 0016 89E3      		ldi r24,lo8(57)
 153 0018 0E94 0000 		call add_key
 154               	.LVL6:
 358:../../common/action.c ****         send_keyboard_report();
 155               		.loc 2 358 0
 156 001c 0E94 0000 		call send_keyboard_report
 157               	.LVL7:
 359:../../common/action.c ****         del_key(KC_CAPSLOCK);
 158               		.loc 2 359 0
 159 0020 89E3      		ldi r24,lo8(57)
 160 0022 00C0      		rjmp .L37
 161               	.LVL8:
 162               	.L7:
 360:../../common/action.c ****         send_keyboard_report();
 361:../../common/action.c ****     }
 362:../../common/action.c **** 
 363:../../common/action.c ****     else if (KC_LOCKING_NUM == code) {
 163               		.loc 2 363 0
 164 0024 8338      		cpi r24,lo8(-125)
 165 0026 01F4      		brne .L9
 364:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 365:../../common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 166               		.loc 2 365 0
 167 0028 0E94 0000 		call host_keyboard_leds
 168               	.LVL9:
 169 002c 80FD      		sbrc r24,0
 170 002e 00C0      		rjmp .L4
 366:../../common/action.c **** #endif
 367:../../common/action.c ****         add_key(KC_NUMLOCK);
 171               		.loc 2 367 0
 172 0030 83E5      		ldi r24,lo8(83)
 173 0032 0E94 0000 		call add_key
 174               	.LVL10:
 368:../../common/action.c ****         send_keyboard_report();
 175               		.loc 2 368 0
 176 0036 0E94 0000 		call send_keyboard_report
 177               	.LVL11:
 369:../../common/action.c ****         del_key(KC_NUMLOCK);
 178               		.loc 2 369 0
 179 003a 83E5      		ldi r24,lo8(83)
 180               	.L37:
 181 003c 0E94 0000 		call del_key
 182               	.LVL12:
 183               	.L38:
 184               	/* epilogue start */
 370:../../common/action.c ****         send_keyboard_report();
 371:../../common/action.c ****     }
 372:../../common/action.c **** 
 373:../../common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 374:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 375:../../common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 376:../../common/action.c **** #endif
 377:../../common/action.c ****         add_key(KC_SCROLLLOCK);
 378:../../common/action.c ****         send_keyboard_report();
 379:../../common/action.c ****         del_key(KC_SCROLLLOCK);
 380:../../common/action.c ****         send_keyboard_report();
 381:../../common/action.c ****     }
 382:../../common/action.c **** #endif
 383:../../common/action.c **** 
 384:../../common/action.c ****     else if IS_KEY(code) {
 385:../../common/action.c ****         // TODO: should push command_proc out of this block?
 386:../../common/action.c ****         if (command_proc(code)) return;
 387:../../common/action.c **** 
 388:../../common/action.c **** #ifndef NO_ACTION_ONESHOT
 389:../../common/action.c **** /* TODO: remove
 390:../../common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 391:../../common/action.c ****             uint8_t tmp_mods = get_mods();
 392:../../common/action.c ****             add_mods(oneshot_state.mods);
 393:../../common/action.c **** 
 394:../../common/action.c ****             add_key(code);
 395:../../common/action.c ****             send_keyboard_report();
 396:../../common/action.c **** 
 397:../../common/action.c ****             set_mods(tmp_mods);
 398:../../common/action.c ****             send_keyboard_report();
 399:../../common/action.c ****             oneshot_cancel();
 400:../../common/action.c ****         } else 
 401:../../common/action.c **** */
 402:../../common/action.c **** #endif
 403:../../common/action.c ****         {
 404:../../common/action.c ****             add_key(code);
 405:../../common/action.c ****             send_keyboard_report();
 406:../../common/action.c ****         }
 407:../../common/action.c ****     }
 408:../../common/action.c ****     else if IS_MOD(code) {
 409:../../common/action.c ****         add_mods(MOD_BIT(code));
 410:../../common/action.c ****         send_keyboard_report();
 411:../../common/action.c ****     }
 412:../../common/action.c ****     else if IS_SYSTEM(code) {
 413:../../common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 414:../../common/action.c ****     }
 415:../../common/action.c ****     else if IS_CONSUMER(code) {
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 417:../../common/action.c ****     }
 418:../../common/action.c **** }
 185               		.loc 2 418 0
 186 0040 CF91      		pop r28
 370:../../common/action.c ****         send_keyboard_report();
 187               		.loc 2 370 0
 188 0042 0C94 0000 		jmp send_keyboard_report
 189               	.LVL13:
 190               	.L9:
 373:../../common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 191               		.loc 2 373 0
 192 0046 8438      		cpi r24,lo8(-124)
 193 0048 01F4      		brne .L10
 375:../../common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 194               		.loc 2 375 0
 195 004a 0E94 0000 		call host_keyboard_leds
 196               	.LVL14:
 197 004e 82FD      		sbrc r24,2
 198 0050 00C0      		rjmp .L4
 377:../../common/action.c ****         add_key(KC_SCROLLLOCK);
 199               		.loc 2 377 0
 200 0052 87E4      		ldi r24,lo8(71)
 201 0054 0E94 0000 		call add_key
 202               	.LVL15:
 378:../../common/action.c ****         send_keyboard_report();
 203               		.loc 2 378 0
 204 0058 0E94 0000 		call send_keyboard_report
 205               	.LVL16:
 379:../../common/action.c ****         del_key(KC_SCROLLLOCK);
 206               		.loc 2 379 0
 207 005c 87E4      		ldi r24,lo8(71)
 208 005e 00C0      		rjmp .L37
 209               	.LVL17:
 210               	.L10:
 384:../../common/action.c ****     else if IS_KEY(code) {
 211               		.loc 2 384 0
 212 0060 8CEF      		ldi r24,lo8(-4)
 213               	.LVL18:
 214 0062 8C0F      		add r24,r28
 215 0064 813A      		cpi r24,lo8(-95)
 216 0066 00F4      		brsh .L11
 386:../../common/action.c ****         if (command_proc(code)) return;
 217               		.loc 2 386 0
 218 0068 8C2F      		mov r24,r28
 219 006a 0E94 0000 		call command_proc
 220               	.LVL19:
 221 006e 8111      		cpse r24,__zero_reg__
 222 0070 00C0      		rjmp .L4
 404:../../common/action.c ****             add_key(code);
 223               		.loc 2 404 0
 224 0072 8C2F      		mov r24,r28
 225 0074 0E94 0000 		call add_key
 226               	.LVL20:
 227 0078 00C0      		rjmp .L38
 228               	.L11:
 408:../../common/action.c ****     else if IS_MOD(code) {
 229               		.loc 2 408 0
 230 007a 80E2      		ldi r24,lo8(32)
 231 007c 8C0F      		add r24,r28
 232 007e 8830      		cpi r24,lo8(8)
 233 0080 00F4      		brsh .L12
 409:../../common/action.c ****         add_mods(MOD_BIT(code));
 234               		.loc 2 409 0
 235 0082 C770      		andi r28,lo8(7)
 236               	.LVL21:
 237 0084 81E0      		ldi r24,lo8(1)
 238 0086 00C0      		rjmp 2f
 239               		1:
 240 0088 880F      		lsl r24
 241               		2:
 242 008a CA95      		dec r28
 243 008c 02F4      		brpl 1b
 244 008e 0E94 0000 		call add_mods
 245               	.LVL22:
 246 0092 00C0      		rjmp .L38
 247               	.LVL23:
 248               	.L12:
 412:../../common/action.c ****     else if IS_SYSTEM(code) {
 249               		.loc 2 412 0
 250 0094 8BE5      		ldi r24,lo8(91)
 251 0096 8C0F      		add r24,r28
 252 0098 8330      		cpi r24,lo8(3)
 253 009a 00F4      		brsh .L13
 413:../../common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 254               		.loc 2 413 0
 255 009c C53A      		cpi r28,lo8(-91)
 256 009e 01F0      		breq .L16
 413:../../common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 257               		.loc 2 413 0 is_stmt 0 discriminator 1
 258 00a0 C63A      		cpi r28,lo8(-90)
 259 00a2 01F4      		brne .L17
 413:../../common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 260               		.loc 2 413 0
 261 00a4 82E8      		ldi r24,lo8(-126)
 262 00a6 90E0      		ldi r25,0
 263 00a8 00C0      		rjmp .L14
 264               	.L16:
 265 00aa 81E8      		ldi r24,lo8(-127)
 266 00ac 90E0      		ldi r25,0
 267 00ae 00C0      		rjmp .L14
 268               	.L17:
 269 00b0 83E8      		ldi r24,lo8(-125)
 270 00b2 90E0      		ldi r25,0
 271               	.L14:
 272               	/* epilogue start */
 273               		.loc 2 418 0 is_stmt 1 discriminator 4
 274 00b4 CF91      		pop r28
 275               	.LVL24:
 413:../../common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 276               		.loc 2 413 0 discriminator 4
 277 00b6 0C94 0000 		jmp host_system_send
 278               	.LVL25:
 279               	.L13:
 415:../../common/action.c ****     else if IS_CONSUMER(code) {
 280               		.loc 2 415 0
 281 00ba 88E5      		ldi r24,lo8(88)
 282 00bc 8C0F      		add r24,r28
 283 00be 8331      		cpi r24,lo8(19)
 284 00c0 00F0      		brlo .+2
 285 00c2 00C0      		rjmp .L4
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 286               		.loc 2 416 0
 287 00c4 C83A      		cpi r28,lo8(-88)
 288 00c6 01F0      		breq .L18
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 289               		.loc 2 416 0 is_stmt 0 discriminator 1
 290 00c8 C93A      		cpi r28,lo8(-87)
 291 00ca 01F0      		breq .L19
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 292               		.loc 2 416 0 discriminator 3
 293 00cc CA3A      		cpi r28,lo8(-86)
 294 00ce 01F0      		breq .L20
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 295               		.loc 2 416 0 discriminator 5
 296 00d0 CB3A      		cpi r28,lo8(-85)
 297 00d2 01F0      		breq .L21
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 298               		.loc 2 416 0 discriminator 7
 299 00d4 CC3A      		cpi r28,lo8(-84)
 300 00d6 01F0      		breq .L22
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 301               		.loc 2 416 0 discriminator 13
 302 00d8 CD3A      		cpi r28,lo8(-83)
 303 00da 01F0      		breq .L23
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 304               		.loc 2 416 0 discriminator 15
 305 00dc C03B      		cpi r28,lo8(-80)
 306 00de 01F0      		breq .L24
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 307               		.loc 2 416 0 discriminator 17
 308 00e0 CE3A      		cpi r28,lo8(-82)
 309 00e2 01F0      		breq .L25
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 310               		.loc 2 416 0 discriminator 19
 311 00e4 CF3A      		cpi r28,lo8(-81)
 312 00e6 01F0      		breq .L26
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 313               		.loc 2 416 0 discriminator 21
 314 00e8 C13B      		cpi r28,lo8(-79)
 315 00ea 01F0      		breq .L27
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 316               		.loc 2 416 0 discriminator 23
 317 00ec C23B      		cpi r28,lo8(-78)
 318 00ee 01F0      		breq .L28
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 319               		.loc 2 416 0 discriminator 25
 320 00f0 C33B      		cpi r28,lo8(-77)
 321 00f2 01F0      		breq .L29
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 322               		.loc 2 416 0 discriminator 27
 323 00f4 C43B      		cpi r28,lo8(-76)
 324 00f6 01F0      		breq .L30
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 325               		.loc 2 416 0 discriminator 29
 326 00f8 C53B      		cpi r28,lo8(-75)
 327 00fa 01F0      		breq .L31
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 328               		.loc 2 416 0 discriminator 31
 329 00fc C63B      		cpi r28,lo8(-74)
 330 00fe 01F0      		breq .L32
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 331               		.loc 2 416 0 discriminator 33
 332 0100 C73B      		cpi r28,lo8(-73)
 333 0102 01F0      		breq .L33
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 334               		.loc 2 416 0 discriminator 35
 335 0104 C83B      		cpi r28,lo8(-72)
 336 0106 01F0      		breq .L34
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 337               		.loc 2 416 0 discriminator 37
 338 0108 C93B      		cpi r28,lo8(-71)
 339 010a 01F0      		breq .L35
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 340               		.loc 2 416 0 discriminator 39
 341 010c CA3B      		cpi r28,lo8(-70)
 342 010e 01F4      		brne .L36
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 343               		.loc 2 416 0
 344 0110 8AE2      		ldi r24,lo8(42)
 345 0112 92E0      		ldi r25,lo8(2)
 346 0114 00C0      		rjmp .L15
 347               	.L18:
 348 0116 82EE      		ldi r24,lo8(-30)
 349 0118 90E0      		ldi r25,0
 350 011a 00C0      		rjmp .L15
 351               	.L19:
 352 011c 89EE      		ldi r24,lo8(-23)
 353 011e 90E0      		ldi r25,0
 354 0120 00C0      		rjmp .L15
 355               	.L20:
 356 0122 8AEE      		ldi r24,lo8(-22)
 357 0124 90E0      		ldi r25,0
 358 0126 00C0      		rjmp .L15
 359               	.L21:
 360 0128 85EB      		ldi r24,lo8(-75)
 361 012a 90E0      		ldi r25,0
 362 012c 00C0      		rjmp .L15
 363               	.L22:
 364 012e 86EB      		ldi r24,lo8(-74)
 365 0130 90E0      		ldi r25,0
 366 0132 00C0      		rjmp .L15
 367               	.L23:
 368 0134 87EB      		ldi r24,lo8(-73)
 369 0136 90E0      		ldi r25,0
 370 0138 00C0      		rjmp .L15
 371               	.L24:
 372 013a 8CEC      		ldi r24,lo8(-52)
 373 013c 90E0      		ldi r25,0
 374 013e 00C0      		rjmp .L15
 375               	.L25:
 376 0140 8DEC      		ldi r24,lo8(-51)
 377 0142 90E0      		ldi r25,0
 378 0144 00C0      		rjmp .L15
 379               	.L26:
 380 0146 83E8      		ldi r24,lo8(-125)
 381 0148 91E0      		ldi r25,lo8(1)
 382 014a 00C0      		rjmp .L15
 383               	.L27:
 384 014c 8AE8      		ldi r24,lo8(-118)
 385 014e 91E0      		ldi r25,lo8(1)
 386 0150 00C0      		rjmp .L15
 387               	.L28:
 388 0152 82E9      		ldi r24,lo8(-110)
 389 0154 91E0      		ldi r25,lo8(1)
 390 0156 00C0      		rjmp .L15
 391               	.L29:
 392 0158 84E9      		ldi r24,lo8(-108)
 393 015a 91E0      		ldi r25,lo8(1)
 394 015c 00C0      		rjmp .L15
 395               	.L30:
 396 015e 81E2      		ldi r24,lo8(33)
 397 0160 92E0      		ldi r25,lo8(2)
 398 0162 00C0      		rjmp .L15
 399               	.L31:
 400 0164 83E2      		ldi r24,lo8(35)
 401 0166 92E0      		ldi r25,lo8(2)
 402 0168 00C0      		rjmp .L15
 403               	.L32:
 404 016a 84E2      		ldi r24,lo8(36)
 405 016c 92E0      		ldi r25,lo8(2)
 406 016e 00C0      		rjmp .L15
 407               	.L33:
 408 0170 85E2      		ldi r24,lo8(37)
 409 0172 92E0      		ldi r25,lo8(2)
 410 0174 00C0      		rjmp .L15
 411               	.L34:
 412 0176 86E2      		ldi r24,lo8(38)
 413 0178 92E0      		ldi r25,lo8(2)
 414 017a 00C0      		rjmp .L15
 415               	.L35:
 416 017c 87E2      		ldi r24,lo8(39)
 417 017e 92E0      		ldi r25,lo8(2)
 418 0180 00C0      		rjmp .L15
 419               	.L36:
 420 0182 80E0      		ldi r24,0
 421 0184 90E0      		ldi r25,0
 422               	.L15:
 423               	/* epilogue start */
 424               		.loc 2 418 0 is_stmt 1 discriminator 43
 425 0186 CF91      		pop r28
 426               	.LVL26:
 416:../../common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 427               		.loc 2 416 0 discriminator 43
 428 0188 0C94 0000 		jmp host_consumer_send
 429               	.LVL27:
 430               	.L4:
 431               	/* epilogue start */
 432               		.loc 2 418 0
 433 018c CF91      		pop r28
 434               	.LVL28:
 435 018e 0895      		ret
 436               		.cfi_endproc
 437               	.LFE106:
 439               		.section	.text.unregister_code,"ax",@progbits
 440               	.global	unregister_code
 442               	unregister_code:
 443               	.LFB107:
 419:../../common/action.c **** 
 420:../../common/action.c **** void unregister_code(uint8_t code)
 421:../../common/action.c **** {
 444               		.loc 2 421 0
 445               		.cfi_startproc
 446               	.LVL29:
 447               	/* prologue: function */
 448               	/* frame size = 0 */
 449               	/* stack size = 0 */
 450               	.L__stack_usage = 0
 422:../../common/action.c ****     if (code == KC_NO) {
 451               		.loc 2 422 0
 452 0000 8823      		tst r24
 453 0002 01F4      		brne .+2
 454 0004 00C0      		rjmp .L40
 423:../../common/action.c ****         return;
 424:../../common/action.c ****     }
 425:../../common/action.c **** 
 426:../../common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 427:../../common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 455               		.loc 2 427 0
 456 0006 8238      		cpi r24,lo8(-126)
 457 0008 01F4      		brne .L43
 428:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 429:../../common/action.c ****         // Resync: ignore if caps lock already is off
 430:../../common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 458               		.loc 2 430 0
 459 000a 0E94 0000 		call host_keyboard_leds
 460               	.LVL30:
 461 000e 81FF      		sbrs r24,1
 462 0010 00C0      		rjmp .L40
 431:../../common/action.c **** #endif
 432:../../common/action.c ****         add_key(KC_CAPSLOCK);
 463               		.loc 2 432 0
 464 0012 89E3      		ldi r24,lo8(57)
 465 0014 0E94 0000 		call add_key
 466               	.LVL31:
 433:../../common/action.c ****         send_keyboard_report();
 467               		.loc 2 433 0
 468 0018 0E94 0000 		call send_keyboard_report
 469               	.LVL32:
 434:../../common/action.c ****         del_key(KC_CAPSLOCK);
 470               		.loc 2 434 0
 471 001c 89E3      		ldi r24,lo8(57)
 472 001e 00C0      		rjmp .L59
 473               	.LVL33:
 474               	.L43:
 435:../../common/action.c ****         send_keyboard_report();
 436:../../common/action.c ****     }
 437:../../common/action.c **** 
 438:../../common/action.c ****     else if (KC_LOCKING_NUM == code) {
 475               		.loc 2 438 0
 476 0020 8338      		cpi r24,lo8(-125)
 477 0022 01F4      		brne .L45
 439:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 440:../../common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 478               		.loc 2 440 0
 479 0024 0E94 0000 		call host_keyboard_leds
 480               	.LVL34:
 481 0028 80FF      		sbrs r24,0
 482 002a 00C0      		rjmp .L40
 441:../../common/action.c **** #endif
 442:../../common/action.c ****         add_key(KC_NUMLOCK);
 483               		.loc 2 442 0
 484 002c 83E5      		ldi r24,lo8(83)
 485 002e 0E94 0000 		call add_key
 486               	.LVL35:
 443:../../common/action.c ****         send_keyboard_report();
 487               		.loc 2 443 0
 488 0032 0E94 0000 		call send_keyboard_report
 489               	.LVL36:
 444:../../common/action.c ****         del_key(KC_NUMLOCK);
 490               		.loc 2 444 0
 491 0036 83E5      		ldi r24,lo8(83)
 492               	.L59:
 493 0038 0E94 0000 		call del_key
 494               	.LVL37:
 495               	.L60:
 445:../../common/action.c ****         send_keyboard_report();
 496               		.loc 2 445 0
 497 003c 0C94 0000 		jmp send_keyboard_report
 498               	.LVL38:
 499               	.L45:
 446:../../common/action.c ****     }
 447:../../common/action.c **** 
 448:../../common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 500               		.loc 2 448 0
 501 0040 8438      		cpi r24,lo8(-124)
 502 0042 01F4      		brne .L46
 449:../../common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 450:../../common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 503               		.loc 2 450 0
 504 0044 0E94 0000 		call host_keyboard_leds
 505               	.LVL39:
 506 0048 82FF      		sbrs r24,2
 507 004a 00C0      		rjmp .L40
 451:../../common/action.c **** #endif
 452:../../common/action.c ****         add_key(KC_SCROLLLOCK);
 508               		.loc 2 452 0
 509 004c 87E4      		ldi r24,lo8(71)
 510 004e 0E94 0000 		call add_key
 511               	.LVL40:
 453:../../common/action.c ****         send_keyboard_report();
 512               		.loc 2 453 0
 513 0052 0E94 0000 		call send_keyboard_report
 514               	.LVL41:
 454:../../common/action.c ****         del_key(KC_SCROLLLOCK);
 515               		.loc 2 454 0
 516 0056 87E4      		ldi r24,lo8(71)
 517 0058 00C0      		rjmp .L59
 518               	.LVL42:
 519               	.L46:
 455:../../common/action.c ****         send_keyboard_report();
 456:../../common/action.c ****     }
 457:../../common/action.c **** #endif
 458:../../common/action.c **** 
 459:../../common/action.c ****     else if IS_KEY(code) {
 520               		.loc 2 459 0
 521 005a 9CEF      		ldi r25,lo8(-4)
 522 005c 980F      		add r25,r24
 523 005e 913A      		cpi r25,lo8(-95)
 524 0060 00F0      		brlo .L59
 460:../../common/action.c ****         del_key(code);
 461:../../common/action.c ****         send_keyboard_report();
 462:../../common/action.c ****     }
 463:../../common/action.c ****     else if IS_MOD(code) {
 525               		.loc 2 463 0
 526 0062 90E2      		ldi r25,lo8(32)
 527 0064 980F      		add r25,r24
 528 0066 9830      		cpi r25,lo8(8)
 529 0068 00F4      		brsh .L48
 464:../../common/action.c ****         del_mods(MOD_BIT(code));
 530               		.loc 2 464 0
 531 006a 8770      		andi r24,lo8(7)
 532               	.LVL43:
 533 006c 91E0      		ldi r25,lo8(1)
 534 006e 00C0      		rjmp 2f
 535               		1:
 536 0070 990F      		lsl r25
 537               		2:
 538 0072 8A95      		dec r24
 539 0074 02F4      		brpl 1b
 540 0076 892F      		mov r24,r25
 541 0078 0E94 0000 		call del_mods
 542               	.LVL44:
 543 007c 00C0      		rjmp .L60
 544               	.LVL45:
 545               	.L48:
 465:../../common/action.c ****         send_keyboard_report();
 466:../../common/action.c ****     }
 467:../../common/action.c ****     else if IS_SYSTEM(code) {
 546               		.loc 2 467 0
 547 007e 9BE5      		ldi r25,lo8(91)
 548 0080 980F      		add r25,r24
 549 0082 9330      		cpi r25,lo8(3)
 550 0084 00F4      		brsh .L49
 468:../../common/action.c ****         host_system_send(0);
 551               		.loc 2 468 0
 552 0086 80E0      		ldi r24,0
 553 0088 90E0      		ldi r25,0
 554               	.LVL46:
 555 008a 0C94 0000 		jmp host_system_send
 556               	.LVL47:
 557               	.L49:
 469:../../common/action.c ****     }
 470:../../common/action.c ****     else if IS_CONSUMER(code) {
 558               		.loc 2 470 0
 559 008e 885A      		subi r24,lo8(-(88))
 560               	.LVL48:
 561 0090 8331      		cpi r24,lo8(19)
 562 0092 00F4      		brsh .L40
 471:../../common/action.c ****         host_consumer_send(0);
 563               		.loc 2 471 0
 564 0094 80E0      		ldi r24,0
 565 0096 90E0      		ldi r25,0
 566               	.LVL49:
 567 0098 0C94 0000 		jmp host_consumer_send
 568               	.LVL50:
 569               	.L40:
 570 009c 0895      		ret
 571               		.cfi_endproc
 572               	.LFE107:
 574               		.section	.text.register_mods,"ax",@progbits
 575               	.global	register_mods
 577               	register_mods:
 578               	.LFB108:
 472:../../common/action.c ****     }
 473:../../common/action.c **** }
 474:../../common/action.c **** 
 475:../../common/action.c **** void register_mods(uint8_t mods)
 476:../../common/action.c **** {
 579               		.loc 2 476 0
 580               		.cfi_startproc
 581               	.LVL51:
 582               	/* prologue: function */
 583               	/* frame size = 0 */
 584               	/* stack size = 0 */
 585               	.L__stack_usage = 0
 477:../../common/action.c ****     if (mods) {
 586               		.loc 2 477 0
 587 0000 8823      		tst r24
 588 0002 01F0      		breq .L61
 478:../../common/action.c ****         add_mods(mods);
 589               		.loc 2 478 0
 590 0004 0E94 0000 		call add_mods
 591               	.LVL52:
 479:../../common/action.c ****         send_keyboard_report();
 592               		.loc 2 479 0
 593 0008 0C94 0000 		jmp send_keyboard_report
 594               	.LVL53:
 595               	.L61:
 596 000c 0895      		ret
 597               		.cfi_endproc
 598               	.LFE108:
 600               		.section	.text.unregister_mods,"ax",@progbits
 601               	.global	unregister_mods
 603               	unregister_mods:
 604               	.LFB109:
 480:../../common/action.c ****     }
 481:../../common/action.c **** }
 482:../../common/action.c **** 
 483:../../common/action.c **** void unregister_mods(uint8_t mods)
 484:../../common/action.c **** {
 605               		.loc 2 484 0
 606               		.cfi_startproc
 607               	.LVL54:
 608               	/* prologue: function */
 609               	/* frame size = 0 */
 610               	/* stack size = 0 */
 611               	.L__stack_usage = 0
 485:../../common/action.c ****     if (mods) {
 612               		.loc 2 485 0
 613 0000 8823      		tst r24
 614 0002 01F0      		breq .L63
 486:../../common/action.c ****         del_mods(mods);
 615               		.loc 2 486 0
 616 0004 0E94 0000 		call del_mods
 617               	.LVL55:
 487:../../common/action.c ****         send_keyboard_report();
 618               		.loc 2 487 0
 619 0008 0C94 0000 		jmp send_keyboard_report
 620               	.LVL56:
 621               	.L63:
 622 000c 0895      		ret
 623               		.cfi_endproc
 624               	.LFE109:
 626               		.section	.text.process_action,"ax",@progbits
 627               	.global	process_action
 629               	process_action:
 630               	.LFB105:
  57:../../common/action.c **** {
 631               		.loc 2 57 0
 632               		.cfi_startproc
 633               	.LVL57:
 634 0000 CF92      		push r12
 635               	.LCFI5:
 636               		.cfi_def_cfa_offset 3
 637               		.cfi_offset 12, -2
 638 0002 DF92      		push r13
 639               	.LCFI6:
 640               		.cfi_def_cfa_offset 4
 641               		.cfi_offset 13, -3
 642 0004 EF92      		push r14
 643               	.LCFI7:
 644               		.cfi_def_cfa_offset 5
 645               		.cfi_offset 14, -4
 646 0006 FF92      		push r15
 647               	.LCFI8:
 648               		.cfi_def_cfa_offset 6
 649               		.cfi_offset 15, -5
 650 0008 0F93      		push r16
 651               	.LCFI9:
 652               		.cfi_def_cfa_offset 7
 653               		.cfi_offset 16, -6
 654 000a 1F93      		push r17
 655               	.LCFI10:
 656               		.cfi_def_cfa_offset 8
 657               		.cfi_offset 17, -7
 658 000c CF93      		push r28
 659               	.LCFI11:
 660               		.cfi_def_cfa_offset 9
 661               		.cfi_offset 28, -8
 662 000e DF93      		push r29
 663               	.LCFI12:
 664               		.cfi_def_cfa_offset 10
 665               		.cfi_offset 29, -9
 666 0010 CDB7      		in r28,__SP_L__
 667 0012 DEB7      		in r29,__SP_H__
 668               	.LCFI13:
 669               		.cfi_def_cfa_register 28
 670 0014 2897      		sbiw r28,8
 671               	.LCFI14:
 672               		.cfi_def_cfa_offset 18
 673 0016 0FB6      		in __tmp_reg__,__SREG__
 674 0018 F894      		cli
 675 001a DEBF      		out __SP_H__,r29
 676 001c 0FBE      		out __SREG__,__tmp_reg__
 677 001e CDBF      		out __SP_L__,r28
 678               	/* prologue: function */
 679               	/* frame size = 8 */
 680               	/* stack size = 16 */
 681               	.L__stack_usage = 16
 682 0020 8C01      		movw r16,r24
  58:../../common/action.c ****     keyevent_t event = record->event;
 683               		.loc 2 58 0
 684 0022 85E0      		ldi r24,lo8(5)
 685               	.LVL58:
 686 0024 F801      		movw r30,r16
 687 0026 DE01      		movw r26,r28
 688 0028 1196      		adiw r26,1
 689               		0:
 690 002a 0190      		ld r0,Z+
 691 002c 0D92      		st X+,r0
 692 002e 8A95      		dec r24
 693 0030 01F4      		brne 0b
 694 0032 F801      		movw r30,r16
 695 0034 4081      		ld r20,Z
 696               	.LVL59:
 697 0036 3181      		ldd r19,Z+1
 698               	.LVL60:
 699 0038 F280      		ldd r15,Z+2
 700               	.LVL61:
  60:../../common/action.c ****     uint8_t tap_count = record->tap.count;
 701               		.loc 2 60 0
 702 003a 2581      		ldd r18,Z+5
 703 003c 2295      		swap r18
 704 003e 2F70      		andi r18,lo8(15)
 705               	.LVL62:
 706               	.LBB8:
 707               	.LBB9:
  49:../../common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 708               		.loc 1 49 0
 709 0040 8381      		ldd r24,Z+3
 710 0042 9481      		ldd r25,Z+4
 711 0044 892B      		or r24,r25
 712 0046 01F0      		breq .L132
 713 0048 3F3F      		cpi r19,lo8(-1)
 714 004a 01F4      		brne .L133
 715 004c 81E0      		ldi r24,lo8(1)
 716 004e 4F3F      		cpi r20,lo8(-1)
 717 0050 01F4      		brne .L133
 718 0052 00C0      		rjmp .L66
 719               	.LVL63:
 720               	.L132:
 721 0054 81E0      		ldi r24,lo8(1)
 722               	.LVL64:
 723 0056 00C0      		rjmp .L66
 724               	.L133:
 725 0058 80E0      		ldi r24,0
 726               	.L66:
 727               	.LBE9:
 728               	.LBE8:
  63:../../common/action.c ****     if (IS_NOEVENT(event)) { return; }
 729               		.loc 2 63 0
 730 005a 80FD      		sbrc r24,0
 731 005c 00C0      		rjmp .L65
  65:../../common/action.c ****     action_t action = layer_switch_get_action(event.key);
 732               		.loc 2 65 0
 733 005e 4983      		std Y+1,r20
 734 0060 3A83      		std Y+2,r19
 735 0062 8981      		ldd r24,Y+1
 736 0064 9A81      		ldd r25,Y+2
 737 0066 2F83      		std Y+7,r18
 738               	.LVL65:
 739 0068 0E94 0000 		call layer_switch_get_action
 740               	.LVL66:
  68:../../common/action.c ****     dprint(" layer_state: "); layer_debug();
 741               		.loc 2 68 0
 742 006c 9E83      		std Y+6,r25
 743 006e 8887      		std Y+8,r24
 744 0070 0E94 0000 		call layer_debug
 745               	.LVL67:
  69:../../common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 746               		.loc 2 69 0
 747 0074 0E94 0000 		call default_layer_debug
 748               	.LVL68:
  73:../../common/action.c ****     switch (action.kind.id) {
 749               		.loc 2 73 0
 750 0078 4E81      		ldd r20,Y+6
 751 007a E42F      		mov r30,r20
 752               	.LVL69:
 753 007c E295      		swap r30
 754 007e EF70      		andi r30,lo8(15)
 755 0080 F0E0      		ldi r31,0
 756 0082 E050      		subi r30,lo8(-(gs(.L71)))
 757 0084 F040      		sbci r31,hi8(-(gs(.L71)))
 758 0086 2F81      		ldd r18,Y+7
 759 0088 6885      		ldd r22,Y+8
 760 008a 0C94 0000 		jmp __tablejump2__
 761               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 762               		.p2align	1
 763               	.L71:
 764 0000 0000      		.word gs(.L70)
 765 0002 0000      		.word gs(.L70)
 766 0004 0000      		.word gs(.L72)
 767 0006 0000      		.word gs(.L72)
 768 0008 0000      		.word gs(.L73)
 769 000a 0000      		.word gs(.L74)
 770 000c 0000      		.word gs(.L65)
 771 000e 0000      		.word gs(.L65)
 772 0010 0000      		.word gs(.L75)
 773 0012 0000      		.word gs(.L65)
 774 0014 0000      		.word gs(.L76)
 775 0016 0000      		.word gs(.L76)
 776 0018 0000      		.word gs(.L77)
 777 001a 0000      		.word gs(.L65)
 778 001c 0000      		.word gs(.L65)
 779 001e 0000      		.word gs(.L78)
 780               		.section	.text.process_action
 781               	.L70:
 782               	.LBB10:
  78:../../common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 783               		.loc 2 78 0
 784 008e 842F      		mov r24,r20
 785 0090 807F      		andi r24,lo8(-16)
 786 0092 142F      		mov r17,r20
 787 0094 1F70      		andi r17,lo8(15)
 788 0096 8823      		tst r24
 789 0098 01F0      		breq .L80
  78:../../common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 790               		.loc 2 78 0 is_stmt 0 discriminator 2
 791 009a 1295      		swap r17
 792 009c 107F      		andi r17,lo8(-16)
 793               	.L80:
 794               	.LVL70:
  80:../../common/action.c ****                 if (event.pressed) {
 795               		.loc 2 80 0 is_stmt 1 discriminator 3
 796 009e FF20      		tst r15
 797 00a0 01F0      		breq .L81
  81:../../common/action.c ****                     if (mods) {
 798               		.loc 2 81 0
 799 00a2 1123      		tst r17
 800 00a4 01F4      		brne .+2
 801 00a6 00C0      		rjmp .L163
  82:../../common/action.c ****                         add_weak_mods(mods);
 802               		.loc 2 82 0
 803 00a8 812F      		mov r24,r17
 804 00aa 6887      		std Y+8,r22
 805 00ac 0E94 0000 		call add_weak_mods
 806               	.LVL71:
  83:../../common/action.c ****                         send_keyboard_report();
 807               		.loc 2 83 0
 808 00b0 0E94 0000 		call send_keyboard_report
 809               	.LVL72:
 810 00b4 6885      		ldd r22,Y+8
 811 00b6 00C0      		rjmp .L163
 812               	.L81:
 813               	.LVL73:
  87:../../common/action.c ****                     unregister_code(action.key.code);
 814               		.loc 2 87 0
 815 00b8 862F      		mov r24,r22
 816 00ba 0E94 0000 		call unregister_code
 817               	.LVL74:
  88:../../common/action.c ****                     if (mods) {
 818               		.loc 2 88 0
 819 00be 1123      		tst r17
 820 00c0 01F4      		brne .+2
 821 00c2 00C0      		rjmp .L65
  89:../../common/action.c ****                         del_weak_mods(mods);
 822               		.loc 2 89 0
 823 00c4 812F      		mov r24,r17
 824 00c6 0E94 0000 		call del_weak_mods
 825               	.LVL75:
 826               	/* epilogue start */
 827               	.LBE10:
 337:../../common/action.c **** }
 828               		.loc 2 337 0
 829 00ca 2896      		adiw r28,8
 830 00cc 0FB6      		in __tmp_reg__,__SREG__
 831 00ce F894      		cli
 832 00d0 DEBF      		out __SP_H__,r29
 833 00d2 0FBE      		out __SREG__,__tmp_reg__
 834 00d4 CDBF      		out __SP_L__,r28
 835 00d6 DF91      		pop r29
 836 00d8 CF91      		pop r28
 837 00da 1F91      		pop r17
 838               	.LVL76:
 839 00dc 0F91      		pop r16
 840               	.LVL77:
 841 00de FF90      		pop r15
 842               	.LVL78:
 843 00e0 EF90      		pop r14
 844 00e2 DF90      		pop r13
 845 00e4 CF90      		pop r12
 846               	.LBB11:
  90:../../common/action.c ****                         send_keyboard_report();
 847               		.loc 2 90 0
 848 00e6 0C94 0000 		jmp send_keyboard_report
 849               	.LVL79:
 850               	.L72:
 851               	.LBE11:
 852               	.LBB12:
  99:../../common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 853               		.loc 2 99 0
 854 00ea 342F      		mov r19,r20
 855 00ec 307F      		andi r19,lo8(-16)
 856 00ee 842F      		mov r24,r20
 857 00f0 8F70      		andi r24,lo8(15)
 858 00f2 3032      		cpi r19,lo8(32)
 859 00f4 01F0      		breq .L85
  99:../../common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 860               		.loc 2 99 0 is_stmt 0 discriminator 2
 861 00f6 8295      		swap r24
 862 00f8 807F      		andi r24,lo8(-16)
 863               	.L85:
 864               	.LVL80:
 101:../../common/action.c ****                 switch (action.layer_tap.code) {
 865               		.loc 2 101 0 is_stmt 1 discriminator 3
 866 00fa 6623      		tst r22
 867               	.LVL81:
 868 00fc 01F0      		breq .L87
 869 00fe 6130      		cpi r22,lo8(1)
 870 0100 01F0      		breq .L88
 871 0102 00C0      		rjmp .L171
 872               	.L87:
 105:../../common/action.c ****                         if (event.pressed) {
 873               		.loc 2 105 0
 874 0104 FF20      		tst r15
 875 0106 01F0      		breq .L89
 106:../../common/action.c ****                             if (tap_count == 0) {
 876               		.loc 2 106 0
 877 0108 2223      		tst r18
 878 010a 01F0      		breq .L162
 109:../../common/action.c ****                             else if (tap_count == 1) {
 879               		.loc 2 109 0
 880 010c 2130      		cpi r18,lo8(1)
 881 010e 01F4      		brne .L162
 882               	/* epilogue start */
 883               	.LBE12:
 337:../../common/action.c **** }
 884               		.loc 2 337 0
 885 0110 2896      		adiw r28,8
 886 0112 0FB6      		in __tmp_reg__,__SREG__
 887 0114 F894      		cli
 888 0116 DEBF      		out __SP_H__,r29
 889 0118 0FBE      		out __SREG__,__tmp_reg__
 890 011a CDBF      		out __SP_L__,r28
 891 011c DF91      		pop r29
 892 011e CF91      		pop r28
 893 0120 1F91      		pop r17
 894 0122 0F91      		pop r16
 895               	.LVL82:
 896 0124 FF90      		pop r15
 897               	.LVL83:
 898 0126 EF90      		pop r14
 899 0128 DF90      		pop r13
 900 012a CF90      		pop r12
 901               	.LBB13:
 111:../../common/action.c ****                                 set_oneshot_mods(mods);
 902               		.loc 2 111 0
 903 012c 0C94 0000 		jmp set_oneshot_mods
 904               	.LVL84:
 905               	.L89:
 117:../../common/action.c ****                             if (tap_count == 0) {
 906               		.loc 2 117 0
 907 0130 2223      		tst r18
 908 0132 01F0      		breq .L160
 121:../../common/action.c ****                             else if (tap_count == 1) {
 909               		.loc 2 121 0
 910 0134 2130      		cpi r18,lo8(1)
 911 0136 01F4      		brne .+2
 912 0138 00C0      		rjmp .L65
 913               	.L160:
 125:../../common/action.c ****                                 clear_oneshot_mods();
 914               		.loc 2 125 0
 915 013a 8E83      		std Y+6,r24
 916 013c 0E94 0000 		call clear_oneshot_mods
 917               	.LVL85:
 126:../../common/action.c ****                                 unregister_mods(mods);
 918               		.loc 2 126 0
 919 0140 8E81      		ldd r24,Y+6
 920 0142 00C0      		rjmp .L165
 921               	.LVL86:
 922               	.L88:
 132:../../common/action.c ****                         if (event.pressed) {
 923               		.loc 2 132 0
 924 0144 FF20      		tst r15
 925 0146 01F0      		breq .L94
 133:../../common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 926               		.loc 2 133 0
 927 0148 2630      		cpi r18,lo8(6)
 928 014a 00F0      		brlo .+2
 929 014c 00C0      		rjmp .L65
 930 014e 00C0      		rjmp .L162
 931               	.L94:
 137:../../common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 932               		.loc 2 137 0
 933 0150 2530      		cpi r18,lo8(5)
 934 0152 00F0      		brlo .+2
 935 0154 00C0      		rjmp .L65
 936 0156 00C0      		rjmp .L165
 937               	.L171:
 143:../../common/action.c ****                         if (event.pressed) {
 938               		.loc 2 143 0
 939 0158 FF20      		tst r15
 940 015a 01F0      		breq .L95
 144:../../common/action.c ****                             if (tap_count > 0) {
 941               		.loc 2 144 0
 942 015c 2223      		tst r18
 943 015e 01F0      		breq .L162
 145:../../common/action.c ****                                 if (record->tap.interrupted) {
 944               		.loc 2 145 0
 945 0160 F801      		movw r30,r16
 946 0162 9581      		ldd r25,Z+5
 947 0164 90FF      		sbrs r25,0
 948 0166 00C0      		rjmp .L163
 148:../../common/action.c ****                                     record->tap.count = 0;
 949               		.loc 2 148 0
 950 0168 9F70      		andi r25,lo8(15)
 951 016a 9583      		std Z+5,r25
 952               	.LVL87:
 953               	.L162:
 954               	/* epilogue start */
 955               	.LBE13:
 337:../../common/action.c **** }
 956               		.loc 2 337 0
 957 016c 2896      		adiw r28,8
 958 016e 0FB6      		in __tmp_reg__,__SREG__
 959 0170 F894      		cli
 960 0172 DEBF      		out __SP_H__,r29
 961 0174 0FBE      		out __SREG__,__tmp_reg__
 962 0176 CDBF      		out __SP_L__,r28
 963 0178 DF91      		pop r29
 964 017a CF91      		pop r28
 965 017c 1F91      		pop r17
 966 017e 0F91      		pop r16
 967               	.LVL88:
 968 0180 FF90      		pop r15
 969               	.LVL89:
 970 0182 EF90      		pop r14
 971 0184 DF90      		pop r13
 972 0186 CF90      		pop r12
 973               	.LBB14:
 149:../../common/action.c ****                                     register_mods(mods);
 974               		.loc 2 149 0
 975 0188 0C94 0000 		jmp register_mods
 976               	.LVL90:
 977               	.L95:
 159:../../common/action.c ****                             if (tap_count > 0) {
 978               		.loc 2 159 0
 979 018c 2223      		tst r18
 980 018e 01F4      		brne .+2
 981 0190 00C0      		rjmp .L165
 982 0192 00C0      		rjmp .L164
 983               	.LVL91:
 984               	.L73:
 985               	.LBE14:
 175:../../common/action.c ****             switch (action.usage.page) {
 986               		.loc 2 175 0
 987 0194 242F      		mov r18,r20
 988 0196 2695      		lsr r18
 989 0198 2695      		lsr r18
 990 019a 2370      		andi r18,lo8(3)
 991 019c 30E0      		ldi r19,0
 992 019e 2115      		cp r18,__zero_reg__
 993 01a0 3105      		cpc r19,__zero_reg__
 994 01a2 01F0      		breq .L99
 995 01a4 2130      		cpi r18,1
 996 01a6 3105      		cpc r19,__zero_reg__
 997 01a8 01F0      		breq .L100
 998 01aa 00C0      		rjmp .L65
 999               	.L99:
 177:../../common/action.c ****                     if (event.pressed) {
 1000               		.loc 2 177 0
 1001 01ac FF20      		tst r15
 1002 01ae 01F0      		breq .L101
 1003               	.LVL92:
 178:../../common/action.c ****                         host_system_send(action.usage.code);
 1004               		.loc 2 178 0
 1005 01b0 862F      		mov r24,r22
 1006 01b2 942F      		mov r25,r20
 1007 01b4 9370      		andi r25,lo8(3)
 1008 01b6 00C0      		rjmp .L166
 1009               	.LVL93:
 1010               	.L101:
 180:../../common/action.c ****                         host_system_send(0);
 1011               		.loc 2 180 0
 1012 01b8 80E0      		ldi r24,0
 1013 01ba 90E0      		ldi r25,0
 1014               	.LVL94:
 1015               	.L166:
 1016               	/* epilogue start */
 337:../../common/action.c **** }
 1017               		.loc 2 337 0
 1018 01bc 2896      		adiw r28,8
 1019 01be 0FB6      		in __tmp_reg__,__SREG__
 1020 01c0 F894      		cli
 1021 01c2 DEBF      		out __SP_H__,r29
 1022 01c4 0FBE      		out __SREG__,__tmp_reg__
 1023 01c6 CDBF      		out __SP_L__,r28
 1024 01c8 DF91      		pop r29
 1025 01ca CF91      		pop r28
 1026 01cc 1F91      		pop r17
 1027 01ce 0F91      		pop r16
 1028               	.LVL95:
 1029 01d0 FF90      		pop r15
 1030               	.LVL96:
 1031 01d2 EF90      		pop r14
 1032 01d4 DF90      		pop r13
 1033 01d6 CF90      		pop r12
 180:../../common/action.c ****                         host_system_send(0);
 1034               		.loc 2 180 0
 1035 01d8 0C94 0000 		jmp host_system_send
 1036               	.LVL97:
 1037               	.L100:
 184:../../common/action.c ****                     if (event.pressed) {
 1038               		.loc 2 184 0
 1039 01dc FF20      		tst r15
 1040 01de 01F0      		breq .L102
 1041               	.LVL98:
 185:../../common/action.c ****                         host_consumer_send(action.usage.code);
 1042               		.loc 2 185 0
 1043 01e0 862F      		mov r24,r22
 1044 01e2 942F      		mov r25,r20
 1045 01e4 9370      		andi r25,lo8(3)
 1046 01e6 00C0      		rjmp .L167
 1047               	.LVL99:
 1048               	.L102:
 187:../../common/action.c ****                         host_consumer_send(0);
 1049               		.loc 2 187 0
 1050 01e8 80E0      		ldi r24,0
 1051 01ea 90E0      		ldi r25,0
 1052               	.LVL100:
 1053               	.L167:
 1054               	/* epilogue start */
 337:../../common/action.c **** }
 1055               		.loc 2 337 0
 1056 01ec 2896      		adiw r28,8
 1057 01ee 0FB6      		in __tmp_reg__,__SREG__
 1058 01f0 F894      		cli
 1059 01f2 DEBF      		out __SP_H__,r29
 1060 01f4 0FBE      		out __SREG__,__tmp_reg__
 1061 01f6 CDBF      		out __SP_L__,r28
 1062 01f8 DF91      		pop r29
 1063 01fa CF91      		pop r28
 1064 01fc 1F91      		pop r17
 1065 01fe 0F91      		pop r16
 1066               	.LVL101:
 1067 0200 FF90      		pop r15
 1068               	.LVL102:
 1069 0202 EF90      		pop r14
 1070 0204 DF90      		pop r13
 1071 0206 CF90      		pop r12
 187:../../common/action.c ****                         host_consumer_send(0);
 1072               		.loc 2 187 0
 1073 0208 0C94 0000 		jmp host_consumer_send
 1074               	.LVL103:
 1075               	.L74:
 197:../../common/action.c ****                 mousekey_on(action.key.code);
 1076               		.loc 2 197 0
 1077 020c 862F      		mov r24,r22
 196:../../common/action.c ****             if (event.pressed) {
 1078               		.loc 2 196 0
 1079 020e FF20      		tst r15
 1080 0210 01F0      		breq .L103
 197:../../common/action.c ****                 mousekey_on(action.key.code);
 1081               		.loc 2 197 0
 1082 0212 0E94 0000 		call mousekey_on
 1083               	.LVL104:
 1084 0216 00C0      		rjmp .L169
 1085               	.LVL105:
 1086               	.L103:
 200:../../common/action.c ****                 mousekey_off(action.key.code);
 1087               		.loc 2 200 0
 1088 0218 0E94 0000 		call mousekey_off
 1089               	.LVL106:
 1090               	.L169:
 1091               	/* epilogue start */
 337:../../common/action.c **** }
 1092               		.loc 2 337 0
 1093 021c 2896      		adiw r28,8
 1094 021e 0FB6      		in __tmp_reg__,__SREG__
 1095 0220 F894      		cli
 1096 0222 DEBF      		out __SP_H__,r29
 1097 0224 0FBE      		out __SREG__,__tmp_reg__
 1098 0226 CDBF      		out __SP_L__,r28
 1099 0228 DF91      		pop r29
 1100 022a CF91      		pop r28
 1101 022c 1F91      		pop r17
 1102 022e 0F91      		pop r16
 1103               	.LVL107:
 1104 0230 FF90      		pop r15
 1105               	.LVL108:
 1106 0232 EF90      		pop r14
 1107 0234 DF90      		pop r13
 1108 0236 CF90      		pop r12
 201:../../common/action.c ****                 mousekey_send();
 1109               		.loc 2 201 0
 1110 0238 0C94 0000 		jmp mousekey_send
 1111               	.LVL109:
 1112               	.L75:
 207:../../common/action.c ****             if (action.layer_bitop.on == 0) {
 1113               		.loc 2 207 0
 1114 023c 842F      		mov r24,r20
 1115 023e 8370      		andi r24,lo8(3)
 1116 0240 01F0      		breq .+2
 1117 0242 00C0      		rjmp .L104
 209:../../common/action.c ****                 if (!event.pressed) {
 1118               		.loc 2 209 0
 1119 0244 F110      		cpse r15,__zero_reg__
 1120 0246 00C0      		rjmp .L65
 1121               	.LVL110:
 1122               	.LBB15:
 210:../../common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1123               		.loc 2 210 0
 1124 0248 262F      		mov r18,r22
 1125 024a 2295      		swap r18
 1126 024c 2695      		lsr r18
 1127 024e 2770      		andi r18,lo8(7)
 1128 0250 220F      		lsl r18
 1129 0252 220F      		lsl r18
 211:../../common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1130               		.loc 2 211 0
 1131 0254 862F      		mov r24,r22
 1132 0256 8F70      		andi r24,lo8(15)
 1133 0258 C82E      		mov r12,r24
 1134 025a D12C      		mov r13,__zero_reg__
 1135 025c E12C      		mov r14,__zero_reg__
 1136 025e F12C      		mov r15,__zero_reg__
 1137 0260 022E      		mov r0,r18
 1138 0262 00C0      		rjmp 2f
 1139               		1:
 1140 0264 CC0C      		lsl r12
 1141 0266 DD1C      		rol r13
 1142 0268 EE1C      		rol r14
 1143 026a FF1C      		rol r15
 1144               		2:
 1145 026c 0A94      		dec r0
 1146 026e 02F4      		brpl 1b
 1147               	.LVL111:
 212:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1148               		.loc 2 212 0
 1149 0270 64FF      		sbrs r22,4
 1150 0272 00C0      		rjmp .L134
 212:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1151               		.loc 2 212 0 is_stmt 0 discriminator 1
 1152 0274 6FE0      		ldi r22,lo8(15)
 1153 0276 70E0      		ldi r23,0
 1154 0278 80E0      		ldi r24,0
 1155 027a 90E0      		ldi r25,0
 1156               	.LVL112:
 1157 027c 00C0      		rjmp 2f
 1158               		1:
 1159 027e 660F      		lsl r22
 1160 0280 771F      		rol r23
 1161 0282 881F      		rol r24
 1162 0284 991F      		rol r25
 1163               		2:
 1164 0286 2A95      		dec r18
 1165 0288 02F4      		brpl 1b
 1166 028a 6095      		com r22
 1167 028c 7095      		com r23
 1168 028e 8095      		com r24
 1169 0290 9095      		com r25
 1170 0292 00C0      		rjmp .L105
 1171               	.LVL113:
 1172               	.L134:
 212:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1173               		.loc 2 212 0
 1174 0294 60E0      		ldi r22,0
 1175 0296 70E0      		ldi r23,0
 1176 0298 CB01      		movw r24,r22
 1177               	.LVL114:
 1178               	.L105:
 213:../../common/action.c ****                     switch (action.layer_bitop.op) {
 1179               		.loc 2 213 0 is_stmt 1 discriminator 3
 1180 029a 242F      		mov r18,r20
 1181 029c 2695      		lsr r18
 1182 029e 2695      		lsr r18
 1183 02a0 2370      		andi r18,lo8(3)
 1184 02a2 422F      		mov r20,r18
 1185               	.LVL115:
 1186 02a4 50E0      		ldi r21,0
 1187 02a6 4230      		cpi r20,2
 1188 02a8 5105      		cpc r21,__zero_reg__
 1189 02aa 01F0      		breq .L107
 1190 02ac 4330      		cpi r20,3
 1191 02ae 5105      		cpc r21,__zero_reg__
 1192 02b0 01F0      		breq .L108
 1193 02b2 6C29      		or r22,r12
 1194 02b4 7D29      		or r23,r13
 1195 02b6 8E29      		or r24,r14
 1196 02b8 9F29      		or r25,r15
 1197               	.LVL116:
 1198 02ba 4130      		cpi r20,1
 1199 02bc 5105      		cpc r21,__zero_reg__
 1200 02be 01F0      		breq .L170
 1201               	/* epilogue start */
 1202               	.LBE15:
 337:../../common/action.c **** }
 1203               		.loc 2 337 0 discriminator 3
 1204 02c0 2896      		adiw r28,8
 1205               	.LVL117:
 1206 02c2 0FB6      		in __tmp_reg__,__SREG__
 1207 02c4 F894      		cli
 1208 02c6 DEBF      		out __SP_H__,r29
 1209 02c8 0FBE      		out __SREG__,__tmp_reg__
 1210 02ca CDBF      		out __SP_L__,r28
 1211 02cc DF91      		pop r29
 1212 02ce CF91      		pop r28
 1213               	.LVL118:
 1214 02d0 1F91      		pop r17
 1215 02d2 0F91      		pop r16
 1216               	.LVL119:
 1217 02d4 FF90      		pop r15
 1218               	.LVL120:
 1219 02d6 EF90      		pop r14
 1220 02d8 DF90      		pop r13
 1221 02da CF90      		pop r12
 1222               	.LVL121:
 1223               	.LBB16:
 214:../../common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1224               		.loc 2 214 0 discriminator 3
 1225 02dc 0C94 0000 		jmp default_layer_and
 1226               	.LVL122:
 1227               	.L107:
 216:../../common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1228               		.loc 2 216 0
 1229 02e0 6C29      		or r22,r12
 1230 02e2 7D29      		or r23,r13
 1231 02e4 8E29      		or r24,r14
 1232 02e6 9F29      		or r25,r15
 1233               	.LVL123:
 1234               	/* epilogue start */
 1235               	.LBE16:
 337:../../common/action.c **** }
 1236               		.loc 2 337 0
 1237 02e8 2896      		adiw r28,8
 1238               	.LVL124:
 1239 02ea 0FB6      		in __tmp_reg__,__SREG__
 1240 02ec F894      		cli
 1241 02ee DEBF      		out __SP_H__,r29
 1242 02f0 0FBE      		out __SREG__,__tmp_reg__
 1243 02f2 CDBF      		out __SP_L__,r28
 1244 02f4 DF91      		pop r29
 1245 02f6 CF91      		pop r28
 1246               	.LVL125:
 1247 02f8 1F91      		pop r17
 1248 02fa 0F91      		pop r16
 1249               	.LVL126:
 1250 02fc FF90      		pop r15
 1251               	.LVL127:
 1252 02fe EF90      		pop r14
 1253 0300 DF90      		pop r13
 1254 0302 CF90      		pop r12
 1255               	.LVL128:
 1256               	.LBB17:
 216:../../common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 1257               		.loc 2 216 0
 1258 0304 0C94 0000 		jmp default_layer_xor
 1259               	.LVL129:
 1260               	.L108:
 217:../../common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1261               		.loc 2 217 0
 1262 0308 0E94 0000 		call default_layer_and
 1263               	.LVL130:
 1264 030c C701      		movw r24,r14
 1265 030e B601      		movw r22,r12
 1266               	.L170:
 1267               	/* epilogue start */
 1268               	.LBE17:
 337:../../common/action.c **** }
 1269               		.loc 2 337 0
 1270 0310 2896      		adiw r28,8
 1271 0312 0FB6      		in __tmp_reg__,__SREG__
 1272 0314 F894      		cli
 1273 0316 DEBF      		out __SP_H__,r29
 1274 0318 0FBE      		out __SREG__,__tmp_reg__
 1275 031a CDBF      		out __SP_L__,r28
 1276 031c DF91      		pop r29
 1277 031e CF91      		pop r28
 1278 0320 1F91      		pop r17
 1279 0322 0F91      		pop r16
 1280               	.LVL131:
 1281 0324 FF90      		pop r15
 1282               	.LVL132:
 1283 0326 EF90      		pop r14
 1284 0328 DF90      		pop r13
 1285 032a CF90      		pop r12
 1286               	.LVL133:
 1287               	.LBB18:
 217:../../common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1288               		.loc 2 217 0
 1289 032c 0C94 0000 		jmp default_layer_or
 1290               	.LVL134:
 1291               	.L104:
 1292               	.LBE18:
 222:../../common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1293               		.loc 2 222 0
 1294 0330 FF20      		tst r15
 1295 0332 01F0      		breq .L110
 222:../../common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1296               		.loc 2 222 0 is_stmt 0 discriminator 1
 1297 0334 842F      		mov r24,r20
 1298 0336 8170      		andi r24,lo8(1)
 1299 0338 00C0      		rjmp .L111
 1300               	.L110:
 222:../../common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1301               		.loc 2 222 0 discriminator 2
 1302 033a 8695      		lsr r24
 1303               	.L111:
 222:../../common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 1304               		.loc 2 222 0 discriminator 3
 1305 033c 8823      		tst r24
 1306 033e 01F4      		brne .+2
 1307 0340 00C0      		rjmp .L65
 1308               	.LVL135:
 1309               	.LBB19:
 224:../../common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1310               		.loc 2 224 0 is_stmt 1
 1311 0342 262F      		mov r18,r22
 1312 0344 2295      		swap r18
 1313 0346 2695      		lsr r18
 1314 0348 2770      		andi r18,lo8(7)
 1315 034a 220F      		lsl r18
 1316 034c 220F      		lsl r18
 225:../../common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1317               		.loc 2 225 0
 1318 034e 862F      		mov r24,r22
 1319 0350 8F70      		andi r24,lo8(15)
 1320 0352 C82E      		mov r12,r24
 1321 0354 D12C      		mov r13,__zero_reg__
 1322 0356 E12C      		mov r14,__zero_reg__
 1323 0358 F12C      		mov r15,__zero_reg__
 1324 035a 022E      		mov r0,r18
 1325 035c 00C0      		rjmp 2f
 1326               		1:
 1327 035e CC0C      		lsl r12
 1328 0360 DD1C      		rol r13
 1329 0362 EE1C      		rol r14
 1330 0364 FF1C      		rol r15
 1331               		2:
 1332 0366 0A94      		dec r0
 1333 0368 02F4      		brpl 1b
 1334               	.LVL136:
 226:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1335               		.loc 2 226 0
 1336 036a 64FF      		sbrs r22,4
 1337 036c 00C0      		rjmp .L135
 226:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1338               		.loc 2 226 0 is_stmt 0 discriminator 1
 1339 036e 6FE0      		ldi r22,lo8(15)
 1340 0370 70E0      		ldi r23,0
 1341 0372 80E0      		ldi r24,0
 1342 0374 90E0      		ldi r25,0
 1343               	.LVL137:
 1344 0376 00C0      		rjmp 2f
 1345               		1:
 1346 0378 660F      		lsl r22
 1347 037a 771F      		rol r23
 1348 037c 881F      		rol r24
 1349 037e 991F      		rol r25
 1350               		2:
 1351 0380 2A95      		dec r18
 1352 0382 02F4      		brpl 1b
 1353 0384 6095      		com r22
 1354 0386 7095      		com r23
 1355 0388 8095      		com r24
 1356 038a 9095      		com r25
 1357 038c 00C0      		rjmp .L112
 1358               	.LVL138:
 1359               	.L135:
 226:../../common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1360               		.loc 2 226 0
 1361 038e 60E0      		ldi r22,0
 1362 0390 70E0      		ldi r23,0
 1363 0392 CB01      		movw r24,r22
 1364               	.LVL139:
 1365               	.L112:
 227:../../common/action.c ****                     switch (action.layer_bitop.op) {
 1366               		.loc 2 227 0 is_stmt 1 discriminator 3
 1367 0394 242F      		mov r18,r20
 1368 0396 2695      		lsr r18
 1369 0398 2695      		lsr r18
 1370 039a 2370      		andi r18,lo8(3)
 1371 039c 422F      		mov r20,r18
 1372               	.LVL140:
 1373 039e 50E0      		ldi r21,0
 1374 03a0 4230      		cpi r20,2
 1375 03a2 5105      		cpc r21,__zero_reg__
 1376 03a4 01F0      		breq .L114
 1377 03a6 4330      		cpi r20,3
 1378 03a8 5105      		cpc r21,__zero_reg__
 1379 03aa 01F0      		breq .L115
 1380 03ac 6C29      		or r22,r12
 1381 03ae 7D29      		or r23,r13
 1382 03b0 8E29      		or r24,r14
 1383 03b2 9F29      		or r25,r15
 1384               	.LVL141:
 1385 03b4 4130      		cpi r20,1
 1386 03b6 5105      		cpc r21,__zero_reg__
 1387 03b8 01F0      		breq .L168
 1388               	/* epilogue start */
 1389               	.LBE19:
 337:../../common/action.c **** }
 1390               		.loc 2 337 0 discriminator 3
 1391 03ba 2896      		adiw r28,8
 1392               	.LVL142:
 1393 03bc 0FB6      		in __tmp_reg__,__SREG__
 1394 03be F894      		cli
 1395 03c0 DEBF      		out __SP_H__,r29
 1396 03c2 0FBE      		out __SREG__,__tmp_reg__
 1397 03c4 CDBF      		out __SP_L__,r28
 1398 03c6 DF91      		pop r29
 1399 03c8 CF91      		pop r28
 1400               	.LVL143:
 1401 03ca 1F91      		pop r17
 1402 03cc 0F91      		pop r16
 1403               	.LVL144:
 1404 03ce FF90      		pop r15
 1405               	.LVL145:
 1406 03d0 EF90      		pop r14
 1407 03d2 DF90      		pop r13
 1408 03d4 CF90      		pop r12
 1409               	.LVL146:
 1410               	.LBB20:
 228:../../common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1411               		.loc 2 228 0 discriminator 3
 1412 03d6 0C94 0000 		jmp layer_and
 1413               	.LVL147:
 1414               	.L114:
 230:../../common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1415               		.loc 2 230 0
 1416 03da 6C29      		or r22,r12
 1417 03dc 7D29      		or r23,r13
 1418 03de 8E29      		or r24,r14
 1419 03e0 9F29      		or r25,r15
 1420               	.LVL148:
 1421               	/* epilogue start */
 1422               	.LBE20:
 337:../../common/action.c **** }
 1423               		.loc 2 337 0
 1424 03e2 2896      		adiw r28,8
 1425               	.LVL149:
 1426 03e4 0FB6      		in __tmp_reg__,__SREG__
 1427 03e6 F894      		cli
 1428 03e8 DEBF      		out __SP_H__,r29
 1429 03ea 0FBE      		out __SREG__,__tmp_reg__
 1430 03ec CDBF      		out __SP_L__,r28
 1431 03ee DF91      		pop r29
 1432 03f0 CF91      		pop r28
 1433               	.LVL150:
 1434 03f2 1F91      		pop r17
 1435 03f4 0F91      		pop r16
 1436               	.LVL151:
 1437 03f6 FF90      		pop r15
 1438               	.LVL152:
 1439 03f8 EF90      		pop r14
 1440 03fa DF90      		pop r13
 1441 03fc CF90      		pop r12
 1442               	.LVL153:
 1443               	.LBB21:
 230:../../common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 1444               		.loc 2 230 0
 1445 03fe 0C94 0000 		jmp layer_xor
 1446               	.LVL154:
 1447               	.L115:
 231:../../common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1448               		.loc 2 231 0
 1449 0402 0E94 0000 		call layer_and
 1450               	.LVL155:
 1451 0406 C701      		movw r24,r14
 1452 0408 B601      		movw r22,r12
 1453               	.L168:
 1454               	/* epilogue start */
 1455               	.LBE21:
 337:../../common/action.c **** }
 1456               		.loc 2 337 0
 1457 040a 2896      		adiw r28,8
 1458 040c 0FB6      		in __tmp_reg__,__SREG__
 1459 040e F894      		cli
 1460 0410 DEBF      		out __SP_H__,r29
 1461 0412 0FBE      		out __SREG__,__tmp_reg__
 1462 0414 CDBF      		out __SP_L__,r28
 1463 0416 DF91      		pop r29
 1464 0418 CF91      		pop r28
 1465 041a 1F91      		pop r17
 1466 041c 0F91      		pop r16
 1467               	.LVL156:
 1468 041e FF90      		pop r15
 1469               	.LVL157:
 1470 0420 EF90      		pop r14
 1471 0422 DF90      		pop r13
 1472 0424 CF90      		pop r12
 1473               	.LVL158:
 1474               	.LBB22:
 231:../../common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1475               		.loc 2 231 0
 1476 0426 0C94 0000 		jmp layer_or
 1477               	.LVL159:
 1478               	.L76:
 1479               	.LBE22:
 239:../../common/action.c ****             switch (action.layer_tap.code) {
 1480               		.loc 2 239 0
 1481 042a 603F      		cpi r22,lo8(-16)
 1482 042c 01F0      		breq .L118
 1483               	.LVL160:
 1484 042e 00F4      		brsh .L119
 1485 0430 603E      		cpi r22,lo8(-32)
 1486 0432 00F4      		brsh .L158
 1487 0434 00C0      		rjmp .L117
 1488               	.L119:
 1489 0436 623F      		cpi r22,lo8(-14)
 1490 0438 01F4      		brne .+2
 1491 043a 00C0      		rjmp .L121
 1492 043c 00F0      		brlo .L122
 1493 043e 633F      		cpi r22,lo8(-13)
 1494 0440 01F4      		brne .+2
 1495 0442 00C0      		rjmp .L123
 1496 0444 00C0      		rjmp .L117
 1497               	.L158:
 1498 0446 162F      		mov r17,r22
 1499 0448 1F70      		andi r17,lo8(15)
 1500 044a 842F      		mov r24,r20
 1501 044c 8F71      		andi r24,lo8(31)
 242:../../common/action.c ****                     if (event.pressed) {
 1502               		.loc 2 242 0
 1503 044e FF20      		tst r15
 1504 0450 01F0      		breq .L124
 243:../../common/action.c ****                         layer_on(action.layer_tap.val);
 1505               		.loc 2 243 0
 1506 0452 0E94 0000 		call layer_on
 1507               	.LVL161:
 244:../../common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1508               		.loc 2 244 0
 1509 0456 812F      		mov r24,r17
 1510 0458 00C0      		rjmp .L162
 1511               	.LVL162:
 1512               	.L124:
 246:../../common/action.c ****                         layer_off(action.layer_tap.val);
 1513               		.loc 2 246 0
 1514 045a 0E94 0000 		call layer_off
 1515               	.LVL163:
 247:../../common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1516               		.loc 2 247 0
 1517 045e 812F      		mov r24,r17
 1518               	.LVL164:
 1519               	.L165:
 1520               	/* epilogue start */
 337:../../common/action.c **** }
 1521               		.loc 2 337 0
 1522 0460 2896      		adiw r28,8
 1523 0462 0FB6      		in __tmp_reg__,__SREG__
 1524 0464 F894      		cli
 1525 0466 DEBF      		out __SP_H__,r29
 1526 0468 0FBE      		out __SREG__,__tmp_reg__
 1527 046a CDBF      		out __SP_L__,r28
 1528 046c DF91      		pop r29
 1529 046e CF91      		pop r28
 1530 0470 1F91      		pop r17
 1531 0472 0F91      		pop r16
 1532               	.LVL165:
 1533 0474 FF90      		pop r15
 1534               	.LVL166:
 1535 0476 EF90      		pop r14
 1536 0478 DF90      		pop r13
 1537 047a CF90      		pop r12
 247:../../common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1538               		.loc 2 247 0
 1539 047c 0C94 0000 		jmp unregister_mods
 1540               	.LVL167:
 1541               	.L118:
 252:../../common/action.c ****                     if (event.pressed) {
 1542               		.loc 2 252 0
 1543 0480 FF20      		tst r15
 1544 0482 01F0      		breq .L125
 253:../../common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1545               		.loc 2 253 0
 1546 0484 2530      		cpi r18,lo8(5)
 1547 0486 00F0      		brlo .+2
 1548 0488 00C0      		rjmp .L65
 1549               	.L126:
 254:../../common/action.c ****                             layer_invert(action.layer_tap.val);
 1550               		.loc 2 254 0
 1551 048a 842F      		mov r24,r20
 1552 048c 8F71      		andi r24,lo8(31)
 1553               	/* epilogue start */
 337:../../common/action.c **** }
 1554               		.loc 2 337 0
 1555 048e 2896      		adiw r28,8
 1556 0490 0FB6      		in __tmp_reg__,__SREG__
 1557 0492 F894      		cli
 1558 0494 DEBF      		out __SP_H__,r29
 1559 0496 0FBE      		out __SREG__,__tmp_reg__
 1560 0498 CDBF      		out __SP_L__,r28
 1561 049a DF91      		pop r29
 1562 049c CF91      		pop r28
 1563 049e 1F91      		pop r17
 1564 04a0 0F91      		pop r16
 1565               	.LVL168:
 1566 04a2 FF90      		pop r15
 1567               	.LVL169:
 1568 04a4 EF90      		pop r14
 1569 04a6 DF90      		pop r13
 1570 04a8 CF90      		pop r12
 254:../../common/action.c ****                             layer_invert(action.layer_tap.val);
 1571               		.loc 2 254 0
 1572 04aa 0C94 0000 		jmp layer_invert
 1573               	.LVL170:
 1574               	.L125:
 257:../../common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 1575               		.loc 2 257 0
 1576 04ae 2630      		cpi r18,lo8(6)
 1577 04b0 00F0      		brlo .+2
 1578 04b2 00C0      		rjmp .L65
 1579 04b4 00C0      		rjmp .L126
 1580               	.L122:
 263:../../common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1581               		.loc 2 263 0
 1582 04b6 FF20      		tst r15
 1583 04b8 01F0      		breq .L127
 1584               	.L128:
 263:../../common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1585               		.loc 2 263 0 is_stmt 0 discriminator 1
 1586 04ba 842F      		mov r24,r20
 1587 04bc 8F71      		andi r24,lo8(31)
 1588               	/* epilogue start */
 337:../../common/action.c **** }
 1589               		.loc 2 337 0 is_stmt 1 discriminator 1
 1590 04be 2896      		adiw r28,8
 1591 04c0 0FB6      		in __tmp_reg__,__SREG__
 1592 04c2 F894      		cli
 1593 04c4 DEBF      		out __SP_H__,r29
 1594 04c6 0FBE      		out __SREG__,__tmp_reg__
 1595 04c8 CDBF      		out __SP_L__,r28
 1596 04ca DF91      		pop r29
 1597 04cc CF91      		pop r28
 1598 04ce 1F91      		pop r17
 1599 04d0 0F91      		pop r16
 1600               	.LVL171:
 1601 04d2 FF90      		pop r15
 1602               	.LVL172:
 1603 04d4 EF90      		pop r14
 1604 04d6 DF90      		pop r13
 1605 04d8 CF90      		pop r12
 263:../../common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 1606               		.loc 2 263 0 discriminator 1
 1607 04da 0C94 0000 		jmp layer_on
 1608               	.LVL173:
 1609               	.L121:
 267:../../common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 1610               		.loc 2 267 0
 1611 04de FF20      		tst r15
 1612 04e0 01F0      		breq .L128
 1613               	.L127:
 264:../../common/action.c ****                                     layer_off(action.layer_tap.val);
 1614               		.loc 2 264 0
 1615 04e2 842F      		mov r24,r20
 1616 04e4 8F71      		andi r24,lo8(31)
 1617               	/* epilogue start */
 337:../../common/action.c **** }
 1618               		.loc 2 337 0
 1619 04e6 2896      		adiw r28,8
 1620 04e8 0FB6      		in __tmp_reg__,__SREG__
 1621 04ea F894      		cli
 1622 04ec DEBF      		out __SP_H__,r29
 1623 04ee 0FBE      		out __SREG__,__tmp_reg__
 1624 04f0 CDBF      		out __SP_L__,r28
 1625 04f2 DF91      		pop r29
 1626 04f4 CF91      		pop r28
 1627 04f6 1F91      		pop r17
 1628 04f8 0F91      		pop r16
 1629               	.LVL174:
 1630 04fa FF90      		pop r15
 1631               	.LVL175:
 1632 04fc EF90      		pop r14
 1633 04fe DF90      		pop r13
 1634 0500 CF90      		pop r12
 264:../../common/action.c ****                                     layer_off(action.layer_tap.val);
 1635               		.loc 2 264 0
 1636 0502 0C94 0000 		jmp layer_off
 1637               	.LVL176:
 1638               	.L123:
 271:../../common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1639               		.loc 2 271 0
 1640 0506 FF20      		tst r15
 1641 0508 01F0      		breq .L129
 271:../../common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1642               		.loc 2 271 0 is_stmt 0 discriminator 1
 1643 050a 842F      		mov r24,r20
 1644 050c 8F71      		andi r24,lo8(31)
 1645               	/* epilogue start */
 337:../../common/action.c **** }
 1646               		.loc 2 337 0 is_stmt 1 discriminator 1
 1647 050e 2896      		adiw r28,8
 1648 0510 0FB6      		in __tmp_reg__,__SREG__
 1649 0512 F894      		cli
 1650 0514 DEBF      		out __SP_H__,r29
 1651 0516 0FBE      		out __SREG__,__tmp_reg__
 1652 0518 CDBF      		out __SP_L__,r28
 1653 051a DF91      		pop r29
 1654 051c CF91      		pop r28
 1655 051e 1F91      		pop r17
 1656 0520 0F91      		pop r16
 1657               	.LVL177:
 1658 0522 FF90      		pop r15
 1659               	.LVL178:
 1660 0524 EF90      		pop r14
 1661 0526 DF90      		pop r13
 1662 0528 CF90      		pop r12
 271:../../common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 1663               		.loc 2 271 0 discriminator 1
 1664 052a 0C94 0000 		jmp layer_move
 1665               	.LVL179:
 1666               	.L129:
 1667               	/* epilogue start */
 337:../../common/action.c **** }
 1668               		.loc 2 337 0
 1669 052e 2896      		adiw r28,8
 1670 0530 0FB6      		in __tmp_reg__,__SREG__
 1671 0532 F894      		cli
 1672 0534 DEBF      		out __SP_H__,r29
 1673 0536 0FBE      		out __SREG__,__tmp_reg__
 1674 0538 CDBF      		out __SP_L__,r28
 1675 053a DF91      		pop r29
 1676 053c CF91      		pop r28
 1677 053e 1F91      		pop r17
 1678 0540 0F91      		pop r16
 1679               	.LVL180:
 1680 0542 FF90      		pop r15
 1681               	.LVL181:
 1682 0544 EF90      		pop r14
 1683 0546 DF90      		pop r13
 1684 0548 CF90      		pop r12
 272:../../common/action.c ****                                     layer_clear();
 1685               		.loc 2 272 0
 1686 054a 0C94 0000 		jmp layer_clear
 1687               	.LVL182:
 1688               	.L117:
 276:../../common/action.c ****                     if (event.pressed) {
 1689               		.loc 2 276 0
 1690 054e FF20      		tst r15
 1691 0550 01F0      		breq .L130
 277:../../common/action.c ****                         if (tap_count > 0) {
 1692               		.loc 2 277 0
 1693 0552 2223      		tst r18
 1694 0554 01F4      		brne .+2
 1695 0556 00C0      		rjmp .L128
 1696               	.L163:
 279:../../common/action.c ****                             register_code(action.layer_tap.code);
 1697               		.loc 2 279 0
 1698 0558 862F      		mov r24,r22
 1699               	/* epilogue start */
 337:../../common/action.c **** }
 1700               		.loc 2 337 0
 1701 055a 2896      		adiw r28,8
 1702 055c 0FB6      		in __tmp_reg__,__SREG__
 1703 055e F894      		cli
 1704 0560 DEBF      		out __SP_H__,r29
 1705 0562 0FBE      		out __SREG__,__tmp_reg__
 1706 0564 CDBF      		out __SP_L__,r28
 1707 0566 DF91      		pop r29
 1708 0568 CF91      		pop r28
 1709 056a 1F91      		pop r17
 1710 056c 0F91      		pop r16
 1711               	.LVL183:
 1712 056e FF90      		pop r15
 1713               	.LVL184:
 1714 0570 EF90      		pop r14
 1715 0572 DF90      		pop r13
 1716 0574 CF90      		pop r12
 279:../../common/action.c ****                             register_code(action.layer_tap.code);
 1717               		.loc 2 279 0
 1718 0576 0C94 0000 		jmp register_code
 1719               	.LVL185:
 1720               	.L130:
 285:../../common/action.c ****                         if (tap_count > 0) {
 1721               		.loc 2 285 0
 1722 057a 2223      		tst r18
 1723 057c 01F4      		brne .+2
 1724 057e 00C0      		rjmp .L127
 1725               	.L164:
 287:../../common/action.c ****                             unregister_code(action.layer_tap.code);
 1726               		.loc 2 287 0
 1727 0580 862F      		mov r24,r22
 1728               	/* epilogue start */
 337:../../common/action.c **** }
 1729               		.loc 2 337 0
 1730 0582 2896      		adiw r28,8
 1731 0584 0FB6      		in __tmp_reg__,__SREG__
 1732 0586 F894      		cli
 1733 0588 DEBF      		out __SP_H__,r29
 1734 058a 0FBE      		out __SREG__,__tmp_reg__
 1735 058c CDBF      		out __SP_L__,r28
 1736 058e DF91      		pop r29
 1737 0590 CF91      		pop r28
 1738 0592 1F91      		pop r17
 1739 0594 0F91      		pop r16
 1740               	.LVL186:
 1741 0596 FF90      		pop r15
 1742               	.LVL187:
 1743 0598 EF90      		pop r14
 1744 059a DF90      		pop r13
 1745 059c CF90      		pop r12
 287:../../common/action.c ****                             unregister_code(action.layer_tap.code);
 1746               		.loc 2 287 0
 1747 059e 0C94 0000 		jmp unregister_code
 1748               	.LVL188:
 1749               	.L77:
 301:../../common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1750               		.loc 2 301 0
 1751 05a2 4F70      		andi r20,lo8(15)
 1752 05a4 C801      		movw r24,r16
 1753 05a6 0E94 0000 		call action_get_macro
 1754               	.LVL189:
 1755               	/* epilogue start */
 337:../../common/action.c **** }
 1756               		.loc 2 337 0
 1757 05aa 2896      		adiw r28,8
 1758 05ac 0FB6      		in __tmp_reg__,__SREG__
 1759 05ae F894      		cli
 1760 05b0 DEBF      		out __SP_H__,r29
 1761 05b2 0FBE      		out __SREG__,__tmp_reg__
 1762 05b4 CDBF      		out __SP_L__,r28
 1763 05b6 DF91      		pop r29
 1764 05b8 CF91      		pop r28
 1765 05ba 1F91      		pop r17
 1766 05bc 0F91      		pop r16
 1767               	.LVL190:
 1768 05be FF90      		pop r15
 1769               	.LVL191:
 1770 05c0 EF90      		pop r14
 1771 05c2 DF90      		pop r13
 1772 05c4 CF90      		pop r12
 301:../../common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 1773               		.loc 2 301 0
 1774 05c6 0C94 0000 		jmp action_macro_play
 1775               	.LVL192:
 1776               	.L78:
 331:../../common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1777               		.loc 2 331 0
 1778 05ca 4F70      		andi r20,lo8(15)
 1779 05cc C801      		movw r24,r16
 1780               	/* epilogue start */
 337:../../common/action.c **** }
 1781               		.loc 2 337 0
 1782 05ce 2896      		adiw r28,8
 1783 05d0 0FB6      		in __tmp_reg__,__SREG__
 1784 05d2 F894      		cli
 1785 05d4 DEBF      		out __SP_H__,r29
 1786 05d6 0FBE      		out __SREG__,__tmp_reg__
 1787 05d8 CDBF      		out __SP_L__,r28
 1788 05da DF91      		pop r29
 1789 05dc CF91      		pop r28
 1790 05de 1F91      		pop r17
 1791 05e0 0F91      		pop r16
 1792               	.LVL193:
 1793 05e2 FF90      		pop r15
 1794               	.LVL194:
 1795 05e4 EF90      		pop r14
 1796 05e6 DF90      		pop r13
 1797 05e8 CF90      		pop r12
 331:../../common/action.c ****             action_function(record, action.func.id, action.func.opt);
 1798               		.loc 2 331 0
 1799 05ea 0C94 0000 		jmp action_function
 1800               	.LVL195:
 1801               	.L65:
 1802               	/* epilogue start */
 337:../../common/action.c **** }
 1803               		.loc 2 337 0
 1804 05ee 2896      		adiw r28,8
 1805 05f0 0FB6      		in __tmp_reg__,__SREG__
 1806 05f2 F894      		cli
 1807 05f4 DEBF      		out __SP_H__,r29
 1808 05f6 0FBE      		out __SREG__,__tmp_reg__
 1809 05f8 CDBF      		out __SP_L__,r28
 1810 05fa DF91      		pop r29
 1811 05fc CF91      		pop r28
 1812 05fe 1F91      		pop r17
 1813 0600 0F91      		pop r16
 1814               	.LVL196:
 1815 0602 FF90      		pop r15
 1816               	.LVL197:
 1817 0604 EF90      		pop r14
 1818 0606 DF90      		pop r13
 1819 0608 CF90      		pop r12
 1820 060a 0895      		ret
 1821               		.cfi_endproc
 1822               	.LFE105:
 1824               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1825               	.global	clear_keyboard_but_mods
 1827               	clear_keyboard_but_mods:
 1828               	.LFB111:
 488:../../common/action.c ****     }
 489:../../common/action.c **** }
 490:../../common/action.c **** 
 491:../../common/action.c **** void clear_keyboard(void)
 492:../../common/action.c **** {
 493:../../common/action.c ****     clear_mods();
 494:../../common/action.c ****     clear_keyboard_but_mods();
 495:../../common/action.c **** }
 496:../../common/action.c **** 
 497:../../common/action.c **** void clear_keyboard_but_mods(void)
 498:../../common/action.c **** {
 1829               		.loc 2 498 0
 1830               		.cfi_startproc
 1831               	/* prologue: function */
 1832               	/* frame size = 0 */
 1833               	/* stack size = 0 */
 1834               	.L__stack_usage = 0
 499:../../common/action.c ****     clear_weak_mods();
 1835               		.loc 2 499 0
 1836 0000 0E94 0000 		call clear_weak_mods
 1837               	.LVL198:
 500:../../common/action.c ****     clear_keys();
 1838               		.loc 2 500 0
 1839 0004 0E94 0000 		call clear_keys
 1840               	.LVL199:
 501:../../common/action.c ****     send_keyboard_report();
 1841               		.loc 2 501 0
 1842 0008 0E94 0000 		call send_keyboard_report
 1843               	.LVL200:
 502:../../common/action.c **** #ifdef MOUSEKEY_ENABLE
 503:../../common/action.c ****     mousekey_clear();
 1844               		.loc 2 503 0
 1845 000c 0E94 0000 		call mousekey_clear
 1846               	.LVL201:
 504:../../common/action.c ****     mousekey_send();
 1847               		.loc 2 504 0
 1848 0010 0E94 0000 		call mousekey_send
 1849               	.LVL202:
 505:../../common/action.c **** #endif
 506:../../common/action.c **** #ifdef EXTRAKEY_ENABLE
 507:../../common/action.c ****     host_system_send(0);
 1850               		.loc 2 507 0
 1851 0014 80E0      		ldi r24,0
 1852 0016 90E0      		ldi r25,0
 1853 0018 0E94 0000 		call host_system_send
 1854               	.LVL203:
 508:../../common/action.c ****     host_consumer_send(0);
 1855               		.loc 2 508 0
 1856 001c 80E0      		ldi r24,0
 1857 001e 90E0      		ldi r25,0
 1858 0020 0C94 0000 		jmp host_consumer_send
 1859               	.LVL204:
 1860               		.cfi_endproc
 1861               	.LFE111:
 1863               		.section	.text.clear_keyboard,"ax",@progbits
 1864               	.global	clear_keyboard
 1866               	clear_keyboard:
 1867               	.LFB110:
 492:../../common/action.c **** {
 1868               		.loc 2 492 0
 1869               		.cfi_startproc
 1870               	/* prologue: function */
 1871               	/* frame size = 0 */
 1872               	/* stack size = 0 */
 1873               	.L__stack_usage = 0
 493:../../common/action.c ****     clear_mods();
 1874               		.loc 2 493 0
 1875 0000 0E94 0000 		call clear_mods
 1876               	.LVL205:
 494:../../common/action.c ****     clear_keyboard_but_mods();
 1877               		.loc 2 494 0
 1878 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1879               	.LVL206:
 1880               		.cfi_endproc
 1881               	.LFE110:
 1883               		.section	.text.is_tap_key,"ax",@progbits
 1884               	.global	is_tap_key
 1886               	is_tap_key:
 1887               	.LFB112:
 509:../../common/action.c **** #endif
 510:../../common/action.c **** }
 511:../../common/action.c **** 
 512:../../common/action.c **** bool is_tap_key(keypos_t key)
 513:../../common/action.c **** {
 1888               		.loc 2 513 0
 1889               		.cfi_startproc
 1890               	.LVL207:
 1891               	/* prologue: function */
 1892               	/* frame size = 0 */
 1893               	/* stack size = 0 */
 1894               	.L__stack_usage = 0
 514:../../common/action.c ****     action_t action = layer_switch_get_action(key);
 1895               		.loc 2 514 0
 1896 0000 0E94 0000 		call layer_switch_get_action
 1897               	.LVL208:
 515:../../common/action.c **** 
 516:../../common/action.c ****     switch (action.kind.id) {
 1898               		.loc 2 516 0
 1899 0004 292F      		mov r18,r25
 1900 0006 2295      		swap r18
 1901 0008 2F70      		andi r18,lo8(15)
 1902 000a 30E0      		ldi r19,0
 1903 000c 2C30      		cpi r18,12
 1904 000e 3105      		cpc r19,__zero_reg__
 1905 0010 04F4      		brge .L176
 1906 0012 2A30      		cpi r18,10
 1907 0014 3105      		cpc r19,__zero_reg__
 1908 0016 04F4      		brge .L177
 1909 0018 2250      		subi r18,2
 1910 001a 3109      		sbc r19,__zero_reg__
 1911 001c 2230      		cpi r18,2
 1912 001e 3105      		cpc r19,__zero_reg__
 1913 0020 00F4      		brsh .L179
 1914 0022 00C0      		rjmp .L177
 1915               	.L176:
 1916 0024 2C30      		cpi r18,12
 1917 0026 3105      		cpc r19,__zero_reg__
 1918 0028 01F0      		breq .L178
 1919 002a 2F30      		cpi r18,15
 1920 002c 3105      		cpc r19,__zero_reg__
 1921 002e 01F0      		breq .L178
 1922 0030 00C0      		rjmp .L179
 1923               	.L177:
 517:../../common/action.c ****         case ACT_LMODS_TAP:
 518:../../common/action.c ****         case ACT_RMODS_TAP:
 519:../../common/action.c ****         case ACT_LAYER_TAP:
 520:../../common/action.c ****         case ACT_LAYER_TAP_EXT:
 521:../../common/action.c ****             return true;
 1924               		.loc 2 521 0
 1925 0032 81E0      		ldi r24,lo8(1)
 1926 0034 0895      		ret
 1927               	.L178:
 522:../../common/action.c ****         case ACT_MACRO:
 523:../../common/action.c ****         case ACT_FUNCTION:
 524:../../common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1928               		.loc 2 524 0
 1929 0036 93FB      		bst r25,3
 1930 0038 8827      		clr r24
 1931 003a 80F9      		bld r24,0
 1932 003c 0895      		ret
 1933               	.L179:
 525:../../common/action.c ****             return false;
 526:../../common/action.c ****     }
 527:../../common/action.c ****     return false;
 1934               		.loc 2 527 0
 1935 003e 80E0      		ldi r24,0
 528:../../common/action.c **** }
 1936               		.loc 2 528 0
 1937 0040 0895      		ret
 1938               		.cfi_endproc
 1939               	.LFE112:
 1941               		.section	.text.debug_event,"ax",@progbits
 1942               	.global	debug_event
 1944               	debug_event:
 1945               	.LFB113:
 529:../../common/action.c **** 
 530:../../common/action.c **** 
 531:../../common/action.c **** /*
 532:../../common/action.c ****  * debug print
 533:../../common/action.c ****  */
 534:../../common/action.c **** void debug_event(keyevent_t event)
 535:../../common/action.c **** {
 1946               		.loc 2 535 0
 1947               		.cfi_startproc
 1948 0000 CF93      		push r28
 1949               	.LCFI15:
 1950               		.cfi_def_cfa_offset 3
 1951               		.cfi_offset 28, -2
 1952 0002 DF93      		push r29
 1953               	.LCFI16:
 1954               		.cfi_def_cfa_offset 4
 1955               		.cfi_offset 29, -3
 1956 0004 00D0      		rcall .
 1957 0006 00D0      		rcall .
 1958 0008 1F92      		push __zero_reg__
 1959               	.LCFI17:
 1960               		.cfi_def_cfa_offset 9
 1961 000a CDB7      		in r28,__SP_L__
 1962 000c DEB7      		in r29,__SP_H__
 1963               	.LCFI18:
 1964               		.cfi_def_cfa_register 28
 1965               	/* prologue: function */
 1966               	/* frame size = 5 */
 1967               	/* stack size = 7 */
 1968               	.L__stack_usage = 7
 1969               	/* epilogue start */
 536:../../common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 537:../../common/action.c **** }
 1970               		.loc 2 537 0
 1971 000e 0F90      		pop __tmp_reg__
 1972 0010 0F90      		pop __tmp_reg__
 1973 0012 0F90      		pop __tmp_reg__
 1974 0014 0F90      		pop __tmp_reg__
 1975 0016 0F90      		pop __tmp_reg__
 1976 0018 DF91      		pop r29
 1977 001a CF91      		pop r28
 1978 001c 0895      		ret
 1979               		.cfi_endproc
 1980               	.LFE113:
 1982               		.section	.text.debug_record,"ax",@progbits
 1983               	.global	debug_record
 1985               	debug_record:
 1986               	.LFB114:
 538:../../common/action.c **** 
 539:../../common/action.c **** void debug_record(keyrecord_t record)
 540:../../common/action.c **** {
 1987               		.loc 2 540 0
 1988               		.cfi_startproc
 1989 0000 CF93      		push r28
 1990               	.LCFI19:
 1991               		.cfi_def_cfa_offset 3
 1992               		.cfi_offset 28, -2
 1993 0002 DF93      		push r29
 1994               	.LCFI20:
 1995               		.cfi_def_cfa_offset 4
 1996               		.cfi_offset 29, -3
 1997 0004 00D0      		rcall .
 1998 0006 00D0      		rcall .
 1999 0008 00D0      		rcall .
 2000               	.LCFI21:
 2001               		.cfi_def_cfa_offset 10
 2002 000a CDB7      		in r28,__SP_L__
 2003 000c DEB7      		in r29,__SP_H__
 2004               	.LCFI22:
 2005               		.cfi_def_cfa_register 28
 2006               	/* prologue: function */
 2007               	/* frame size = 6 */
 2008               	/* stack size = 8 */
 2009               	.L__stack_usage = 8
 2010               	/* epilogue start */
 541:../../common/action.c ****     debug_event(record.event);
 542:../../common/action.c **** #ifndef NO_ACTION_TAPPING
 543:../../common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 544:../../common/action.c **** #endif
 545:../../common/action.c **** }
 2011               		.loc 2 545 0
 2012 000e 2696      		adiw r28,6
 2013 0010 0FB6      		in __tmp_reg__,__SREG__
 2014 0012 F894      		cli
 2015 0014 DEBF      		out __SP_H__,r29
 2016 0016 0FBE      		out __SREG__,__tmp_reg__
 2017 0018 CDBF      		out __SP_L__,r28
 2018 001a DF91      		pop r29
 2019 001c CF91      		pop r28
 2020 001e 0895      		ret
 2021               		.cfi_endproc
 2022               	.LFE114:
 2024               		.section	.text.debug_action,"ax",@progbits
 2025               	.global	debug_action
 2027               	debug_action:
 2028               	.LFB115:
 546:../../common/action.c **** 
 547:../../common/action.c **** void debug_action(action_t action)
 548:../../common/action.c **** {
 2029               		.loc 2 548 0
 2030               		.cfi_startproc
 2031               	.LVL209:
 2032               	/* prologue: function */
 2033               	/* frame size = 0 */
 2034               	/* stack size = 0 */
 2035               	.L__stack_usage = 0
 2036 0000 0895      		ret
 2037               		.cfi_endproc
 2038               	.LFE115:
 2040               		.text
 2041               	.Letext0:
 2042               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 2043               		.file 4 "../../common/keycode.h"
 2044               		.file 5 "../../common/action_code.h"
 2045               		.file 6 "../../common/action_macro.h"
 2046               		.file 7 "../../common/action.h"
 2047               		.file 8 "../../common/action_tapping.h"
 2048               		.file 9 "../../common/action_util.h"
 2049               		.file 10 "../../common/host.h"
 2050               		.file 11 "../../common/action_layer.h"
 2051               		.file 12 "../../common/command.h"
 2052               		.file 13 "../../common/mousekey.h"
 2053               		.file 14 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
DEFINED SYMBOLS
                            *ABS*:00000000 action.c
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:2      *ABS*:0000003e __SP_H__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:3      *ABS*:0000003d __SP_L__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:4      *ABS*:0000003f __SREG__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:6      *ABS*:00000001 __zero_reg__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:13     .text.matrix_power_up:00000000 matrix_power_up
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:29     .text.matrix_power_down:00000000 matrix_power_down
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:44     .text.action_exec:00000000 action_exec
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:125    .text.register_code:00000000 register_code
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:442    .text.unregister_code:00000000 unregister_code
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:577    .text.register_mods:00000000 register_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:603    .text.unregister_mods:00000000 unregister_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:629    .text.process_action:00000000 process_action
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:1827   .text.clear_keyboard_but_mods:00000000 clear_keyboard_but_mods
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:1866   .text.clear_keyboard:00000000 clear_keyboard
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:1886   .text.is_tap_key:00000000 is_tap_key
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:1944   .text.debug_event:00000000 debug_event
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:1985   .text.debug_record:00000000 debug_record
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfTpAWl.s:2027   .text.debug_action:00000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
command_proc
add_mods
host_system_send
host_consumer_send
del_mods
layer_switch_get_action
layer_debug
default_layer_debug
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
mousekey_on
mousekey_off
mousekey_send
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
action_get_macro
action_macro_play
action_function
clear_weak_mods
clear_keys
mousekey_clear
clear_mods

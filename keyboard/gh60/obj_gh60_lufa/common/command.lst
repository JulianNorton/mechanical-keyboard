   1               		.file	"command.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.command_console_help,"ax",@progbits
  12               	command_console_help:
  13               	.LFB110:
  14               		.file 1 "../../common/command.c"
   1:../../common/command.c **** /*
   2:../../common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:../../common/command.c **** 
   4:../../common/command.c **** This program is free software: you can redistribute it and/or modify
   5:../../common/command.c **** it under the terms of the GNU General Public License as published by
   6:../../common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/command.c **** (at your option) any later version.
   8:../../common/command.c **** 
   9:../../common/command.c **** This program is distributed in the hope that it will be useful,
  10:../../common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/command.c **** GNU General Public License for more details.
  13:../../common/command.c **** 
  14:../../common/command.c **** You should have received a copy of the GNU General Public License
  15:../../common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/command.c **** */
  17:../../common/command.c **** #include <stdint.h>
  18:../../common/command.c **** #include <stdbool.h>
  19:../../common/command.c **** #include <util/delay.h>
  20:../../common/command.c **** #include "keycode.h"
  21:../../common/command.c **** #include "host.h"
  22:../../common/command.c **** #include "keymap.h"
  23:../../common/command.c **** #include "print.h"
  24:../../common/command.c **** #include "debug.h"
  25:../../common/command.c **** #include "util.h"
  26:../../common/command.c **** #include "timer.h"
  27:../../common/command.c **** #include "keyboard.h"
  28:../../common/command.c **** #include "bootloader.h"
  29:../../common/command.c **** #include "action_layer.h"
  30:../../common/command.c **** #include "action_util.h"
  31:../../common/command.c **** #include "eeconfig.h"
  32:../../common/command.c **** #include "sleep_led.h"
  33:../../common/command.c **** #include "led.h"
  34:../../common/command.c **** #include "command.h"
  35:../../common/command.c **** #include "backlight.h"
  36:../../common/command.c **** 
  37:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
  38:../../common/command.c **** #include "mousekey.h"
  39:../../common/command.c **** #endif
  40:../../common/command.c **** 
  41:../../common/command.c **** #ifdef PROTOCOL_PJRC
  42:../../common/command.c **** #   include "usb_keyboard.h"
  43:../../common/command.c **** #   ifdef EXTRAKEY_ENABLE
  44:../../common/command.c **** #       include "usb_extra.h"
  45:../../common/command.c **** #   endif
  46:../../common/command.c **** #endif
  47:../../common/command.c **** 
  48:../../common/command.c **** #ifdef PROTOCOL_VUSB
  49:../../common/command.c **** #   include "usbdrv.h"
  50:../../common/command.c **** #endif
  51:../../common/command.c **** 
  52:../../common/command.c **** 
  53:../../common/command.c **** static bool command_common(uint8_t code);
  54:../../common/command.c **** static void command_common_help(void);
  55:../../common/command.c **** static bool command_console(uint8_t code);
  56:../../common/command.c **** static void command_console_help(void);
  57:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
  58:../../common/command.c **** static bool mousekey_console(uint8_t code);
  59:../../common/command.c **** static void mousekey_console_help(void);
  60:../../common/command.c **** #endif
  61:../../common/command.c **** 
  62:../../common/command.c **** static uint8_t numkey2num(uint8_t code);
  63:../../common/command.c **** static void switch_default_layer(uint8_t layer);
  64:../../common/command.c **** 
  65:../../common/command.c **** 
  66:../../common/command.c **** command_state_t command_state = ONESHOT;
  67:../../common/command.c **** 
  68:../../common/command.c **** 
  69:../../common/command.c **** bool command_proc(uint8_t code)
  70:../../common/command.c **** {
  71:../../common/command.c ****     switch (command_state) {
  72:../../common/command.c ****         case ONESHOT:
  73:../../common/command.c ****             if (!IS_COMMAND())
  74:../../common/command.c ****                 return false;
  75:../../common/command.c ****             return (command_extra(code) || command_common(code));
  76:../../common/command.c ****             break;
  77:../../common/command.c ****         case CONSOLE:
  78:../../common/command.c ****             if (IS_COMMAND())
  79:../../common/command.c ****                 return (command_extra(code) || command_common(code));
  80:../../common/command.c ****             else
  81:../../common/command.c ****                 return (command_console_extra(code) || command_console(code));
  82:../../common/command.c ****             break;
  83:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
  84:../../common/command.c ****         case MOUSEKEY:
  85:../../common/command.c ****             mousekey_console(code);
  86:../../common/command.c ****             break;
  87:../../common/command.c **** #endif
  88:../../common/command.c ****         default:
  89:../../common/command.c ****             command_state = ONESHOT;
  90:../../common/command.c ****             return false;
  91:../../common/command.c ****     }
  92:../../common/command.c ****     return true;
  93:../../common/command.c **** }
  94:../../common/command.c **** 
  95:../../common/command.c **** /* TODO: Refactoring is needed. */
  96:../../common/command.c **** /* This allows to define extra commands. return false when not processed. */
  97:../../common/command.c **** bool command_extra(uint8_t code) __attribute__ ((weak));
  98:../../common/command.c **** bool command_extra(uint8_t code)
  99:../../common/command.c **** {
 100:../../common/command.c ****     return false;
 101:../../common/command.c **** }
 102:../../common/command.c **** 
 103:../../common/command.c **** bool command_console_extra(uint8_t code) __attribute__ ((weak));
 104:../../common/command.c **** bool command_console_extra(uint8_t code)
 105:../../common/command.c **** {
 106:../../common/command.c ****     return false;
 107:../../common/command.c **** }
 108:../../common/command.c **** 
 109:../../common/command.c **** 
 110:../../common/command.c **** /***********************************************************
 111:../../common/command.c ****  * Command common
 112:../../common/command.c ****  ***********************************************************/
 113:../../common/command.c **** static void command_common_help(void)
 114:../../common/command.c **** {
 115:../../common/command.c ****     print("\n\n----- Command Help -----\n");
 116:../../common/command.c ****     print("c:	enter console mode\n");
 117:../../common/command.c ****     print("d:	toggle debug enable\n");
 118:../../common/command.c ****     print("x:	toggle matrix debug\n");
 119:../../common/command.c ****     print("k:	toggle keyboard debug\n");
 120:../../common/command.c ****     print("m:	toggle mouse debug\n");
 121:../../common/command.c **** #ifdef SLEEP_LED_ENABLE
 122:../../common/command.c ****     print("z:	toggle sleep LED test\n");
 123:../../common/command.c **** #endif
 124:../../common/command.c ****     print("v:	print device version & info\n");
 125:../../common/command.c ****     print("t:	print timer count\n");
 126:../../common/command.c ****     print("s:	print status\n");
 127:../../common/command.c ****     print("e:	print eeprom config\n");
 128:../../common/command.c **** #ifdef NKRO_ENABLE
 129:../../common/command.c ****     print("n:	toggle NKRO\n");
 130:../../common/command.c **** #endif
 131:../../common/command.c ****     print("0/F10:	switch to Layer0 \n");
 132:../../common/command.c ****     print("1/F1:	switch to Layer1 \n");
 133:../../common/command.c ****     print("2/F2:	switch to Layer2 \n");
 134:../../common/command.c ****     print("3/F3:	switch to Layer3 \n");
 135:../../common/command.c ****     print("4/F4:	switch to Layer4 \n");
 136:../../common/command.c ****     print("PScr:	power down/remote wake-up\n");
 137:../../common/command.c ****     print("Caps:	Lock Keyboard(Child Proof)\n");
 138:../../common/command.c ****     print("Paus:	jump to bootloader\n");
 139:../../common/command.c **** }
 140:../../common/command.c **** 
 141:../../common/command.c **** #ifdef BOOTMAGIC_ENABLE
 142:../../common/command.c **** static void print_eeconfig(void)
 143:../../common/command.c **** {
 144:../../common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 145:../../common/command.c **** 
 146:../../common/command.c ****     debug_config_t dc;
 147:../../common/command.c ****     dc.raw = eeconfig_read_debug();
 148:../../common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 149:../../common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 150:../../common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 151:../../common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 152:../../common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 153:../../common/command.c **** 
 154:../../common/command.c ****     keymap_config_t kc;
 155:../../common/command.c ****     kc.raw = eeconfig_read_keymap();
 156:../../common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 157:../../common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 158:../../common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 159:../../common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 160:../../common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 161:../../common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 162:../../common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 163:../../common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 164:../../common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 165:../../common/command.c **** 
 166:../../common/command.c **** #ifdef BACKLIGHT_ENABLE
 167:../../common/command.c ****     backlight_config_t bc;
 168:../../common/command.c ****     bc.raw = eeconfig_read_backlight();
 169:../../common/command.c ****     print("backlight_config.raw: "); print_hex8(bc.raw); print("\n");
 170:../../common/command.c ****     print(".enable: "); print_dec(bc.enable); print("\n");
 171:../../common/command.c ****     print(".level: "); print_dec(bc.level); print("\n");
 172:../../common/command.c **** #endif
 173:../../common/command.c **** }
 174:../../common/command.c **** #endif
 175:../../common/command.c **** 
 176:../../common/command.c **** static bool command_common(uint8_t code)
 177:../../common/command.c **** {
 178:../../common/command.c ****     static host_driver_t *host_driver = 0;
 179:../../common/command.c ****     switch (code) {
 180:../../common/command.c **** #ifdef SLEEP_LED_ENABLE
 181:../../common/command.c ****         case KC_Z:
 182:../../common/command.c ****             // test breathing sleep LED
 183:../../common/command.c ****             print("Sleep LED test\n");
 184:../../common/command.c ****             sleep_led_toggle();
 185:../../common/command.c ****             led_set(host_keyboard_leds());
 186:../../common/command.c ****             break;
 187:../../common/command.c **** #endif
 188:../../common/command.c **** #ifdef BOOTMAGIC_ENABLE
 189:../../common/command.c ****         case KC_E:
 190:../../common/command.c ****             print("eeconfig:\n");
 191:../../common/command.c ****             print_eeconfig();
 192:../../common/command.c ****             break;
 193:../../common/command.c **** #endif
 194:../../common/command.c ****         case KC_CAPSLOCK:
 195:../../common/command.c ****             if (host_get_driver()) {
 196:../../common/command.c ****                 host_driver = host_get_driver();
 197:../../common/command.c ****                 clear_keyboard();
 198:../../common/command.c ****                 host_set_driver(0);
 199:../../common/command.c ****                 print("Locked.\n");
 200:../../common/command.c ****             } else {
 201:../../common/command.c ****                 host_set_driver(host_driver);
 202:../../common/command.c ****                 print("Unlocked.\n");
 203:../../common/command.c ****             }
 204:../../common/command.c ****             break;
 205:../../common/command.c ****         case KC_H:
 206:../../common/command.c ****         case KC_SLASH: /* ? */
 207:../../common/command.c ****             command_common_help();
 208:../../common/command.c ****             break;
 209:../../common/command.c ****         case KC_C:
 210:../../common/command.c ****             debug_matrix   = false;
 211:../../common/command.c ****             debug_keyboard = false;
 212:../../common/command.c ****             debug_mouse    = false;
 213:../../common/command.c ****             debug_enable   = false;
 214:../../common/command.c ****             command_console_help();
 215:../../common/command.c ****             print("\nEnter Console Mode\n");
 216:../../common/command.c ****             print("C> ");
 217:../../common/command.c ****             command_state = CONSOLE;
 218:../../common/command.c ****             break;
 219:../../common/command.c ****         case KC_PAUSE:
 220:../../common/command.c ****             clear_keyboard();
 221:../../common/command.c ****             print("\n\nJump to bootloader... ");
 222:../../common/command.c ****             _delay_ms(1000);
 223:../../common/command.c ****             bootloader_jump(); // not return
 224:../../common/command.c ****             print("not supported.\n");
 225:../../common/command.c ****             break;
 226:../../common/command.c ****         case KC_D:
 227:../../common/command.c ****             if (debug_enable) {
 228:../../common/command.c ****                 print("\nDEBUG: disabled.\n");
 229:../../common/command.c ****                 debug_matrix   = false;
 230:../../common/command.c ****                 debug_keyboard = false;
 231:../../common/command.c ****                 debug_mouse    = false;
 232:../../common/command.c ****                 debug_enable   = false;
 233:../../common/command.c ****             } else {
 234:../../common/command.c ****                 print("\nDEBUG: enabled.\n");
 235:../../common/command.c ****                 debug_enable   = true;
 236:../../common/command.c ****             }
 237:../../common/command.c ****             break;
 238:../../common/command.c ****         case KC_X: // debug matrix toggle
 239:../../common/command.c ****             debug_matrix = !debug_matrix;
 240:../../common/command.c ****             if (debug_matrix) {
 241:../../common/command.c ****                 print("\nDEBUG: matrix enabled.\n");
 242:../../common/command.c ****                 debug_enable = true;
 243:../../common/command.c ****             } else {
 244:../../common/command.c ****                 print("\nDEBUG: matrix disabled.\n");
 245:../../common/command.c ****             }
 246:../../common/command.c ****             break;
 247:../../common/command.c ****         case KC_K: // debug keyboard toggle
 248:../../common/command.c ****             debug_keyboard = !debug_keyboard;
 249:../../common/command.c ****             if (debug_keyboard) {
 250:../../common/command.c ****                 print("\nDEBUG: keyboard enabled.\n");
 251:../../common/command.c ****                 debug_enable = true;
 252:../../common/command.c ****             } else {
 253:../../common/command.c ****                 print("\nDEBUG: keyboard disabled.\n");
 254:../../common/command.c ****             }
 255:../../common/command.c ****             break;
 256:../../common/command.c ****         case KC_M: // debug mouse toggle
 257:../../common/command.c ****             debug_mouse = !debug_mouse;
 258:../../common/command.c ****             if (debug_mouse) {
 259:../../common/command.c ****                 print("\nDEBUG: mouse enabled.\n");
 260:../../common/command.c ****                 debug_enable = true;
 261:../../common/command.c ****             } else {
 262:../../common/command.c ****                 print("\nDEBUG: mouse disabled.\n");
 263:../../common/command.c ****             }
 264:../../common/command.c ****             break;
 265:../../common/command.c ****         case KC_V: // print version & information
 266:../../common/command.c ****             print("\n\n----- Version -----\n");
 267:../../common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 268:../../common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 269:../../common/command.c ****                   "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
 270:../../common/command.c ****                   "VER: " STR(DEVICE_VER) "\n");
 271:../../common/command.c ****             print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 272:../../common/command.c ****             /* build options */
 273:../../common/command.c ****             print("OPTIONS:"
 274:../../common/command.c **** #ifdef PROTOCOL_PJRC
 275:../../common/command.c ****             " PJRC"
 276:../../common/command.c **** #endif
 277:../../common/command.c **** #ifdef PROTOCOL_LUFA
 278:../../common/command.c ****             " LUFA"
 279:../../common/command.c **** #endif
 280:../../common/command.c **** #ifdef PROTOCOL_VUSB
 281:../../common/command.c ****             " VUSB"
 282:../../common/command.c **** #endif
 283:../../common/command.c **** #ifdef BOOTMAGIC_ENABLE
 284:../../common/command.c ****             " BOOTMAGIC"
 285:../../common/command.c **** #endif
 286:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 287:../../common/command.c ****             " MOUSEKEY"
 288:../../common/command.c **** #endif
 289:../../common/command.c **** #ifdef EXTRAKEY_ENABLE
 290:../../common/command.c ****             " EXTRAKEY"
 291:../../common/command.c **** #endif
 292:../../common/command.c **** #ifdef CONSOLE_ENABLE
 293:../../common/command.c ****             " CONSOLE"
 294:../../common/command.c **** #endif
 295:../../common/command.c **** #ifdef COMMAND_ENABLE
 296:../../common/command.c ****             " COMMAND"
 297:../../common/command.c **** #endif
 298:../../common/command.c **** #ifdef NKRO_ENABLE
 299:../../common/command.c ****             " NKRO"
 300:../../common/command.c **** #endif
 301:../../common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 302:../../common/command.c ****             " KEYMAP_SECTION"
 303:../../common/command.c **** #endif
 304:../../common/command.c ****             " " STR(BOOTLOADER_SIZE) "\n");
 305:../../common/command.c **** 
 306:../../common/command.c ****             print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 307:../../common/command.c ****                   " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__
 308:../../common/command.c ****                   " AVR_ARCH: avr" STR(__AVR_ARCH__) "\n");
 309:../../common/command.c ****             break;
 310:../../common/command.c ****         case KC_T: // print timer
 311:../../common/command.c ****             print_val_hex32(timer_count);
 312:../../common/command.c ****             break;
 313:../../common/command.c ****         case KC_S:
 314:../../common/command.c ****             print("\n\n----- Status -----\n");
 315:../../common/command.c ****             print_val_hex8(host_keyboard_leds());
 316:../../common/command.c ****             print_val_hex8(keyboard_protocol);
 317:../../common/command.c ****             print_val_hex8(keyboard_idle);
 318:../../common/command.c **** #ifdef PROTOCOL_PJRC
 319:../../common/command.c ****             print_val_hex8(UDCON);
 320:../../common/command.c ****             print_val_hex8(UDIEN);
 321:../../common/command.c ****             print_val_hex8(UDINT);
 322:../../common/command.c ****             print_val_hex8(usb_keyboard_leds);
 323:../../common/command.c ****             print_val_hex8(usb_keyboard_idle_count);
 324:../../common/command.c **** #endif
 325:../../common/command.c **** 
 326:../../common/command.c **** #ifdef PROTOCOL_PJRC
 327:../../common/command.c **** #   if USB_COUNT_SOF
 328:../../common/command.c ****             print_val_hex8(usbSofCount);
 329:../../common/command.c **** #   endif
 330:../../common/command.c **** #endif
 331:../../common/command.c ****             break;
 332:../../common/command.c **** #ifdef NKRO_ENABLE
 333:../../common/command.c ****         case KC_N:
 334:../../common/command.c ****             clear_keyboard(); //Prevents stuck keys.
 335:../../common/command.c ****             keyboard_nkro = !keyboard_nkro;
 336:../../common/command.c ****             if (keyboard_nkro)
 337:../../common/command.c ****                 print("NKRO: enabled\n");
 338:../../common/command.c ****             else
 339:../../common/command.c ****                 print("NKRO: disabled\n");
 340:../../common/command.c ****             break;
 341:../../common/command.c **** #endif
 342:../../common/command.c **** #ifdef EXTRAKEY_ENABLE
 343:../../common/command.c ****         case KC_PSCREEN:
 344:../../common/command.c ****             // TODO: Power key should take this feature? otherwise any key during suspend.
 345:../../common/command.c **** #ifdef PROTOCOL_PJRC
 346:../../common/command.c ****             if (suspend && remote_wakeup) {
 347:../../common/command.c ****                 usb_remote_wakeup();
 348:../../common/command.c ****             } else {
 349:../../common/command.c ****                 host_system_send(SYSTEM_POWER_DOWN);
 350:../../common/command.c ****                 host_system_send(0);
 351:../../common/command.c ****                 _delay_ms(500);
 352:../../common/command.c ****             }
 353:../../common/command.c **** #else
 354:../../common/command.c ****             host_system_send(SYSTEM_POWER_DOWN);
 355:../../common/command.c ****             _delay_ms(100);
 356:../../common/command.c ****             host_system_send(0);
 357:../../common/command.c ****             _delay_ms(500);
 358:../../common/command.c **** #endif
 359:../../common/command.c ****             break;
 360:../../common/command.c **** #endif
 361:../../common/command.c ****         case KC_ESC:
 362:../../common/command.c ****         case KC_GRV:
 363:../../common/command.c ****         case KC_0:
 364:../../common/command.c ****             switch_default_layer(0);
 365:../../common/command.c ****             break;
 366:../../common/command.c ****         case KC_1 ... KC_9:
 367:../../common/command.c ****             switch_default_layer((code - KC_1) + 1);
 368:../../common/command.c ****             break;
 369:../../common/command.c ****         case KC_F1 ... KC_F12:
 370:../../common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 371:../../common/command.c ****             break;
 372:../../common/command.c ****         default:
 373:../../common/command.c ****             print("?");
 374:../../common/command.c ****             return false;
 375:../../common/command.c ****     }
 376:../../common/command.c ****     return true;
 377:../../common/command.c **** }
 378:../../common/command.c **** 
 379:../../common/command.c **** 
 380:../../common/command.c **** /***********************************************************
 381:../../common/command.c ****  * Command console
 382:../../common/command.c ****  ***********************************************************/
 383:../../common/command.c **** static void command_console_help(void)
 384:../../common/command.c **** {
  15               		.loc 1 384 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
 385:../../common/command.c ****     print("\n\n----- Console Help -----\n");
  21               		.loc 1 385 0
  22 0000 80E0      		ldi r24,lo8(__c.4947)
  23 0002 90E0      		ldi r25,hi8(__c.4947)
  24 0004 0E94 0000 		call xputs
  25               	.LVL0:
 386:../../common/command.c ****     print("ESC/q:	quit\n");
  26               		.loc 1 386 0
  27 0008 80E0      		ldi r24,lo8(__c.4949)
  28 000a 90E0      		ldi r25,hi8(__c.4949)
  29 000c 0E94 0000 		call xputs
  30               	.LVL1:
 387:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 388:../../common/command.c ****     print("m:	mousekey\n");
  31               		.loc 1 388 0
  32 0010 80E0      		ldi r24,lo8(__c.4951)
  33 0012 90E0      		ldi r25,hi8(__c.4951)
  34 0014 0C94 0000 		jmp xputs
  35               	.LVL2:
  36               		.cfi_endproc
  37               	.LFE110:
  39               		.section	.text.mousekey_console_help,"ax",@progbits
  41               	mousekey_console_help:
  42               	.LFB115:
 389:../../common/command.c **** #endif
 390:../../common/command.c **** }
 391:../../common/command.c **** 
 392:../../common/command.c **** static bool command_console(uint8_t code)
 393:../../common/command.c **** {
 394:../../common/command.c ****     switch (code) {
 395:../../common/command.c ****         case KC_H:
 396:../../common/command.c ****         case KC_SLASH: /* ? */
 397:../../common/command.c ****             command_console_help();
 398:../../common/command.c ****             break;
 399:../../common/command.c ****         case KC_Q:
 400:../../common/command.c ****         case KC_ESC:
 401:../../common/command.c ****             print("\nQuit Console Mode\n");
 402:../../common/command.c ****             command_state = ONESHOT;
 403:../../common/command.c ****             return false;
 404:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 405:../../common/command.c ****         case KC_M:
 406:../../common/command.c ****             mousekey_console_help();
 407:../../common/command.c ****             print("\nEnter Mousekey Console\n");
 408:../../common/command.c ****             print("M0>");
 409:../../common/command.c ****             command_state = MOUSEKEY;
 410:../../common/command.c ****             return true;
 411:../../common/command.c **** #endif
 412:../../common/command.c ****         default:
 413:../../common/command.c ****             print("?");
 414:../../common/command.c ****             return false;
 415:../../common/command.c ****     }
 416:../../common/command.c ****     print("C> ");
 417:../../common/command.c ****     return true;
 418:../../common/command.c **** }
 419:../../common/command.c **** 
 420:../../common/command.c **** 
 421:../../common/command.c **** #ifdef MOUSEKEY_ENABLE
 422:../../common/command.c **** /***********************************************************
 423:../../common/command.c ****  * Mousekey console
 424:../../common/command.c ****  ***********************************************************/
 425:../../common/command.c **** static uint8_t mousekey_param = 0;
 426:../../common/command.c **** 
 427:../../common/command.c **** static void mousekey_param_print(void)
 428:../../common/command.c **** {
 429:../../common/command.c ****     print("\n\n----- Mousekey Parameters -----\n");
 430:../../common/command.c ****     print("1: mk_delay(*10ms): "); pdec(mk_delay); print("\n");
 431:../../common/command.c ****     print("2: mk_interval(ms): "); pdec(mk_interval); print("\n");
 432:../../common/command.c ****     print("3: mk_max_speed: "); pdec(mk_max_speed); print("\n");
 433:../../common/command.c ****     print("4: mk_time_to_max: "); pdec(mk_time_to_max); print("\n");
 434:../../common/command.c ****     print("5: mk_wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 435:../../common/command.c ****     print("6: mk_wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 436:../../common/command.c **** }
 437:../../common/command.c **** 
 438:../../common/command.c **** #define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 439:../../common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc)
 440:../../common/command.c **** {
 441:../../common/command.c ****     switch (param) {
 442:../../common/command.c ****         case 1:
 443:../../common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 444:../../common/command.c ****                 mk_delay += inc;
 445:../../common/command.c ****             else
 446:../../common/command.c ****                 mk_delay = UINT8_MAX;
 447:../../common/command.c ****             PRINT_SET_VAL(mk_delay);
 448:../../common/command.c ****             break;
 449:../../common/command.c ****         case 2:
 450:../../common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 451:../../common/command.c ****                 mk_interval += inc;
 452:../../common/command.c ****             else
 453:../../common/command.c ****                 mk_interval = UINT8_MAX;
 454:../../common/command.c ****             PRINT_SET_VAL(mk_interval);
 455:../../common/command.c ****             break;
 456:../../common/command.c ****         case 3:
 457:../../common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 458:../../common/command.c ****                 mk_max_speed += inc;
 459:../../common/command.c ****             else
 460:../../common/command.c ****                 mk_max_speed = UINT8_MAX;
 461:../../common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 462:../../common/command.c ****             break;
 463:../../common/command.c ****         case 4:
 464:../../common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 465:../../common/command.c ****                 mk_time_to_max += inc;
 466:../../common/command.c ****             else
 467:../../common/command.c ****                 mk_time_to_max = UINT8_MAX;
 468:../../common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 469:../../common/command.c ****             break;
 470:../../common/command.c ****         case 5:
 471:../../common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 472:../../common/command.c ****                 mk_wheel_max_speed += inc;
 473:../../common/command.c ****             else
 474:../../common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 475:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 476:../../common/command.c ****             break;
 477:../../common/command.c ****         case 6:
 478:../../common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 479:../../common/command.c ****                 mk_wheel_time_to_max += inc;
 480:../../common/command.c ****             else
 481:../../common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 482:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 483:../../common/command.c ****             break;
 484:../../common/command.c ****     }
 485:../../common/command.c **** }
 486:../../common/command.c **** 
 487:../../common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec)
 488:../../common/command.c **** {
 489:../../common/command.c ****     switch (param) {
 490:../../common/command.c ****         case 1:
 491:../../common/command.c ****             if (mk_delay > dec)
 492:../../common/command.c ****                 mk_delay -= dec;
 493:../../common/command.c ****             else
 494:../../common/command.c ****                 mk_delay = 0;
 495:../../common/command.c ****             PRINT_SET_VAL(mk_delay);
 496:../../common/command.c ****             break;
 497:../../common/command.c ****         case 2:
 498:../../common/command.c ****             if (mk_interval > dec)
 499:../../common/command.c ****                 mk_interval -= dec;
 500:../../common/command.c ****             else
 501:../../common/command.c ****                 mk_interval = 0;
 502:../../common/command.c ****             PRINT_SET_VAL(mk_interval);
 503:../../common/command.c ****             break;
 504:../../common/command.c ****         case 3:
 505:../../common/command.c ****             if (mk_max_speed > dec)
 506:../../common/command.c ****                 mk_max_speed -= dec;
 507:../../common/command.c ****             else
 508:../../common/command.c ****                 mk_max_speed = 0;
 509:../../common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 510:../../common/command.c ****             break;
 511:../../common/command.c ****         case 4:
 512:../../common/command.c ****             if (mk_time_to_max > dec)
 513:../../common/command.c ****                 mk_time_to_max -= dec;
 514:../../common/command.c ****             else
 515:../../common/command.c ****                 mk_time_to_max = 0;
 516:../../common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 517:../../common/command.c ****             break;
 518:../../common/command.c ****         case 5:
 519:../../common/command.c ****             if (mk_wheel_max_speed > dec)
 520:../../common/command.c ****                 mk_wheel_max_speed -= dec;
 521:../../common/command.c ****             else
 522:../../common/command.c ****                 mk_wheel_max_speed = 0;
 523:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 524:../../common/command.c ****             break;
 525:../../common/command.c ****         case 6:
 526:../../common/command.c ****             if (mk_wheel_time_to_max > dec)
 527:../../common/command.c ****                 mk_wheel_time_to_max -= dec;
 528:../../common/command.c ****             else
 529:../../common/command.c ****                 mk_wheel_time_to_max = 0;
 530:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 531:../../common/command.c ****             break;
 532:../../common/command.c ****     }
 533:../../common/command.c **** }
 534:../../common/command.c **** 
 535:../../common/command.c **** static void mousekey_console_help(void)
 536:../../common/command.c **** {
  43               		.loc 1 536 0
  44               		.cfi_startproc
  45               	/* prologue: function */
  46               	/* frame size = 0 */
  47               	/* stack size = 0 */
  48               	.L__stack_usage = 0
 537:../../common/command.c ****     print("\n\n----- Mousekey Parameters Help -----\n");
  49               		.loc 1 537 0
  50 0000 80E0      		ldi r24,lo8(__c.5112)
  51 0002 90E0      		ldi r25,hi8(__c.5112)
  52 0004 0E94 0000 		call xputs
  53               	.LVL3:
 538:../../common/command.c ****     print("ESC/q:	quit\n");
  54               		.loc 1 538 0
  55 0008 80E0      		ldi r24,lo8(__c.5114)
  56 000a 90E0      		ldi r25,hi8(__c.5114)
  57 000c 0E94 0000 		call xputs
  58               	.LVL4:
 539:../../common/command.c ****     print("1:	select mk_delay(*10ms)\n");
  59               		.loc 1 539 0
  60 0010 80E0      		ldi r24,lo8(__c.5116)
  61 0012 90E0      		ldi r25,hi8(__c.5116)
  62 0014 0E94 0000 		call xputs
  63               	.LVL5:
 540:../../common/command.c ****     print("2:	select mk_interval(ms)\n");
  64               		.loc 1 540 0
  65 0018 80E0      		ldi r24,lo8(__c.5118)
  66 001a 90E0      		ldi r25,hi8(__c.5118)
  67 001c 0E94 0000 		call xputs
  68               	.LVL6:
 541:../../common/command.c ****     print("3:	select mk_max_speed\n");
  69               		.loc 1 541 0
  70 0020 80E0      		ldi r24,lo8(__c.5120)
  71 0022 90E0      		ldi r25,hi8(__c.5120)
  72 0024 0E94 0000 		call xputs
  73               	.LVL7:
 542:../../common/command.c ****     print("4:	select mk_time_to_max\n");
  74               		.loc 1 542 0
  75 0028 80E0      		ldi r24,lo8(__c.5122)
  76 002a 90E0      		ldi r25,hi8(__c.5122)
  77 002c 0E94 0000 		call xputs
  78               	.LVL8:
 543:../../common/command.c ****     print("5:	select mk_wheel_max_speed\n");
  79               		.loc 1 543 0
  80 0030 80E0      		ldi r24,lo8(__c.5124)
  81 0032 90E0      		ldi r25,hi8(__c.5124)
  82 0034 0E94 0000 		call xputs
  83               	.LVL9:
 544:../../common/command.c ****     print("6:	select mk_wheel_time_to_max\n");
  84               		.loc 1 544 0
  85 0038 80E0      		ldi r24,lo8(__c.5126)
  86 003a 90E0      		ldi r25,hi8(__c.5126)
  87 003c 0E94 0000 		call xputs
  88               	.LVL10:
 545:../../common/command.c ****     print("p:	print parameters\n");
  89               		.loc 1 545 0
  90 0040 80E0      		ldi r24,lo8(__c.5128)
  91 0042 90E0      		ldi r25,hi8(__c.5128)
  92 0044 0E94 0000 		call xputs
  93               	.LVL11:
 546:../../common/command.c ****     print("d:	set default values\n");
  94               		.loc 1 546 0
  95 0048 80E0      		ldi r24,lo8(__c.5130)
  96 004a 90E0      		ldi r25,hi8(__c.5130)
  97 004c 0E94 0000 		call xputs
  98               	.LVL12:
 547:../../common/command.c ****     print("up:	increase parameters(+1)\n");
  99               		.loc 1 547 0
 100 0050 80E0      		ldi r24,lo8(__c.5132)
 101 0052 90E0      		ldi r25,hi8(__c.5132)
 102 0054 0E94 0000 		call xputs
 103               	.LVL13:
 548:../../common/command.c ****     print("down:	decrease parameters(-1)\n");
 104               		.loc 1 548 0
 105 0058 80E0      		ldi r24,lo8(__c.5134)
 106 005a 90E0      		ldi r25,hi8(__c.5134)
 107 005c 0E94 0000 		call xputs
 108               	.LVL14:
 549:../../common/command.c ****     print("pgup:	increase parameters(+10)\n");
 109               		.loc 1 549 0
 110 0060 80E0      		ldi r24,lo8(__c.5136)
 111 0062 90E0      		ldi r25,hi8(__c.5136)
 112 0064 0E94 0000 		call xputs
 113               	.LVL15:
 550:../../common/command.c ****     print("pgdown:	decrease parameters(-10)\n");
 114               		.loc 1 550 0
 115 0068 80E0      		ldi r24,lo8(__c.5138)
 116 006a 90E0      		ldi r25,hi8(__c.5138)
 117 006c 0E94 0000 		call xputs
 118               	.LVL16:
 551:../../common/command.c ****     print("\nspeed = delta * max_speed * (repeat / time_to_max)\n");
 119               		.loc 1 551 0
 120 0070 80E0      		ldi r24,lo8(__c.5140)
 121 0072 90E0      		ldi r25,hi8(__c.5140)
 122 0074 0E94 0000 		call xputs
 123               	.LVL17:
 552:../../common/command.c ****     print("where delta: cursor="); pdec(MOUSEKEY_MOVE_DELTA);
 124               		.loc 1 552 0
 125 0078 80E0      		ldi r24,lo8(__c.5142)
 126 007a 90E0      		ldi r25,hi8(__c.5142)
 127 007c 0E94 0000 		call xputs
 128               	.LVL18:
 129 0080 1F92      		push __zero_reg__
 130               	.LCFI0:
 131               		.cfi_def_cfa_offset 3
 132 0082 85E0      		ldi r24,lo8(5)
 133 0084 8F93      		push r24
 134               	.LCFI1:
 135               		.cfi_def_cfa_offset 4
 136 0086 80E0      		ldi r24,lo8(__c.5144)
 137 0088 90E0      		ldi r25,hi8(__c.5144)
 138 008a 9F93      		push r25
 139               	.LCFI2:
 140               		.cfi_def_cfa_offset 5
 141 008c 8F93      		push r24
 142               	.LCFI3:
 143               		.cfi_def_cfa_offset 6
 144 008e 0E94 0000 		call __xprintf
 145               	.LVL19:
 553:../../common/command.c ****     print(", wheel="); pdec(MOUSEKEY_WHEEL_DELTA); print("\n");
 146               		.loc 1 553 0
 147 0092 80E0      		ldi r24,lo8(__c.5146)
 148 0094 90E0      		ldi r25,hi8(__c.5146)
 149 0096 0E94 0000 		call xputs
 150               	.LVL20:
 151 009a 1F92      		push __zero_reg__
 152               	.LCFI4:
 153               		.cfi_def_cfa_offset 7
 154 009c 81E0      		ldi r24,lo8(1)
 155 009e 8F93      		push r24
 156               	.LCFI5:
 157               		.cfi_def_cfa_offset 8
 158 00a0 80E0      		ldi r24,lo8(__c.5148)
 159 00a2 90E0      		ldi r25,hi8(__c.5148)
 160 00a4 9F93      		push r25
 161               	.LCFI6:
 162               		.cfi_def_cfa_offset 9
 163 00a6 8F93      		push r24
 164               	.LCFI7:
 165               		.cfi_def_cfa_offset 10
 166 00a8 0E94 0000 		call __xprintf
 167               	.LVL21:
 168 00ac 80E0      		ldi r24,lo8(__c.5150)
 169 00ae 90E0      		ldi r25,hi8(__c.5150)
 170 00b0 0E94 0000 		call xputs
 171               	.LVL22:
 554:../../common/command.c ****     print("See http://en.wikipedia.org/wiki/Mouse_keys\n");
 172               		.loc 1 554 0
 173 00b4 8DB7      		in r24,__SP_L__
 174 00b6 9EB7      		in r25,__SP_H__
 175 00b8 0896      		adiw r24,8
 176 00ba 0FB6      		in __tmp_reg__,__SREG__
 177 00bc F894      		cli
 178 00be 9EBF      		out __SP_H__,r25
 179 00c0 0FBE      		out __SREG__,__tmp_reg__
 180 00c2 8DBF      		out __SP_L__,r24
 181               	.LCFI8:
 182               		.cfi_def_cfa_offset 2
 183 00c4 80E0      		ldi r24,lo8(__c.5152)
 184 00c6 90E0      		ldi r25,hi8(__c.5152)
 185 00c8 0C94 0000 		jmp xputs
 186               	.LVL23:
 187               		.cfi_endproc
 188               	.LFE115:
 190               		.section	.text.mousekey_param_inc,"ax",@progbits
 192               	mousekey_param_inc:
 193               	.LFB113:
 440:../../common/command.c **** {
 194               		.loc 1 440 0
 195               		.cfi_startproc
 196               	.LVL24:
 197               	/* prologue: function */
 198               	/* frame size = 0 */
 199               	/* stack size = 0 */
 200               	.L__stack_usage = 0
 441:../../common/command.c ****     switch (param) {
 201               		.loc 1 441 0
 202 0000 8330      		cpi r24,lo8(3)
 203 0002 01F4      		brne .+2
 204 0004 00C0      		rjmp .L5
 205 0006 00F4      		brsh .L6
 206 0008 8130      		cpi r24,lo8(1)
 207 000a 01F0      		breq .L7
 208 000c 8230      		cpi r24,lo8(2)
 209 000e 01F0      		breq .L8
 210 0010 0895      		ret
 211               	.L6:
 212 0012 8530      		cpi r24,lo8(5)
 213 0014 01F4      		brne .+2
 214 0016 00C0      		rjmp .L9
 215 0018 00F4      		brsh .+2
 216 001a 00C0      		rjmp .L10
 217 001c 8630      		cpi r24,lo8(6)
 218 001e 01F4      		brne .+2
 219 0020 00C0      		rjmp .L11
 220 0022 0895      		ret
 221               	.L7:
 443:../../common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 222               		.loc 1 443 0
 223 0024 2091 0000 		lds r18,mk_delay
 224 0028 862F      		mov r24,r22
 225               	.LVL25:
 226 002a 90E0      		ldi r25,0
 227 002c 820F      		add r24,r18
 228 002e 911D      		adc r25,__zero_reg__
 229 0030 8F3F      		cpi r24,-1
 230 0032 9105      		cpc r25,__zero_reg__
 231 0034 00F4      		brsh .L12
 444:../../common/command.c ****                 mk_delay += inc;
 232               		.loc 1 444 0
 233 0036 620F      		add r22,r18
 234               	.LVL26:
 235 0038 6093 0000 		sts mk_delay,r22
 236 003c 00C0      		rjmp .L13
 237               	.LVL27:
 238               	.L12:
 446:../../common/command.c ****                 mk_delay = UINT8_MAX;
 239               		.loc 1 446 0
 240 003e 8FEF      		ldi r24,lo8(-1)
 241 0040 8093 0000 		sts mk_delay,r24
 242               	.LVL28:
 243               	.L13:
 447:../../common/command.c ****             PRINT_SET_VAL(mk_delay);
 244               		.loc 1 447 0
 245 0044 80E0      		ldi r24,lo8(__c.5020)
 246 0046 90E0      		ldi r25,hi8(__c.5020)
 247 0048 0E94 0000 		call xputs
 248               	.LVL29:
 249 004c 8091 0000 		lds r24,mk_delay
 250 0050 1F92      		push __zero_reg__
 251               	.LCFI9:
 252               		.cfi_def_cfa_offset 3
 253 0052 8F93      		push r24
 254               	.LCFI10:
 255               		.cfi_def_cfa_offset 4
 256 0054 80E0      		ldi r24,lo8(__c.5022)
 257 0056 90E0      		ldi r25,hi8(__c.5022)
 258 0058 9F93      		push r25
 259               	.LCFI11:
 260               		.cfi_def_cfa_offset 5
 261 005a 8F93      		push r24
 262               	.LCFI12:
 263               		.cfi_def_cfa_offset 6
 264 005c 0E94 0000 		call __xprintf
 265               	.LVL30:
 266 0060 0F90      		pop __tmp_reg__
 267 0062 0F90      		pop __tmp_reg__
 268 0064 0F90      		pop __tmp_reg__
 269 0066 0F90      		pop __tmp_reg__
 270               	.LCFI13:
 271               		.cfi_def_cfa_offset 2
 272 0068 80E0      		ldi r24,lo8(__c.5024)
 273 006a 90E0      		ldi r25,hi8(__c.5024)
 274 006c 00C0      		rjmp .L24
 275               	.LVL31:
 276               	.L8:
 450:../../common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 277               		.loc 1 450 0
 278 006e 2091 0000 		lds r18,mk_interval
 279 0072 862F      		mov r24,r22
 280               	.LVL32:
 281 0074 90E0      		ldi r25,0
 282 0076 820F      		add r24,r18
 283 0078 911D      		adc r25,__zero_reg__
 284 007a 8F3F      		cpi r24,-1
 285 007c 9105      		cpc r25,__zero_reg__
 286 007e 00F4      		brsh .L14
 451:../../common/command.c ****                 mk_interval += inc;
 287               		.loc 1 451 0
 288 0080 620F      		add r22,r18
 289               	.LVL33:
 290 0082 6093 0000 		sts mk_interval,r22
 291 0086 00C0      		rjmp .L15
 292               	.LVL34:
 293               	.L14:
 453:../../common/command.c ****                 mk_interval = UINT8_MAX;
 294               		.loc 1 453 0
 295 0088 8FEF      		ldi r24,lo8(-1)
 296 008a 8093 0000 		sts mk_interval,r24
 297               	.LVL35:
 298               	.L15:
 454:../../common/command.c ****             PRINT_SET_VAL(mk_interval);
 299               		.loc 1 454 0
 300 008e 80E0      		ldi r24,lo8(__c.5028)
 301 0090 90E0      		ldi r25,hi8(__c.5028)
 302 0092 0E94 0000 		call xputs
 303               	.LVL36:
 304 0096 8091 0000 		lds r24,mk_interval
 305 009a 1F92      		push __zero_reg__
 306               	.LCFI14:
 307               		.cfi_def_cfa_offset 3
 308 009c 8F93      		push r24
 309               	.LCFI15:
 310               		.cfi_def_cfa_offset 4
 311 009e 80E0      		ldi r24,lo8(__c.5030)
 312 00a0 90E0      		ldi r25,hi8(__c.5030)
 313 00a2 9F93      		push r25
 314               	.LCFI16:
 315               		.cfi_def_cfa_offset 5
 316 00a4 8F93      		push r24
 317               	.LCFI17:
 318               		.cfi_def_cfa_offset 6
 319 00a6 0E94 0000 		call __xprintf
 320               	.LVL37:
 321 00aa 0F90      		pop __tmp_reg__
 322 00ac 0F90      		pop __tmp_reg__
 323 00ae 0F90      		pop __tmp_reg__
 324 00b0 0F90      		pop __tmp_reg__
 325               	.LCFI18:
 326               		.cfi_def_cfa_offset 2
 327 00b2 80E0      		ldi r24,lo8(__c.5032)
 328 00b4 90E0      		ldi r25,hi8(__c.5032)
 329 00b6 00C0      		rjmp .L24
 330               	.LVL38:
 331               	.L5:
 457:../../common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 332               		.loc 1 457 0
 333 00b8 2091 0000 		lds r18,mk_max_speed
 334 00bc 862F      		mov r24,r22
 335               	.LVL39:
 336 00be 90E0      		ldi r25,0
 337 00c0 820F      		add r24,r18
 338 00c2 911D      		adc r25,__zero_reg__
 339 00c4 8F3F      		cpi r24,-1
 340 00c6 9105      		cpc r25,__zero_reg__
 341 00c8 00F4      		brsh .L16
 458:../../common/command.c ****                 mk_max_speed += inc;
 342               		.loc 1 458 0
 343 00ca 620F      		add r22,r18
 344               	.LVL40:
 345 00cc 6093 0000 		sts mk_max_speed,r22
 346 00d0 00C0      		rjmp .L17
 347               	.LVL41:
 348               	.L16:
 460:../../common/command.c ****                 mk_max_speed = UINT8_MAX;
 349               		.loc 1 460 0
 350 00d2 8FEF      		ldi r24,lo8(-1)
 351 00d4 8093 0000 		sts mk_max_speed,r24
 352               	.LVL42:
 353               	.L17:
 461:../../common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 354               		.loc 1 461 0
 355 00d8 80E0      		ldi r24,lo8(__c.5035)
 356 00da 90E0      		ldi r25,hi8(__c.5035)
 357 00dc 0E94 0000 		call xputs
 358               	.LVL43:
 359 00e0 8091 0000 		lds r24,mk_max_speed
 360 00e4 1F92      		push __zero_reg__
 361               	.LCFI19:
 362               		.cfi_def_cfa_offset 3
 363 00e6 8F93      		push r24
 364               	.LCFI20:
 365               		.cfi_def_cfa_offset 4
 366 00e8 80E0      		ldi r24,lo8(__c.5037)
 367 00ea 90E0      		ldi r25,hi8(__c.5037)
 368 00ec 9F93      		push r25
 369               	.LCFI21:
 370               		.cfi_def_cfa_offset 5
 371 00ee 8F93      		push r24
 372               	.LCFI22:
 373               		.cfi_def_cfa_offset 6
 374 00f0 0E94 0000 		call __xprintf
 375               	.LVL44:
 376 00f4 0F90      		pop __tmp_reg__
 377 00f6 0F90      		pop __tmp_reg__
 378 00f8 0F90      		pop __tmp_reg__
 379 00fa 0F90      		pop __tmp_reg__
 380               	.LCFI23:
 381               		.cfi_def_cfa_offset 2
 382 00fc 80E0      		ldi r24,lo8(__c.5039)
 383 00fe 90E0      		ldi r25,hi8(__c.5039)
 384 0100 00C0      		rjmp .L24
 385               	.LVL45:
 386               	.L10:
 464:../../common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 387               		.loc 1 464 0
 388 0102 2091 0000 		lds r18,mk_time_to_max
 389 0106 862F      		mov r24,r22
 390               	.LVL46:
 391 0108 90E0      		ldi r25,0
 392 010a 820F      		add r24,r18
 393 010c 911D      		adc r25,__zero_reg__
 394 010e 8F3F      		cpi r24,-1
 395 0110 9105      		cpc r25,__zero_reg__
 396 0112 00F4      		brsh .L18
 465:../../common/command.c ****                 mk_time_to_max += inc;
 397               		.loc 1 465 0
 398 0114 620F      		add r22,r18
 399               	.LVL47:
 400 0116 6093 0000 		sts mk_time_to_max,r22
 401 011a 00C0      		rjmp .L19
 402               	.LVL48:
 403               	.L18:
 467:../../common/command.c ****                 mk_time_to_max = UINT8_MAX;
 404               		.loc 1 467 0
 405 011c 8FEF      		ldi r24,lo8(-1)
 406 011e 8093 0000 		sts mk_time_to_max,r24
 407               	.LVL49:
 408               	.L19:
 468:../../common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 409               		.loc 1 468 0
 410 0122 80E0      		ldi r24,lo8(__c.5042)
 411 0124 90E0      		ldi r25,hi8(__c.5042)
 412 0126 0E94 0000 		call xputs
 413               	.LVL50:
 414 012a 8091 0000 		lds r24,mk_time_to_max
 415 012e 1F92      		push __zero_reg__
 416               	.LCFI24:
 417               		.cfi_def_cfa_offset 3
 418 0130 8F93      		push r24
 419               	.LCFI25:
 420               		.cfi_def_cfa_offset 4
 421 0132 80E0      		ldi r24,lo8(__c.5044)
 422 0134 90E0      		ldi r25,hi8(__c.5044)
 423 0136 9F93      		push r25
 424               	.LCFI26:
 425               		.cfi_def_cfa_offset 5
 426 0138 8F93      		push r24
 427               	.LCFI27:
 428               		.cfi_def_cfa_offset 6
 429 013a 0E94 0000 		call __xprintf
 430               	.LVL51:
 431 013e 0F90      		pop __tmp_reg__
 432 0140 0F90      		pop __tmp_reg__
 433 0142 0F90      		pop __tmp_reg__
 434 0144 0F90      		pop __tmp_reg__
 435               	.LCFI28:
 436               		.cfi_def_cfa_offset 2
 437 0146 80E0      		ldi r24,lo8(__c.5046)
 438 0148 90E0      		ldi r25,hi8(__c.5046)
 439 014a 00C0      		rjmp .L24
 440               	.LVL52:
 441               	.L9:
 471:../../common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 442               		.loc 1 471 0
 443 014c 2091 0000 		lds r18,mk_wheel_max_speed
 444 0150 862F      		mov r24,r22
 445               	.LVL53:
 446 0152 90E0      		ldi r25,0
 447 0154 820F      		add r24,r18
 448 0156 911D      		adc r25,__zero_reg__
 449 0158 8F3F      		cpi r24,-1
 450 015a 9105      		cpc r25,__zero_reg__
 451 015c 00F4      		brsh .L20
 472:../../common/command.c ****                 mk_wheel_max_speed += inc;
 452               		.loc 1 472 0
 453 015e 620F      		add r22,r18
 454               	.LVL54:
 455 0160 6093 0000 		sts mk_wheel_max_speed,r22
 456 0164 00C0      		rjmp .L21
 457               	.LVL55:
 458               	.L20:
 474:../../common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 459               		.loc 1 474 0
 460 0166 8FEF      		ldi r24,lo8(-1)
 461 0168 8093 0000 		sts mk_wheel_max_speed,r24
 462               	.LVL56:
 463               	.L21:
 475:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 464               		.loc 1 475 0
 465 016c 80E0      		ldi r24,lo8(__c.5049)
 466 016e 90E0      		ldi r25,hi8(__c.5049)
 467 0170 0E94 0000 		call xputs
 468               	.LVL57:
 469 0174 8091 0000 		lds r24,mk_wheel_max_speed
 470 0178 1F92      		push __zero_reg__
 471               	.LCFI29:
 472               		.cfi_def_cfa_offset 3
 473 017a 8F93      		push r24
 474               	.LCFI30:
 475               		.cfi_def_cfa_offset 4
 476 017c 80E0      		ldi r24,lo8(__c.5051)
 477 017e 90E0      		ldi r25,hi8(__c.5051)
 478 0180 9F93      		push r25
 479               	.LCFI31:
 480               		.cfi_def_cfa_offset 5
 481 0182 8F93      		push r24
 482               	.LCFI32:
 483               		.cfi_def_cfa_offset 6
 484 0184 0E94 0000 		call __xprintf
 485               	.LVL58:
 486 0188 0F90      		pop __tmp_reg__
 487 018a 0F90      		pop __tmp_reg__
 488 018c 0F90      		pop __tmp_reg__
 489 018e 0F90      		pop __tmp_reg__
 490               	.LCFI33:
 491               		.cfi_def_cfa_offset 2
 492 0190 80E0      		ldi r24,lo8(__c.5053)
 493 0192 90E0      		ldi r25,hi8(__c.5053)
 494 0194 00C0      		rjmp .L24
 495               	.LVL59:
 496               	.L11:
 478:../../common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 497               		.loc 1 478 0
 498 0196 2091 0000 		lds r18,mk_wheel_time_to_max
 499 019a 862F      		mov r24,r22
 500               	.LVL60:
 501 019c 90E0      		ldi r25,0
 502 019e 820F      		add r24,r18
 503 01a0 911D      		adc r25,__zero_reg__
 504 01a2 8F3F      		cpi r24,-1
 505 01a4 9105      		cpc r25,__zero_reg__
 506 01a6 00F4      		brsh .L22
 479:../../common/command.c ****                 mk_wheel_time_to_max += inc;
 507               		.loc 1 479 0
 508 01a8 620F      		add r22,r18
 509               	.LVL61:
 510 01aa 6093 0000 		sts mk_wheel_time_to_max,r22
 511 01ae 00C0      		rjmp .L23
 512               	.LVL62:
 513               	.L22:
 481:../../common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 514               		.loc 1 481 0
 515 01b0 8FEF      		ldi r24,lo8(-1)
 516 01b2 8093 0000 		sts mk_wheel_time_to_max,r24
 517               	.LVL63:
 518               	.L23:
 482:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 519               		.loc 1 482 0
 520 01b6 80E0      		ldi r24,lo8(__c.5056)
 521 01b8 90E0      		ldi r25,hi8(__c.5056)
 522 01ba 0E94 0000 		call xputs
 523               	.LVL64:
 524 01be 8091 0000 		lds r24,mk_wheel_time_to_max
 525 01c2 1F92      		push __zero_reg__
 526               	.LCFI34:
 527               		.cfi_def_cfa_offset 3
 528 01c4 8F93      		push r24
 529               	.LCFI35:
 530               		.cfi_def_cfa_offset 4
 531 01c6 80E0      		ldi r24,lo8(__c.5058)
 532 01c8 90E0      		ldi r25,hi8(__c.5058)
 533 01ca 9F93      		push r25
 534               	.LCFI36:
 535               		.cfi_def_cfa_offset 5
 536 01cc 8F93      		push r24
 537               	.LCFI37:
 538               		.cfi_def_cfa_offset 6
 539 01ce 0E94 0000 		call __xprintf
 540               	.LVL65:
 541 01d2 0F90      		pop __tmp_reg__
 542 01d4 0F90      		pop __tmp_reg__
 543 01d6 0F90      		pop __tmp_reg__
 544 01d8 0F90      		pop __tmp_reg__
 545               	.LCFI38:
 546               		.cfi_def_cfa_offset 2
 547 01da 80E0      		ldi r24,lo8(__c.5060)
 548 01dc 90E0      		ldi r25,hi8(__c.5060)
 549               	.L24:
 550 01de 0C94 0000 		jmp xputs
 551               	.LVL66:
 552               		.cfi_endproc
 553               	.LFE113:
 555               		.section	.text.mousekey_param_dec,"ax",@progbits
 557               	mousekey_param_dec:
 558               	.LFB114:
 488:../../common/command.c **** {
 559               		.loc 1 488 0
 560               		.cfi_startproc
 561               	.LVL67:
 562               	/* prologue: function */
 563               	/* frame size = 0 */
 564               	/* stack size = 0 */
 565               	.L__stack_usage = 0
 489:../../common/command.c ****     switch (param) {
 566               		.loc 1 489 0
 567 0000 8330      		cpi r24,lo8(3)
 568 0002 01F4      		brne .+2
 569 0004 00C0      		rjmp .L28
 570 0006 00F4      		brsh .L29
 571 0008 8130      		cpi r24,lo8(1)
 572 000a 01F0      		breq .L30
 573 000c 8230      		cpi r24,lo8(2)
 574 000e 01F0      		breq .L31
 575 0010 0895      		ret
 576               	.L29:
 577 0012 8530      		cpi r24,lo8(5)
 578 0014 01F4      		brne .+2
 579 0016 00C0      		rjmp .L32
 580 0018 00F4      		brsh .+2
 581 001a 00C0      		rjmp .L33
 582 001c 8630      		cpi r24,lo8(6)
 583 001e 01F4      		brne .+2
 584 0020 00C0      		rjmp .L34
 585 0022 0895      		ret
 586               	.L30:
 491:../../common/command.c ****             if (mk_delay > dec)
 587               		.loc 1 491 0
 588 0024 8091 0000 		lds r24,mk_delay
 589               	.LVL68:
 590 0028 6817      		cp r22,r24
 591 002a 00F4      		brsh .L35
 492:../../common/command.c ****                 mk_delay -= dec;
 592               		.loc 1 492 0
 593 002c 861B      		sub r24,r22
 594 002e 8093 0000 		sts mk_delay,r24
 595 0032 00C0      		rjmp .L36
 596               	.L35:
 494:../../common/command.c ****                 mk_delay = 0;
 597               		.loc 1 494 0
 598 0034 1092 0000 		sts mk_delay,__zero_reg__
 599               	.L36:
 495:../../common/command.c ****             PRINT_SET_VAL(mk_delay);
 600               		.loc 1 495 0
 601 0038 80E0      		ldi r24,lo8(__c.5067)
 602 003a 90E0      		ldi r25,hi8(__c.5067)
 603 003c 0E94 0000 		call xputs
 604               	.LVL69:
 605 0040 8091 0000 		lds r24,mk_delay
 606 0044 1F92      		push __zero_reg__
 607               	.LCFI39:
 608               		.cfi_def_cfa_offset 3
 609 0046 8F93      		push r24
 610               	.LCFI40:
 611               		.cfi_def_cfa_offset 4
 612 0048 80E0      		ldi r24,lo8(__c.5069)
 613 004a 90E0      		ldi r25,hi8(__c.5069)
 614 004c 9F93      		push r25
 615               	.LCFI41:
 616               		.cfi_def_cfa_offset 5
 617 004e 8F93      		push r24
 618               	.LCFI42:
 619               		.cfi_def_cfa_offset 6
 620 0050 0E94 0000 		call __xprintf
 621               	.LVL70:
 622 0054 0F90      		pop __tmp_reg__
 623 0056 0F90      		pop __tmp_reg__
 624 0058 0F90      		pop __tmp_reg__
 625 005a 0F90      		pop __tmp_reg__
 626               	.LCFI43:
 627               		.cfi_def_cfa_offset 2
 628 005c 80E0      		ldi r24,lo8(__c.5071)
 629 005e 90E0      		ldi r25,hi8(__c.5071)
 630 0060 00C0      		rjmp .L47
 631               	.LVL71:
 632               	.L31:
 498:../../common/command.c ****             if (mk_interval > dec)
 633               		.loc 1 498 0
 634 0062 8091 0000 		lds r24,mk_interval
 635               	.LVL72:
 636 0066 6817      		cp r22,r24
 637 0068 00F4      		brsh .L37
 499:../../common/command.c ****                 mk_interval -= dec;
 638               		.loc 1 499 0
 639 006a 861B      		sub r24,r22
 640 006c 8093 0000 		sts mk_interval,r24
 641 0070 00C0      		rjmp .L38
 642               	.L37:
 501:../../common/command.c ****                 mk_interval = 0;
 643               		.loc 1 501 0
 644 0072 1092 0000 		sts mk_interval,__zero_reg__
 645               	.L38:
 502:../../common/command.c ****             PRINT_SET_VAL(mk_interval);
 646               		.loc 1 502 0
 647 0076 80E0      		ldi r24,lo8(__c.5075)
 648 0078 90E0      		ldi r25,hi8(__c.5075)
 649 007a 0E94 0000 		call xputs
 650               	.LVL73:
 651 007e 8091 0000 		lds r24,mk_interval
 652 0082 1F92      		push __zero_reg__
 653               	.LCFI44:
 654               		.cfi_def_cfa_offset 3
 655 0084 8F93      		push r24
 656               	.LCFI45:
 657               		.cfi_def_cfa_offset 4
 658 0086 80E0      		ldi r24,lo8(__c.5077)
 659 0088 90E0      		ldi r25,hi8(__c.5077)
 660 008a 9F93      		push r25
 661               	.LCFI46:
 662               		.cfi_def_cfa_offset 5
 663 008c 8F93      		push r24
 664               	.LCFI47:
 665               		.cfi_def_cfa_offset 6
 666 008e 0E94 0000 		call __xprintf
 667               	.LVL74:
 668 0092 0F90      		pop __tmp_reg__
 669 0094 0F90      		pop __tmp_reg__
 670 0096 0F90      		pop __tmp_reg__
 671 0098 0F90      		pop __tmp_reg__
 672               	.LCFI48:
 673               		.cfi_def_cfa_offset 2
 674 009a 80E0      		ldi r24,lo8(__c.5079)
 675 009c 90E0      		ldi r25,hi8(__c.5079)
 676 009e 00C0      		rjmp .L47
 677               	.LVL75:
 678               	.L28:
 505:../../common/command.c ****             if (mk_max_speed > dec)
 679               		.loc 1 505 0
 680 00a0 8091 0000 		lds r24,mk_max_speed
 681               	.LVL76:
 682 00a4 6817      		cp r22,r24
 683 00a6 00F4      		brsh .L39
 506:../../common/command.c ****                 mk_max_speed -= dec;
 684               		.loc 1 506 0
 685 00a8 861B      		sub r24,r22
 686 00aa 8093 0000 		sts mk_max_speed,r24
 687 00ae 00C0      		rjmp .L40
 688               	.L39:
 508:../../common/command.c ****                 mk_max_speed = 0;
 689               		.loc 1 508 0
 690 00b0 1092 0000 		sts mk_max_speed,__zero_reg__
 691               	.L40:
 509:../../common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 692               		.loc 1 509 0
 693 00b4 80E0      		ldi r24,lo8(__c.5082)
 694 00b6 90E0      		ldi r25,hi8(__c.5082)
 695 00b8 0E94 0000 		call xputs
 696               	.LVL77:
 697 00bc 8091 0000 		lds r24,mk_max_speed
 698 00c0 1F92      		push __zero_reg__
 699               	.LCFI49:
 700               		.cfi_def_cfa_offset 3
 701 00c2 8F93      		push r24
 702               	.LCFI50:
 703               		.cfi_def_cfa_offset 4
 704 00c4 80E0      		ldi r24,lo8(__c.5084)
 705 00c6 90E0      		ldi r25,hi8(__c.5084)
 706 00c8 9F93      		push r25
 707               	.LCFI51:
 708               		.cfi_def_cfa_offset 5
 709 00ca 8F93      		push r24
 710               	.LCFI52:
 711               		.cfi_def_cfa_offset 6
 712 00cc 0E94 0000 		call __xprintf
 713               	.LVL78:
 714 00d0 0F90      		pop __tmp_reg__
 715 00d2 0F90      		pop __tmp_reg__
 716 00d4 0F90      		pop __tmp_reg__
 717 00d6 0F90      		pop __tmp_reg__
 718               	.LCFI53:
 719               		.cfi_def_cfa_offset 2
 720 00d8 80E0      		ldi r24,lo8(__c.5086)
 721 00da 90E0      		ldi r25,hi8(__c.5086)
 722 00dc 00C0      		rjmp .L47
 723               	.LVL79:
 724               	.L33:
 512:../../common/command.c ****             if (mk_time_to_max > dec)
 725               		.loc 1 512 0
 726 00de 8091 0000 		lds r24,mk_time_to_max
 727               	.LVL80:
 728 00e2 6817      		cp r22,r24
 729 00e4 00F4      		brsh .L41
 513:../../common/command.c ****                 mk_time_to_max -= dec;
 730               		.loc 1 513 0
 731 00e6 861B      		sub r24,r22
 732 00e8 8093 0000 		sts mk_time_to_max,r24
 733 00ec 00C0      		rjmp .L42
 734               	.L41:
 515:../../common/command.c ****                 mk_time_to_max = 0;
 735               		.loc 1 515 0
 736 00ee 1092 0000 		sts mk_time_to_max,__zero_reg__
 737               	.L42:
 516:../../common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 738               		.loc 1 516 0
 739 00f2 80E0      		ldi r24,lo8(__c.5089)
 740 00f4 90E0      		ldi r25,hi8(__c.5089)
 741 00f6 0E94 0000 		call xputs
 742               	.LVL81:
 743 00fa 8091 0000 		lds r24,mk_time_to_max
 744 00fe 1F92      		push __zero_reg__
 745               	.LCFI54:
 746               		.cfi_def_cfa_offset 3
 747 0100 8F93      		push r24
 748               	.LCFI55:
 749               		.cfi_def_cfa_offset 4
 750 0102 80E0      		ldi r24,lo8(__c.5091)
 751 0104 90E0      		ldi r25,hi8(__c.5091)
 752 0106 9F93      		push r25
 753               	.LCFI56:
 754               		.cfi_def_cfa_offset 5
 755 0108 8F93      		push r24
 756               	.LCFI57:
 757               		.cfi_def_cfa_offset 6
 758 010a 0E94 0000 		call __xprintf
 759               	.LVL82:
 760 010e 0F90      		pop __tmp_reg__
 761 0110 0F90      		pop __tmp_reg__
 762 0112 0F90      		pop __tmp_reg__
 763 0114 0F90      		pop __tmp_reg__
 764               	.LCFI58:
 765               		.cfi_def_cfa_offset 2
 766 0116 80E0      		ldi r24,lo8(__c.5093)
 767 0118 90E0      		ldi r25,hi8(__c.5093)
 768 011a 00C0      		rjmp .L47
 769               	.LVL83:
 770               	.L32:
 519:../../common/command.c ****             if (mk_wheel_max_speed > dec)
 771               		.loc 1 519 0
 772 011c 8091 0000 		lds r24,mk_wheel_max_speed
 773               	.LVL84:
 774 0120 6817      		cp r22,r24
 775 0122 00F4      		brsh .L43
 520:../../common/command.c ****                 mk_wheel_max_speed -= dec;
 776               		.loc 1 520 0
 777 0124 861B      		sub r24,r22
 778 0126 8093 0000 		sts mk_wheel_max_speed,r24
 779 012a 00C0      		rjmp .L44
 780               	.L43:
 522:../../common/command.c ****                 mk_wheel_max_speed = 0;
 781               		.loc 1 522 0
 782 012c 1092 0000 		sts mk_wheel_max_speed,__zero_reg__
 783               	.L44:
 523:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 784               		.loc 1 523 0
 785 0130 80E0      		ldi r24,lo8(__c.5096)
 786 0132 90E0      		ldi r25,hi8(__c.5096)
 787 0134 0E94 0000 		call xputs
 788               	.LVL85:
 789 0138 8091 0000 		lds r24,mk_wheel_max_speed
 790 013c 1F92      		push __zero_reg__
 791               	.LCFI59:
 792               		.cfi_def_cfa_offset 3
 793 013e 8F93      		push r24
 794               	.LCFI60:
 795               		.cfi_def_cfa_offset 4
 796 0140 80E0      		ldi r24,lo8(__c.5098)
 797 0142 90E0      		ldi r25,hi8(__c.5098)
 798 0144 9F93      		push r25
 799               	.LCFI61:
 800               		.cfi_def_cfa_offset 5
 801 0146 8F93      		push r24
 802               	.LCFI62:
 803               		.cfi_def_cfa_offset 6
 804 0148 0E94 0000 		call __xprintf
 805               	.LVL86:
 806 014c 0F90      		pop __tmp_reg__
 807 014e 0F90      		pop __tmp_reg__
 808 0150 0F90      		pop __tmp_reg__
 809 0152 0F90      		pop __tmp_reg__
 810               	.LCFI63:
 811               		.cfi_def_cfa_offset 2
 812 0154 80E0      		ldi r24,lo8(__c.5100)
 813 0156 90E0      		ldi r25,hi8(__c.5100)
 814 0158 00C0      		rjmp .L47
 815               	.LVL87:
 816               	.L34:
 526:../../common/command.c ****             if (mk_wheel_time_to_max > dec)
 817               		.loc 1 526 0
 818 015a 8091 0000 		lds r24,mk_wheel_time_to_max
 819               	.LVL88:
 820 015e 6817      		cp r22,r24
 821 0160 00F4      		brsh .L45
 527:../../common/command.c ****                 mk_wheel_time_to_max -= dec;
 822               		.loc 1 527 0
 823 0162 861B      		sub r24,r22
 824 0164 8093 0000 		sts mk_wheel_time_to_max,r24
 825 0168 00C0      		rjmp .L46
 826               	.L45:
 529:../../common/command.c ****                 mk_wheel_time_to_max = 0;
 827               		.loc 1 529 0
 828 016a 1092 0000 		sts mk_wheel_time_to_max,__zero_reg__
 829               	.L46:
 530:../../common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 830               		.loc 1 530 0
 831 016e 80E0      		ldi r24,lo8(__c.5103)
 832 0170 90E0      		ldi r25,hi8(__c.5103)
 833 0172 0E94 0000 		call xputs
 834               	.LVL89:
 835 0176 8091 0000 		lds r24,mk_wheel_time_to_max
 836 017a 1F92      		push __zero_reg__
 837               	.LCFI64:
 838               		.cfi_def_cfa_offset 3
 839 017c 8F93      		push r24
 840               	.LCFI65:
 841               		.cfi_def_cfa_offset 4
 842 017e 80E0      		ldi r24,lo8(__c.5105)
 843 0180 90E0      		ldi r25,hi8(__c.5105)
 844 0182 9F93      		push r25
 845               	.LCFI66:
 846               		.cfi_def_cfa_offset 5
 847 0184 8F93      		push r24
 848               	.LCFI67:
 849               		.cfi_def_cfa_offset 6
 850 0186 0E94 0000 		call __xprintf
 851               	.LVL90:
 852 018a 0F90      		pop __tmp_reg__
 853 018c 0F90      		pop __tmp_reg__
 854 018e 0F90      		pop __tmp_reg__
 855 0190 0F90      		pop __tmp_reg__
 856               	.LCFI68:
 857               		.cfi_def_cfa_offset 2
 858 0192 80E0      		ldi r24,lo8(__c.5107)
 859 0194 90E0      		ldi r25,hi8(__c.5107)
 860               	.L47:
 861 0196 0C94 0000 		jmp xputs
 862               	.LVL91:
 863               		.cfi_endproc
 864               	.LFE114:
 866               		.section	.text.switch_default_layer,"ax",@progbits
 868               	switch_default_layer:
 869               	.LFB118:
 555:../../common/command.c **** }
 556:../../common/command.c **** 
 557:../../common/command.c **** static bool mousekey_console(uint8_t code)
 558:../../common/command.c **** {
 559:../../common/command.c ****     switch (code) {
 560:../../common/command.c ****         case KC_H:
 561:../../common/command.c ****         case KC_SLASH: /* ? */
 562:../../common/command.c ****             mousekey_console_help();
 563:../../common/command.c ****             break;
 564:../../common/command.c ****         case KC_Q:
 565:../../common/command.c ****         case KC_ESC:
 566:../../common/command.c ****             mousekey_param = 0;
 567:../../common/command.c ****             print("\nQuit Mousekey Console\n");
 568:../../common/command.c ****             print("C> ");
 569:../../common/command.c ****             command_state = CONSOLE;
 570:../../common/command.c ****             return false;
 571:../../common/command.c ****         case KC_P:
 572:../../common/command.c ****             mousekey_param_print();
 573:../../common/command.c ****             break;
 574:../../common/command.c ****         case KC_1:
 575:../../common/command.c ****         case KC_2:
 576:../../common/command.c ****         case KC_3:
 577:../../common/command.c ****         case KC_4:
 578:../../common/command.c ****         case KC_5:
 579:../../common/command.c ****         case KC_6:
 580:../../common/command.c ****         case KC_7:
 581:../../common/command.c ****         case KC_8:
 582:../../common/command.c ****         case KC_9:
 583:../../common/command.c ****         case KC_0:
 584:../../common/command.c ****             mousekey_param = numkey2num(code);
 585:../../common/command.c ****             print("selected parameter: "); pdec(mousekey_param); print("\n");
 586:../../common/command.c ****             break;
 587:../../common/command.c ****         case KC_UP:
 588:../../common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 589:../../common/command.c ****             break;
 590:../../common/command.c ****         case KC_DOWN:
 591:../../common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 592:../../common/command.c ****             break;
 593:../../common/command.c ****         case KC_PGUP:
 594:../../common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 595:../../common/command.c ****             break;
 596:../../common/command.c ****         case KC_PGDN:
 597:../../common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 598:../../common/command.c ****             break;
 599:../../common/command.c ****         case KC_D:
 600:../../common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 601:../../common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 602:../../common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 603:../../common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 604:../../common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 605:../../common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 606:../../common/command.c ****             print("set default values.\n");
 607:../../common/command.c ****             break;
 608:../../common/command.c ****         default:
 609:../../common/command.c ****             print("?");
 610:../../common/command.c ****             return false;
 611:../../common/command.c ****     }
 612:../../common/command.c ****     print("M"); pdec(mousekey_param); print("> ");
 613:../../common/command.c ****     return true;
 614:../../common/command.c **** }
 615:../../common/command.c **** #endif
 616:../../common/command.c **** 
 617:../../common/command.c **** 
 618:../../common/command.c **** /***********************************************************
 619:../../common/command.c ****  * Utilities
 620:../../common/command.c ****  ***********************************************************/
 621:../../common/command.c **** static uint8_t numkey2num(uint8_t code)
 622:../../common/command.c **** {
 623:../../common/command.c ****     switch (code) {
 624:../../common/command.c ****         case KC_1: return 1;
 625:../../common/command.c ****         case KC_2: return 2;
 626:../../common/command.c ****         case KC_3: return 3;
 627:../../common/command.c ****         case KC_4: return 4;
 628:../../common/command.c ****         case KC_5: return 5;
 629:../../common/command.c ****         case KC_6: return 6;
 630:../../common/command.c ****         case KC_7: return 7;
 631:../../common/command.c ****         case KC_8: return 8;
 632:../../common/command.c ****         case KC_9: return 9;
 633:../../common/command.c ****         case KC_0: return 0;
 634:../../common/command.c ****     }
 635:../../common/command.c ****     return 0;
 636:../../common/command.c **** }
 637:../../common/command.c **** 
 638:../../common/command.c **** static void switch_default_layer(uint8_t layer)
 639:../../common/command.c **** {
 870               		.loc 1 639 0
 871               		.cfi_startproc
 872               	.LVL92:
 873 0000 CF93      		push r28
 874               	.LCFI69:
 875               		.cfi_def_cfa_offset 3
 876               		.cfi_offset 28, -2
 877               	/* prologue: function */
 878               	/* frame size = 0 */
 879               	/* stack size = 1 */
 880               	.L__stack_usage = 1
 881 0002 C82F      		mov r28,r24
 640:../../common/command.c ****     print("switch_default_layer: "); print_dec(biton32(default_layer_state));
 882               		.loc 1 640 0
 883 0004 80E0      		ldi r24,lo8(__c.5215)
 884 0006 90E0      		ldi r25,hi8(__c.5215)
 885               	.LVL93:
 886 0008 0E94 0000 		call xputs
 887               	.LVL94:
 888 000c 6091 0000 		lds r22,default_layer_state
 889 0010 7091 0000 		lds r23,default_layer_state+1
 890 0014 8091 0000 		lds r24,default_layer_state+2
 891 0018 9091 0000 		lds r25,default_layer_state+3
 892 001c 0E94 0000 		call biton32
 893               	.LVL95:
 894 0020 1F92      		push __zero_reg__
 895               	.LCFI70:
 896               		.cfi_def_cfa_offset 4
 897 0022 8F93      		push r24
 898               	.LCFI71:
 899               		.cfi_def_cfa_offset 5
 900 0024 20E0      		ldi r18,lo8(__c.5217)
 901 0026 30E0      		ldi r19,hi8(__c.5217)
 902 0028 3F93      		push r19
 903               	.LCFI72:
 904               		.cfi_def_cfa_offset 6
 905 002a 2F93      		push r18
 906               	.LCFI73:
 907               		.cfi_def_cfa_offset 7
 908 002c 0E94 0000 		call __xprintf
 909               	.LVL96:
 641:../../common/command.c ****     print(" to "); print_dec(layer); print("\n");
 910               		.loc 1 641 0
 911 0030 80E0      		ldi r24,lo8(__c.5219)
 912 0032 90E0      		ldi r25,hi8(__c.5219)
 913 0034 0E94 0000 		call xputs
 914               	.LVL97:
 915 0038 1F92      		push __zero_reg__
 916               	.LCFI74:
 917               		.cfi_def_cfa_offset 8
 918 003a CF93      		push r28
 919               	.LCFI75:
 920               		.cfi_def_cfa_offset 9
 921 003c 20E0      		ldi r18,lo8(__c.5221)
 922 003e 30E0      		ldi r19,hi8(__c.5221)
 923 0040 3F93      		push r19
 924               	.LCFI76:
 925               		.cfi_def_cfa_offset 10
 926 0042 2F93      		push r18
 927               	.LCFI77:
 928               		.cfi_def_cfa_offset 11
 929 0044 0E94 0000 		call __xprintf
 930               	.LVL98:
 931 0048 80E0      		ldi r24,lo8(__c.5223)
 932 004a 90E0      		ldi r25,hi8(__c.5223)
 933 004c 0E94 0000 		call xputs
 934               	.LVL99:
 642:../../common/command.c ****     default_layer_set(1UL<<layer);
 935               		.loc 1 642 0
 936 0050 61E0      		ldi r22,lo8(1)
 937 0052 70E0      		ldi r23,0
 938 0054 80E0      		ldi r24,0
 939 0056 90E0      		ldi r25,0
 940 0058 00C0      		rjmp 2f
 941               		1:
 942 005a 660F      		lsl r22
 943 005c 771F      		rol r23
 944 005e 881F      		rol r24
 945 0060 991F      		rol r25
 946               		2:
 947 0062 CA95      		dec r28
 948 0064 02F4      		brpl 1b
 949 0066 0E94 0000 		call default_layer_set
 950               	.LVL100:
 643:../../common/command.c ****     clear_keyboard();
 951               		.loc 1 643 0
 952 006a 8DB7      		in r24,__SP_L__
 953 006c 9EB7      		in r25,__SP_H__
 954 006e 0896      		adiw r24,8
 955 0070 0FB6      		in __tmp_reg__,__SREG__
 956 0072 F894      		cli
 957 0074 9EBF      		out __SP_H__,r25
 958 0076 0FBE      		out __SREG__,__tmp_reg__
 959 0078 8DBF      		out __SP_L__,r24
 960               	.LCFI78:
 961               		.cfi_def_cfa_offset 3
 962               	/* epilogue start */
 644:../../common/command.c **** }
 963               		.loc 1 644 0
 964 007a CF91      		pop r28
 965               	.LVL101:
 643:../../common/command.c ****     clear_keyboard();
 966               		.loc 1 643 0
 967 007c 0C94 0000 		jmp clear_keyboard
 968               	.LVL102:
 969               		.cfi_endproc
 970               	.LFE118:
 972               		.section	.text.command_common,"ax",@progbits
 974               	command_common:
 975               	.LFB109:
 177:../../common/command.c **** {
 976               		.loc 1 177 0
 977               		.cfi_startproc
 978 0000 CF93      		push r28
 979               	.LCFI79:
 980               		.cfi_def_cfa_offset 3
 981               		.cfi_offset 28, -2
 982               	/* prologue: function */
 983               	/* frame size = 0 */
 984               	/* stack size = 1 */
 985               	.L__stack_usage = 1
 179:../../common/command.c ****     switch (code) {
 986               		.loc 1 179 0
 987 0002 482F      		mov r20,r24
 988 0004 50E0      		ldi r21,0
 989 0006 FA01      		movw r30,r20
 990 0008 3697      		sbiw r30,6
 991 000a E334      		cpi r30,67
 992 000c F105      		cpc r31,__zero_reg__
 993 000e 00F0      		brlo .+2
 994 0010 00C0      		rjmp .L50
 995 0012 E050      		subi r30,lo8(-(gs(.L52)))
 996 0014 F040      		sbci r31,hi8(-(gs(.L52)))
 997 0016 0C94 0000 		jmp __tablejump2__
 998               		.section	.progmem.gcc_sw_table.command_common,"a",@progbits
 999               		.p2align	1
 1000               	.L52:
 1001 0000 0000      		.word gs(.L51)
 1002 0002 0000      		.word gs(.L53)
 1003 0004 0000      		.word gs(.L54)
 1004 0006 0000      		.word gs(.L50)
 1005 0008 0000      		.word gs(.L50)
 1006 000a 0000      		.word gs(.L55)
 1007 000c 0000      		.word gs(.L50)
 1008 000e 0000      		.word gs(.L50)
 1009 0010 0000      		.word gs(.L56)
 1010 0012 0000      		.word gs(.L50)
 1011 0014 0000      		.word gs(.L57)
 1012 0016 0000      		.word gs(.L58)
 1013 0018 0000      		.word gs(.L50)
 1014 001a 0000      		.word gs(.L50)
 1015 001c 0000      		.word gs(.L50)
 1016 001e 0000      		.word gs(.L50)
 1017 0020 0000      		.word gs(.L59)
 1018 0022 0000      		.word gs(.L60)
 1019 0024 0000      		.word gs(.L50)
 1020 0026 0000      		.word gs(.L61)
 1021 0028 0000      		.word gs(.L50)
 1022 002a 0000      		.word gs(.L62)
 1023 002c 0000      		.word gs(.L50)
 1024 002e 0000      		.word gs(.L50)
 1025 0030 0000      		.word gs(.L63)
 1026 0032 0000      		.word gs(.L63)
 1027 0034 0000      		.word gs(.L63)
 1028 0036 0000      		.word gs(.L63)
 1029 0038 0000      		.word gs(.L63)
 1030 003a 0000      		.word gs(.L63)
 1031 003c 0000      		.word gs(.L63)
 1032 003e 0000      		.word gs(.L63)
 1033 0040 0000      		.word gs(.L63)
 1034 0042 0000      		.word gs(.L64)
 1035 0044 0000      		.word gs(.L50)
 1036 0046 0000      		.word gs(.L64)
 1037 0048 0000      		.word gs(.L50)
 1038 004a 0000      		.word gs(.L50)
 1039 004c 0000      		.word gs(.L50)
 1040 004e 0000      		.word gs(.L50)
 1041 0050 0000      		.word gs(.L50)
 1042 0052 0000      		.word gs(.L50)
 1043 0054 0000      		.word gs(.L50)
 1044 0056 0000      		.word gs(.L50)
 1045 0058 0000      		.word gs(.L50)
 1046 005a 0000      		.word gs(.L50)
 1047 005c 0000      		.word gs(.L50)
 1048 005e 0000      		.word gs(.L64)
 1049 0060 0000      		.word gs(.L50)
 1050 0062 0000      		.word gs(.L50)
 1051 0064 0000      		.word gs(.L55)
 1052 0066 0000      		.word gs(.L65)
 1053 0068 0000      		.word gs(.L66)
 1054 006a 0000      		.word gs(.L66)
 1055 006c 0000      		.word gs(.L66)
 1056 006e 0000      		.word gs(.L66)
 1057 0070 0000      		.word gs(.L66)
 1058 0072 0000      		.word gs(.L66)
 1059 0074 0000      		.word gs(.L66)
 1060 0076 0000      		.word gs(.L66)
 1061 0078 0000      		.word gs(.L66)
 1062 007a 0000      		.word gs(.L66)
 1063 007c 0000      		.word gs(.L66)
 1064 007e 0000      		.word gs(.L66)
 1065 0080 0000      		.word gs(.L67)
 1066 0082 0000      		.word gs(.L50)
 1067 0084 0000      		.word gs(.L68)
 1068               		.section	.text.command_common
 1069               	.L54:
 190:../../common/command.c ****             print("eeconfig:\n");
 1070               		.loc 1 190 0
 1071 001a 80E0      		ldi r24,lo8(__c.4865)
 1072 001c 90E0      		ldi r25,hi8(__c.4865)
 1073 001e 0E94 0000 		call xputs
 1074               	.LBB140:
 1075               	.LBB141:
 144:../../common/command.c ****     print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
 1076               		.loc 1 144 0
 1077 0022 80E0      		ldi r24,lo8(__c.4768)
 1078 0024 90E0      		ldi r25,hi8(__c.4768)
 1079 0026 0E94 0000 		call xputs
 1080 002a 0E94 0000 		call eeconfig_read_default_layer
 1081 002e 1F92      		push __zero_reg__
 1082               	.LCFI80:
 1083               		.cfi_def_cfa_offset 4
 1084 0030 8F93      		push r24
 1085               	.LCFI81:
 1086               		.cfi_def_cfa_offset 5
 1087 0032 80E0      		ldi r24,lo8(__c.4770)
 1088 0034 90E0      		ldi r25,hi8(__c.4770)
 1089 0036 9F93      		push r25
 1090               	.LCFI82:
 1091               		.cfi_def_cfa_offset 6
 1092 0038 8F93      		push r24
 1093               	.LCFI83:
 1094               		.cfi_def_cfa_offset 7
 1095 003a 0E94 0000 		call __xprintf
 1096 003e 80E0      		ldi r24,lo8(__c.4772)
 1097 0040 90E0      		ldi r25,hi8(__c.4772)
 1098 0042 0E94 0000 		call xputs
 147:../../common/command.c ****     dc.raw = eeconfig_read_debug();
 1099               		.loc 1 147 0
 1100 0046 0E94 0000 		call eeconfig_read_debug
 1101 004a C82F      		mov r28,r24
 148:../../common/command.c ****     print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
 1102               		.loc 1 148 0
 1103 004c 80E0      		ldi r24,lo8(__c.4775)
 1104 004e 90E0      		ldi r25,hi8(__c.4775)
 1105 0050 0E94 0000 		call xputs
 1106 0054 1F92      		push __zero_reg__
 1107               	.LCFI84:
 1108               		.cfi_def_cfa_offset 8
 1109 0056 CF93      		push r28
 1110               	.LCFI85:
 1111               		.cfi_def_cfa_offset 9
 1112 0058 20E0      		ldi r18,lo8(__c.4777)
 1113 005a 30E0      		ldi r19,hi8(__c.4777)
 1114 005c 3F93      		push r19
 1115               	.LCFI86:
 1116               		.cfi_def_cfa_offset 10
 1117 005e 2F93      		push r18
 1118               	.LCFI87:
 1119               		.cfi_def_cfa_offset 11
 1120 0060 0E94 0000 		call __xprintf
 1121 0064 80E0      		ldi r24,lo8(__c.4779)
 1122 0066 90E0      		ldi r25,hi8(__c.4779)
 1123 0068 0E94 0000 		call xputs
 149:../../common/command.c ****     print(".enable: "); print_dec(dc.enable); print("\n");
 1124               		.loc 1 149 0
 1125 006c 80E0      		ldi r24,lo8(__c.4781)
 1126 006e 90E0      		ldi r25,hi8(__c.4781)
 1127 0070 0E94 0000 		call xputs
 1128 0074 8C2F      		mov r24,r28
 1129 0076 8170      		andi r24,1
 1130 0078 1F92      		push __zero_reg__
 1131               	.LCFI88:
 1132               		.cfi_def_cfa_offset 12
 1133 007a 8F93      		push r24
 1134               	.LCFI89:
 1135               		.cfi_def_cfa_offset 13
 1136 007c 20E0      		ldi r18,lo8(__c.4783)
 1137 007e 30E0      		ldi r19,hi8(__c.4783)
 1138 0080 3F93      		push r19
 1139               	.LCFI90:
 1140               		.cfi_def_cfa_offset 14
 1141 0082 2F93      		push r18
 1142               	.LCFI91:
 1143               		.cfi_def_cfa_offset 15
 1144 0084 0E94 0000 		call __xprintf
 1145 0088 80E0      		ldi r24,lo8(__c.4785)
 1146 008a 90E0      		ldi r25,hi8(__c.4785)
 1147 008c 0E94 0000 		call xputs
 150:../../common/command.c ****     print(".matrix: "); print_dec(dc.matrix); print("\n");
 1148               		.loc 1 150 0
 1149 0090 80E0      		ldi r24,lo8(__c.4787)
 1150 0092 90E0      		ldi r25,hi8(__c.4787)
 1151 0094 0E94 0000 		call xputs
 1152 0098 C1FB      		bst r28,1
 1153 009a 8827      		clr r24
 1154 009c 80F9      		bld r24,0
 1155 009e 1F92      		push __zero_reg__
 1156               	.LCFI92:
 1157               		.cfi_def_cfa_offset 16
 1158 00a0 8F93      		push r24
 1159               	.LCFI93:
 1160               		.cfi_def_cfa_offset 17
 1161 00a2 20E0      		ldi r18,lo8(__c.4789)
 1162 00a4 30E0      		ldi r19,hi8(__c.4789)
 1163 00a6 3F93      		push r19
 1164               	.LCFI94:
 1165               		.cfi_def_cfa_offset 18
 1166 00a8 2F93      		push r18
 1167               	.LCFI95:
 1168               		.cfi_def_cfa_offset 19
 1169 00aa 0E94 0000 		call __xprintf
 1170 00ae 80E0      		ldi r24,lo8(__c.4791)
 1171 00b0 90E0      		ldi r25,hi8(__c.4791)
 1172 00b2 0E94 0000 		call xputs
 151:../../common/command.c ****     print(".keyboard: "); print_dec(dc.keyboard); print("\n");
 1173               		.loc 1 151 0
 1174 00b6 80E0      		ldi r24,lo8(__c.4793)
 1175 00b8 90E0      		ldi r25,hi8(__c.4793)
 1176 00ba 0E94 0000 		call xputs
 1177 00be C2FB      		bst r28,2
 1178 00c0 8827      		clr r24
 1179 00c2 80F9      		bld r24,0
 1180 00c4 1F92      		push __zero_reg__
 1181               	.LCFI96:
 1182               		.cfi_def_cfa_offset 20
 1183 00c6 8F93      		push r24
 1184               	.LCFI97:
 1185               		.cfi_def_cfa_offset 21
 1186 00c8 20E0      		ldi r18,lo8(__c.4795)
 1187 00ca 30E0      		ldi r19,hi8(__c.4795)
 1188 00cc 3F93      		push r19
 1189               	.LCFI98:
 1190               		.cfi_def_cfa_offset 22
 1191 00ce 2F93      		push r18
 1192               	.LCFI99:
 1193               		.cfi_def_cfa_offset 23
 1194 00d0 0E94 0000 		call __xprintf
 1195 00d4 80E0      		ldi r24,lo8(__c.4797)
 1196 00d6 90E0      		ldi r25,hi8(__c.4797)
 1197 00d8 0E94 0000 		call xputs
 152:../../common/command.c ****     print(".mouse: "); print_dec(dc.mouse); print("\n");
 1198               		.loc 1 152 0
 1199 00dc 80E0      		ldi r24,lo8(__c.4799)
 1200 00de 90E0      		ldi r25,hi8(__c.4799)
 1201 00e0 0E94 0000 		call xputs
 1202 00e4 C3FB      		bst r28,3
 1203 00e6 CC27      		clr r28
 1204 00e8 C0F9      		bld r28,0
 1205 00ea 1F92      		push __zero_reg__
 1206               	.LCFI100:
 1207               		.cfi_def_cfa_offset 24
 1208 00ec CF93      		push r28
 1209               	.LCFI101:
 1210               		.cfi_def_cfa_offset 25
 1211 00ee 80E0      		ldi r24,lo8(__c.4801)
 1212 00f0 90E0      		ldi r25,hi8(__c.4801)
 1213 00f2 9F93      		push r25
 1214               	.LCFI102:
 1215               		.cfi_def_cfa_offset 26
 1216 00f4 8F93      		push r24
 1217               	.LCFI103:
 1218               		.cfi_def_cfa_offset 27
 1219 00f6 0E94 0000 		call __xprintf
 1220 00fa 80E0      		ldi r24,lo8(__c.4803)
 1221 00fc 90E0      		ldi r25,hi8(__c.4803)
 1222 00fe 0E94 0000 		call xputs
 155:../../common/command.c ****     kc.raw = eeconfig_read_keymap();
 1223               		.loc 1 155 0
 1224 0102 0E94 0000 		call eeconfig_read_keymap
 1225 0106 C82F      		mov r28,r24
 156:../../common/command.c ****     print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
 1226               		.loc 1 156 0
 1227 0108 80E0      		ldi r24,lo8(__c.4806)
 1228 010a 90E0      		ldi r25,hi8(__c.4806)
 1229 010c 0E94 0000 		call xputs
 1230 0110 1F92      		push __zero_reg__
 1231               	.LCFI104:
 1232               		.cfi_def_cfa_offset 28
 1233 0112 CF93      		push r28
 1234               	.LCFI105:
 1235               		.cfi_def_cfa_offset 29
 1236 0114 20E0      		ldi r18,lo8(__c.4808)
 1237 0116 30E0      		ldi r19,hi8(__c.4808)
 1238 0118 3F93      		push r19
 1239               	.LCFI106:
 1240               		.cfi_def_cfa_offset 30
 1241 011a 2F93      		push r18
 1242               	.LCFI107:
 1243               		.cfi_def_cfa_offset 31
 1244 011c 0E94 0000 		call __xprintf
 1245 0120 80E0      		ldi r24,lo8(__c.4810)
 1246 0122 90E0      		ldi r25,hi8(__c.4810)
 1247 0124 0E94 0000 		call xputs
 157:../../common/command.c ****     print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
 1248               		.loc 1 157 0
 1249 0128 80E0      		ldi r24,lo8(__c.4812)
 1250 012a 90E0      		ldi r25,hi8(__c.4812)
 1251 012c 0E94 0000 		call xputs
 1252 0130 8C2F      		mov r24,r28
 1253 0132 8170      		andi r24,1
 1254 0134 1F92      		push __zero_reg__
 1255               	.LCFI108:
 1256               		.cfi_def_cfa_offset 32
 1257 0136 8F93      		push r24
 1258               	.LCFI109:
 1259               		.cfi_def_cfa_offset 33
 1260 0138 20E0      		ldi r18,lo8(__c.4814)
 1261 013a 30E0      		ldi r19,hi8(__c.4814)
 1262 013c 3F93      		push r19
 1263               	.LCFI110:
 1264               		.cfi_def_cfa_offset 34
 1265 013e 2F93      		push r18
 1266               	.LCFI111:
 1267               		.cfi_def_cfa_offset 35
 1268 0140 0E94 0000 		call __xprintf
 1269 0144 8DB7      		in r24,__SP_L__
 1270 0146 9EB7      		in r25,__SP_H__
 1271 0148 8096      		adiw r24,32
 1272 014a 0FB6      		in __tmp_reg__,__SREG__
 1273 014c F894      		cli
 1274 014e 9EBF      		out __SP_H__,r25
 1275 0150 0FBE      		out __SREG__,__tmp_reg__
 1276 0152 8DBF      		out __SP_L__,r24
 1277               	.LCFI112:
 1278               		.cfi_def_cfa_offset 3
 1279 0154 80E0      		ldi r24,lo8(__c.4816)
 1280 0156 90E0      		ldi r25,hi8(__c.4816)
 1281 0158 0E94 0000 		call xputs
 158:../../common/command.c ****     print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
 1282               		.loc 1 158 0
 1283 015c 80E0      		ldi r24,lo8(__c.4818)
 1284 015e 90E0      		ldi r25,hi8(__c.4818)
 1285 0160 0E94 0000 		call xputs
 1286 0164 C1FB      		bst r28,1
 1287 0166 8827      		clr r24
 1288 0168 80F9      		bld r24,0
 1289 016a 1F92      		push __zero_reg__
 1290               	.LCFI113:
 1291               		.cfi_def_cfa_offset 4
 1292 016c 8F93      		push r24
 1293               	.LCFI114:
 1294               		.cfi_def_cfa_offset 5
 1295 016e 20E0      		ldi r18,lo8(__c.4820)
 1296 0170 30E0      		ldi r19,hi8(__c.4820)
 1297 0172 3F93      		push r19
 1298               	.LCFI115:
 1299               		.cfi_def_cfa_offset 6
 1300 0174 2F93      		push r18
 1301               	.LCFI116:
 1302               		.cfi_def_cfa_offset 7
 1303 0176 0E94 0000 		call __xprintf
 1304 017a 80E0      		ldi r24,lo8(__c.4822)
 1305 017c 90E0      		ldi r25,hi8(__c.4822)
 1306 017e 0E94 0000 		call xputs
 159:../../common/command.c ****     print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
 1307               		.loc 1 159 0
 1308 0182 80E0      		ldi r24,lo8(__c.4824)
 1309 0184 90E0      		ldi r25,hi8(__c.4824)
 1310 0186 0E94 0000 		call xputs
 1311 018a C2FB      		bst r28,2
 1312 018c 8827      		clr r24
 1313 018e 80F9      		bld r24,0
 1314 0190 1F92      		push __zero_reg__
 1315               	.LCFI117:
 1316               		.cfi_def_cfa_offset 8
 1317 0192 8F93      		push r24
 1318               	.LCFI118:
 1319               		.cfi_def_cfa_offset 9
 1320 0194 20E0      		ldi r18,lo8(__c.4826)
 1321 0196 30E0      		ldi r19,hi8(__c.4826)
 1322 0198 3F93      		push r19
 1323               	.LCFI119:
 1324               		.cfi_def_cfa_offset 10
 1325 019a 2F93      		push r18
 1326               	.LCFI120:
 1327               		.cfi_def_cfa_offset 11
 1328 019c 0E94 0000 		call __xprintf
 1329 01a0 80E0      		ldi r24,lo8(__c.4828)
 1330 01a2 90E0      		ldi r25,hi8(__c.4828)
 1331 01a4 0E94 0000 		call xputs
 160:../../common/command.c ****     print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
 1332               		.loc 1 160 0
 1333 01a8 80E0      		ldi r24,lo8(__c.4830)
 1334 01aa 90E0      		ldi r25,hi8(__c.4830)
 1335 01ac 0E94 0000 		call xputs
 1336 01b0 C3FB      		bst r28,3
 1337 01b2 8827      		clr r24
 1338 01b4 80F9      		bld r24,0
 1339 01b6 1F92      		push __zero_reg__
 1340               	.LCFI121:
 1341               		.cfi_def_cfa_offset 12
 1342 01b8 8F93      		push r24
 1343               	.LCFI122:
 1344               		.cfi_def_cfa_offset 13
 1345 01ba 20E0      		ldi r18,lo8(__c.4832)
 1346 01bc 30E0      		ldi r19,hi8(__c.4832)
 1347 01be 3F93      		push r19
 1348               	.LCFI123:
 1349               		.cfi_def_cfa_offset 14
 1350 01c0 2F93      		push r18
 1351               	.LCFI124:
 1352               		.cfi_def_cfa_offset 15
 1353 01c2 0E94 0000 		call __xprintf
 1354 01c6 80E0      		ldi r24,lo8(__c.4834)
 1355 01c8 90E0      		ldi r25,hi8(__c.4834)
 1356 01ca 0E94 0000 		call xputs
 161:../../common/command.c ****     print(".no_gui: "); print_dec(kc.no_gui); print("\n");
 1357               		.loc 1 161 0
 1358 01ce 80E0      		ldi r24,lo8(__c.4836)
 1359 01d0 90E0      		ldi r25,hi8(__c.4836)
 1360 01d2 0E94 0000 		call xputs
 1361 01d6 C4FB      		bst r28,4
 1362 01d8 8827      		clr r24
 1363 01da 80F9      		bld r24,0
 1364 01dc 1F92      		push __zero_reg__
 1365               	.LCFI125:
 1366               		.cfi_def_cfa_offset 16
 1367 01de 8F93      		push r24
 1368               	.LCFI126:
 1369               		.cfi_def_cfa_offset 17
 1370 01e0 20E0      		ldi r18,lo8(__c.4838)
 1371 01e2 30E0      		ldi r19,hi8(__c.4838)
 1372 01e4 3F93      		push r19
 1373               	.LCFI127:
 1374               		.cfi_def_cfa_offset 18
 1375 01e6 2F93      		push r18
 1376               	.LCFI128:
 1377               		.cfi_def_cfa_offset 19
 1378 01e8 0E94 0000 		call __xprintf
 1379 01ec 80E0      		ldi r24,lo8(__c.4840)
 1380 01ee 90E0      		ldi r25,hi8(__c.4840)
 1381 01f0 0E94 0000 		call xputs
 162:../../common/command.c ****     print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
 1382               		.loc 1 162 0
 1383 01f4 80E0      		ldi r24,lo8(__c.4842)
 1384 01f6 90E0      		ldi r25,hi8(__c.4842)
 1385 01f8 0E94 0000 		call xputs
 1386 01fc C5FB      		bst r28,5
 1387 01fe 8827      		clr r24
 1388 0200 80F9      		bld r24,0
 1389 0202 1F92      		push __zero_reg__
 1390               	.LCFI129:
 1391               		.cfi_def_cfa_offset 20
 1392 0204 8F93      		push r24
 1393               	.LCFI130:
 1394               		.cfi_def_cfa_offset 21
 1395 0206 20E0      		ldi r18,lo8(__c.4844)
 1396 0208 30E0      		ldi r19,hi8(__c.4844)
 1397 020a 3F93      		push r19
 1398               	.LCFI131:
 1399               		.cfi_def_cfa_offset 22
 1400 020c 2F93      		push r18
 1401               	.LCFI132:
 1402               		.cfi_def_cfa_offset 23
 1403 020e 0E94 0000 		call __xprintf
 1404 0212 80E0      		ldi r24,lo8(__c.4846)
 1405 0214 90E0      		ldi r25,hi8(__c.4846)
 1406 0216 0E94 0000 		call xputs
 163:../../common/command.c ****     print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
 1407               		.loc 1 163 0
 1408 021a 80E0      		ldi r24,lo8(__c.4848)
 1409 021c 90E0      		ldi r25,hi8(__c.4848)
 1410 021e 0E94 0000 		call xputs
 1411 0222 C6FB      		bst r28,6
 1412 0224 8827      		clr r24
 1413 0226 80F9      		bld r24,0
 1414 0228 1F92      		push __zero_reg__
 1415               	.LCFI133:
 1416               		.cfi_def_cfa_offset 24
 1417 022a 8F93      		push r24
 1418               	.LCFI134:
 1419               		.cfi_def_cfa_offset 25
 1420 022c 20E0      		ldi r18,lo8(__c.4850)
 1421 022e 30E0      		ldi r19,hi8(__c.4850)
 1422 0230 3F93      		push r19
 1423               	.LCFI135:
 1424               		.cfi_def_cfa_offset 26
 1425 0232 2F93      		push r18
 1426               	.LCFI136:
 1427               		.cfi_def_cfa_offset 27
 1428 0234 0E94 0000 		call __xprintf
 1429 0238 80E0      		ldi r24,lo8(__c.4852)
 1430 023a 90E0      		ldi r25,hi8(__c.4852)
 1431 023c 0E94 0000 		call xputs
 164:../../common/command.c ****     print(".nkro: "); print_dec(kc.nkro); print("\n");
 1432               		.loc 1 164 0
 1433 0240 80E0      		ldi r24,lo8(__c.4854)
 1434 0242 90E0      		ldi r25,hi8(__c.4854)
 1435 0244 0E94 0000 		call xputs
 1436 0248 C7FB      		bst r28,7
 1437 024a CC27      		clr r28
 1438 024c C0F9      		bld r28,0
 1439 024e 1F92      		push __zero_reg__
 1440               	.LCFI137:
 1441               		.cfi_def_cfa_offset 28
 1442 0250 CF93      		push r28
 1443               	.LCFI138:
 1444               		.cfi_def_cfa_offset 29
 1445 0252 80E0      		ldi r24,lo8(__c.4856)
 1446 0254 90E0      		ldi r25,hi8(__c.4856)
 1447 0256 9F93      		push r25
 1448               	.LCFI139:
 1449               		.cfi_def_cfa_offset 30
 1450 0258 8F93      		push r24
 1451               	.LCFI140:
 1452               		.cfi_def_cfa_offset 31
 1453 025a 0E94 0000 		call __xprintf
 1454 025e 80E0      		ldi r24,lo8(__c.4858)
 1455 0260 90E0      		ldi r25,hi8(__c.4858)
 1456 0262 0E94 0000 		call xputs
 1457 0266 8DB7      		in r24,__SP_L__
 1458 0268 9EB7      		in r25,__SP_H__
 1459 026a 4C96      		adiw r24,28
 1460 026c 0FB6      		in __tmp_reg__,__SREG__
 1461 026e F894      		cli
 1462 0270 9EBF      		out __SP_H__,r25
 1463 0272 0FBE      		out __SREG__,__tmp_reg__
 1464 0274 8DBF      		out __SP_L__,r24
 1465               	.LCFI141:
 1466               		.cfi_def_cfa_offset 3
 1467 0276 00C0      		rjmp .L77
 1468               	.L65:
 1469               	.LBE141:
 1470               	.LBE140:
 195:../../common/command.c ****             if (host_get_driver()) {
 1471               		.loc 1 195 0
 1472 0278 0E94 0000 		call host_get_driver
 1473 027c 892B      		or r24,r25
 1474 027e 01F0      		breq .L70
 196:../../common/command.c ****                 host_driver = host_get_driver();
 1475               		.loc 1 196 0
 1476 0280 0E94 0000 		call host_get_driver
 1477 0284 9093 0000 		sts host_driver.4863+1,r25
 1478 0288 8093 0000 		sts host_driver.4863,r24
 197:../../common/command.c ****                 clear_keyboard();
 1479               		.loc 1 197 0
 1480 028c 0E94 0000 		call clear_keyboard
 198:../../common/command.c ****                 host_set_driver(0);
 1481               		.loc 1 198 0
 1482 0290 80E0      		ldi r24,0
 1483 0292 90E0      		ldi r25,0
 1484 0294 0E94 0000 		call host_set_driver
 199:../../common/command.c ****                 print("Locked.\n");
 1485               		.loc 1 199 0
 1486 0298 80E0      		ldi r24,lo8(__c.4869)
 1487 029a 90E0      		ldi r25,hi8(__c.4869)
 1488 029c 00C0      		rjmp .L76
 1489               	.L70:
 201:../../common/command.c ****                 host_set_driver(host_driver);
 1490               		.loc 1 201 0
 1491 029e 8091 0000 		lds r24,host_driver.4863
 1492 02a2 9091 0000 		lds r25,host_driver.4863+1
 1493 02a6 0E94 0000 		call host_set_driver
 202:../../common/command.c ****                 print("Unlocked.\n");
 1494               		.loc 1 202 0
 1495 02aa 80E0      		ldi r24,lo8(__c.4871)
 1496 02ac 90E0      		ldi r25,hi8(__c.4871)
 1497               	.L76:
 1498 02ae 0E94 0000 		call xputs
 1499               	.L77:
 376:../../common/command.c ****     return true;
 1500               		.loc 1 376 0
 1501 02b2 C1E0      		ldi r28,lo8(1)
 1502 02b4 00C0      		rjmp .L69
 1503               	.L55:
 1504               	.LBB142:
 1505               	.LBB143:
 115:../../common/command.c ****     print("\n\n----- Command Help -----\n");
 1506               		.loc 1 115 0
 1507 02b6 80E0      		ldi r24,lo8(__c.4727)
 1508 02b8 90E0      		ldi r25,hi8(__c.4727)
 1509 02ba 0E94 0000 		call xputs
 116:../../common/command.c ****     print("c:	enter console mode\n");
 1510               		.loc 1 116 0
 1511 02be 80E0      		ldi r24,lo8(__c.4729)
 1512 02c0 90E0      		ldi r25,hi8(__c.4729)
 1513 02c2 0E94 0000 		call xputs
 117:../../common/command.c ****     print("d:	toggle debug enable\n");
 1514               		.loc 1 117 0
 1515 02c6 80E0      		ldi r24,lo8(__c.4731)
 1516 02c8 90E0      		ldi r25,hi8(__c.4731)
 1517 02ca 0E94 0000 		call xputs
 118:../../common/command.c ****     print("x:	toggle matrix debug\n");
 1518               		.loc 1 118 0
 1519 02ce 80E0      		ldi r24,lo8(__c.4733)
 1520 02d0 90E0      		ldi r25,hi8(__c.4733)
 1521 02d2 0E94 0000 		call xputs
 119:../../common/command.c ****     print("k:	toggle keyboard debug\n");
 1522               		.loc 1 119 0
 1523 02d6 80E0      		ldi r24,lo8(__c.4735)
 1524 02d8 90E0      		ldi r25,hi8(__c.4735)
 1525 02da 0E94 0000 		call xputs
 120:../../common/command.c ****     print("m:	toggle mouse debug\n");
 1526               		.loc 1 120 0
 1527 02de 80E0      		ldi r24,lo8(__c.4737)
 1528 02e0 90E0      		ldi r25,hi8(__c.4737)
 1529 02e2 0E94 0000 		call xputs
 124:../../common/command.c ****     print("v:	print device version & info\n");
 1530               		.loc 1 124 0
 1531 02e6 80E0      		ldi r24,lo8(__c.4739)
 1532 02e8 90E0      		ldi r25,hi8(__c.4739)
 1533 02ea 0E94 0000 		call xputs
 125:../../common/command.c ****     print("t:	print timer count\n");
 1534               		.loc 1 125 0
 1535 02ee 80E0      		ldi r24,lo8(__c.4741)
 1536 02f0 90E0      		ldi r25,hi8(__c.4741)
 1537 02f2 0E94 0000 		call xputs
 126:../../common/command.c ****     print("s:	print status\n");
 1538               		.loc 1 126 0
 1539 02f6 80E0      		ldi r24,lo8(__c.4743)
 1540 02f8 90E0      		ldi r25,hi8(__c.4743)
 1541 02fa 0E94 0000 		call xputs
 127:../../common/command.c ****     print("e:	print eeprom config\n");
 1542               		.loc 1 127 0
 1543 02fe 80E0      		ldi r24,lo8(__c.4745)
 1544 0300 90E0      		ldi r25,hi8(__c.4745)
 1545 0302 0E94 0000 		call xputs
 129:../../common/command.c ****     print("n:	toggle NKRO\n");
 1546               		.loc 1 129 0
 1547 0306 80E0      		ldi r24,lo8(__c.4747)
 1548 0308 90E0      		ldi r25,hi8(__c.4747)
 1549 030a 0E94 0000 		call xputs
 131:../../common/command.c ****     print("0/F10:	switch to Layer0 \n");
 1550               		.loc 1 131 0
 1551 030e 80E0      		ldi r24,lo8(__c.4749)
 1552 0310 90E0      		ldi r25,hi8(__c.4749)
 1553 0312 0E94 0000 		call xputs
 132:../../common/command.c ****     print("1/F1:	switch to Layer1 \n");
 1554               		.loc 1 132 0
 1555 0316 80E0      		ldi r24,lo8(__c.4751)
 1556 0318 90E0      		ldi r25,hi8(__c.4751)
 1557 031a 0E94 0000 		call xputs
 133:../../common/command.c ****     print("2/F2:	switch to Layer2 \n");
 1558               		.loc 1 133 0
 1559 031e 80E0      		ldi r24,lo8(__c.4753)
 1560 0320 90E0      		ldi r25,hi8(__c.4753)
 1561 0322 0E94 0000 		call xputs
 134:../../common/command.c ****     print("3/F3:	switch to Layer3 \n");
 1562               		.loc 1 134 0
 1563 0326 80E0      		ldi r24,lo8(__c.4755)
 1564 0328 90E0      		ldi r25,hi8(__c.4755)
 1565 032a 0E94 0000 		call xputs
 135:../../common/command.c ****     print("4/F4:	switch to Layer4 \n");
 1566               		.loc 1 135 0
 1567 032e 80E0      		ldi r24,lo8(__c.4757)
 1568 0330 90E0      		ldi r25,hi8(__c.4757)
 1569 0332 0E94 0000 		call xputs
 136:../../common/command.c ****     print("PScr:	power down/remote wake-up\n");
 1570               		.loc 1 136 0
 1571 0336 80E0      		ldi r24,lo8(__c.4759)
 1572 0338 90E0      		ldi r25,hi8(__c.4759)
 1573 033a 0E94 0000 		call xputs
 137:../../common/command.c ****     print("Caps:	Lock Keyboard(Child Proof)\n");
 1574               		.loc 1 137 0
 1575 033e 80E0      		ldi r24,lo8(__c.4761)
 1576 0340 90E0      		ldi r25,hi8(__c.4761)
 1577 0342 0E94 0000 		call xputs
 138:../../common/command.c ****     print("Paus:	jump to bootloader\n");
 1578               		.loc 1 138 0
 1579 0346 80E0      		ldi r24,lo8(__c.4763)
 1580 0348 90E0      		ldi r25,hi8(__c.4763)
 1581 034a 00C0      		rjmp .L76
 1582               	.L51:
 1583               	.LBE143:
 1584               	.LBE142:
 210:../../common/command.c ****             debug_matrix   = false;
 1585               		.loc 1 210 0
 1586 034c 8091 0000 		lds r24,debug_config
 213:../../common/command.c ****             debug_enable   = false;
 1587               		.loc 1 213 0
 1588 0350 817F      		andi r24,lo8(-15)
 1589 0352 8E7F      		andi r24,lo8(~(1<<0))
 1590 0354 8093 0000 		sts debug_config,r24
 214:../../common/command.c ****             command_console_help();
 1591               		.loc 1 214 0
 1592 0358 0E94 0000 		call command_console_help
 215:../../common/command.c ****             print("\nEnter Console Mode\n");
 1593               		.loc 1 215 0
 1594 035c 80E0      		ldi r24,lo8(__c.4876)
 1595 035e 90E0      		ldi r25,hi8(__c.4876)
 1596 0360 0E94 0000 		call xputs
 216:../../common/command.c ****             print("C> ");
 1597               		.loc 1 216 0
 1598 0364 80E0      		ldi r24,lo8(__c.4878)
 1599 0366 90E0      		ldi r25,hi8(__c.4878)
 1600 0368 0E94 0000 		call xputs
 217:../../common/command.c ****             command_state = CONSOLE;
 1601               		.loc 1 217 0
 1602 036c 81E0      		ldi r24,lo8(1)
 1603 036e 8093 0000 		sts command_state,r24
 1604 0372 00C0      		rjmp .L77
 1605               	.L68:
 220:../../common/command.c ****             clear_keyboard();
 1606               		.loc 1 220 0
 1607 0374 0E94 0000 		call clear_keyboard
 221:../../common/command.c ****             print("\n\nJump to bootloader... ");
 1608               		.loc 1 221 0
 1609 0378 80E0      		ldi r24,lo8(__c.4881)
 1610 037a 90E0      		ldi r25,hi8(__c.4881)
 1611 037c 0E94 0000 		call xputs
 1612               	.LBB144:
 1613               	.LBB145:
 1614               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1615               		.loc 2 163 0
 1616 0380 9FEF      		ldi r25,lo8(3199999)
 1617 0382 23ED      		ldi r18,hi8(3199999)
 1618 0384 80E3      		ldi r24,hlo8(3199999)
 1619 0386 9150      		1: subi r25,1
 1620 0388 2040      		sbci r18,0
 1621 038a 8040      		sbci r24,0
 1622 038c 01F4      		brne 1b
 1623 038e 00C0      		rjmp .
 1624 0390 0000      		nop
 1625               	.LBE145:
 1626               	.LBE144:
 223:../../common/command.c ****             bootloader_jump(); // not return
 1627               		.loc 1 223 0
 1628 0392 0E94 0000 		call bootloader_jump
 224:../../common/command.c ****             print("not supported.\n");
 1629               		.loc 1 224 0
 1630 0396 80E0      		ldi r24,lo8(__c.4883)
 1631 0398 90E0      		ldi r25,hi8(__c.4883)
 1632 039a 00C0      		rjmp .L76
 1633               	.L53:
 227:../../common/command.c ****             if (debug_enable) {
 1634               		.loc 1 227 0
 1635 039c 8091 0000 		lds r24,debug_config
 1636 03a0 C82F      		mov r28,r24
 1637 03a2 C170      		andi r28,1
 1638 03a4 80FF      		sbrs r24,0
 1639 03a6 00C0      		rjmp .L71
 228:../../common/command.c ****                 print("\nDEBUG: disabled.\n");
 1640               		.loc 1 228 0
 1641 03a8 80E0      		ldi r24,lo8(__c.4886)
 1642 03aa 90E0      		ldi r25,hi8(__c.4886)
 1643 03ac 0E94 0000 		call xputs
 229:../../common/command.c ****                 debug_matrix   = false;
 1644               		.loc 1 229 0
 1645 03b0 8091 0000 		lds r24,debug_config
 232:../../common/command.c ****                 debug_enable   = false;
 1646               		.loc 1 232 0
 1647 03b4 817F      		andi r24,lo8(-15)
 1648 03b6 8E7F      		andi r24,lo8(~(1<<0))
 1649 03b8 00C0      		rjmp .L78
 1650               	.L71:
 234:../../common/command.c ****                 print("\nDEBUG: enabled.\n");
 1651               		.loc 1 234 0
 1652 03ba 80E0      		ldi r24,lo8(__c.4888)
 1653 03bc 90E0      		ldi r25,hi8(__c.4888)
 1654 03be 0E94 0000 		call xputs
 235:../../common/command.c ****                 debug_enable   = true;
 1655               		.loc 1 235 0
 1656 03c2 8091 0000 		lds r24,debug_config
 1657 03c6 8160      		ori r24,lo8(1<<0)
 1658 03c8 8093 0000 		sts debug_config,r24
 1659 03cc 00C0      		rjmp .L77
 1660               	.L62:
 239:../../common/command.c ****             debug_matrix = !debug_matrix;
 1661               		.loc 1 239 0
 1662 03ce 8091 0000 		lds r24,debug_config
 1663 03d2 81FB      		bst r24,1
 1664 03d4 CC27      		clr r28
 1665 03d6 C0F9      		bld r28,0
 1666 03d8 91E0      		ldi r25,lo8(1)
 1667 03da C927      		eor r28,r25
 1668 03dc C0FB      		bst r28,0
 1669 03de 81F9      		bld r24,1
 1670 03e0 8093 0000 		sts debug_config,r24
 240:../../common/command.c ****             if (debug_matrix) {
 1671               		.loc 1 240 0
 1672 03e4 CC23      		tst r28
 1673 03e6 01F0      		breq .L72
 241:../../common/command.c ****                 print("\nDEBUG: matrix enabled.\n");
 1674               		.loc 1 241 0
 1675 03e8 80E0      		ldi r24,lo8(__c.4891)
 1676 03ea 90E0      		ldi r25,hi8(__c.4891)
 1677 03ec 00C0      		rjmp .L79
 1678               	.L72:
 244:../../common/command.c ****                 print("\nDEBUG: matrix disabled.\n");
 1679               		.loc 1 244 0
 1680 03ee 80E0      		ldi r24,lo8(__c.4893)
 1681 03f0 90E0      		ldi r25,hi8(__c.4893)
 1682 03f2 00C0      		rjmp .L76
 1683               	.L56:
 248:../../common/command.c ****             debug_keyboard = !debug_keyboard;
 1684               		.loc 1 248 0
 1685 03f4 8091 0000 		lds r24,debug_config
 1686 03f8 82FB      		bst r24,2
 1687 03fa CC27      		clr r28
 1688 03fc C0F9      		bld r28,0
 1689 03fe 91E0      		ldi r25,lo8(1)
 1690 0400 C927      		eor r28,r25
 1691 0402 C0FB      		bst r28,0
 1692 0404 82F9      		bld r24,2
 1693 0406 8093 0000 		sts debug_config,r24
 249:../../common/command.c ****             if (debug_keyboard) {
 1694               		.loc 1 249 0
 1695 040a CC23      		tst r28
 1696 040c 01F0      		breq .L73
 250:../../common/command.c ****                 print("\nDEBUG: keyboard enabled.\n");
 1697               		.loc 1 250 0
 1698 040e 80E0      		ldi r24,lo8(__c.4896)
 1699 0410 90E0      		ldi r25,hi8(__c.4896)
 1700 0412 00C0      		rjmp .L79
 1701               	.L73:
 253:../../common/command.c ****                 print("\nDEBUG: keyboard disabled.\n");
 1702               		.loc 1 253 0
 1703 0414 80E0      		ldi r24,lo8(__c.4898)
 1704 0416 90E0      		ldi r25,hi8(__c.4898)
 1705 0418 00C0      		rjmp .L76
 1706               	.L57:
 257:../../common/command.c ****             debug_mouse = !debug_mouse;
 1707               		.loc 1 257 0
 1708 041a 8091 0000 		lds r24,debug_config
 1709 041e 83FB      		bst r24,3
 1710 0420 CC27      		clr r28
 1711 0422 C0F9      		bld r28,0
 1712 0424 91E0      		ldi r25,lo8(1)
 1713 0426 C927      		eor r28,r25
 1714 0428 C0FB      		bst r28,0
 1715 042a 83F9      		bld r24,3
 1716 042c 8093 0000 		sts debug_config,r24
 258:../../common/command.c ****             if (debug_mouse) {
 1717               		.loc 1 258 0
 1718 0430 CC23      		tst r28
 1719 0432 01F0      		breq .L74
 259:../../common/command.c ****                 print("\nDEBUG: mouse enabled.\n");
 1720               		.loc 1 259 0
 1721 0434 80E0      		ldi r24,lo8(__c.4901)
 1722 0436 90E0      		ldi r25,hi8(__c.4901)
 1723               	.L79:
 1724 0438 0E94 0000 		call xputs
 260:../../common/command.c ****                 debug_enable = true;
 1725               		.loc 1 260 0
 1726 043c 8091 0000 		lds r24,debug_config
 1727 0440 8160      		ori r24,lo8(1<<0)
 1728               	.L78:
 1729 0442 8093 0000 		sts debug_config,r24
 1730 0446 00C0      		rjmp .L69
 1731               	.L74:
 262:../../common/command.c ****                 print("\nDEBUG: mouse disabled.\n");
 1732               		.loc 1 262 0
 1733 0448 80E0      		ldi r24,lo8(__c.4903)
 1734 044a 90E0      		ldi r25,hi8(__c.4903)
 1735 044c 00C0      		rjmp .L76
 1736               	.L61:
 266:../../common/command.c ****             print("\n\n----- Version -----\n");
 1737               		.loc 1 266 0
 1738 044e 80E0      		ldi r24,lo8(__c.4906)
 1739 0450 90E0      		ldi r25,hi8(__c.4906)
 1740 0452 0E94 0000 		call xputs
 267:../../common/command.c ****             print("DESC: " STR(DESCRIPTION) "\n");
 1741               		.loc 1 267 0
 1742 0456 80E0      		ldi r24,lo8(__c.4908)
 1743 0458 90E0      		ldi r25,hi8(__c.4908)
 1744 045a 0E94 0000 		call xputs
 268:../../common/command.c ****             print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 1745               		.loc 1 268 0
 1746 045e 80E0      		ldi r24,lo8(__c.4910)
 1747 0460 90E0      		ldi r25,hi8(__c.4910)
 1748 0462 0E94 0000 		call xputs
 271:../../common/command.c ****             print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
 1749               		.loc 1 271 0
 1750 0466 80E0      		ldi r24,lo8(__c.4912)
 1751 0468 90E0      		ldi r25,hi8(__c.4912)
 1752 046a 0E94 0000 		call xputs
 273:../../common/command.c ****             print("OPTIONS:"
 1753               		.loc 1 273 0
 1754 046e 80E0      		ldi r24,lo8(__c.4914)
 1755 0470 90E0      		ldi r25,hi8(__c.4914)
 1756 0472 0E94 0000 		call xputs
 306:../../common/command.c ****             print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 1757               		.loc 1 306 0
 1758 0476 80E0      		ldi r24,lo8(__c.4916)
 1759 0478 90E0      		ldi r25,hi8(__c.4916)
 1760 047a 00C0      		rjmp .L76
 1761               	.L60:
 311:../../common/command.c ****             print_val_hex32(timer_count);
 1762               		.loc 1 311 0
 1763 047c 8091 0000 		lds r24,timer_count
 1764 0480 9091 0000 		lds r25,timer_count+1
 1765 0484 A091 0000 		lds r26,timer_count+2
 1766 0488 B091 0000 		lds r27,timer_count+3
 1767 048c BF93      		push r27
 1768               	.LCFI142:
 1769               		.cfi_def_cfa_offset 4
 1770 048e AF93      		push r26
 1771               	.LCFI143:
 1772               		.cfi_def_cfa_offset 5
 1773 0490 9F93      		push r25
 1774               	.LCFI144:
 1775               		.cfi_def_cfa_offset 6
 1776 0492 8F93      		push r24
 1777               	.LCFI145:
 1778               		.cfi_def_cfa_offset 7
 1779 0494 80E0      		ldi r24,lo8(__c.4919)
 1780 0496 90E0      		ldi r25,hi8(__c.4919)
 1781 0498 9F93      		push r25
 1782               	.LCFI146:
 1783               		.cfi_def_cfa_offset 8
 1784 049a 8F93      		push r24
 1785               	.LCFI147:
 1786               		.cfi_def_cfa_offset 9
 1787 049c 0E94 0000 		call __xprintf
 312:../../common/command.c ****             break;
 1788               		.loc 1 312 0
 1789 04a0 0F90      		pop __tmp_reg__
 1790 04a2 0F90      		pop __tmp_reg__
 1791 04a4 0F90      		pop __tmp_reg__
 1792 04a6 0F90      		pop __tmp_reg__
 1793 04a8 0F90      		pop __tmp_reg__
 1794 04aa 0F90      		pop __tmp_reg__
 1795               	.LCFI148:
 1796               		.cfi_def_cfa_offset 3
 1797 04ac 00C0      		rjmp .L77
 1798               	.L59:
 314:../../common/command.c ****             print("\n\n----- Status -----\n");
 1799               		.loc 1 314 0
 1800 04ae 80E0      		ldi r24,lo8(__c.4922)
 1801 04b0 90E0      		ldi r25,hi8(__c.4922)
 1802 04b2 0E94 0000 		call xputs
 315:../../common/command.c ****             print_val_hex8(host_keyboard_leds());
 1803               		.loc 1 315 0
 1804 04b6 0E94 0000 		call host_keyboard_leds
 1805 04ba 1F92      		push __zero_reg__
 1806               	.LCFI149:
 1807               		.cfi_def_cfa_offset 4
 1808 04bc 8F93      		push r24
 1809               	.LCFI150:
 1810               		.cfi_def_cfa_offset 5
 1811 04be 80E0      		ldi r24,lo8(__c.4924)
 1812 04c0 90E0      		ldi r25,hi8(__c.4924)
 1813 04c2 9F93      		push r25
 1814               	.LCFI151:
 1815               		.cfi_def_cfa_offset 6
 1816 04c4 8F93      		push r24
 1817               	.LCFI152:
 1818               		.cfi_def_cfa_offset 7
 1819 04c6 0E94 0000 		call __xprintf
 316:../../common/command.c ****             print_val_hex8(keyboard_protocol);
 1820               		.loc 1 316 0
 1821 04ca 8091 0000 		lds r24,keyboard_protocol
 1822 04ce 1F92      		push __zero_reg__
 1823               	.LCFI153:
 1824               		.cfi_def_cfa_offset 8
 1825 04d0 8F93      		push r24
 1826               	.LCFI154:
 1827               		.cfi_def_cfa_offset 9
 1828 04d2 80E0      		ldi r24,lo8(__c.4926)
 1829 04d4 90E0      		ldi r25,hi8(__c.4926)
 1830 04d6 9F93      		push r25
 1831               	.LCFI155:
 1832               		.cfi_def_cfa_offset 10
 1833 04d8 8F93      		push r24
 1834               	.LCFI156:
 1835               		.cfi_def_cfa_offset 11
 1836 04da 0E94 0000 		call __xprintf
 317:../../common/command.c ****             print_val_hex8(keyboard_idle);
 1837               		.loc 1 317 0
 1838 04de 8091 0000 		lds r24,keyboard_idle
 1839 04e2 1F92      		push __zero_reg__
 1840               	.LCFI157:
 1841               		.cfi_def_cfa_offset 12
 1842 04e4 8F93      		push r24
 1843               	.LCFI158:
 1844               		.cfi_def_cfa_offset 13
 1845 04e6 80E0      		ldi r24,lo8(__c.4928)
 1846 04e8 90E0      		ldi r25,hi8(__c.4928)
 1847 04ea 9F93      		push r25
 1848               	.LCFI159:
 1849               		.cfi_def_cfa_offset 14
 1850 04ec 8F93      		push r24
 1851               	.LCFI160:
 1852               		.cfi_def_cfa_offset 15
 1853 04ee 0E94 0000 		call __xprintf
 331:../../common/command.c ****             break;
 1854               		.loc 1 331 0
 1855 04f2 8DB7      		in r24,__SP_L__
 1856 04f4 9EB7      		in r25,__SP_H__
 1857 04f6 0C96      		adiw r24,12
 1858 04f8 0FB6      		in __tmp_reg__,__SREG__
 1859 04fa F894      		cli
 1860 04fc 9EBF      		out __SP_H__,r25
 1861 04fe 0FBE      		out __SREG__,__tmp_reg__
 1862 0500 8DBF      		out __SP_L__,r24
 1863               	.LCFI161:
 1864               		.cfi_def_cfa_offset 3
 1865 0502 00C0      		rjmp .L77
 1866               	.L58:
 334:../../common/command.c ****             clear_keyboard(); //Prevents stuck keys.
 1867               		.loc 1 334 0
 1868 0504 0E94 0000 		call clear_keyboard
 335:../../common/command.c ****             keyboard_nkro = !keyboard_nkro;
 1869               		.loc 1 335 0
 1870 0508 C091 0000 		lds r28,keyboard_nkro
 1871 050c 81E0      		ldi r24,lo8(1)
 1872 050e C827      		eor r28,r24
 1873 0510 C093 0000 		sts keyboard_nkro,r28
 336:../../common/command.c ****             if (keyboard_nkro)
 1874               		.loc 1 336 0
 1875 0514 CC23      		tst r28
 1876 0516 01F0      		breq .L75
 337:../../common/command.c ****                 print("NKRO: enabled\n");
 1877               		.loc 1 337 0
 1878 0518 80E0      		ldi r24,lo8(__c.4931)
 1879 051a 90E0      		ldi r25,hi8(__c.4931)
 1880 051c 0E94 0000 		call xputs
 1881 0520 00C0      		rjmp .L69
 1882               	.L75:
 339:../../common/command.c ****                 print("NKRO: disabled\n");
 1883               		.loc 1 339 0
 1884 0522 80E0      		ldi r24,lo8(__c.4933)
 1885 0524 90E0      		ldi r25,hi8(__c.4933)
 1886 0526 00C0      		rjmp .L76
 1887               	.L67:
 354:../../common/command.c ****             host_system_send(SYSTEM_POWER_DOWN);
 1888               		.loc 1 354 0
 1889 0528 81E8      		ldi r24,lo8(-127)
 1890 052a 90E0      		ldi r25,0
 1891 052c 0E94 0000 		call host_system_send
 1892               	.LBB146:
 1893               	.LBB147:
 1894               		.loc 2 163 0
 1895 0530 9FEF      		ldi r25,lo8(319999)
 1896 0532 21EE      		ldi r18,hi8(319999)
 1897 0534 84E0      		ldi r24,hlo8(319999)
 1898 0536 9150      		1: subi r25,1
 1899 0538 2040      		sbci r18,0
 1900 053a 8040      		sbci r24,0
 1901 053c 01F4      		brne 1b
 1902 053e 00C0      		rjmp .
 1903 0540 0000      		nop
 1904               	.LBE147:
 1905               	.LBE146:
 356:../../common/command.c ****             host_system_send(0);
 1906               		.loc 1 356 0
 1907 0542 80E0      		ldi r24,0
 1908 0544 90E0      		ldi r25,0
 1909 0546 0E94 0000 		call host_system_send
 1910               	.LBB148:
 1911               	.LBB149:
 1912               		.loc 2 163 0
 1913 054a 9FEF      		ldi r25,lo8(1599999)
 1914 054c 29E6      		ldi r18,hi8(1599999)
 1915 054e 88E1      		ldi r24,hlo8(1599999)
 1916 0550 9150      		1: subi r25,1
 1917 0552 2040      		sbci r18,0
 1918 0554 8040      		sbci r24,0
 1919 0556 01F4      		brne 1b
 1920 0558 00C0      		rjmp .
 1921 055a 0000      		nop
 1922 055c 00C0      		rjmp .L77
 1923               	.L64:
 1924               	.LBE149:
 1925               	.LBE148:
 364:../../common/command.c ****             switch_default_layer(0);
 1926               		.loc 1 364 0
 1927 055e 80E0      		ldi r24,0
 1928 0560 00C0      		rjmp .L80
 1929               	.L63:
 367:../../common/command.c ****             switch_default_layer((code - KC_1) + 1);
 1930               		.loc 1 367 0
 1931 0562 8D51      		subi r24,lo8(-(-29))
 1932 0564 00C0      		rjmp .L80
 1933               	.L66:
 370:../../common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 1934               		.loc 1 370 0
 1935 0566 8953      		subi r24,lo8(-(-57))
 1936               	.L80:
 1937 0568 0E94 0000 		call switch_default_layer
 1938 056c 00C0      		rjmp .L77
 1939               	.L50:
 373:../../common/command.c ****             print("?");
 1940               		.loc 1 373 0
 1941 056e 80E0      		ldi r24,lo8(__c.4942)
 1942 0570 90E0      		ldi r25,hi8(__c.4942)
 1943 0572 0E94 0000 		call xputs
 374:../../common/command.c ****             return false;
 1944               		.loc 1 374 0
 1945 0576 C0E0      		ldi r28,0
 1946               	.L69:
 377:../../common/command.c **** }
 1947               		.loc 1 377 0
 1948 0578 8C2F      		mov r24,r28
 1949               	/* epilogue start */
 1950 057a CF91      		pop r28
 1951 057c 0895      		ret
 1952               		.cfi_endproc
 1953               	.LFE109:
 1955               		.section	.text.matrix_power_up,"ax",@progbits
 1956               		.weak	matrix_power_up
 1958               	matrix_power_up:
 1959               	.LFB102:
 1960               		.file 3 "../../common/keyboard.h"
   1:../../common/keyboard.h **** /*
   2:../../common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/keyboard.h **** 
   4:../../common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/keyboard.h **** (at your option) any later version.
   8:../../common/keyboard.h **** 
   9:../../common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/keyboard.h **** GNU General Public License for more details.
  13:../../common/keyboard.h **** 
  14:../../common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/keyboard.h **** */
  17:../../common/keyboard.h **** 
  18:../../common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../common/keyboard.h **** #define KEYBOARD_H
  20:../../common/keyboard.h **** 
  21:../../common/keyboard.h **** #include <stdbool.h>
  22:../../common/keyboard.h **** #include <stdint.h>
  23:../../common/keyboard.h **** 
  24:../../common/keyboard.h **** 
  25:../../common/keyboard.h **** #ifdef __cplusplus
  26:../../common/keyboard.h **** extern "C" {
  27:../../common/keyboard.h **** #endif
  28:../../common/keyboard.h **** 
  29:../../common/keyboard.h **** /* key matrix position */
  30:../../common/keyboard.h **** typedef struct {
  31:../../common/keyboard.h ****     uint8_t col;
  32:../../common/keyboard.h ****     uint8_t row;
  33:../../common/keyboard.h **** } keypos_t;
  34:../../common/keyboard.h **** 
  35:../../common/keyboard.h **** /* key event */
  36:../../common/keyboard.h **** typedef struct {
  37:../../common/keyboard.h ****     keypos_t key;
  38:../../common/keyboard.h ****     bool     pressed;
  39:../../common/keyboard.h ****     uint16_t time;
  40:../../common/keyboard.h **** } keyevent_t;
  41:../../common/keyboard.h **** 
  42:../../common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../common/keyboard.h **** 
  45:../../common/keyboard.h **** /* Rules for No Event:
  46:../../common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../common/keyboard.h ****  */
  49:../../common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  50:../../common/keyboard.h **** static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
  51:../../common/keyboard.h **** static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
  52:../../common/keyboard.h **** 
  53:../../common/keyboard.h **** /* Tick event */
  54:../../common/keyboard.h **** #define TICK                    (keyevent_t){           \
  55:../../common/keyboard.h ****     .key = (keypos_t){ .row = 255, .col = 255 },           \
  56:../../common/keyboard.h ****     .pressed = false,                                   \
  57:../../common/keyboard.h ****     .time = (timer_read() | 1)                          \
  58:../../common/keyboard.h **** }
  59:../../common/keyboard.h **** 
  60:../../common/keyboard.h **** 
  61:../../common/keyboard.h **** void keyboard_init(void);
  62:../../common/keyboard.h **** void keyboard_task(void);
  63:../../common/keyboard.h **** void keyboard_set_leds(uint8_t leds);
  64:../../common/keyboard.h **** 
  65:../../common/keyboard.h **** __attribute__ ((weak)) void matrix_power_up(void) {}
 1961               		.loc 3 65 0
 1962               		.cfi_startproc
 1963               	/* prologue: function */
 1964               	/* frame size = 0 */
 1965               	/* stack size = 0 */
 1966               	.L__stack_usage = 0
 1967 0000 0895      		ret
 1968               		.cfi_endproc
 1969               	.LFE102:
 1971               		.section	.text.matrix_power_down,"ax",@progbits
 1972               		.weak	matrix_power_down
 1974               	matrix_power_down:
 1975               	.LFB103:
  66:../../common/keyboard.h **** __attribute__ ((weak)) void matrix_power_down(void) {}
 1976               		.loc 3 66 0
 1977               		.cfi_startproc
 1978               	/* prologue: function */
 1979               	/* frame size = 0 */
 1980               	/* stack size = 0 */
 1981               	.L__stack_usage = 0
 1982 0000 0895      		ret
 1983               		.cfi_endproc
 1984               	.LFE103:
 1986               		.section	.text.command_extra,"ax",@progbits
 1987               		.weak	command_extra
 1989               	command_extra:
 1990               	.LFB105:
  99:../../common/command.c **** {
 1991               		.loc 1 99 0
 1992               		.cfi_startproc
 1993               	.LVL103:
 1994               	/* prologue: function */
 1995               	/* frame size = 0 */
 1996               	/* stack size = 0 */
 1997               	.L__stack_usage = 0
 101:../../common/command.c **** }
 1998               		.loc 1 101 0
 1999 0000 80E0      		ldi r24,0
 2000               	.LVL104:
 2001 0002 0895      		ret
 2002               		.cfi_endproc
 2003               	.LFE105:
 2005               		.section	.text.command_console_extra,"ax",@progbits
 2006               		.weak	command_console_extra
 2008               	command_console_extra:
 2009               	.LFB106:
 105:../../common/command.c **** {
 2010               		.loc 1 105 0
 2011               		.cfi_startproc
 2012               	.LVL105:
 2013               	/* prologue: function */
 2014               	/* frame size = 0 */
 2015               	/* stack size = 0 */
 2016               	.L__stack_usage = 0
 107:../../common/command.c **** }
 2017               		.loc 1 107 0
 2018 0000 80E0      		ldi r24,0
 2019               	.LVL106:
 2020 0002 0895      		ret
 2021               		.cfi_endproc
 2022               	.LFE106:
 2024               		.section	.text.command_proc,"ax",@progbits
 2025               	.global	command_proc
 2027               	command_proc:
 2028               	.LFB104:
  70:../../common/command.c **** {
 2029               		.loc 1 70 0
 2030               		.cfi_startproc
 2031 0000 CF93      		push r28
 2032               	.LCFI162:
 2033               		.cfi_def_cfa_offset 3
 2034               		.cfi_offset 28, -2
 2035               	/* prologue: function */
 2036               	/* frame size = 0 */
 2037               	/* stack size = 1 */
 2038               	.L__stack_usage = 1
 2039 0002 C82F      		mov r28,r24
  71:../../common/command.c ****     switch (command_state) {
 2040               		.loc 1 71 0
 2041 0004 8091 0000 		lds r24,command_state
 2042 0008 8130      		cpi r24,lo8(1)
 2043 000a 01F0      		breq .L87
 2044 000c 00F0      		brlo .L88
 2045 000e 8230      		cpi r24,lo8(2)
 2046 0010 01F4      		brne .+2
 2047 0012 00C0      		rjmp .L89
 2048 0014 00C0      		rjmp .L152
 2049               	.L88:
  73:../../common/command.c ****             if (!IS_COMMAND())
 2050               		.loc 1 73 0
 2051 0016 A091 0000 		lds r26,keyboard_report
 2052 001a B091 0000 		lds r27,keyboard_report+1
 2053 001e 8C91      		ld r24,X
 2054 0020 8232      		cpi r24,lo8(34)
 2055 0022 01F0      		breq .+2
 2056 0024 00C0      		rjmp .L116
 2057 0026 00C0      		rjmp .L151
 2058               	.L87:
  78:../../common/command.c ****             if (IS_COMMAND())
 2059               		.loc 1 78 0
 2060 0028 A091 0000 		lds r26,keyboard_report
 2061 002c B091 0000 		lds r27,keyboard_report+1
 2062 0030 8C91      		ld r24,X
 2063 0032 8232      		cpi r24,lo8(34)
 2064 0034 01F4      		brne .L92
 2065               	.L151:
  79:../../common/command.c ****                 return (command_extra(code) || command_common(code));
 2066               		.loc 1 79 0
 2067 0036 8C2F      		mov r24,r28
 2068 0038 0E94 0000 		call command_extra
 2069 003c 8111      		cpse r24,__zero_reg__
 2070 003e 00C0      		rjmp .L119
  79:../../common/command.c ****                 return (command_extra(code) || command_common(code));
 2071               		.loc 1 79 0 is_stmt 0 discriminator 2
 2072 0040 8C2F      		mov r24,r28
 2073 0042 0E94 0000 		call command_common
 2074 0046 00C0      		rjmp .L94
 2075               	.L92:
  81:../../common/command.c ****                 return (command_console_extra(code) || command_console(code));
 2076               		.loc 1 81 0 is_stmt 1
 2077 0048 8C2F      		mov r24,r28
 2078 004a 0E94 0000 		call command_console_extra
 2079 004e 8111      		cpse r24,__zero_reg__
 2080 0050 00C0      		rjmp .L119
 2081               	.LBB192:
 2082               	.LBB193:
 394:../../common/command.c ****     switch (code) {
 2083               		.loc 1 394 0
 2084 0052 C431      		cpi r28,lo8(20)
 2085 0054 01F0      		breq .L96
 2086 0056 00F4      		brsh .L97
 2087 0058 CB30      		cpi r28,lo8(11)
 2088 005a 01F0      		breq .L98
 2089 005c C031      		cpi r28,lo8(16)
 2090 005e 01F4      		brne .L95
 406:../../common/command.c ****             mousekey_console_help();
 2091               		.loc 1 406 0
 2092 0060 0E94 0000 		call mousekey_console_help
 407:../../common/command.c ****             print("\nEnter Mousekey Console\n");
 2093               		.loc 1 407 0
 2094 0064 80E0      		ldi r24,lo8(__c.4964)
 2095 0066 90E0      		ldi r25,hi8(__c.4964)
 2096 0068 0E94 0000 		call xputs
 408:../../common/command.c ****             print("M0>");
 2097               		.loc 1 408 0
 2098 006c 80E0      		ldi r24,lo8(__c.4966)
 2099 006e 90E0      		ldi r25,hi8(__c.4966)
 2100 0070 0E94 0000 		call xputs
 409:../../common/command.c ****             command_state = MOUSEKEY;
 2101               		.loc 1 409 0
 2102 0074 82E0      		ldi r24,lo8(2)
 2103 0076 8093 0000 		sts command_state,r24
 2104 007a 00C0      		rjmp .L119
 2105               	.L97:
 394:../../common/command.c ****     switch (code) {
 2106               		.loc 1 394 0
 2107 007c C932      		cpi r28,lo8(41)
 2108 007e 01F0      		breq .L96
 2109 0080 C833      		cpi r28,lo8(56)
 2110 0082 01F4      		brne .L95
 2111               	.L98:
 397:../../common/command.c ****             command_console_help();
 2112               		.loc 1 397 0
 2113 0084 0E94 0000 		call command_console_help
 416:../../common/command.c ****     print("C> ");
 2114               		.loc 1 416 0
 2115 0088 80E0      		ldi r24,lo8(__c.4971)
 2116 008a 90E0      		ldi r25,hi8(__c.4971)
 2117 008c 0E94 0000 		call xputs
 2118 0090 00C0      		rjmp .L119
 2119               	.L96:
 401:../../common/command.c ****             print("\nQuit Console Mode\n");
 2120               		.loc 1 401 0
 2121 0092 80E0      		ldi r24,lo8(__c.4961)
 2122 0094 90E0      		ldi r25,hi8(__c.4961)
 2123 0096 0E94 0000 		call xputs
 402:../../common/command.c ****             command_state = ONESHOT;
 2124               		.loc 1 402 0
 2125 009a 1092 0000 		sts command_state,__zero_reg__
 2126 009e 00C0      		rjmp .L101
 2127               	.L95:
 413:../../common/command.c ****             print("?");
 2128               		.loc 1 413 0
 2129 00a0 80E0      		ldi r24,lo8(__c.4969)
 2130 00a2 90E0      		ldi r25,hi8(__c.4969)
 2131 00a4 0E94 0000 		call xputs
 2132 00a8 00C0      		rjmp .L101
 2133               	.L119:
 2134               	.LBE193:
 2135               	.LBE192:
  81:../../common/command.c ****                 return (command_console_extra(code) || command_console(code));
 2136               		.loc 1 81 0
 2137 00aa 81E0      		ldi r24,lo8(1)
 2138               	.L94:
  81:../../common/command.c ****                 return (command_console_extra(code) || command_console(code));
 2139               		.loc 1 81 0 is_stmt 0 discriminator 4
 2140 00ac 8170      		andi r24,lo8(1)
 2141 00ae 00C0      		rjmp .L145
 2142               	.L89:
 2143               	.LBB194:
 2144               	.LBB195:
 559:../../common/command.c ****     switch (code) {
 2145               		.loc 1 559 0 is_stmt 1
 2146 00b0 C832      		cpi r28,lo8(40)
 2147 00b2 00F4      		brsh .L103
 2148 00b4 CE31      		cpi r28,lo8(30)
 2149 00b6 00F0      		brlo .+2
 2150 00b8 00C0      		rjmp .L104
 2151 00ba CB30      		cpi r28,lo8(11)
 2152 00bc 01F0      		breq .L105
 2153 00be 00F4      		brsh .L106
 2154 00c0 C730      		cpi r28,lo8(7)
 2155 00c2 01F0      		breq .+2
 2156 00c4 00C0      		rjmp .L102
 600:../../common/command.c ****             mk_delay = MOUSEKEY_DELAY/10;
 2157               		.loc 1 600 0
 2158 00c6 8EE1      		ldi r24,lo8(30)
 2159 00c8 8093 0000 		sts mk_delay,r24
 601:../../common/command.c ****             mk_interval = MOUSEKEY_INTERVAL;
 2160               		.loc 1 601 0
 2161 00cc 82E3      		ldi r24,lo8(50)
 2162 00ce 8093 0000 		sts mk_interval,r24
 602:../../common/command.c ****             mk_max_speed = MOUSEKEY_MAX_SPEED;
 2163               		.loc 1 602 0
 2164 00d2 8AE0      		ldi r24,lo8(10)
 2165 00d4 8093 0000 		sts mk_max_speed,r24
 603:../../common/command.c ****             mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
 2166               		.loc 1 603 0
 2167 00d8 84E1      		ldi r24,lo8(20)
 2168 00da 8093 0000 		sts mk_time_to_max,r24
 604:../../common/command.c ****             mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
 2169               		.loc 1 604 0
 2170 00de 88E0      		ldi r24,lo8(8)
 2171 00e0 8093 0000 		sts mk_wheel_max_speed,r24
 605:../../common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 2172               		.loc 1 605 0
 2173 00e4 88E2      		ldi r24,lo8(40)
 2174 00e6 8093 0000 		sts mk_wheel_time_to_max,r24
 606:../../common/command.c ****             print("set default values.\n");
 2175               		.loc 1 606 0
 2176 00ea 80E0      		ldi r24,lo8(__c.5188)
 2177 00ec 90E0      		ldi r25,hi8(__c.5188)
 2178 00ee 0E94 0000 		call xputs
 2179 00f2 00C0      		rjmp .L115
 2180               	.L106:
 559:../../common/command.c ****     switch (code) {
 2181               		.loc 1 559 0
 2182 00f4 C331      		cpi r28,lo8(19)
 2183 00f6 01F0      		breq .L108
 2184 00f8 C431      		cpi r28,lo8(20)
 2185 00fa 01F0      		breq .L109
 2186 00fc 00C0      		rjmp .L102
 2187               	.L103:
 2188 00fe CB34      		cpi r28,lo8(75)
 2189 0100 01F4      		brne .+2
 2190 0102 00C0      		rjmp .L110
 2191 0104 00F4      		brsh .L111
 2192 0106 C932      		cpi r28,lo8(41)
 2193 0108 01F0      		breq .L109
 2194 010a C833      		cpi r28,lo8(56)
 2195 010c 01F0      		breq .L105
 2196 010e 00C0      		rjmp .L102
 2197               	.L111:
 2198 0110 C135      		cpi r28,lo8(81)
 2199 0112 01F4      		brne .+2
 2200 0114 00C0      		rjmp .L112
 2201 0116 C235      		cpi r28,lo8(82)
 2202 0118 01F4      		brne .+2
 2203 011a 00C0      		rjmp .L113
 2204 011c CE34      		cpi r28,lo8(78)
 2205 011e 01F0      		breq .+2
 2206 0120 00C0      		rjmp .L102
 597:../../common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 2207               		.loc 1 597 0
 2208 0122 6AE0      		ldi r22,lo8(10)
 2209 0124 00C0      		rjmp .L147
 2210               	.L105:
 562:../../common/command.c ****             mousekey_console_help();
 2211               		.loc 1 562 0
 2212 0126 0E94 0000 		call mousekey_console_help
 2213 012a 00C0      		rjmp .L115
 2214               	.L109:
 566:../../common/command.c ****             mousekey_param = 0;
 2215               		.loc 1 566 0
 2216 012c 1092 0000 		sts mousekey_param,__zero_reg__
 567:../../common/command.c ****             print("\nQuit Mousekey Console\n");
 2217               		.loc 1 567 0
 2218 0130 80E0      		ldi r24,lo8(__c.5162)
 2219 0132 90E0      		ldi r25,hi8(__c.5162)
 2220 0134 0E94 0000 		call xputs
 568:../../common/command.c ****             print("C> ");
 2221               		.loc 1 568 0
 2222 0138 80E0      		ldi r24,lo8(__c.5164)
 2223 013a 90E0      		ldi r25,hi8(__c.5164)
 2224 013c 0E94 0000 		call xputs
 569:../../common/command.c ****             command_state = CONSOLE;
 2225               		.loc 1 569 0
 2226 0140 81E0      		ldi r24,lo8(1)
 2227 0142 8093 0000 		sts command_state,r24
 2228 0146 00C0      		rjmp .L145
 2229               	.L108:
 2230               	.LBB196:
 2231               	.LBB197:
 429:../../common/command.c ****     print("\n\n----- Mousekey Parameters -----\n");
 2232               		.loc 1 429 0
 2233 0148 80E0      		ldi r24,lo8(__c.4977)
 2234 014a 90E0      		ldi r25,hi8(__c.4977)
 2235 014c 0E94 0000 		call xputs
 430:../../common/command.c ****     print("1: mk_delay(*10ms): "); pdec(mk_delay); print("\n");
 2236               		.loc 1 430 0
 2237 0150 80E0      		ldi r24,lo8(__c.4979)
 2238 0152 90E0      		ldi r25,hi8(__c.4979)
 2239 0154 0E94 0000 		call xputs
 2240 0158 8091 0000 		lds r24,mk_delay
 2241 015c 1F92      		push __zero_reg__
 2242               	.LCFI163:
 2243               		.cfi_def_cfa_offset 4
 2244 015e 8F93      		push r24
 2245               	.LCFI164:
 2246               		.cfi_def_cfa_offset 5
 2247 0160 80E0      		ldi r24,lo8(__c.4981)
 2248 0162 90E0      		ldi r25,hi8(__c.4981)
 2249 0164 9F93      		push r25
 2250               	.LCFI165:
 2251               		.cfi_def_cfa_offset 6
 2252 0166 8F93      		push r24
 2253               	.LCFI166:
 2254               		.cfi_def_cfa_offset 7
 2255 0168 0E94 0000 		call __xprintf
 2256 016c 80E0      		ldi r24,lo8(__c.4983)
 2257 016e 90E0      		ldi r25,hi8(__c.4983)
 2258 0170 0E94 0000 		call xputs
 431:../../common/command.c ****     print("2: mk_interval(ms): "); pdec(mk_interval); print("\n");
 2259               		.loc 1 431 0
 2260 0174 80E0      		ldi r24,lo8(__c.4985)
 2261 0176 90E0      		ldi r25,hi8(__c.4985)
 2262 0178 0E94 0000 		call xputs
 2263 017c 8091 0000 		lds r24,mk_interval
 2264 0180 1F92      		push __zero_reg__
 2265               	.LCFI167:
 2266               		.cfi_def_cfa_offset 8
 2267 0182 8F93      		push r24
 2268               	.LCFI168:
 2269               		.cfi_def_cfa_offset 9
 2270 0184 80E0      		ldi r24,lo8(__c.4987)
 2271 0186 90E0      		ldi r25,hi8(__c.4987)
 2272 0188 9F93      		push r25
 2273               	.LCFI169:
 2274               		.cfi_def_cfa_offset 10
 2275 018a 8F93      		push r24
 2276               	.LCFI170:
 2277               		.cfi_def_cfa_offset 11
 2278 018c 0E94 0000 		call __xprintf
 2279 0190 80E0      		ldi r24,lo8(__c.4989)
 2280 0192 90E0      		ldi r25,hi8(__c.4989)
 2281 0194 0E94 0000 		call xputs
 432:../../common/command.c ****     print("3: mk_max_speed: "); pdec(mk_max_speed); print("\n");
 2282               		.loc 1 432 0
 2283 0198 80E0      		ldi r24,lo8(__c.4991)
 2284 019a 90E0      		ldi r25,hi8(__c.4991)
 2285 019c 0E94 0000 		call xputs
 2286 01a0 8091 0000 		lds r24,mk_max_speed
 2287 01a4 1F92      		push __zero_reg__
 2288               	.LCFI171:
 2289               		.cfi_def_cfa_offset 12
 2290 01a6 8F93      		push r24
 2291               	.LCFI172:
 2292               		.cfi_def_cfa_offset 13
 2293 01a8 80E0      		ldi r24,lo8(__c.4993)
 2294 01aa 90E0      		ldi r25,hi8(__c.4993)
 2295 01ac 9F93      		push r25
 2296               	.LCFI173:
 2297               		.cfi_def_cfa_offset 14
 2298 01ae 8F93      		push r24
 2299               	.LCFI174:
 2300               		.cfi_def_cfa_offset 15
 2301 01b0 0E94 0000 		call __xprintf
 2302 01b4 80E0      		ldi r24,lo8(__c.4995)
 2303 01b6 90E0      		ldi r25,hi8(__c.4995)
 2304 01b8 0E94 0000 		call xputs
 433:../../common/command.c ****     print("4: mk_time_to_max: "); pdec(mk_time_to_max); print("\n");
 2305               		.loc 1 433 0
 2306 01bc 80E0      		ldi r24,lo8(__c.4997)
 2307 01be 90E0      		ldi r25,hi8(__c.4997)
 2308 01c0 0E94 0000 		call xputs
 2309 01c4 8091 0000 		lds r24,mk_time_to_max
 2310 01c8 1F92      		push __zero_reg__
 2311               	.LCFI175:
 2312               		.cfi_def_cfa_offset 16
 2313 01ca 8F93      		push r24
 2314               	.LCFI176:
 2315               		.cfi_def_cfa_offset 17
 2316 01cc 80E0      		ldi r24,lo8(__c.4999)
 2317 01ce 90E0      		ldi r25,hi8(__c.4999)
 2318 01d0 9F93      		push r25
 2319               	.LCFI177:
 2320               		.cfi_def_cfa_offset 18
 2321 01d2 8F93      		push r24
 2322               	.LCFI178:
 2323               		.cfi_def_cfa_offset 19
 2324 01d4 0E94 0000 		call __xprintf
 2325 01d8 80E0      		ldi r24,lo8(__c.5001)
 2326 01da 90E0      		ldi r25,hi8(__c.5001)
 2327 01dc 0E94 0000 		call xputs
 434:../../common/command.c ****     print("5: mk_wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
 2328               		.loc 1 434 0
 2329 01e0 80E0      		ldi r24,lo8(__c.5003)
 2330 01e2 90E0      		ldi r25,hi8(__c.5003)
 2331 01e4 0E94 0000 		call xputs
 2332 01e8 8091 0000 		lds r24,mk_wheel_max_speed
 2333 01ec 1F92      		push __zero_reg__
 2334               	.LCFI179:
 2335               		.cfi_def_cfa_offset 20
 2336 01ee 8F93      		push r24
 2337               	.LCFI180:
 2338               		.cfi_def_cfa_offset 21
 2339 01f0 80E0      		ldi r24,lo8(__c.5005)
 2340 01f2 90E0      		ldi r25,hi8(__c.5005)
 2341 01f4 9F93      		push r25
 2342               	.LCFI181:
 2343               		.cfi_def_cfa_offset 22
 2344 01f6 8F93      		push r24
 2345               	.LCFI182:
 2346               		.cfi_def_cfa_offset 23
 2347 01f8 0E94 0000 		call __xprintf
 2348 01fc 80E0      		ldi r24,lo8(__c.5007)
 2349 01fe 90E0      		ldi r25,hi8(__c.5007)
 2350 0200 0E94 0000 		call xputs
 435:../../common/command.c ****     print("6: mk_wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
 2351               		.loc 1 435 0
 2352 0204 80E0      		ldi r24,lo8(__c.5009)
 2353 0206 90E0      		ldi r25,hi8(__c.5009)
 2354 0208 0E94 0000 		call xputs
 2355 020c 8091 0000 		lds r24,mk_wheel_time_to_max
 2356 0210 1F92      		push __zero_reg__
 2357               	.LCFI183:
 2358               		.cfi_def_cfa_offset 24
 2359 0212 8F93      		push r24
 2360               	.LCFI184:
 2361               		.cfi_def_cfa_offset 25
 2362 0214 80E0      		ldi r24,lo8(__c.5011)
 2363 0216 90E0      		ldi r25,hi8(__c.5011)
 2364 0218 9F93      		push r25
 2365               	.LCFI185:
 2366               		.cfi_def_cfa_offset 26
 2367 021a 8F93      		push r24
 2368               	.LCFI186:
 2369               		.cfi_def_cfa_offset 27
 2370 021c 0E94 0000 		call __xprintf
 2371 0220 80E0      		ldi r24,lo8(__c.5013)
 2372 0222 90E0      		ldi r25,hi8(__c.5013)
 2373 0224 0E94 0000 		call xputs
 2374 0228 8DB7      		in r24,__SP_L__
 2375 022a 9EB7      		in r25,__SP_H__
 2376 022c 4896      		adiw r24,24
 2377 022e 0FB6      		in __tmp_reg__,__SREG__
 2378 0230 F894      		cli
 2379 0232 9EBF      		out __SP_H__,r25
 2380 0234 0FBE      		out __SREG__,__tmp_reg__
 2381 0236 8DBF      		out __SP_L__,r24
 2382               	.LCFI187:
 2383               		.cfi_def_cfa_offset 3
 2384 0238 00C0      		rjmp .L115
 2385               	.L104:
 2386 023a CE51      		subi r28,lo8(-(-30))
 2387 023c EC2F      		mov r30,r28
 2388 023e F0E0      		ldi r31,0
 2389 0240 E050      		subi r30,lo8(-(CSWTCH.47))
 2390 0242 F040      		sbci r31,hi8(-(CSWTCH.47))
 2391               	.LBE197:
 2392               	.LBE196:
 584:../../common/command.c ****             mousekey_param = numkey2num(code);
 2393               		.loc 1 584 0
 2394 0244 8081      		ld r24,Z
 2395 0246 8093 0000 		sts mousekey_param,r24
 585:../../common/command.c ****             print("selected parameter: "); pdec(mousekey_param); print("\n");
 2396               		.loc 1 585 0
 2397 024a 80E0      		ldi r24,lo8(__c.5177)
 2398 024c 90E0      		ldi r25,hi8(__c.5177)
 2399 024e 0E94 0000 		call xputs
 2400 0252 8091 0000 		lds r24,mousekey_param
 2401 0256 1F92      		push __zero_reg__
 2402               	.LCFI188:
 2403               		.cfi_def_cfa_offset 4
 2404 0258 8F93      		push r24
 2405               	.LCFI189:
 2406               		.cfi_def_cfa_offset 5
 2407 025a 80E0      		ldi r24,lo8(__c.5179)
 2408 025c 90E0      		ldi r25,hi8(__c.5179)
 2409 025e 9F93      		push r25
 2410               	.LCFI190:
 2411               		.cfi_def_cfa_offset 6
 2412 0260 8F93      		push r24
 2413               	.LCFI191:
 2414               		.cfi_def_cfa_offset 7
 2415 0262 0E94 0000 		call __xprintf
 2416 0266 80E0      		ldi r24,lo8(__c.5181)
 2417 0268 90E0      		ldi r25,hi8(__c.5181)
 2418 026a 0E94 0000 		call xputs
 2419 026e 0F90      		pop __tmp_reg__
 2420 0270 0F90      		pop __tmp_reg__
 2421 0272 0F90      		pop __tmp_reg__
 2422 0274 0F90      		pop __tmp_reg__
 2423               	.LCFI192:
 2424               		.cfi_def_cfa_offset 3
 2425 0276 00C0      		rjmp .L115
 2426               	.L113:
 588:../../common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 2427               		.loc 1 588 0
 2428 0278 61E0      		ldi r22,lo8(1)
 2429 027a 00C0      		rjmp .L146
 2430               	.L112:
 591:../../common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 2431               		.loc 1 591 0
 2432 027c 61E0      		ldi r22,lo8(1)
 2433 027e 00C0      		rjmp .L147
 2434               	.L110:
 594:../../common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 2435               		.loc 1 594 0
 2436 0280 6AE0      		ldi r22,lo8(10)
 2437               	.L146:
 2438 0282 8091 0000 		lds r24,mousekey_param
 2439 0286 0E94 0000 		call mousekey_param_inc
 2440 028a 00C0      		rjmp .L115
 2441               	.L147:
 597:../../common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 2442               		.loc 1 597 0
 2443 028c 8091 0000 		lds r24,mousekey_param
 2444 0290 0E94 0000 		call mousekey_param_dec
 2445 0294 00C0      		rjmp .L115
 2446               	.L102:
 609:../../common/command.c ****             print("?");
 2447               		.loc 1 609 0
 2448 0296 80E0      		ldi r24,lo8(__c.5191)
 2449 0298 90E0      		ldi r25,hi8(__c.5191)
 2450 029a 0E94 0000 		call xputs
 2451 029e 00C0      		rjmp .L148
 2452               	.L115:
 612:../../common/command.c ****     print("M"); pdec(mousekey_param); print("> ");
 2453               		.loc 1 612 0
 2454 02a0 80E0      		ldi r24,lo8(__c.5193)
 2455 02a2 90E0      		ldi r25,hi8(__c.5193)
 2456 02a4 0E94 0000 		call xputs
 2457 02a8 8091 0000 		lds r24,mousekey_param
 2458 02ac 1F92      		push __zero_reg__
 2459               	.LCFI193:
 2460               		.cfi_def_cfa_offset 4
 2461 02ae 8F93      		push r24
 2462               	.LCFI194:
 2463               		.cfi_def_cfa_offset 5
 2464 02b0 80E0      		ldi r24,lo8(__c.5195)
 2465 02b2 90E0      		ldi r25,hi8(__c.5195)
 2466 02b4 9F93      		push r25
 2467               	.LCFI195:
 2468               		.cfi_def_cfa_offset 6
 2469 02b6 8F93      		push r24
 2470               	.LCFI196:
 2471               		.cfi_def_cfa_offset 7
 2472 02b8 0E94 0000 		call __xprintf
 2473 02bc 80E0      		ldi r24,lo8(__c.5197)
 2474 02be 90E0      		ldi r25,hi8(__c.5197)
 2475 02c0 0E94 0000 		call xputs
 2476 02c4 0F90      		pop __tmp_reg__
 2477 02c6 0F90      		pop __tmp_reg__
 2478 02c8 0F90      		pop __tmp_reg__
 2479 02ca 0F90      		pop __tmp_reg__
 2480               	.LCFI197:
 2481               		.cfi_def_cfa_offset 3
 2482               	.L148:
 2483               	.LBE195:
 2484               	.LBE194:
  92:../../common/command.c ****     return true;
 2485               		.loc 1 92 0
 2486 02cc 81E0      		ldi r24,lo8(1)
 2487 02ce 00C0      		rjmp .L145
 2488               	.L152:
  89:../../common/command.c ****             command_state = ONESHOT;
 2489               		.loc 1 89 0
 2490 02d0 1092 0000 		sts command_state,__zero_reg__
 2491               	.L116:
  74:../../common/command.c ****                 return false;
 2492               		.loc 1 74 0
 2493 02d4 80E0      		ldi r24,0
 2494 02d6 00C0      		rjmp .L145
 2495               	.L101:
  81:../../common/command.c ****                 return (command_console_extra(code) || command_console(code));
 2496               		.loc 1 81 0
 2497 02d8 80E0      		ldi r24,0
 2498 02da 00C0      		rjmp .L94
 2499               	.L145:
 2500               	/* epilogue start */
  93:../../common/command.c **** }
 2501               		.loc 1 93 0
 2502 02dc CF91      		pop r28
 2503 02de 0895      		ret
 2504               		.cfi_endproc
 2505               	.LFE104:
 2507               		.section	.rodata
 2510               	CSWTCH.47:
 2511 0000 01        		.byte	1
 2512 0001 02        		.byte	2
 2513 0002 03        		.byte	3
 2514 0003 04        		.byte	4
 2515 0004 05        		.byte	5
 2516 0005 06        		.byte	6
 2517 0006 07        		.byte	7
 2518 0007 08        		.byte	8
 2519 0008 09        		.byte	9
 2520 0009 00        		.byte	0
 2521               		.section	.progmem.data,"a",@progbits
 2524               	__c.5107:
 2525 0000 0A00      		.string	"\n"
 2528               	__c.5105:
 2529 0002 2575 00   		.string	"%u"
 2532               	__c.5103:
 2533 0005 6D6B 5F77 		.string	"mk_wheel_time_to_max = "
 2533      6865 656C 
 2533      5F74 696D 
 2533      655F 746F 
 2533      5F6D 6178 
 2536               	__c.5100:
 2537 001d 0A00      		.string	"\n"
 2540               	__c.5098:
 2541 001f 2575 00   		.string	"%u"
 2544               	__c.5096:
 2545 0022 6D6B 5F77 		.string	"mk_wheel_max_speed = "
 2545      6865 656C 
 2545      5F6D 6178 
 2545      5F73 7065 
 2545      6564 203D 
 2548               	__c.5093:
 2549 0038 0A00      		.string	"\n"
 2552               	__c.5091:
 2553 003a 2575 00   		.string	"%u"
 2556               	__c.5089:
 2557 003d 6D6B 5F74 		.string	"mk_time_to_max = "
 2557      696D 655F 
 2557      746F 5F6D 
 2557      6178 203D 
 2557      2000 
 2560               	__c.5086:
 2561 004f 0A00      		.string	"\n"
 2564               	__c.5084:
 2565 0051 2575 00   		.string	"%u"
 2568               	__c.5082:
 2569 0054 6D6B 5F6D 		.string	"mk_max_speed = "
 2569      6178 5F73 
 2569      7065 6564 
 2569      203D 2000 
 2572               	__c.5079:
 2573 0064 0A00      		.string	"\n"
 2576               	__c.5077:
 2577 0066 2575 00   		.string	"%u"
 2580               	__c.5075:
 2581 0069 6D6B 5F69 		.string	"mk_interval = "
 2581      6E74 6572 
 2581      7661 6C20 
 2581      3D20 00
 2584               	__c.5071:
 2585 0078 0A00      		.string	"\n"
 2588               	__c.5069:
 2589 007a 2575 00   		.string	"%u"
 2592               	__c.5067:
 2593 007d 6D6B 5F64 		.string	"mk_delay = "
 2593      656C 6179 
 2593      203D 2000 
 2596               	__c.5060:
 2597 0089 0A00      		.string	"\n"
 2600               	__c.5058:
 2601 008b 2575 00   		.string	"%u"
 2604               	__c.5056:
 2605 008e 6D6B 5F77 		.string	"mk_wheel_time_to_max = "
 2605      6865 656C 
 2605      5F74 696D 
 2605      655F 746F 
 2605      5F6D 6178 
 2608               	__c.5053:
 2609 00a6 0A00      		.string	"\n"
 2612               	__c.5051:
 2613 00a8 2575 00   		.string	"%u"
 2616               	__c.5049:
 2617 00ab 6D6B 5F77 		.string	"mk_wheel_max_speed = "
 2617      6865 656C 
 2617      5F6D 6178 
 2617      5F73 7065 
 2617      6564 203D 
 2620               	__c.5046:
 2621 00c1 0A00      		.string	"\n"
 2624               	__c.5044:
 2625 00c3 2575 00   		.string	"%u"
 2628               	__c.5042:
 2629 00c6 6D6B 5F74 		.string	"mk_time_to_max = "
 2629      696D 655F 
 2629      746F 5F6D 
 2629      6178 203D 
 2629      2000 
 2632               	__c.5039:
 2633 00d8 0A00      		.string	"\n"
 2636               	__c.5037:
 2637 00da 2575 00   		.string	"%u"
 2640               	__c.5035:
 2641 00dd 6D6B 5F6D 		.string	"mk_max_speed = "
 2641      6178 5F73 
 2641      7065 6564 
 2641      203D 2000 
 2644               	__c.5032:
 2645 00ed 0A00      		.string	"\n"
 2648               	__c.5030:
 2649 00ef 2575 00   		.string	"%u"
 2652               	__c.5028:
 2653 00f2 6D6B 5F69 		.string	"mk_interval = "
 2653      6E74 6572 
 2653      7661 6C20 
 2653      3D20 00
 2656               	__c.5024:
 2657 0101 0A00      		.string	"\n"
 2660               	__c.5022:
 2661 0103 2575 00   		.string	"%u"
 2664               	__c.5020:
 2665 0106 6D6B 5F64 		.string	"mk_delay = "
 2665      656C 6179 
 2665      203D 2000 
 2668               	__c.5013:
 2669 0112 0A00      		.string	"\n"
 2672               	__c.5011:
 2673 0114 2575 00   		.string	"%u"
 2676               	__c.5009:
 2677 0117 363A 206D 		.string	"6: mk_wheel_time_to_max: "
 2677      6B5F 7768 
 2677      6565 6C5F 
 2677      7469 6D65 
 2677      5F74 6F5F 
 2680               	__c.5007:
 2681 0131 0A00      		.string	"\n"
 2684               	__c.5005:
 2685 0133 2575 00   		.string	"%u"
 2688               	__c.5003:
 2689 0136 353A 206D 		.string	"5: mk_wheel_max_speed: "
 2689      6B5F 7768 
 2689      6565 6C5F 
 2689      6D61 785F 
 2689      7370 6565 
 2692               	__c.5001:
 2693 014e 0A00      		.string	"\n"
 2696               	__c.4999:
 2697 0150 2575 00   		.string	"%u"
 2700               	__c.4997:
 2701 0153 343A 206D 		.string	"4: mk_time_to_max: "
 2701      6B5F 7469 
 2701      6D65 5F74 
 2701      6F5F 6D61 
 2701      783A 2000 
 2704               	__c.4995:
 2705 0167 0A00      		.string	"\n"
 2708               	__c.4993:
 2709 0169 2575 00   		.string	"%u"
 2712               	__c.4991:
 2713 016c 333A 206D 		.string	"3: mk_max_speed: "
 2713      6B5F 6D61 
 2713      785F 7370 
 2713      6565 643A 
 2713      2000 
 2716               	__c.4989:
 2717 017e 0A00      		.string	"\n"
 2720               	__c.4987:
 2721 0180 2575 00   		.string	"%u"
 2724               	__c.4985:
 2725 0183 323A 206D 		.string	"2: mk_interval(ms): "
 2725      6B5F 696E 
 2725      7465 7276 
 2725      616C 286D 
 2725      7329 3A20 
 2728               	__c.4983:
 2729 0198 0A00      		.string	"\n"
 2732               	__c.4981:
 2733 019a 2575 00   		.string	"%u"
 2736               	__c.4979:
 2737 019d 313A 206D 		.string	"1: mk_delay(*10ms): "
 2737      6B5F 6465 
 2737      6C61 7928 
 2737      2A31 306D 
 2737      7329 3A20 
 2740               	__c.4977:
 2741 01b2 0A0A 2D2D 		.string	"\n\n----- Mousekey Parameters -----\n"
 2741      2D2D 2D20 
 2741      4D6F 7573 
 2741      656B 6579 
 2741      2050 6172 
 2744               	__c.5197:
 2745 01d5 3E20 00   		.string	"> "
 2748               	__c.5195:
 2749 01d8 2575 00   		.string	"%u"
 2752               	__c.5193:
 2753 01db 4D00      		.string	"M"
 2756               	__c.5191:
 2757 01dd 3F00      		.string	"?"
 2760               	__c.5188:
 2761 01df 7365 7420 		.string	"set default values.\n"
 2761      6465 6661 
 2761      756C 7420 
 2761      7661 6C75 
 2761      6573 2E0A 
 2764               	__c.5181:
 2765 01f4 0A00      		.string	"\n"
 2768               	__c.5179:
 2769 01f6 2575 00   		.string	"%u"
 2772               	__c.5177:
 2773 01f9 7365 6C65 		.string	"selected parameter: "
 2773      6374 6564 
 2773      2070 6172 
 2773      616D 6574 
 2773      6572 3A20 
 2776               	__c.5164:
 2777 020e 433E 2000 		.string	"C> "
 2780               	__c.5162:
 2781 0212 0A51 7569 		.string	"\nQuit Mousekey Console\n"
 2781      7420 4D6F 
 2781      7573 656B 
 2781      6579 2043 
 2781      6F6E 736F 
 2784               	__c.5152:
 2785 022a 5365 6520 		.string	"See http://en.wikipedia.org/wiki/Mouse_keys\n"
 2785      6874 7470 
 2785      3A2F 2F65 
 2785      6E2E 7769 
 2785      6B69 7065 
 2788               	__c.5150:
 2789 0257 0A00      		.string	"\n"
 2792               	__c.5148:
 2793 0259 2575 00   		.string	"%u"
 2796               	__c.5146:
 2797 025c 2C20 7768 		.string	", wheel="
 2797      6565 6C3D 
 2797      00
 2800               	__c.5144:
 2801 0265 2575 00   		.string	"%u"
 2804               	__c.5142:
 2805 0268 7768 6572 		.string	"where delta: cursor="
 2805      6520 6465 
 2805      6C74 613A 
 2805      2063 7572 
 2805      736F 723D 
 2808               	__c.5140:
 2809 027d 0A73 7065 		.string	"\nspeed = delta * max_speed * (repeat / time_to_max)\n"
 2809      6564 203D 
 2809      2064 656C 
 2809      7461 202A 
 2809      206D 6178 
 2812               	__c.5138:
 2813 02b2 7067 646F 		.string	"pgdown:\tdecrease parameters(-10)\n"
 2813      776E 3A09 
 2813      6465 6372 
 2813      6561 7365 
 2813      2070 6172 
 2816               	__c.5136:
 2817 02d4 7067 7570 		.string	"pgup:\tincrease parameters(+10)\n"
 2817      3A09 696E 
 2817      6372 6561 
 2817      7365 2070 
 2817      6172 616D 
 2820               	__c.5134:
 2821 02f4 646F 776E 		.string	"down:\tdecrease parameters(-1)\n"
 2821      3A09 6465 
 2821      6372 6561 
 2821      7365 2070 
 2821      6172 616D 
 2824               	__c.5132:
 2825 0313 7570 3A09 		.string	"up:\tincrease parameters(+1)\n"
 2825      696E 6372 
 2825      6561 7365 
 2825      2070 6172 
 2825      616D 6574 
 2828               	__c.5130:
 2829 0330 643A 0973 		.string	"d:\tset default values\n"
 2829      6574 2064 
 2829      6566 6175 
 2829      6C74 2076 
 2829      616C 7565 
 2832               	__c.5128:
 2833 0347 703A 0970 		.string	"p:\tprint parameters\n"
 2833      7269 6E74 
 2833      2070 6172 
 2833      616D 6574 
 2833      6572 730A 
 2836               	__c.5126:
 2837 035c 363A 0973 		.string	"6:\tselect mk_wheel_time_to_max\n"
 2837      656C 6563 
 2837      7420 6D6B 
 2837      5F77 6865 
 2837      656C 5F74 
 2840               	__c.5124:
 2841 037c 353A 0973 		.string	"5:\tselect mk_wheel_max_speed\n"
 2841      656C 6563 
 2841      7420 6D6B 
 2841      5F77 6865 
 2841      656C 5F6D 
 2844               	__c.5122:
 2845 039a 343A 0973 		.string	"4:\tselect mk_time_to_max\n"
 2845      656C 6563 
 2845      7420 6D6B 
 2845      5F74 696D 
 2845      655F 746F 
 2848               	__c.5120:
 2849 03b4 333A 0973 		.string	"3:\tselect mk_max_speed\n"
 2849      656C 6563 
 2849      7420 6D6B 
 2849      5F6D 6178 
 2849      5F73 7065 
 2852               	__c.5118:
 2853 03cc 323A 0973 		.string	"2:\tselect mk_interval(ms)\n"
 2853      656C 6563 
 2853      7420 6D6B 
 2853      5F69 6E74 
 2853      6572 7661 
 2856               	__c.5116:
 2857 03e7 313A 0973 		.string	"1:\tselect mk_delay(*10ms)\n"
 2857      656C 6563 
 2857      7420 6D6B 
 2857      5F64 656C 
 2857      6179 282A 
 2860               	__c.5114:
 2861 0402 4553 432F 		.string	"ESC/q:\tquit\n"
 2861      713A 0971 
 2861      7569 740A 
 2861      00
 2864               	__c.5112:
 2865 040f 0A0A 2D2D 		.string	"\n\n----- Mousekey Parameters Help -----\n"
 2865      2D2D 2D20 
 2865      4D6F 7573 
 2865      656B 6579 
 2865      2050 6172 
 2868               	__c.4969:
 2869 0437 3F00      		.string	"?"
 2872               	__c.4966:
 2873 0439 4D30 3E00 		.string	"M0>"
 2876               	__c.4964:
 2877 043d 0A45 6E74 		.string	"\nEnter Mousekey Console\n"
 2877      6572 204D 
 2877      6F75 7365 
 2877      6B65 7920 
 2877      436F 6E73 
 2880               	__c.4961:
 2881 0456 0A51 7569 		.string	"\nQuit Console Mode\n"
 2881      7420 436F 
 2881      6E73 6F6C 
 2881      6520 4D6F 
 2881      6465 0A00 
 2884               	__c.4971:
 2885 046a 433E 2000 		.string	"C> "
 2888               	__c.5223:
 2889 046e 0A00      		.string	"\n"
 2892               	__c.5221:
 2893 0470 2575 00   		.string	"%u"
 2896               	__c.5219:
 2897 0473 2074 6F20 		.string	" to "
 2897      00
 2900               	__c.5217:
 2901 0478 2575 00   		.string	"%u"
 2904               	__c.5215:
 2905 047b 7377 6974 		.string	"switch_default_layer: "
 2905      6368 5F64 
 2905      6566 6175 
 2905      6C74 5F6C 
 2905      6179 6572 
 2908               	__c.4951:
 2909 0492 6D3A 096D 		.string	"m:\tmousekey\n"
 2909      6F75 7365 
 2909      6B65 790A 
 2909      00
 2912               	__c.4949:
 2913 049f 4553 432F 		.string	"ESC/q:\tquit\n"
 2913      713A 0971 
 2913      7569 740A 
 2913      00
 2916               	__c.4947:
 2917 04ac 0A0A 2D2D 		.string	"\n\n----- Console Help -----\n"
 2917      2D2D 2D20 
 2917      436F 6E73 
 2917      6F6C 6520 
 2917      4865 6C70 
 2920               	__c.4763:
 2921 04c8 5061 7573 		.string	"Paus:\tjump to bootloader\n"
 2921      3A09 6A75 
 2921      6D70 2074 
 2921      6F20 626F 
 2921      6F74 6C6F 
 2924               	__c.4761:
 2925 04e2 4361 7073 		.string	"Caps:\tLock Keyboard(Child Proof)\n"
 2925      3A09 4C6F 
 2925      636B 204B 
 2925      6579 626F 
 2925      6172 6428 
 2928               	__c.4759:
 2929 0504 5053 6372 		.string	"PScr:\tpower down/remote wake-up\n"
 2929      3A09 706F 
 2929      7765 7220 
 2929      646F 776E 
 2929      2F72 656D 
 2932               	__c.4757:
 2933 0525 342F 4634 		.string	"4/F4:\tswitch to Layer4 \n"
 2933      3A09 7377 
 2933      6974 6368 
 2933      2074 6F20 
 2933      4C61 7965 
 2936               	__c.4755:
 2937 053e 332F 4633 		.string	"3/F3:\tswitch to Layer3 \n"
 2937      3A09 7377 
 2937      6974 6368 
 2937      2074 6F20 
 2937      4C61 7965 
 2940               	__c.4753:
 2941 0557 322F 4632 		.string	"2/F2:\tswitch to Layer2 \n"
 2941      3A09 7377 
 2941      6974 6368 
 2941      2074 6F20 
 2941      4C61 7965 
 2944               	__c.4751:
 2945 0570 312F 4631 		.string	"1/F1:\tswitch to Layer1 \n"
 2945      3A09 7377 
 2945      6974 6368 
 2945      2074 6F20 
 2945      4C61 7965 
 2948               	__c.4749:
 2949 0589 302F 4631 		.string	"0/F10:\tswitch to Layer0 \n"
 2949      303A 0973 
 2949      7769 7463 
 2949      6820 746F 
 2949      204C 6179 
 2952               	__c.4747:
 2953 05a3 6E3A 0974 		.string	"n:\ttoggle NKRO\n"
 2953      6F67 676C 
 2953      6520 4E4B 
 2953      524F 0A00 
 2956               	__c.4745:
 2957 05b3 653A 0970 		.string	"e:\tprint eeprom config\n"
 2957      7269 6E74 
 2957      2065 6570 
 2957      726F 6D20 
 2957      636F 6E66 
 2960               	__c.4743:
 2961 05cb 733A 0970 		.string	"s:\tprint status\n"
 2961      7269 6E74 
 2961      2073 7461 
 2961      7475 730A 
 2961      00
 2964               	__c.4741:
 2965 05dc 743A 0970 		.string	"t:\tprint timer count\n"
 2965      7269 6E74 
 2965      2074 696D 
 2965      6572 2063 
 2965      6F75 6E74 
 2968               	__c.4739:
 2969 05f2 763A 0970 		.string	"v:\tprint device version & info\n"
 2969      7269 6E74 
 2969      2064 6576 
 2969      6963 6520 
 2969      7665 7273 
 2972               	__c.4737:
 2973 0612 6D3A 0974 		.string	"m:\ttoggle mouse debug\n"
 2973      6F67 676C 
 2973      6520 6D6F 
 2973      7573 6520 
 2973      6465 6275 
 2976               	__c.4735:
 2977 0629 6B3A 0974 		.string	"k:\ttoggle keyboard debug\n"
 2977      6F67 676C 
 2977      6520 6B65 
 2977      7962 6F61 
 2977      7264 2064 
 2980               	__c.4733:
 2981 0643 783A 0974 		.string	"x:\ttoggle matrix debug\n"
 2981      6F67 676C 
 2981      6520 6D61 
 2981      7472 6978 
 2981      2064 6562 
 2984               	__c.4731:
 2985 065b 643A 0974 		.string	"d:\ttoggle debug enable\n"
 2985      6F67 676C 
 2985      6520 6465 
 2985      6275 6720 
 2985      656E 6162 
 2988               	__c.4729:
 2989 0673 633A 0965 		.string	"c:\tenter console mode\n"
 2989      6E74 6572 
 2989      2063 6F6E 
 2989      736F 6C65 
 2989      206D 6F64 
 2992               	__c.4727:
 2993 068a 0A0A 2D2D 		.string	"\n\n----- Command Help -----\n"
 2993      2D2D 2D20 
 2993      436F 6D6D 
 2993      616E 6420 
 2993      4865 6C70 
 2996               	__c.4858:
 2997 06a6 0A00      		.string	"\n"
 3000               	__c.4856:
 3001 06a8 2575 00   		.string	"%u"
 3004               	__c.4854:
 3005 06ab 2E6E 6B72 		.string	".nkro: "
 3005      6F3A 2000 
 3008               	__c.4852:
 3009 06b3 0A00      		.string	"\n"
 3012               	__c.4850:
 3013 06b5 2575 00   		.string	"%u"
 3016               	__c.4848:
 3017 06b8 2E73 7761 		.string	".swap_backslash_backspace: "
 3017      705F 6261 
 3017      636B 736C 
 3017      6173 685F 
 3017      6261 636B 
 3020               	__c.4846:
 3021 06d4 0A00      		.string	"\n"
 3024               	__c.4844:
 3025 06d6 2575 00   		.string	"%u"
 3028               	__c.4842:
 3029 06d9 2E73 7761 		.string	".swap_grave_esc: "
 3029      705F 6772 
 3029      6176 655F 
 3029      6573 633A 
 3029      2000 
 3032               	__c.4840:
 3033 06eb 0A00      		.string	"\n"
 3036               	__c.4838:
 3037 06ed 2575 00   		.string	"%u"
 3040               	__c.4836:
 3041 06f0 2E6E 6F5F 		.string	".no_gui: "
 3041      6775 693A 
 3041      2000 
 3044               	__c.4834:
 3045 06fa 0A00      		.string	"\n"
 3048               	__c.4832:
 3049 06fc 2575 00   		.string	"%u"
 3052               	__c.4830:
 3053 06ff 2E73 7761 		.string	".swap_ralt_rgui: "
 3053      705F 7261 
 3053      6C74 5F72 
 3053      6775 693A 
 3053      2000 
 3056               	__c.4828:
 3057 0711 0A00      		.string	"\n"
 3060               	__c.4826:
 3061 0713 2575 00   		.string	"%u"
 3064               	__c.4824:
 3065 0716 2E73 7761 		.string	".swap_lalt_lgui: "
 3065      705F 6C61 
 3065      6C74 5F6C 
 3065      6775 693A 
 3065      2000 
 3068               	__c.4822:
 3069 0728 0A00      		.string	"\n"
 3072               	__c.4820:
 3073 072a 2575 00   		.string	"%u"
 3076               	__c.4818:
 3077 072d 2E63 6170 		.string	".capslock_to_control: "
 3077      736C 6F63 
 3077      6B5F 746F 
 3077      5F63 6F6E 
 3077      7472 6F6C 
 3080               	__c.4816:
 3081 0744 0A00      		.string	"\n"
 3084               	__c.4814:
 3085 0746 2575 00   		.string	"%u"
 3088               	__c.4812:
 3089 0749 2E73 7761 		.string	".swap_control_capslock: "
 3089      705F 636F 
 3089      6E74 726F 
 3089      6C5F 6361 
 3089      7073 6C6F 
 3092               	__c.4810:
 3093 0762 0A00      		.string	"\n"
 3096               	__c.4808:
 3097 0764 2530 3258 		.string	"%02X"
 3097      00
 3100               	__c.4806:
 3101 0769 6B65 796D 		.string	"keymap_config.raw: "
 3101      6170 5F63 
 3101      6F6E 6669 
 3101      672E 7261 
 3101      773A 2000 
 3104               	__c.4803:
 3105 077d 0A00      		.string	"\n"
 3108               	__c.4801:
 3109 077f 2575 00   		.string	"%u"
 3112               	__c.4799:
 3113 0782 2E6D 6F75 		.string	".mouse: "
 3113      7365 3A20 
 3113      00
 3116               	__c.4797:
 3117 078b 0A00      		.string	"\n"
 3120               	__c.4795:
 3121 078d 2575 00   		.string	"%u"
 3124               	__c.4793:
 3125 0790 2E6B 6579 		.string	".keyboard: "
 3125      626F 6172 
 3125      643A 2000 
 3128               	__c.4791:
 3129 079c 0A00      		.string	"\n"
 3132               	__c.4789:
 3133 079e 2575 00   		.string	"%u"
 3136               	__c.4787:
 3137 07a1 2E6D 6174 		.string	".matrix: "
 3137      7269 783A 
 3137      2000 
 3140               	__c.4785:
 3141 07ab 0A00      		.string	"\n"
 3144               	__c.4783:
 3145 07ad 2575 00   		.string	"%u"
 3148               	__c.4781:
 3149 07b0 2E65 6E61 		.string	".enable: "
 3149      626C 653A 
 3149      2000 
 3152               	__c.4779:
 3153 07ba 0A00      		.string	"\n"
 3156               	__c.4777:
 3157 07bc 2530 3258 		.string	"%02X"
 3157      00
 3160               	__c.4775:
 3161 07c1 6465 6275 		.string	"debug_config.raw: "
 3161      675F 636F 
 3161      6E66 6967 
 3161      2E72 6177 
 3161      3A20 00
 3164               	__c.4772:
 3165 07d4 0A00      		.string	"\n"
 3168               	__c.4770:
 3169 07d6 2575 00   		.string	"%u"
 3172               	__c.4768:
 3173 07d9 6465 6661 		.string	"default_layer: "
 3173      756C 745F 
 3173      6C61 7965 
 3173      723A 2000 
 3176               	__c.4942:
 3177 07e9 3F00      		.string	"?"
 3180               	__c.4933:
 3181 07eb 4E4B 524F 		.string	"NKRO: disabled\n"
 3181      3A20 6469 
 3181      7361 626C 
 3181      6564 0A00 
 3184               	__c.4931:
 3185 07fb 4E4B 524F 		.string	"NKRO: enabled\n"
 3185      3A20 656E 
 3185      6162 6C65 
 3185      640A 00
 3188               	__c.4928:
 3189 080a 6B65 7962 		.string	"keyboard_idle: %X\n"
 3189      6F61 7264 
 3189      5F69 646C 
 3189      653A 2025 
 3189      580A 00
 3192               	__c.4926:
 3193 081d 6B65 7962 		.string	"keyboard_protocol: %X\n"
 3193      6F61 7264 
 3193      5F70 726F 
 3193      746F 636F 
 3193      6C3A 2025 
 3196               	__c.4924:
 3197 0834 686F 7374 		.string	"host_keyboard_leds(): %X\n"
 3197      5F6B 6579 
 3197      626F 6172 
 3197      645F 6C65 
 3197      6473 2829 
 3200               	__c.4922:
 3201 084e 0A0A 2D2D 		.string	"\n\n----- Status -----\n"
 3201      2D2D 2D20 
 3201      5374 6174 
 3201      7573 202D 
 3201      2D2D 2D2D 
 3204               	__c.4919:
 3205 0864 7469 6D65 		.string	"timer_count: %04lX\n"
 3205      725F 636F 
 3205      756E 743A 
 3205      2025 3034 
 3205      6C58 0A00 
 3208               	__c.4916:
 3209 0878 4743 433A 		.string	"GCC: 4.8.1 AVR-LIBC: 1.8.0svn AVR_ARCH: avr5\n"
 3209      2034 2E38 
 3209      2E31 2041 
 3209      5652 2D4C 
 3209      4942 433A 
 3212               	__c.4914:
 3213 08a6 4F50 5449 		.string	"OPTIONS: LUFA BOOTMAGIC MOUSEKEY EXTRAKEY CONSOLE COMMAND NKRO 4096\n"
 3213      4F4E 533A 
 3213      204C 5546 
 3213      4120 424F 
 3213      4F54 4D41 
 3216               	__c.4912:
 3217 08eb 4255 494C 		.string	"BUILD: 55b00e7-dirty (22:32:22 Jul 28 2015)\n"
 3217      443A 2035 
 3217      3562 3030 
 3217      6537 2D64 
 3217      6972 7479 
 3220               	__c.4910:
 3221 0918 5649 443A 		.string	"VID: 0xFEED(julian) PID: 0x6060(julian) VER: 0x0001\n"
 3221      2030 7846 
 3221      4545 4428 
 3221      6A75 6C69 
 3221      616E 2920 
 3224               	__c.4908:
 3225 094d 4445 5343 		.string	"DESC: firmware for the teensy\n"
 3225      3A20 6669 
 3225      726D 7761 
 3225      7265 2066 
 3225      6F72 2074 
 3228               	__c.4906:
 3229 096c 0A0A 2D2D 		.string	"\n\n----- Version -----\n"
 3229      2D2D 2D20 
 3229      5665 7273 
 3229      696F 6E20 
 3229      2D2D 2D2D 
 3232               	__c.4903:
 3233 0983 0A44 4542 		.string	"\nDEBUG: mouse disabled.\n"
 3233      5547 3A20 
 3233      6D6F 7573 
 3233      6520 6469 
 3233      7361 626C 
 3236               	__c.4901:
 3237 099c 0A44 4542 		.string	"\nDEBUG: mouse enabled.\n"
 3237      5547 3A20 
 3237      6D6F 7573 
 3237      6520 656E 
 3237      6162 6C65 
 3240               	__c.4898:
 3241 09b4 0A44 4542 		.string	"\nDEBUG: keyboard disabled.\n"
 3241      5547 3A20 
 3241      6B65 7962 
 3241      6F61 7264 
 3241      2064 6973 
 3244               	__c.4896:
 3245 09d0 0A44 4542 		.string	"\nDEBUG: keyboard enabled.\n"
 3245      5547 3A20 
 3245      6B65 7962 
 3245      6F61 7264 
 3245      2065 6E61 
 3248               	__c.4893:
 3249 09eb 0A44 4542 		.string	"\nDEBUG: matrix disabled.\n"
 3249      5547 3A20 
 3249      6D61 7472 
 3249      6978 2064 
 3249      6973 6162 
 3252               	__c.4891:
 3253 0a05 0A44 4542 		.string	"\nDEBUG: matrix enabled.\n"
 3253      5547 3A20 
 3253      6D61 7472 
 3253      6978 2065 
 3253      6E61 626C 
 3256               	__c.4888:
 3257 0a1e 0A44 4542 		.string	"\nDEBUG: enabled.\n"
 3257      5547 3A20 
 3257      656E 6162 
 3257      6C65 642E 
 3257      0A00 
 3260               	__c.4886:
 3261 0a30 0A44 4542 		.string	"\nDEBUG: disabled.\n"
 3261      5547 3A20 
 3261      6469 7361 
 3261      626C 6564 
 3261      2E0A 00
 3264               	__c.4883:
 3265 0a43 6E6F 7420 		.string	"not supported.\n"
 3265      7375 7070 
 3265      6F72 7465 
 3265      642E 0A00 
 3268               	__c.4881:
 3269 0a53 0A0A 4A75 		.string	"\n\nJump to bootloader... "
 3269      6D70 2074 
 3269      6F20 626F 
 3269      6F74 6C6F 
 3269      6164 6572 
 3272               	__c.4878:
 3273 0a6c 433E 2000 		.string	"C> "
 3276               	__c.4876:
 3277 0a70 0A45 6E74 		.string	"\nEnter Console Mode\n"
 3277      6572 2043 
 3277      6F6E 736F 
 3277      6C65 204D 
 3277      6F64 650A 
 3280               	__c.4871:
 3281 0a85 556E 6C6F 		.string	"Unlocked.\n"
 3281      636B 6564 
 3281      2E0A 00
 3284               	__c.4869:
 3285 0a90 4C6F 636B 		.string	"Locked.\n"
 3285      6564 2E0A 
 3285      00
 3286               		.local	host_driver.4863
 3287               		.comm	host_driver.4863,2,1
 3290               	__c.4865:
 3291 0a99 6565 636F 		.string	"eeconfig:\n"
 3291      6E66 6967 
 3291      3A0A 00
 3292               		.local	mousekey_param
 3293               		.comm	mousekey_param,1,1
 3294               	.global	command_state
 3295               		.section .bss
 3298               	command_state:
 3299 0000 00        		.zero	1
 3300               		.comm	keymap_config,1,1
 3301               		.text
 3302               	.Letext0:
 3303               		.file 4 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 3304               		.file 5 "../../common/report.h"
 3305               		.file 6 "../../common/host_driver.h"
 3306               		.file 7 "../../common/keymap.h"
 3307               		.file 8 "../../common/debug.h"
 3308               		.file 9 "../../common/command.h"
 3309               		.file 10 "../../protocol/lufa/LUFA-120730/LUFA/Drivers/USB/Core/USBTask.h"
 3310               		.file 11 "../../common/host.h"
 3311               		.file 12 "../../common/timer.h"
 3312               		.file 13 "../../common/action_layer.h"
 3313               		.file 14 "../../common/action_util.h"
 3314               		.file 15 "../../common/mousekey.h"
 3315               		.file 16 "../../common/avr/xprintf.h"
 3316               		.file 17 "../../common/action.h"
 3317               		.file 18 "../../common/keycode.h"
 3318               		.file 19 "../../common/util.h"
DEFINED SYMBOLS
                            *ABS*:00000000 command.c
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2      *ABS*:0000003e __SP_H__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3      *ABS*:0000003d __SP_L__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:4      *ABS*:0000003f __SREG__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:6      *ABS*:00000001 __zero_reg__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:12     .text.command_console_help:00000000 command_console_help
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2916   .progmem.data:000004ac __c.4947
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2912   .progmem.data:0000049f __c.4949
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2908   .progmem.data:00000492 __c.4951
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:41     .text.mousekey_console_help:00000000 mousekey_console_help
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2864   .progmem.data:0000040f __c.5112
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2860   .progmem.data:00000402 __c.5114
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2856   .progmem.data:000003e7 __c.5116
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2852   .progmem.data:000003cc __c.5118
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2848   .progmem.data:000003b4 __c.5120
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2844   .progmem.data:0000039a __c.5122
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2840   .progmem.data:0000037c __c.5124
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2836   .progmem.data:0000035c __c.5126
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2832   .progmem.data:00000347 __c.5128
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2828   .progmem.data:00000330 __c.5130
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2824   .progmem.data:00000313 __c.5132
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2820   .progmem.data:000002f4 __c.5134
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2816   .progmem.data:000002d4 __c.5136
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2812   .progmem.data:000002b2 __c.5138
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2808   .progmem.data:0000027d __c.5140
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2804   .progmem.data:00000268 __c.5142
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2800   .progmem.data:00000265 __c.5144
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2796   .progmem.data:0000025c __c.5146
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2792   .progmem.data:00000259 __c.5148
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2788   .progmem.data:00000257 __c.5150
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2784   .progmem.data:0000022a __c.5152
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:192    .text.mousekey_param_inc:00000000 mousekey_param_inc
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2664   .progmem.data:00000106 __c.5020
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2660   .progmem.data:00000103 __c.5022
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2656   .progmem.data:00000101 __c.5024
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2652   .progmem.data:000000f2 __c.5028
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2648   .progmem.data:000000ef __c.5030
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2644   .progmem.data:000000ed __c.5032
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2640   .progmem.data:000000dd __c.5035
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2636   .progmem.data:000000da __c.5037
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2632   .progmem.data:000000d8 __c.5039
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2628   .progmem.data:000000c6 __c.5042
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2624   .progmem.data:000000c3 __c.5044
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2620   .progmem.data:000000c1 __c.5046
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2616   .progmem.data:000000ab __c.5049
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2612   .progmem.data:000000a8 __c.5051
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2608   .progmem.data:000000a6 __c.5053
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2604   .progmem.data:0000008e __c.5056
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2600   .progmem.data:0000008b __c.5058
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2596   .progmem.data:00000089 __c.5060
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:557    .text.mousekey_param_dec:00000000 mousekey_param_dec
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2592   .progmem.data:0000007d __c.5067
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2588   .progmem.data:0000007a __c.5069
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2584   .progmem.data:00000078 __c.5071
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2580   .progmem.data:00000069 __c.5075
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2576   .progmem.data:00000066 __c.5077
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2572   .progmem.data:00000064 __c.5079
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2568   .progmem.data:00000054 __c.5082
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2564   .progmem.data:00000051 __c.5084
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2560   .progmem.data:0000004f __c.5086
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2556   .progmem.data:0000003d __c.5089
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2552   .progmem.data:0000003a __c.5091
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2548   .progmem.data:00000038 __c.5093
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2544   .progmem.data:00000022 __c.5096
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2540   .progmem.data:0000001f __c.5098
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2536   .progmem.data:0000001d __c.5100
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2532   .progmem.data:00000005 __c.5103
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2528   .progmem.data:00000002 __c.5105
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2524   .progmem.data:00000000 __c.5107
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:868    .text.switch_default_layer:00000000 switch_default_layer
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2904   .progmem.data:0000047b __c.5215
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2900   .progmem.data:00000478 __c.5217
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2896   .progmem.data:00000473 __c.5219
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2892   .progmem.data:00000470 __c.5221
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2888   .progmem.data:0000046e __c.5223
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:974    .text.command_common:00000000 command_common
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3290   .progmem.data:00000a99 __c.4865
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3172   .progmem.data:000007d9 __c.4768
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3168   .progmem.data:000007d6 __c.4770
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3164   .progmem.data:000007d4 __c.4772
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3160   .progmem.data:000007c1 __c.4775
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3156   .progmem.data:000007bc __c.4777
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3152   .progmem.data:000007ba __c.4779
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3148   .progmem.data:000007b0 __c.4781
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3144   .progmem.data:000007ad __c.4783
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3140   .progmem.data:000007ab __c.4785
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3136   .progmem.data:000007a1 __c.4787
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3132   .progmem.data:0000079e __c.4789
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3128   .progmem.data:0000079c __c.4791
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3124   .progmem.data:00000790 __c.4793
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3120   .progmem.data:0000078d __c.4795
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3116   .progmem.data:0000078b __c.4797
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3112   .progmem.data:00000782 __c.4799
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3108   .progmem.data:0000077f __c.4801
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3104   .progmem.data:0000077d __c.4803
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3100   .progmem.data:00000769 __c.4806
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3096   .progmem.data:00000764 __c.4808
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3092   .progmem.data:00000762 __c.4810
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3088   .progmem.data:00000749 __c.4812
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3084   .progmem.data:00000746 __c.4814
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3080   .progmem.data:00000744 __c.4816
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3076   .progmem.data:0000072d __c.4818
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3072   .progmem.data:0000072a __c.4820
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3068   .progmem.data:00000728 __c.4822
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3064   .progmem.data:00000716 __c.4824
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3060   .progmem.data:00000713 __c.4826
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3056   .progmem.data:00000711 __c.4828
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3052   .progmem.data:000006ff __c.4830
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3048   .progmem.data:000006fc __c.4832
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3044   .progmem.data:000006fa __c.4834
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3040   .progmem.data:000006f0 __c.4836
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3036   .progmem.data:000006ed __c.4838
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3032   .progmem.data:000006eb __c.4840
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3028   .progmem.data:000006d9 __c.4842
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3024   .progmem.data:000006d6 __c.4844
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3020   .progmem.data:000006d4 __c.4846
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3016   .progmem.data:000006b8 __c.4848
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3012   .progmem.data:000006b5 __c.4850
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3008   .progmem.data:000006b3 __c.4852
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3004   .progmem.data:000006ab __c.4854
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3000   .progmem.data:000006a8 __c.4856
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2996   .progmem.data:000006a6 __c.4858
                             .bss:00000001 host_driver.4863
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3284   .progmem.data:00000a90 __c.4869
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3280   .progmem.data:00000a85 __c.4871
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2992   .progmem.data:0000068a __c.4727
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2988   .progmem.data:00000673 __c.4729
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2984   .progmem.data:0000065b __c.4731
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2980   .progmem.data:00000643 __c.4733
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2976   .progmem.data:00000629 __c.4735
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2972   .progmem.data:00000612 __c.4737
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2968   .progmem.data:000005f2 __c.4739
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2964   .progmem.data:000005dc __c.4741
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2960   .progmem.data:000005cb __c.4743
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2956   .progmem.data:000005b3 __c.4745
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2952   .progmem.data:000005a3 __c.4747
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2948   .progmem.data:00000589 __c.4749
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2944   .progmem.data:00000570 __c.4751
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2940   .progmem.data:00000557 __c.4753
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2936   .progmem.data:0000053e __c.4755
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2932   .progmem.data:00000525 __c.4757
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2928   .progmem.data:00000504 __c.4759
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2924   .progmem.data:000004e2 __c.4761
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2920   .progmem.data:000004c8 __c.4763
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3276   .progmem.data:00000a70 __c.4876
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3272   .progmem.data:00000a6c __c.4878
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3298   .bss:00000000 command_state
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3268   .progmem.data:00000a53 __c.4881
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3264   .progmem.data:00000a43 __c.4883
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3260   .progmem.data:00000a30 __c.4886
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3256   .progmem.data:00000a1e __c.4888
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3252   .progmem.data:00000a05 __c.4891
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3248   .progmem.data:000009eb __c.4893
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3244   .progmem.data:000009d0 __c.4896
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3240   .progmem.data:000009b4 __c.4898
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3236   .progmem.data:0000099c __c.4901
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3232   .progmem.data:00000983 __c.4903
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3228   .progmem.data:0000096c __c.4906
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3224   .progmem.data:0000094d __c.4908
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3220   .progmem.data:00000918 __c.4910
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3216   .progmem.data:000008eb __c.4912
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3212   .progmem.data:000008a6 __c.4914
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3208   .progmem.data:00000878 __c.4916
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3204   .progmem.data:00000864 __c.4919
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3200   .progmem.data:0000084e __c.4922
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3196   .progmem.data:00000834 __c.4924
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3192   .progmem.data:0000081d __c.4926
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3188   .progmem.data:0000080a __c.4928
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3184   .progmem.data:000007fb __c.4931
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3180   .progmem.data:000007eb __c.4933
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3176   .progmem.data:000007e9 __c.4942
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:1958   .text.matrix_power_up:00000000 matrix_power_up
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:1974   .text.matrix_power_down:00000000 matrix_power_down
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:1989   .text.command_extra:00000000 command_extra
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2008   .text.command_console_extra:00000000 command_console_extra
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2027   .text.command_proc:00000000 command_proc
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2876   .progmem.data:0000043d __c.4964
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2872   .progmem.data:00000439 __c.4966
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2884   .progmem.data:0000046a __c.4971
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2880   .progmem.data:00000456 __c.4961
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2868   .progmem.data:00000437 __c.4969
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2760   .progmem.data:000001df __c.5188
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:3287   .bss:00000003 mousekey_param
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2780   .progmem.data:00000212 __c.5162
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2776   .progmem.data:0000020e __c.5164
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2740   .progmem.data:000001b2 __c.4977
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2736   .progmem.data:0000019d __c.4979
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2732   .progmem.data:0000019a __c.4981
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2728   .progmem.data:00000198 __c.4983
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2724   .progmem.data:00000183 __c.4985
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2720   .progmem.data:00000180 __c.4987
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2716   .progmem.data:0000017e __c.4989
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2712   .progmem.data:0000016c __c.4991
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2708   .progmem.data:00000169 __c.4993
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2704   .progmem.data:00000167 __c.4995
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2700   .progmem.data:00000153 __c.4997
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2696   .progmem.data:00000150 __c.4999
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2692   .progmem.data:0000014e __c.5001
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2688   .progmem.data:00000136 __c.5003
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2684   .progmem.data:00000133 __c.5005
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2680   .progmem.data:00000131 __c.5007
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2676   .progmem.data:00000117 __c.5009
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2672   .progmem.data:00000114 __c.5011
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2668   .progmem.data:00000112 __c.5013
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2510   .rodata:00000000 CSWTCH.47
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2772   .progmem.data:000001f9 __c.5177
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2768   .progmem.data:000001f6 __c.5179
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2764   .progmem.data:000001f4 __c.5181
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2756   .progmem.data:000001dd __c.5191
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2752   .progmem.data:000001db __c.5193
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2748   .progmem.data:000001d8 __c.5195
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccfwu5C1.s:2744   .progmem.data:000001d5 __c.5197
                            *COM*:00000001 keymap_config

UNDEFINED SYMBOLS
xputs
__xprintf
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_state
biton32
default_layer_set
clear_keyboard
__tablejump2__
eeconfig_read_default_layer
eeconfig_read_debug
eeconfig_read_keymap
host_get_driver
host_set_driver
debug_config
bootloader_jump
timer_count
host_keyboard_leds
keyboard_protocol
keyboard_idle
keyboard_nkro
host_system_send
keyboard_report
__do_copy_data
__do_clear_bss

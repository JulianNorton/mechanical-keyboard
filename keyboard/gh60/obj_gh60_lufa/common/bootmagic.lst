   1               		.file	"bootmagic.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.scan_keycode,"ax",@progbits
  12               	scan_keycode:
  13               	.LFB104:
  14               		.file 1 "../../tmk_core/common/bootmagic.c"
   1:../../tmk_core/common/bootmagic.c **** #include <stdint.h>
   2:../../tmk_core/common/bootmagic.c **** #include <stdbool.h>
   3:../../tmk_core/common/bootmagic.c **** #include <util/delay.h>
   4:../../tmk_core/common/bootmagic.c **** #include "matrix.h"
   5:../../tmk_core/common/bootmagic.c **** #include "bootloader.h"
   6:../../tmk_core/common/bootmagic.c **** #include "debug.h"
   7:../../tmk_core/common/bootmagic.c **** #include "keymap.h"
   8:../../tmk_core/common/bootmagic.c **** #include "host.h"
   9:../../tmk_core/common/bootmagic.c **** #include "action_layer.h"
  10:../../tmk_core/common/bootmagic.c **** #include "eeconfig.h"
  11:../../tmk_core/common/bootmagic.c **** #include "bootmagic.h"
  12:../../tmk_core/common/bootmagic.c **** 
  13:../../tmk_core/common/bootmagic.c **** 
  14:../../tmk_core/common/bootmagic.c **** void bootmagic(void)
  15:../../tmk_core/common/bootmagic.c **** {
  16:../../tmk_core/common/bootmagic.c ****     /* check signature */
  17:../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
  18:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  19:../../tmk_core/common/bootmagic.c ****     }
  20:../../tmk_core/common/bootmagic.c **** 
  21:../../tmk_core/common/bootmagic.c ****     /* do scans in case of bounce */
  22:../../tmk_core/common/bootmagic.c ****     print("boogmagic scan: ... ");
  23:../../tmk_core/common/bootmagic.c ****     uint8_t scan = 100;
  24:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); _delay_ms(10); }
  25:../../tmk_core/common/bootmagic.c ****     print("done.\n");
  26:../../tmk_core/common/bootmagic.c **** 
  27:../../tmk_core/common/bootmagic.c ****     /* bootmagic skip */
  28:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
  29:../../tmk_core/common/bootmagic.c ****         return;
  30:../../tmk_core/common/bootmagic.c ****     }
  31:../../tmk_core/common/bootmagic.c **** 
  32:../../tmk_core/common/bootmagic.c ****     /* eeconfig clear */
  33:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
  34:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
  35:../../tmk_core/common/bootmagic.c ****     }
  36:../../tmk_core/common/bootmagic.c **** 
  37:../../tmk_core/common/bootmagic.c ****     /* bootloader */
  38:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
  39:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
  40:../../tmk_core/common/bootmagic.c ****     }
  41:../../tmk_core/common/bootmagic.c **** 
  42:../../tmk_core/common/bootmagic.c ****     /* debug enable */
  43:../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
  44:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
  45:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
  46:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
  47:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
  48:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
  49:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
  50:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
  51:../../tmk_core/common/bootmagic.c ****         } else {
  52:../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
  53:../../tmk_core/common/bootmagic.c ****         }
  54:../../tmk_core/common/bootmagic.c ****     }
  55:../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
  56:../../tmk_core/common/bootmagic.c **** 
  57:../../tmk_core/common/bootmagic.c ****     /* keymap config */
  58:../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
  59:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
  60:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
  61:../../tmk_core/common/bootmagic.c ****     }
  62:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
  63:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
  64:../../tmk_core/common/bootmagic.c ****     }
  65:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
  66:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
  67:../../tmk_core/common/bootmagic.c ****     }
  68:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
  69:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
  70:../../tmk_core/common/bootmagic.c ****     }
  71:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
  72:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
  73:../../tmk_core/common/bootmagic.c ****     }
  74:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
  75:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
  76:../../tmk_core/common/bootmagic.c ****     }
  77:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
  78:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
  79:../../tmk_core/common/bootmagic.c ****     }
  80:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
  81:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
  82:../../tmk_core/common/bootmagic.c ****     }
  83:../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
  84:../../tmk_core/common/bootmagic.c **** 
  85:../../tmk_core/common/bootmagic.c **** #ifdef NKRO_ENABLE
  86:../../tmk_core/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
  87:../../tmk_core/common/bootmagic.c **** #endif
  88:../../tmk_core/common/bootmagic.c **** 
  89:../../tmk_core/common/bootmagic.c ****     /* default layer */
  90:../../tmk_core/common/bootmagic.c ****     uint8_t default_layer = 0;
  91:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
  92:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
  93:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
  94:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
  95:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
  96:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
  99:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 100:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 101:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 102:../../tmk_core/common/bootmagic.c ****     } else {
 103:../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 104:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 105:../../tmk_core/common/bootmagic.c ****     }
 106:../../tmk_core/common/bootmagic.c **** }
 107:../../tmk_core/common/bootmagic.c **** 
 108:../../tmk_core/common/bootmagic.c **** static bool scan_keycode(uint8_t keycode)
 109:../../tmk_core/common/bootmagic.c **** {
  15               		.loc 1 109 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF92      		push r12
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 12, -2
  22 0002 DF92      		push r13
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 13, -3
  26 0004 EF92      		push r14
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 14, -4
  30 0006 FF92      		push r15
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 15, -5
  34 0008 0F93      		push r16
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 16, -6
  38 000a 1F93      		push r17
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 17, -7
  42 000c CF93      		push r28
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 28, -8
  46 000e DF93      		push r29
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 29, -9
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 8 */
  53               	.L__stack_usage = 8
  54 0010 C82E      		mov r12,r24
  55               	.LVL1:
  56               	.LBB6:
 110:../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
  57               		.loc 1 110 0
  58 0012 D12C      		mov r13,__zero_reg__
  59               	.LBB7:
  60               	.LBB8:
 111:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
 112:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 113:../../tmk_core/common/bootmagic.c ****             if (matrix_row & ((matrix_row_t)1<<c)) {
  61               		.loc 1 113 0
  62 0014 01E0      		ldi r16,lo8(1)
  63 0016 10E0      		ldi r17,0
  64               	.LVL2:
  65               	.L8:
  66               	.LBE8:
 111:../../tmk_core/common/bootmagic.c ****         matrix_row_t matrix_row = matrix_get_row(r);
  67               		.loc 1 111 0
  68 0018 8D2D      		mov r24,r13
  69 001a 0E94 0000 		call matrix_get_row
  70               	.LVL3:
  71 001e 7C01      		movw r14,r24
  72               	.LVL4:
  73 0020 C0E0      		ldi r28,0
  74 0022 D0E0      		ldi r29,0
  75               	.LVL5:
  76               	.L7:
  77               	.LBB9:
  78               		.loc 1 113 0
  79 0024 9801      		movw r18,r16
  80 0026 0C2E      		mov r0,r28
  81 0028 00C0      		rjmp 2f
  82               		1:
  83 002a 220F      		lsl r18
  84 002c 331F      		rol r19
  85               		2:
  86 002e 0A94      		dec r0
  87 0030 02F4      		brpl 1b
  88 0032 2E21      		and r18,r14
  89 0034 3F21      		and r19,r15
  90 0036 232B      		or r18,r19
  91 0038 01F4      		brne .L2
  92               	.L6:
  93               	.LVL6:
  94 003a 2196      		adiw r28,1
  95               	.LVL7:
 112:../../tmk_core/common/bootmagic.c ****         for (uint8_t c = 0; c < MATRIX_COLS; c++) {
  96               		.loc 1 112 0
  97 003c CE30      		cpi r28,14
  98 003e D105      		cpc r29,__zero_reg__
  99 0040 01F4      		brne .L7
 100 0042 00C0      		rjmp .L13
 101               	.L2:
 114:../../tmk_core/common/bootmagic.c ****                 if (keycode == keymap_key_to_keycode(0, (keypos_t){ .row = r, .col = c })) {
 102               		.loc 1 114 0
 103 0044 6C2F      		mov r22,r28
 104 0046 7D2D      		mov r23,r13
 105 0048 80E0      		ldi r24,0
 106 004a 0E94 0000 		call keymap_key_to_keycode
 107               	.LVL8:
 108 004e C812      		cpse r12,r24
 109 0050 00C0      		rjmp .L6
 115:../../tmk_core/common/bootmagic.c ****                     return true;
 110               		.loc 1 115 0
 111 0052 81E0      		ldi r24,lo8(1)
 112 0054 00C0      		rjmp .L5
 113               	.L13:
 114               	.LBE9:
 115               	.LBE7:
 110:../../tmk_core/common/bootmagic.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 116               		.loc 1 110 0
 117 0056 D394      		inc r13
 118               	.LVL9:
 119 0058 85E0      		ldi r24,lo8(5)
 120 005a D812      		cpse r13,r24
 121 005c 00C0      		rjmp .L8
 122               	.LBE6:
 116:../../tmk_core/common/bootmagic.c ****                 }
 117:../../tmk_core/common/bootmagic.c ****             }
 118:../../tmk_core/common/bootmagic.c ****         }
 119:../../tmk_core/common/bootmagic.c ****     }
 120:../../tmk_core/common/bootmagic.c ****     return false;
 123               		.loc 1 120 0
 124 005e 80E0      		ldi r24,0
 125               	.LVL10:
 126               	.L5:
 127               	/* epilogue start */
 121:../../tmk_core/common/bootmagic.c **** }
 128               		.loc 1 121 0
 129 0060 DF91      		pop r29
 130 0062 CF91      		pop r28
 131 0064 1F91      		pop r17
 132 0066 0F91      		pop r16
 133 0068 FF90      		pop r15
 134 006a EF90      		pop r14
 135               	.LVL11:
 136 006c DF90      		pop r13
 137               	.LVL12:
 138 006e CF90      		pop r12
 139               	.LVL13:
 140 0070 0895      		ret
 141               		.cfi_endproc
 142               	.LFE104:
 144               		.section	.text.bootmagic_scan_keycode,"ax",@progbits
 145               	.global	bootmagic_scan_keycode
 147               	bootmagic_scan_keycode:
 148               	.LFB105:
 122:../../tmk_core/common/bootmagic.c **** 
 123:../../tmk_core/common/bootmagic.c **** bool bootmagic_scan_keycode(uint8_t keycode)
 124:../../tmk_core/common/bootmagic.c **** {
 149               		.loc 1 124 0
 150               		.cfi_startproc
 151               	.LVL14:
 152 0000 CF93      		push r28
 153               	.LCFI8:
 154               		.cfi_def_cfa_offset 3
 155               		.cfi_offset 28, -2
 156               	/* prologue: function */
 157               	/* frame size = 0 */
 158               	/* stack size = 1 */
 159               	.L__stack_usage = 1
 160 0002 C82F      		mov r28,r24
 125:../../tmk_core/common/bootmagic.c ****     if (!scan_keycode(BOOTMAGIC_KEY_SALT)) return false;
 161               		.loc 1 125 0
 162 0004 8CE2      		ldi r24,lo8(44)
 163               	.LVL15:
 164 0006 0E94 0000 		call scan_keycode
 165               	.LVL16:
 166 000a 8823      		tst r24
 167 000c 01F0      		breq .L15
 126:../../tmk_core/common/bootmagic.c **** 
 127:../../tmk_core/common/bootmagic.c ****     return scan_keycode(keycode);
 168               		.loc 1 127 0
 169 000e 8C2F      		mov r24,r28
 170               	/* epilogue start */
 128:../../tmk_core/common/bootmagic.c **** }
 171               		.loc 1 128 0
 172 0010 CF91      		pop r28
 173               	.LVL17:
 127:../../tmk_core/common/bootmagic.c ****     return scan_keycode(keycode);
 174               		.loc 1 127 0
 175 0012 0C94 0000 		jmp scan_keycode
 176               	.LVL18:
 177               	.L15:
 178               		.loc 1 128 0
 179 0016 80E0      		ldi r24,0
 180               	/* epilogue start */
 181 0018 CF91      		pop r28
 182               	.LVL19:
 183 001a 0895      		ret
 184               		.cfi_endproc
 185               	.LFE105:
 187               		.section	.text.bootmagic,"ax",@progbits
 188               	.global	bootmagic
 190               	bootmagic:
 191               	.LFB103:
  15:../../tmk_core/common/bootmagic.c **** {
 192               		.loc 1 15 0
 193               		.cfi_startproc
 194 0000 CF93      		push r28
 195               	.LCFI9:
 196               		.cfi_def_cfa_offset 3
 197               		.cfi_offset 28, -2
 198               	/* prologue: function */
 199               	/* frame size = 0 */
 200               	/* stack size = 1 */
 201               	.L__stack_usage = 1
  17:../../tmk_core/common/bootmagic.c ****     if (!eeconfig_is_enabled()) {
 202               		.loc 1 17 0
 203 0002 0E94 0000 		call eeconfig_is_enabled
 204               	.LVL20:
 205 0006 8111      		cpse r24,__zero_reg__
 206 0008 00C0      		rjmp .L17
  18:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 207               		.loc 1 18 0
 208 000a 0E94 0000 		call eeconfig_init
 209               	.LVL21:
 210               	.L17:
  22:../../tmk_core/common/bootmagic.c ****     print("boogmagic scan: ... ");
 211               		.loc 1 22 0
 212 000e 80E0      		ldi r24,lo8(__c.4666)
 213 0010 90E0      		ldi r25,hi8(__c.4666)
 214 0012 0E94 0000 		call xputs
 215               	.LVL22:
  24:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); _delay_ms(10); }
 216               		.loc 1 24 0
 217 0016 C5E6      		ldi r28,lo8(101)
 218               	.LVL23:
 219               	.L18:
 220 0018 C150      		subi r28,lo8(-(-1))
 221               	.LVL24:
  24:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); _delay_ms(10); }
 222               		.loc 1 24 0 is_stmt 0 discriminator 1
 223 001a 01F0      		breq .L97
 224               	.LVL25:
  24:../../tmk_core/common/bootmagic.c ****     while (scan--) { matrix_scan(); _delay_ms(10); }
 225               		.loc 1 24 0 discriminator 2
 226 001c 0E94 0000 		call matrix_scan
 227               	.LVL26:
 228               	.LBB10:
 229               	.LBB11:
 230               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 231               		.loc 2 163 0 is_stmt 1 discriminator 2
 232 0020 8FE3      		ldi r24,lo8(-25537)
 233 0022 9CE9      		ldi r25,hi8(-25537)
 234 0024 0197      		1: sbiw r24,1
 235 0026 01F4      		brne 1b
 236 0028 00C0      		rjmp .
 237 002a 0000      		nop
 238 002c 00C0      		rjmp .L18
 239               	.LVL27:
 240               	.L97:
 241               	.LBE11:
 242               	.LBE10:
  25:../../tmk_core/common/bootmagic.c ****     print("done.\n");
 243               		.loc 1 25 0
 244 002e 80E0      		ldi r24,lo8(__c.4672)
 245 0030 90E0      		ldi r25,hi8(__c.4672)
 246 0032 0E94 0000 		call xputs
 247               	.LVL28:
  28:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SKIP)) {
 248               		.loc 1 28 0
 249 0036 89E2      		ldi r24,lo8(41)
 250 0038 0E94 0000 		call bootmagic_scan_keycode
 251               	.LVL29:
 252 003c 8111      		cpse r24,__zero_reg__
 253 003e 00C0      		rjmp .L16
  33:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
 254               		.loc 1 33 0
 255 0040 8AE2      		ldi r24,lo8(42)
 256 0042 0E94 0000 		call bootmagic_scan_keycode
 257               	.LVL30:
 258 0046 8111      		cpse r24,__zero_reg__
  34:../../tmk_core/common/bootmagic.c ****         eeconfig_init();
 259               		.loc 1 34 0
 260 0048 0E94 0000 		call eeconfig_init
 261               	.LVL31:
 262               	.L21:
  38:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_BOOTLOADER)) {
 263               		.loc 1 38 0
 264 004c 85E0      		ldi r24,lo8(5)
 265 004e 0E94 0000 		call bootmagic_scan_keycode
 266               	.LVL32:
 267 0052 8111      		cpse r24,__zero_reg__
  39:../../tmk_core/common/bootmagic.c ****         bootloader_jump();
 268               		.loc 1 39 0
 269 0054 0E94 0000 		call bootloader_jump
 270               	.LVL33:
 271               	.L22:
  43:../../tmk_core/common/bootmagic.c ****     debug_config.raw = eeconfig_read_debug();
 272               		.loc 1 43 0
 273 0058 0E94 0000 		call eeconfig_read_debug
 274               	.LVL34:
 275 005c 8093 0000 		sts debug_config,r24
  44:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
 276               		.loc 1 44 0
 277 0060 87E0      		ldi r24,lo8(7)
 278 0062 0E94 0000 		call bootmagic_scan_keycode
 279               	.LVL35:
 280 0066 8823      		tst r24
 281 0068 01F0      		breq .L23
  45:../../tmk_core/common/bootmagic.c ****         if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
 282               		.loc 1 45 0
 283 006a 8BE1      		ldi r24,lo8(27)
 284 006c 0E94 0000 		call bootmagic_scan_keycode
 285               	.LVL36:
 286 0070 8823      		tst r24
 287 0072 01F0      		breq .L24
  46:../../tmk_core/common/bootmagic.c ****             debug_config.matrix = !debug_config.matrix;
 288               		.loc 1 46 0
 289 0074 9091 0000 		lds r25,debug_config
 290 0078 91FB      		bst r25,1
 291 007a 8827      		clr r24
 292 007c 80F9      		bld r24,0
 293 007e 21E0      		ldi r18,lo8(1)
 294 0080 8227      		eor r24,r18
 295 0082 80FB      		bst r24,0
 296 0084 91F9      		bld r25,1
 297 0086 00C0      		rjmp .L95
 298               	.L24:
  47:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
 299               		.loc 1 47 0
 300 0088 8EE0      		ldi r24,lo8(14)
 301 008a 0E94 0000 		call bootmagic_scan_keycode
 302               	.LVL37:
 303 008e 8823      		tst r24
 304 0090 01F0      		breq .L25
  48:../../tmk_core/common/bootmagic.c ****             debug_config.keyboard = !debug_config.keyboard;
 305               		.loc 1 48 0
 306 0092 9091 0000 		lds r25,debug_config
 307 0096 92FB      		bst r25,2
 308 0098 8827      		clr r24
 309 009a 80F9      		bld r24,0
 310 009c 21E0      		ldi r18,lo8(1)
 311 009e 8227      		eor r24,r18
 312 00a0 80FB      		bst r24,0
 313 00a2 92F9      		bld r25,2
 314 00a4 00C0      		rjmp .L95
 315               	.L25:
  49:../../tmk_core/common/bootmagic.c ****         } else if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
 316               		.loc 1 49 0
 317 00a6 80E1      		ldi r24,lo8(16)
 318 00a8 0E94 0000 		call bootmagic_scan_keycode
 319               	.LVL38:
 320 00ac 9091 0000 		lds r25,debug_config
 321 00b0 8823      		tst r24
 322 00b2 01F0      		breq .L26
  50:../../tmk_core/common/bootmagic.c ****             debug_config.mouse = !debug_config.mouse;
 323               		.loc 1 50 0
 324 00b4 93FB      		bst r25,3
 325 00b6 8827      		clr r24
 326 00b8 80F9      		bld r24,0
 327 00ba 21E0      		ldi r18,lo8(1)
 328 00bc 8227      		eor r24,r18
 329 00be 80FB      		bst r24,0
 330 00c0 93F9      		bld r25,3
 331 00c2 00C0      		rjmp .L95
 332               	.L26:
  52:../../tmk_core/common/bootmagic.c ****             debug_config.enable = !debug_config.enable;
 333               		.loc 1 52 0
 334 00c4 892F      		mov r24,r25
 335 00c6 8095      		com r24
 336 00c8 80FB      		bst r24,0
 337 00ca 90F9      		bld r25,0
 338               	.L95:
 339 00cc 9093 0000 		sts debug_config,r25
 340               	.L23:
  55:../../tmk_core/common/bootmagic.c ****     eeconfig_write_debug(debug_config.raw);
 341               		.loc 1 55 0
 342 00d0 8091 0000 		lds r24,debug_config
 343 00d4 0E94 0000 		call eeconfig_write_debug
 344               	.LVL39:
  58:../../tmk_core/common/bootmagic.c ****     keymap_config.raw = eeconfig_read_keymap();
 345               		.loc 1 58 0
 346 00d8 0E94 0000 		call eeconfig_read_keymap
 347               	.LVL40:
 348 00dc 8093 0000 		sts keymap_config,r24
  59:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
 349               		.loc 1 59 0
 350 00e0 80EE      		ldi r24,lo8(-32)
 351 00e2 0E94 0000 		call bootmagic_scan_keycode
 352               	.LVL41:
 353 00e6 8823      		tst r24
 354 00e8 01F0      		breq .L27
  60:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
 355               		.loc 1 60 0
 356 00ea 8091 0000 		lds r24,keymap_config
 357 00ee 982F      		mov r25,r24
 358 00f0 9095      		com r25
 359 00f2 90FB      		bst r25,0
 360 00f4 80F9      		bld r24,0
 361 00f6 8093 0000 		sts keymap_config,r24
 362               	.L27:
  62:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
 363               		.loc 1 62 0
 364 00fa 89E3      		ldi r24,lo8(57)
 365 00fc 0E94 0000 		call bootmagic_scan_keycode
 366               	.LVL42:
 367 0100 8823      		tst r24
 368 0102 01F0      		breq .L28
  63:../../tmk_core/common/bootmagic.c ****         keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
 369               		.loc 1 63 0
 370 0104 9091 0000 		lds r25,keymap_config
 371 0108 91FB      		bst r25,1
 372 010a 8827      		clr r24
 373 010c 80F9      		bld r24,0
 374 010e 21E0      		ldi r18,lo8(1)
 375 0110 8227      		eor r24,r18
 376 0112 80FB      		bst r24,0
 377 0114 91F9      		bld r25,1
 378 0116 9093 0000 		sts keymap_config,r25
 379               	.L28:
  65:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
 380               		.loc 1 65 0
 381 011a 82EE      		ldi r24,lo8(-30)
 382 011c 0E94 0000 		call bootmagic_scan_keycode
 383               	.LVL43:
 384 0120 8823      		tst r24
 385 0122 01F0      		breq .L29
  66:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 386               		.loc 1 66 0
 387 0124 9091 0000 		lds r25,keymap_config
 388 0128 92FB      		bst r25,2
 389 012a 8827      		clr r24
 390 012c 80F9      		bld r24,0
 391 012e 21E0      		ldi r18,lo8(1)
 392 0130 8227      		eor r24,r18
 393 0132 80FB      		bst r24,0
 394 0134 92F9      		bld r25,2
 395 0136 9093 0000 		sts keymap_config,r25
 396               	.L29:
  68:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
 397               		.loc 1 68 0
 398 013a 86EE      		ldi r24,lo8(-26)
 399 013c 0E94 0000 		call bootmagic_scan_keycode
 400               	.LVL44:
 401 0140 8823      		tst r24
 402 0142 01F0      		breq .L30
  69:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
 403               		.loc 1 69 0
 404 0144 9091 0000 		lds r25,keymap_config
 405 0148 93FB      		bst r25,3
 406 014a 8827      		clr r24
 407 014c 80F9      		bld r24,0
 408 014e 21E0      		ldi r18,lo8(1)
 409 0150 8227      		eor r24,r18
 410 0152 80FB      		bst r24,0
 411 0154 93F9      		bld r25,3
 412 0156 9093 0000 		sts keymap_config,r25
 413               	.L30:
  71:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_NO_GUI)) {
 414               		.loc 1 71 0
 415 015a 83EE      		ldi r24,lo8(-29)
 416 015c 0E94 0000 		call bootmagic_scan_keycode
 417               	.LVL45:
 418 0160 8823      		tst r24
 419 0162 01F0      		breq .L31
  72:../../tmk_core/common/bootmagic.c ****         keymap_config.no_gui = !keymap_config.no_gui;
 420               		.loc 1 72 0
 421 0164 9091 0000 		lds r25,keymap_config
 422 0168 94FB      		bst r25,4
 423 016a 8827      		clr r24
 424 016c 80F9      		bld r24,0
 425 016e 21E0      		ldi r18,lo8(1)
 426 0170 8227      		eor r24,r18
 427 0172 80FB      		bst r24,0
 428 0174 94F9      		bld r25,4
 429 0176 9093 0000 		sts keymap_config,r25
 430               	.L31:
  74:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
 431               		.loc 1 74 0
 432 017a 85E3      		ldi r24,lo8(53)
 433 017c 0E94 0000 		call bootmagic_scan_keycode
 434               	.LVL46:
 435 0180 8823      		tst r24
 436 0182 01F0      		breq .L32
  75:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
 437               		.loc 1 75 0
 438 0184 9091 0000 		lds r25,keymap_config
 439 0188 95FB      		bst r25,5
 440 018a 8827      		clr r24
 441 018c 80F9      		bld r24,0
 442 018e 21E0      		ldi r18,lo8(1)
 443 0190 8227      		eor r24,r18
 444 0192 80FB      		bst r24,0
 445 0194 95F9      		bld r25,5
 446 0196 9093 0000 		sts keymap_config,r25
 447               	.L32:
  77:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
 448               		.loc 1 77 0
 449 019a 81E3      		ldi r24,lo8(49)
 450 019c 0E94 0000 		call bootmagic_scan_keycode
 451               	.LVL47:
 452 01a0 8823      		tst r24
 453 01a2 01F0      		breq .L33
  78:../../tmk_core/common/bootmagic.c ****         keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
 454               		.loc 1 78 0
 455 01a4 9091 0000 		lds r25,keymap_config
 456 01a8 96FB      		bst r25,6
 457 01aa 8827      		clr r24
 458 01ac 80F9      		bld r24,0
 459 01ae 21E0      		ldi r18,lo8(1)
 460 01b0 8227      		eor r24,r18
 461 01b2 80FB      		bst r24,0
 462 01b4 96F9      		bld r25,6
 463 01b6 9093 0000 		sts keymap_config,r25
 464               	.L33:
  80:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_HOST_NKRO)) {
 465               		.loc 1 80 0
 466 01ba 81E1      		ldi r24,lo8(17)
 467 01bc 0E94 0000 		call bootmagic_scan_keycode
 468               	.LVL48:
 469 01c0 8823      		tst r24
 470 01c2 01F0      		breq .L34
  81:../../tmk_core/common/bootmagic.c ****         keymap_config.nkro = !keymap_config.nkro;
 471               		.loc 1 81 0
 472 01c4 9091 0000 		lds r25,keymap_config
 473 01c8 97FB      		bst r25,7
 474 01ca 8827      		clr r24
 475 01cc 80F9      		bld r24,0
 476 01ce 21E0      		ldi r18,lo8(1)
 477 01d0 8227      		eor r24,r18
 478 01d2 80FB      		bst r24,0
 479 01d4 97F9      		bld r25,7
 480 01d6 9093 0000 		sts keymap_config,r25
 481               	.L34:
  83:../../tmk_core/common/bootmagic.c ****     eeconfig_write_keymap(keymap_config.raw);
 482               		.loc 1 83 0
 483 01da 8091 0000 		lds r24,keymap_config
 484 01de 0E94 0000 		call eeconfig_write_keymap
 485               	.LVL49:
  86:../../tmk_core/common/bootmagic.c ****     keyboard_nkro = keymap_config.nkro;
 486               		.loc 1 86 0
 487 01e2 8091 0000 		lds r24,keymap_config
 488 01e6 87FB      		bst r24,7
 489 01e8 8827      		clr r24
 490 01ea 80F9      		bld r24,0
 491 01ec 8093 0000 		sts keyboard_nkro,r24
 492               	.LVL50:
  91:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
 493               		.loc 1 91 0
 494 01f0 87E2      		ldi r24,lo8(39)
 495 01f2 0E94 0000 		call bootmagic_scan_keycode
 496               	.LVL51:
 497 01f6 C82F      		mov r28,r24
 498               	.LVL52:
  92:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 499               		.loc 1 92 0
 500 01f8 8EE1      		ldi r24,lo8(30)
 501               	.LVL53:
 502 01fa 0E94 0000 		call bootmagic_scan_keycode
 503               	.LVL54:
 504 01fe 8111      		cpse r24,__zero_reg__
  92:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
 505               		.loc 1 92 0 is_stmt 0 discriminator 1
 506 0200 C260      		ori r28,lo8(2)
 507               	.LVL55:
 508               	.L35:
  93:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 509               		.loc 1 93 0 is_stmt 1
 510 0202 8FE1      		ldi r24,lo8(31)
 511 0204 0E94 0000 		call bootmagic_scan_keycode
 512               	.LVL56:
 513 0208 8111      		cpse r24,__zero_reg__
  93:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
 514               		.loc 1 93 0 is_stmt 0 discriminator 1
 515 020a C460      		ori r28,lo8(4)
 516               	.LVL57:
 517               	.L36:
  94:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 518               		.loc 1 94 0 is_stmt 1
 519 020c 80E2      		ldi r24,lo8(32)
 520 020e 0E94 0000 		call bootmagic_scan_keycode
 521               	.LVL58:
 522 0212 8111      		cpse r24,__zero_reg__
  94:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
 523               		.loc 1 94 0 is_stmt 0 discriminator 1
 524 0214 C860      		ori r28,lo8(8)
 525               	.LVL59:
 526               	.L37:
  95:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 527               		.loc 1 95 0 is_stmt 1
 528 0216 81E2      		ldi r24,lo8(33)
 529 0218 0E94 0000 		call bootmagic_scan_keycode
 530               	.LVL60:
 531 021c 8111      		cpse r24,__zero_reg__
  95:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
 532               		.loc 1 95 0 is_stmt 0 discriminator 1
 533 021e C061      		ori r28,lo8(16)
 534               	.LVL61:
 535               	.L38:
  96:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 536               		.loc 1 96 0 is_stmt 1
 537 0220 82E2      		ldi r24,lo8(34)
 538 0222 0E94 0000 		call bootmagic_scan_keycode
 539               	.LVL62:
 540 0226 8111      		cpse r24,__zero_reg__
  96:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
 541               		.loc 1 96 0 is_stmt 0 discriminator 1
 542 0228 C062      		ori r28,lo8(32)
 543               	.LVL63:
 544               	.L39:
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 545               		.loc 1 97 0 is_stmt 1
 546 022a 83E2      		ldi r24,lo8(35)
 547 022c 0E94 0000 		call bootmagic_scan_keycode
 548               	.LVL64:
 549 0230 8111      		cpse r24,__zero_reg__
  97:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
 550               		.loc 1 97 0 is_stmt 0 discriminator 1
 551 0232 C064      		ori r28,lo8(64)
 552               	.LVL65:
 553               	.L40:
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 554               		.loc 1 98 0 is_stmt 1
 555 0234 84E2      		ldi r24,lo8(36)
 556 0236 0E94 0000 		call bootmagic_scan_keycode
 557               	.LVL66:
 558 023a 8823      		tst r24
 559 023c 01F0      		breq .L41
  98:../../tmk_core/common/bootmagic.c ****     if (bootmagic_scan_keycode(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
 560               		.loc 1 98 0 is_stmt 0 discriminator 1
 561 023e C068      		ori r28,lo8(-128)
 562               	.LVL67:
 563 0240 00C0      		rjmp .L42
 564               	.L41:
  99:../../tmk_core/common/bootmagic.c ****     if (default_layer) {
 565               		.loc 1 99 0 is_stmt 1
 566 0242 CC23      		tst r28
 567 0244 01F0      		breq .L43
 568               	.L42:
 100:../../tmk_core/common/bootmagic.c ****         eeconfig_write_default_layer(default_layer);
 569               		.loc 1 100 0
 570 0246 8C2F      		mov r24,r28
 571 0248 0E94 0000 		call eeconfig_write_default_layer
 572               	.LVL68:
 101:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 573               		.loc 1 101 0
 574 024c 6C2F      		mov r22,r28
 575 024e 00C0      		rjmp .L96
 576               	.L43:
 103:../../tmk_core/common/bootmagic.c ****         default_layer = eeconfig_read_default_layer();
 577               		.loc 1 103 0
 578 0250 0E94 0000 		call eeconfig_read_default_layer
 579               	.LVL69:
 104:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 580               		.loc 1 104 0
 581 0254 682F      		mov r22,r24
 582               	.LVL70:
 583               	.L96:
 584 0256 70E0      		ldi r23,0
 585 0258 80E0      		ldi r24,0
 586 025a 90E0      		ldi r25,0
 587               	/* epilogue start */
 106:../../tmk_core/common/bootmagic.c **** }
 588               		.loc 1 106 0
 589 025c CF91      		pop r28
 104:../../tmk_core/common/bootmagic.c ****         default_layer_set((uint32_t)default_layer);
 590               		.loc 1 104 0
 591 025e 0C94 0000 		jmp default_layer_set
 592               	.LVL71:
 593               	.L16:
 594               	/* epilogue start */
 106:../../tmk_core/common/bootmagic.c **** }
 595               		.loc 1 106 0
 596 0262 CF91      		pop r28
 597               	.LVL72:
 598 0264 0895      		ret
 599               		.cfi_endproc
 600               	.LFE103:
 602               		.section	.progmem.data.__c.4672,"a",@progbits
 605               	__c.4672:
 606 0000 646F 6E65 		.string	"done.\n"
 606      2E0A 00
 607               		.section	.progmem.data.__c.4666,"a",@progbits
 610               	__c.4666:
 611 0000 626F 6F67 		.string	"boogmagic scan: ... "
 611      6D61 6769 
 611      6320 7363 
 611      616E 3A20 
 611      2E2E 2E20 
 612               		.comm	keymap_config,1,1
 613               		.text
 614               	.Letext0:
 615               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 616               		.file 4 "../../tmk_core/common/matrix.h"
 617               		.file 5 "../../tmk_core/common/debug.h"
 618               		.file 6 "../../tmk_core/common/keyboard.h"
 619               		.file 7 "../../tmk_core/common/keymap.h"
 620               		.file 8 "../../tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 621               		.file 9 "../../tmk_core/common/host.h"
 622               		.file 10 "../../tmk_core/common/eeconfig.h"
 623               		.file 11 "../../tmk_core/common/bootloader.h"
 624               		.file 12 "../../tmk_core/common/avr/xprintf.h"
 625               		.file 13 "../../tmk_core/common/keycode.h"
 626               		.file 14 "../../tmk_core/common/action_layer.h"
DEFINED SYMBOLS
                            *ABS*:00000000 bootmagic.c
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cckj3RLk.s:2      *ABS*:0000003e __SP_H__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cckj3RLk.s:3      *ABS*:0000003d __SP_L__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cckj3RLk.s:4      *ABS*:0000003f __SREG__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cckj3RLk.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cckj3RLk.s:6      *ABS*:00000001 __zero_reg__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cckj3RLk.s:12     .text.scan_keycode:00000000 scan_keycode
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cckj3RLk.s:147    .text.bootmagic_scan_keycode:00000000 bootmagic_scan_keycode
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cckj3RLk.s:190    .text.bootmagic:00000000 bootmagic
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cckj3RLk.s:610    .progmem.data.__c.4666:00000000 __c.4666
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//cckj3RLk.s:605    .progmem.data.__c.4672:00000000 __c.4672
                            *COM*:00000001 keymap_config

UNDEFINED SYMBOLS
matrix_get_row
keymap_key_to_keycode
eeconfig_is_enabled
eeconfig_init
xputs
matrix_scan
bootloader_jump
eeconfig_read_debug
debug_config
eeconfig_write_debug
eeconfig_read_keymap
eeconfig_write_keymap
keyboard_nkro
eeconfig_write_default_layer
eeconfig_read_default_layer
default_layer_set
__do_clear_bss

   1               		.file	"action_layer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_power_up,"ax",@progbits
  11               		.weak	matrix_power_up
  13               	matrix_power_up:
  14               	.LFB3:
  15               		.file 1 "../../common/keyboard.h"
   1:../../common/keyboard.h **** /*
   2:../../common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:../../common/keyboard.h **** 
   4:../../common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:../../common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:../../common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:../../common/keyboard.h **** (at your option) any later version.
   8:../../common/keyboard.h **** 
   9:../../common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:../../common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../../common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:../../common/keyboard.h **** GNU General Public License for more details.
  13:../../common/keyboard.h **** 
  14:../../common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:../../common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:../../common/keyboard.h **** */
  17:../../common/keyboard.h **** 
  18:../../common/keyboard.h **** #ifndef KEYBOARD_H
  19:../../common/keyboard.h **** #define KEYBOARD_H
  20:../../common/keyboard.h **** 
  21:../../common/keyboard.h **** #include <stdbool.h>
  22:../../common/keyboard.h **** #include <stdint.h>
  23:../../common/keyboard.h **** 
  24:../../common/keyboard.h **** 
  25:../../common/keyboard.h **** #ifdef __cplusplus
  26:../../common/keyboard.h **** extern "C" {
  27:../../common/keyboard.h **** #endif
  28:../../common/keyboard.h **** 
  29:../../common/keyboard.h **** /* key matrix position */
  30:../../common/keyboard.h **** typedef struct {
  31:../../common/keyboard.h ****     uint8_t col;
  32:../../common/keyboard.h ****     uint8_t row;
  33:../../common/keyboard.h **** } keypos_t;
  34:../../common/keyboard.h **** 
  35:../../common/keyboard.h **** /* key event */
  36:../../common/keyboard.h **** typedef struct {
  37:../../common/keyboard.h ****     keypos_t key;
  38:../../common/keyboard.h ****     bool     pressed;
  39:../../common/keyboard.h ****     uint16_t time;
  40:../../common/keyboard.h **** } keyevent_t;
  41:../../common/keyboard.h **** 
  42:../../common/keyboard.h **** /* equivalent test of keypos_t */
  43:../../common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:../../common/keyboard.h **** 
  45:../../common/keyboard.h **** /* Rules for No Event:
  46:../../common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:../../common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:../../common/keyboard.h ****  */
  49:../../common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
  50:../../common/keyboard.h **** static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
  51:../../common/keyboard.h **** static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
  52:../../common/keyboard.h **** 
  53:../../common/keyboard.h **** /* Tick event */
  54:../../common/keyboard.h **** #define TICK                    (keyevent_t){           \
  55:../../common/keyboard.h ****     .key = (keypos_t){ .row = 255, .col = 255 },           \
  56:../../common/keyboard.h ****     .pressed = false,                                   \
  57:../../common/keyboard.h ****     .time = (timer_read() | 1)                          \
  58:../../common/keyboard.h **** }
  59:../../common/keyboard.h **** 
  60:../../common/keyboard.h **** 
  61:../../common/keyboard.h **** void keyboard_init(void);
  62:../../common/keyboard.h **** void keyboard_task(void);
  63:../../common/keyboard.h **** void keyboard_set_leds(uint8_t leds);
  64:../../common/keyboard.h **** 
  65:../../common/keyboard.h **** __attribute__ ((weak)) void matrix_power_up(void) {}
  16               		.loc 1 65 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE3:
  26               		.section	.text.matrix_power_down,"ax",@progbits
  27               		.weak	matrix_power_down
  29               	matrix_power_down:
  30               	.LFB4:
  66:../../common/keyboard.h **** __attribute__ ((weak)) void matrix_power_down(void) {}
  31               		.loc 1 66 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
  37 0000 0895      		ret
  38               		.cfi_endproc
  39               	.LFE4:
  41               		.section	.text.default_layer_debug,"ax",@progbits
  42               	.global	default_layer_debug
  44               	default_layer_debug:
  45               	.LFB7:
  46               		.file 2 "../../common/action_layer.c"
   1:../../common/action_layer.c **** #include <stdint.h>
   2:../../common/action_layer.c **** #include "keyboard.h"
   3:../../common/action_layer.c **** #include "action.h"
   4:../../common/action_layer.c **** #include "util.h"
   5:../../common/action_layer.c **** #include "action_layer.h"
   6:../../common/action_layer.c **** 
   7:../../common/action_layer.c **** #ifdef DEBUG_ACTION
   8:../../common/action_layer.c **** #include "debug.h"
   9:../../common/action_layer.c **** #else
  10:../../common/action_layer.c **** #include "nodebug.h"
  11:../../common/action_layer.c **** #endif
  12:../../common/action_layer.c **** 
  13:../../common/action_layer.c **** 
  14:../../common/action_layer.c **** /* 
  15:../../common/action_layer.c ****  * Default Layer State
  16:../../common/action_layer.c ****  */
  17:../../common/action_layer.c **** uint32_t default_layer_state = 0;
  18:../../common/action_layer.c **** 
  19:../../common/action_layer.c **** static void default_layer_state_set(uint32_t state)
  20:../../common/action_layer.c **** {
  21:../../common/action_layer.c ****     debug("default_layer_state: ");
  22:../../common/action_layer.c ****     default_layer_debug(); debug(" to ");
  23:../../common/action_layer.c ****     default_layer_state = state;
  24:../../common/action_layer.c ****     default_layer_debug(); debug("\n");
  25:../../common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
  26:../../common/action_layer.c **** }
  27:../../common/action_layer.c **** 
  28:../../common/action_layer.c **** void default_layer_debug(void)
  29:../../common/action_layer.c **** {
  47               		.loc 2 29 0
  48               		.cfi_startproc
  49               	/* prologue: function */
  50               	/* frame size = 0 */
  51               	/* stack size = 0 */
  52               	.L__stack_usage = 0
  53 0000 0895      		ret
  54               		.cfi_endproc
  55               	.LFE7:
  57               		.section	.text.default_layer_set,"ax",@progbits
  58               	.global	default_layer_set
  60               	default_layer_set:
  61               	.LFB8:
  30:../../common/action_layer.c ****     dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
  31:../../common/action_layer.c **** }
  32:../../common/action_layer.c **** 
  33:../../common/action_layer.c **** void default_layer_set(uint32_t state)
  34:../../common/action_layer.c **** {
  62               		.loc 2 34 0
  63               		.cfi_startproc
  64               	.LVL0:
  65               	/* prologue: function */
  66               	/* frame size = 0 */
  67               	/* stack size = 0 */
  68               	.L__stack_usage = 0
  69               	.LBB4:
  70               	.LBB5:
  23:../../common/action_layer.c ****     default_layer_state = state;
  71               		.loc 2 23 0
  72 0000 6093 0000 		sts default_layer_state,r22
  73 0004 7093 0000 		sts default_layer_state+1,r23
  74 0008 8093 0000 		sts default_layer_state+2,r24
  75 000c 9093 0000 		sts default_layer_state+3,r25
  25:../../common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
  76               		.loc 2 25 0
  77 0010 0C94 0000 		jmp clear_keyboard_but_mods
  78               	.LVL1:
  79               	.LBE5:
  80               	.LBE4:
  81               		.cfi_endproc
  82               	.LFE8:
  84               		.section	.text.default_layer_or,"ax",@progbits
  85               	.global	default_layer_or
  87               	default_layer_or:
  88               	.LFB9:
  35:../../common/action_layer.c ****     default_layer_state_set(state);
  36:../../common/action_layer.c **** }
  37:../../common/action_layer.c **** 
  38:../../common/action_layer.c **** #ifndef NO_ACTION_LAYER
  39:../../common/action_layer.c **** void default_layer_or(uint32_t state)
  40:../../common/action_layer.c **** {
  89               		.loc 2 40 0
  90               		.cfi_startproc
  91               	.LVL2:
  92 0000 0F93      		push r16
  93               	.LCFI0:
  94               		.cfi_def_cfa_offset 3
  95               		.cfi_offset 16, -2
  96 0002 1F93      		push r17
  97               	.LCFI1:
  98               		.cfi_def_cfa_offset 4
  99               		.cfi_offset 17, -3
 100               	/* prologue: function */
 101               	/* frame size = 0 */
 102               	/* stack size = 2 */
 103               	.L__stack_usage = 2
 104               	.LVL3:
  41:../../common/action_layer.c ****     default_layer_state_set(default_layer_state | state);
 105               		.loc 2 41 0
 106 0004 0091 0000 		lds r16,default_layer_state
 107 0008 1091 0000 		lds r17,default_layer_state+1
 108 000c 2091 0000 		lds r18,default_layer_state+2
 109 0010 3091 0000 		lds r19,default_layer_state+3
 110 0014 062B      		or r16,r22
 111 0016 172B      		or r17,r23
 112 0018 282B      		or r18,r24
 113 001a 392B      		or r19,r25
 114               	.LVL4:
 115               	.LBB8:
 116               	.LBB9:
  23:../../common/action_layer.c ****     default_layer_state = state;
 117               		.loc 2 23 0
 118 001c 0093 0000 		sts default_layer_state,r16
 119 0020 1093 0000 		sts default_layer_state+1,r17
 120 0024 2093 0000 		sts default_layer_state+2,r18
 121 0028 3093 0000 		sts default_layer_state+3,r19
 122               	/* epilogue start */
 123               	.LBE9:
 124               	.LBE8:
  42:../../common/action_layer.c **** }
 125               		.loc 2 42 0
 126 002c 1F91      		pop r17
 127 002e 0F91      		pop r16
 128               	.LVL5:
 129               	.LBB11:
 130               	.LBB10:
  25:../../common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 131               		.loc 2 25 0
 132 0030 0C94 0000 		jmp clear_keyboard_but_mods
 133               	.LVL6:
 134               	.LBE10:
 135               	.LBE11:
 136               		.cfi_endproc
 137               	.LFE9:
 139               		.section	.text.default_layer_and,"ax",@progbits
 140               	.global	default_layer_and
 142               	default_layer_and:
 143               	.LFB10:
  43:../../common/action_layer.c **** void default_layer_and(uint32_t state)
  44:../../common/action_layer.c **** {
 144               		.loc 2 44 0
 145               		.cfi_startproc
 146               	.LVL7:
 147 0000 0F93      		push r16
 148               	.LCFI2:
 149               		.cfi_def_cfa_offset 3
 150               		.cfi_offset 16, -2
 151 0002 1F93      		push r17
 152               	.LCFI3:
 153               		.cfi_def_cfa_offset 4
 154               		.cfi_offset 17, -3
 155               	/* prologue: function */
 156               	/* frame size = 0 */
 157               	/* stack size = 2 */
 158               	.L__stack_usage = 2
 159               	.LVL8:
  45:../../common/action_layer.c ****     default_layer_state_set(default_layer_state & state);
 160               		.loc 2 45 0
 161 0004 0091 0000 		lds r16,default_layer_state
 162 0008 1091 0000 		lds r17,default_layer_state+1
 163 000c 2091 0000 		lds r18,default_layer_state+2
 164 0010 3091 0000 		lds r19,default_layer_state+3
 165 0014 0623      		and r16,r22
 166 0016 1723      		and r17,r23
 167 0018 2823      		and r18,r24
 168 001a 3923      		and r19,r25
 169               	.LVL9:
 170               	.LBB14:
 171               	.LBB15:
  23:../../common/action_layer.c ****     default_layer_state = state;
 172               		.loc 2 23 0
 173 001c 0093 0000 		sts default_layer_state,r16
 174 0020 1093 0000 		sts default_layer_state+1,r17
 175 0024 2093 0000 		sts default_layer_state+2,r18
 176 0028 3093 0000 		sts default_layer_state+3,r19
 177               	/* epilogue start */
 178               	.LBE15:
 179               	.LBE14:
  46:../../common/action_layer.c **** }
 180               		.loc 2 46 0
 181 002c 1F91      		pop r17
 182 002e 0F91      		pop r16
 183               	.LVL10:
 184               	.LBB17:
 185               	.LBB16:
  25:../../common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 186               		.loc 2 25 0
 187 0030 0C94 0000 		jmp clear_keyboard_but_mods
 188               	.LVL11:
 189               	.LBE16:
 190               	.LBE17:
 191               		.cfi_endproc
 192               	.LFE10:
 194               		.section	.text.default_layer_xor,"ax",@progbits
 195               	.global	default_layer_xor
 197               	default_layer_xor:
 198               	.LFB11:
  47:../../common/action_layer.c **** void default_layer_xor(uint32_t state)
  48:../../common/action_layer.c **** {
 199               		.loc 2 48 0
 200               		.cfi_startproc
 201               	.LVL12:
 202 0000 0F93      		push r16
 203               	.LCFI4:
 204               		.cfi_def_cfa_offset 3
 205               		.cfi_offset 16, -2
 206 0002 1F93      		push r17
 207               	.LCFI5:
 208               		.cfi_def_cfa_offset 4
 209               		.cfi_offset 17, -3
 210               	/* prologue: function */
 211               	/* frame size = 0 */
 212               	/* stack size = 2 */
 213               	.L__stack_usage = 2
 214               	.LVL13:
  49:../../common/action_layer.c ****     default_layer_state_set(default_layer_state ^ state);
 215               		.loc 2 49 0
 216 0004 0091 0000 		lds r16,default_layer_state
 217 0008 1091 0000 		lds r17,default_layer_state+1
 218 000c 2091 0000 		lds r18,default_layer_state+2
 219 0010 3091 0000 		lds r19,default_layer_state+3
 220 0014 0627      		eor r16,r22
 221 0016 1727      		eor r17,r23
 222 0018 2827      		eor r18,r24
 223 001a 3927      		eor r19,r25
 224               	.LVL14:
 225               	.LBB20:
 226               	.LBB21:
  23:../../common/action_layer.c ****     default_layer_state = state;
 227               		.loc 2 23 0
 228 001c 0093 0000 		sts default_layer_state,r16
 229 0020 1093 0000 		sts default_layer_state+1,r17
 230 0024 2093 0000 		sts default_layer_state+2,r18
 231 0028 3093 0000 		sts default_layer_state+3,r19
 232               	/* epilogue start */
 233               	.LBE21:
 234               	.LBE20:
  50:../../common/action_layer.c **** }
 235               		.loc 2 50 0
 236 002c 1F91      		pop r17
 237 002e 0F91      		pop r16
 238               	.LVL15:
 239               	.LBB23:
 240               	.LBB22:
  25:../../common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 241               		.loc 2 25 0
 242 0030 0C94 0000 		jmp clear_keyboard_but_mods
 243               	.LVL16:
 244               	.LBE22:
 245               	.LBE23:
 246               		.cfi_endproc
 247               	.LFE11:
 249               		.section	.text.layer_clear,"ax",@progbits
 250               	.global	layer_clear
 252               	layer_clear:
 253               	.LFB13:
  51:../../common/action_layer.c **** #endif
  52:../../common/action_layer.c **** 
  53:../../common/action_layer.c **** 
  54:../../common/action_layer.c **** #ifndef NO_ACTION_LAYER
  55:../../common/action_layer.c **** /* 
  56:../../common/action_layer.c ****  * Keymap Layer State
  57:../../common/action_layer.c ****  */
  58:../../common/action_layer.c **** uint32_t layer_state = 0;
  59:../../common/action_layer.c **** 
  60:../../common/action_layer.c **** static void layer_state_set(uint32_t state)
  61:../../common/action_layer.c **** {
  62:../../common/action_layer.c ****     dprint("layer_state: ");
  63:../../common/action_layer.c ****     layer_debug(); dprint(" to ");
  64:../../common/action_layer.c ****     layer_state = state;
  65:../../common/action_layer.c ****     layer_debug(); dprintln();
  66:../../common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
  67:../../common/action_layer.c **** }
  68:../../common/action_layer.c **** 
  69:../../common/action_layer.c **** void layer_clear(void)
  70:../../common/action_layer.c **** {
 254               		.loc 2 70 0
 255               		.cfi_startproc
 256               	/* prologue: function */
 257               	/* frame size = 0 */
 258               	/* stack size = 0 */
 259               	.L__stack_usage = 0
 260               	.LVL17:
 261               	.LBB26:
 262               	.LBB27:
  64:../../common/action_layer.c ****     layer_state = state;
 263               		.loc 2 64 0
 264 0000 1092 0000 		sts layer_state,__zero_reg__
 265 0004 1092 0000 		sts layer_state+1,__zero_reg__
 266 0008 1092 0000 		sts layer_state+2,__zero_reg__
 267 000c 1092 0000 		sts layer_state+3,__zero_reg__
  66:../../common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 268               		.loc 2 66 0
 269 0010 0C94 0000 		jmp clear_keyboard_but_mods
 270               	.LVL18:
 271               	.LBE27:
 272               	.LBE26:
 273               		.cfi_endproc
 274               	.LFE13:
 276               		.section	.text.layer_move,"ax",@progbits
 277               	.global	layer_move
 279               	layer_move:
 280               	.LFB14:
  71:../../common/action_layer.c ****     layer_state_set(0);
  72:../../common/action_layer.c **** }
  73:../../common/action_layer.c **** 
  74:../../common/action_layer.c **** void layer_move(uint8_t layer)
  75:../../common/action_layer.c **** {
 281               		.loc 2 75 0
 282               		.cfi_startproc
 283               	.LVL19:
 284               	/* prologue: function */
 285               	/* frame size = 0 */
 286               	/* stack size = 0 */
 287               	.L__stack_usage = 0
  76:../../common/action_layer.c ****     layer_state_set(1UL<<layer);
 288               		.loc 2 76 0
 289 0000 41E0      		ldi r20,lo8(1)
 290 0002 50E0      		ldi r21,0
 291 0004 60E0      		ldi r22,0
 292 0006 70E0      		ldi r23,0
 293 0008 00C0      		rjmp 2f
 294               		1:
 295 000a 440F      		lsl r20
 296 000c 551F      		rol r21
 297 000e 661F      		rol r22
 298 0010 771F      		rol r23
 299               		2:
 300 0012 8A95      		dec r24
 301 0014 02F4      		brpl 1b
 302               	.LBB30:
 303               	.LBB31:
  64:../../common/action_layer.c ****     layer_state = state;
 304               		.loc 2 64 0
 305 0016 4093 0000 		sts layer_state,r20
 306 001a 5093 0000 		sts layer_state+1,r21
 307 001e 6093 0000 		sts layer_state+2,r22
 308 0022 7093 0000 		sts layer_state+3,r23
  66:../../common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 309               		.loc 2 66 0
 310 0026 0C94 0000 		jmp clear_keyboard_but_mods
 311               	.LVL20:
 312               	.LBE31:
 313               	.LBE30:
 314               		.cfi_endproc
 315               	.LFE14:
 317               		.section	.text.layer_on,"ax",@progbits
 318               	.global	layer_on
 320               	layer_on:
 321               	.LFB15:
  77:../../common/action_layer.c **** }
  78:../../common/action_layer.c **** 
  79:../../common/action_layer.c **** void layer_on(uint8_t layer)
  80:../../common/action_layer.c **** {
 322               		.loc 2 80 0
 323               		.cfi_startproc
 324               	.LVL21:
 325               	/* prologue: function */
 326               	/* frame size = 0 */
 327               	/* stack size = 0 */
 328               	.L__stack_usage = 0
  81:../../common/action_layer.c ****     layer_state_set(layer_state | (1UL<<layer));
 329               		.loc 2 81 0
 330 0000 41E0      		ldi r20,lo8(1)
 331 0002 50E0      		ldi r21,0
 332 0004 60E0      		ldi r22,0
 333 0006 70E0      		ldi r23,0
 334 0008 00C0      		rjmp 2f
 335               		1:
 336 000a 440F      		lsl r20
 337 000c 551F      		rol r21
 338 000e 661F      		rol r22
 339 0010 771F      		rol r23
 340               		2:
 341 0012 8A95      		dec r24
 342 0014 02F4      		brpl 1b
 343 0016 8091 0000 		lds r24,layer_state
 344 001a 9091 0000 		lds r25,layer_state+1
 345 001e A091 0000 		lds r26,layer_state+2
 346 0022 B091 0000 		lds r27,layer_state+3
 347               	.LVL22:
 348 0026 842B      		or r24,r20
 349 0028 952B      		or r25,r21
 350 002a A62B      		or r26,r22
 351 002c B72B      		or r27,r23
 352               	.LBB34:
 353               	.LBB35:
  64:../../common/action_layer.c ****     layer_state = state;
 354               		.loc 2 64 0
 355 002e 8093 0000 		sts layer_state,r24
 356 0032 9093 0000 		sts layer_state+1,r25
 357 0036 A093 0000 		sts layer_state+2,r26
 358 003a B093 0000 		sts layer_state+3,r27
 359               	.LVL23:
  66:../../common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 360               		.loc 2 66 0
 361 003e 0C94 0000 		jmp clear_keyboard_but_mods
 362               	.LVL24:
 363               	.LBE35:
 364               	.LBE34:
 365               		.cfi_endproc
 366               	.LFE15:
 368               		.section	.text.layer_off,"ax",@progbits
 369               	.global	layer_off
 371               	layer_off:
 372               	.LFB16:
  82:../../common/action_layer.c **** }
  83:../../common/action_layer.c **** 
  84:../../common/action_layer.c **** void layer_off(uint8_t layer)
  85:../../common/action_layer.c **** {
 373               		.loc 2 85 0
 374               		.cfi_startproc
 375               	.LVL25:
 376               	/* prologue: function */
 377               	/* frame size = 0 */
 378               	/* stack size = 0 */
 379               	.L__stack_usage = 0
  86:../../common/action_layer.c ****     layer_state_set(layer_state & ~(1UL<<layer));
 380               		.loc 2 86 0
 381 0000 41E0      		ldi r20,lo8(1)
 382 0002 50E0      		ldi r21,0
 383 0004 60E0      		ldi r22,0
 384 0006 70E0      		ldi r23,0
 385 0008 00C0      		rjmp 2f
 386               		1:
 387 000a 440F      		lsl r20
 388 000c 551F      		rol r21
 389 000e 661F      		rol r22
 390 0010 771F      		rol r23
 391               		2:
 392 0012 8A95      		dec r24
 393 0014 02F4      		brpl 1b
 394 0016 4095      		com r20
 395 0018 5095      		com r21
 396 001a 6095      		com r22
 397 001c 7095      		com r23
 398 001e 8091 0000 		lds r24,layer_state
 399 0022 9091 0000 		lds r25,layer_state+1
 400 0026 A091 0000 		lds r26,layer_state+2
 401 002a B091 0000 		lds r27,layer_state+3
 402               	.LVL26:
 403 002e 8423      		and r24,r20
 404 0030 9523      		and r25,r21
 405 0032 A623      		and r26,r22
 406 0034 B723      		and r27,r23
 407               	.LBB38:
 408               	.LBB39:
  64:../../common/action_layer.c ****     layer_state = state;
 409               		.loc 2 64 0
 410 0036 8093 0000 		sts layer_state,r24
 411 003a 9093 0000 		sts layer_state+1,r25
 412 003e A093 0000 		sts layer_state+2,r26
 413 0042 B093 0000 		sts layer_state+3,r27
 414               	.LVL27:
  66:../../common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 415               		.loc 2 66 0
 416 0046 0C94 0000 		jmp clear_keyboard_but_mods
 417               	.LVL28:
 418               	.LBE39:
 419               	.LBE38:
 420               		.cfi_endproc
 421               	.LFE16:
 423               		.section	.text.layer_invert,"ax",@progbits
 424               	.global	layer_invert
 426               	layer_invert:
 427               	.LFB17:
  87:../../common/action_layer.c **** }
  88:../../common/action_layer.c **** 
  89:../../common/action_layer.c **** void layer_invert(uint8_t layer)
  90:../../common/action_layer.c **** {
 428               		.loc 2 90 0
 429               		.cfi_startproc
 430               	.LVL29:
 431               	/* prologue: function */
 432               	/* frame size = 0 */
 433               	/* stack size = 0 */
 434               	.L__stack_usage = 0
  91:../../common/action_layer.c ****     layer_state_set(layer_state ^ (1UL<<layer));
 435               		.loc 2 91 0
 436 0000 41E0      		ldi r20,lo8(1)
 437 0002 50E0      		ldi r21,0
 438 0004 60E0      		ldi r22,0
 439 0006 70E0      		ldi r23,0
 440 0008 00C0      		rjmp 2f
 441               		1:
 442 000a 440F      		lsl r20
 443 000c 551F      		rol r21
 444 000e 661F      		rol r22
 445 0010 771F      		rol r23
 446               		2:
 447 0012 8A95      		dec r24
 448 0014 02F4      		brpl 1b
 449 0016 8091 0000 		lds r24,layer_state
 450 001a 9091 0000 		lds r25,layer_state+1
 451 001e A091 0000 		lds r26,layer_state+2
 452 0022 B091 0000 		lds r27,layer_state+3
 453               	.LVL30:
 454 0026 8427      		eor r24,r20
 455 0028 9527      		eor r25,r21
 456 002a A627      		eor r26,r22
 457 002c B727      		eor r27,r23
 458               	.LBB42:
 459               	.LBB43:
  64:../../common/action_layer.c ****     layer_state = state;
 460               		.loc 2 64 0
 461 002e 8093 0000 		sts layer_state,r24
 462 0032 9093 0000 		sts layer_state+1,r25
 463 0036 A093 0000 		sts layer_state+2,r26
 464 003a B093 0000 		sts layer_state+3,r27
 465               	.LVL31:
  66:../../common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 466               		.loc 2 66 0
 467 003e 0C94 0000 		jmp clear_keyboard_but_mods
 468               	.LVL32:
 469               	.LBE43:
 470               	.LBE42:
 471               		.cfi_endproc
 472               	.LFE17:
 474               		.section	.text.layer_or,"ax",@progbits
 475               	.global	layer_or
 477               	layer_or:
 478               	.LFB18:
  92:../../common/action_layer.c **** }
  93:../../common/action_layer.c **** 
  94:../../common/action_layer.c **** void layer_or(uint32_t state)
  95:../../common/action_layer.c **** {
 479               		.loc 2 95 0
 480               		.cfi_startproc
 481               	.LVL33:
 482 0000 0F93      		push r16
 483               	.LCFI6:
 484               		.cfi_def_cfa_offset 3
 485               		.cfi_offset 16, -2
 486 0002 1F93      		push r17
 487               	.LCFI7:
 488               		.cfi_def_cfa_offset 4
 489               		.cfi_offset 17, -3
 490               	/* prologue: function */
 491               	/* frame size = 0 */
 492               	/* stack size = 2 */
 493               	.L__stack_usage = 2
 494               	.LVL34:
  96:../../common/action_layer.c ****     layer_state_set(layer_state | state);
 495               		.loc 2 96 0
 496 0004 0091 0000 		lds r16,layer_state
 497 0008 1091 0000 		lds r17,layer_state+1
 498 000c 2091 0000 		lds r18,layer_state+2
 499 0010 3091 0000 		lds r19,layer_state+3
 500 0014 062B      		or r16,r22
 501 0016 172B      		or r17,r23
 502 0018 282B      		or r18,r24
 503 001a 392B      		or r19,r25
 504               	.LVL35:
 505               	.LBB46:
 506               	.LBB47:
  64:../../common/action_layer.c ****     layer_state = state;
 507               		.loc 2 64 0
 508 001c 0093 0000 		sts layer_state,r16
 509 0020 1093 0000 		sts layer_state+1,r17
 510 0024 2093 0000 		sts layer_state+2,r18
 511 0028 3093 0000 		sts layer_state+3,r19
 512               	/* epilogue start */
 513               	.LBE47:
 514               	.LBE46:
  97:../../common/action_layer.c **** }
 515               		.loc 2 97 0
 516 002c 1F91      		pop r17
 517 002e 0F91      		pop r16
 518               	.LVL36:
 519               	.LBB49:
 520               	.LBB48:
  66:../../common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 521               		.loc 2 66 0
 522 0030 0C94 0000 		jmp clear_keyboard_but_mods
 523               	.LVL37:
 524               	.LBE48:
 525               	.LBE49:
 526               		.cfi_endproc
 527               	.LFE18:
 529               		.section	.text.layer_and,"ax",@progbits
 530               	.global	layer_and
 532               	layer_and:
 533               	.LFB19:
  98:../../common/action_layer.c **** void layer_and(uint32_t state)
  99:../../common/action_layer.c **** {
 534               		.loc 2 99 0
 535               		.cfi_startproc
 536               	.LVL38:
 537 0000 0F93      		push r16
 538               	.LCFI8:
 539               		.cfi_def_cfa_offset 3
 540               		.cfi_offset 16, -2
 541 0002 1F93      		push r17
 542               	.LCFI9:
 543               		.cfi_def_cfa_offset 4
 544               		.cfi_offset 17, -3
 545               	/* prologue: function */
 546               	/* frame size = 0 */
 547               	/* stack size = 2 */
 548               	.L__stack_usage = 2
 549               	.LVL39:
 100:../../common/action_layer.c ****     layer_state_set(layer_state & state);
 550               		.loc 2 100 0
 551 0004 0091 0000 		lds r16,layer_state
 552 0008 1091 0000 		lds r17,layer_state+1
 553 000c 2091 0000 		lds r18,layer_state+2
 554 0010 3091 0000 		lds r19,layer_state+3
 555 0014 0623      		and r16,r22
 556 0016 1723      		and r17,r23
 557 0018 2823      		and r18,r24
 558 001a 3923      		and r19,r25
 559               	.LVL40:
 560               	.LBB52:
 561               	.LBB53:
  64:../../common/action_layer.c ****     layer_state = state;
 562               		.loc 2 64 0
 563 001c 0093 0000 		sts layer_state,r16
 564 0020 1093 0000 		sts layer_state+1,r17
 565 0024 2093 0000 		sts layer_state+2,r18
 566 0028 3093 0000 		sts layer_state+3,r19
 567               	/* epilogue start */
 568               	.LBE53:
 569               	.LBE52:
 101:../../common/action_layer.c **** }
 570               		.loc 2 101 0
 571 002c 1F91      		pop r17
 572 002e 0F91      		pop r16
 573               	.LVL41:
 574               	.LBB55:
 575               	.LBB54:
  66:../../common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 576               		.loc 2 66 0
 577 0030 0C94 0000 		jmp clear_keyboard_but_mods
 578               	.LVL42:
 579               	.LBE54:
 580               	.LBE55:
 581               		.cfi_endproc
 582               	.LFE19:
 584               		.section	.text.layer_xor,"ax",@progbits
 585               	.global	layer_xor
 587               	layer_xor:
 588               	.LFB20:
 102:../../common/action_layer.c **** void layer_xor(uint32_t state)
 103:../../common/action_layer.c **** {
 589               		.loc 2 103 0
 590               		.cfi_startproc
 591               	.LVL43:
 592 0000 0F93      		push r16
 593               	.LCFI10:
 594               		.cfi_def_cfa_offset 3
 595               		.cfi_offset 16, -2
 596 0002 1F93      		push r17
 597               	.LCFI11:
 598               		.cfi_def_cfa_offset 4
 599               		.cfi_offset 17, -3
 600               	/* prologue: function */
 601               	/* frame size = 0 */
 602               	/* stack size = 2 */
 603               	.L__stack_usage = 2
 604               	.LVL44:
 104:../../common/action_layer.c ****     layer_state_set(layer_state ^ state);
 605               		.loc 2 104 0
 606 0004 0091 0000 		lds r16,layer_state
 607 0008 1091 0000 		lds r17,layer_state+1
 608 000c 2091 0000 		lds r18,layer_state+2
 609 0010 3091 0000 		lds r19,layer_state+3
 610 0014 0627      		eor r16,r22
 611 0016 1727      		eor r17,r23
 612 0018 2827      		eor r18,r24
 613 001a 3927      		eor r19,r25
 614               	.LVL45:
 615               	.LBB58:
 616               	.LBB59:
  64:../../common/action_layer.c ****     layer_state = state;
 617               		.loc 2 64 0
 618 001c 0093 0000 		sts layer_state,r16
 619 0020 1093 0000 		sts layer_state+1,r17
 620 0024 2093 0000 		sts layer_state+2,r18
 621 0028 3093 0000 		sts layer_state+3,r19
 622               	/* epilogue start */
 623               	.LBE59:
 624               	.LBE58:
 105:../../common/action_layer.c **** }
 625               		.loc 2 105 0
 626 002c 1F91      		pop r17
 627 002e 0F91      		pop r16
 628               	.LVL46:
 629               	.LBB61:
 630               	.LBB60:
  66:../../common/action_layer.c ****     clear_keyboard_but_mods(); // To avoid stuck keys
 631               		.loc 2 66 0
 632 0030 0C94 0000 		jmp clear_keyboard_but_mods
 633               	.LVL47:
 634               	.LBE60:
 635               	.LBE61:
 636               		.cfi_endproc
 637               	.LFE20:
 639               		.section	.text.layer_debug,"ax",@progbits
 640               	.global	layer_debug
 642               	layer_debug:
 643               	.LFB21:
 106:../../common/action_layer.c **** 
 107:../../common/action_layer.c **** void layer_debug(void)
 108:../../common/action_layer.c **** {
 644               		.loc 2 108 0
 645               		.cfi_startproc
 646               	/* prologue: function */
 647               	/* frame size = 0 */
 648               	/* stack size = 0 */
 649               	.L__stack_usage = 0
 650 0000 0895      		ret
 651               		.cfi_endproc
 652               	.LFE21:
 654               		.section	.text.layer_switch_get_action,"ax",@progbits
 655               	.global	layer_switch_get_action
 657               	layer_switch_get_action:
 658               	.LFB22:
 109:../../common/action_layer.c ****     dprintf("%08lX(%u)", layer_state, biton32(layer_state));
 110:../../common/action_layer.c **** }
 111:../../common/action_layer.c **** #endif
 112:../../common/action_layer.c **** 
 113:../../common/action_layer.c **** 
 114:../../common/action_layer.c **** 
 115:../../common/action_layer.c **** action_t layer_switch_get_action(keypos_t key)
 116:../../common/action_layer.c **** {
 659               		.loc 2 116 0
 660               		.cfi_startproc
 661               	.LVL48:
 662               		.loc 2 116 0
 663 0000 CF92      		push r12
 664               	.LCFI12:
 665               		.cfi_def_cfa_offset 3
 666               		.cfi_offset 12, -2
 667 0002 DF92      		push r13
 668               	.LCFI13:
 669               		.cfi_def_cfa_offset 4
 670               		.cfi_offset 13, -3
 671 0004 EF92      		push r14
 672               	.LCFI14:
 673               		.cfi_def_cfa_offset 5
 674               		.cfi_offset 14, -4
 675 0006 FF92      		push r15
 676               	.LCFI15:
 677               		.cfi_def_cfa_offset 6
 678               		.cfi_offset 15, -5
 679 0008 0F93      		push r16
 680               	.LCFI16:
 681               		.cfi_def_cfa_offset 7
 682               		.cfi_offset 16, -6
 683 000a 1F93      		push r17
 684               	.LCFI17:
 685               		.cfi_def_cfa_offset 8
 686               		.cfi_offset 17, -7
 687 000c CF93      		push r28
 688               	.LCFI18:
 689               		.cfi_def_cfa_offset 9
 690               		.cfi_offset 28, -8
 691 000e DF93      		push r29
 692               	.LCFI19:
 693               		.cfi_def_cfa_offset 10
 694               		.cfi_offset 29, -9
 695               	/* prologue: function */
 696               	/* frame size = 0 */
 697               	/* stack size = 8 */
 698               	.L__stack_usage = 8
 699 0010 EC01      		movw r28,r24
 700               	.LVL49:
 117:../../common/action_layer.c ****     action_t action;
 118:../../common/action_layer.c ****     action.code = ACTION_TRANSPARENT;
 119:../../common/action_layer.c **** 
 120:../../common/action_layer.c **** #ifndef NO_ACTION_LAYER
 121:../../common/action_layer.c ****     uint32_t layers = layer_state | default_layer_state;
 701               		.loc 2 121 0
 702 0012 C090 0000 		lds r12,default_layer_state
 703 0016 D090 0000 		lds r13,default_layer_state+1
 704 001a E090 0000 		lds r14,default_layer_state+2
 705 001e F090 0000 		lds r15,default_layer_state+3
 706 0022 8091 0000 		lds r24,layer_state
 707 0026 9091 0000 		lds r25,layer_state+1
 708 002a A091 0000 		lds r26,layer_state+2
 709 002e B091 0000 		lds r27,layer_state+3
 710               	.LVL50:
 711 0032 C82A      		or r12,r24
 712 0034 D92A      		or r13,r25
 713 0036 EA2A      		or r14,r26
 714 0038 FB2A      		or r15,r27
 715               	.LVL51:
 716 003a 0FE1      		ldi r16,lo8(31)
 717 003c 10E0      		ldi r17,0
 718               	.LVL52:
 719               	.L21:
 720               	.LBB62:
 122:../../common/action_layer.c ****     /* check top layer first */
 123:../../common/action_layer.c ****     for (int8_t i = 31; i >= 0; i--) {
 124:../../common/action_layer.c ****         if (layers & (1UL<<i)) {
 721               		.loc 2 124 0
 722 003e B701      		movw r22,r14
 723 0040 A601      		movw r20,r12
 724 0042 002E      		mov r0,r16
 725 0044 00C0      		rjmp 2f
 726               		1:
 727 0046 7695      		lsr r23
 728 0048 6795      		ror r22
 729 004a 5795      		ror r21
 730 004c 4795      		ror r20
 731               		2:
 732 004e 0A94      		dec r0
 733 0050 02F4      		brpl 1b
 734 0052 40FF      		sbrs r20,0
 735 0054 00C0      		rjmp .L18
 125:../../common/action_layer.c ****             action = action_for_key(i, key);
 736               		.loc 2 125 0
 737 0056 BE01      		movw r22,r28
 738 0058 802F      		mov r24,r16
 739 005a 0E94 0000 		call action_for_key
 740               	.LVL53:
 126:../../common/action_layer.c ****             if (action.code != ACTION_TRANSPARENT) {
 741               		.loc 2 126 0
 742 005e 8130      		cpi r24,1
 743 0060 9105      		cpc r25,__zero_reg__
 744 0062 01F4      		brne .L19
 745               	.LVL54:
 746               	.L18:
 747               	.LVL55:
 748 0064 0150      		subi r16,1
 749 0066 1109      		sbc r17,__zero_reg__
 750 0068 00F4      		brcc .L21
 751               	.LBE62:
 127:../../common/action_layer.c ****                 return action;
 128:../../common/action_layer.c ****             }
 129:../../common/action_layer.c ****         }
 130:../../common/action_layer.c ****     }
 131:../../common/action_layer.c ****     /* fall back to layer 0 */
 132:../../common/action_layer.c ****     action = action_for_key(0, key);
 752               		.loc 2 132 0
 753 006a BE01      		movw r22,r28
 754 006c 80E0      		ldi r24,0
 755 006e 0E94 0000 		call action_for_key
 756               	.LVL56:
 757               	.L19:
 758               	.LVL57:
 759               	/* epilogue start */
 133:../../common/action_layer.c ****     return action;
 134:../../common/action_layer.c **** #else
 135:../../common/action_layer.c ****     action = action_for_key(biton32(default_layer_state), key);
 136:../../common/action_layer.c ****     return action;
 137:../../common/action_layer.c **** #endif
 138:../../common/action_layer.c **** }
 760               		.loc 2 138 0
 761 0072 DF91      		pop r29
 762 0074 CF91      		pop r28
 763               	.LVL58:
 764 0076 1F91      		pop r17
 765 0078 0F91      		pop r16
 766 007a FF90      		pop r15
 767 007c EF90      		pop r14
 768 007e DF90      		pop r13
 769 0080 CF90      		pop r12
 770               	.LVL59:
 771 0082 0895      		ret
 772               		.cfi_endproc
 773               	.LFE22:
 775               	.global	layer_state
 776               		.section .bss
 779               	layer_state:
 780 0000 0000 0000 		.zero	4
 781               	.global	default_layer_state
 784               	default_layer_state:
 785 0004 0000 0000 		.zero	4
 786               		.text
 787               	.Letext0:
 788               		.file 3 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
 789               		.file 4 "../../common/action_code.h"
 790               		.file 5 "../../common/action.h"
DEFINED SYMBOLS
                            *ABS*:00000000 action_layer.c
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:2      *ABS*:0000003e __SP_H__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:3      *ABS*:0000003d __SP_L__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:4      *ABS*:0000003f __SREG__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:6      *ABS*:00000001 __zero_reg__
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:13     .text.matrix_power_up:00000000 matrix_power_up
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:29     .text.matrix_power_down:00000000 matrix_power_down
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:44     .text.default_layer_debug:00000000 default_layer_debug
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:60     .text.default_layer_set:00000000 default_layer_set
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:784    .bss:00000004 default_layer_state
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:87     .text.default_layer_or:00000000 default_layer_or
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:142    .text.default_layer_and:00000000 default_layer_and
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:197    .text.default_layer_xor:00000000 default_layer_xor
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:252    .text.layer_clear:00000000 layer_clear
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:779    .bss:00000000 layer_state
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:279    .text.layer_move:00000000 layer_move
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:320    .text.layer_on:00000000 layer_on
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:371    .text.layer_off:00000000 layer_off
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:426    .text.layer_invert:00000000 layer_invert
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:477    .text.layer_or:00000000 layer_or
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:532    .text.layer_and:00000000 layer_and
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:587    .text.layer_xor:00000000 layer_xor
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:642    .text.layer_debug:00000000 layer_debug
/var/folders/1n/7_pxd1gd79b8r2krz1090vjm0000gn/T//ccGiv3Ok.s:657    .text.layer_switch_get_action:00000000 layer_switch_get_action

UNDEFINED SYMBOLS
clear_keyboard_but_mods
action_for_key
__do_clear_bss
